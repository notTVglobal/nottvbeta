{"version":3,"file":"js/7727.js","mappings":"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","sources":["webpack:///./resources/js/Stores/TeamStore.js","webpack:///./resources/js/Utilities/PageSetup.js","webpack:///./resources/js/Components/Global/Modals/Messages.vue?dfe9","webpack:///./resources/js/Components/Global/Modals/Messages.vue","webpack:///./resources/js/Components/Pages/ShowEpisodes/Layout/EpisodeFooter.vue?56db","webpack:///./resources/js/Components/Pages/ShowEpisodes/Layout/EpisodeFooter.vue","webpack:///./resources/js/Pages/Shows/{$id}/Episodes/{$id}/Index.vue?ac19","webpack:///./resources/js/Pages/Shows/{$id}/Episodes/{$id}/Index.vue"],"sourcesContent":["import {defineStore} from \"pinia\";\nimport {Inertia} from \"@inertiajs/inertia\";\n\nconst initialState = () => ({\n    id: 0,\n    name: '',\n    description: '',\n    slug: '',\n    totalSpots: '',\n    memberSpots: '',\n    teamCreator: [],\n    teamLeader: [],\n    members: [],\n    managers: [],\n    activeShow: [],\n    activeEpisode: [],\n    creators: [],\n    showModal: Boolean,\n    confirmDialog: false,\n    confirmManagerDialog: false,\n    selectedManagerName: '',\n    selectedManagerId: 0,\n    addManager: false,\n    removeManager: false,\n    deleteMemberName: '',\n    deleteMemberId: 0,\n    noteEdit: 0,\n    note: '',\n    saveNoteProcessing: Boolean,\n    // on the show episode manage page\n    // turn on the go live div\n    goLiveDisplay: false,\n    can: [],\n    openComponent: 'teamShows',\n})\n\nexport const useTeamStore = defineStore('teamStore', {\n    state: initialState,\n    actions: {\n        reset() {\n            // Reset the store to its original state (clear all data)\n            Object.assign(this, initialState());\n        },\n        // async fill() {\n        //     let r = await import('@/Json/team.json');\n        //     this.$state = r.default;\n        // },\n        setActiveTeam(team) {\n            this.id = team.id;\n            this.name = team.name;\n            this.description = team.description;\n            this.slug = team.slug;\n            this.totalSpots = team.totalSpots;\n            this.memberSpots = team.memberSpots;\n        },\n        setActiveShow(show) {\n            this.activeShow = show;\n        },\n        setActiveEpisode(episode) {\n            this.activeShow = episode;\n        },\n        // getCreators() {\n        //     Inertia.reload({ only: ['creators'] })\n        // },\n        deleteTeamMemberCancel() {\n            this.confirmDialog = false;\n        },\n        confirmTeamManagerCancel() {\n            this.confirmManagerDialog = false;\n        },\n        // loadTeamMembers(members){\n        //     this.members = members;\n        // }\n        deleteTeamMember() {\n            Inertia.visit(route('teams.removeTeamMember'), {\n                method: 'post',\n                data: {\n                    user_id: this.deleteMemberId,\n                    team_id: this.id,\n                    team_slug: this.slug\n                },\n            })\n        },\n        addTeamManager() {\n            Inertia.visit(route('teams.addTeamManager'), {\n                method: 'post',\n                data: {\n                    user_id: this.selectedManagerId,\n                    team_id: this.id,\n                    team_slug: this.slug\n                },\n            })\n            this.confirmManagerDialog = false;\n        },\n        removeTeamManager() {\n            Inertia.visit(route('teams.removeTeamManager'), {\n                method: 'post',\n                data: {\n                    user_id: this.selectedManagerId,\n                    team_id: this.id,\n                    team_slug: this.slug\n                },\n            })\n            this.confirmManagerDialog = false;\n        },\n        toggleGoLiveDisplay() {\n            this.goLiveDisplay = ! this.goLiveDisplay;\n        }\n    },\n\n    getters: {\n        spotsRemaining() {\n            if (this.totalSpots - this.memberSpots < 1){\n                return 0\n            }\n            return this.totalSpots - this.memberSpots;\n        },\n    }\n});\n\n\n// Another option for declaring specific data to return:\n// let data = r.default;\n//\n// import('@/Json/team.json').then(r => {\n// this.$patch({\n//     name: data.name,\n//     spots: data.spots,\n//     members: data.members\n// });\n// });\n","import { onBeforeMount, onMounted } from 'vue'\nimport { useUserStore } from \"@/Stores/UserStore\"\nimport { useAppSettingStore } from \"@/Stores/AppSettingStore\"\nimport { useVideoPlayerStore } from \"@/Stores/VideoPlayerStore\"\nimport { Inertia } from \"@inertiajs/inertia\"\n\nexport function usePageSetup(pageName) {\n    const userStore = useUserStore()\n    const appSettingStore = useAppSettingStore()\n    const videoPlayerStore = useVideoPlayerStore()\n\n    appSettingStore.currentPage = pageName\n    appSettingStore.showFlashMessage = true\n    appSettingStore.pageIsHidden = false\n\n    if (userStore.isMobile) {\n        appSettingStore.ott = 0\n    }\n\n    videoPlayerStore.makeVideoTopRight()\n\n    let reloadPage = () => {\n        if (appSettingStore.pageReload) {\n            appSettingStore.pageReload = false\n            window.location.reload(true);\n        }\n    };\n\n    onBeforeMount(() => {\n        reloadPage()\n    });\n\n    onMounted(() => {\n        // Check if the URL contains query strings\n        const hasQueryStrings = window.location.search !== '';\n\n        // Only scroll into view if there are no query strings\n        if (!hasQueryStrings) {\n            const topDiv = document.getElementById(\"topDiv\")\n            if (topDiv) {\n                topDiv.scrollIntoView()\n            }\n        }\n        // Only update if we're not already on this page to avoid overwriting with the current URL\n        appSettingStore.setPrevUrl()\n        appSettingStore.noLayout = false\n        Inertia.reload()\n\n    });\n}\n","import script from \"./Messages.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Messages.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n  <div class=\"mx-4 my-4\">\n    <div class=\"alert alert-info mt-4\"\n         v-if=\"props.flash.message\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" class=\"stroke-current shrink-0 w-6 h-6\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n              d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"></path>\n      </svg>\n      <span>{{ props.flash.message }}</span>\n      <button class=\"text-xs ml-12\" @click=\"clearFlashMessage\"> Close</button>\n    </div>\n    <div class=\"alert alert-success mt-4 mx-3\"\n         v-if=\"props.flash.success\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"stroke-current shrink-0 h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n              d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"/>\n      </svg>\n      <span>{{ props.flash.success }}</span>\n      <button class=\"text-xs ml-12\" @click=\"clearFlashMessage\"> Close</button>\n    </div>\n    <div class=\"alert alert-warning mt-4 mx-3\"\n         v-if=\"props.flash.warning\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"stroke-current shrink-0 h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n              d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z\"/>\n      </svg>\n      <span>{{ props.flash.warning }}</span>\n      <button class=\"text-xs ml-12\" @click=\"clearFlashMessage\"> Close</button>\n    </div>\n    <div class=\"alert alert-error mt-4 mx-3\"\n         v-if=\"props.flash.error\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"stroke-current shrink-0 h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n              d=\"M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z\"/>\n      </svg>\n      <span>{{ props.flash.error }}</span>\n      <button class=\"text-xs ml-12\" @click=\"clearFlashMessage\"> Close</button>\n    </div>\n  </div>\n\n</template>\n\n<script setup>\nimport { Inertia } from \"@inertiajs/inertia\"\nimport { computed } from \"vue\"\nimport { useAppSettingStore } from \"@/Stores/AppSettingStore\"\n\nconst appSettingStore = useAppSettingStore()\n\nappSettingStore.showFlashMessage = true\n\nlet props = defineProps({\n  flash: Object,\n\n})\n\nconst messageType = computed(() => ({\n  'text-green-700 bg-green-100 dark:bg-green-200 dark:text-green-800': props.flash.success,\n  'text-blue-700 bg-blue-100 dark:bg-blue-200 dark:text-blue-800': props.flash.message,\n  'text-orange-700 bg-orange-100 dark:bg-orange-200 dark:text-orange-800': props.flash.warning,\n  'text-red-700 bg-red-100 dark:bg-red-200 dark:text-red-800': props.flash.error,\n}))\n\nconst clearFlashMessage = async () => {\n  await Inertia.post(route('flash.clear'));\n  Inertia.reload();\n};\n</script>\n","import script from \"./EpisodeFooter.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./EpisodeFooter.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n\n  <div class=\"flex justify-between mt-6\">\n    <!-- Paginator -->\n    <!--                            <Pagination :links=\"`#`\" class=\"mt-6\"/>-->\n    <div>\n      <div v-if=\"can.editEpisode\"><span class=\"text-xs uppercase font-semibold\">Episode ID: </span><span\n          class=\"text-xs\">{{ episode.ulid }}</span></div>\n    </div>\n    <div>\n      <Link :href=\"`/teams/${team.slug}`\" class=\"text-blue-500 hover:text-blue-700 ml-2 uppercase\">{{ team.name }} ©\n        <span v-if=\"show.last_release_year > 0\">{{ show.first_release_year }}-{{ show.last_release_year }}</span>\n        <span v-if=\"!show.last_release_year && show.first_release_year\">{{ show.first_release_year }}</span>\n        <span v-if=\"!show.last_release_year && !show.first_release_year\">{{ currentYear }}</span>\n      </Link>\n    </div>\n  </div>\n\n</template>\n\n<script setup>\n\ndefineProps({\n  team: Object,\n  episode: Object,\n  show: Object,\n  can: Object,\n})\n\nlet currentYear = new Date().getFullYear()\n\n</script>\n","import script from \"./Index.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Index.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n\n  <Head :title=\"`${props.show.name}: ${props.episode.name}`\"/>\n\n\n  <div class=\"place-self-center flex flex-col gap-y-3 overflow-x-hidden\">\n    <div id=\"topDiv\" class=\"text-white bg-gray-900 rounded py-5 mb-10\">\n\n      <Message v-if=\"appSettingStore.showFlashMessage\" :flash=\"$page.props.flash\"/>\n\n      <div v-if=\"props.can.editShow || props.can.manageShow\"\n           class=\"flex flex-end flex-wrap-reverse justify-end gap-2 mr-4 py-5\">\n        <div>\n          <button\n              v-if=\"props.can.manageShow\"\n              @click=\"appSettingStore.btnRedirect(`/shows/${props.show.slug}/episode/${props.episode.slug}/manage`)\"\n              class=\"px-4 py-2 text-white bg-orange-600 hover:bg-orange-500 rounded-lg\"\n          >Manage Episode\n          </button>\n        </div>\n        <div>\n          <button\n              v-if=\"props.can.editShow\"\n              @click=\"appSettingStore.btnRedirect(`/shows/${props.show.slug}/episode/${props.episode.slug}/edit`)\"\n              class=\"px-4 py-2 text-white bg-blue-600 hover:bg-blue-500 rounded-lg\"\n          >Edit\n          </button>\n        </div>\n        <div>\n          <button\n              v-if=\"props.can.manageShow\"\n              @click=\"appSettingStore.btnRedirect(`/shows/${props.show.slug}/manage`)\"\n              class=\"px-4 py-2 text-white bg-blue-600 hover:bg-blue-500 rounded-lg\"\n          >Manage Show\n          </button>\n        </div>\n      </div>\n\n      <header class=\"p-5 mb-6\">\n        <div class=\"flex flex-wrap justify-between px-5\">\n          <div class=\"\">\n            <div class=\"mb-4\">\n              <h3 class=\"mb-1 inline-flex items-center text-3xl font-semibold hover:text-blue-500 relative\">\n                <Link :href=\"`/shows/${props.show.slug}/`\">\n\n                  {{ props.show.name }}\n\n                </Link>\n\n\n              </h3>\n              <div class=\"mb-1\">\n                                    <span class=\"font-semibold text-xl\">\n                                        {{ props.episode.name }}\n                                        </span>\n              </div>\n              <div class=\"text-xs space-y-1\">\n                <span class=\"uppercase\">Episode Number: </span>\n                <span v-if=\"!episode.episode_number\">{{ episode.id }}</span>\n                <span v-if=\"props.episode.episode_number\">{{ props.episode.episode_number }}</span>\n              </div>\n            </div>\n            <div v-if=\"props.episode.release_dateTime\">\n              {{ formatDate(props.episode.release_dateTime) }}\n            </div>\n\n          </div>\n\n          <div class=\"flex flex-col justify-end\">\n            <div class=\"\">\n              <span class=\"text-xs uppercase\">Category: </span>\n              <span class=\"text-sm uppercase font-semibold\">{{ props.show.categoryName }}</span>\n            </div>\n            <div class=\"pb-4 hidden\">\n              <span class=\"text-xs uppercase\">Sub-category: </span>\n              <span class=\"text-sm uppercase font-semibold\">{{ props.show.categorySubName }}</span>\n            </div>\n            <div v-if=\"props.can.viewCreator\">\n              <span class=\"text-xs uppercase\">Team:</span>\n              <Link :href=\"`/teams/${props.team.slug}`\" class=\"text-blue-300 hover:text-blue-500 ml-2\"><span\n                  class=\"text-sm uppercase font-semibold\">{{ props.team.name }}</span></Link>\n            </div>\n          </div>\n\n        </div>\n\n        <p v-if=\"episode.video.upload_status === 'processing' && !episode.video.video_url\"\n           class=\"mt-12 px-3 py-3 text-gray-50 mr-1 lg:mr-36 bg-black w-full text-center lg:text-left\">\n          The episode video is currently processing. Please check back later.\n        </p>\n\n        <div class=\"flex flex-wrap mt-12 m-auto lg:mx-0 justify-center lg:justify-start space-x-3 space-y-3\">\n          <div></div>\n          <button v-if=\"episode.video.storage_location === 'spaces' || episode.video.video_url\"\n                  :disabled=\"episode.video.upload_status === 'processing' && !episode.video.video_url\"\n                  class=\"flex bg-blue-500 text-white font-semibold ml-4 px-4 py-4 hover:bg-blue-700 rounded transition ease-in-out duration-150 items-center disabled:bg-gray-600 disabled:cursor-not-allowed\"\n                  @click=\"playEpisode\">\n            <svg class=\"w-6 h-6 fill-current\" xmlns=\"http://www.w3.org/2000/svg\"\n                 viewBox=\"0 0 485 485\">\n              <path d=\"M413.974,71.026C368.171,25.225,307.274,0,242.5,0S116.829,25.225,71.026,71.026C25.225,116.829,0,177.726,0,242.5\n\t\ts25.225,125.671,71.026,171.474C116.829,459.775,177.726,485,242.5,485s125.671-25.225,171.474-71.026\n\t\tC459.775,368.171,485,307.274,485,242.5S459.775,116.829,413.974,71.026z M242.5,455C125.327,455,30,359.673,30,242.5\n\t\tS125.327,30,242.5,30S455,125.327,455,242.5S359.673,455,242.5,455z\"/>\n              <polygon points=\"181.062,336.575 343.938,242.5 181.062,148.425 \t\"/>\n            </svg>\n            <span v-if=\"videoPlayerStore.nowPlayingName === props.episode.name\" class=\"ml-2\">Now Playing</span>\n            <span v-else class=\"ml-2\">Watch Episode</span>\n          </button>\n\n          <button disabled\n                  class=\"flex bg-blue-500 text-white font-semibold ml-4 px-4 py-4 hover:bg-blue-400 rounded transition ease-in-out duration-150 items-center disabled:bg-gray-600 disabled:cursor-not-allowed\">\n            <span class=\"\"><font-awesome-icon icon=\"fa-circle-down\" class=\"mr-2\"/>Save For Later</span>\n          </button>\n\n          <button disabled\n                  class=\"flex bg-blue-500 text-white font-semibold ml-4 px-4 py-4 hover:bg-blue-400 rounded transition ease-in-out duration-150 items-center disabled:bg-gray-600 disabled:cursor-not-allowed\">\n            <span class=\"\"><font-awesome-icon icon=\"fa-share\" class=\"mr-2\"/>Share</span>\n          </button>\n\n        </div>\n\n      </header>\n\n      <div class=\"my-6 p-5\">\n        <div class=\"font-semibold text-xs uppercase mb-3\">EPISODE DESCRIPTION</div>\n        <div>{{ props.episode.description }}</div>\n      </div>\n\n\n      <div\n          class=\"flex flex-wrap justify-center shadow overflow-hidden border-y border-gray-200 w-full bg-black text-light text-2xl sm:rounded-lg p-5\">\n        <!--            <div class=\"flex flex-wrap items-start ml-5 py-0\">-->\n        <div class=\"max-w-[50%] ml-5 py-0\">\n          <SingleImage :image=\"image\" :key=\"image\"/>\n\n        </div>\n\n        <!--                                <img :src=\"'/storage/images/' + props.episode.poster\" alt=\"\" class=\"w-1/2 mx-2\">-->\n\n\n      </div>\n\n      <div class=\"flex flex-col px-5\">\n        <div class=\"-my-2 overflow-x-auto sm:-mx-6 lg:-mx-8\">\n          <div class=\"py-2 align-middle inline-block min-w-full sm:px-6 lg:px-8\">\n\n            <div class=\"mb-6 p-5\">\n\n              <div class=\"w-full bg-gray-800 text-2xl p-4 mb-8\">BONUS CONTENT</div>\n              <div class=\"mb-8 p-4\">\n                <span\n                    class=\"text-orange-500\">Bonus content will go here. This includes content mentioned in an episode.</span>\n              </div>\n\n              <div class=\"w-full bg-gray-800 text-2xl p-4 mb-8\">CREDITS</div>\n\n\n              <div class=\"flex flex-row flex-wrap\">\n                <div v-for=\"creator in props.creators.data\"\n                     :key=\"creator.id\"\n                     class=\"pb-8 light:bg-light dark:bg-gray-900\">\n\n                  <div class=\"flex flex-col min-w-[8rem] px-6 py-4 font-medium break-words grow-0\">\n                    <img :src=\"'/storage/' + creator.profile_photo_path\"\n                         class=\"pb-2 rounded-full h-32 w-32 object-cover mb-2\">\n                    <span class=\"light:text-gray-800 dark:text-gray-200 w-full text-center\">{{ creator.name }}</span>\n                  </div>\n\n                  <!--                            For now, we are just displaying the team members here.\n                                                  This will make a good component that can be re-used across\n                                                  the Show and Episode Index pages. Just pass in the creators prop.\n\n                                                  We will add this when we have our Creators model setup\n                                                  and creators attached to the credits table for this\n                                                  show.                                                       -->\n\n                  <!--                            <ShowCreatorsList />-->\n\n                </div>\n              </div>\n\n            </div>\n\n            <EpisodeFooter :can=\"props.can\" :team=\"props.team\" :epsiode=\"props.episode\" :show=\"props.show\"/>\n          </div>\n        </div>\n      </div>\n\n    </div>\n  </div>\n\n</template>\n\n\n<script setup>\nimport { Inertia } from '@inertiajs/inertia'\nimport { usePageSetup } from '@/Utilities/PageSetup'\nimport { useAppSettingStore } from '@/Stores/AppSettingStore'\nimport { useVideoPlayerStore } from '@/Stores/VideoPlayerStore'\nimport { useNowPlayingStore } from '@/Stores/NowPlayingStore'\nimport { useTeamStore } from '@/Stores/TeamStore'\nimport EpisodeFooter from '@/Components/Pages/ShowEpisodes/Layout/EpisodeFooter'\nimport SingleImage from '@/Components/Global/Multimedia/SingleImage'\nimport Message from '@/Components/Global/Modals/Messages'\n// import EpisodeHeader from \"@/Components/Pages/ShowEpisodes/EpisodeHeader\"\n// import EpisodesList from \"@/Components/Pages/ShowEpisodes/EpisodesList\"\n// import EpisodeCreditsList from \"@/ComponentShows/Episodes/EpisodeCreditsList\";\n\nusePageSetup('showEpisodesShow')\n\nconst appSettingStore = useAppSettingStore()\nconst nowPlayingStore = useNowPlayingStore()\nconst videoPlayerStore = useVideoPlayerStore()\nconst teamStore = useTeamStore()\n\nlet props = defineProps({\n  show: Object,\n  team: Object,\n  episode: Object,\n  image: Object,\n  creators: Object,\n  can: Object,\n})\n\nlet playEpisode = () => {\n  nowPlayingStore.reset()\n  nowPlayingStore.activeType = 6\n  nowPlayingStore.show.name = props.show.name\n  nowPlayingStore.show.description = props.show.description\n  nowPlayingStore.show.url = `/shows/${props.show.slug}`\n  nowPlayingStore.show.episode.name = props.episode.name\n  nowPlayingStore.show.episode.url = `/shows/${props.show.slug}/episode/${props.episode.slug}`\n  nowPlayingStore.show.episode.image = props.image\n  nowPlayingStore.show.category = props.show.categoryName\n  nowPlayingStore.show.categorySub = props.show.categorySubName\n  nowPlayingStore.show.image = props.show.image\n  videoPlayerStore.makeVideoFullPage()\n  Inertia.visit('/stream')\n  // if video has a file and is !processing, play file.\n  if (props.episode.video.storage_location === 'spaces' && props.episode.video.upload_status !== 'processing') {\n    videoPlayerStore.loadNewSourceFromFile(props.episode.video)\n  } else if\n      // else if url exists, play url\n  (props.episode.video.video_url) {\n    nowPlayingStore.isFromWeb = true\n    nowPlayingStore.show.episode.name = props.episode.name\n    videoPlayerStore.loadNewSourceFromUrl(props.episode.video)\n\n  } else if\n      // else if youtube_url exists, play youtube_url\n  (props.episode.youtube_url) {\n    nowPlayingStore.show.episode.name = props.episode.name\n    videoPlayerStore.loadNewSourceFromYouTube(props.episode.youtube_url)\n  }\n}\n\nteamStore.slug = props.team.slug\nteamStore.name = props.team.name\n\nfunction scrollTo(selector) {\n  document.querySelector(selector).scrollIntoView({behavior: 'smooth'})\n}\n\n//\n// function checkForVideo() {\n//     if (props.video.file_name && props.video.upload_status !== 'processing') {\n//         videoPlayerStore.hasVideo = true;\n//     } if (props.episode.youtube_url) {\n//         videoPlayerStore.hasVideo = true;\n//     } else\n//     if (props.episode.video.video_url) {\n//         videoPlayerStore.hasVideo = true;\n//     } else\n//     if (!props.episode.video.video_url && props.video.upload_status === 'processing'){\n//         videoPlayerStore.hasVideo = false;\n//     } else if (!props.video.file_name && !props.episode.video.video_url) {\n//         videoPlayerStore.hasVideo = false;\n//     } return true;\n// }\n//\n// checkForVideo()\n\n</script>\n"],"names":["initialState","id","name","description","slug","totalSpots","memberSpots","teamCreator","teamLeader","members","managers","activeShow","activeEpisode","creators","showModal","Boolean","confirmDialog","confirmManagerDialog","selectedManagerName","selectedManagerId","addManager","removeManager","deleteMemberName","deleteMemberId","noteEdit","note","saveNoteProcessing","goLiveDisplay","can","openComponent","useTeamStore","defineStore","state","actions","reset","Object","assign","this","setActiveTeam","team","setActiveShow","show","setActiveEpisode","episode","deleteTeamMemberCancel","confirmTeamManagerCancel","deleteTeamMember","Inertia","visit","route","method","data","user_id","team_id","team_slug","addTeamManager","removeTeamManager","toggleGoLiveDisplay","getters","spotsRemaining","usePageSetup","pageName","userStore","useUserStore","appSettingStore","useAppSettingStore","videoPlayerStore","useVideoPlayerStore","currentPage","showFlashMessage","pageIsHidden","isMobile","ott","makeVideoTopRight","onBeforeMount","pageReload","window","location","reload","onMounted","search","topDiv","document","getElementById","scrollIntoView","setPrevUrl","noLayout","props","__props","clearFlashMessage","computed","flash","success","message","warning","error","_ref","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","post","stop","apply","arguments","currentYear","Date","getFullYear","nowPlayingStore","useNowPlayingStore","teamStore","playEpisode","activeType","url","concat","image","category","categoryName","categorySub","categorySubName","makeVideoFullPage","video","storage_location","upload_status","loadNewSourceFromFile","video_url","isFromWeb","loadNewSourceFromUrl","youtube_url","loadNewSourceFromYouTube"],"sourceRoot":""}