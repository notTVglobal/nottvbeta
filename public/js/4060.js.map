{"version":3,"file":"js/4060.js","mappings":"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","sources":["webpack:///./resources/js/Stores/AdminStore.js","webpack:///./resources/js/Utilities/PageSetup.js","webpack:///./resources/js/Components/Pages/Admin/Channels/AdminChannelPopperContent.vue?bd0a","webpack:///./resources/js/Components/Pages/Admin/Channels/SourceSelector.vue?beba","webpack:///./resources/js/Components/Global/MistStreams/AddOrUpdateMistStreamModal.vue?ba39","webpack:///./resources/js/Components/Global/MistStreams/AddOrUpdateMistStreamModal.vue","webpack:///./resources/js/Components/Global/Modals/Messages.vue?dfe9","webpack:///./resources/js/Components/Global/Modals/Messages.vue","webpack:///./resources/js/Components/Pages/Admin/AdminHeader.vue?239a","webpack:///./resources/js/Components/Pages/Admin/AdminHeader.vue","webpack:///./resources/js/Components/Pages/Admin/Channels/DynamicModal.vue?a432","webpack:///./resources/js/Components/Pages/Admin/Channels/DynamicModal.vue","webpack:///./resources/js/Components/Pages/Admin/Channels/SourceSelector.vue","webpack:///./resources/js/Components/Pages/Admin/Channels/SourceSelector.vue?93c4","webpack:///./resources/js/Components/Pages/Admin/Channels/SourceSelector.vue?98e8","webpack:///./resources/js/Jetstream/Label.vue","webpack:///./resources/js/Components/Pages/Admin/Channels/AdminChannelHeaderButtons.vue?1076","webpack:///./resources/js/Components/Pages/Admin/Channels/AdminChannelHeaderButtons.vue","webpack:///./resources/js/Components/Pages/Admin/Channels/AdminChannelPopperContent.vue?0ba0","webpack:///./resources/js/Components/Pages/Admin/Channels/AdminChannelPopperContent.vue?d933","webpack:///./resources/js/Components/Pages/Admin/Channels/AdminChannelPopperContent.vue","webpack:///./resources/js/Components/Pages/Admin/Channels/AdminChannelDataPopper.vue?e562","webpack:///./resources/js/Components/Pages/Admin/Channels/AdminChannelDataPopper.vue","webpack:///./resources/js/Components/Pages/Admin/Channels/AdminChannelDataItem.vue?dcc8","webpack:///./resources/js/Components/Pages/Admin/Channels/AdminChannelDataItem.vue","webpack:///./resources/js/Components/Pages/Admin/Channels/AdminChannelCurrentVideo.vue","webpack:///./resources/js/Components/Pages/Admin/Channels/AdminChannelRow.vue?e445","webpack:///./resources/js/Components/Pages/Admin/Channels/AdminChannelRow.vue","webpack:///./resources/js/Components/Pages/Admin/Channels/AdminChannelPaginator.vue?3259","webpack:///./resources/js/Components/Pages/Admin/Channels/AdminChannelPaginator.vue","webpack:///./resources/js/Components/Pages/Admin/Channels/AdminChannelRowHeader.vue?73cb","webpack:///./resources/js/Components/Pages/Admin/Channels/AdminChannelRowHeader.vue","webpack:///./resources/js/Pages/Admin/Channels/Index.vue?b9eb","webpack:///./resources/js/Pages/Admin/Channels/Index.vue"],"sourcesContent":["import { defineStore } from 'pinia'\nimport { useNotificationStore } from '@/Stores/NotificationStore'\nimport { useVideoPlayerStore } from '@/Stores/VideoPlayerStore'\n\nconst initialState = () => ({\n    channels: [], // For Admin Channels page\n    items: [], // for Admin Channels DynamicModal... ExternalSource, ChannelPlaylist, MistStream\n    activeItemId: null,\n    selectedChannel: null, // The currently active item\n    currentType: '', // 'externalSource', 'channelPlaylist', 'mistStream'\n    searchTerm: '',\n    type: '',\n    modalHeader: '',\n    currentPage: 1,\n    itemsPerPage: 10,\n    currentChannelsPage: 1,\n    itemsPerChannelsPage: 7,\n    sourceSelector: {\n        source: null,\n        sourceType: null\n    },\n    firstPlaySettings: {},\n    validationErrors: {},\n    checkSendProcessing: false,\n    activeStreams: [],\n    fetchingActiveStreams: false,\n})\n\nexport const useAdminStore = defineStore('adminStore', {\n    state: initialState,\n    actions: {\n        reset() {\n            // Reset the store to its original state (clear all data)\n            Object.assign(this, initialState())\n        },\n\n        loadChannels(channels) {\n            this.channels = channels\n        },\n        setCheckSendProcessing() {\n          this.checkSendProcessing = true\n        },\n        unsetCheckSendProcessing() {\n            this.checkSendProcessing = false\n        },\n        async fetchChannels() {\n            await axios.get('/api/channels_list')\n                .then(response => {\n                    this.channels = response.data\n                })\n                .catch(error => {\n                    console.log(error)\n                })\n        },\n        async toggleChannelActiveStatus(channelId) {\n            const notificationStore = useNotificationStore();\n            try {\n                const response = await axios.post('/admin/channels/' + channelId + '/toggleChannelActive');\n                // Extract message and status from the response\n                const { message, status } = response.data;\n                // Use the status from the response for the notification\n                notificationStore.setToastNotification(message, status);\n            } catch (error) {\n                console.error(error);\n                notificationStore.setToastNotification('Failed to toggle channel status.', 'error');\n            }\n        },\n        async addChannel(name) {\n            const notificationStore = useNotificationStore();\n            try {\n                const response = await axios.post('/admin/channels/add', {'name': name});\n\n                if (response.data.success) {\n                    // Operation was a success\n                    await this.fetchChannels();\n                    notificationStore.setToastNotification(response.data.message, 'success');\n                } else {\n                    // Handle logical errors even when the HTTP response was OK\n                    // Assuming 'status' and 'message' are part of the error response\n                    const { message, status } = response.data;\n                    let errorMessage = 'Failed to add channel due to a server error.';\n\n                    if (status === 'error' && message && message.fallbackMessages) {\n                        // Construct a more detailed error message based on validation feedback\n                        const validationMessages = Object.values(message.fallbackMessages)\n                            .map(msgs => msgs.join(' ')) // Join messages if there are multiple for one field\n                            .join('; '); // Separate field messages with semicolons\n\n                        errorMessage = validationMessages || errorMessage;\n                    }\n\n                    notificationStore.setToastNotification(errorMessage, 'error');\n                }\n            } catch (error) {\n                console.error(error);\n                notificationStore.setToastNotification('Failed to add channel due to a network or server error.', 'error');\n            }\n        },\n        async updateChannel(channelId, newName) {\n            const notificationStore = useNotificationStore();\n            try {\n                const response = await axios.post(`/admin/channels/${channelId}`, {'name': newName});\n\n                if (response.data.success) {\n                    // Operation was a success\n                    await this.fetchChannels();\n                    notificationStore.setToastNotification(response.data.message, 'success');\n                } else {\n                    // Handle logical errors even when the HTTP response was OK\n                    // Assuming 'status' and 'message' are part of the error response\n                    const { message, status } = response.data;\n                    let errorMessage = 'Failed to add channel due to a server error.';\n\n                    if (status === 'error' && message && message.fallbackMessages) {\n                        // Construct a more detailed error message based on validation feedback\n                        const validationMessages = Object.values(message.fallbackMessages)\n                            .map(msgs => msgs.join(' ')) // Join messages if there are multiple for one field\n                            .join('; '); // Separate field messages with semicolons\n\n                        errorMessage = validationMessages || errorMessage;\n                    }\n\n                    notificationStore.setToastNotification(errorMessage, 'error');\n                }\n            } catch (error) {\n                console.error(error);\n                notificationStore.setToastNotification('Failed to add channel due to a network or server error.', 'error');\n            }\n        },\n        setSelectedChannel(item) {\n            this.selectedChannel = item\n        },\n        setCurrentType(type) {\n            this.currentType = type\n            this.modalHeader = type + ' list'\n        },\n        clearSelectedChannelAndItems() {\n            this.selectedChannel = null\n            this.items = []\n            this.activeItemId = null\n            this.currentType = ''\n            this.modalHeader = ''\n            this.currentPage = 1\n            this.itemsPerPage = 10\n            this.searchTerm = ''\n        },\n        // async searchItems(type, searchTerm = '') {\n        //     this.currentType = type;\n        //     this.searchTerm = searchTerm;\n        //     // Assuming you have a function to perform the fetch; adjust accordingly\n        //     const response = await fetch(`/admin/channels/search/${type}?search=${searchTerm}`);\n        //     const data = await response.json();\n        //     this.items = data.items;\n        // },\n        async fetchItems(type) {\n            this.currentType = type\n            if (this.currentType === 'mistStream') {\n                // retrieve all mistStreams paginated.\n                // Can Vue search through the items?\n                const response = await fetch(`/mistStreams`)\n                this.items = await response.json()\n                if (this.selectedChannel.mist_stream_id) {\n                    this.activeItemId = this.selectedChannel.mist_stream_id\n                }\n            } else if (this.currentType === 'externalSource') {\n                // retrieve all externalSources\n                const response = await fetch(`/externalSources`)\n                this.items = await response.json()\n                if (this.selectedChannel.channel_external_source_id) {\n                    this.activeItemId = this.selectedChannel.channel_external_source_id\n                }\n            } else if (this.currentType === 'channelPlaylist') {\n                // retrieve all channelPlaylists\n                const response = await fetch(`/channelPlaylists`)\n                this.items = await response.json()\n                if (this.selectedChannel.channel_playlist_id) {\n                    this.activeItemId = this.selectedChannel.channel_playlist_id\n                }\n            }\n            // Assuming you have a function to perform the fetch; adjust accordingly\n            // const response = await fetch(`/admin/channels/search/${type}?search=${searchTerm}`);\n            // const data = await response.json();\n            // this.items = data.items;\n        },\n        async updateActiveItemId(id) {\n            this.activeItemId = id\n            if (this.currentType === 'mistStream') {\n                await this.setMistStream(this.selectedChannel, id)\n            } else if (this.currentType === 'channelPlaylist') {\n                await this.setChannelPlaylist(this.selectedChannel, id)\n            } else if (this.currentType === 'externalSource') {\n                await this.setExternalSource(this.selectedChannel, id)\n            }\n        },\n        // Add more actions as needed\n        // this next one should probably go in AdminChannelStore\n        async setPlaybackPriorityType(channel, priorityType) {\n            const dataToSend = {setPriorityType: priorityType}\n            try {\n                const response = await axios.post(`/admin/channels/${channel.id}/setPlaybackPriorityType`, dataToSend)\n                if (response.data.success) {\n                    this.fetchChannels()\n                    // Find the index of the updated channel in the channels array\n                    const index = this.channels.findIndex(c => c.id === channel.id)\n                    if (index !== -1) {\n                        // Update the channel in the channels array with the updated data\n                        this.channels[index] = response.data.channel\n                    }\n                }\n            } catch (error) {\n                console.error(error)\n            }\n        },\n        async setMistStream(channel, mistStreamId) {\n            const dataToSend = {mistStreamId: mistStreamId}\n            try {\n                const response = await axios.post(`/admin/channels/${channel.id}/setMistStream`, dataToSend)\n                if (response.data.success) {\n                    this.fetchChannels()\n                    // Find the index of the updated channel in the channels array\n                    const index = this.channels.findIndex(c => c.id === channel.id)\n                    if (index !== -1) {\n                        // Update the channel in the channels array with the updated data\n                        this.channels[index] = response.data.channel\n                    }\n                }\n            } catch (error) {\n                console.error(error)\n            }\n        },\n        async setChannelPlaylist(channel, channelPlaylistId) {\n            const dataToSend = {channelPlaylistId: channelPlaylistId}\n            try {\n                const response = await axios.post(`/admin/channels/${channel.id}/setChannelPlaylist`, dataToSend)\n                if (response.data.success) {\n                    this.fetchChannels()\n                    // Find the index of the updated channel in the channels array\n                    const index = this.channels.findIndex(c => c.id === channel.id)\n                    if (index !== -1) {\n                        // Update the channel in the channels array with the updated data\n                        this.channels[index] = response.data.channel\n                    }\n                }\n            } catch (error) {\n                console.error(error)\n            }\n        },\n        async setExternalSource(channel, externalSourceId) {\n            const dataToSend = {mistStreamId: externalSourceId}\n            try {\n                const response = await axios.post(`/admin/channels/${channel.id}/setExternalSource`, dataToSend)\n                if (response.data.success) {\n                    this.fetchChannels()\n                    // Find the index of the updated channel in the channels array\n                    const index = this.channels.findIndex(c => c.id === channel.id)\n                    if (index !== -1) {\n                        // Update the channel in the channels array with the updated data\n                        this.channels[index] = response.data.channel\n                    }\n                }\n            } catch (error) {\n                console.error(error)\n            }\n        },\n        nextPage() {\n            const totalModalPages = Math.ceil(this.items.length / this.itemsPerPage)\n            if (this.currentPage < totalModalPages) this.currentPage++\n        },\n        prevPage() {\n            if (this.currentPage > 1) this.currentPage--\n        },\n        setPage(page) {\n            this.currentPage = page\n        },\n        nextChannelsPage() {\n            const totalModalPages = Math.ceil(this.channels.length / this.itemsPerChannelsPage)\n            if (this.currentChannelsPage < totalModalPages) this.currentChannelsPage++\n        },\n        prevChannelsPage() {\n            if (this.currentChannelsPage > 1) this.currentChannelsPage--\n        },\n        setChannelsPage(page) {\n            this.currentChannelsPage = page\n        },\n        ////// FIRST PLAY SETTINGS\n        /////////////////////////// admin/update-first-play-settings\n        async fetchFirstPlaySettings() {\n            const notificationStore = useNotificationStore();\n            try {\n                const response = await axios.post(`/admin/fetch-first-play-settings`);\n                if (response.data.success) {\n                    // Operation was a success\n                    this.firstPlaySettings = response.data.firstPlaySettings\n                    notificationStore.setToastNotification(response.data.message, 'success', 1500);\n                } else {\n                    // Handle logical errors even when the HTTP response was OK\n                    // Assuming 'status' and 'message' are part of the error response\n                    const { message, status } = response.data;\n                    let errorMessage = 'Failed to fetch First Play Settings due to a server error.';\n\n                    if (status === 'error' && message && message.fallbackMessages) {\n                        // Construct a more detailed error message based on validation feedback\n                        const validationMessages = Object.values(message.fallbackMessages)\n                            .map(msgs => msgs.join(' ')) // Join messages if there are multiple for one field\n                            .join('; '); // Separate field messages with semicolons\n\n                        errorMessage = validationMessages || errorMessage;\n                    }\n\n                    notificationStore.setToastNotification(errorMessage, 'error');\n                }\n            } catch (error) {\n                console.error(error);\n                notificationStore.setToastNotification('Failed to fetch First Play Settings due to a network or server error.', 'error');\n            }\n        },\n        async updateFirstPlaySettings() {\n            const notificationStore = useNotificationStore();\n\n            try {\n                const response = await axios.patch('/admin/update-first-play-settings', this.firstPlaySettings);\n\n                if (!response.data.success) {\n                    // This block might not be necessary if your server correctly uses HTTP status codes for errors\n                    this.validationErrors = response.data.errors || {};\n                    notificationStore.setToastNotification(response.data.message, 'error');\n                    return; // Exit early since we've handled the error case\n                }\n\n                // Operation was a success\n                this.firstPlaySettings = response.data.firstPlaySettings;\n                this.validationErrors = {}; // Clear any existing validation errors\n                notificationStore.setToastNotification(response.data.message, 'success', 1500);\n            } catch (error) {\n                // Properly handle the error response\n                if (error.response && error.response.data) {\n                    // Server responded with a non-2xx status code\n                    console.log(\"Error response data:\", error.response.data);\n                    this.validationErrors = error.response.data.errors || {};\n                    const errorMessage = error.response.data.message || 'Failed to save First Play Settings due to a network or server error.';\n                    notificationStore.setToastNotification(errorMessage, 'error');\n                } else {\n                    // The request was made but no response was received or other errors occurred\n                    notificationStore.setToastNotification('Failed to save First Play Settings due to a network or server error.', 'error');\n                }\n            }\n        },\n        handleErrors(data) {\n            const notificationStore = useNotificationStore();\n            let errorMessage = 'Failed to save First Play Settings due to a server error.';\n\n            if (data.status === 'error') {\n                if (data.errors) {\n                    // Directly use the validation errors from the server response\n                    this.validationErrors = data.errors;\n                    errorMessage = \"Please check your input.\";\n                } else if (data.message) {\n                    // Use the message provided by the server as the error message\n                    errorMessage = data.message;\n                }\n\n                notificationStore.setToastNotification(errorMessage, 'error');\n            }\n        },\n        async fetchActiveStreams() {\n            const notificationStore = useNotificationStore();\n            this.fetchingActiveStreams = true\n            try {\n                const response = await axios.post(`/admin/fetch-active-streams`);\n                if (response.data.success) {\n                    // Operation was a success\n                    this.activeStreams = response.data.activeStreams\n                    notificationStore.setToastNotification(response.data.message, 'success', 1500);\n                    this.fetchingActiveStreams = false\n                } else {\n                    // Handle logical errors even when the HTTP response was OK\n                    // Assuming 'status' and 'message' are part of the error response\n                    const { message, status } = response.data;\n                    let errorMessage = 'Failed to fetch active streams due to a server error.';\n\n                    if (status === 'error' && message && message.fallbackMessages) {\n                        // Construct a more detailed error message based on validation feedback\n                        const validationMessages = Object.values(message.fallbackMessages)\n                            .map(msgs => msgs.join(' ')) // Join messages if there are multiple for one field\n                            .join('; '); // Separate field messages with semicolons\n\n                        errorMessage = validationMessages || errorMessage;\n                    }\n\n                    notificationStore.setToastNotification(errorMessage, 'error');\n                    this.fetchingActiveStreams = false\n                }\n            } catch (error) {\n                console.error(error);\n                notificationStore.setToastNotification('Failed to fetch Active Streams due to a network or server error.', 'error');\n                this.fetchingActiveStreams = false\n            }\n        },\n        async setActiveStreamAsFirstPlay(activeStream) {\n            const videoPlayerStore = useVideoPlayerStore();\n            if (activeStream === 'test') {\n                this.firstPlaySettings.customVideoSource = videoPlayerStore.mistServerUri + 'hls/test/index.m3u8'\n                this.firstPlaySettings.customVideoSourceType = 'application/x-mpegURL'\n                this.firstPlaySettings.customVideoName = 'Test Stream'\n                this.firstPlaySettings.customMediaType = 'firstPlay'\n            } else {\n                // axios.post save firstPlaySettings and broadcast an event.\n                // this.\n                // showName, streamName, streamMimeType\n                this.firstPlaySettings.customVideoSource = videoPlayerStore.mistServerUri + 'hls/' + activeStream.streamName + '/index.m3u8'\n                this.firstPlaySettings.customVideoSourceType = activeStream.streamMimeType\n                this.firstPlaySettings.customVideoName = activeStream.showName\n                this.firstPlaySettings.customMediaType = 'firstPlay'\n            }\n            await this.updateFirstPlaySettings()\n            // broadcast\n            // source\n            // mediaType\n            // type\n            // name\n\n        }\n    },\n\n    // Getters (if needed)\n    getters: {\n        filteredItems: (state) => state.items, // Placeholder, adjust if you need actual filtering\n        currentItem: (state) => state.items.find((item) => item.id === state.activeItem),\n        // setHeader: (state) => state.modalHeader = state.currentType + ' list',\n        paginatedItems: (state) => {\n            const start = (state.currentPage - 1) * state.itemsPerPage\n            const end = start + state.itemsPerPage\n            return state.items.slice(start, end)\n        },\n        paginatedChannels: (state) => {\n            const start = (state.currentChannelsPage - 1) * state.itemsPerChannelsPage\n            const end = start + state.itemsPerChannelsPage\n            return state.channels.slice(start, end)\n        },\n        totalModalPages(state) {\n            return Math.ceil(state.items.length / state.itemsPerPage)\n        },\n        totalChannelsPages(state) {\n            return Math.ceil(state.channels.length / state.itemsPerChannelsPage)\n        },\n        // Getter to count active channels\n        activeChannelsCount: (state) => {\n            // Use Array.prototype.filter to keep only items with 'active' true,\n            // then use the length property to get the count\n            return state.channels.filter(channel => channel.active).length;\n        },\n    },\n})\n","import { onBeforeMount, onMounted } from 'vue'\nimport { useUserStore } from \"@/Stores/UserStore\"\nimport { useAppSettingStore } from \"@/Stores/AppSettingStore\"\nimport { useVideoPlayerStore } from \"@/Stores/VideoPlayerStore\"\nimport { Inertia } from '@inertiajs/inertia'\n\nexport function usePageSetup(pageName) {\n    const userStore = useUserStore()\n    const appSettingStore = useAppSettingStore()\n    const videoPlayerStore = useVideoPlayerStore()\n\n    appSettingStore.currentPage = pageName\n    appSettingStore.showFlashMessage = true\n    appSettingStore.pageIsHidden = false\n\n    if (userStore.isMobile || window.innerWidth < 1024 || appSettingStore.fullPage) {\n        appSettingStore.ott = 0;\n    } else {\n        appSettingStore.ott = 1;\n        appSettingStore.showOttButtons = true;\n    }\n\n    videoPlayerStore.makeVideoTopRight()\n\n    if (appSettingStore.pageReload) {\n        appSettingStore.pageReload = false\n        appSettingStore.pageWasReloaded = true\n        window.location.reload();\n    }\n    // Check if the URL contains query strings\n\n\n    // Only scroll into view if there are no query strings\n\n        // const topDiv = document.getElementById(\"topDiv\")\n        // if (topDiv) {\n        //     topDiv.scrollIntoView()\n        // }\n        Inertia.on('navigate', (event) => {\n            if (userStore.isMobile || window.innerWidth < 1024 || appSettingStore.fullPage) {\n                appSettingStore.ott = 0;\n            } else {\n                appSettingStore.ott = 1;\n            }\n            const hasQueryStrings = window.location.search !== '';\n            if (!hasQueryStrings || appSettingStore.shouldScrollToTop) {\n                requestAnimationFrame(() => {\n                    const topDiv = document.getElementById(\"topDiv\");\n                    if (topDiv) {\n                        topDiv.scrollIntoView({behavior: 'auto'});\n                    } else {\n                        window.scrollTo(0, 0);\n                    }\n                });\n            }\n            appSettingStore.shouldScrollToTop = false;\n        })\n    // Only update if we're not already on this page to avoid overwriting with the current URL\n    appSettingStore.setPrevUrl()\n    appSettingStore.showOttButtons = true\n    appSettingStore.noLayout = false\n\n    // Inertia.reload()\n\n}\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"#tooltip[data-v-d34cc41c]{background:#333;border-radius:4px;color:#fff;font-size:13px;font-weight:700;padding:4px 8px}[data-v-d34cc41c] .popper{background:#333;border-radius:20px;color:#fff;font-weight:700;padding:2px;text-transform:uppercase}[data-v-d34cc41c] .popper #arrow:before{background:#333}[data-v-d34cc41c] .popper:hover,[data-v-d34cc41c] .popper:hover>#arrow:before{background:#333}\", \"\",{\"version\":3,\"sources\":[\"webpack://./resources/js/Components/Pages/Admin/Channels/AdminChannelPopperContent.vue\"],\"names\":[],\"mappings\":\"AASA,0BACE,eAAgB,CAKhB,iBAAkB,CAJlB,UAAY,CAGZ,cAAe,CAFf,eAAiB,CACjB,eAGF,CAEA,0BACE,eAAmB,CAEnB,kBAAmB,CACnB,UAAW,CACX,eAAiB,CAHjB,WAAY,CAIZ,wBACF,CAEA,wCACE,eACF,CAEA,8EAEE,eACF\",\"sourcesContent\":[\"<template>\\n  <Popper hover openDelay=\\\"50\\\" closeDelay=\\\"50\\\" offset-skid=\\\"0\\\" offset-distance=\\\"0\\\" placement=\\\"bottom\\\">\\n    <template #content>\\n      <slot name=\\\"content\\\"></slot> <!-- Dynamic content -->\\n    </template>\\n    <slot name=\\\"activator\\\"></slot>\\n  </Popper>\\n</template>\\n<style scoped>\\n#tooltip {\\n  background: #333;\\n  color: white;\\n  font-weight: bold;\\n  padding: 4px 8px;\\n  font-size: 13px;\\n  border-radius: 4px;\\n}\\n\\n:deep(.popper) {\\n  background: #333333;\\n  padding: 2px;\\n  border-radius: 20px;\\n  color: #fff;\\n  font-weight: bold;\\n  text-transform: uppercase;\\n}\\n\\n:deep(.popper #arrow::before) {\\n  background: #333333;\\n}\\n\\n:deep(.popper:hover),\\n:deep(.popper:hover > #arrow::before) {\\n  background: #333333;\\n}\\n</style>\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".source-selector[data-v-c559967c]{//margin-top:.5rem}.is-priority[data-v-c559967c]{color:#000;font-weight:300}\", \"\",{\"version\":3,\"sources\":[\"webpack://./resources/js/Components/Pages/Admin/Channels/SourceSelector.vue\"],\"names\":[],\"mappings\":\"AA8EA,kCAEE,kBACF,CAMA,8BAEE,UAAY,CACZ,eACF\",\"sourcesContent\":[\"<template>\\n  <!--  <div class=\\\"source-selector\\\" :class=\\\"{'is-priority': source?.isPriority, 'is-playing': source?.isPlaying, 'is-fallback': source?.isFallback, 'has-error': source?.hasError}\\\">-->\\n  <div\\n      :class=\\\"['source-selector', {'is-priority': source?.playback_priority_type, 'is-playing': source?.isPlaying, 'is-fallback': source?.isFallback, 'has-error': source?.hasError}]\\\">\\n    <div>\\n      <!-- Display the source status here (playing, fallback, error) -->\\n      <div v-if=\\\"source?.playback_priority_type === sourceType\\\" class=\\\"btn btn-xs mt-1 text-white bg-green-500 hover:bg-green-500\\\">Priority</div>\\n      <span>\\n\\n      </span>\\n      <!-- Icon or button to set this source as priority -->\\n      <!--      <button class=\\\"btn btn-xs\\\" v-if=\\\"!source?.playback_priority_type\\\" @click=\\\"setPriority\\\">Set as Priority</button>-->\\n    </div>\\n  </div>\\n\\n  <!--  <div v-if=\\\"source?.playback_priority_type === 'mistStream'\\\">-->\\n  <!--    <button class=\\\"btn btn-xs hover:bg-green-500 bg-green-500\\\">Priority</button>-->\\n  <!--  </div>-->\\n\\n  <button v-if=\\\"source?.playback_priority_type !== sourceType\\\" class=\\\"btn btn-xs mt-1\\\"\\n          @click=\\\"setPriority\\\">Set as Priority\\n  </button>\\n\\n\\n  <dialog :id=\\\"`confirmPriorityChangeModal`\\\" class=\\\"modal\\\">\\n    <div class=\\\"modal-box\\\">\\n      <h3 class=\\\"font-bold text-lg\\\">Confirm Selection for {{ adminStore.sourceSelector?.source?.name }}</h3>\\n      <p class=\\\"py-4\\\">\\n        Are you sure you want to change priority to <span class=\\\"font-bold\\\">{{ adminStore.sourceSelector?.sourceType }}</span>?\\n      </p>\\n      <div class=\\\"modal-action\\\">\\n        <button class=\\\"btn\\\" @click=\\\"confirmPriorityChange\\\">Confirm</button>\\n        <button class=\\\"btn\\\" onclick=\\\"document.getElementById('confirmPriorityChangeModal').close()\\\">Cancel</button>\\n      </div>\\n    </div>\\n  </dialog>\\n\\n\\n</template>\\n\\n<script setup>\\nimport { useAdminStore } from '@/Stores/AdminStore'\\nimport { ref } from 'vue'\\n\\nconst adminStore = useAdminStore()\\n\\nlet props = defineProps([\\n  'source',\\n  'sourceType',\\n])\\n\\n// const setPriority = (sourceType) => {\\n//   emit('change', { sourceType, priority: true });\\n//   // Implement function to make API call to update the backend\\n// };\\n\\n\\nconst setPriority = () => {\\nadminStore.sourceSelector.source = props.source\\nadminStore.sourceSelector.sourceType = props.sourceType\\n  document.getElementById('confirmPriorityChangeModal').showModal() // Open the modal for confirmation\\n}\\n\\nconst confirmPriorityChange = async () => {\\n  await adminStore.setPlaybackPriorityType(adminStore.sourceSelector.source, adminStore.sourceSelector.sourceType)\\n  document.getElementById('confirmPriorityChangeModal').close() // Close the modal\\n\\n}\\n\\n// const setPriority = async () => {\\n//   // Directly call the store action to update the priority.\\n//   await adminStore.setPlaybackPriorityType(props.source, props.sourceType);\\n//   // No need to emit an event to the parent component.\\n// };\\n\\n</script>\\n\\n<style scoped>\\n.source-selector {\\n  /* Base styles */\\n  //margin-top: 0.5rem;\\n}\\n\\n.is-playing {\\n  /* Styles for playing status */\\n}\\n\\n.is-priority {\\n  /* Styles for isPriority status */\\n  color: black;\\n  font-weight: 300;\\n}\\n\\n.is-fallback {\\n  /* Styles for fallback status */\\n}\\n\\n.has-error {\\n  /* Styles for error status */\\n}\\n\\n</style>\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","import script from \"./AddOrUpdateMistStreamModal.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./AddOrUpdateMistStreamModal.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n\n  <dialog :id=\"id\" class=\"modal\">\n    <div class=\"modal-box w-11/12 max-w-5xl\">\n      <h3 class=\"font-bold text-lg\">\n        <slot name=\"form-title\">Default Form Title</slot>\n      </h3>\n\n\n      <div>\n        <slot name=\"form-description\">Default Form Description</slot>\n      </div>\n      <div>\n        <div class=\"flex flex-col space-y-2 px-12 mt-6\">\n          <form @submit.prevent=\"submit\">\n\n            <label class=\"block mb-2 uppercase font-bold text-xs dark:text-gray-200\"\n                   for=\"name\">Stream Name</label>\n            <input v-model=\"form.name\"\n                   class=\"bg-gray-50 border border-gray-400 text-gray-900 text-sm p-2 w-full rounded-lg focus:ring-blue-500 focus:border-blue-500 block\"\n                   type=\"text\"\n                   name=\"name\"\n                   id=\"name\" placeholder=\"Stream Name...\">\n            <div v-if=\"form.errors.name\" v-text=\"form.errors.name\" class=\"text-xs text-red-600 mt-1\"></div>\n\n            <label class=\"block mt-4 mb-2 uppercase font-bold text-xs dark:text-gray-200\"\n                   for=\"name\">Source</label>\n            <input v-model=\"form.source\"\n                   class=\"bg-gray-50 border border-gray-400 text-gray-900 text-sm p-2 w-full rounded-lg focus:ring-blue-500 focus:border-blue-500 block\"\n                   type=\"text\"\n                   name=\"source\"\n                   id=\"source\" placeholder=\"Source...\">\n            <div v-if=\"form.errors.source\" v-text=\"form.errors.source\" class=\"text-xs text-red-600 mt-1\"></div>\n\n            <label class=\"block mt-4 mb-2 uppercase font-bold text-xs dark:text-gray-200\"\n                   for=\"name\">MIME Type</label>\n            <input v-model=\"form.mime_type\"\n                   class=\"bg-gray-50 border border-gray-400 text-gray-900 text-sm p-2 w-full rounded-lg focus:ring-blue-500 focus:border-blue-500 block\"\n                   type=\"text\"\n                   name=\"mime_type\"\n                   id=\"mime_type\" placeholder=\"MIME Type...\">\n            <div v-if=\"form.errors.mime_type\" v-text=\"form.errors.mime_type\" class=\"text-xs text-red-600 mt-1\"></div>\n\n            <label class=\"block mt-4 mb-2 uppercase font-bold text-xs dark:text-gray-200\"\n                   for=\"comment\">Comment</label>\n            <input v-model=\"form.comment\"\n                      class=\"bg-gray-50 border border-gray-400 text-gray-900 text-sm p-2 w-full rounded-lg focus:ring-blue-500 focus:border-blue-500 block\"\n                      type=\"text\"\n                      name=\"comment\"\n                      id=\"comment\" placeholder=\"Comment...\"></input>\n            <div v-if=\"form.errors.comment\" v-text=\"form.errors.comment\" class=\"text-xs text-red-600 mt-1\"></div>\n\n            <label class=\"block mt-4 mb-2 uppercase font-bold text-xs dark:text-gray-200\"\n                   for=\"metadata\">Optional Parameters</label>\n            <div v-for=\"(item, index) in form.metadata\" :key=\"index\" class=\"flex items-center\">\n              <input v-model=\"item.key\"\n                     class=\"bg-gray-50 border border-gray-400 text-gray-900 text-sm p-2 mt-2 rounded-lg focus:ring-blue-500 focus:border-blue-500\"\n                     placeholder=\"Key\">\n\n              <input v-model=\"item.value\"\n                     class=\"bg-gray-50 border border-gray-400 text-gray-900 text-sm p-2 ml-2 mt-2 rounded-lg focus:ring-blue-500 focus:border-blue-500\"\n                     placeholder=\"Value\">\n\n              <button @click.prevent=\"removeMetadataField(index)\" class=\"btn btn-sm ml-2 mt-2\">Remove</button>\n            </div>\n            <button @click.prevent=\"addMetadataField\" class=\"btn btn-sm mt-2\">Add Metadata</button>\n\n\n            <div class=\"flex flex-row justify-center pt-6\">\n              <button type=\"submit\" class=\"btn btn-wide bg-green-500 hover:bg-green-400 text-white\"\n                      :disabled=\"form.processing\">\n                <slot name=\"button-label\">Default Form Title</slot>\n              </button>\n\n            </div>\n          </form>\n        </div>\n\n      </div>\n\n\n      <div class=\"modal-action\">\n        <button class=\"btn\" @click.prevent=\"closeModal\">Cancel</button>\n        <form method=\"dialog\">\n          <!-- if there is a button, it will close the modal -->\n\n        </form>\n      </div>\n    </div>\n  </dialog>\n\n</template>\n<script setup>\nimport { reactive, ref, watch } from 'vue'\nimport { useForm } from '@inertiajs/inertia-vue3'\nimport { useChannelStore } from '@/Stores/ChannelStore'\nimport { useAdminStore } from '@/Stores/AdminStore'\n\nconst channelStore = useChannelStore()\nconst adminStore = useAdminStore()\n\nimport Label from '@/Jetstream/Label.vue'\nimport Button from '@/Jetstream/Button.vue'\n\nlet props = defineProps({\n  mistStream: Object,\n  id: String,\n  // errors: Object,\n})\n\n// const errors = ref(props.errors);\nconst modalVisible = ref(false)\n\nconst metadata = ref([{key: '', value: ''}])\nlet originalName = ref(''); // used for stream name changes\n\nconst addMetadataField = () => {\n  form.metadata.push({key: '', value: ''})\n}\n\nconst removeMetadataField = (index) => {\n  form.metadata.splice(index, 1)\n}\n\nlet form = reactive(useForm({\n  id: '',\n  name: '',\n  source: 'push://',\n  mime_type: 'application/vnd.apple.mpegurl',\n  comment: '',\n  metadata: [], // Initialize with one empty metadata entry\n}))\n\nform.reset() // on modal load, reset form.\n\n// Watch for changes in the mistStream object in your Pinia store\nwatch(() => channelStore.mistStream, (newVal) => {\n  if (newVal) {\n    // Populate the form with mistStream data\n    form.id = newVal.id || ''\n    form.name = newVal.name || ''\n    originalName.value = newVal.name || ''; // Capture the original name\n    form.source = newVal.source || 'push://'\n    form.mime_type = newVal.mime_type || 'application/vnd.apple.mpegurl'\n    form.comment = newVal.comment || ''\n\n    // Convert metadata object to array format\n    if (newVal.metadata && typeof newVal.metadata === 'object') {\n      form.metadata = Object.entries(newVal.metadata).map(([key, value]) => ({\n        key, value,\n      }))\n    } else {\n      form.metadata = [{key: '', value: ''}] // Reset to initial state if no metadata\n    }\n  } else {\n    // Reset the form to initial state if there's no mistStream selected (e.g., for adding a new stream)\n    form.reset()\n  }\n}, {deep: true, immediate: true})\n//\n// let submit = () => {\n//   form.post(route('mistStream.add'))\n//   form.name = ''\n//   form.comment = ''\n//   if (!form.errors) {\n//     document.getElementById('adminAddMistStreamModal').close()\n//   }\n// }\n\nlet submit = async () => {\n  await form.post(route('mistStream.addOrUpdate', { originalName: originalName.value })), {\n    onSuccess: () => {\n      postSubmissionActions(); // Call the async function\n    },\n    onError: () => {\n      // Handle errors if needed, e.g., log to console or show a message\n      // Errors are automatically attached to the form object\n    },\n\n  }\n  closeModal()\n}\n\nconst postSubmissionActions = async () => {\n  await adminStore.fetchItems('mistStream'); // Await the fetching of items\n  channelStore.clearMistStream(); // Clear selected mistStream\n  form.reset(); // Reset form fields\n  closeModal(); // Close modal\n};\n\nfunction closeModal() {\n  document.getElementById(props.id).close()\n  channelStore.clearMistStream()\n  // Reset the form fields to their initial values\n  form.reset()\n  // Clear all validation errors\n  form.clearErrors()\n}\n\n// function toggleModal() {\n//   console.log('Toggling modal:', !modalVisible.value)\n//   modalVisible.value = !modalVisible.value\n//   form.name = ''\n//   form.comment = ''\n// }\n</script>","import script from \"./Messages.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Messages.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n  <div class=\"mx-4 my-4\">\n    <div class=\"alert alert-info mt-4\"\n         v-if=\"props.flash.message\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" class=\"stroke-current shrink-0 w-6 h-6\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n              d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"></path>\n      </svg>\n      <span>{{ props.flash.message }}</span>\n      <button class=\"text-xs ml-12\" @click=\"clearFlashMessage\"> Close</button>\n    </div>\n    <div class=\"alert alert-success mt-4 mx-3\"\n         v-if=\"props.flash.success\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"stroke-current shrink-0 h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n              d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"/>\n      </svg>\n      <span>{{ props.flash.success }}</span>\n      <button class=\"text-xs ml-12\" @click=\"clearFlashMessage\"> Close</button>\n    </div>\n    <div class=\"alert alert-warning mt-4 mx-3\"\n         v-if=\"props.flash.warning\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"stroke-current shrink-0 h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n              d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z\"/>\n      </svg>\n      <span>{{ props.flash.warning }}</span>\n      <button class=\"text-xs ml-12\" @click=\"clearFlashMessage\"> Close</button>\n    </div>\n    <div class=\"alert alert-error mt-4 mx-3\"\n         v-if=\"props.flash.error\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"stroke-current shrink-0 h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n              d=\"M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z\"/>\n      </svg>\n      <span>{{ props.flash.error }}</span>\n      <button class=\"text-xs ml-12\" @click=\"clearFlashMessage\"> Close</button>\n    </div>\n  </div>\n\n</template>\n\n<script setup>\nimport { Inertia } from \"@inertiajs/inertia\"\nimport { computed } from \"vue\"\nimport { useAppSettingStore } from \"@/Stores/AppSettingStore\"\n\nconst appSettingStore = useAppSettingStore()\n\nappSettingStore.showFlashMessage = true\n\nlet props = defineProps({\n  flash: Object,\n\n})\n\nconst messageType = computed(() => ({\n  'text-green-700 bg-green-100 dark:bg-green-200 dark:text-green-800': props.flash.success,\n  'text-blue-700 bg-blue-100 dark:bg-blue-200 dark:text-blue-800': props.flash.message,\n  'text-orange-700 bg-orange-100 dark:bg-orange-200 dark:text-orange-800': props.flash.warning,\n  'text-red-700 bg-red-100 dark:bg-red-200 dark:text-red-800': props.flash.error,\n}))\n\nconst clearFlashMessage = async () => {\n  await Inertia.post(route('flash.clear'));\n  Inertia.reload();\n};\n</script>\n","import script from \"./AdminHeader.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./AdminHeader.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n  <header>\n    <div class=\"flex justify-between my-3\">\n      <div class=\"mb-4 relative\">\n        <h1 class=\"text-3xl font-semibold inline-block\">\n          <slot/>\n        </h1>\n        <span v-if=\"displayBadges\" class=\"text-white font-semibold badge badge-success absolute -top-2 -right-10 flex items-center justify-center min-w-[2rem] h-[2rem] rounded-full\">{{ (badgePrimaryNumber ?? 0) > 99 ? '99+' : (badgePrimaryNumber ?? 0) }}</span>\n        <span v-if=\"displayBadges\" class=\"font-semibold badge badge-warning absolute -top-2 -right-20 flex items-center justify-center min-w-[2rem] h-[2rem] rounded-full\">{{ (badgeSecondaryNumber ?? 0) > 99 ? '99+' : (badgeSecondaryNumber ?? 0) }}</span>\n\n      </div>\n      <div>\n        <div class=\"flex flex-wrap-reverse justify-end gap-2\">\n          <Link :href=\"`/admin/settings`\">\n            <button\n                class=\"px-4 py-2 text-white bg-blue-600 hover:bg-blue-500 rounded-lg\"\n            >Admin Settings\n            </button>\n          </Link>\n        </div>\n      </div>\n    </div>\n  </header>\n\n</template>\n\n<script setup>\nimport { reactive } from 'vue'\n\nconst props = defineProps({\n  displayBadges: Boolean,\n  badgePrimaryNumber: Number,\n  badgeSecondaryNumber: Number,\n});\n\nconst defaultProps = {\n  displayBadges: false,\n};\n\nconst finalProps = reactive({ ...defaultProps, ...props });\n\n</script>\n","import script from \"./DynamicModal.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./DynamicModal.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n  <dialog id=\"dynamicModal\" class=\"modal\">\n    <div class=\"modal-box w-11/12 max-w-5xl\">\n\n      <div class=\"flex flex-row justify-between align-bottom\">\n        <div >\n         <h3 class=\"font-bold text-lg\">{{ adminStore.modalHeader }}</h3>\n        </div>\n        <div>\n          <h3>{{ adminStore?.selectedChannel?.name }}</h3>\n        </div>\n      </div>\n      <div class=\"flex justify-center mb-6\">\n        <div class=\"flex items-center mt-6 xl:mt-0\">\n          <div class=\"relative\">\n            <input v-model=\"adminStore.searchTerm\" @input=\"debouncedFetchItems\" type=\"search\" class=\"bg-gray-50 text-black text-sm rounded-full\n                        focus:outline-none focus:shadow w-64 pl-8 px-3 py-1\" placeholder=\"Search...\">\n            <div class=\"absolute top-0 flex items-center h-full ml-2\">\n              <svg class=\"fill-current text-gray-400 w-4\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n                <path\n                    d=\"M456.69 421.39 362.6 327.3a173.81 173.81 0 0 0 34.84-104.58C397.44 126.38 319.06 48 222.72 48S48 126.38 48 222.72s78.38 174.72 174.72 174.72A173.81 173.81 0 0 0 327.3 362.6l94.09 94.09a25 25 0 0 0 35.3-35.3ZM97.92 222.72a124.8 124.8 0 1 1 124.8 124.8 124.95 124.95 0 0 1-124.8-124.8Z\"/>\n              </svg>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div>\n        <div class=\"overflow-x-auto\">\n          <table class=\"table table-xs\">\n            <thead>\n            <tr>\n              <th>\n                <span v-if=\"adminStore.currentType === 'channelPlaylist'\">Active</span>\n                <span v-if=\"adminStore.currentType === 'mistStream'\">Active</span>\n              </th>\n              <th>\n                <span v-if=\"adminStore.currentType === 'channelPlaylist'\">Name</span>\n                <span v-if=\"adminStore.currentType === 'mistStream'\">Name</span>\n              </th>\n              <th>\n                <span v-if=\"adminStore.currentType === 'channelPlaylist'\">Type</span>\n                <span v-if=\"adminStore.currentType === 'mistStream'\">Source</span>\n              </th>\n              <th>\n                <span v-if=\"adminStore.currentType === 'channelPlaylist'\">Priority</span>\n                <span v-if=\"adminStore.currentType === 'mistStream'\">MIME Type</span>\n              </th>\n              <th>\n                <span v-if=\"adminStore.currentType === 'channelPlaylist'\">Repeat Mode</span>\n                <span v-if=\"adminStore.currentType === 'mistStream'\">Comment</span>\n              </th>\n              <th>\n                <span v-if=\"adminStore.currentType === 'channelPlaylist'\">Start Time</span>\n                <span v-if=\"adminStore.currentType === 'mistStream'\">Created On</span>\n              </th>\n              <th>\n                <span v-if=\"adminStore.currentType === 'channelPlaylist'\">End Time</span>\n                <span v-if=\"adminStore.currentType === 'mistStream'\"></span>\n              </th>\n              <th>\n                  <!-- For delete -->\n              </th>\n            </tr>\n            </thead>\n            <tbody>\n            <tr v-for=\"item in adminStore.paginatedItems\" :key=\"item.id\" class=\"hover:bg-blue-300 hover:cursor-pointer\" :class=\"{'bg-yellow-500': item.id === adminStore.activeItemId}\">\n              <td @click=\"selectItem(item)\" >\n                <div v-if=\"adminStore.currentType === 'channelPlaylist'\"><span v-if=\"item.active\" class=\"text-green-500\">Active</span><span v-else class=\"text-red-700\">Inactive</span></div>\n                <span v-if=\"adminStore.currentType === 'mistStream'\"><span v-if=\"item.active\" class=\"text-green-500\">Active</span><span v-else class=\"text-red-700\">Inactive</span></span>\n              </td>\n              <td @click=\"selectItem(item)\" >\n                <span v-if=\"adminStore.currentType === 'channelPlaylist'\">{{ item.name }}</span>\n                <span v-if=\"adminStore.currentType === 'mistStream'\">{{ item.name }}</span>\n              </td>\n              <td @click=\"selectItem(item)\" >\n                <span v-if=\"adminStore.currentType === 'channelPlaylist'\">{{ item.type }}</span>\n                <span v-if=\"adminStore.currentType === 'mistStream'\">{{ item.source }}</span>\n              </td>\n              <td @click=\"selectItem(item)\" >\n                <span v-if=\"adminStore.currentType === 'channelPlaylist'\">{{ item.priority }}</span>\n                <span v-if=\"adminStore.currentType === 'mistStream'\">{{ item.mime_type }}</span>\n              </td>\n              <td @click=\"selectItem(item)\" >\n                <span v-if=\"adminStore.currentType === 'channelPlaylist'\">{{ item.repeat_mode }}</span>\n                <span v-if=\"adminStore.currentType === 'mistStream'\">{{ item.comment }}</span>\n              </td>\n              <td @click=\"selectItem(item)\" >\n                <span v-if=\"adminStore.currentType === 'channelPlaylist'\">{{ formatDateTime(item.start_time) }}</span>\n                <span v-if=\"adminStore.currentType === 'mistStream'\">{{ formatDateTime(item.created_at) }}</span>\n\n              </td>\n              <td @click=\"selectItem(item)\" >\n                <span v-if=\"adminStore.currentType === 'channelPlaylist'\">{{ formatDateTime(item.end_time) }}</span>\n                <span v-if=\"adminStore.currentType === 'mistStream'\"></span>\n              </td>\n              <td class=\"w-fit whitespace-nowrap overflow-hidden\">\n                <button\n                    v-if=\"adminStore.currentType === 'mistStream'\"\n                    @click.prevent=\"openEditModal(item)\"\n                    class=\"ml-2 px-2 py-1 text-white font-semibold bg-blue-500 hover:bg-blue-600 rounded-lg\"\n                >\n                  <font-awesome-icon icon=\"fa-pencil\" class=\"text-xs\"/>\n                </button>\n                <button\n                    v-if=\"adminStore.currentType === 'mistStream'\"\n                    @click=\"removeItem(item)\"\n                    class=\"ml-1 px-2 py-1 text-white font-semibold bg-red-500 hover:bg-red-600 rounded-lg\"\n                >\n                  <font-awesome-icon icon=\"fa-trash-can\" class=\"text-xs\"/>\n                </button>\n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </div>\n        <div v-if=\"adminStore.totalModalPages > 1\" class=\"flex flex-row justify-center mt-6 w-full\">\n          <div class=\"join grid grid-cols-2\">\n            <button class=\"join-item btn btn-sm btn-outline\" @click=\"adminStore.prevPage\">Previous page</button>\n            <button class=\"join-item btn btn-sm btn-outline\" @click=\"adminStore.nextPage\">Next</button>\n          </div>\n        </div>\n      </div>\n\n      <AddOrUpdateMistStreamModal :id=\"`updateMistStreamModal`\" :form-errors=\"$page.props.errors\" @update-list=\"refreshList\">\n        <template #form-title>\n          Update Mist Stream\n        </template>\n        <template #form-description>\n          Note: You cannot edit the stream name (right now), it will only create a new stream. This is a bug that needs to be fixed in the AddOrUpdateMistStreamJob\n        </template>\n        <template #button-label>\n          Update\n        </template>\n      </AddOrUpdateMistStreamModal>\n\n\n      <dialog id=\"confirmSelectionModal\" class=\"modal\">\n        <div class=\"modal-box\">\n          <h3 class=\"font-bold text-lg\">Confirm Selection</h3>\n          <p class=\"py-4\">\n            Are you sure you want to select <span id=\"selectedItemName\"></span>?\n          </p>\n          <div class=\"modal-action\">\n            <button class=\"btn\" @click=\"confirmSelection\">Confirm</button>\n            <button class=\"btn\" onclick=\"document.getElementById('confirmSelectionModal').close()\">Cancel</button>\n          </div>\n        </div>\n      </dialog>\n\n      <dialog id=\"confirmRemoveModal\" class=\"modal\">\n        <div class=\"modal-box\">\n          <h3 class=\"font-bold text-lg\">Confirm Remove</h3>\n          <p class=\"py-4\">\n            Are you sure you want to remove <span id=\"selectedForRemovalItemName\"></span>?\n          </p>\n          <div class=\"modal-action\">\n            <button class=\"btn\" @click=\"confirmRemove\">Confirm</button>\n            <button class=\"btn\" onclick=\"document.getElementById('confirmRemoveModal').close()\">Cancel</button>\n          </div>\n        </div>\n      </dialog>\n\n\n      <div class=\"modal-action\">\n        <form method=\"dialog\">\n          <!-- if there is a button, it will close the modal -->\n          <button class=\"btn\" @click=\"adminStore.clearSelectedChannelAndItems\">Close</button>\n        </form>\n      </div>\n    </div>\n  </dialog>\n</template>\n\n<script setup>\nimport { ref, watch, computed, onMounted, nextTick } from 'vue'\nimport { useAdminStore } from '@/Stores/AdminStore'\nimport { useChannelStore } from '@/Stores/ChannelStore'\nimport debounce from \"lodash/debounce\"\nimport { FontAwesomeIcon } from '@fortawesome/vue-fontawesome'\nimport { Inertia } from '@inertiajs/inertia'\nimport AddOrUpdateMistStreamModal from '@/Components/Global/MistStreams/AddOrUpdateMistStreamModal.vue'\n\nconst adminStore = useAdminStore();\nconst channelStore = useChannelStore();\n// const searchTerm = ref('');\n\nlet props = defineProps({\n  type: String\n})\n\nconst items = computed(() => adminStore.filteredItems);\nconst currentItemId = computed(() => adminStore.activeItem);\n\n// const searchItems = () => {\n//   adminStore.searchItems(adminStore.type, searchTerm.value);\n// };\n//\n// const debouncedFetchItems = debounce(adminStore.searchItems, 300);\n\n// watch(searchTerm, debouncedFetchItems);\n\n\nconst selectedItem = ref(null); // A reactive property to hold the currently selected item\n\nconst selectItem = (item) => {\n  selectedItem.value = item; // Store the item temporarily\n  document.getElementById('selectedItemName').textContent = item.name; // Display the name in the modal\n  document.getElementById('confirmSelectionModal').showModal(); // Open the modal for confirmation\n};\n\nconst removeItem = (item) => {\n  selectedItem.value = item; // Store the item temporarily\n  document.getElementById('selectedForRemovalItemName').textContent = item.name; // Display the name in the modal\n  document.getElementById('confirmRemoveModal').showModal(); // Open the modal for confirmation\n};\n\nconst editItem = (item) => {\n  selectedItem.value = item; // Store the item temporarily\n  // Create Modal for editing\n  // document.getElementById('selectedForRemovalItemName').textContent = item.name; // Display the name in the modal\n  // document.getElementById('confirmRemoveModal').showModal(); // Open the modal for confirmation\n};\n\nconst confirmSelection = async () => {\n  if (selectedItem.value) {\n    await adminStore.updateActiveItemId(selectedItem.value.id);\n    document.getElementById('confirmSelectionModal').close(); // Close the modal\n    // Handle additional logic for item selection if necessary\n  }\n};\n\nconst confirmRemove = async () => {\n  if (selectedItem.value) {\n    await removeMistStream(selectedItem.value.name);\n    document.getElementById('confirmRemoveModal').close(); // Close the modal\n    // Handle additional logic for item selection if necessary\n  }\n};\n// const selectItem = async (item) => {\n//   await adminStore.updateActiveItemId(item.id);\n//   // Handle additional logic for item selection if necessary\n// };\n\nconst openEditModal = (item) => {\n  updateMistStreamModal.showModal()\n  channelStore.mistStream = item\n}\n\nonMounted(async () => {\n  await adminStore.fetchItems(props.type)\n})\n\n\nconst removeMistStream = (name) => {\n  Inertia.post(route('mistStream.remove'), { 'name': name } )\n  document.getElementById('dynamicModal').close();\n}\n\nconst refreshList = () => {\n  adminStore.fetchItems(props.type);\n}\n// adminStore.fetchItems(props.type)\n\n// onMounted(adminStore.fetchItems(adminStore.type)); // Optionally fetch items when the modal mounts\n\n// const fetchItems = () => {\n//   Inertia.get(`/admin/channels/search/${props.type}`, { search: searchTerm.value }, {\n//     preserveState: false,\n//     onSuccess: (page) => {\n//       items.value = page.props.items; // Assume your backend sends back 'items'\n//     }\n//   });\n// };\n\n// watch(searchTerm, fetchItems);\n\n// onMounted(fetchItems); // Optionally fetch items when the modal mounts\n</script>\n\n\n<!--<script setup>-->\n<!--import { ref, defineProps, defineEmits } from 'vue';-->\n\n<!--const props = defineProps({-->\n<!--  showModal: Boolean,-->\n<!--  currentItem: Object,-->\n<!--  itemsType: String-->\n<!--});-->\n\n<!--const emits = defineEmits(['update:item', 'close']);-->\n\n<!--const searchTerm = ref('');-->\n<!--const items = ref([]);-->\n\n<!--const fetchItems = async () => {-->\n<!--  // Fetch items based on `itemsType` and `searchTerm`-->\n<!--  // Update `items` with the fetched data-->\n<!--};-->\n\n<!--const selectItem = (item) => {-->\n<!--  emits('update:item', { type: props.itemsType, item });-->\n<!--};-->\n\n<!--const closeModal = () => {-->\n<!--  emits('close');-->\n<!--};-->\n<!--</script>-->\n","<template>\n  <!--  <div class=\"source-selector\" :class=\"{'is-priority': source?.isPriority, 'is-playing': source?.isPlaying, 'is-fallback': source?.isFallback, 'has-error': source?.hasError}\">-->\n  <div\n      :class=\"['source-selector', {'is-priority': source?.playback_priority_type, 'is-playing': source?.isPlaying, 'is-fallback': source?.isFallback, 'has-error': source?.hasError}]\">\n    <div>\n      <!-- Display the source status here (playing, fallback, error) -->\n      <div v-if=\"source?.playback_priority_type === sourceType\" class=\"btn btn-xs mt-1 text-white bg-green-500 hover:bg-green-500\">Priority</div>\n      <span>\n\n      </span>\n      <!-- Icon or button to set this source as priority -->\n      <!--      <button class=\"btn btn-xs\" v-if=\"!source?.playback_priority_type\" @click=\"setPriority\">Set as Priority</button>-->\n    </div>\n  </div>\n\n  <!--  <div v-if=\"source?.playback_priority_type === 'mistStream'\">-->\n  <!--    <button class=\"btn btn-xs hover:bg-green-500 bg-green-500\">Priority</button>-->\n  <!--  </div>-->\n\n  <button v-if=\"source?.playback_priority_type !== sourceType\" class=\"btn btn-xs mt-1\"\n          @click=\"setPriority\">Set as Priority\n  </button>\n\n\n  <dialog :id=\"`confirmPriorityChangeModal`\" class=\"modal\">\n    <div class=\"modal-box\">\n      <h3 class=\"font-bold text-lg\">Confirm Selection for {{ adminStore.sourceSelector?.source?.name }}</h3>\n      <p class=\"py-4\">\n        Are you sure you want to change priority to <span class=\"font-bold\">{{ adminStore.sourceSelector?.sourceType }}</span>?\n      </p>\n      <div class=\"modal-action\">\n        <button class=\"btn\" @click=\"confirmPriorityChange\">Confirm</button>\n        <button class=\"btn\" onclick=\"document.getElementById('confirmPriorityChangeModal').close()\">Cancel</button>\n      </div>\n    </div>\n  </dialog>\n\n\n</template>\n\n<script setup>\nimport { useAdminStore } from '@/Stores/AdminStore'\nimport { ref } from 'vue'\n\nconst adminStore = useAdminStore()\n\nlet props = defineProps([\n  'source',\n  'sourceType',\n])\n\n// const setPriority = (sourceType) => {\n//   emit('change', { sourceType, priority: true });\n//   // Implement function to make API call to update the backend\n// };\n\n\nconst setPriority = () => {\nadminStore.sourceSelector.source = props.source\nadminStore.sourceSelector.sourceType = props.sourceType\n  document.getElementById('confirmPriorityChangeModal').showModal() // Open the modal for confirmation\n}\n\nconst confirmPriorityChange = async () => {\n  await adminStore.setPlaybackPriorityType(adminStore.sourceSelector.source, adminStore.sourceSelector.sourceType)\n  document.getElementById('confirmPriorityChangeModal').close() // Close the modal\n\n}\n\n// const setPriority = async () => {\n//   // Directly call the store action to update the priority.\n//   await adminStore.setPlaybackPriorityType(props.source, props.sourceType);\n//   // No need to emit an event to the parent component.\n// };\n\n</script>\n\n<style scoped>\n.source-selector {\n  /* Base styles */\n  //margin-top: 0.5rem;\n}\n\n.is-playing {\n  /* Styles for playing status */\n}\n\n.is-priority {\n  /* Styles for isPriority status */\n  color: black;\n  font-weight: 300;\n}\n\n.is-fallback {\n  /* Styles for fallback status */\n}\n\n.has-error {\n  /* Styles for error status */\n}\n\n</style>\n","import api from \"!../../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../../../../node_modules/css-loader/dist/cjs.js??clonedRuleSet-10.use[1]!../../../../../../node_modules/vue-loader/dist/stylePostLoader.js!../../../../../../node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-10.use[2]!../../../../../../node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./SourceSelector.vue?vue&type=style&index=0&id=c559967c&scoped=true&lang=css\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","import script from \"./SourceSelector.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./SourceSelector.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./SourceSelector.vue?vue&type=style&index=0&id=c559967c&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-c559967c\"]])\n\nexport default __exports__","import script from \"./Label.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Label.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","import script from \"./AdminChannelHeaderButtons.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./AdminChannelHeaderButtons.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n  <div>\n    <div class=\"flex flex-row justify-between gap-x-4 mb-3\">\n      <div>\n        <Link :href=\"`#`\">\n          <button\n              @click.prevent=\"openAddChannelModal\"\n              class=\"btn btn-sm bg-green-500 hover:bg-green-600 text-white px-4 py-2 mr-2 rounded disabled:bg-gray-400\"\n          >Add Channel\n          </button>\n        </Link>\n        <Link :href=\"`#`\">\n          <button\n              class=\"btn btn-sm bg-green-500 hover:bg-green-600 text-white px-4 py-2 mr-2 rounded disabled:bg-gray-400\"\n              disabled\n          >Add External Source\n          </button>\n        </Link>\n        <Link :href=\"`#`\">\n          <button\n              class=\"btn btn-sm bg-green-500 hover:bg-green-600 text-white px-4 py-2 mr-2 rounded disabled:bg-gray-400\"\n              disabled\n          >Add Channel Playlist\n          </button>\n        </Link>\n        <button\n            class=\"btn btn-sm bg-green-500 hover:bg-green-600 text-white px-4 py-2 mr-2 rounded disabled:bg-gray-400\"\n            onclick=\"addMistStreamModal.showModal()\">\n          Add Mist Stream\n        </button>\n        <AddOrUpdateMistStreamModal :id=\"`addMistStreamModal`\" :form-errors=\"$page.props.errors\">\n          <template #form-title>\n            Add Mist Stream\n          </template>\n          <template #form-description>\n            Add a new stream to the Mist Server\n          </template>\n          <template #button-label>\n            Add\n          </template>\n        </AddOrUpdateMistStreamModal>\n\n      </div>\n      <input v-model=\"adminStore.searchTerm\" type=\"search\" placeholder=\"Search...\" class=\"border px-2 rounded-lg\"/>\n    </div>\n\n    <dialog id=\"adminAddChannel\" class=\"modal\">\n      <div class=\"modal-box\">\n        <form method=\"dialog\">\n          <button class=\"btn btn-sm btn-circle btn-ghost absolute right-2 top-2\">✕</button>\n        </form>\n        <h3 class=\"font-bold text-lg mb-2\">Add Channel</h3>\n        <input v-model=\"newChannelName\" type=\"text\" placeholder=\"Channel Name\" class=\"input input-bordered w-full max-w-xs\" />\n        <button @click.prevent=\"submit\" class=\"btn btn-primary ml-2\">Add</button>\n      </div>\n    </dialog>\n  </div>\n</template>\n<script setup>\nimport { useAdminStore } from '@/Stores/AdminStore'\nimport AddOrUpdateMistStreamModal from '@/Components/Global/MistStreams/AddOrUpdateMistStreamModal'\nimport { ref } from 'vue'\n\nconst adminStore = useAdminStore()\n\nconst newChannelName = ref('')\n\nconst openAddChannelModal = () => {\n  document.getElementById('adminAddChannel').showModal()\n}\n\nconst submit = async () => {\n  await adminStore.addChannel(newChannelName.value)\n  document.getElementById('adminAddChannel').close()\n  newChannelName.value = ''\n}\n</script>","import api from \"!../../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../../../../node_modules/css-loader/dist/cjs.js??clonedRuleSet-10.use[1]!../../../../../../node_modules/vue-loader/dist/stylePostLoader.js!../../../../../../node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-10.use[2]!../../../../../../node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./AdminChannelPopperContent.vue?vue&type=style&index=0&id=d34cc41c&scoped=true&lang=css\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","import { render } from \"./AdminChannelPopperContent.vue?vue&type=template&id=d34cc41c&scoped=true\"\nconst script = {}\n\nimport \"./AdminChannelPopperContent.vue?vue&type=style&index=0&id=d34cc41c&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-d34cc41c\"]])\n\nexport default __exports__","<template>\n  <Popper hover openDelay=\"50\" closeDelay=\"50\" offset-skid=\"0\" offset-distance=\"0\" placement=\"bottom\">\n    <template #content>\n      <slot name=\"content\"></slot> <!-- Dynamic content -->\n    </template>\n    <slot name=\"activator\"></slot>\n  </Popper>\n</template>\n<style scoped>\n#tooltip {\n  background: #333;\n  color: white;\n  font-weight: bold;\n  padding: 4px 8px;\n  font-size: 13px;\n  border-radius: 4px;\n}\n\n:deep(.popper) {\n  background: #333333;\n  padding: 2px;\n  border-radius: 20px;\n  color: #fff;\n  font-weight: bold;\n  text-transform: uppercase;\n}\n\n:deep(.popper #arrow::before) {\n  background: #333333;\n}\n\n:deep(.popper:hover),\n:deep(.popper:hover > #arrow::before) {\n  background: #333333;\n}\n</style>","import script from \"./AdminChannelDataPopper.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./AdminChannelDataPopper.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n  <AdminChannelPopperContent>\n    <template #activator>\n      <button @click=\"emit('open-modal')\" :class=\"buttonClass\">\n        {{ buttonText }}\n      </button>\n    </template>\n    <template #content>\n      <div class=\"text-xs p-2\" id=\"tooltip\">\n        <div>ID: {{ dataPart.id }}</div>\n        <div>Name: {{ dataPart.name }}</div>\n        <div>Path: {{ dataPart.path }}</div>\n        <div>Type: {{ dataPart.type }}</div>\n        <div>Provider: {{ dataPart.provider }}</div>\n      </div>\n    </template>\n  </AdminChannelPopperContent>\n</template>\n<script setup>\nimport AdminChannelPopperContent from '@/Components/Pages/Admin/Channels/AdminChannelPopperContent'\nimport { computed } from 'vue'\n\nconst props = defineProps({\n  data: Object,\n  dataType: String,\n  dataTypeDb: String,\n})\n\nconst emit = defineEmits(['open-modal'])\n\n// Computed property to dynamically generate the button text\nconst buttonText = computed(() => {\n  return props.data[props.dataTypeDb]?.name || `No ${props.dataType} Name`\n})\n\n// Computed property for accessing the relevant data part\nconst dataPart = computed(() => {\n  return props.data[props.dataTypeDb] || {};\n})\n\nconst buttonClass = computed(() => {\n  return {\n    'cursor-pointer': true,\n    'text-black': true,\n    // Add 'font-semibold' only if data.playback_priority_type equals dataType\n    'font-semibold': props.data.playback_priority_type === props.dataType\n  }\n})\n</script>","import script from \"./AdminChannelDataItem.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./AdminChannelDataItem.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n  <div>\n    <div v-if=\"data[dataTypeDb]\">\n      <AdminChannelDataPopper\n          :data=\"data\"\n          :dataType=\"dataType\"\n          :dataTypeDb=\"dataTypeDb\"\n          @open-modal=\"emit('open-modal')\"/>\n    </div>\n    <div v-else>\n      <button @click=\"emit('open-modal')\">\n    <span v-if=\"data[dataTypeDb]?.name\" class=\"text-gray-700 tracking-wide\">\n                              <span v-if=\"data.playback_priority_type === dataType\"\n                                    :class=\"{'text-black font-bold': data.playback_priority_type === dataType}\">{{\n                                  data?.dataTypeDb.name\n                                }}</span>\n      <span v-else>{{ data?.dataTypeDb.name }}</span>\n    </span>\n        <span v-else class=\"italic text-gray-300 text-sm\">no {{ dataType }}</span>\n      </button>\n    </div>\n    <!-- Status indicator + action to change source -->\n    <source-selector :source=\"data\"\n                     :source-type=\"dataType\"/>\n  </div>\n</template>\n<script setup>\nimport SourceSelector from '@/Components/Pages/Admin/Channels/SourceSelector'\nimport AdminChannelDataPopper from '@/Components/Pages/Admin/Channels/AdminChannelDataPopper.vue'\n\ndefineProps({\n  data: Object,\n  dataType: String,\n  dataTypeDb: String,\n})\n\nconst emit = defineEmits(['open-modal'])\n</script>","import script from \"./AdminChannelCurrentVideo.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./AdminChannelCurrentVideo.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","import script from \"./AdminChannelRow.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./AdminChannelRow.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n  <div class=\"table-row bg-white border-b dark:bg-gray-800 dark:border-gray-700\">\n    <div class=\"table-cell min-w-[8rem] px-6 py-4 font-medium text-gray-900 dark:text-white whitespace-nowrap\">\n      <button @click.prevent=\"openEditChannelModal\" class=\"text-xl\">{{ channel.name }}</button>\n      <div v-if=\"channel?.isLive\" class=\"ml-2 text-xs badge badge-secondary badge-outline\">live</div>\n    </div>\n\n    <!-- Current Video -->\n    <div class=\"md:table-cell px-6 py-4 font-medium text-gray-900 dark:text-white whitespace-nowrap text-center\">\n      <AdminChannelCurrentVideo :data=\"channel\"/>\n    </div>\n\n    <!-- ExternalSource -->\n    <div class=\"table-cell px-6 py-4 align-middle text-center\">\n      <AdminChannelDataItem\n          :data=\"channel\"\n          :dataType=\"`externalSource`\"\n          :dataTypeDb=\"`external_source`\"\n          @open-modal=\"handleOpenModal('externalSource')\"/>\n    </div>\n\n    <!-- ChannelPlaylist -->\n    <div class=\"table-cell px-6 py-4 align-middle text-center\">\n      <AdminChannelDataItem\n          :data=\"channel\"\n          :dataType=\"`channelPlaylist`\"\n          :dataTypeDb=\"`channel_playlist`\"\n          @open-modal=\"handleOpenModal('channelPlaylist')\"/>\n    </div>\n\n    <!-- MistStream -->\n    <div class=\"table-cell px-6 py-4 align-middle text-center\">\n      <AdminChannelDataItem\n          :data=\"channel\"\n          :dataType=\"`mistStream`\"\n          :dataTypeDb=\"`mist_stream`\"\n          @open-modal=\"handleOpenModal('mistStream')\"/>\n    </div>\n\n    <!-- Active Toggle -->\n    <div class=\"table-cell px-6 py-4 align-middle\">\n      <div class=\"flex justify-center items-center w-full\">\n        <label class=\"cursor-pointer label\">\n          <input v-model=\"channel.active\"\n                 type=\"checkbox\"\n                 @click.prevent=\"toggleChannelActiveStatus\"\n                 class=\"toggle toggle-success\"/>\n        </label>\n      </div>\n    </div>\n\n    <dialog :id=\"'adminEditChannel_'+channel.id\" class=\"modal\">\n      <div class=\"modal-box\">\n        <form method=\"dialog\">\n          <button class=\"btn btn-sm btn-circle btn-ghost absolute right-2 top-2\">✕</button>\n        </form>\n        <h3 class=\"font-bold text-lg mb-2\">Edit Channel Name</h3>\n        <input v-model=\"channelName\" type=\"text\" class=\"input input-bordered w-full max-w-xs\" />\n        <button @click.prevent=\"submit\" class=\"btn btn-primary ml-2\">Submit</button>\n      </div>\n    </dialog>\n\n  </div>\n</template>\n\n<script setup>\nimport { useAdminStore } from '@/Stores/AdminStore'\nimport { useNotificationStore } from '@/Stores/NotificationStore'\nimport AdminChannelDataItem from '@/Components/Pages/Admin/Channels/AdminChannelDataItem'\nimport AdminChannelCurrentVideo from '@/Components/Pages/Admin/Channels/AdminChannelCurrentVideo.vue'\nimport { computed, ref } from 'vue'\n\nconst adminStore = useAdminStore()\nconst notificationStore = useNotificationStore()\n\nconst props = defineProps({\n  channel: Object,\n})\n\nconst emit = defineEmits(['open-modal'])\n\nconst channelName = ref(props.channel.name)\n\nconst openEditChannelModal = () => {\n  document.getElementById('adminEditChannel_'+props.channel.id).showModal()\n}\n\n\nconst submit = async () => {\n  await adminStore.updateChannel(props.channel.id, channelName.value)\n  document.getElementById('adminEditChannel_'+props.channel.id).close()\n}\n\n// Handle the open-modal event from grandchildren and re-emit to parent\nconst handleOpenModal = (type) => {\n  // You can add more logic here if needed before emitting\n  emit('open-modal', {channel: props.channel, type})\n}\n\nconst toggleChannelActiveStatus = async (event) => {\n  try {\n    await adminStore.toggleChannelActiveStatus(props.channel.id);\n    await adminStore.fetchChannels();\n  } catch (error) {\n    console.error('Error toggling channel active status:', error);\n    // Assuming notificationStore is properly imported and instantiated\n    notificationStore.setToastNotification('Error toggling channel active status: ' + error, 'error');\n  } finally {\n    // Blurring the target element directly\n    if (event && event.target) {\n      event.target.blur();\n    }\n  }\n}\n\n</script>\n","import script from \"./AdminChannelPaginator.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./AdminChannelPaginator.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n  <div class=\"flex flex-row justify-center my-6 w-full\">\n    <!--                  <div class=\"join grid grid-cols-2\">-->\n    <!--                    <button class=\"join-item btn btn-sm btn-outline\" @click=\"adminStore.prevChannelsPage\">Previous page</button>-->\n    <!--                    <button class=\"join-item btn btn-sm btn-outline\" @click=\"adminStore.nextChannelsPage\">Next</button>-->\n    <!--                  </div>-->\n    <div class=\"join\">\n      <input\n          v-for=\"page in adminStore.totalChannelsPages\"\n          :key=\"page\"\n          type=\"radio\"\n          name=\"options\"\n          :value=\"page\"\n          v-model=\"adminStore.currentChannelsPage\"\n          @change=\"() => adminStore.setChannelsPage(page)\"\n          class=\"join-item btn btn-square !bg-none\"\n          :aria-label=\"`${page}`\"\n      />\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { useAdminStore } from '@/Stores/AdminStore'\nconst adminStore = useAdminStore()\n</script>\n","import script from \"./AdminChannelRowHeader.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./AdminChannelRowHeader.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n\n    <div class=\"table-row\">\n      <div scope=\"col\" class=\"table-cell px-6 py-3 uppercase\">\n        <font-awesome-icon icon=\"fa-repeat\" class=\"mr-2 cursor-pointer hover:text-blue-500\"\n                           @click.prevent=\"emit('reloadChannelsList')\"/>\n        <span class=\"uppercase\">Channel </span>\n      </div>\n      <div scope=\"col\" class=\"hidden md:table-cell px-6 py-3 uppercase text-center\">\n        <span class=\"uppercase\">Current Video</span>\n      </div>\n      <div scope=\"col\" class=\"table-cell px-6 py-3 uppercase text-center\">\n        <span class=\"uppercase\">External Source</span>\n      </div>\n      <div scope=\"col\" class=\"px-6 py-3 max-w-64 text-center\">\n        <span class=\"uppercase\">Channel Playlist</span>\n      </div>\n      <div scope=\"col\" class=\"table-cell px-6 py-3 text-center\">\n        <span class=\"uppercase\">Mist Stream</span>\n      </div>\n      <div scope=\"col\" class=\"table-cell px-6 py-3 w-52 text-center\">\n        <span class=\"uppercase\">Active</span>\n      </div>\n\n    </div>\n\n</template>\n<script setup>\nimport { FontAwesomeIcon } from '@fortawesome/vue-fontawesome'\nconst emit = defineEmits(['reloadChannelsList'])\n</script>","import script from \"./Index.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Index.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n  <Head title=\"Admin/Channels\"/>\n\n  <div class=\"place-self-center flex flex-col\">\n    <div id=\"topDiv\" class=\"bg-white text-black dark:bg-gray-800 dark:text-gray-50 p-5 mb-10\">\n\n      <Message v-if=\"appSettingStore.showFlashMessage\" :flash=\"$page.props.flash\"/>\n\n      <AdminHeader\n          :displayBadges=\"true\"\n          :badgePrimaryNumber=\"adminStore.activeChannelsCount\"\n          :badgeSecondaryNumber=\"adminStore.channels.length\">Channels\n      </AdminHeader>\n      <AdminChannelHeaderButtons/>\n\n      <div class=\"bg-orange-300 px-2 text-black mb-3\">\n        <p>Add a channel: create playlist and add shows.</p>\n        <p><span class=\"font-semibold\">TRAVIS NOTE: </span>Use FFMPEG to push an .mp4 to a mist stream. This will allow\n          us to schedule video objects from anywhere\n          into our channels, and we can have a channel that loads the current video at the right time spot in the video\n          based on our schedule saved in the database.</p>\n      </div>\n\n      <div class=\"flex flex-col\">\n        <div class=\"-my-2 overflow-x-auto sm:-mx-6 lg:-mx-8\">\n          <div class=\"py-2 align-middle inline-block min-w-full sm:px-6 lg:px-8\">\n            <div class=\"shadow overflow-hidden border-b border-gray-200 sm:rounded-lg\">\n\n              <div class=\"relative overflow-x-auto shadow-md sm:rounded-lg\">\n                <div class=\"table w-full text-sm text-left text-gray-500 dark:text-gray-400\">\n                  <div class=\"table-header-group text-xs text-gray-700 bg-gray-50 dark:bg-gray-700 dark:text-gray-400\">\n                    <AdminChannelRowHeader @reloadChannelsList=\"reloadChannelsList\"/>\n                  </div>\n                  <div class=\"table-row-group\">\n                    <AdminChannelRow\n                        v-for=\"channel in adminStore.paginatedChannels\"\n                        :key=\"channel.id\"\n                        :channel=\"channel\"\n                        @open-modal=\"openModal\"/>\n                  </div>\n                </div>\n\n                <!-- Paginator -->\n                <AdminChannelPaginator/>\n\n              </div>\n              <DynamicModal/>\n\n\n            </div>\n          </div>\n        </div>\n      </div>\n\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { usePageSetup } from '@/Utilities/PageSetup'\nimport { useAppSettingStore } from '@/Stores/AppSettingStore'\nimport { useNotificationStore } from '@/Stores/NotificationStore'\nimport { useAdminStore } from '@/Stores/AdminStore'\nimport AdminHeader from '@/Components/Pages/Admin/AdminHeader'\nimport Message from '@/Components/Global/Modals/Messages'\nimport DynamicModal from '@/Components/Pages/Admin/Channels/DynamicModal'\nimport AdminChannelHeaderButtons from '@/Components/Pages/Admin/Channels/AdminChannelHeaderButtons'\nimport AdminChannelRow from '@/Components/Pages/Admin/Channels/AdminChannelRow.vue'\nimport AdminChannelPaginator from '@/Components/Pages/Admin/Channels/AdminChannelPaginator.vue'\nimport AdminChannelRowHeader from '@/Components/Pages/Admin/Channels/AdminChannelRowHeader.vue'\n\nusePageSetup('admin.channels')\n\nconst appSettingStore = useAppSettingStore()\nconst notificationStore = useNotificationStore()\nconst adminStore = useAdminStore()\n\nadminStore.fetchChannels()\n\nfunction hasChannelSource(channel) {\n  if (channel && channel.source && channel.source.name) {\n    return channel.source.name\n  }\n  return null // Or return any other default value if needed\n}\n\n// let search = ref(props.filters.search);\n\n// watch(search, throttle(function (value) {\n//   Inertia.get('/admin/channels', {search: value}, {\n//     preserveState: true,\n//     replace: true\n//   });\n// }, 300));\n\nconst hasPriority = (playbackPriorityType) => {\n  if (playbackPriorityType) {\n    return true\n  }\n}\n\nconst openModal = ({channel, type}) => {\n  // adminStore.reset()\n  // adminStore.fetchChannels()\n  adminStore.setSelectedChannel(channel)\n  adminStore.setCurrentType(type)\n  adminStore.fetchItems(type) // Optionally prefetch items if the modal needs it\n  document.getElementById('dynamicModal').showModal() // Assuming the modal has an ID of 'dynamicModal'\n}\n\nconst setPlaybackPriorityType = async (channel, priorityType) => {\n  const dataToSend = {setPriorityType: priorityType}\n  try {\n    const response = await axios.post(`/admin/channels/${channel.id}/setPlaybackPriorityType`, dataToSend)\n    // do something here\n  } catch (error) {\n    console.log(error)\n  }\n}\n\nconst reloadChannelsList = async () => {\n  try {\n    await adminStore.fetchChannels()\n    // On success, show a success toast\n    notificationStore.setToastNotification('Channels reloaded successfully!', 'success', 3000)\n  } catch (error) {\n    // On failure, show an error toast\n    console.error(error)\n    notificationStore.setToastNotification('Failed to reload channels.', 'error', 3000)\n\n  }\n}\n</script>"],"names":["_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","delegateYield","asyncGeneratorStep","gen","reject","_next","_throw","key","info","error","_asyncToGenerator","fn","self","args","arguments","apply","err","undefined","initialState","channels","items","activeItemId","selectedChannel","currentType","searchTerm","modalHeader","currentPage","itemsPerPage","currentChannelsPage","itemsPerChannelsPage","sourceSelector","source","sourceType","firstPlaySettings","validationErrors","checkSendProcessing","activeStreams","fetchingActiveStreams","useAdminStore","defineStore","state","actions","assign","this","loadChannels","setCheckSendProcessing","unsetCheckSendProcessing","fetchChannels","_this","_callee","_context","axios","get","response","data","console","log","toggleChannelActiveStatus","channelId","_callee2","notificationStore","_response$data","message","status","_context2","useNotificationStore","post","setToastNotification","t0","addChannel","_this2","_callee3","_response$data2","errorMessage","validationMessages","_context3","success","fallbackMessages","map","msgs","join","updateChannel","newName","_this3","_callee4","_response$data3","_context4","concat","setSelectedChannel","item","setCurrentType","clearSelectedChannelAndItems","fetchItems","_this4","_callee5","_response","_response2","_context5","fetch","json","mist_stream_id","channel_external_source_id","channel_playlist_id","updateActiveItemId","id","_this5","_callee6","_context6","setMistStream","setChannelPlaylist","setExternalSource","setPlaybackPriorityType","channel","priorityType","_this6","_callee7","dataToSend","index","_context7","setPriorityType","findIndex","mistStreamId","_this7","_callee8","_context8","channelPlaylistId","_this8","_callee9","_context9","externalSourceId","_this9","_callee10","_context10","nextPage","totalModalPages","Math","ceil","prevPage","setPage","page","nextChannelsPage","prevChannelsPage","setChannelsPage","fetchFirstPlaySettings","_this10","_callee11","_response$data4","_context11","updateFirstPlaySettings","_this11","_callee12","_context12","patch","errors","handleErrors","fetchActiveStreams","_this12","_callee13","_response$data5","_context13","setActiveStreamAsFirstPlay","activeStream","_this13","_callee14","videoPlayerStore","_context14","useVideoPlayerStore","customVideoSource","mistServerUri","customVideoSourceType","customVideoName","customMediaType","streamName","streamMimeType","showName","getters","filteredItems","currentItem","find","activeItem","paginatedItems","start","end","paginatedChannels","totalChannelsPages","activeChannelsCount","filter","active","usePageSetup","pageName","userStore","useUserStore","appSettingStore","useAppSettingStore","showFlashMessage","pageIsHidden","isMobile","window","innerWidth","fullPage","ott","showOttButtons","makeVideoTopRight","pageReload","pageWasReloaded","location","reload","Inertia","on","event","search","shouldScrollToTop","requestAnimationFrame","topDiv","document","getElementById","scrollIntoView","behavior","scrollTo","setPrevUrl","noLayout","___CSS_LOADER_EXPORT___","module","channelStore","useChannelStore","props","__props","originalName","ref","addMetadataField","form","metadata","reactive","useForm","mime_type","comment","watch","mistStream","newVal","entries","_ref","_ref2","_slicedToArray","deep","immediate","submit","_ref3","route","closeModal","close","clearMistStream","clearErrors","splice","clearFlashMessage","computed","flash","warning","_objectSpread","displayBadges","adminStore","selectedItem","selectItem","textContent","showModal","confirmSelection","confirmRemove","removeMistStream","onMounted","refreshList","updateMistStreamModal","setPriority","confirmPriorityChange","options","locals","newChannelName","openAddChannelModal","script","_createBlock","_component_Popper","hover","openDelay","closeDelay","placement","content","_withCtx","_renderSlot","_ctx","$slots","_","emit","__emit","buttonText","_props$data$props$dat","dataTypeDb","dataType","dataPart","buttonClass","playback_priority_type","channelName","openEditChannelModal","handleOpenModal","target","blur","_x","openModal","reloadChannelsList"],"sourceRoot":""}