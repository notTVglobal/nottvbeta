"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk"] = self["webpackChunk"] || []).push([["resources_js_Stores_ChannelPlaylistStore_js"],{

/***/ "./resources/js/Stores/ChannelPlaylistStore.js":
/*!*****************************************************!*\
  !*** ./resources/js/Stores/ChannelPlaylistStore.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useChannelPlaylistStore: () => (/* binding */ useChannelPlaylistStore)\n/* harmony export */ });\n/* harmony import */ var pinia__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! pinia */ \"./node_modules/pinia/dist/pinia.mjs\");\n/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dayjs */ \"./node_modules/dayjs/dayjs.min.js\");\n/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(dayjs__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var dayjs_plugin_timezone__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! dayjs/plugin/timezone */ \"./node_modules/dayjs/plugin/timezone.js\");\n/* harmony import */ var dayjs_plugin_timezone__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(dayjs_plugin_timezone__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var dayjs_plugin_utc__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! dayjs/plugin/utc */ \"./node_modules/dayjs/plugin/utc.js\");\n/* harmony import */ var dayjs_plugin_utc__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(dayjs_plugin_utc__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var dayjs_plugin_isSameOrBefore__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! dayjs/plugin/isSameOrBefore */ \"./node_modules/dayjs/plugin/isSameOrBefore.js\");\n/* harmony import */ var dayjs_plugin_isSameOrBefore__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(dayjs_plugin_isSameOrBefore__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var dayjs_plugin_isSameOrAfter__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! dayjs/plugin/isSameOrAfter */ \"./node_modules/dayjs/plugin/isSameOrAfter.js\");\n/* harmony import */ var dayjs_plugin_isSameOrAfter__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(dayjs_plugin_isSameOrAfter__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _Stores_NotificationStore__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/Stores/NotificationStore */ \"./resources/js/Stores/NotificationStore.js\");\n/* harmony import */ var _Stores_UserStore__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @/Stores/UserStore */ \"./resources/js/Stores/UserStore.js\");\n/* harmony import */ var _Stores_AdminStore__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @/Stores/AdminStore */ \"./resources/js/Stores/AdminStore.js\");\n/* harmony import */ var _inertiajs_vue3__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @inertiajs/vue3 */ \"./node_modules/@inertiajs/vue3/dist/index.esm.js\");\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : String(i); }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, \"catch\": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n\n\n\n\n\n\n\n\n\ndayjs__WEBPACK_IMPORTED_MODULE_0___default().extend((dayjs_plugin_utc__WEBPACK_IMPORTED_MODULE_2___default()));\ndayjs__WEBPACK_IMPORTED_MODULE_0___default().extend((dayjs_plugin_timezone__WEBPACK_IMPORTED_MODULE_1___default()));\ndayjs__WEBPACK_IMPORTED_MODULE_0___default().extend((dayjs_plugin_isSameOrBefore__WEBPACK_IMPORTED_MODULE_3___default()));\ndayjs__WEBPACK_IMPORTED_MODULE_0___default().extend((dayjs_plugin_isSameOrAfter__WEBPACK_IMPORTED_MODULE_4___default()));\nvar initialState = function initialState() {\n  return {\n    playlists: [],\n    selectedPlaylist: null,\n    scheduleItems: [],\n    gaps: [],\n    startTime: dayjs__WEBPACK_IMPORTED_MODULE_0___default()().format('YYYY-MM-DDTHH:mm'),\n    endTime: dayjs__WEBPACK_IMPORTED_MODULE_0___default()().add(24, 'hour').format('YYYY-MM-DDTHH:mm'),\n    contentItems: [],\n    contentFetched: false,\n    currentPage: 1,\n    totalPages: 1,\n    searchQuery: '',\n    showModal: false,\n    loading: false,\n    loadingSchedules: false,\n    processing: false,\n    error: null,\n    id: null,\n    name: '',\n    description: '',\n    url: '',\n    type: 'regular',\n    priority: 1,\n    repeat_mode: 'repeat_all',\n    next_playlist_id: null\n  };\n};\nvar useChannelPlaylistStore = (0,pinia__WEBPACK_IMPORTED_MODULE_9__.defineStore)('channelPlaylistStore', {\n  state: initialState,\n  actions: {\n    reset: function reset() {\n      // Reset the store to its original state (clear all data)\n      Object.assign(this, initialState());\n    },\n    openAddContentModal: function openAddContentModal() {\n      this.showModal = true;\n    },\n    closeAddContentModal: function closeAddContentModal() {\n      this.showModal = false;\n    },\n    fetchPlaylists: function fetchPlaylists() {\n      var _this = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var response, _response$data, message, status, notificationStore, _notificationStore;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _this.loading = true;\n              _context.prev = 1;\n              _context.next = 4;\n              return axios.get('/admin/channel-playlist/get-playlists');\n            case 4:\n              response = _context.sent;\n              _this.playlists = response.data.playlists;\n              _response$data = response.data, message = _response$data.message, status = _response$data.status;\n              notificationStore = (0,_Stores_NotificationStore__WEBPACK_IMPORTED_MODULE_5__.useNotificationStore)();\n              notificationStore.setToastNotification(message, status);\n              _context.next = 16;\n              break;\n            case 11:\n              _context.prev = 11;\n              _context.t0 = _context[\"catch\"](1);\n              _this.error = _context.t0.response ? _context.t0.response.data.message : _context.t0.message;\n              _notificationStore = (0,_Stores_NotificationStore__WEBPACK_IMPORTED_MODULE_5__.useNotificationStore)();\n              _notificationStore.setToastNotification(_this.error, 'error');\n            case 16:\n              _context.prev = 16;\n              _this.loading = false;\n              return _context.finish(16);\n            case 19:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[1, 11, 16, 19]]);\n      }))();\n    },\n    createPlaylist: function createPlaylist(playlist) {\n      var _this2 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var response;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              if (_this2.validateScheduleItems()) {\n                _context2.next = 2;\n                break;\n              }\n              return _context2.abrupt(\"return\", false);\n            case 2:\n              _this2.loading = true;\n              _context2.prev = 3;\n              _context2.next = 6;\n              return axios.post('/channelPlaylists', _objectSpread(_objectSpread({}, playlist), {}, {\n                scheduleItems: _this2.getValidScheduleItems()\n              }));\n            case 6:\n              response = _context2.sent;\n              _this2.playlists.push(response.data.playlist);\n              _this2.showNotification(response.data);\n              _this2.reset();\n              return _context2.abrupt(\"return\", true);\n            case 13:\n              _context2.prev = 13;\n              _context2.t0 = _context2[\"catch\"](3);\n              _this2.handleError(_context2.t0);\n              return _context2.abrupt(\"return\", false);\n            case 17:\n              _context2.prev = 17;\n              _this2.loading = false;\n              return _context2.finish(17);\n            case 20:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, null, [[3, 13, 17, 20]]);\n      }))();\n    },\n    updatePlaylist: function updatePlaylist(playlist) {\n      var _this3 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var adminStore, response, index, adminIndex;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              adminStore = (0,_Stores_AdminStore__WEBPACK_IMPORTED_MODULE_7__.useAdminStore)();\n              playlist.scheduleItems = _this3.scheduleItems;\n              if (_this3.validateScheduleItems(playlist.scheduleItems)) {\n                _context3.next = 5;\n                break;\n              }\n              console.error('Invalid schedule items');\n              return _context3.abrupt(\"return\", false);\n            case 5:\n              _this3.loading = true;\n              _context3.prev = 6;\n              _context3.next = 9;\n              return axios.put(\"/channelPlaylists/\".concat(playlist.id), playlist);\n            case 9:\n              response = _context3.sent;\n              index = _this3.playlists.findIndex(function (p) {\n                return p.id === playlist.id;\n              });\n              if (index !== -1) {\n                _this3.playlists[index] = response.data.playlist;\n              }\n              adminIndex = adminStore.items.findIndex(function (item) {\n                return item.id === playlist.id;\n              });\n              if (adminIndex !== -1) {\n                adminStore.items[adminIndex] = _objectSpread(_objectSpread({}, response.data.playlist), {}, {\n                  playlist_items: _this3.scheduleItems\n                });\n              }\n              _this3.showNotification(response.data);\n              document.getElementById('updateChannelPlaylistModal').close();\n              _this3.clearError();\n              return _context3.abrupt(\"return\", true);\n            case 20:\n              _context3.prev = 20;\n              _context3.t0 = _context3[\"catch\"](6);\n              _this3.handleError(_context3.t0);\n              return _context3.abrupt(\"return\", false);\n            case 24:\n              _context3.prev = 24;\n              _this3.loading = false;\n              return _context3.finish(24);\n            case 27:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, null, [[6, 20, 24, 27]]);\n      }))();\n    },\n    validateScheduleItems: function validateScheduleItems() {\n      var notificationStore = (0,_Stores_NotificationStore__WEBPACK_IMPORTED_MODULE_5__.useNotificationStore)();\n\n      // Check for conflicts\n      if (this.scheduleItems.some(function (item) {\n        return item.conflict;\n      })) {\n        notificationStore.setGeneralServiceNotification('Conflict Detected', 'There are conflicts in the schedule items. Please resolve them before proceeding.');\n        return false;\n      }\n\n      // Check for gaps\n      var items = this.scheduleItems.filter(function (item) {\n        return !item.removed && item.type !== 'gap';\n      }).sort(function (a, b) {\n        return dayjs__WEBPACK_IMPORTED_MODULE_0___default()(a.start_dateTime).isBefore(dayjs__WEBPACK_IMPORTED_MODULE_0___default()(b.start_dateTime)) ? -1 : 1;\n      });\n      for (var i = 0; i < items.length - 1; i++) {\n        if (dayjs__WEBPACK_IMPORTED_MODULE_0___default()(items[i].end_dateTime).isBefore(dayjs__WEBPACK_IMPORTED_MODULE_0___default()(items[i + 1].start_dateTime))) {\n          notificationStore.setGeneralServiceNotification('Gap Detected', 'There are gaps in the schedule items. Please ensure there are no gaps before proceeding.');\n          return false;\n        }\n      }\n      return true;\n    },\n    getValidScheduleItems: function getValidScheduleItems() {\n      return this.scheduleItems.filter(function (item) {\n        return !item.removed && item.type !== 'gap';\n      }).sort(function (a, b) {\n        return dayjs__WEBPACK_IMPORTED_MODULE_0___default()(a.start_dateTime).isBefore(dayjs__WEBPACK_IMPORTED_MODULE_0___default()(b.start_dateTime)) ? -1 : 1;\n      });\n    },\n    showNotification: function showNotification(response) {\n      var message = response.message,\n        status = response.status;\n      var notificationStore = (0,_Stores_NotificationStore__WEBPACK_IMPORTED_MODULE_5__.useNotificationStore)();\n      notificationStore.setToastNotification(message, status);\n    },\n    handleError: function handleError(error) {\n      var notificationStore = (0,_Stores_NotificationStore__WEBPACK_IMPORTED_MODULE_5__.useNotificationStore)();\n      var errorMessage = error.response ? error.response.data.message : error.message;\n      var errorDetails = error.response && error.response.data.details ? error.response.data.details : '';\n\n      // Check if errorDetails is a string and parse it to an object if necessary\n      if (typeof errorDetails === 'string') {\n        try {\n          errorDetails = JSON.parse(errorDetails);\n        } catch (e) {\n          // If parsing fails, wrap the errorDetails in an object\n          errorDetails = {\n            details: errorDetails\n          };\n        }\n      }\n\n      // Aggregate validation error messages with HTML styling\n      var detailedErrorMessages = '<ul>';\n      for (var _i = 0, _Object$entries = Object.entries(errorDetails); _i < _Object$entries.length; _i++) {\n        var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n          field = _Object$entries$_i[0],\n          messages = _Object$entries$_i[1];\n        // Ensure messages is an array and join them into a string\n        var messageText = Array.isArray(messages) ? messages.join(', ') : messages;\n        detailedErrorMessages += \"<li><strong>\".concat(field, \":</strong> \").concat(messageText, \"</li>\");\n      }\n      detailedErrorMessages += '</ul>';\n\n      // Display general error message with aggregated details\n      notificationStore.setGeneralServiceNotification('Validation Error', \"\".concat(errorMessage, \"\\n\").concat(detailedErrorMessages));\n      this.error = errorMessage;\n    },\n    setPlaylistData: function setPlaylistData(playlist) {\n      console.log('playlist:', playlist);\n      var userStore = (0,_Stores_UserStore__WEBPACK_IMPORTED_MODULE_6__.useUserStore)();\n      var startTime = dayjs__WEBPACK_IMPORTED_MODULE_0___default().utc(playlist.start_dateTime).tz(userStore.timezone).format('YYYY-MM-DDTHH:mm');\n      var endTime = dayjs__WEBPACK_IMPORTED_MODULE_0___default().utc(playlist.end_dateTime).tz(userStore.timezone).format('YYYY-MM-DDTHH:mm');\n      this.id = playlist.id;\n      this.name = playlist.name;\n      this.description = playlist.description;\n      this.url = playlist.url;\n      this.type = playlist.type;\n      this.priority = playlist.priority;\n      this.repeat_mode = playlist.repeat_mode;\n      this.next_playlist_id = playlist.next_playlist_id;\n      this.startTime = startTime;\n      this.endTime = endTime;\n      console.log('playlist.playlist_items:', playlist.playlist_items);\n      this.scheduleItems = playlist.playlist_items.filter(function (item) {\n        console.log('Filtering item:', item);\n        return item !== null && item !== undefined;\n      }).map(function (item) {\n        var mappedItem = {\n          id: item.id,\n          content_id: item.content_id,\n          content_type: item.content_type,\n          order: item.order,\n          media_type: item.media_type,\n          source_path: item.source_path,\n          source_type: item.source_type,\n          is_live: item.is_live,\n          is_scheduled: item.is_scheduled,\n          current_viewers_count: item.current_viewers_count,\n          max_viewers_count: item.max_viewers_count,\n          additional_sources: item.additional_sources,\n          custom_playback_options: item.custom_playback_options,\n          metadata: item.metadata,\n          has_played: item.has_played,\n          start_dateTime: item.start_dateTime,\n          end_dateTime: item.end_dateTime,\n          duration_minutes: item.duration_minutes,\n          type: item.type,\n          content: item.content\n        };\n        console.log('Mapped item:', mappedItem);\n        return mappedItem;\n      });\n      console.log('this.scheduleItems:', this.scheduleItems);\n    },\n    fetchSchedules: function fetchSchedules() {\n      var _this4 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var notificationStore, _this4$scheduleItems, response, _response$data2, message, status;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              _this4.loadingSchedules = true;\n              _this4.clearError();\n              notificationStore = (0,_Stores_NotificationStore__WEBPACK_IMPORTED_MODULE_5__.useNotificationStore)();\n              if (!(!_this4.startTime || !_this4.endTime)) {\n                _context4.next = 7;\n                break;\n              }\n              notificationStore.setGeneralServiceNotification('Start and End Times Required', 'Please check the schedule start and end times.');\n              _this4.loadingSchedules = false;\n              return _context4.abrupt(\"return\");\n            case 7:\n              _context4.prev = 7;\n              _context4.next = 10;\n              return axios.get(\"/api/schedules\", {\n                params: {\n                  startTime: _this4.startTimeUTC,\n                  endTime: _this4.endTimeUTC\n                }\n              });\n            case 10:\n              response = _context4.sent;\n              // Push new items to the existing array with added attributes\n              (_this4$scheduleItems = _this4.scheduleItems).push.apply(_this4$scheduleItems, _toConsumableArray(response.data.items.map(function (item) {\n                return _objectSpread(_objectSpread({}, item), {}, {\n                  removed: false,\n                  is_scheduled: true\n                });\n              })));\n              _response$data2 = response.data, message = _response$data2.message, status = _response$data2.status;\n              notificationStore.setToastNotification(message, status);\n              _this4.updateConflicts();\n              _this4.loadingSchedules = false;\n              return _context4.abrupt(\"return\", response.data);\n            case 19:\n              _context4.prev = 19;\n              _context4.t0 = _context4[\"catch\"](7);\n              _this4.error = _context4.t0.response ? _context4.t0.response.data.message : _context4.t0.message;\n              notificationStore.setToastNotification(_this4.error, 'error');\n              _this4.loadingSchedules = false;\n              throw _context4.t0;\n            case 25:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, null, [[7, 19]]);\n      }))();\n    },\n    removeItem: function removeItem(id) {\n      var item = this.scheduleItems.find(function (item) {\n        return item.id === id;\n      });\n      if (item) {\n        item.removed = true;\n        this.scheduleItems = _toConsumableArray(this.scheduleItems); // Trigger reactivity\n        this.updateConflicts();\n      }\n      this.clearError();\n    },\n    addItem: function addItem(id) {\n      var item = this.scheduleItems.find(function (item) {\n        return item.id === id;\n      });\n      if (item) {\n        item.removed = false;\n        this.scheduleItems = _toConsumableArray(this.scheduleItems); // Trigger reactivity\n        this.updateConflicts();\n      }\n      this.clearError();\n    },\n    removeAllItems: function removeAllItems() {\n      this.scheduleItems = [];\n      this.clearError();\n    },\n    clearRemovedItems: function clearRemovedItems() {\n      this.scheduleItems = this.scheduleItems.filter(function (item) {\n        return !item.removed;\n      });\n      this.clearError();\n      this.recalculateIndexes();\n    },\n    recalculateIndexes: function recalculateIndexes() {\n      this.scheduleItems = this.scheduleItems.map(function (item, index) {\n        return _objectSpread(_objectSpread({}, item), {}, {\n          index: index\n        });\n      });\n    },\n    updateConflicts: function updateConflicts() {\n      var items = this.scheduleItems.filter(function (item) {\n        return !item.removed;\n      });\n      items.sort(function (a, b) {\n        return dayjs__WEBPACK_IMPORTED_MODULE_0___default()(a.start_dateTime).isBefore(dayjs__WEBPACK_IMPORTED_MODULE_0___default()(b.start_dateTime)) ? -1 : 1;\n      });\n      for (var i = 0; i < items.length; i++) {\n        var currentItem = items[i];\n        currentItem.conflict = false;\n      }\n      for (var _i2 = 0; _i2 < items.length; _i2++) {\n        var _currentItem = items[_i2];\n        for (var j = _i2 + 1; j < items.length; j++) {\n          var nextItem = items[j];\n          if (dayjs__WEBPACK_IMPORTED_MODULE_0___default()(_currentItem.start_dateTime).isBefore(dayjs__WEBPACK_IMPORTED_MODULE_0___default()(nextItem.end_dateTime)) && dayjs__WEBPACK_IMPORTED_MODULE_0___default()(_currentItem.end_dateTime).isAfter(dayjs__WEBPACK_IMPORTED_MODULE_0___default()(nextItem.start_dateTime))) {\n            _currentItem.conflict = true;\n            nextItem.conflict = true;\n          }\n        }\n      }\n    },\n    selectPlaylist: function selectPlaylist(playlist) {\n      this.selectedPlaylist = playlist;\n    },\n    removePlaylist: function removePlaylist(playlistId) {\n      _inertiajs_vue3__WEBPACK_IMPORTED_MODULE_8__.router[\"delete\"](route('channelPlaylists.destroy', {\n        channelPlaylist: playlistId\n      }));\n    },\n    clearError: function clearError() {\n      this.error = null;\n    },\n    resolveConflicts: function resolveConflicts() {\n      var _this5 = this;\n      this.processing = true; // Set processing flag\n      var conflictsResolved;\n      do {\n        conflictsResolved = false;\n\n        // Create a copy of the items array without removed items\n        var items = this.scheduleItems.filter(function (item) {\n          return !item.removed;\n        });\n        var _loop = function _loop() {\n            var currentItem = items[i];\n            if (!currentItem.conflict) return 0; // continue\n            var _loop2 = function _loop2() {\n                var previousItem = items[j];\n                if (previousItem.removed) return 0; // continue\n\n                // Check for conflict\n                var currentStart = dayjs__WEBPACK_IMPORTED_MODULE_0___default()(currentItem.start_dateTime);\n                var previousEnd = dayjs__WEBPACK_IMPORTED_MODULE_0___default()(previousItem.end_dateTime);\n                var previousStart = dayjs__WEBPACK_IMPORTED_MODULE_0___default()(previousItem.start_dateTime);\n                if (currentStart.isSame(previousStart) || currentStart.isBefore(previousEnd) && !currentStart.isSame(previousEnd)) {\n                  // Resolve conflict based on priority and creation date\n                  if (currentItem.priority > previousItem.priority) {\n                    _this5.scheduleItems = _this5.scheduleItems.map(function (item) {\n                      return item.id === currentItem.id ? _objectSpread(_objectSpread({}, item), {}, {\n                        removed: true\n                      }) : item;\n                    });\n                    conflictsResolved = true;\n                    return 1; // break\n                  } else if (currentItem.priority < previousItem.priority) {\n                    _this5.scheduleItems = _this5.scheduleItems.map(function (item) {\n                      return item.id === previousItem.id ? _objectSpread(_objectSpread({}, item), {}, {\n                        removed: true\n                      }) : item;\n                    });\n                    conflictsResolved = true;\n                    return 1; // break\n                  } else {\n                    if (dayjs__WEBPACK_IMPORTED_MODULE_0___default()(currentItem.created_at).isAfter(dayjs__WEBPACK_IMPORTED_MODULE_0___default()(previousItem.created_at))) {\n                      _this5.scheduleItems = _this5.scheduleItems.map(function (item) {\n                        return item.id === currentItem.id ? _objectSpread(_objectSpread({}, item), {}, {\n                          removed: true\n                        }) : item;\n                      });\n                      conflictsResolved = true;\n                      return 1; // break\n                    } else {\n                      _this5.scheduleItems = _this5.scheduleItems.map(function (item) {\n                        return item.id === previousItem.id ? _objectSpread(_objectSpread({}, item), {}, {\n                          removed: true\n                        }) : item;\n                      });\n                      conflictsResolved = true;\n                      return 1; // break\n                    }\n                  }\n                }\n              },\n              _ret2;\n            for (var j = 0; j < i; j++) {\n              _ret2 = _loop2();\n              if (_ret2 === 0) continue;\n              if (_ret2 === 1) break;\n            }\n            if (conflictsResolved) return 1; // break\n          },\n          _ret;\n        for (var i = 1; i < items.length; i++) {\n          _ret = _loop();\n          if (_ret === 0) continue;\n          if (_ret === 1) break;\n        }\n      } while (conflictsResolved);\n      this.updateConflicts();\n      // console.log('Finished processing conflicts')\n      this.processing = false; // Clear processing flag\n    },\n    insertGaps: function insertGaps() {\n      this.clearError();\n      // console.log('Start Time UTC:', this.startTimeUTC);\n      // console.log('End Time UTC:', this.endTimeUTC);\n\n      // Map schedule items to include dayjs objects for start and end times\n      var items = this.scheduleItems.filter(function (item) {\n        return !item.removed;\n      }).map(function (item) {\n        return _objectSpread(_objectSpread({}, item), {}, {\n          start: dayjs__WEBPACK_IMPORTED_MODULE_0___default()(item.start_dateTime),\n          end: dayjs__WEBPACK_IMPORTED_MODULE_0___default()(item.end_dateTime)\n        });\n      });\n\n      // console.log('Items:', items);\n\n      this.gaps = [];\n      if (items.length === 0) {\n        // console.log('No scheduled items, creating a single gap for the entire period.');\n        this.gaps.push({\n          type: 'gap',\n          start_dateTime: dayjs__WEBPACK_IMPORTED_MODULE_0___default().utc(this.startTimeUTC).toISOString(),\n          end_dateTime: dayjs__WEBPACK_IMPORTED_MODULE_0___default().utc(this.endTimeUTC).toISOString(),\n          duration_minutes: dayjs__WEBPACK_IMPORTED_MODULE_0___default()(this.endTimeUTC).diff(dayjs__WEBPACK_IMPORTED_MODULE_0___default()(this.startTimeUTC), 'minute'),\n          id: \"gap-\".concat(dayjs__WEBPACK_IMPORTED_MODULE_0___default().utc(this.startTimeUTC).toISOString(), \"-\").concat(dayjs__WEBPACK_IMPORTED_MODULE_0___default().utc(this.endTimeUTC).toISOString()),\n          start: dayjs__WEBPACK_IMPORTED_MODULE_0___default().utc(this.startTimeUTC),\n          end: dayjs__WEBPACK_IMPORTED_MODULE_0___default().utc(this.endTimeUTC)\n        });\n      } else {\n        this.checkForGapBeforeFirstItem(items);\n        this.checkForGapsBetweenItems(items);\n        this.checkForGapAfterLastItem(items);\n      }\n\n      // console.log('Gaps:', this.gaps);\n\n      // Add gaps to the schedule items and sort the list by start dateTime\n      this.scheduleItems = [].concat(_toConsumableArray(items), _toConsumableArray(this.gaps)).sort(function (a, b) {\n        return a.start.isBefore(b.start) ? -1 : 1;\n      });\n\n      // console.log('Final Schedule Items:', this.scheduleItems);\n    },\n    checkForGapBeforeFirstItem: function checkForGapBeforeFirstItem(items) {\n      // console.log('Checking for gap before the first item...')\n      if (items.length > 0 && dayjs__WEBPACK_IMPORTED_MODULE_0___default().utc(this.startTimeUTC).isBefore(items[0].start)) {\n        var gapStart = dayjs__WEBPACK_IMPORTED_MODULE_0___default().utc(this.startTimeUTC);\n        var gapEnd = items[0].start;\n        var gapDuration = gapEnd.diff(gapStart, 'minute');\n        // console.log(`Creating gap before the first item: ${gapStart.toISOString()} to ${gapEnd.toISOString()}, duration: ${gapDuration} minutes`)\n\n        this.gaps.push({\n          type: 'gap',\n          start_dateTime: gapStart.toISOString(),\n          // ISO 8601 string in UTC\n          end_dateTime: gapEnd.toISOString(),\n          // ISO 8601 string in UTC\n          duration_minutes: gapDuration,\n          id: \"gap-\".concat(gapStart.toISOString(), \"-\").concat(gapEnd.toISOString()),\n          start: gapStart,\n          end: gapEnd\n        });\n      } else {\n        // console.log('No gap before the first item.')\n      }\n    },\n    checkForGapsBetweenItems: function checkForGapsBetweenItems(items) {\n      // console.log('Checking for gaps between items...')\n      for (var i = 0; i < items.length - 1; i++) {\n        var currentItem = items[i];\n        var nextItem = items[i + 1];\n        var gapStart = currentItem.end;\n        var gapEnd = nextItem.start;\n\n        // console.log(`Current Item: ${currentItem.id}, End: ${currentItem.end.toISOString()}`)\n        // console.log(`Next Item: ${nextItem.id}, Start: ${nextItem.start.toISOString()}`)\n        // console.log(`Gap start: ${gapStart.toISOString()}, Gap end: ${gapEnd.toISOString()}`)\n\n        if (gapStart.isBefore(gapEnd)) {\n          var gapDuration = gapEnd.diff(gapStart, 'minute');\n          // console.log(`Creating gap between items: ${gapStart.toISOString()} to ${gapEnd.toISOString()}, duration: ${gapDuration} minutes`)\n\n          this.gaps.push({\n            type: 'gap',\n            start_dateTime: gapStart.toISOString(),\n            // ISO 8601 string in UTC\n            end_dateTime: gapEnd.toISOString(),\n            // ISO 8601 string in UTC\n            duration_minutes: gapDuration,\n            id: \"gap-\".concat(gapStart.toISOString(), \"-\").concat(gapEnd.toISOString()),\n            start: gapStart,\n            end: gapEnd\n          });\n        } else {\n          // console.log('No gap between these items.')\n        }\n      }\n    },\n    checkForGapAfterLastItem: function checkForGapAfterLastItem(items) {\n      // console.log('Checking for gap after the last item...');\n      if (items.length > 0) {\n        var lastItemEnd = items[items.length - 1].end;\n        var endTime = dayjs__WEBPACK_IMPORTED_MODULE_0___default().utc(this.endTimeUTC); // Ensure endTimeUTC is treated as UTC\n        // console.log(`Last Item End: ${lastItemEnd.toISOString()}, End Time: ${endTime.toISOString()}`);\n\n        // Check that last item ends before endTimeUTC\n        if (lastItemEnd.isBefore(endTime)) {\n          var gapStart = lastItemEnd;\n          var gapEnd = endTime;\n          var gapDuration = gapEnd.diff(gapStart, 'minute');\n          // console.log(`Creating gap after the last item: ${gapStart.toISOString()} to ${gapEnd.toISOString()}, duration: ${gapDuration} minutes`);\n\n          this.gaps.push({\n            type: 'gap',\n            start_dateTime: gapStart.toISOString(),\n            // ISO 8601 string in UTC\n            end_dateTime: gapEnd.toISOString(),\n            // ISO 8601 string in UTC\n            duration_minutes: gapDuration,\n            id: \"gap-\".concat(gapStart.toISOString(), \"-\").concat(gapEnd.toISOString()),\n            start: gapStart,\n            end: gapEnd\n          });\n        } else {\n          // console.log('No gap after the last item.');\n        }\n      } else {\n        // console.log('No items to check for gaps after.');\n      }\n    },\n    fetchContent: function fetchContent(contentType, maxDurationMinutes, startDateTime) {\n      var _arguments = arguments,\n        _this6 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        var page, search, notificationStore, startDateTimeUTC, response, _response$data3, message, status;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              page = _arguments.length > 3 && _arguments[3] !== undefined ? _arguments[3] : 1;\n              search = _arguments.length > 4 && _arguments[4] !== undefined ? _arguments[4] : '';\n              _this6.loading = true;\n              _this6.clearError();\n              notificationStore = (0,_Stores_NotificationStore__WEBPACK_IMPORTED_MODULE_5__.useNotificationStore)(); // Convert startDateTime from user's timezone to UTC\n              startDateTimeUTC = dayjs__WEBPACK_IMPORTED_MODULE_0___default()(startDateTime).tz(dayjs__WEBPACK_IMPORTED_MODULE_0___default().tz.guess()).utc().format('YYYY-MM-DDTHH:mm:ss[Z]'); // Log the parameters before making the request\n              // console.log('Fetching content with parameters:');\n              // console.log('Content Type:', contentType);\n              // console.log('Max Duration Minutes:', maxDurationMinutes);\n              // console.log('Start DateTime (User Timezone):', startDateTime);\n              // console.log('Start DateTime (UTC):', startDateTimeUTC);\n              // console.log('Page:', page);\n              // console.log('Search Query:', search);\n              _context5.prev = 6;\n              _context5.next = 9;\n              return axios.get('/admin/channel-playlist/get-content', {\n                params: {\n                  type: contentType,\n                  maxDurationMinutes: maxDurationMinutes,\n                  start_dateTime: startDateTimeUTC,\n                  page: page,\n                  search: search\n                }\n              });\n            case 9:\n              response = _context5.sent;\n              console.log('Response data:', response.data); // Log the response data\n              _this6.contentItems = response.data.items;\n              _this6.currentPage = response.data.current_page;\n              _this6.totalPages = response.data.total_pages;\n              _this6.contentFetched = true;\n              _response$data3 = response.data, message = _response$data3.message, status = _response$data3.status;\n              notificationStore.setToastNotification(message, status);\n              _context5.next = 24;\n              break;\n            case 19:\n              _context5.prev = 19;\n              _context5.t0 = _context5[\"catch\"](6);\n              _this6.error = _context5.t0.response ? _context5.t0.response.data.message : _context5.t0.message;\n              console.error('Error fetching content:', _this6.error);\n              notificationStore.setToastNotification(_this6.error, 'error');\n            case 24:\n              _context5.prev = 24;\n              _this6.loading = false;\n              return _context5.finish(24);\n            case 27:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5, null, [[6, 19, 24, 27]]);\n      }))();\n    },\n    addContentToSchedule: function addContentToSchedule(content) {\n      this.clearError();\n      this.scheduleItems.push(content);\n      this.scheduleItems = _toConsumableArray(this.scheduleItems); // Trigger reactivity\n      this.removeGap(content.start_dateTime); // Remove the gap after adding content\n      this.insertGaps(); // Update gaps after removing and adding content\n    },\n    removeGap: function removeGap(startDateTime) {\n      // console.log('removing gap...')\n      // console.log('start dateTime: ' + startDateTime)\n      this.scheduleItems = this.scheduleItems.filter(function (item) {\n        return !(item.type === 'gap' && item.start_dateTime === startDateTime);\n      });\n    },\n    resetContent: function resetContent() {\n      this.contentItems = [];\n      this.contentFetched = false;\n      this.error = null;\n      this.currentPage = 1;\n      this.totalPages = 1;\n      this.searchQuery = '';\n    },\n    setSearchQuery: function setSearchQuery(query) {\n      this.searchQuery = query;\n    },\n    setPage: function setPage(page) {\n      this.currentPage = page;\n    }\n  },\n  getters: {\n    startTimeUTC: function startTimeUTC(state) {\n      return dayjs__WEBPACK_IMPORTED_MODULE_0___default()(state.startTime).utc().format('YYYY-MM-DDTHH:mm:ss[Z]');\n    },\n    endTimeUTC: function endTimeUTC(state) {\n      return dayjs__WEBPACK_IMPORTED_MODULE_0___default()(state.endTime).utc().format('YYYY-MM-DDTHH:mm:ss[Z]');\n    },\n    scheduleItemsWithUserTimezone: function scheduleItemsWithUserTimezone(state) {\n      var userStore = (0,_Stores_UserStore__WEBPACK_IMPORTED_MODULE_6__.useUserStore)();\n      var items = state.scheduleItems.map(function (item) {\n        return _objectSpread(_objectSpread({}, item), {}, {\n          start_dateTime: dayjs__WEBPACK_IMPORTED_MODULE_0___default()(item.start_dateTime).tz(userStore.timezone).format('YYYY-MM-DDTHH:mm:ssZ'),\n          end_dateTime: dayjs__WEBPACK_IMPORTED_MODULE_0___default()(item.end_dateTime).tz(userStore.timezone).format('YYYY-MM-DDTHH:mm:ssZ')\n        });\n      });\n      items.sort(function (a, b) {\n        return dayjs__WEBPACK_IMPORTED_MODULE_0___default()(a.start_dateTime).isBefore(dayjs__WEBPACK_IMPORTED_MODULE_0___default()(b.start_dateTime)) ? -1 : 1;\n      });\n      return items;\n    },\n    hasRemovedItems: function hasRemovedItems(state) {\n      return state.scheduleItems.some(function (item) {\n        return item.removed;\n      });\n    },\n    conflictCount: function conflictCount(state) {\n      return state.scheduleItems.filter(function (item) {\n        return item.conflict && !item.removed;\n      }).length;\n    },\n    gapCount: function gapCount(state) {\n      var items = state.scheduleItems.filter(function (item) {\n        return !item.removed && item.type !== 'gap';\n      }).map(function (item) {\n        return {\n          start: dayjs__WEBPACK_IMPORTED_MODULE_0___default()(item.start_dateTime),\n          end: dayjs__WEBPACK_IMPORTED_MODULE_0___default()(item.end_dateTime),\n          conflict: item.conflict\n        };\n      });\n      var gaps = 0;\n\n      // console.log('Calculating gaps...');\n      // console.log('Start Time UTC:', state.startTimeUTC);\n      // console.log('End Time UTC:', state.endTimeUTC);\n      // console.log('Items:', items);\n\n      // If there are no items, the entire period is a single gap\n      if (items.length === 0) {\n        // console.log('No scheduled items, entire period is a gap.');\n        return 1;\n      }\n\n      // Check for gap before the first item\n      if (dayjs__WEBPACK_IMPORTED_MODULE_0___default().utc(state.startTimeUTC).isBefore(items[0].start)) {\n        // console.log('Gap before the first item');\n        gaps++;\n      } else {\n        // console.log('No gap before the first item');\n      }\n\n      // Check for gaps between adjacent items\n      for (var i = 0; i < items.length - 1; i++) {\n        var currentItem = items[i];\n        var nextItem = items[i + 1];\n\n        // console.log(`Current Item: ${currentItem.start.toISOString()}, End: ${currentItem.end.toISOString()}`);\n        // console.log(`Next Item: ${nextItem.start.toISOString()}, Start: ${nextItem.end.toISOString()}`);\n\n        // Only consider gaps if there are no conflicts\n        if (!currentItem.conflict && !nextItem.conflict && currentItem.end.isBefore(nextItem.start)) {\n          // console.log('Gap between items');\n          gaps++;\n        } else {\n          // console.log('No gap between these items');\n        }\n      }\n\n      // Check for gap after the last item\n      if (dayjs__WEBPACK_IMPORTED_MODULE_0___default().utc(state.endTimeUTC).isAfter(items[items.length - 1].end)) {\n        // console.log('Gap after the last item');\n        gaps++;\n      } else {\n        // console.log('No gap after the last item');\n      }\n\n      // console.log('Total gaps:', gaps);\n      return gaps;\n    }\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/Stores/ChannelPlaylistStore.js\n");

/***/ })

}]);