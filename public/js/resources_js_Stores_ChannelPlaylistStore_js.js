"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunknottvbeta"] = self["webpackChunknottvbeta"] || []).push([["resources_js_Stores_ChannelPlaylistStore_js"],{

/***/ "./resources/js/Stores/ChannelPlaylistStore.js":
/*!*****************************************************!*\
  !*** ./resources/js/Stores/ChannelPlaylistStore.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useChannelPlaylistStore: () => (/* binding */ useChannelPlaylistStore)\n/* harmony export */ });\n/* harmony import */ var pinia__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! pinia */ \"./node_modules/pinia/dist/pinia.mjs\");\n/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dayjs */ \"./node_modules/dayjs/dayjs.min.js\");\n/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(dayjs__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var dayjs_plugin_timezone__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! dayjs/plugin/timezone */ \"./node_modules/dayjs/plugin/timezone.js\");\n/* harmony import */ var dayjs_plugin_timezone__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(dayjs_plugin_timezone__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var dayjs_plugin_utc__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! dayjs/plugin/utc */ \"./node_modules/dayjs/plugin/utc.js\");\n/* harmony import */ var dayjs_plugin_utc__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(dayjs_plugin_utc__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var dayjs_plugin_isSameOrBefore__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! dayjs/plugin/isSameOrBefore */ \"./node_modules/dayjs/plugin/isSameOrBefore.js\");\n/* harmony import */ var dayjs_plugin_isSameOrBefore__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(dayjs_plugin_isSameOrBefore__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var dayjs_plugin_isSameOrAfter__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! dayjs/plugin/isSameOrAfter */ \"./node_modules/dayjs/plugin/isSameOrAfter.js\");\n/* harmony import */ var dayjs_plugin_isSameOrAfter__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(dayjs_plugin_isSameOrAfter__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _Stores_NotificationStore__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/Stores/NotificationStore */ \"./resources/js/Stores/NotificationStore.js\");\n/* harmony import */ var _Stores_UserStore__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @/Stores/UserStore */ \"./resources/js/Stores/UserStore.js\");\n/* harmony import */ var _Stores_AdminStore__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @/Stores/AdminStore */ \"./resources/js/Stores/AdminStore.js\");\n/* harmony import */ var _inertiajs_vue3__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @inertiajs/vue3 */ \"./node_modules/@inertiajs/vue3/dist/index.esm.js\");\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _iterableToArray(r) { if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r); }\nfunction _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }\nfunction _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, \"catch\": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); }); }; }\n\n\n\n\n\n\n\n\n\n\ndayjs__WEBPACK_IMPORTED_MODULE_0___default().extend((dayjs_plugin_utc__WEBPACK_IMPORTED_MODULE_2___default()));\ndayjs__WEBPACK_IMPORTED_MODULE_0___default().extend((dayjs_plugin_timezone__WEBPACK_IMPORTED_MODULE_1___default()));\ndayjs__WEBPACK_IMPORTED_MODULE_0___default().extend((dayjs_plugin_isSameOrBefore__WEBPACK_IMPORTED_MODULE_3___default()));\ndayjs__WEBPACK_IMPORTED_MODULE_0___default().extend((dayjs_plugin_isSameOrAfter__WEBPACK_IMPORTED_MODULE_4___default()));\nvar initialState = function initialState() {\n  return {\n    playlists: [],\n    selectedPlaylist: null,\n    scheduleItems: [],\n    gaps: [],\n    startTime: dayjs__WEBPACK_IMPORTED_MODULE_0___default()().format('YYYY-MM-DDTHH:mm'),\n    endTime: dayjs__WEBPACK_IMPORTED_MODULE_0___default()().add(24, 'hour').format('YYYY-MM-DDTHH:mm'),\n    contentItems: [],\n    contentFetched: false,\n    currentPage: 1,\n    totalPages: 1,\n    searchQuery: '',\n    showModal: false,\n    loading: false,\n    loadingSchedules: false,\n    processing: false,\n    error: null,\n    id: null,\n    name: '',\n    description: '',\n    url: '',\n    type: 'regular',\n    priority: 1,\n    repeat_mode: 'repeat_all',\n    next_playlist_id: null\n  };\n};\nvar useChannelPlaylistStore = (0,pinia__WEBPACK_IMPORTED_MODULE_9__.defineStore)('channelPlaylistStore', {\n  state: initialState,\n  actions: {\n    reset: function reset() {\n      // Reset the store to its original state (clear all data)\n      Object.assign(this, initialState());\n    },\n    openAddContentModal: function openAddContentModal() {\n      this.showModal = true;\n    },\n    closeAddContentModal: function closeAddContentModal() {\n      this.showModal = false;\n    },\n    fetchPlaylists: function fetchPlaylists() {\n      var _this = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var response, _response$data, message, status, notificationStore, _notificationStore;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _this.loading = true;\n              _context.prev = 1;\n              _context.next = 4;\n              return axios.get('/admin/channel-playlist/get-playlists');\n            case 4:\n              response = _context.sent;\n              _this.playlists = response.data.playlists;\n              _response$data = response.data, message = _response$data.message, status = _response$data.status;\n              notificationStore = (0,_Stores_NotificationStore__WEBPACK_IMPORTED_MODULE_5__.useNotificationStore)();\n              notificationStore.setToastNotification(message, status);\n              _context.next = 16;\n              break;\n            case 11:\n              _context.prev = 11;\n              _context.t0 = _context[\"catch\"](1);\n              _this.error = _context.t0.response ? _context.t0.response.data.message : _context.t0.message;\n              _notificationStore = (0,_Stores_NotificationStore__WEBPACK_IMPORTED_MODULE_5__.useNotificationStore)();\n              _notificationStore.setToastNotification(_this.error, 'error');\n            case 16:\n              _context.prev = 16;\n              _this.loading = false;\n              return _context.finish(16);\n            case 19:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[1, 11, 16, 19]]);\n      }))();\n    },\n    createPlaylist: function createPlaylist(playlist) {\n      var _this2 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var response;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              if (_this2.validateScheduleItems()) {\n                _context2.next = 2;\n                break;\n              }\n              return _context2.abrupt(\"return\", false);\n            case 2:\n              _this2.loading = true;\n              _context2.prev = 3;\n              _context2.next = 6;\n              return axios.post('/channelPlaylists', _objectSpread(_objectSpread({}, playlist), {}, {\n                scheduleItems: _this2.getValidScheduleItems()\n              }));\n            case 6:\n              response = _context2.sent;\n              _this2.playlists.push(response.data.playlist);\n              _this2.showNotification(response.data);\n              _this2.reset();\n              return _context2.abrupt(\"return\", true);\n            case 13:\n              _context2.prev = 13;\n              _context2.t0 = _context2[\"catch\"](3);\n              _this2.handleError(_context2.t0);\n              return _context2.abrupt(\"return\", false);\n            case 17:\n              _context2.prev = 17;\n              _this2.loading = false;\n              return _context2.finish(17);\n            case 20:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, null, [[3, 13, 17, 20]]);\n      }))();\n    },\n    updatePlaylist: function updatePlaylist(playlist) {\n      var _this3 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var adminStore, response, index, adminIndex;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              adminStore = (0,_Stores_AdminStore__WEBPACK_IMPORTED_MODULE_7__.useAdminStore)();\n              playlist.scheduleItems = _this3.scheduleItems;\n              if (_this3.validateScheduleItems(playlist.scheduleItems)) {\n                _context3.next = 5;\n                break;\n              }\n              console.error('Invalid schedule items');\n              return _context3.abrupt(\"return\", false);\n            case 5:\n              _this3.loading = true;\n              _context3.prev = 6;\n              _context3.next = 9;\n              return axios.put(\"/channelPlaylists/\".concat(playlist.id), playlist);\n            case 9:\n              response = _context3.sent;\n              index = _this3.playlists.findIndex(function (p) {\n                return p.id === playlist.id;\n              });\n              if (index !== -1) {\n                _this3.playlists[index] = response.data.playlist;\n              }\n              adminIndex = adminStore.items.findIndex(function (item) {\n                return item.id === playlist.id;\n              });\n              if (adminIndex !== -1) {\n                adminStore.items[adminIndex] = _objectSpread(_objectSpread({}, response.data.playlist), {}, {\n                  playlist_items: _this3.scheduleItems\n                });\n              }\n              _this3.showNotification(response.data);\n              document.getElementById('updateChannelPlaylistModal').close();\n              _this3.clearError();\n              return _context3.abrupt(\"return\", true);\n            case 20:\n              _context3.prev = 20;\n              _context3.t0 = _context3[\"catch\"](6);\n              _this3.handleError(_context3.t0);\n              return _context3.abrupt(\"return\", false);\n            case 24:\n              _context3.prev = 24;\n              _this3.loading = false;\n              return _context3.finish(24);\n            case 27:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, null, [[6, 20, 24, 27]]);\n      }))();\n    },\n    validateScheduleItems: function validateScheduleItems() {\n      var notificationStore = (0,_Stores_NotificationStore__WEBPACK_IMPORTED_MODULE_5__.useNotificationStore)();\n\n      // Check for conflicts\n      if (this.scheduleItems.some(function (item) {\n        return item.conflict;\n      })) {\n        notificationStore.setGeneralServiceNotification('Conflict Detected', 'There are conflicts in the schedule items. Please resolve them before proceeding.');\n        return false;\n      }\n\n      // Check for gaps\n      var items = this.scheduleItems.filter(function (item) {\n        return !item.removed && item.type !== 'gap';\n      }).sort(function (a, b) {\n        return dayjs__WEBPACK_IMPORTED_MODULE_0___default()(a.start_dateTime).isBefore(dayjs__WEBPACK_IMPORTED_MODULE_0___default()(b.start_dateTime)) ? -1 : 1;\n      });\n      for (var i = 0; i < items.length - 1; i++) {\n        if (dayjs__WEBPACK_IMPORTED_MODULE_0___default()(items[i].end_dateTime).isBefore(dayjs__WEBPACK_IMPORTED_MODULE_0___default()(items[i + 1].start_dateTime))) {\n          notificationStore.setGeneralServiceNotification('Gap Detected', 'There are gaps in the schedule items. Please ensure there are no gaps before proceeding.');\n          return false;\n        }\n      }\n      return true;\n    },\n    getValidScheduleItems: function getValidScheduleItems() {\n      return this.scheduleItems.filter(function (item) {\n        return !item.removed && item.type !== 'gap';\n      }).sort(function (a, b) {\n        return dayjs__WEBPACK_IMPORTED_MODULE_0___default()(a.start_dateTime).isBefore(dayjs__WEBPACK_IMPORTED_MODULE_0___default()(b.start_dateTime)) ? -1 : 1;\n      });\n    },\n    showNotification: function showNotification(response) {\n      var message = response.message,\n        status = response.status;\n      var notificationStore = (0,_Stores_NotificationStore__WEBPACK_IMPORTED_MODULE_5__.useNotificationStore)();\n      notificationStore.setToastNotification(message, status);\n    },\n    handleError: function handleError(error) {\n      var notificationStore = (0,_Stores_NotificationStore__WEBPACK_IMPORTED_MODULE_5__.useNotificationStore)();\n      var errorMessage = error.response ? error.response.data.message : error.message;\n      var errorDetails = error.response && error.response.data.details ? error.response.data.details : '';\n\n      // Check if errorDetails is a string and parse it to an object if necessary\n      if (typeof errorDetails === 'string') {\n        try {\n          errorDetails = JSON.parse(errorDetails);\n        } catch (e) {\n          // If parsing fails, wrap the errorDetails in an object\n          errorDetails = {\n            details: errorDetails\n          };\n        }\n      }\n\n      // Aggregate validation error messages with HTML styling\n      var detailedErrorMessages = '<ul>';\n      for (var _i = 0, _Object$entries = Object.entries(errorDetails); _i < _Object$entries.length; _i++) {\n        var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n          field = _Object$entries$_i[0],\n          messages = _Object$entries$_i[1];\n        // Ensure messages is an array and join them into a string\n        var messageText = Array.isArray(messages) ? messages.join(', ') : messages;\n        detailedErrorMessages += \"<li><strong>\".concat(field, \":</strong> \").concat(messageText, \"</li>\");\n      }\n      detailedErrorMessages += '</ul>';\n\n      // Display general error message with aggregated details\n      notificationStore.setGeneralServiceNotification('Validation Error', \"\".concat(errorMessage, \"\\n\").concat(detailedErrorMessages));\n      this.error = errorMessage;\n    },\n    setPlaylistData: function setPlaylistData(playlist) {\n      console.log('playlist:', playlist);\n      var userStore = (0,_Stores_UserStore__WEBPACK_IMPORTED_MODULE_6__.useUserStore)();\n      var startTime = dayjs__WEBPACK_IMPORTED_MODULE_0___default().utc(playlist.start_dateTime).tz(userStore.timezone).format('YYYY-MM-DDTHH:mm');\n      var endTime = dayjs__WEBPACK_IMPORTED_MODULE_0___default().utc(playlist.end_dateTime).tz(userStore.timezone).format('YYYY-MM-DDTHH:mm');\n      this.id = playlist.id;\n      this.name = playlist.name;\n      this.description = playlist.description;\n      this.url = playlist.url;\n      this.type = playlist.type;\n      this.priority = playlist.priority;\n      this.repeat_mode = playlist.repeat_mode;\n      this.next_playlist_id = playlist.next_playlist_id;\n      this.startTime = startTime;\n      this.endTime = endTime;\n      console.log('playlist.playlist_items:', playlist.playlist_items);\n      this.scheduleItems = playlist.playlist_items.filter(function (item) {\n        console.log('Filtering item:', item);\n        return item !== null && item !== undefined;\n      }).map(function (item) {\n        var mappedItem = {\n          id: item.id,\n          content_id: item.content_id,\n          content_type: item.content_type,\n          order: item.order,\n          media_type: item.media_type,\n          source_path: item.source_path,\n          source_type: item.source_type,\n          is_live: item.is_live,\n          is_scheduled: item.is_scheduled,\n          current_viewers_count: item.current_viewers_count,\n          max_viewers_count: item.max_viewers_count,\n          additional_sources: item.additional_sources,\n          custom_playback_options: item.custom_playback_options,\n          metadata: item.metadata,\n          has_played: item.has_played,\n          start_dateTime: item.start_dateTime,\n          end_dateTime: item.end_dateTime,\n          duration_minutes: item.duration_minutes,\n          type: item.type,\n          content: item.content\n        };\n        console.log('Mapped item:', mappedItem);\n        return mappedItem;\n      });\n      console.log('this.scheduleItems:', this.scheduleItems);\n    },\n    fetchSchedules: function fetchSchedules() {\n      var _this4 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var notificationStore, _this4$scheduleItems, response, _response$data2, message, status;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              _this4.loadingSchedules = true;\n              _this4.clearError();\n              notificationStore = (0,_Stores_NotificationStore__WEBPACK_IMPORTED_MODULE_5__.useNotificationStore)();\n              if (!(!_this4.startTime || !_this4.endTime)) {\n                _context4.next = 7;\n                break;\n              }\n              notificationStore.setGeneralServiceNotification('Start and End Times Required', 'Please check the schedule start and end times.');\n              _this4.loadingSchedules = false;\n              return _context4.abrupt(\"return\");\n            case 7:\n              _context4.prev = 7;\n              _context4.next = 10;\n              return axios.get(\"/api/schedules\", {\n                params: {\n                  startTime: _this4.startTimeUTC,\n                  endTime: _this4.endTimeUTC\n                }\n              });\n            case 10:\n              response = _context4.sent;\n              // Push new items to the existing array with added attributes\n              (_this4$scheduleItems = _this4.scheduleItems).push.apply(_this4$scheduleItems, _toConsumableArray(response.data.items.map(function (item) {\n                return _objectSpread(_objectSpread({}, item), {}, {\n                  removed: false,\n                  is_scheduled: true\n                });\n              })));\n              _response$data2 = response.data, message = _response$data2.message, status = _response$data2.status;\n              notificationStore.setToastNotification(message, status);\n              _this4.updateConflicts();\n              _this4.loadingSchedules = false;\n              return _context4.abrupt(\"return\", response.data);\n            case 19:\n              _context4.prev = 19;\n              _context4.t0 = _context4[\"catch\"](7);\n              _this4.error = _context4.t0.response ? _context4.t0.response.data.message : _context4.t0.message;\n              notificationStore.setToastNotification(_this4.error, 'error');\n              _this4.loadingSchedules = false;\n              throw _context4.t0;\n            case 25:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, null, [[7, 19]]);\n      }))();\n    },\n    removeItem: function removeItem(id) {\n      var item = this.scheduleItems.find(function (item) {\n        return item.id === id;\n      });\n      if (item) {\n        item.removed = true;\n        this.scheduleItems = _toConsumableArray(this.scheduleItems); // Trigger reactivity\n        this.updateConflicts();\n      }\n      this.clearError();\n    },\n    addItem: function addItem(id) {\n      var item = this.scheduleItems.find(function (item) {\n        return item.id === id;\n      });\n      if (item) {\n        item.removed = false;\n        this.scheduleItems = _toConsumableArray(this.scheduleItems); // Trigger reactivity\n        this.updateConflicts();\n      }\n      this.clearError();\n    },\n    removeAllItems: function removeAllItems() {\n      this.scheduleItems = [];\n      this.clearError();\n    },\n    clearRemovedItems: function clearRemovedItems() {\n      this.scheduleItems = this.scheduleItems.filter(function (item) {\n        return !item.removed;\n      });\n      this.clearError();\n      this.recalculateIndexes();\n    },\n    recalculateIndexes: function recalculateIndexes() {\n      this.scheduleItems = this.scheduleItems.map(function (item, index) {\n        return _objectSpread(_objectSpread({}, item), {}, {\n          index: index\n        });\n      });\n    },\n    updateConflicts: function updateConflicts() {\n      var items = this.scheduleItems.filter(function (item) {\n        return !item.removed;\n      });\n      items.sort(function (a, b) {\n        return dayjs__WEBPACK_IMPORTED_MODULE_0___default()(a.start_dateTime).isBefore(dayjs__WEBPACK_IMPORTED_MODULE_0___default()(b.start_dateTime)) ? -1 : 1;\n      });\n      for (var i = 0; i < items.length; i++) {\n        var currentItem = items[i];\n        currentItem.conflict = false;\n      }\n      for (var _i2 = 0; _i2 < items.length; _i2++) {\n        var _currentItem = items[_i2];\n        for (var j = _i2 + 1; j < items.length; j++) {\n          var nextItem = items[j];\n          if (dayjs__WEBPACK_IMPORTED_MODULE_0___default()(_currentItem.start_dateTime).isBefore(dayjs__WEBPACK_IMPORTED_MODULE_0___default()(nextItem.end_dateTime)) && dayjs__WEBPACK_IMPORTED_MODULE_0___default()(_currentItem.end_dateTime).isAfter(dayjs__WEBPACK_IMPORTED_MODULE_0___default()(nextItem.start_dateTime))) {\n            _currentItem.conflict = true;\n            nextItem.conflict = true;\n          }\n        }\n      }\n    },\n    selectPlaylist: function selectPlaylist(playlist) {\n      this.selectedPlaylist = playlist;\n    },\n    removePlaylist: function removePlaylist(playlistId) {\n      _inertiajs_vue3__WEBPACK_IMPORTED_MODULE_8__.router[\"delete\"](route('channelPlaylists.destroy', {\n        channelPlaylist: playlistId\n      }));\n    },\n    clearError: function clearError() {\n      this.error = null;\n    },\n    resolveConflicts: function resolveConflicts() {\n      var _this5 = this;\n      this.processing = true; // Set processing flag\n      var conflictsResolved;\n      do {\n        conflictsResolved = false;\n\n        // Create a copy of the items array without removed items\n        var items = this.scheduleItems.filter(function (item) {\n          return !item.removed;\n        });\n        var _loop = function _loop() {\n            var currentItem = items[i];\n            if (!currentItem.conflict) return 0; // continue\n            var _loop2 = function _loop2() {\n                var previousItem = items[j];\n                if (previousItem.removed) return 0; // continue\n\n                // Check for conflict\n                var currentStart = dayjs__WEBPACK_IMPORTED_MODULE_0___default()(currentItem.start_dateTime);\n                var previousEnd = dayjs__WEBPACK_IMPORTED_MODULE_0___default()(previousItem.end_dateTime);\n                var previousStart = dayjs__WEBPACK_IMPORTED_MODULE_0___default()(previousItem.start_dateTime);\n                if (currentStart.isSame(previousStart) || currentStart.isBefore(previousEnd) && !currentStart.isSame(previousEnd)) {\n                  // Resolve conflict based on priority and creation date\n                  if (currentItem.priority > previousItem.priority) {\n                    _this5.scheduleItems = _this5.scheduleItems.map(function (item) {\n                      return item.id === currentItem.id ? _objectSpread(_objectSpread({}, item), {}, {\n                        removed: true\n                      }) : item;\n                    });\n                    conflictsResolved = true;\n                    return 1; // break\n                  } else if (currentItem.priority < previousItem.priority) {\n                    _this5.scheduleItems = _this5.scheduleItems.map(function (item) {\n                      return item.id === previousItem.id ? _objectSpread(_objectSpread({}, item), {}, {\n                        removed: true\n                      }) : item;\n                    });\n                    conflictsResolved = true;\n                    return 1; // break\n                  } else {\n                    if (dayjs__WEBPACK_IMPORTED_MODULE_0___default()(currentItem.created_at).isAfter(dayjs__WEBPACK_IMPORTED_MODULE_0___default()(previousItem.created_at))) {\n                      _this5.scheduleItems = _this5.scheduleItems.map(function (item) {\n                        return item.id === currentItem.id ? _objectSpread(_objectSpread({}, item), {}, {\n                          removed: true\n                        }) : item;\n                      });\n                      conflictsResolved = true;\n                      return 1; // break\n                    } else {\n                      _this5.scheduleItems = _this5.scheduleItems.map(function (item) {\n                        return item.id === previousItem.id ? _objectSpread(_objectSpread({}, item), {}, {\n                          removed: true\n                        }) : item;\n                      });\n                      conflictsResolved = true;\n                      return 1; // break\n                    }\n                  }\n                }\n              },\n              _ret2;\n            for (var j = 0; j < i; j++) {\n              _ret2 = _loop2();\n              if (_ret2 === 0) continue;\n              if (_ret2 === 1) break;\n            }\n            if (conflictsResolved) return 1; // break\n          },\n          _ret;\n        for (var i = 1; i < items.length; i++) {\n          _ret = _loop();\n          if (_ret === 0) continue;\n          if (_ret === 1) break;\n        }\n      } while (conflictsResolved);\n      this.updateConflicts();\n      // console.log('Finished processing conflicts')\n      this.processing = false; // Clear processing flag\n    },\n    insertGaps: function insertGaps() {\n      this.clearError();\n      // console.log('Start Time UTC:', this.startTimeUTC);\n      // console.log('End Time UTC:', this.endTimeUTC);\n\n      // Map schedule items to include dayjs objects for start and end times\n      var items = this.scheduleItems.filter(function (item) {\n        return !item.removed;\n      }).map(function (item) {\n        return _objectSpread(_objectSpread({}, item), {}, {\n          start: dayjs__WEBPACK_IMPORTED_MODULE_0___default()(item.start_dateTime),\n          end: dayjs__WEBPACK_IMPORTED_MODULE_0___default()(item.end_dateTime)\n        });\n      });\n\n      // console.log('Items:', items);\n\n      this.gaps = [];\n      if (items.length === 0) {\n        // console.log('No scheduled items, creating a single gap for the entire period.');\n        this.gaps.push({\n          type: 'gap',\n          start_dateTime: dayjs__WEBPACK_IMPORTED_MODULE_0___default().utc(this.startTimeUTC).toISOString(),\n          end_dateTime: dayjs__WEBPACK_IMPORTED_MODULE_0___default().utc(this.endTimeUTC).toISOString(),\n          duration_minutes: dayjs__WEBPACK_IMPORTED_MODULE_0___default()(this.endTimeUTC).diff(dayjs__WEBPACK_IMPORTED_MODULE_0___default()(this.startTimeUTC), 'minute'),\n          id: \"gap-\".concat(dayjs__WEBPACK_IMPORTED_MODULE_0___default().utc(this.startTimeUTC).toISOString(), \"-\").concat(dayjs__WEBPACK_IMPORTED_MODULE_0___default().utc(this.endTimeUTC).toISOString()),\n          start: dayjs__WEBPACK_IMPORTED_MODULE_0___default().utc(this.startTimeUTC),\n          end: dayjs__WEBPACK_IMPORTED_MODULE_0___default().utc(this.endTimeUTC)\n        });\n      } else {\n        this.checkForGapBeforeFirstItem(items);\n        this.checkForGapsBetweenItems(items);\n        this.checkForGapAfterLastItem(items);\n      }\n\n      // console.log('Gaps:', this.gaps);\n\n      // Add gaps to the schedule items and sort the list by start dateTime\n      this.scheduleItems = [].concat(_toConsumableArray(items), _toConsumableArray(this.gaps)).sort(function (a, b) {\n        return a.start.isBefore(b.start) ? -1 : 1;\n      });\n\n      // console.log('Final Schedule Items:', this.scheduleItems);\n    },\n    checkForGapBeforeFirstItem: function checkForGapBeforeFirstItem(items) {\n      // console.log('Checking for gap before the first item...')\n      if (items.length > 0 && dayjs__WEBPACK_IMPORTED_MODULE_0___default().utc(this.startTimeUTC).isBefore(items[0].start)) {\n        var gapStart = dayjs__WEBPACK_IMPORTED_MODULE_0___default().utc(this.startTimeUTC);\n        var gapEnd = items[0].start;\n        var gapDuration = gapEnd.diff(gapStart, 'minute');\n        // console.log(`Creating gap before the first item: ${gapStart.toISOString()} to ${gapEnd.toISOString()}, duration: ${gapDuration} minutes`)\n\n        this.gaps.push({\n          type: 'gap',\n          start_dateTime: gapStart.toISOString(),\n          // ISO 8601 string in UTC\n          end_dateTime: gapEnd.toISOString(),\n          // ISO 8601 string in UTC\n          duration_minutes: gapDuration,\n          id: \"gap-\".concat(gapStart.toISOString(), \"-\").concat(gapEnd.toISOString()),\n          start: gapStart,\n          end: gapEnd\n        });\n      } else {\n        // console.log('No gap before the first item.')\n      }\n    },\n    checkForGapsBetweenItems: function checkForGapsBetweenItems(items) {\n      // console.log('Checking for gaps between items...')\n      for (var i = 0; i < items.length - 1; i++) {\n        var currentItem = items[i];\n        var nextItem = items[i + 1];\n        var gapStart = currentItem.end;\n        var gapEnd = nextItem.start;\n\n        // console.log(`Current Item: ${currentItem.id}, End: ${currentItem.end.toISOString()}`)\n        // console.log(`Next Item: ${nextItem.id}, Start: ${nextItem.start.toISOString()}`)\n        // console.log(`Gap start: ${gapStart.toISOString()}, Gap end: ${gapEnd.toISOString()}`)\n\n        if (gapStart.isBefore(gapEnd)) {\n          var gapDuration = gapEnd.diff(gapStart, 'minute');\n          // console.log(`Creating gap between items: ${gapStart.toISOString()} to ${gapEnd.toISOString()}, duration: ${gapDuration} minutes`)\n\n          this.gaps.push({\n            type: 'gap',\n            start_dateTime: gapStart.toISOString(),\n            // ISO 8601 string in UTC\n            end_dateTime: gapEnd.toISOString(),\n            // ISO 8601 string in UTC\n            duration_minutes: gapDuration,\n            id: \"gap-\".concat(gapStart.toISOString(), \"-\").concat(gapEnd.toISOString()),\n            start: gapStart,\n            end: gapEnd\n          });\n        } else {\n          // console.log('No gap between these items.')\n        }\n      }\n    },\n    checkForGapAfterLastItem: function checkForGapAfterLastItem(items) {\n      // console.log('Checking for gap after the last item...');\n      if (items.length > 0) {\n        var lastItemEnd = items[items.length - 1].end;\n        var endTime = dayjs__WEBPACK_IMPORTED_MODULE_0___default().utc(this.endTimeUTC); // Ensure endTimeUTC is treated as UTC\n        // console.log(`Last Item End: ${lastItemEnd.toISOString()}, End Time: ${endTime.toISOString()}`);\n\n        // Check that last item ends before endTimeUTC\n        if (lastItemEnd.isBefore(endTime)) {\n          var gapStart = lastItemEnd;\n          var gapEnd = endTime;\n          var gapDuration = gapEnd.diff(gapStart, 'minute');\n          // console.log(`Creating gap after the last item: ${gapStart.toISOString()} to ${gapEnd.toISOString()}, duration: ${gapDuration} minutes`);\n\n          this.gaps.push({\n            type: 'gap',\n            start_dateTime: gapStart.toISOString(),\n            // ISO 8601 string in UTC\n            end_dateTime: gapEnd.toISOString(),\n            // ISO 8601 string in UTC\n            duration_minutes: gapDuration,\n            id: \"gap-\".concat(gapStart.toISOString(), \"-\").concat(gapEnd.toISOString()),\n            start: gapStart,\n            end: gapEnd\n          });\n        } else {\n          // console.log('No gap after the last item.');\n        }\n      } else {\n        // console.log('No items to check for gaps after.');\n      }\n    },\n    fetchContent: function fetchContent(contentType, maxDurationMinutes, startDateTime) {\n      var _arguments = arguments,\n        _this6 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        var page, search, notificationStore, startDateTimeUTC, response, _response$data3, message, status;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              page = _arguments.length > 3 && _arguments[3] !== undefined ? _arguments[3] : 1;\n              search = _arguments.length > 4 && _arguments[4] !== undefined ? _arguments[4] : '';\n              _this6.loading = true;\n              _this6.clearError();\n              notificationStore = (0,_Stores_NotificationStore__WEBPACK_IMPORTED_MODULE_5__.useNotificationStore)(); // Convert startDateTime from user's timezone to UTC\n              startDateTimeUTC = dayjs__WEBPACK_IMPORTED_MODULE_0___default()(startDateTime).tz(dayjs__WEBPACK_IMPORTED_MODULE_0___default().tz.guess()).utc().format('YYYY-MM-DDTHH:mm:ss[Z]'); // Log the parameters before making the request\n              // console.log('Fetching content with parameters:');\n              // console.log('Content Type:', contentType);\n              // console.log('Max Duration Minutes:', maxDurationMinutes);\n              // console.log('Start DateTime (User Timezone):', startDateTime);\n              // console.log('Start DateTime (UTC):', startDateTimeUTC);\n              // console.log('Page:', page);\n              // console.log('Search Query:', search);\n              _context5.prev = 6;\n              _context5.next = 9;\n              return axios.get('/admin/channel-playlist/get-content', {\n                params: {\n                  type: contentType,\n                  maxDurationMinutes: maxDurationMinutes,\n                  start_dateTime: startDateTimeUTC,\n                  page: page,\n                  search: search\n                }\n              });\n            case 9:\n              response = _context5.sent;\n              console.log('Response data:', response.data); // Log the response data\n              _this6.contentItems = response.data.items;\n              _this6.currentPage = response.data.current_page;\n              _this6.totalPages = response.data.total_pages;\n              _this6.contentFetched = true;\n              _response$data3 = response.data, message = _response$data3.message, status = _response$data3.status;\n              notificationStore.setToastNotification(message, status);\n              _context5.next = 24;\n              break;\n            case 19:\n              _context5.prev = 19;\n              _context5.t0 = _context5[\"catch\"](6);\n              _this6.error = _context5.t0.response ? _context5.t0.response.data.message : _context5.t0.message;\n              console.error('Error fetching content:', _this6.error);\n              notificationStore.setToastNotification(_this6.error, 'error');\n            case 24:\n              _context5.prev = 24;\n              _this6.loading = false;\n              return _context5.finish(24);\n            case 27:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5, null, [[6, 19, 24, 27]]);\n      }))();\n    },\n    addContentToSchedule: function addContentToSchedule(content) {\n      this.clearError();\n      this.scheduleItems.push(content);\n      this.scheduleItems = _toConsumableArray(this.scheduleItems); // Trigger reactivity\n      this.removeGap(content.start_dateTime); // Remove the gap after adding content\n      this.insertGaps(); // Update gaps after removing and adding content\n    },\n    removeGap: function removeGap(startDateTime) {\n      // console.log('removing gap...')\n      // console.log('start dateTime: ' + startDateTime)\n      this.scheduleItems = this.scheduleItems.filter(function (item) {\n        return !(item.type === 'gap' && item.start_dateTime === startDateTime);\n      });\n    },\n    resetContent: function resetContent() {\n      this.contentItems = [];\n      this.contentFetched = false;\n      this.error = null;\n      this.currentPage = 1;\n      this.totalPages = 1;\n      this.searchQuery = '';\n    },\n    setSearchQuery: function setSearchQuery(query) {\n      this.searchQuery = query;\n    },\n    setPage: function setPage(page) {\n      this.currentPage = page;\n    }\n  },\n  getters: {\n    startTimeUTC: function startTimeUTC(state) {\n      return dayjs__WEBPACK_IMPORTED_MODULE_0___default()(state.startTime).utc().format('YYYY-MM-DDTHH:mm:ss[Z]');\n    },\n    endTimeUTC: function endTimeUTC(state) {\n      return dayjs__WEBPACK_IMPORTED_MODULE_0___default()(state.endTime).utc().format('YYYY-MM-DDTHH:mm:ss[Z]');\n    },\n    scheduleItemsWithUserTimezone: function scheduleItemsWithUserTimezone(state) {\n      var userStore = (0,_Stores_UserStore__WEBPACK_IMPORTED_MODULE_6__.useUserStore)();\n      var items = state.scheduleItems.map(function (item) {\n        return _objectSpread(_objectSpread({}, item), {}, {\n          start_dateTime: dayjs__WEBPACK_IMPORTED_MODULE_0___default()(item.start_dateTime).tz(userStore.timezone).format('YYYY-MM-DDTHH:mm:ssZ'),\n          end_dateTime: dayjs__WEBPACK_IMPORTED_MODULE_0___default()(item.end_dateTime).tz(userStore.timezone).format('YYYY-MM-DDTHH:mm:ssZ')\n        });\n      });\n      items.sort(function (a, b) {\n        return dayjs__WEBPACK_IMPORTED_MODULE_0___default()(a.start_dateTime).isBefore(dayjs__WEBPACK_IMPORTED_MODULE_0___default()(b.start_dateTime)) ? -1 : 1;\n      });\n      return items;\n    },\n    hasRemovedItems: function hasRemovedItems(state) {\n      return state.scheduleItems.some(function (item) {\n        return item.removed;\n      });\n    },\n    conflictCount: function conflictCount(state) {\n      return state.scheduleItems.filter(function (item) {\n        return item.conflict && !item.removed;\n      }).length;\n    },\n    gapCount: function gapCount(state) {\n      var items = state.scheduleItems.filter(function (item) {\n        return !item.removed && item.type !== 'gap';\n      }).map(function (item) {\n        return {\n          start: dayjs__WEBPACK_IMPORTED_MODULE_0___default()(item.start_dateTime),\n          end: dayjs__WEBPACK_IMPORTED_MODULE_0___default()(item.end_dateTime),\n          conflict: item.conflict\n        };\n      });\n      var gaps = 0;\n\n      // console.log('Calculating gaps...');\n      // console.log('Start Time UTC:', state.startTimeUTC);\n      // console.log('End Time UTC:', state.endTimeUTC);\n      // console.log('Items:', items);\n\n      // If there are no items, the entire period is a single gap\n      if (items.length === 0) {\n        // console.log('No scheduled items, entire period is a gap.');\n        return 1;\n      }\n\n      // Check for gap before the first item\n      if (dayjs__WEBPACK_IMPORTED_MODULE_0___default().utc(state.startTimeUTC).isBefore(items[0].start)) {\n        // console.log('Gap before the first item');\n        gaps++;\n      } else {\n        // console.log('No gap before the first item');\n      }\n\n      // Check for gaps between adjacent items\n      for (var i = 0; i < items.length - 1; i++) {\n        var currentItem = items[i];\n        var nextItem = items[i + 1];\n\n        // console.log(`Current Item: ${currentItem.start.toISOString()}, End: ${currentItem.end.toISOString()}`);\n        // console.log(`Next Item: ${nextItem.start.toISOString()}, Start: ${nextItem.end.toISOString()}`);\n\n        // Only consider gaps if there are no conflicts\n        if (!currentItem.conflict && !nextItem.conflict && currentItem.end.isBefore(nextItem.start)) {\n          // console.log('Gap between items');\n          gaps++;\n        } else {\n          // console.log('No gap between these items');\n        }\n      }\n\n      // Check for gap after the last item\n      if (dayjs__WEBPACK_IMPORTED_MODULE_0___default().utc(state.endTimeUTC).isAfter(items[items.length - 1].end)) {\n        // console.log('Gap after the last item');\n        gaps++;\n      } else {\n        // console.log('No gap after the last item');\n      }\n\n      // console.log('Total gaps:', gaps);\n      return gaps;\n    }\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvU3RvcmVzL0NoYW5uZWxQbGF5bGlzdFN0b3JlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OytDQUNBLHFKQUFBQSxtQkFBQSxZQUFBQSxvQkFBQSxXQUFBQyxDQUFBLFNBQUFDLENBQUEsRUFBQUQsQ0FBQSxPQUFBRSxDQUFBLEdBQUFDLE1BQUEsQ0FBQUMsU0FBQSxFQUFBQyxDQUFBLEdBQUFILENBQUEsQ0FBQUksY0FBQSxFQUFBQyxDQUFBLEdBQUFKLE1BQUEsQ0FBQUssY0FBQSxjQUFBUCxDQUFBLEVBQUFELENBQUEsRUFBQUUsQ0FBQSxJQUFBRCxDQUFBLENBQUFELENBQUEsSUFBQUUsQ0FBQSxDQUFBTyxLQUFBLEtBQUFDLENBQUEsd0JBQUFDLE1BQUEsR0FBQUEsTUFBQSxPQUFBQyxDQUFBLEdBQUFGLENBQUEsQ0FBQUcsUUFBQSxrQkFBQUMsQ0FBQSxHQUFBSixDQUFBLENBQUFLLGFBQUEsdUJBQUFDLENBQUEsR0FBQU4sQ0FBQSxDQUFBTyxXQUFBLDhCQUFBQyxPQUFBakIsQ0FBQSxFQUFBRCxDQUFBLEVBQUFFLENBQUEsV0FBQUMsTUFBQSxDQUFBSyxjQUFBLENBQUFQLENBQUEsRUFBQUQsQ0FBQSxJQUFBUyxLQUFBLEVBQUFQLENBQUEsRUFBQWlCLFVBQUEsTUFBQUMsWUFBQSxNQUFBQyxRQUFBLFNBQUFwQixDQUFBLENBQUFELENBQUEsV0FBQWtCLE1BQUEsbUJBQUFqQixDQUFBLElBQUFpQixNQUFBLFlBQUFBLE9BQUFqQixDQUFBLEVBQUFELENBQUEsRUFBQUUsQ0FBQSxXQUFBRCxDQUFBLENBQUFELENBQUEsSUFBQUUsQ0FBQSxnQkFBQW9CLEtBQUFyQixDQUFBLEVBQUFELENBQUEsRUFBQUUsQ0FBQSxFQUFBRyxDQUFBLFFBQUFLLENBQUEsR0FBQVYsQ0FBQSxJQUFBQSxDQUFBLENBQUFJLFNBQUEsWUFBQW1CLFNBQUEsR0FBQXZCLENBQUEsR0FBQXVCLFNBQUEsRUFB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Q1YsQ0FBQyxNQUFNO1VBQ0g7UUFBQTtNQUVSOztNQUVBO01BQ0EsSUFBSWQsZ0RBQVMsQ0FBQ29DLEtBQUssQ0FBQytHLFVBQVUsQ0FBQyxDQUFDWSxPQUFPLENBQUM5RSxLQUFLLENBQUNBLEtBQUssQ0FBQ2hILE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQ21OLEdBQUcsQ0FBQyxFQUFFO1FBQ2xFO1FBQ0F0SyxJQUFJLEVBQUU7TUFDVixDQUFDLE1BQU07UUFDSDtNQUFBOztNQUdKO01BQ0EsT0FBT0EsSUFBSTtJQUNmO0VBR0o7QUFDSixDQUFDLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ub3R0dmJldGEvLi9yZXNvdXJjZXMvanMvU3RvcmVzL0NoYW5uZWxQbGF5bGlzdFN0b3JlLmpzPzlhNGMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZGVmaW5lU3RvcmUgfSBmcm9tICdwaW5pYSdcbmltcG9ydCBkYXlqcyBmcm9tICdkYXlqcydcbmltcG9ydCB0aW1lem9uZSBmcm9tICdkYXlqcy9wbHVnaW4vdGltZXpvbmUnXG5pbXBvcnQgdXRjIGZyb20gJ2RheWpzL3BsdWdpbi91dGMnXG5pbXBvcnQgaXNTYW1lT3JCZWZvcmUgZnJvbSAnZGF5anMvcGx1Z2luL2lzU2FtZU9yQmVmb3JlJ1xuaW1wb3J0IGlzU2FtZU9yQWZ0ZXIgZnJvbSAnZGF5anMvcGx1Z2luL2lzU2FtZU9yQWZ0ZXInXG5pbXBvcnQgeyB1c2VOb3RpZmljYXRpb25TdG9yZSB9IGZyb20gJ0AvU3RvcmVzL05vdGlmaWNhdGlvblN0b3JlJ1xuaW1wb3J0IHsgdXNlVXNlclN0b3JlIH0gZnJvbSAnQC9TdG9yZXMvVXNlclN0b3JlJ1xuaW1wb3J0IHsgdXNlQWRtaW5TdG9yZSB9IGZyb20gJ0AvU3RvcmVzL0FkbWluU3RvcmUnXG5pbXBvcnQgeyByb3V0ZXIgfSBmcm9tICdAaW5lcnRpYWpzL3Z1ZTMnXG5cbmRheWpzLmV4dGVuZCh1dGMpXG5kYXlqcy5leHRlbmQodGltZXpvbmUpXG5kYXlqcy5leHRlbmQoaXNTYW1lT3JCZWZvcmUpXG5kYXlqcy5leHRlbmQoaXNTYW1lT3JBZnRlcilcblxuY29uc3QgaW5pdGlhbFN0YXRlID0gKCkgPT4gKHtcbiAgICBwbGF5bGlzdHM6IFtdLFxuICAgIHNlbGVjdGVkUGxheWxpc3Q6IG51bGwsXG4gICAgc2NoZWR1bGVJdGVtczogW10sXG4gICAgZ2FwczogW10sXG4gICAgc3RhcnRUaW1lOiBkYXlqcygpLmZvcm1hdCgnWVlZWS1NTS1ERFRISDptbScpLFxuICAgIGVuZFRpbWU6IGRheWpzKCkuYWRkKDI0LCAnaG91cicpLmZvcm1hdCgnWVlZWS1NTS1ERFRISDptbScpLFxuICAgIGNvbnRlbnRJdGVtczogW10sXG4gICAgY29udGVudEZldGNoZWQ6IGZhbHNlLFxuICAgIGN1cnJlbnRQYWdlOiAxLFxuICAgIHRvdGFsUGFnZXM6IDEsXG4gICAgc2VhcmNoUXVlcnk6ICcnLFxuICAgIHNob3dNb2RhbDogZmFsc2UsXG4gICAgbG9hZGluZzogZmFsc2UsXG4gICAgbG9hZGluZ1NjaGVkdWxlczogZmFsc2UsXG4gICAgcHJvY2Vzc2luZzogZmFsc2UsXG4gICAgZXJyb3I6IG51bGwsXG4gICAgaWQ6IG51bGwsXG4gICAgbmFtZTogJycsXG4gICAgZGVzY3JpcHRpb246ICcnLFxuICAgIHVybDogJycsXG4gICAgdHlwZTogJ3JlZ3VsYXInLFxuICAgIHByaW9yaXR5OiAxLFxuICAgIHJlcGVhdF9tb2RlOiAncmVwZWF0X2FsbCcsXG4gICAgbmV4dF9wbGF5bGlzdF9pZDogbnVsbCxcbn0pXG5cbmV4cG9ydCBjb25zdCB1c2VDaGFubmVsUGxheWxpc3RTdG9yZSA9IGRlZmluZVN0b3JlKCdjaGFubmVsUGxheWxpc3RTdG9yZScsIHtcbiAgICBzdGF0ZTogaW5pdGlhbFN0YXRlLFxuICAgIGFjdGlvbnM6IHtcbiAgICAgICAgcmVzZXQoKSB7XG4gICAgICAgICAgICAvLyBSZXNldCB0aGUgc3RvcmUgdG8gaXRzIG9yaWdpbmFsIHN0YXRlIChjbGVhciBhbGwgZGF0YSlcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24odGhpcywgaW5pdGlhbFN0YXRlKCkpXG4gICAgICAgIH0sXG4gICAgICAgIG9wZW5BZGRDb250ZW50TW9kYWwoKSB7XG4gICAgICAgICAgICB0aGlzLnNob3dNb2RhbCA9IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAgY2xvc2VBZGRDb250ZW50TW9kYWwoKSB7XG4gICAgICAgICAgICB0aGlzLnNob3dNb2RhbCA9IGZhbHNlXG4gICAgICAgIH0sXG4gICAgICAgIGFzeW5jIGZldGNoUGxheWxpc3RzKCkge1xuICAgICAgICAgICAgdGhpcy5sb2FkaW5nID0gdHJ1ZVxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGF4aW9zLmdldCgnL2FkbWluL2NoYW5uZWwtcGxheWxpc3QvZ2V0LXBsYXlsaXN0cycpXG4gICAgICAgICAgICAgICAgdGhpcy5wbGF5bGlzdHMgPSByZXNwb25zZS5kYXRhLnBsYXlsaXN0c1xuICAgICAgICAgICAgICAgIGNvbnN0IHttZXNzYWdlLCBzdGF0dXN9ID0gcmVzcG9uc2UuZGF0YVxuICAgICAgICAgICAgICAgIGNvbnN0IG5vdGlmaWNhdGlvblN0b3JlID0gdXNlTm90aWZpY2F0aW9uU3RvcmUoKVxuICAgICAgICAgICAgICAgIG5vdGlmaWNhdGlvblN0b3JlLnNldFRvYXN0Tm90aWZpY2F0aW9uKG1lc3NhZ2UsIHN0YXR1cylcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lcnJvciA9IGVycm9yLnJlc3BvbnNlID8gZXJyb3IucmVzcG9uc2UuZGF0YS5tZXNzYWdlIDogZXJyb3IubWVzc2FnZVxuICAgICAgICAgICAgICAgIGNvbnN0IG5vdGlmaWNhdGlvblN0b3JlID0gdXNlTm90aWZpY2F0aW9uU3RvcmUoKVxuICAgICAgICAgICAgICAgIG5vdGlmaWNhdGlvblN0b3JlLnNldFRvYXN0Tm90aWZpY2F0aW9uKHRoaXMuZXJyb3IsICdlcnJvcicpXG4gICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgIHRoaXMubG9hZGluZyA9IGZhbHNlXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGFzeW5jIGNyZWF0ZVBsYXlsaXN0KHBsYXlsaXN0KSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMudmFsaWRhdGVTY2hlZHVsZUl0ZW1zKCkpIHJldHVybiBmYWxzZTtcblxuICAgICAgICAgICAgdGhpcy5sb2FkaW5nID0gdHJ1ZVxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGF4aW9zLnBvc3QoJy9jaGFubmVsUGxheWxpc3RzJywge1xuICAgICAgICAgICAgICAgICAgICAuLi5wbGF5bGlzdCxcbiAgICAgICAgICAgICAgICAgICAgc2NoZWR1bGVJdGVtczogdGhpcy5nZXRWYWxpZFNjaGVkdWxlSXRlbXMoKSxcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIHRoaXMucGxheWxpc3RzLnB1c2gocmVzcG9uc2UuZGF0YS5wbGF5bGlzdClcbiAgICAgICAgICAgICAgICB0aGlzLnNob3dOb3RpZmljYXRpb24ocmVzcG9uc2UuZGF0YSlcbiAgICAgICAgICAgICAgICB0aGlzLnJlc2V0KClcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZUVycm9yKGVycm9yKVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICB0aGlzLmxvYWRpbmcgPSBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBhc3luYyB1cGRhdGVQbGF5bGlzdChwbGF5bGlzdCkge1xuICAgICAgICAgICAgY29uc3QgYWRtaW5TdG9yZSA9IHVzZUFkbWluU3RvcmUoKTtcbiAgICAgICAgICAgIHBsYXlsaXN0LnNjaGVkdWxlSXRlbXMgPSB0aGlzLnNjaGVkdWxlSXRlbXM7XG5cbiAgICAgICAgICAgIGlmICghdGhpcy52YWxpZGF0ZVNjaGVkdWxlSXRlbXMocGxheWxpc3Quc2NoZWR1bGVJdGVtcykpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdJbnZhbGlkIHNjaGVkdWxlIGl0ZW1zJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLmxvYWRpbmcgPSB0cnVlO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGF4aW9zLnB1dChgL2NoYW5uZWxQbGF5bGlzdHMvJHtwbGF5bGlzdC5pZH1gLCBwbGF5bGlzdCk7XG4gICAgICAgICAgICAgICAgY29uc3QgaW5kZXggPSB0aGlzLnBsYXlsaXN0cy5maW5kSW5kZXgocCA9PiBwLmlkID09PSBwbGF5bGlzdC5pZCk7XG4gICAgICAgICAgICAgICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsYXlsaXN0c1tpbmRleF0gPSByZXNwb25zZS5kYXRhLnBsYXlsaXN0O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNvbnN0IGFkbWluSW5kZXggPSBhZG1pblN0b3JlLml0ZW1zLmZpbmRJbmRleChpdGVtID0+IGl0ZW0uaWQgPT09IHBsYXlsaXN0LmlkKTtcbiAgICAgICAgICAgICAgICBpZiAoYWRtaW5JbmRleCAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgYWRtaW5TdG9yZS5pdGVtc1thZG1pbkluZGV4XSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLnJlc3BvbnNlLmRhdGEucGxheWxpc3QsXG4gICAgICAgICAgICAgICAgICAgICAgICBwbGF5bGlzdF9pdGVtczogdGhpcy5zY2hlZHVsZUl0ZW1zXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuc2hvd05vdGlmaWNhdGlvbihyZXNwb25zZS5kYXRhKTtcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndXBkYXRlQ2hhbm5lbFBsYXlsaXN0TW9kYWwnKS5jbG9zZSgpO1xuICAgICAgICAgICAgICAgIHRoaXMuY2xlYXJFcnJvcigpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlRXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgdGhpcy5sb2FkaW5nID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgdmFsaWRhdGVTY2hlZHVsZUl0ZW1zKCkge1xuICAgICAgICAgICAgY29uc3Qgbm90aWZpY2F0aW9uU3RvcmUgPSB1c2VOb3RpZmljYXRpb25TdG9yZSgpXG5cbiAgICAgICAgICAgIC8vIENoZWNrIGZvciBjb25mbGljdHNcbiAgICAgICAgICAgIGlmICh0aGlzLnNjaGVkdWxlSXRlbXMuc29tZShpdGVtID0+IGl0ZW0uY29uZmxpY3QpKSB7XG4gICAgICAgICAgICAgICAgbm90aWZpY2F0aW9uU3RvcmUuc2V0R2VuZXJhbFNlcnZpY2VOb3RpZmljYXRpb24oJ0NvbmZsaWN0IERldGVjdGVkJywgJ1RoZXJlIGFyZSBjb25mbGljdHMgaW4gdGhlIHNjaGVkdWxlIGl0ZW1zLiBQbGVhc2UgcmVzb2x2ZSB0aGVtIGJlZm9yZSBwcm9jZWVkaW5nLicpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIENoZWNrIGZvciBnYXBzXG4gICAgICAgICAgICBjb25zdCBpdGVtcyA9IHRoaXMuc2NoZWR1bGVJdGVtcy5maWx0ZXIoaXRlbSA9PiAhaXRlbS5yZW1vdmVkICYmIGl0ZW0udHlwZSAhPT0gJ2dhcCcpLnNvcnQoKGEsIGIpID0+IGRheWpzKGEuc3RhcnRfZGF0ZVRpbWUpLmlzQmVmb3JlKGRheWpzKGIuc3RhcnRfZGF0ZVRpbWUpKSA/IC0xIDogMSlcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaXRlbXMubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGRheWpzKGl0ZW1zW2ldLmVuZF9kYXRlVGltZSkuaXNCZWZvcmUoZGF5anMoaXRlbXNbaSArIDFdLnN0YXJ0X2RhdGVUaW1lKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgbm90aWZpY2F0aW9uU3RvcmUuc2V0R2VuZXJhbFNlcnZpY2VOb3RpZmljYXRpb24oJ0dhcCBEZXRlY3RlZCcsICdUaGVyZSBhcmUgZ2FwcyBpbiB0aGUgc2NoZWR1bGUgaXRlbXMuIFBsZWFzZSBlbnN1cmUgdGhlcmUgYXJlIG5vIGdhcHMgYmVmb3JlIHByb2NlZWRpbmcuJylcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgfSxcblxuICAgICAgICBnZXRWYWxpZFNjaGVkdWxlSXRlbXMoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zY2hlZHVsZUl0ZW1zLmZpbHRlcihpdGVtID0+ICFpdGVtLnJlbW92ZWQgJiYgaXRlbS50eXBlICE9PSAnZ2FwJykuc29ydCgoYSwgYikgPT4gZGF5anMoYS5zdGFydF9kYXRlVGltZSkuaXNCZWZvcmUoZGF5anMoYi5zdGFydF9kYXRlVGltZSkpID8gLTEgOiAxKVxuICAgICAgICB9LFxuXG4gICAgICAgIHNob3dOb3RpZmljYXRpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgbWVzc2FnZSwgc3RhdHVzIH0gPSByZXNwb25zZVxuICAgICAgICAgICAgY29uc3Qgbm90aWZpY2F0aW9uU3RvcmUgPSB1c2VOb3RpZmljYXRpb25TdG9yZSgpXG4gICAgICAgICAgICBub3RpZmljYXRpb25TdG9yZS5zZXRUb2FzdE5vdGlmaWNhdGlvbihtZXNzYWdlLCBzdGF0dXMpXG4gICAgICAgIH0sXG5cbiAgICAgICAgaGFuZGxlRXJyb3IoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnN0IG5vdGlmaWNhdGlvblN0b3JlID0gdXNlTm90aWZpY2F0aW9uU3RvcmUoKTtcbiAgICAgICAgICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9IGVycm9yLnJlc3BvbnNlID8gZXJyb3IucmVzcG9uc2UuZGF0YS5tZXNzYWdlIDogZXJyb3IubWVzc2FnZTtcbiAgICAgICAgICAgIGxldCBlcnJvckRldGFpbHMgPSBlcnJvci5yZXNwb25zZSAmJiBlcnJvci5yZXNwb25zZS5kYXRhLmRldGFpbHMgPyBlcnJvci5yZXNwb25zZS5kYXRhLmRldGFpbHMgOiAnJztcblxuICAgICAgICAgICAgLy8gQ2hlY2sgaWYgZXJyb3JEZXRhaWxzIGlzIGEgc3RyaW5nIGFuZCBwYXJzZSBpdCB0byBhbiBvYmplY3QgaWYgbmVjZXNzYXJ5XG4gICAgICAgICAgICBpZiAodHlwZW9mIGVycm9yRGV0YWlscyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBlcnJvckRldGFpbHMgPSBKU09OLnBhcnNlKGVycm9yRGV0YWlscyk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBJZiBwYXJzaW5nIGZhaWxzLCB3cmFwIHRoZSBlcnJvckRldGFpbHMgaW4gYW4gb2JqZWN0XG4gICAgICAgICAgICAgICAgICAgIGVycm9yRGV0YWlscyA9IHsgZGV0YWlsczogZXJyb3JEZXRhaWxzIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBBZ2dyZWdhdGUgdmFsaWRhdGlvbiBlcnJvciBtZXNzYWdlcyB3aXRoIEhUTUwgc3R5bGluZ1xuICAgICAgICAgICAgbGV0IGRldGFpbGVkRXJyb3JNZXNzYWdlcyA9ICc8dWw+JztcbiAgICAgICAgICAgIGZvciAoY29uc3QgW2ZpZWxkLCBtZXNzYWdlc10gb2YgT2JqZWN0LmVudHJpZXMoZXJyb3JEZXRhaWxzKSkge1xuICAgICAgICAgICAgICAgIC8vIEVuc3VyZSBtZXNzYWdlcyBpcyBhbiBhcnJheSBhbmQgam9pbiB0aGVtIGludG8gYSBzdHJpbmdcbiAgICAgICAgICAgICAgICBjb25zdCBtZXNzYWdlVGV4dCA9IEFycmF5LmlzQXJyYXkobWVzc2FnZXMpID8gbWVzc2FnZXMuam9pbignLCAnKSA6IG1lc3NhZ2VzO1xuICAgICAgICAgICAgICAgIGRldGFpbGVkRXJyb3JNZXNzYWdlcyArPSBgPGxpPjxzdHJvbmc+JHtmaWVsZH06PC9zdHJvbmc+ICR7bWVzc2FnZVRleHR9PC9saT5gO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGV0YWlsZWRFcnJvck1lc3NhZ2VzICs9ICc8L3VsPic7XG5cbiAgICAgICAgICAgIC8vIERpc3BsYXkgZ2VuZXJhbCBlcnJvciBtZXNzYWdlIHdpdGggYWdncmVnYXRlZCBkZXRhaWxzXG4gICAgICAgICAgICBub3RpZmljYXRpb25TdG9yZS5zZXRHZW5lcmFsU2VydmljZU5vdGlmaWNhdGlvbignVmFsaWRhdGlvbiBFcnJvcicsIGAke2Vycm9yTWVzc2FnZX1cXG4ke2RldGFpbGVkRXJyb3JNZXNzYWdlc31gKTtcblxuICAgICAgICAgICAgdGhpcy5lcnJvciA9IGVycm9yTWVzc2FnZTtcbiAgICAgICAgfSxcblxuICAgICAgICBzZXRQbGF5bGlzdERhdGEocGxheWxpc3QpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdwbGF5bGlzdDonLCBwbGF5bGlzdClcbiAgICAgICAgICAgIGNvbnN0IHVzZXJTdG9yZSA9IHVzZVVzZXJTdG9yZSgpXG5cbiAgICAgICAgICAgIGNvbnN0IHN0YXJ0VGltZSA9IGRheWpzLnV0YyhwbGF5bGlzdC5zdGFydF9kYXRlVGltZSkudHoodXNlclN0b3JlLnRpbWV6b25lKS5mb3JtYXQoJ1lZWVktTU0tRERUSEg6bW0nKVxuICAgICAgICAgICAgY29uc3QgZW5kVGltZSA9IGRheWpzLnV0YyhwbGF5bGlzdC5lbmRfZGF0ZVRpbWUpLnR6KHVzZXJTdG9yZS50aW1lem9uZSkuZm9ybWF0KCdZWVlZLU1NLUREVEhIOm1tJylcblxuICAgICAgICAgICAgdGhpcy5pZCA9IHBsYXlsaXN0LmlkXG4gICAgICAgICAgICB0aGlzLm5hbWUgPSBwbGF5bGlzdC5uYW1lXG4gICAgICAgICAgICB0aGlzLmRlc2NyaXB0aW9uID0gcGxheWxpc3QuZGVzY3JpcHRpb25cbiAgICAgICAgICAgIHRoaXMudXJsID0gcGxheWxpc3QudXJsXG4gICAgICAgICAgICB0aGlzLnR5cGUgPSBwbGF5bGlzdC50eXBlXG4gICAgICAgICAgICB0aGlzLnByaW9yaXR5ID0gcGxheWxpc3QucHJpb3JpdHlcbiAgICAgICAgICAgIHRoaXMucmVwZWF0X21vZGUgPSBwbGF5bGlzdC5yZXBlYXRfbW9kZVxuICAgICAgICAgICAgdGhpcy5uZXh0X3BsYXlsaXN0X2lkID0gcGxheWxpc3QubmV4dF9wbGF5bGlzdF9pZFxuICAgICAgICAgICAgdGhpcy5zdGFydFRpbWUgPSBzdGFydFRpbWVcbiAgICAgICAgICAgIHRoaXMuZW5kVGltZSA9IGVuZFRpbWVcblxuICAgICAgICAgICAgY29uc29sZS5sb2coJ3BsYXlsaXN0LnBsYXlsaXN0X2l0ZW1zOicsIHBsYXlsaXN0LnBsYXlsaXN0X2l0ZW1zKVxuXG4gICAgICAgICAgICB0aGlzLnNjaGVkdWxlSXRlbXMgPSBwbGF5bGlzdC5wbGF5bGlzdF9pdGVtc1xuICAgICAgICAgICAgICAgIC5maWx0ZXIoaXRlbSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdGaWx0ZXJpbmcgaXRlbTonLCBpdGVtKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXRlbSAhPT0gbnVsbCAmJiBpdGVtICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5tYXAoaXRlbSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG1hcHBlZEl0ZW0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogaXRlbS5pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRfaWQ6IGl0ZW0uY29udGVudF9pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRfdHlwZTogaXRlbS5jb250ZW50X3R5cGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBvcmRlcjogaXRlbS5vcmRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lZGlhX3R5cGU6IGl0ZW0ubWVkaWFfdHlwZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZV9wYXRoOiBpdGVtLnNvdXJjZV9wYXRoLFxuICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlX3R5cGU6IGl0ZW0uc291cmNlX3R5cGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBpc19saXZlOiBpdGVtLmlzX2xpdmUsXG4gICAgICAgICAgICAgICAgICAgICAgICBpc19zY2hlZHVsZWQ6IGl0ZW0uaXNfc2NoZWR1bGVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudF92aWV3ZXJzX2NvdW50OiBpdGVtLmN1cnJlbnRfdmlld2Vyc19jb3VudCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1heF92aWV3ZXJzX2NvdW50OiBpdGVtLm1heF92aWV3ZXJzX2NvdW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgYWRkaXRpb25hbF9zb3VyY2VzOiBpdGVtLmFkZGl0aW9uYWxfc291cmNlcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1c3RvbV9wbGF5YmFja19vcHRpb25zOiBpdGVtLmN1c3RvbV9wbGF5YmFja19vcHRpb25zLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWV0YWRhdGE6IGl0ZW0ubWV0YWRhdGEsXG4gICAgICAgICAgICAgICAgICAgICAgICBoYXNfcGxheWVkOiBpdGVtLmhhc19wbGF5ZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydF9kYXRlVGltZTogaXRlbS5zdGFydF9kYXRlVGltZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuZF9kYXRlVGltZTogaXRlbS5lbmRfZGF0ZVRpbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbl9taW51dGVzOiBpdGVtLmR1cmF0aW9uX21pbnV0ZXMsXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBpdGVtLnR5cGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBpdGVtLmNvbnRlbnQsXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ01hcHBlZCBpdGVtOicsIG1hcHBlZEl0ZW0pXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBtYXBwZWRJdGVtXG4gICAgICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgY29uc29sZS5sb2coJ3RoaXMuc2NoZWR1bGVJdGVtczonLCB0aGlzLnNjaGVkdWxlSXRlbXMpXG4gICAgICAgIH0sXG4gICAgICAgIGFzeW5jIGZldGNoU2NoZWR1bGVzKCkge1xuICAgICAgICAgICAgdGhpcy5sb2FkaW5nU2NoZWR1bGVzID0gdHJ1ZVxuICAgICAgICAgICAgdGhpcy5jbGVhckVycm9yKClcbiAgICAgICAgICAgIGNvbnN0IG5vdGlmaWNhdGlvblN0b3JlID0gdXNlTm90aWZpY2F0aW9uU3RvcmUoKVxuXG4gICAgICAgICAgICBpZiAoIXRoaXMuc3RhcnRUaW1lIHx8ICF0aGlzLmVuZFRpbWUpIHtcbiAgICAgICAgICAgICAgICBub3RpZmljYXRpb25TdG9yZS5zZXRHZW5lcmFsU2VydmljZU5vdGlmaWNhdGlvbignU3RhcnQgYW5kIEVuZCBUaW1lcyBSZXF1aXJlZCcsICdQbGVhc2UgY2hlY2sgdGhlIHNjaGVkdWxlIHN0YXJ0IGFuZCBlbmQgdGltZXMuJylcbiAgICAgICAgICAgICAgICB0aGlzLmxvYWRpbmdTY2hlZHVsZXMgPSBmYWxzZVxuICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXhpb3MuZ2V0KGAvYXBpL3NjaGVkdWxlc2AsIHtcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydFRpbWU6IHRoaXMuc3RhcnRUaW1lVVRDLFxuICAgICAgICAgICAgICAgICAgICAgICAgZW5kVGltZTogdGhpcy5lbmRUaW1lVVRDLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLy8gUHVzaCBuZXcgaXRlbXMgdG8gdGhlIGV4aXN0aW5nIGFycmF5IHdpdGggYWRkZWQgYXR0cmlidXRlc1xuICAgICAgICAgICAgICAgIHRoaXMuc2NoZWR1bGVJdGVtcy5wdXNoKC4uLnJlc3BvbnNlLmRhdGEuaXRlbXMubWFwKGl0ZW0gPT4gKHtcbiAgICAgICAgICAgICAgICAgICAgLi4uaXRlbSxcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGlzX3NjaGVkdWxlZDogdHJ1ZVxuICAgICAgICAgICAgICAgIH0pKSlcbiAgICAgICAgICAgICAgICBjb25zdCB7bWVzc2FnZSwgc3RhdHVzfSA9IHJlc3BvbnNlLmRhdGFcbiAgICAgICAgICAgICAgICBub3RpZmljYXRpb25TdG9yZS5zZXRUb2FzdE5vdGlmaWNhdGlvbihtZXNzYWdlLCBzdGF0dXMpXG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVDb25mbGljdHMoKVxuICAgICAgICAgICAgICAgIHRoaXMubG9hZGluZ1NjaGVkdWxlcyA9IGZhbHNlXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmRhdGEgLy8gcmV0dXJuIHRoZSBkYXRhIHRvIHRoZSBjYWxsZXJcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lcnJvciA9IGVycm9yLnJlc3BvbnNlID8gZXJyb3IucmVzcG9uc2UuZGF0YS5tZXNzYWdlIDogZXJyb3IubWVzc2FnZVxuICAgICAgICAgICAgICAgIG5vdGlmaWNhdGlvblN0b3JlLnNldFRvYXN0Tm90aWZpY2F0aW9uKHRoaXMuZXJyb3IsICdlcnJvcicpXG4gICAgICAgICAgICAgICAgdGhpcy5sb2FkaW5nU2NoZWR1bGVzID0gZmFsc2VcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnJvclxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICByZW1vdmVJdGVtKGlkKSB7XG4gICAgICAgICAgICBjb25zdCBpdGVtID0gdGhpcy5zY2hlZHVsZUl0ZW1zLmZpbmQoaXRlbSA9PiBpdGVtLmlkID09PSBpZClcbiAgICAgICAgICAgIGlmIChpdGVtKSB7XG4gICAgICAgICAgICAgICAgaXRlbS5yZW1vdmVkID0gdHJ1ZVxuICAgICAgICAgICAgICAgIHRoaXMuc2NoZWR1bGVJdGVtcyA9IFsuLi50aGlzLnNjaGVkdWxlSXRlbXNdICAvLyBUcmlnZ2VyIHJlYWN0aXZpdHlcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUNvbmZsaWN0cygpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmNsZWFyRXJyb3IoKVxuICAgICAgICB9LFxuICAgICAgICBhZGRJdGVtKGlkKSB7XG4gICAgICAgICAgICBjb25zdCBpdGVtID0gdGhpcy5zY2hlZHVsZUl0ZW1zLmZpbmQoaXRlbSA9PiBpdGVtLmlkID09PSBpZClcbiAgICAgICAgICAgIGlmIChpdGVtKSB7XG4gICAgICAgICAgICAgICAgaXRlbS5yZW1vdmVkID0gZmFsc2VcbiAgICAgICAgICAgICAgICB0aGlzLnNjaGVkdWxlSXRlbXMgPSBbLi4udGhpcy5zY2hlZHVsZUl0ZW1zXSAgLy8gVHJpZ2dlciByZWFjdGl2aXR5XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVDb25mbGljdHMoKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5jbGVhckVycm9yKClcbiAgICAgICAgfSxcbiAgICAgICAgcmVtb3ZlQWxsSXRlbXMoKSB7XG4gICAgICAgICAgICB0aGlzLnNjaGVkdWxlSXRlbXMgPSBbXVxuICAgICAgICAgICAgdGhpcy5jbGVhckVycm9yKClcbiAgICAgICAgfSxcbiAgICAgICAgY2xlYXJSZW1vdmVkSXRlbXMoKSB7XG4gICAgICAgICAgICB0aGlzLnNjaGVkdWxlSXRlbXMgPSB0aGlzLnNjaGVkdWxlSXRlbXMuZmlsdGVyKGl0ZW0gPT4gIWl0ZW0ucmVtb3ZlZClcbiAgICAgICAgICAgIHRoaXMuY2xlYXJFcnJvcigpXG4gICAgICAgICAgICB0aGlzLnJlY2FsY3VsYXRlSW5kZXhlcygpXG4gICAgICAgIH0sXG4gICAgICAgIHJlY2FsY3VsYXRlSW5kZXhlcygpIHtcbiAgICAgICAgICAgIHRoaXMuc2NoZWR1bGVJdGVtcyA9IHRoaXMuc2NoZWR1bGVJdGVtcy5tYXAoKGl0ZW0sIGluZGV4KSA9PiAoey4uLml0ZW0sIGluZGV4fSkpXG4gICAgICAgIH0sXG4gICAgICAgIHVwZGF0ZUNvbmZsaWN0cygpIHtcbiAgICAgICAgICAgIGNvbnN0IGl0ZW1zID0gdGhpcy5zY2hlZHVsZUl0ZW1zLmZpbHRlcihpdGVtID0+ICFpdGVtLnJlbW92ZWQpXG4gICAgICAgICAgICBpdGVtcy5zb3J0KChhLCBiKSA9PiBkYXlqcyhhLnN0YXJ0X2RhdGVUaW1lKS5pc0JlZm9yZShkYXlqcyhiLnN0YXJ0X2RhdGVUaW1lKSkgPyAtMSA6IDEpXG5cbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaXRlbXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50SXRlbSA9IGl0ZW1zW2ldXG4gICAgICAgICAgICAgICAgY3VycmVudEl0ZW0uY29uZmxpY3QgPSBmYWxzZVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGl0ZW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY3VycmVudEl0ZW0gPSBpdGVtc1tpXVxuICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSBpICsgMTsgaiA8IGl0ZW1zLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5leHRJdGVtID0gaXRlbXNbal1cbiAgICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgZGF5anMoY3VycmVudEl0ZW0uc3RhcnRfZGF0ZVRpbWUpLmlzQmVmb3JlKGRheWpzKG5leHRJdGVtLmVuZF9kYXRlVGltZSkpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXlqcyhjdXJyZW50SXRlbS5lbmRfZGF0ZVRpbWUpLmlzQWZ0ZXIoZGF5anMobmV4dEl0ZW0uc3RhcnRfZGF0ZVRpbWUpKVxuICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRJdGVtLmNvbmZsaWN0ID0gdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dEl0ZW0uY29uZmxpY3QgPSB0cnVlXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHNlbGVjdFBsYXlsaXN0KHBsYXlsaXN0KSB7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkUGxheWxpc3QgPSBwbGF5bGlzdFxuICAgICAgICB9LFxuICAgICAgICByZW1vdmVQbGF5bGlzdChwbGF5bGlzdElkKSB7XG4gICAgICAgICAgICByb3V0ZXIuZGVsZXRlKHJvdXRlKCdjaGFubmVsUGxheWxpc3RzLmRlc3Ryb3knLCB7IGNoYW5uZWxQbGF5bGlzdDogcGxheWxpc3RJZCB9KSlcbiAgICAgICAgfSxcbiAgICAgICAgY2xlYXJFcnJvcigpIHtcbiAgICAgICAgICAgIHRoaXMuZXJyb3IgPSBudWxsXG4gICAgICAgIH0sXG4gICAgICAgIHJlc29sdmVDb25mbGljdHMoKSB7XG4gICAgICAgICAgICB0aGlzLnByb2Nlc3NpbmcgPSB0cnVlIC8vIFNldCBwcm9jZXNzaW5nIGZsYWdcbiAgICAgICAgICAgIGxldCBjb25mbGljdHNSZXNvbHZlZFxuXG4gICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgY29uZmxpY3RzUmVzb2x2ZWQgPSBmYWxzZVxuXG4gICAgICAgICAgICAgICAgLy8gQ3JlYXRlIGEgY29weSBvZiB0aGUgaXRlbXMgYXJyYXkgd2l0aG91dCByZW1vdmVkIGl0ZW1zXG4gICAgICAgICAgICAgICAgbGV0IGl0ZW1zID0gdGhpcy5zY2hlZHVsZUl0ZW1zLmZpbHRlcihpdGVtID0+ICFpdGVtLnJlbW92ZWQpXG5cbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IGl0ZW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRJdGVtID0gaXRlbXNbaV1cblxuICAgICAgICAgICAgICAgICAgICBpZiAoIWN1cnJlbnRJdGVtLmNvbmZsaWN0KSBjb250aW51ZVxuXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgaTsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwcmV2aW91c0l0ZW0gPSBpdGVtc1tqXVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocHJldmlvdXNJdGVtLnJlbW92ZWQpIGNvbnRpbnVlXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIENoZWNrIGZvciBjb25mbGljdFxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY3VycmVudFN0YXJ0ID0gZGF5anMoY3VycmVudEl0ZW0uc3RhcnRfZGF0ZVRpbWUpXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwcmV2aW91c0VuZCA9IGRheWpzKHByZXZpb3VzSXRlbS5lbmRfZGF0ZVRpbWUpXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwcmV2aW91c1N0YXJ0ID0gZGF5anMocHJldmlvdXNJdGVtLnN0YXJ0X2RhdGVUaW1lKVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFN0YXJ0LmlzU2FtZShwcmV2aW91c1N0YXJ0KSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChjdXJyZW50U3RhcnQuaXNCZWZvcmUocHJldmlvdXNFbmQpICYmICFjdXJyZW50U3RhcnQuaXNTYW1lKHByZXZpb3VzRW5kKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJlc29sdmUgY29uZmxpY3QgYmFzZWQgb24gcHJpb3JpdHkgYW5kIGNyZWF0aW9uIGRhdGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudEl0ZW0ucHJpb3JpdHkgPiBwcmV2aW91c0l0ZW0ucHJpb3JpdHkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zY2hlZHVsZUl0ZW1zID0gdGhpcy5zY2hlZHVsZUl0ZW1zLm1hcChpdGVtID0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLmlkID09PSBjdXJyZW50SXRlbS5pZCA/IHsuLi5pdGVtLCByZW1vdmVkOiB0cnVlfSA6IGl0ZW0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmxpY3RzUmVzb2x2ZWQgPSB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjdXJyZW50SXRlbS5wcmlvcml0eSA8IHByZXZpb3VzSXRlbS5wcmlvcml0eSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNjaGVkdWxlSXRlbXMgPSB0aGlzLnNjaGVkdWxlSXRlbXMubWFwKGl0ZW0gPT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uaWQgPT09IHByZXZpb3VzSXRlbS5pZCA/IHsuLi5pdGVtLCByZW1vdmVkOiB0cnVlfSA6IGl0ZW0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmxpY3RzUmVzb2x2ZWQgPSB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRheWpzKGN1cnJlbnRJdGVtLmNyZWF0ZWRfYXQpLmlzQWZ0ZXIoZGF5anMocHJldmlvdXNJdGVtLmNyZWF0ZWRfYXQpKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zY2hlZHVsZUl0ZW1zID0gdGhpcy5zY2hlZHVsZUl0ZW1zLm1hcChpdGVtID0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5pZCA9PT0gY3VycmVudEl0ZW0uaWQgPyB7Li4uaXRlbSwgcmVtb3ZlZDogdHJ1ZX0gOiBpdGVtLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmxpY3RzUmVzb2x2ZWQgPSB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zY2hlZHVsZUl0ZW1zID0gdGhpcy5zY2hlZHVsZUl0ZW1zLm1hcChpdGVtID0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5pZCA9PT0gcHJldmlvdXNJdGVtLmlkID8gey4uLml0ZW0sIHJlbW92ZWQ6IHRydWV9IDogaXRlbSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZsaWN0c1Jlc29sdmVkID0gdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChjb25mbGljdHNSZXNvbHZlZCkgYnJlYWtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0gd2hpbGUgKGNvbmZsaWN0c1Jlc29sdmVkKVxuXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUNvbmZsaWN0cygpXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnRmluaXNoZWQgcHJvY2Vzc2luZyBjb25mbGljdHMnKVxuICAgICAgICAgICAgdGhpcy5wcm9jZXNzaW5nID0gZmFsc2UgLy8gQ2xlYXIgcHJvY2Vzc2luZyBmbGFnXG4gICAgICAgIH0sXG5cbiAgICAgICAgaW5zZXJ0R2FwcygpIHtcbiAgICAgICAgICAgIHRoaXMuY2xlYXJFcnJvcigpXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnU3RhcnQgVGltZSBVVEM6JywgdGhpcy5zdGFydFRpbWVVVEMpO1xuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ0VuZCBUaW1lIFVUQzonLCB0aGlzLmVuZFRpbWVVVEMpO1xuXG4gICAgICAgICAgICAvLyBNYXAgc2NoZWR1bGUgaXRlbXMgdG8gaW5jbHVkZSBkYXlqcyBvYmplY3RzIGZvciBzdGFydCBhbmQgZW5kIHRpbWVzXG4gICAgICAgICAgICBjb25zdCBpdGVtcyA9IHRoaXMuc2NoZWR1bGVJdGVtc1xuICAgICAgICAgICAgICAgIC5maWx0ZXIoaXRlbSA9PiAhaXRlbS5yZW1vdmVkKVxuICAgICAgICAgICAgICAgIC5tYXAoaXRlbSA9PiAoe1xuICAgICAgICAgICAgICAgICAgICAuLi5pdGVtLFxuICAgICAgICAgICAgICAgICAgICBzdGFydDogZGF5anMoaXRlbS5zdGFydF9kYXRlVGltZSksXG4gICAgICAgICAgICAgICAgICAgIGVuZDogZGF5anMoaXRlbS5lbmRfZGF0ZVRpbWUpLFxuICAgICAgICAgICAgICAgIH0pKVxuXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnSXRlbXM6JywgaXRlbXMpO1xuXG4gICAgICAgICAgICB0aGlzLmdhcHMgPSBbXVxuXG4gICAgICAgICAgICBpZiAoaXRlbXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ05vIHNjaGVkdWxlZCBpdGVtcywgY3JlYXRpbmcgYSBzaW5nbGUgZ2FwIGZvciB0aGUgZW50aXJlIHBlcmlvZC4nKTtcbiAgICAgICAgICAgICAgICB0aGlzLmdhcHMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdnYXAnLFxuICAgICAgICAgICAgICAgICAgICBzdGFydF9kYXRlVGltZTogZGF5anMudXRjKHRoaXMuc3RhcnRUaW1lVVRDKS50b0lTT1N0cmluZygpLFxuICAgICAgICAgICAgICAgICAgICBlbmRfZGF0ZVRpbWU6IGRheWpzLnV0Yyh0aGlzLmVuZFRpbWVVVEMpLnRvSVNPU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uX21pbnV0ZXM6IGRheWpzKHRoaXMuZW5kVGltZVVUQykuZGlmZihkYXlqcyh0aGlzLnN0YXJ0VGltZVVUQyksICdtaW51dGUnKSxcbiAgICAgICAgICAgICAgICAgICAgaWQ6IGBnYXAtJHtkYXlqcy51dGModGhpcy5zdGFydFRpbWVVVEMpLnRvSVNPU3RyaW5nKCl9LSR7ZGF5anMudXRjKHRoaXMuZW5kVGltZVVUQykudG9JU09TdHJpbmcoKX1gLFxuICAgICAgICAgICAgICAgICAgICBzdGFydDogZGF5anMudXRjKHRoaXMuc3RhcnRUaW1lVVRDKSxcbiAgICAgICAgICAgICAgICAgICAgZW5kOiBkYXlqcy51dGModGhpcy5lbmRUaW1lVVRDKSxcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNoZWNrRm9yR2FwQmVmb3JlRmlyc3RJdGVtKGl0ZW1zKVxuICAgICAgICAgICAgICAgIHRoaXMuY2hlY2tGb3JHYXBzQmV0d2Vlbkl0ZW1zKGl0ZW1zKVxuICAgICAgICAgICAgICAgIHRoaXMuY2hlY2tGb3JHYXBBZnRlckxhc3RJdGVtKGl0ZW1zKVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnR2FwczonLCB0aGlzLmdhcHMpO1xuXG4gICAgICAgICAgICAvLyBBZGQgZ2FwcyB0byB0aGUgc2NoZWR1bGUgaXRlbXMgYW5kIHNvcnQgdGhlIGxpc3QgYnkgc3RhcnQgZGF0ZVRpbWVcbiAgICAgICAgICAgIHRoaXMuc2NoZWR1bGVJdGVtcyA9IFsuLi5pdGVtcywgLi4udGhpcy5nYXBzXS5zb3J0KChhLCBiKSA9PiBhLnN0YXJ0LmlzQmVmb3JlKGIuc3RhcnQpID8gLTEgOiAxKVxuXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnRmluYWwgU2NoZWR1bGUgSXRlbXM6JywgdGhpcy5zY2hlZHVsZUl0ZW1zKTtcbiAgICAgICAgfSxcblxuXG4gICAgICAgIGNoZWNrRm9yR2FwQmVmb3JlRmlyc3RJdGVtKGl0ZW1zKSB7XG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnQ2hlY2tpbmcgZm9yIGdhcCBiZWZvcmUgdGhlIGZpcnN0IGl0ZW0uLi4nKVxuICAgICAgICAgICAgaWYgKGl0ZW1zLmxlbmd0aCA+IDAgJiYgZGF5anMudXRjKHRoaXMuc3RhcnRUaW1lVVRDKS5pc0JlZm9yZShpdGVtc1swXS5zdGFydCkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBnYXBTdGFydCA9IGRheWpzLnV0Yyh0aGlzLnN0YXJ0VGltZVVUQylcbiAgICAgICAgICAgICAgICBjb25zdCBnYXBFbmQgPSBpdGVtc1swXS5zdGFydFxuICAgICAgICAgICAgICAgIGNvbnN0IGdhcER1cmF0aW9uID0gZ2FwRW5kLmRpZmYoZ2FwU3RhcnQsICdtaW51dGUnKVxuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGBDcmVhdGluZyBnYXAgYmVmb3JlIHRoZSBmaXJzdCBpdGVtOiAke2dhcFN0YXJ0LnRvSVNPU3RyaW5nKCl9IHRvICR7Z2FwRW5kLnRvSVNPU3RyaW5nKCl9LCBkdXJhdGlvbjogJHtnYXBEdXJhdGlvbn0gbWludXRlc2ApXG5cbiAgICAgICAgICAgICAgICB0aGlzLmdhcHMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdnYXAnLFxuICAgICAgICAgICAgICAgICAgICBzdGFydF9kYXRlVGltZTogZ2FwU3RhcnQudG9JU09TdHJpbmcoKSwgLy8gSVNPIDg2MDEgc3RyaW5nIGluIFVUQ1xuICAgICAgICAgICAgICAgICAgICBlbmRfZGF0ZVRpbWU6IGdhcEVuZC50b0lTT1N0cmluZygpLCAvLyBJU08gODYwMSBzdHJpbmcgaW4gVVRDXG4gICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uX21pbnV0ZXM6IGdhcER1cmF0aW9uLFxuICAgICAgICAgICAgICAgICAgICBpZDogYGdhcC0ke2dhcFN0YXJ0LnRvSVNPU3RyaW5nKCl9LSR7Z2FwRW5kLnRvSVNPU3RyaW5nKCl9YCxcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IGdhcFN0YXJ0LFxuICAgICAgICAgICAgICAgICAgICBlbmQ6IGdhcEVuZCxcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnTm8gZ2FwIGJlZm9yZSB0aGUgZmlyc3QgaXRlbS4nKVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIGNoZWNrRm9yR2Fwc0JldHdlZW5JdGVtcyhpdGVtcykge1xuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ0NoZWNraW5nIGZvciBnYXBzIGJldHdlZW4gaXRlbXMuLi4nKVxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpdGVtcy5sZW5ndGggLSAxOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50SXRlbSA9IGl0ZW1zW2ldXG4gICAgICAgICAgICAgICAgY29uc3QgbmV4dEl0ZW0gPSBpdGVtc1tpICsgMV1cblxuICAgICAgICAgICAgICAgIGNvbnN0IGdhcFN0YXJ0ID0gY3VycmVudEl0ZW0uZW5kXG4gICAgICAgICAgICAgICAgY29uc3QgZ2FwRW5kID0gbmV4dEl0ZW0uc3RhcnRcblxuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGBDdXJyZW50IEl0ZW06ICR7Y3VycmVudEl0ZW0uaWR9LCBFbmQ6ICR7Y3VycmVudEl0ZW0uZW5kLnRvSVNPU3RyaW5nKCl9YClcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhgTmV4dCBJdGVtOiAke25leHRJdGVtLmlkfSwgU3RhcnQ6ICR7bmV4dEl0ZW0uc3RhcnQudG9JU09TdHJpbmcoKX1gKVxuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGBHYXAgc3RhcnQ6ICR7Z2FwU3RhcnQudG9JU09TdHJpbmcoKX0sIEdhcCBlbmQ6ICR7Z2FwRW5kLnRvSVNPU3RyaW5nKCl9YClcblxuICAgICAgICAgICAgICAgIGlmIChnYXBTdGFydC5pc0JlZm9yZShnYXBFbmQpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGdhcER1cmF0aW9uID0gZ2FwRW5kLmRpZmYoZ2FwU3RhcnQsICdtaW51dGUnKVxuICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhgQ3JlYXRpbmcgZ2FwIGJldHdlZW4gaXRlbXM6ICR7Z2FwU3RhcnQudG9JU09TdHJpbmcoKX0gdG8gJHtnYXBFbmQudG9JU09TdHJpbmcoKX0sIGR1cmF0aW9uOiAke2dhcER1cmF0aW9ufSBtaW51dGVzYClcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLmdhcHMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnZ2FwJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0X2RhdGVUaW1lOiBnYXBTdGFydC50b0lTT1N0cmluZygpLCAvLyBJU08gODYwMSBzdHJpbmcgaW4gVVRDXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmRfZGF0ZVRpbWU6IGdhcEVuZC50b0lTT1N0cmluZygpLCAvLyBJU08gODYwMSBzdHJpbmcgaW4gVVRDXG4gICAgICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbl9taW51dGVzOiBnYXBEdXJhdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBgZ2FwLSR7Z2FwU3RhcnQudG9JU09TdHJpbmcoKX0tJHtnYXBFbmQudG9JU09TdHJpbmcoKX1gLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IGdhcFN0YXJ0LFxuICAgICAgICAgICAgICAgICAgICAgICAgZW5kOiBnYXBFbmQsXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ05vIGdhcCBiZXR3ZWVuIHRoZXNlIGl0ZW1zLicpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIGNoZWNrRm9yR2FwQWZ0ZXJMYXN0SXRlbShpdGVtcykge1xuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ0NoZWNraW5nIGZvciBnYXAgYWZ0ZXIgdGhlIGxhc3QgaXRlbS4uLicpO1xuICAgICAgICAgICAgaWYgKGl0ZW1zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsYXN0SXRlbUVuZCA9IGl0ZW1zW2l0ZW1zLmxlbmd0aCAtIDFdLmVuZFxuICAgICAgICAgICAgICAgIGNvbnN0IGVuZFRpbWUgPSBkYXlqcy51dGModGhpcy5lbmRUaW1lVVRDKSAvLyBFbnN1cmUgZW5kVGltZVVUQyBpcyB0cmVhdGVkIGFzIFVUQ1xuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGBMYXN0IEl0ZW0gRW5kOiAke2xhc3RJdGVtRW5kLnRvSVNPU3RyaW5nKCl9LCBFbmQgVGltZTogJHtlbmRUaW1lLnRvSVNPU3RyaW5nKCl9YCk7XG5cbiAgICAgICAgICAgICAgICAvLyBDaGVjayB0aGF0IGxhc3QgaXRlbSBlbmRzIGJlZm9yZSBlbmRUaW1lVVRDXG4gICAgICAgICAgICAgICAgaWYgKGxhc3RJdGVtRW5kLmlzQmVmb3JlKGVuZFRpbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGdhcFN0YXJ0ID0gbGFzdEl0ZW1FbmRcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZ2FwRW5kID0gZW5kVGltZVxuICAgICAgICAgICAgICAgICAgICBjb25zdCBnYXBEdXJhdGlvbiA9IGdhcEVuZC5kaWZmKGdhcFN0YXJ0LCAnbWludXRlJylcbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coYENyZWF0aW5nIGdhcCBhZnRlciB0aGUgbGFzdCBpdGVtOiAke2dhcFN0YXJ0LnRvSVNPU3RyaW5nKCl9IHRvICR7Z2FwRW5kLnRvSVNPU3RyaW5nKCl9LCBkdXJhdGlvbjogJHtnYXBEdXJhdGlvbn0gbWludXRlc2ApO1xuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ2Fwcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdnYXAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRfZGF0ZVRpbWU6IGdhcFN0YXJ0LnRvSVNPU3RyaW5nKCksIC8vIElTTyA4NjAxIHN0cmluZyBpbiBVVENcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuZF9kYXRlVGltZTogZ2FwRW5kLnRvSVNPU3RyaW5nKCksIC8vIElTTyA4NjAxIHN0cmluZyBpbiBVVENcbiAgICAgICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uX21pbnV0ZXM6IGdhcER1cmF0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IGBnYXAtJHtnYXBTdGFydC50b0lTT1N0cmluZygpfS0ke2dhcEVuZC50b0lTT1N0cmluZygpfWAsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydDogZ2FwU3RhcnQsXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmQ6IGdhcEVuZCxcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnTm8gZ2FwIGFmdGVyIHRoZSBsYXN0IGl0ZW0uJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnTm8gaXRlbXMgdG8gY2hlY2sgZm9yIGdhcHMgYWZ0ZXIuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGFzeW5jIGZldGNoQ29udGVudChjb250ZW50VHlwZSwgbWF4RHVyYXRpb25NaW51dGVzLCBzdGFydERhdGVUaW1lLCBwYWdlID0gMSwgc2VhcmNoID0gJycpIHtcbiAgICAgICAgICAgIHRoaXMubG9hZGluZyA9IHRydWVcbiAgICAgICAgICAgIHRoaXMuY2xlYXJFcnJvcigpXG4gICAgICAgICAgICBjb25zdCBub3RpZmljYXRpb25TdG9yZSA9IHVzZU5vdGlmaWNhdGlvblN0b3JlKClcblxuICAgICAgICAgICAgLy8gQ29udmVydCBzdGFydERhdGVUaW1lIGZyb20gdXNlcidzIHRpbWV6b25lIHRvIFVUQ1xuICAgICAgICAgICAgY29uc3Qgc3RhcnREYXRlVGltZVVUQyA9IGRheWpzKHN0YXJ0RGF0ZVRpbWUpLnR6KGRheWpzLnR6Lmd1ZXNzKCkpLnV0YygpLmZvcm1hdCgnWVlZWS1NTS1ERFRISDptbTpzc1taXScpXG5cbiAgICAgICAgICAgIC8vIExvZyB0aGUgcGFyYW1ldGVycyBiZWZvcmUgbWFraW5nIHRoZSByZXF1ZXN0XG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnRmV0Y2hpbmcgY29udGVudCB3aXRoIHBhcmFtZXRlcnM6Jyk7XG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnQ29udGVudCBUeXBlOicsIGNvbnRlbnRUeXBlKTtcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdNYXggRHVyYXRpb24gTWludXRlczonLCBtYXhEdXJhdGlvbk1pbnV0ZXMpO1xuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ1N0YXJ0IERhdGVUaW1lIChVc2VyIFRpbWV6b25lKTonLCBzdGFydERhdGVUaW1lKTtcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdTdGFydCBEYXRlVGltZSAoVVRDKTonLCBzdGFydERhdGVUaW1lVVRDKTtcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdQYWdlOicsIHBhZ2UpO1xuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ1NlYXJjaCBRdWVyeTonLCBzZWFyY2gpO1xuXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXhpb3MuZ2V0KCcvYWRtaW4vY2hhbm5lbC1wbGF5bGlzdC9nZXQtY29udGVudCcsIHtcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBjb250ZW50VHlwZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1heER1cmF0aW9uTWludXRlczogbWF4RHVyYXRpb25NaW51dGVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRfZGF0ZVRpbWU6IHN0YXJ0RGF0ZVRpbWVVVEMsXG4gICAgICAgICAgICAgICAgICAgICAgICBwYWdlOiBwYWdlLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2VhcmNoOiBzZWFyY2gsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnUmVzcG9uc2UgZGF0YTonLCByZXNwb25zZS5kYXRhKSAgLy8gTG9nIHRoZSByZXNwb25zZSBkYXRhXG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZW50SXRlbXMgPSByZXNwb25zZS5kYXRhLml0ZW1zXG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50UGFnZSA9IHJlc3BvbnNlLmRhdGEuY3VycmVudF9wYWdlXG4gICAgICAgICAgICAgICAgdGhpcy50b3RhbFBhZ2VzID0gcmVzcG9uc2UuZGF0YS50b3RhbF9wYWdlc1xuICAgICAgICAgICAgICAgIHRoaXMuY29udGVudEZldGNoZWQgPSB0cnVlXG4gICAgICAgICAgICAgICAgY29uc3Qge21lc3NhZ2UsIHN0YXR1c30gPSByZXNwb25zZS5kYXRhXG4gICAgICAgICAgICAgICAgbm90aWZpY2F0aW9uU3RvcmUuc2V0VG9hc3ROb3RpZmljYXRpb24obWVzc2FnZSwgc3RhdHVzKVxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVycm9yID0gZXJyb3IucmVzcG9uc2UgPyBlcnJvci5yZXNwb25zZS5kYXRhLm1lc3NhZ2UgOiBlcnJvci5tZXNzYWdlXG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgZmV0Y2hpbmcgY29udGVudDonLCB0aGlzLmVycm9yKVxuICAgICAgICAgICAgICAgIG5vdGlmaWNhdGlvblN0b3JlLnNldFRvYXN0Tm90aWZpY2F0aW9uKHRoaXMuZXJyb3IsICdlcnJvcicpXG4gICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgIHRoaXMubG9hZGluZyA9IGZhbHNlXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGFkZENvbnRlbnRUb1NjaGVkdWxlKGNvbnRlbnQpIHtcbiAgICAgICAgICAgIHRoaXMuY2xlYXJFcnJvcigpXG4gICAgICAgICAgICB0aGlzLnNjaGVkdWxlSXRlbXMucHVzaChjb250ZW50KVxuICAgICAgICAgICAgdGhpcy5zY2hlZHVsZUl0ZW1zID0gWy4uLnRoaXMuc2NoZWR1bGVJdGVtc10gLy8gVHJpZ2dlciByZWFjdGl2aXR5XG4gICAgICAgICAgICB0aGlzLnJlbW92ZUdhcChjb250ZW50LnN0YXJ0X2RhdGVUaW1lKSAvLyBSZW1vdmUgdGhlIGdhcCBhZnRlciBhZGRpbmcgY29udGVudFxuICAgICAgICAgICAgdGhpcy5pbnNlcnRHYXBzKCkgLy8gVXBkYXRlIGdhcHMgYWZ0ZXIgcmVtb3ZpbmcgYW5kIGFkZGluZyBjb250ZW50XG4gICAgICAgIH0sXG4gICAgICAgIHJlbW92ZUdhcChzdGFydERhdGVUaW1lKSB7XG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZygncmVtb3ZpbmcgZ2FwLi4uJylcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdzdGFydCBkYXRlVGltZTogJyArIHN0YXJ0RGF0ZVRpbWUpXG4gICAgICAgICAgICB0aGlzLnNjaGVkdWxlSXRlbXMgPSB0aGlzLnNjaGVkdWxlSXRlbXMuZmlsdGVyKGl0ZW0gPT4gIShpdGVtLnR5cGUgPT09ICdnYXAnICYmIGl0ZW0uc3RhcnRfZGF0ZVRpbWUgPT09IHN0YXJ0RGF0ZVRpbWUpKVxuICAgICAgICB9LFxuICAgICAgICByZXNldENvbnRlbnQoKSB7XG4gICAgICAgICAgICB0aGlzLmNvbnRlbnRJdGVtcyA9IFtdXG4gICAgICAgICAgICB0aGlzLmNvbnRlbnRGZXRjaGVkID0gZmFsc2VcbiAgICAgICAgICAgIHRoaXMuZXJyb3IgPSBudWxsXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRQYWdlID0gMVxuICAgICAgICAgICAgdGhpcy50b3RhbFBhZ2VzID0gMVxuICAgICAgICAgICAgdGhpcy5zZWFyY2hRdWVyeSA9ICcnXG4gICAgICAgIH0sXG4gICAgICAgIHNldFNlYXJjaFF1ZXJ5KHF1ZXJ5KSB7XG4gICAgICAgICAgICB0aGlzLnNlYXJjaFF1ZXJ5ID0gcXVlcnlcbiAgICAgICAgfSxcbiAgICAgICAgc2V0UGFnZShwYWdlKSB7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRQYWdlID0gcGFnZVxuICAgICAgICB9LFxuICAgIH0sXG5cbiAgICBnZXR0ZXJzOiB7XG4gICAgICAgIHN0YXJ0VGltZVVUQzogc3RhdGUgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGRheWpzKHN0YXRlLnN0YXJ0VGltZSkudXRjKCkuZm9ybWF0KCdZWVlZLU1NLUREVEhIOm1tOnNzW1pdJylcbiAgICAgICAgfSxcbiAgICAgICAgZW5kVGltZVVUQzogc3RhdGUgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGRheWpzKHN0YXRlLmVuZFRpbWUpLnV0YygpLmZvcm1hdCgnWVlZWS1NTS1ERFRISDptbTpzc1taXScpXG4gICAgICAgIH0sXG4gICAgICAgIHNjaGVkdWxlSXRlbXNXaXRoVXNlclRpbWV6b25lKHN0YXRlKSB7XG4gICAgICAgICAgICBjb25zdCB1c2VyU3RvcmUgPSB1c2VVc2VyU3RvcmUoKVxuICAgICAgICAgICAgY29uc3QgaXRlbXMgPSBzdGF0ZS5zY2hlZHVsZUl0ZW1zLm1hcChpdGVtID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAuLi5pdGVtLFxuICAgICAgICAgICAgICAgICAgICBzdGFydF9kYXRlVGltZTogZGF5anMoaXRlbS5zdGFydF9kYXRlVGltZSkudHoodXNlclN0b3JlLnRpbWV6b25lKS5mb3JtYXQoJ1lZWVktTU0tRERUSEg6bW06c3NaJyksXG4gICAgICAgICAgICAgICAgICAgIGVuZF9kYXRlVGltZTogZGF5anMoaXRlbS5lbmRfZGF0ZVRpbWUpLnR6KHVzZXJTdG9yZS50aW1lem9uZSkuZm9ybWF0KCdZWVlZLU1NLUREVEhIOm1tOnNzWicpLFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBpdGVtcy5zb3J0KChhLCBiKSA9PiBkYXlqcyhhLnN0YXJ0X2RhdGVUaW1lKS5pc0JlZm9yZShkYXlqcyhiLnN0YXJ0X2RhdGVUaW1lKSkgPyAtMSA6IDEpXG4gICAgICAgICAgICByZXR1cm4gaXRlbXNcbiAgICAgICAgfSxcbiAgICAgICAgaGFzUmVtb3ZlZEl0ZW1zKHN0YXRlKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RhdGUuc2NoZWR1bGVJdGVtcy5zb21lKGl0ZW0gPT4gaXRlbS5yZW1vdmVkKVxuICAgICAgICB9LFxuICAgICAgICBjb25mbGljdENvdW50KHN0YXRlKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RhdGUuc2NoZWR1bGVJdGVtcy5maWx0ZXIoaXRlbSA9PiBpdGVtLmNvbmZsaWN0ICYmICFpdGVtLnJlbW92ZWQpLmxlbmd0aFxuICAgICAgICB9LFxuICAgICAgICBnYXBDb3VudChzdGF0ZSkge1xuICAgICAgICAgICAgY29uc3QgaXRlbXMgPSBzdGF0ZS5zY2hlZHVsZUl0ZW1zXG4gICAgICAgICAgICAgICAgLmZpbHRlcihpdGVtID0+ICFpdGVtLnJlbW92ZWQgJiYgaXRlbS50eXBlICE9PSAnZ2FwJylcbiAgICAgICAgICAgICAgICAubWFwKGl0ZW0gPT4gKHtcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IGRheWpzKGl0ZW0uc3RhcnRfZGF0ZVRpbWUpLFxuICAgICAgICAgICAgICAgICAgICBlbmQ6IGRheWpzKGl0ZW0uZW5kX2RhdGVUaW1lKSxcbiAgICAgICAgICAgICAgICAgICAgY29uZmxpY3Q6IGl0ZW0uY29uZmxpY3QsXG4gICAgICAgICAgICAgICAgfSkpXG5cbiAgICAgICAgICAgIGxldCBnYXBzID0gMFxuXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnQ2FsY3VsYXRpbmcgZ2Fwcy4uLicpO1xuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ1N0YXJ0IFRpbWUgVVRDOicsIHN0YXRlLnN0YXJ0VGltZVVUQyk7XG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnRW5kIFRpbWUgVVRDOicsIHN0YXRlLmVuZFRpbWVVVEMpO1xuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ0l0ZW1zOicsIGl0ZW1zKTtcblxuICAgICAgICAgICAgLy8gSWYgdGhlcmUgYXJlIG5vIGl0ZW1zLCB0aGUgZW50aXJlIHBlcmlvZCBpcyBhIHNpbmdsZSBnYXBcbiAgICAgICAgICAgIGlmIChpdGVtcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnTm8gc2NoZWR1bGVkIGl0ZW1zLCBlbnRpcmUgcGVyaW9kIGlzIGEgZ2FwLicpO1xuICAgICAgICAgICAgICAgIHJldHVybiAxXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIENoZWNrIGZvciBnYXAgYmVmb3JlIHRoZSBmaXJzdCBpdGVtXG4gICAgICAgICAgICBpZiAoZGF5anMudXRjKHN0YXRlLnN0YXJ0VGltZVVUQykuaXNCZWZvcmUoaXRlbXNbMF0uc3RhcnQpKSB7XG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ0dhcCBiZWZvcmUgdGhlIGZpcnN0IGl0ZW0nKTtcbiAgICAgICAgICAgICAgICBnYXBzKytcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ05vIGdhcCBiZWZvcmUgdGhlIGZpcnN0IGl0ZW0nKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQ2hlY2sgZm9yIGdhcHMgYmV0d2VlbiBhZGphY2VudCBpdGVtc1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpdGVtcy5sZW5ndGggLSAxOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50SXRlbSA9IGl0ZW1zW2ldXG4gICAgICAgICAgICAgICAgY29uc3QgbmV4dEl0ZW0gPSBpdGVtc1tpICsgMV1cblxuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGBDdXJyZW50IEl0ZW06ICR7Y3VycmVudEl0ZW0uc3RhcnQudG9JU09TdHJpbmcoKX0sIEVuZDogJHtjdXJyZW50SXRlbS5lbmQudG9JU09TdHJpbmcoKX1gKTtcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhgTmV4dCBJdGVtOiAke25leHRJdGVtLnN0YXJ0LnRvSVNPU3RyaW5nKCl9LCBTdGFydDogJHtuZXh0SXRlbS5lbmQudG9JU09TdHJpbmcoKX1gKTtcblxuICAgICAgICAgICAgICAgIC8vIE9ubHkgY29uc2lkZXIgZ2FwcyBpZiB0aGVyZSBhcmUgbm8gY29uZmxpY3RzXG4gICAgICAgICAgICAgICAgaWYgKCFjdXJyZW50SXRlbS5jb25mbGljdCAmJiAhbmV4dEl0ZW0uY29uZmxpY3QgJiYgY3VycmVudEl0ZW0uZW5kLmlzQmVmb3JlKG5leHRJdGVtLnN0YXJ0KSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnR2FwIGJldHdlZW4gaXRlbXMnKTtcbiAgICAgICAgICAgICAgICAgICAgZ2FwcysrXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ05vIGdhcCBiZXR3ZWVuIHRoZXNlIGl0ZW1zJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBDaGVjayBmb3IgZ2FwIGFmdGVyIHRoZSBsYXN0IGl0ZW1cbiAgICAgICAgICAgIGlmIChkYXlqcy51dGMoc3RhdGUuZW5kVGltZVVUQykuaXNBZnRlcihpdGVtc1tpdGVtcy5sZW5ndGggLSAxXS5lbmQpKSB7XG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ0dhcCBhZnRlciB0aGUgbGFzdCBpdGVtJyk7XG4gICAgICAgICAgICAgICAgZ2FwcysrXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdObyBnYXAgYWZ0ZXIgdGhlIGxhc3QgaXRlbScpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnVG90YWwgZ2FwczonLCBnYXBzKTtcbiAgICAgICAgICAgIHJldHVybiBnYXBzXG4gICAgICAgIH0sXG5cblxuICAgIH0sXG59KVxuIl0sIm5hbWVzIjpbIl9yZWdlbmVyYXRvclJ1bnRpbWUiLCJlIiwidCIsInIiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJuIiwiaGFzT3duUHJvcGVydHkiLCJvIiwiZGVmaW5lUHJvcGVydHkiLCJ2YWx1ZSIsImkiLCJTeW1ib2wiLCJhIiwiaXRlcmF0b3IiLCJjIiwiYXN5bmNJdGVyYXRvciIsInUiLCJ0b1N0cmluZ1RhZyIsImRlZmluZSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIndyYXAiLCJHZW5lcmF0b3IiLCJjcmVhdGUiLCJDb250ZXh0IiwibWFrZUludm9rZU1ldGhvZCIsInRyeUNhdGNoIiwidHlwZSIsImFyZyIsImNhbGwiLCJoIiwibCIsImYiLCJzIiwieSIsIkdlbmVyYXRvckZ1bmN0aW9uIiwiR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUiLCJwIiwiZCIsImdldFByb3RvdHlwZU9mIiwidiIsInZhbHVlcyIsImciLCJkZWZpbmVJdGVyYXRvck1ldGhvZHMiLCJmb3JFYWNoIiwiX2ludm9rZSIsIkFzeW5jSXRlcmF0b3IiLCJpbnZva2UiLCJfdHlwZW9mIiwicmVzb2x2ZSIsIl9fYXdhaXQiLCJ0aGVuIiwiY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmciLCJFcnJvciIsImRvbmUiLCJtZXRob2QiLCJkZWxlZ2F0ZSIsIm1heWJlSW52b2tlRGVsZWdhdGUiLCJzZW50IiwiX3NlbnQiLCJkaXNwYXRjaEV4Y2VwdGlvbiIsImFicnVwdCIsIlR5cGVFcnJvciIsInJlc3VsdE5hbWUiLCJuZXh0IiwibmV4dExvYyIsInB1c2hUcnlFbnRyeSIsInRyeUxvYyIsImNhdGNoTG9jIiwiZmluYWxseUxvYyIsImFmdGVyTG9jIiwidHJ5RW50cmllcyIsInB1c2giLCJyZXNldFRyeUVudHJ5IiwiY29tcGxldGlvbiIsInJlc2V0IiwiaXNOYU4iLCJsZW5ndGgiLCJkaXNwbGF5TmFtZSIsImlzR2VuZXJhdG9yRnVuY3Rpb24iLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJtYXJrIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJhd3JhcCIsImFzeW5jIiwiUHJvbWlzZSIsImtleXMiLCJyZXZlcnNlIiwicG9wIiwicHJldiIsImNoYXJBdCIsInNsaWNlIiwic3RvcCIsInJ2YWwiLCJoYW5kbGUiLCJjb21wbGV0ZSIsImZpbmlzaCIsIl9jYXRjaCIsImRlbGVnYXRlWWllbGQiLCJhc3luY0dlbmVyYXRvclN0ZXAiLCJfYXN5bmNUb0dlbmVyYXRvciIsImFyZ3VtZW50cyIsImFwcGx5IiwiX25leHQiLCJfdGhyb3ciLCJkZWZpbmVTdG9yZSIsImRheWpzIiwidGltZXpvbmUiLCJ1dGMiLCJpc1NhbWVPckJlZm9yZSIsImlzU2FtZU9yQWZ0ZXIiLCJ1c2VOb3RpZmljYXRpb25TdG9yZSIsInVzZVVzZXJTdG9yZSIsInVzZUFkbWluU3RvcmUiLCJyb3V0ZXIiLCJleHRlbmQiLCJpbml0aWFsU3RhdGUiLCJwbGF5bGlzdHMiLCJzZWxlY3RlZFBsYXlsaXN0Iiwic2NoZWR1bGVJdGVtcyIsImdhcHMiLCJzdGFydFRpbWUiLCJmb3JtYXQiLCJlbmRUaW1lIiwiYWRkIiwiY29udGVudEl0ZW1zIiwiY29udGVudEZldGNoZWQiLCJjdXJyZW50UGFnZSIsInRvdGFsUGFnZXMiLCJzZWFyY2hRdWVyeSIsInNob3dNb2RhbCIsImxvYWRpbmciLCJsb2FkaW5nU2NoZWR1bGVzIiwicHJvY2Vzc2luZyIsImVycm9yIiwiaWQiLCJkZXNjcmlwdGlvbiIsInVybCIsInByaW9yaXR5IiwicmVwZWF0X21vZGUiLCJuZXh0X3BsYXlsaXN0X2lkIiwidXNlQ2hhbm5lbFBsYXlsaXN0U3RvcmUiLCJzdGF0ZSIsImFjdGlvbnMiLCJhc3NpZ24iLCJvcGVuQWRkQ29udGVudE1vZGFsIiwiY2xvc2VBZGRDb250ZW50TW9kYWwiLCJmZXRjaFBsYXlsaXN0cyIsIl90aGlzIiwiX2NhbGxlZSIsInJlc3BvbnNlIiwiX3Jlc3BvbnNlJGRhdGEiLCJtZXNzYWdlIiwic3RhdHVzIiwibm90aWZpY2F0aW9uU3RvcmUiLCJfbm90aWZpY2F0aW9uU3RvcmUiLCJfY2FsbGVlJCIsIl9jb250ZXh0IiwiYXhpb3MiLCJnZXQiLCJkYXRhIiwic2V0VG9hc3ROb3RpZmljYXRpb24iLCJ0MCIsImNyZWF0ZVBsYXlsaXN0IiwicGxheWxpc3QiLCJfdGhpczIiLCJfY2FsbGVlMiIsIl9jYWxsZWUyJCIsIl9jb250ZXh0MiIsInZhbGlkYXRlU2NoZWR1bGVJdGVtcyIsInBvc3QiLCJfb2JqZWN0U3ByZWFkIiwiZ2V0VmFsaWRTY2hlZHVsZUl0ZW1zIiwic2hvd05vdGlmaWNhdGlvbiIsImhhbmRsZUVycm9yIiwidXBkYXRlUGxheWxpc3QiLCJfdGhpczMiLCJfY2FsbGVlMyIsImFkbWluU3RvcmUiLCJpbmRleCIsImFkbWluSW5kZXgiLCJfY2FsbGVlMyQiLCJfY29udGV4dDMiLCJjb25zb2xlIiwicHV0IiwiY29uY2F0IiwiZmluZEluZGV4IiwiaXRlbXMiLCJpdGVtIiwicGxheWxpc3RfaXRlbXMiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiY2xvc2UiLCJjbGVhckVycm9yIiwic29tZSIsImNvbmZsaWN0Iiwic2V0R2VuZXJhbFNlcnZpY2VOb3RpZmljYXRpb24iLCJmaWx0ZXIiLCJyZW1vdmVkIiwic29ydCIsImIiLCJzdGFydF9kYXRlVGltZSIsImlzQmVmb3JlIiwiZW5kX2RhdGVUaW1lIiwiZXJyb3JNZXNzYWdlIiwiZXJyb3JEZXRhaWxzIiwiZGV0YWlscyIsIkpTT04iLCJwYXJzZSIsImRldGFpbGVkRXJyb3JNZXNzYWdlcyIsIl9pIiwiX09iamVjdCRlbnRyaWVzIiwiZW50cmllcyIsIl9PYmplY3QkZW50cmllcyRfaSIsIl9zbGljZWRUb0FycmF5IiwiZmllbGQiLCJtZXNzYWdlcyIsIm1lc3NhZ2VUZXh0IiwiQXJyYXkiLCJpc0FycmF5Iiwiam9pbiIsInNldFBsYXlsaXN0RGF0YSIsImxvZyIsInVzZXJTdG9yZSIsInR6IiwidW5kZWZpbmVkIiwibWFwIiwibWFwcGVkSXRlbSIsImNvbnRlbnRfaWQiLCJjb250ZW50X3R5cGUiLCJvcmRlciIsIm1lZGlhX3R5cGUiLCJzb3VyY2VfcGF0aCIsInNvdXJjZV90eXBlIiwiaXNfbGl2ZSIsImlzX3NjaGVkdWxlZCIsImN1cnJlbnRfdmlld2Vyc19jb3VudCIsIm1heF92aWV3ZXJzX2NvdW50IiwiYWRkaXRpb25hbF9zb3VyY2VzIiwiY3VzdG9tX3BsYXliYWNrX29wdGlvbnMiLCJtZXRhZGF0YSIsImhhc19wbGF5ZWQiLCJkdXJhdGlvbl9taW51dGVzIiwiY29udGVudCIsImZldGNoU2NoZWR1bGVzIiwiX3RoaXM0IiwiX2NhbGxlZTQiLCJfdGhpczQkc2NoZWR1bGVJdGVtcyIsIl9yZXNwb25zZSRkYXRhMiIsIl9jYWxsZWU0JCIsIl9jb250ZXh0NCIsInBhcmFtcyIsInN0YXJ0VGltZVVUQyIsImVuZFRpbWVVVEMiLCJfdG9Db25zdW1hYmxlQXJyYXkiLCJ1cGRhdGVDb25mbGljdHMiLCJyZW1vdmVJdGVtIiwiZmluZCIsImFkZEl0ZW0iLCJyZW1vdmVBbGxJdGVtcyIsImNsZWFyUmVtb3ZlZEl0ZW1zIiwicmVjYWxjdWxhdGVJbmRleGVzIiwiY3VycmVudEl0ZW0iLCJqIiwibmV4dEl0ZW0iLCJpc0FmdGVyIiwic2VsZWN0UGxheWxpc3QiLCJyZW1vdmVQbGF5bGlzdCIsInBsYXlsaXN0SWQiLCJyb3V0ZSIsImNoYW5uZWxQbGF5bGlzdCIsInJlc29sdmVDb25mbGljdHMiLCJfdGhpczUiLCJjb25mbGljdHNSZXNvbHZlZCIsIl9sb29wIiwiX2xvb3AyIiwicHJldmlvdXNJdGVtIiwiY3VycmVudFN0YXJ0IiwicHJldmlvdXNFbmQiLCJwcmV2aW91c1N0YXJ0IiwiaXNTYW1lIiwiY3JlYXRlZF9hdCIsIl9yZXQyIiwiX3JldCIsImluc2VydEdhcHMiLCJzdGFydCIsImVuZCIsInRvSVNPU3RyaW5nIiwiZGlmZiIsImNoZWNrRm9yR2FwQmVmb3JlRmlyc3RJdGVtIiwiY2hlY2tGb3JHYXBzQmV0d2Vlbkl0ZW1zIiwiY2hlY2tGb3JHYXBBZnRlckxhc3RJdGVtIiwiZ2FwU3RhcnQiLCJnYXBFbmQiLCJnYXBEdXJhdGlvbiIsImxhc3RJdGVtRW5kIiwiZmV0Y2hDb250ZW50IiwiY29udGVudFR5cGUiLCJtYXhEdXJhdGlvbk1pbnV0ZXMiLCJzdGFydERhdGVUaW1lIiwiX2FyZ3VtZW50cyIsIl90aGlzNiIsIl9jYWxsZWU1IiwicGFnZSIsInNlYXJjaCIsInN0YXJ0RGF0ZVRpbWVVVEMiLCJfcmVzcG9uc2UkZGF0YTMiLCJfY2FsbGVlNSQiLCJfY29udGV4dDUiLCJndWVzcyIsImN1cnJlbnRfcGFnZSIsInRvdGFsX3BhZ2VzIiwiYWRkQ29udGVudFRvU2NoZWR1bGUiLCJyZW1vdmVHYXAiLCJyZXNldENvbnRlbnQiLCJzZXRTZWFyY2hRdWVyeSIsInF1ZXJ5Iiwic2V0UGFnZSIsImdldHRlcnMiLCJzY2hlZHVsZUl0ZW1zV2l0aFVzZXJUaW1lem9uZSIsImhhc1JlbW92ZWRJdGVtcyIsImNvbmZsaWN0Q291bnQiLCJnYXBDb3VudCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/js/Stores/ChannelPlaylistStore.js\n");

/***/ })

}]);