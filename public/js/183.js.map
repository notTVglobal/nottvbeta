{"version":3,"file":"js/183.js","mappings":"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","sources":["webpack:///./resources/js/Stores/TeamStore.js","webpack:///./resources/js/Utilities/PageSetup.js","webpack:///./resources/js/Components/Global/Buttons/CancelButton.vue?b7c6","webpack:///./resources/js/Components/Global/Buttons/CancelButton.vue","webpack:///./resources/js/Components/Global/Modals/Messages.vue?dfe9","webpack:///./resources/js/Components/Global/Modals/Messages.vue","webpack:///./resources/js/Components/Global/TextEditor/TabbableTextarea.vue?4db8","webpack:///./resources/js/Components/Global/TextEditor/TabbableTextarea.vue","webpack:///./resources/js/Components/Global/Uploaders/ImageUpload.vue?55d5","webpack:///./resources/js/Components/Global/Uploaders/ImageUpload.vue","webpack:///./resources/js/Jetstream/ValidationErrors.vue?5fdc","webpack:///./resources/js/Jetstream/ValidationErrors.vue","webpack:///./resources/js/Components/Pages/Shows/Edit/ShowEditHeader.vue?d7a1","webpack:///./resources/js/Components/Pages/Shows/Edit/ShowEditHeader.vue","webpack:///./resources/js/Pages/Shows/{$id}/Edit.vue?14a6","webpack:///./resources/js/Pages/Shows/{$id}/Edit.vue"],"sourcesContent":["import {defineStore} from \"pinia\";\nimport {Inertia} from \"@inertiajs/inertia\";\n\nconst initialState = () => ({\n    id: 0,\n    name: '',\n    description: '',\n    slug: '',\n    totalSpots: '',\n    memberSpots: '',\n    teamCreator: [],\n    teamLeader: [],\n    members: [],\n    managers: [],\n    activeShow: [],\n    activeEpisode: [],\n    creators: [],\n    showModal: Boolean,\n    confirmDialog: false,\n    confirmManagerDialog: false,\n    selectedManagerName: '',\n    selectedManagerId: 0,\n    addManager: false,\n    removeManager: false,\n    deleteMemberName: '',\n    deleteMemberId: 0,\n    noteEdit: 0,\n    note: '',\n    saveNoteProcessing: Boolean,\n    // on the show episode manage page\n    // turn on the go live div\n    goLiveDisplay: false,\n    can: [],\n    openComponent: 'teamShows',\n})\n\nexport const useTeamStore = defineStore('teamStore', {\n    state: initialState,\n    actions: {\n        reset() {\n            // Reset the store to its original state (clear all data)\n            Object.assign(this, initialState());\n        },\n        // async fill() {\n        //     let r = await import('@/Json/team.json');\n        //     this.$state = r.default;\n        // },\n        setActiveTeam(team) {\n            this.id = team.id;\n            this.name = team.name;\n            this.description = team.description;\n            this.slug = team.slug;\n            this.totalSpots = team.totalSpots;\n            this.memberSpots = team.memberSpots;\n        },\n        setActiveShow(show) {\n            this.activeShow = show;\n        },\n        setActiveEpisode(episode) {\n            this.activeShow = episode;\n        },\n        // getCreators() {\n        //     Inertia.reload({ only: ['creators'] })\n        // },\n        deleteTeamMemberCancel() {\n            this.confirmDialog = false;\n        },\n        confirmTeamManagerCancel() {\n            this.confirmManagerDialog = false;\n        },\n        // loadTeamMembers(members){\n        //     this.members = members;\n        // }\n        deleteTeamMember() {\n            Inertia.visit(route('teams.removeTeamMember'), {\n                method: 'post',\n                data: {\n                    user_id: this.deleteMemberId,\n                    team_id: this.id,\n                    team_slug: this.slug\n                },\n            })\n        },\n        addTeamManager() {\n            Inertia.visit(route('teams.addTeamManager'), {\n                method: 'post',\n                data: {\n                    user_id: this.selectedManagerId,\n                    team_id: this.id,\n                    team_slug: this.slug\n                },\n            })\n            this.confirmManagerDialog = false;\n        },\n        removeTeamManager() {\n            Inertia.visit(route('teams.removeTeamManager'), {\n                method: 'post',\n                data: {\n                    user_id: this.selectedManagerId,\n                    team_id: this.id,\n                    team_slug: this.slug\n                },\n            })\n            this.confirmManagerDialog = false;\n        },\n        toggleGoLiveDisplay() {\n            this.goLiveDisplay = ! this.goLiveDisplay;\n        }\n    },\n\n    getters: {\n        spotsRemaining() {\n            if (this.totalSpots - this.memberSpots < 1){\n                return 0\n            }\n            return this.totalSpots - this.memberSpots;\n        },\n    }\n});\n\n\n// Another option for declaring specific data to return:\n// let data = r.default;\n//\n// import('@/Json/team.json').then(r => {\n// this.$patch({\n//     name: data.name,\n//     spots: data.spots,\n//     members: data.members\n// });\n// });\n","import { onMounted } from 'vue'\nimport { useUserStore } from \"@/Stores/UserStore\"\nimport { useAppSettingStore } from \"@/Stores/AppSettingStore\"\nimport { useVideoPlayerStore } from \"@/Stores/VideoPlayerStore\"\nimport { Inertia } from \"@inertiajs/inertia\"\n\nexport function usePageSetup(pageName) {\n    const userStore = useUserStore()\n    const appSettingStore = useAppSettingStore()\n    const videoPlayerStore = useVideoPlayerStore()\n\n    appSettingStore.currentPage = pageName\n    appSettingStore.showFlashMessage = true\n    appSettingStore.pageIsHidden = false\n\n    if (userStore.isMobile) {\n        appSettingStore.ott = 0\n    }\n\n    videoPlayerStore.makeVideoTopRight()\n\n    onMounted(() => {\n        // Check if the URL contains query strings\n        const hasQueryStrings = window.location.search !== '';\n\n        // Only scroll into view if there are no query strings\n        if (!hasQueryStrings) {\n            const topDiv = document.getElementById(\"topDiv\")\n            if (topDiv) {\n                topDiv.scrollIntoView()\n            }\n        }\n        // Only update if we're not already on this page to avoid overwriting with the current URL\n        appSettingStore.setPrevUrl()\n        Inertia.reload()\n\n    });\n}\n","import script from \"./CancelButton.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./CancelButton.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n  <div>\n    <button\n        @click.prevent=\"cancel\"\n        class=\"ml-2 px-4 py-2 text-white bg-orange-600 hover:bg-orange-500 rounded-lg\"\n    >Cancel\n    </button>\n  </div>\n</template>\n\n<script setup>\nimport { Inertia } from \"@inertiajs/inertia\"\nimport { useAppSettingStore } from \"@/Stores/AppSettingStore\"\nimport { useUserStore } from '@/Stores/UserStore'\n\nconst appSettingStore = useAppSettingStore()\nconst userStore = useUserStore()\n\nfunction cancel() {\n  if (appSettingStore.prevUrl) {\n    Inertia.visit(appSettingStore.prevUrl)\n  } else {\n    // Fallback if prevUrl is not available\n    let prevUrl = userStore.isCreator ? '/dashboard' : '/';\n    Inertia.visit(prevUrl);\n  }\n}\n</script>\n","import script from \"./Messages.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Messages.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n  <div class=\"mx-4 my-4\">\n    <div class=\"alert alert-info mt-4\"\n         v-if=\"props.flash.message\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" class=\"stroke-current shrink-0 w-6 h-6\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n              d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"></path>\n      </svg>\n      <span>{{ props.flash.message }}</span>\n      <button class=\"text-xs ml-12\" @click=\"clearFlashMessage\"> Close</button>\n    </div>\n    <div class=\"alert alert-success mt-4 mx-3\"\n         v-if=\"props.flash.success\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"stroke-current shrink-0 h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n              d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"/>\n      </svg>\n      <span>{{ props.flash.success }}</span>\n      <button class=\"text-xs ml-12\" @click=\"clearFlashMessage\"> Close</button>\n    </div>\n    <div class=\"alert alert-warning mt-4 mx-3\"\n         v-if=\"props.flash.warning\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"stroke-current shrink-0 h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n              d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z\"/>\n      </svg>\n      <span>{{ props.flash.warning }}</span>\n      <button class=\"text-xs ml-12\" @click=\"clearFlashMessage\"> Close</button>\n    </div>\n    <div class=\"alert alert-error mt-4 mx-3\"\n         v-if=\"props.flash.error\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"stroke-current shrink-0 h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n              d=\"M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z\"/>\n      </svg>\n      <span>{{ props.flash.error }}</span>\n      <button class=\"text-xs ml-12\" @click=\"clearFlashMessage\"> Close</button>\n    </div>\n  </div>\n\n</template>\n\n<script setup>\nimport { Inertia } from \"@inertiajs/inertia\"\nimport { computed } from \"vue\"\nimport { useAppSettingStore } from \"@/Stores/AppSettingStore\"\n\nconst appSettingStore = useAppSettingStore()\n\nappSettingStore.showFlashMessage = true\n\nlet props = defineProps({\n  flash: Object,\n\n})\n\nconst messageType = computed(() => ({\n  'text-green-700 bg-green-100 dark:bg-green-200 dark:text-green-800': props.flash.success,\n  'text-blue-700 bg-blue-100 dark:bg-blue-200 dark:text-blue-800': props.flash.message,\n  'text-orange-700 bg-orange-100 dark:bg-orange-200 dark:text-orange-800': props.flash.warning,\n  'text-red-700 bg-red-100 dark:bg-red-200 dark:text-red-800': props.flash.error,\n}))\n\nconst clearFlashMessage = async () => {\n  await Inertia.post(route('flash.clear'));\n  Inertia.reload();\n};\n</script>\n","import script from \"./TabbableTextarea.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./TabbableTextarea.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n    <textarea\n        @keydown.tab.prevent=\"onTabPress\"\n        @keyup=\"emit('update:modelValue', $event.target.value)\"\n        v-text=\"modelValue\"/>\n</template>\n\n<script setup>\ndefineProps({\n  modelValue: String\n});\n\nlet emit = defineEmits(['update:modelValue']);\n\nfunction onTabPress(e) {\n  let textarea = e.target;\n\n  // get caret position/selection\n  let val = textarea.value,\n      start = textarea.selectionStart,\n      end = textarea.selectionEnd;\n\n  // set textarea value to: text before caret + tab + text after caret\n  textarea.value = val.substring(0, start) + \"\\t\" + val.substring(end);\n\n  // put caret at right position again\n  textarea.selectionStart = textarea.selectionEnd = start + 1;\n}\n\n</script>\n","import script from \"./ImageUpload.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./ImageUpload.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n  <div class=\"\">\n    <div class=\"max-full mx-auto mt-2 mb-6 bg-gray-200 p-6 text-black\">\n      <h2 class=\"text-xl font-semibold\">{{ name }}</h2>\n\n      <ul class=\"pb-4\">\n        <li>Max File Size: <span class=\"text-orange-400\">{{ maxSize }}</span></li>\n        <li>File Types accepted: <span class=\"text-orange-400\">{{ fileTypes }}</span></li>\n      </ul>\n      <file-pond\n          name=\"image\"\n          ref=\"pond\"\n          label-idle=\"Click to choose file, or drag here...\"\n          @init=\"filepondInitialized\"\n          :server=\"server\"\n          :accepted-file-types=\"fileTypes\"\n          @processfile=\"handleProcessedFile\"\n          :max-file-size=\"maxSize\"\n      />\n      <!--        <file-pond-->\n      <!--            ref=\"filePond\"-->\n      <!--            :files=\"files\"-->\n      <!--            :server=\"serverOptions\"-->\n      <!--            @init=\"handleFilePondInit\"-->\n      <!--            @beforeaddfile=\"handleBeforeAddFile\"-->\n      <!--            @processfile=\"handleProcessedFile\"-->\n      <!--        />-->\n    </div>\n  </div>\n\n</template>\n\n<script setup>\nimport { Inertia } from \"@inertiajs/inertia\"\nimport { computed, ref } from \"vue\"\nimport vueFilePond, { setOptions } from 'vue-filepond'\nimport FilePondPluginFileValidateType from \"filepond-plugin-file-validate-type\"\nimport FilePondPluginFileValidateSize from \"filepond-plugin-file-validate-size\"\nimport FilePondPluginImagePreview from \"filepond-plugin-image-preview\"\nimport FilePondPluginFileMetadata from \"filepond-plugin-file-metadata\"\nimport 'filepond/dist/filepond.min.css'\nimport 'filepond-plugin-image-preview/dist/filepond-plugin-image-preview.min.css'\n\nlet props = defineProps({\n  image: Object,\n  name: String,\n  metadataKey: String,\n  metadataValue: String,\n  server: String,\n  maxSize: String,\n  fileTypes: String,\n})\n\n\n// // Initialize FilePond with the File Metadata plugin\n// const filePondOptions = {\n//     allowMultiple: false,\n//     labelIdle: \"Drop files here or click to upload\",\n//     plugins: [FilePondPluginFileMetadata()],\n// };\n\n\n// Files array to store uploaded files\n// const files = ref([]);\n\nconst metadataKey = props.metadataKey\nconst metadataValue = props.metadataValue\nconst customMetadata = {\n  [metadataKey]: metadataValue\n};\n// customMetadata.value[props.metadataKey] = 'bar';\n// customMetadata.value[props.metadataKey] = props.metadataValue;\n// const customMetadata = ref({ [props.metadataKey]: props.metadataValue });\n// const customMetadata = computed(() => ({\n//     [props.metadataKey]: props.metadataValue,\n// }));\n\n// FilePond server options (you can customize this)\nconst serverOptions = {\n  process: (fieldName, file, metadata, load, error, progress, abort) => {\n    // Construct a FormData object to send the file and metadata to your Laravel server\n    const formData = new FormData();\n    formData.append('file', file, file.name); // Add the file\n    formData.append('metadata', JSON.stringify(customMetadata)); // Add the metadata as a JSON string\n\n    // Make an Axios POST request to your Laravel backend\n    axios.post(props.server, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data', // Set the appropriate content type\n      },\n      onUploadProgress: (event) => {\n        const progressPercentage = Math.round((event.loaded / event.total) * 100);\n        // Update the progress bar or display progress percentage if needed\n        progress(progressPercentage);\n      },\n    })\n        .then((response) => {\n          // Handle a successful upload\n          load(response.data.url); // Pass the file URL to the load() function\n        })\n        .catch((err) => {\n          // Handle upload error\n          console.error('Upload error:', err);\n          error('Error uploading the file'); // Pass an error message to the error() function\n        });\n  },\n};\n\n\n// Initialize FilePond\n// const handleFilePondInit = () => {\n//     // FilePond has been initialized\n//     console.log(\"FilePond is ready\");\n// };\n\n// Handle the beforeaddfile event\n// const handleBeforeAddFile = (file) => {\n//     // Add metadata to the file object\n//     file.setMetadata(\"key\", \"value\");\n//     // You can set multiple metadata fields as needed\n//     // file.setMetadata(\"anotherKey\", \"anotherValue\");\n// };\n\n\nconst FilePond = vueFilePond(\n    FilePondPluginFileValidateType,\n    FilePondPluginFileValidateSize,\n    FilePondPluginImagePreview,\n    FilePondPluginFileMetadata\n);\n\n// Handle the beforeaddfile event\n// const handleBeforeAddFile = (file) => {\n//     // Add metadata to the file object\n//     file.setMetadata(\"show_id\", \"1\");\n//     // You can set multiple metadata fields as needed\n//     // file.setMetadata(\"anotherKey\", \"anotherValue\");\n// };\n\n// FilePond.registerPlugin(FilePondPluginFileMetadata);\nFilePond.setOptions = ({\n  fileMetadataObject: {\n    show_id: '1',\n  },\n});\n\n\n// Initialize FilePond with the File Metadata plugin\n// const filePondOptions = {\n//     allowMultiple: true,\n//     labelIdle: \"Drop files here or click to upload\",\n//     plugins: [FilePondPluginFileMetadata()],\n// };\n\nfunction filepondInitialized() {\n  console.log(\"Filepond is ready!\");\n  // console.log('Filepond object:', FilePond);\n\n}\n\nconst emit = defineEmits(['reloadImage'])\n\nfunction handleProcessedFile(error, file) {\n  if (error) {\n    console.log(\"Filepond processed file\");\n    console.log(error);\n    console.log(file);\n    return;\n  }\n\n  emit('reloadImage')\n\n  // Inertia.reload({\n  //     only: ['image'],\n  // });\n}\n\n</script>\n","import script from \"./ValidationErrors.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./ValidationErrors.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<script setup>\nimport { computed } from 'vue';\nimport { usePage } from '@inertiajs/inertia-vue3';\n\nconst errors = computed(() => usePage().props.value.errors);\nconst hasErrors = computed(() => Object.keys(errors.value).length > 0);\n</script>\n\n<template>\n    <div v-if=\"hasErrors\">\n        <div class=\"font-medium text-red-600\">\n            Whoops! Something went wrong.\n        </div>\n\n        <ul class=\"mt-3 list-disc list-inside text-sm text-red-600\">\n            <li v-for=\"(error, key) in errors\" :key=\"key\">\n                {{ error }}\n            </li>\n        </ul>\n    </div>\n</template>\n","import script from \"./ShowEditHeader.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./ShowEditHeader.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n  <header>\n    <div class=\"flex justify-between pt-6 mb-6\">\n\n      <div>\n        <div class=\"font-bold mb-4 text-red-700\">EDIT SHOW</div>\n        <h1 class=\"text-3xl\">\n          <Link :href=\"`/shows/${show.slug}`\" class=\"text-red-700 font-bold uppercase\">{{ show.name }}</Link>\n        </h1>\n      </div>\n      <div class=\"flex flex-wrap-reverse justify-end gap-2\">\n        <div>\n          <button\n              type=\"submit\"\n              class=\"h-fit bg-blue-600 hover:bg-blue-500 text-white rounded-lg py-2 px-4\"\n              :disabled=\"form.processing\"\n              @click=\"emitSubmit\"\n          >\n            Save\n          </button>\n        </div>\n        <CancelButton/>\n      </div>\n\n    </div>\n  </header>\n\n  <div>\n    <div class=\"mb-6\"><span class=\"text-xs uppercase font-semibold\">Team: </span>\n      <button\n          @click=\"appSettingStore.btnRedirect(`/teams/${team.slug}`)\"\n          class=\"font-bold uppercase text-blue-700 dark:text-blue-300 hover:text-blue-500\">{{ team.name }}\n      </button>\n    </div>\n  </div>\n\n\n</template>\n\n<script setup>\nimport { useAppSettingStore } from \"@/Stores/AppSettingStore\"\nimport CancelButton from \"@/Components/Global/Buttons/CancelButton\"\n\nconst appSettingStore = useAppSettingStore()\n\ndefineProps({\n  show: Object,\n  team: Object,\n  form: Object,\n})\n\nconst emits = defineEmits(['submit']);\n\n// Emit the \"submit\" event when the button is clicked.\nconst emitSubmit = () => {\n  emits('submit');\n};\n\n</script>\n","import script from \"./Edit.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Edit.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n\n  <Head :title=\"`Edit Show: ${props.show.name}`\"/>\n\n  <div id=\"topDiv\" class=\"place-self-center flex flex-col gap-y-3\">\n    <div class=\"bg-white text-black dark:bg-gray-800 dark:text-gray-50 px-5 mb-10\">\n\n      <Message v-if=\"appSettingStore.showFlashMessage\" :flash=\"$page.props.flash\"/>\n\n      <ShowEditHeader :show=\"props.show\" :team=\"props.team\" :form=\"form\" @submit=\"submit\"/>\n\n      <div class=\"flex flex-col\">\n        <div class=\"-my-2 overflow-x-auto sm:-mx-6 lg:-mx-8\">\n          <div class=\"py-2 align-middle inline-block min-w-full sm:px-6 lg:px-8\">\n            <div class=\"shadow overflow-hidden border-b border-gray-200 sm:rounded-lg\">\n\n              <div v-if=\"form.errors.name\" v-text=\"form.errors.name\"\n                   class=\"bg-red-600 p-2 w-full text-white font-semibold mt-1 mb-6\"></div>\n              <div v-if=\"form.errors.description\" v-text=\"form.errors.description\"\n                   class=\"bg-red-600 p-2 w-full text-white font-semibold mt-1 mb-6\"></div>\n\n              <!-- Begin grid 2-col -->\n              <div class=\"grid grid-cols-1 sm:grid-cols-2 space-x-6 p-6\">\n\n                <!--Left Column-->\n                <div>\n                  <div class=\"flex space-y-3\">\n                    <div class=\"mb-6\">\n                      <SingleImage :image=\"props.image\" :key=\"props.image\"/>\n                    </div>\n                  </div>\n\n                  <div class=\"w-full\">\n\n                    <label class=\"block mb-2 uppercase font-bold text-xs text-light text-red-700\"\n                           for=\"name\"\n                    >\n                      Change Show Poster\n                    </label>\n\n                    <ImageUpload :image=\"props.image\"\n                                 :server=\"'/showsUploadPoster'\"\n                                 :name=\"'Upload Show Poster'\"\n                                 :metadataKey=\"'foo2'\"\n                                 :metadataValue=\"'bar2'\"\n                                 :maxSize=\"'30MB'\"\n                                 :fileTypes=\"'image/jpg, image/jpeg, image/png'\"\n                                 @reloadImage=\"reloadImage\"\n                    />\n\n                  </div>\n\n                </div>\n\n\n                <!--Right Column-->\n                <div>\n                  <!--                                    <ShowPosterUpload-->\n                  <!--                                        :team=\"props.show\"-->\n                  <!--                                        :images=\"props.images\"-->\n                  <!--                                    />-->\n                  <form @submit.prevent=\"submit\">\n\n                    <div class=\"mb-6\">\n                      <label class=\"block mb-2 uppercase font-bold text-xs text-light text-red-700\"\n                             for=\"name\"\n                      >\n                        Show Notes (only visible to team members)\n                      </label>\n\n                      <input v-model=\"form.notes\"\n                             class=\"border border-gray-400 p-2 w-full rounded-lg text-black\"\n                             type=\"text\"\n                             name=\"notes\"\n                             id=\"notes\"\n\n                      >\n                      <div v-if=\"form.errors.notes\" v-text=\"form.errors.notes\"\n                           class=\"text-xs text-red-600 mt-1\"></div>\n                    </div>\n\n                    <div class=\"mb-6\">\n                    </div>\n\n                    <div class=\"mb-6\">\n                      <label class=\"block mb-2 uppercase font-bold text-xs text-light text-red-700\"\n                             for=\"name\"\n                      >\n                        Show Name\n                      </label>\n\n                      <input v-model=\"form.name\"\n                             class=\"border border-gray-400 p-2 w-full rounded-lg text-black\"\n                             type=\"text\"\n                             name=\"name\"\n                             id=\"name\"\n                             required\n                      >\n                      <div v-if=\"form.errors.name\" v-text=\"form.errors.name\"\n                           class=\"text-xs text-red-600 mt-1\"></div>\n                    </div>\n\n                    <div class=\"mb-6\">\n                      <label class=\"block mb-2 uppercase font-bold text-xs text-light text-red-700\"\n                             for=\"category\"\n                      >\n                        Category\n                      </label>\n\n                      <select\n                          class=\"border border-gray-400 text-gray-800 p-2 w-full rounded-lg block my-2 uppercase font-bold text-xs \"\n                          v-model=\"form.category\" @change=\"chooseCategory($event)\"\n                      >\n\n                        <option v-for=\"category in props.categories\"\n                                :key=\"category.id\" :value=\"category.id\">{{ category.name }}\n                        </option>\n\n\n                      </select>\n                      <!--    This was for practice... the next step is to loop over the sub-categories that belongTo the category selected. -->\n                      <!--                                    <select>-->\n                      <!--                                        <option v-for=\"option in options\" :value=\"option.value\">{{option.text}}</option>-->\n                      <!--                                    </select>-->\n                      <div v-if=\"form.errors.category\" v-text=\"form.errors.category\"\n                           class=\"text-xs text-red-600 mt-1\"></div>\n\n                      <span class=\"dark:text-gray-50\">{{ showCategoryDescription }}</span>\n                    </div>\n\n\n                    <div class=\"mb-6\">\n                      <label class=\"block mb-1 text-gray-600 uppercase font-bold text-xs text-light text-gray-600\"\n                             for=\"sub_category\"\n                      >\n                        Sub-category\n                      </label>\n                      <div class=\"mb-2 text-sm text-orange-600\">Sub-categories are coming soon!</div>\n\n                      <select disabled\n                              class=\"border border-gray-400 text-gray-800 disabled:bg-gray-300 dark:disabled:bg-gray-600 disabled:cursor-not-allowed p-2 w-full rounded-lg block mb-2 uppercase font-bold text-xs\"\n                              v-model=\"form.sub_category\"\n                      >\n                        <option value=\"1\">Option</option>\n                      </select>\n                      <div v-if=\"form.errors.sub_category\" v-text=\"form.errors.sub_category\"\n                           class=\"text-xs text-red-600 mt-1\"></div>\n                    </div>\n\n                    <div class=\"mb-6\">\n                      <label class=\"block mb-2 uppercase font-bold text-xs text-light text-red-700\"\n                             for=\"description\"\n                      >\n                        Description\n                      </label>\n                      <TabbableTextarea v-model=\"form.description\"\n                                        class=\"border border-gray-400 p-2 w-full rounded-lg text-black\"\n                                        name=\"description\"\n                                        id=\"description\"\n                                        rows=\"10\" cols=\"30\"\n                                        required\n                      />\n                      <div v-if=\"form.errors.description\" v-text=\"form.errors.description\"\n                           class=\"text-xs text-red-600 mt-1\"></div>\n                    </div>\n\n                    <div class=\"mb-6\">\n                      <label class=\"block mb-2 uppercase font-bold text-xs text-light text-red-700\"\n                             for=\"name\"\n                      >\n                        Website URL\n                      </label>\n\n                      <input v-model=\"form.www_url\"\n                             class=\"border border-gray-400 p-2 w-full rounded-lg text-black\"\n                             type=\"text\"\n                             name=\"www_url\"\n                             id=\"www_url\"\n                      >\n                      <div v-if=\"form.errors.www_url\" v-text=\"form.errors.www_url\"\n                           class=\"text-xs text-red-600 mt-1\"></div>\n                    </div>\n\n                    <div class=\"mb-6\">\n                      <label class=\"block mb-2 uppercase font-bold text-xs text-light text-red-700\"\n                             for=\"name\"\n                      >\n                        Instagram Handle\n                      </label>\n\n                      <input v-model=\"form.instagram_name\"\n                             class=\"border border-gray-400 p-2 w-full rounded-lg text-black\"\n                             type=\"text\"\n                             name=\"instagram_name handle\"\n                             id=\"instagram_name\"\n                      >\n                      <div v-if=\"form.errors.instagram_name\" v-text=\"form.errors.instagram_name\"\n                           class=\"text-xs text-red-600 mt-1\"></div>\n                    </div>\n\n                    <div class=\"mb-6\">\n                      <label class=\"block mb-2 uppercase font-bold text-xs text-light text-red-700\"\n                             for=\"name\"\n                      >\n                        Telegram URL\n                      </label>\n\n                      <input v-model=\"form.telegram_url\"\n                             class=\"border border-gray-400 p-2 w-full rounded-lg text-black\"\n                             type=\"text\"\n                             name=\"telegram_url\"\n                             id=\"telegram_url\"\n                      >\n                      <div v-if=\"form.errors.telegram_url\" v-text=\"form.errors.telegram_url\"\n                           class=\"text-xs text-red-600 mt-1\"></div>\n                    </div>\n\n                    <div class=\"mb-6\">\n                      <label class=\"block mb-2 uppercase font-bold text-xs text-light text-red-700\"\n                             for=\"name\"\n                      >\n                        Twitter @\n                      </label>\n\n                      <input v-model=\"form.twitter_handle\"\n                             class=\"border border-gray-400 p-2 w-full rounded-lg text-black\"\n                             type=\"text\"\n                             name=\"twitter_handle\"\n                             id=\"twitter_handle\"\n                      >\n                      <div v-if=\"form.errors.twitter_handle\" v-text=\"form.errors.twitter_handle\"\n                           class=\"text-xs text-red-600 mt-1\"></div>\n                    </div>\n\n                    <div class=\"flex justify-end mb-6\">\n                      <JetValidationErrors class=\"mr-4\"/>\n                      <button\n                          type=\"submit\"\n                          class=\"h-fit bg-blue-600 hover:bg-blue-500 text-white rounded-lg py-2 px-4\"\n                          :disabled=\"form.processing\"\n                      >\n                        Save\n                      </button>\n                    </div>\n                  </form>\n\n                </div>\n                <!-- End Right Column -->\n              </div>\n              <!-- End grid 2-col -->\n\n\n            </div>\n          </div>\n        </div>\n      </div>\n\n\n    </div>\n  </div>\n\n</template>\n\n<script setup>\nimport { Inertia } from \"@inertiajs/inertia\"\nimport { useForm } from \"@inertiajs/inertia-vue3\"\nimport { usePageSetup } from '@/Utilities/PageSetup'\nimport { useAppSettingStore } from \"@/Stores/AppSettingStore\"\nimport { useTeamStore } from \"@/Stores/TeamStore\"\nimport JetValidationErrors from '@/Jetstream/ValidationErrors'\nimport TabbableTextarea from \"@/Components/Global/TextEditor/TabbableTextarea\"\nimport ShowEditHeader from \"@/Components/Pages/Shows/Edit/ShowEditHeader\"\nimport SingleImage from \"@/Components/Global/Multimedia/SingleImage\"\nimport Message from \"@/Components/Global/Modals/Messages\"\nimport ImageUpload from \"@/Components/Global/Uploaders/ImageUpload\"\n\nusePageSetup('shows/slug/edit')\n\nconst appSettingStore = useAppSettingStore()\nconst teamStore = useTeamStore()\n\nlet props = defineProps({\n  user: Object,\n  show: Object,\n  team: Object,\n  poster: String,\n  image: Object,\n  categories: Object,\n  subCategories: Object,\n  showCategory: Object,\n  message: String,\n});\n\nlet form = useForm({\n  name: props.show.name,\n  description: props.show.description,\n  category: props.show.show_category_id,\n  sub_category: props.show.show_category_sub_id,\n  www_url: props.show.www_url,\n  instagram_name: props.show.instagram_name,\n  telegram_url: props.show.telegram_url,\n  twitter_handle: props.show.twitter_handle,\n  notes: props.show.notes,\n});\n\nlet showCategoryDescription = props.showCategory.Description\n\nlet reloadImage = () => {\n  Inertia.reload({\n    only: ['image'],\n  });\n};\n\nlet submit = () => {\n  form.put(route('shows.update', props.show.slug))\n};\n\nteamStore.setActiveTeam(props.team)\nteamStore.setActiveShow(props.show)\n\n\nfunction chooseCategory(event) {\n  showCategoryDescription = props.categories[event.target.selectedIndex].description;\n}\n\n// let getCategory = ref(null);\n// onBeforeMount(async () => {\n//     getCategory.value = await props.show.category;\n// })\n\n\n</script>\n"],"names":["initialState","id","name","description","slug","totalSpots","memberSpots","teamCreator","teamLeader","members","managers","activeShow","activeEpisode","creators","showModal","Boolean","confirmDialog","confirmManagerDialog","selectedManagerName","selectedManagerId","addManager","removeManager","deleteMemberName","deleteMemberId","noteEdit","note","saveNoteProcessing","goLiveDisplay","can","openComponent","useTeamStore","defineStore","state","actions","reset","Object","assign","this","setActiveTeam","team","setActiveShow","show","setActiveEpisode","episode","deleteTeamMemberCancel","confirmTeamManagerCancel","deleteTeamMember","Inertia","visit","route","method","data","user_id","team_id","team_slug","addTeamManager","removeTeamManager","toggleGoLiveDisplay","getters","spotsRemaining","usePageSetup","pageName","userStore","useUserStore","appSettingStore","useAppSettingStore","videoPlayerStore","useVideoPlayerStore","currentPage","showFlashMessage","pageIsHidden","isMobile","ott","makeVideoTopRight","onMounted","window","location","search","topDiv","document","getElementById","scrollIntoView","setPrevUrl","reload","cancel","prevUrl","isCreator","props","__props","clearFlashMessage","computed","flash","success","message","warning","error","_ref","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","post","stop","apply","arguments","emit","onTabPress","e","textarea","target","val","value","start","selectionStart","end","selectionEnd","substring","FilePond","_defineProperty","metadataKey","metadataValue","vueFilePond","FilePondPluginFileValidateType","FilePondPluginFileValidateSize","FilePondPluginImagePreview","FilePondPluginFileMetadata","filepondInitialized","console","log","setOptions","fileMetadataObject","show_id","__emit","handleProcessedFile","file","errors","usePage","hasErrors","keys","length","emits","emitSubmit","teamStore","form","useForm","category","show_category_id","sub_category","show_category_sub_id","www_url","instagram_name","telegram_url","twitter_handle","notes","showCategoryDescription","showCategory","Description","reloadImage","only","submit","put","event","categories","selectedIndex"],"sourceRoot":""}