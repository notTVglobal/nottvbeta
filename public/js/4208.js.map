{"version":3,"file":"js/4208.js","mappings":"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","sources":["webpack:///./resources/js/Stores/TeamStore.js","webpack:///./resources/js/Components/Uploaders/VideoUpload.vue?ea56","webpack:///./resources/js/Components/Buttons/CancelButton.vue?0d53","webpack:///./resources/js/Components/Buttons/CancelButton.vue","webpack:///./resources/js/Components/Calendar/DateTimePickerSelect.vue?5178","webpack:///./resources/js/Components/Calendar/DateTimePickerSelect.vue","webpack:///./resources/js/Components/ShowEpisodes/Edit/ShowEpisodeEditHeader.vue","webpack:///./resources/js/Components/TabbableTextarea.vue?5ddb","webpack:///./resources/js/Components/TabbableTextarea.vue","webpack:///./resources/js/Components/Uploaders/ImageUpload.vue?2f2a","webpack:///./resources/js/Components/Uploaders/ImageUpload.vue","webpack:///./resources/js/Components/Uploaders/VideoUpload.vue","webpack:///./resources/js/Components/Uploaders/VideoUpload.vue?5942","webpack:///./resources/js/Components/Uploaders/VideoUpload.vue?3a09","webpack:///./resources/js/Jetstream/ValidationErrors.vue?5fdc","webpack:///./resources/js/Jetstream/ValidationErrors.vue","webpack:///./resources/js/Pages/Shows/{$id}/Episodes/{$id}/Edit.vue?6515","webpack:///./resources/js/Pages/Shows/{$id}/Episodes/{$id}/Edit.vue"],"sourcesContent":["import {defineStore} from \"pinia\";\nimport {Inertia} from \"@inertiajs/inertia\";\n\nexport const useTeamStore = defineStore('teamStore', {\n    state: () => ({\n        id: 0,\n        name: '',\n        description: '',\n        slug: '',\n        totalSpots: '',\n        memberSpots: '',\n        teamCreator: [],\n        teamLeader: [],\n        members: [],\n        managers: [],\n        activeShow: [],\n        activeEpisode: [],\n        creators: [],\n        showModal: Boolean,\n        confirmDialog: false,\n        confirmManagerDialog: false,\n        selectedManagerName: '',\n        selectedManagerId: 0,\n        addManager: false,\n        removeManager: false,\n        deleteMemberName: '',\n        deleteMemberId: 0,\n        noteEdit: 0,\n        note: '',\n        saveNoteProcessing: Boolean,\n            // on the show episode manage page\n            // turn on the go live div\n            goLiveDisplay: false,\n        can: [],\n    }),\n\n    actions: {\n        // async fill() {\n        //     let r = await import('@/Json/team.json');\n        //     this.$state = r.default;\n        // },\n        setActiveTeam(team) {\n            this.id = team.id;\n            this.name = team.name;\n            this.description = team.description;\n            this.slug = team.slug;\n            this.totalSpots = team.totalSpots;\n            this.memberSpots = team.memberSpots;\n        },\n        setActiveShow(show) {\n            this.activeShow = show;\n        },\n        setActiveEpisode(episode) {\n            this.activeShow = episode;\n        },\n        // getCreators() {\n        //     Inertia.reload({ only: ['creators'] })\n        // },\n        deleteTeamMemberCancel() {\n            this.confirmDialog = false;\n        },\n        confirmTeamManagerCancel() {\n            this.confirmManagerDialog = false;\n        },\n        // loadTeamMembers(members){\n        //     this.members = members;\n        // }\n        deleteTeamMember() {\n            Inertia.visit(route('teams.removeTeamMember'), {\n                method: 'post',\n                data: {\n                    user_id: this.deleteMemberId,\n                    team_id: this.id,\n                    team_slug: this.slug\n                },\n            })\n        },\n        addTeamManager() {\n            Inertia.visit(route('teams.addTeamManager'), {\n                method: 'post',\n                data: {\n                    user_id: this.selectedManagerId,\n                    team_id: this.id,\n                    team_slug: this.slug\n                },\n            })\n            this.confirmManagerDialog = false;\n        },\n        removeTeamManager() {\n            Inertia.visit(route('teams.removeTeamManager'), {\n                method: 'post',\n                data: {\n                    user_id: this.selectedManagerId,\n                    team_id: this.id,\n                    team_slug: this.slug\n                },\n            })\n            this.confirmManagerDialog = false;\n        },\n        toggleGoLiveDisplay() {\n            this.goLiveDisplay = ! this.goLiveDisplay;\n        }\n    },\n\n    getters: {\n        spotsRemaining() {\n            if (this.totalSpots - this.memberSpots < 1){\n                return 0\n            }\n            return this.totalSpots - this.memberSpots;\n        },\n    }\n});\n\n\n// Another option for declaring specific data to return:\n// let data = r.default;\n//\n// import('@/Json/team.json').then(r => {\n// this.$patch({\n//     name: data.name,\n//     spots: data.spots,\n//     members: data.members\n// });\n// });\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".dropzone[data-v-39899ada]{align-items:center;background-color:#fce4bb;border:2px dashed #000;display:flex;flex-direction:column;justify-content:center;row-gap:16px;transition:all .3s ease}label[data-v-39899ada]{padding:8px 12px;transition:all .3s ease}.active-dropzone[data-v-39899ada],label[data-v-39899ada]{background-color:#4bb1b1;color:#fff}.active-dropzone[data-v-39899ada]{border-color:#fff}.active-dropzone label[data-v-39899ada]{background-color:#fff;color:#4bb1b1}\", \"\",{\"version\":3,\"sources\":[\"webpack://./resources/js/Components/Uploaders/VideoUpload.vue\"],\"names\":[],\"mappings\":\"AAuIA,2BAII,kBAAmB,CAGnB,wBAAyB,CADzB,sBAA0B,CAL1B,YAAa,CACb,qBAAsB,CACtB,sBAAuB,CAEvB,YAAa,CAGb,uBACJ,CAEA,uBACI,gBAAiB,CAGjB,uBACJ,CAEA,yDAJI,wBAAyB,CADzB,UASJ,CAJA,kCAEI,iBAEJ,CAEA,wCACI,qBAAsB,CACtB,aACJ\",\"sourcesContent\":[\"<template>\\n    <div>\\n\\n        <progress v-show=\\\"userStore.uploadPercentage != 0\\\" max=\\\"100\\\" :value=\\\"userStore.uploadPercentage\\\" class=\\\"w-full\\\" />\\n        <div v-show=\\\"userStore.uploadPercentage != 0\\\" class=\\\"w-full mb-4\\\">{{userStore.uploadPercentageRounded}}%</div>\\n\\n        <div v-show=\\\"uploadingMessage\\\" class=\\\"mb-4 font-bold text-center\\\">Please stay on this screen until upload is complete.</div>\\n        <div v-show=\\\"uploadCompleteMessage\\\" class=\\\"mb-4 font-bold text-center\\\">Upload is complete. The video is now processing.</div>\\n        <form v-show=\\\"!isHidden\\\" id=\\\"videoUploadForm\\\" action=\\\"/videoupload\\\" class=\\\"dropzone dropzoneFile border border-black rounded w-full h-48 max-w-md px-2 py-2 mb-6\\\">\\n            <!--                            add input fields and a submit button to send data back to Laravel -->\\n            <input hidden name=\\\"movieId\\\" v-model=\\\"form.movieId\\\">\\n<!--            <input hidden name=\\\"movieTrailerId\\\" v-model=\\\"form.movieTrailerId\\\">-->\\n            <input hidden name=\\\"showEpisodeId\\\" v-model=\\\"form.showEpisodeId\\\">\\n        </form>\\n\\n    </div>\\n</template>\\n\\n<script setup>\\nimport { Dropzone } from \\\"dropzone\\\";\\nimport { useForm } from \\\"@inertiajs/inertia-vue3\\\"\\nimport { useUserStore } from \\\"@/Stores/UserStore\\\";\\nimport { onMounted, ref } from \\\"vue\\\";\\nimport { Inertia } from \\\"@inertiajs/inertia\\\";\\n\\nlet userStore = useUserStore()\\nlet uploadPercentage = ref(0);\\nlet uploadingMessage = ref(0);\\nlet uploadCompleteMessage = ref(0);\\nlet isHidden = ref(false);\\n\\nonMounted(() => {\\n    // Make sure the element with the ID \\\"videoUploadForm\\\" is available in the DOM.\\n    const videoUploadForm = document.getElementById('videoUploadForm');\\n\\n    if (videoUploadForm) {\\n        // Initialize Dropzone on the element.\\n\\n        // see options for Dropzone here: https://github.com/dropzone/dropzone/blob/main/src/options.js\\n        let myDropzone = new Dropzone(\\\"#videoUploadForm\\\", {\\n            url: \\\"/videoupload\\\",\\n            paramName: \\\"file\\\", // The name that will be used to transfer the file\\n            maxFilesize: '25 GB', // MB\\n            chunking: true,\\n            chunkSize: 2 * 1024 * 1024,\\n            parallelChunkUploads: false,\\n            retryChunks: true,\\n            retryChunksLimit: 10,\\n            capture: null,\\n            // can set the capture method as camera, microphone or video\\n            // for mobile devices to skip the file selection and choose the\\n            // recording device instead.\\n            acceptedFiles: 'video/*, audio/*',\\n            uploadprogress: function(file, progress, bytesSent) {\\n                userStore.uploadPercentage = progress;\\n                console.log(userStore.uploadPercentage);\\n                if(userStore.uploadPercentage !== 100){\\n                    isHidden = true;\\n                }\\n            },\\n            dictDefaultMessage: \\\"Click here or Drop video here to upload <br>(Max video file size is 25GB)\\\",\\n            forceFallback: false, // for testing, set to true.\\n            accept: function(file, done) {\\n                if (file.name === \\\"\\\") {\\n                    done(\\\"Need a file.\\\");\\n                } else if (file.size > 25000000000) {\\n                    console.log(file.size)\\n                    done(\\\"Video file too big.\\\");\\n                    alert('Video file must be smaller than 25GB');\\n                }\\n                else { done(); }\\n            }\\n        });\\n\\n        myDropzone.on(\\\"addedfile\\\", file => {\\n            uploadingMessage = 1;\\n            console.log(`File added: ${file.name}`);\\n\\n        });\\n\\n        myDropzone.on(\\\"complete\\\", function(file) {\\n            uploadingMessage = 0;\\n            uploadCompleteMessage = 1;\\n            myDropzone.removeFile(file);\\n            userStore.uploadPercentage = 0;\\n            isHidden = false;\\n            Inertia.reload({\\n                only: [\\\"videos\\\"],\\n            });\\n        });\\n\\n    } else {\\n        console.error('Element with ID \\\"videoUploadForm\\\" not found in the DOM.');\\n    }\\n})\\n\\nlet props = defineProps({\\n    movieId: Number,\\n    movieTrailerId: Number,\\n    showEpisodeId: Number,\\n})\\n\\nfunction setMovieOrEpisodeId() {\\n    if (props.movieId !== null) {\\n        userStore.uploadMovieId = props.mov;\\n    } else if (props.movieTrailerId !== null) {\\n        userStore.movieTrailerId = props.movieTrailerId;\\n    } else if (props.showEpisodeId !== null) {\\n        userStore.uploadShowEpisodeId = props.showEpisodeId;\\n    }\\n}\\n\\nsetMovieOrEpisodeId()\\n\\nlet form = useForm({\\n    file: [],\\n    // movieId: userStore.uploadMovieId,\\n    movieId: props.movieId,\\n    movieTrailerId: props.movieId,\\n    showEpisodeId: props.showEpisodeId,\\n});\\n\\n// let props = defineProps({\\n//     filters: Object,\\n//     can: Object,\\n//     videos: Object,\\n//     message: String,\\n//     errors: ref(''),\\n//     isHidden: ref(false),\\n//     done: ref(),\\n// });\\n\\n</script>\\n<style scoped>\\n\\n.dropzone {\\n    display: flex;\\n    flex-direction: column;\\n    justify-content: center;\\n    align-items: center;\\n    row-gap: 16px;\\n    border: 2px dashed #000000;\\n    background-color: #fce4bb;\\n    transition: 0.3s ease all;\\n}\\n\\nlabel {\\n    padding: 8px 12px;\\n    color: #fff;\\n    background-color: #4bb1b1;\\n    transition: 0.3s ease all;\\n}\\n\\n.active-dropzone {\\n    color: #fff;\\n    border-color: #fff;\\n    background-color: #4bb1b1;\\n}\\n\\n.active-dropzone  label {\\n    background-color: #fff;\\n    color: #4bb1b1;\\n}\\n/*6b7280*/\\n/*4bb1b1*/\\n\\n</style>\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","import script from \"./CancelButton.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./CancelButton.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n    <div>\n        <button\n            @click=\"cancel\"\n            class=\"ml-2 px-4 py-2 text-white bg-orange-600 hover:bg-orange-500 rounded-lg\"\n        >Cancel\n        </button>\n    </div>\n</template>\n\n<script setup>\nimport { Inertia } from \"@inertiajs/inertia\"\nimport { useUserStore } from \"@/Stores/UserStore\"\n\nlet userStore = useUserStore()\n\nfunction cancel() {\n    if (userStore.prevUrl) {\n        Inertia.visit(userStore.prevUrl)\n    }\n}\n</script>\n","import script from \"./DateTimePickerSelect.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./DateTimePickerSelect.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n    <div>\n<!--        &lt;!&ndash; Date Picker &ndash;&gt;-->\n<!--        <v-date-picker-->\n<!--            v-model=\"selectedDate\"-->\n<!--            is-inline-->\n<!--            :attributes=\"{-->\n<!--        placeholder: 'Select a Date',-->\n<!--      }\"-->\n<!--        />-->\n\n<!--        &lt;!&ndash; Time Picker &ndash;&gt;-->\n<!--        <v-time-picker-->\n<!--            v-model=\"selectedTime\"-->\n<!--            :step-minutes=\"15\"-->\n<!--            :format=\"12\"-->\n<!--            :min-time=\"'00:00:00'\"-->\n<!--            :max-time=\"'23:59:59'\"-->\n<!--            :attributes=\"{-->\n<!--        placeholder: 'Select a Time',-->\n<!--      }\"-->\n<!--        />-->\n\n\n<!--        <template>-->\n<!--            <Calendar />-->\n<!--&lt;!&ndash;            <DatePicker v-model=\"date\" />&ndash;&gt;-->\n<!--            <VDatePicker v-model=\"date\" mode=\"dateTime\" :popover=\"false\" hide-time-header>-->\n<!--                <template #default=\"{ togglePopover, inputValue, inputEvents }\">-->\n<!--                    <div-->\n<!--                        class=\"flex rounded-lg border border-gray-300 dark:border-gray-600 overflow-hidden\"-->\n<!--                    >-->\n<!--                        <button-->\n<!--                            class=\"flex justify-center items-center px-2 bg-accent-100 hover:bg-accent-200 text-accent-700 border-r border-gray-300 dark:bg-gray-700 dark:text-accent-300 dark:border-gray-600 dark:hover:bg-gray-600\"-->\n<!--                            @click=\"() => togglePopover()\"-->\n<!--                        >-->\n<!--                            <IconCalendar class=\"w-5 h-5\" />-->\n<!--                        </button>-->\n<!--                        <input-->\n<!--                            :value=\"inputValue\"-->\n<!--                            v-on=\"inputEvents\"-->\n<!--                            class=\"flex-grow px-2 py-1 bg-white dark:bg-gray-700\"-->\n<!--                        />-->\n<!--                    </div>-->\n<!--                </template>-->\n<!--            </VDatePicker>-->\n<!--        </template>-->\n\n            <DatePicker v-model=\"date\" mode=\"dateTime\" hide-time-header >\n                <template #default=\"{ togglePopover }\">\n                    <button\n                        class=\"px-3 py-2 bg-blue-500 text-sm text-white font-semibold rounded-md\"\n                        @click.prevent=\"togglePopover\"\n                    >\n                        <slot name=\"buttonName\">Select date</slot>\n                    </button>\n                </template>\n            </DatePicker>\n\n    </div>\n</template>\n\n<script setup>\nimport {ref, defineProps, defineEmits, watch} from 'vue';\nimport VDatePicker from 'v-calendar';\n// import VCalendar from 'v-calendar';\nimport { Calendar, DatePicker } from 'v-calendar';\nimport 'v-calendar/style.css';\n\nconst props = defineProps({\n    // initialDate: Date,\n    // initialTime: String,\n    inputValue: String,\n    date: String,\n});\n\nconst emits = defineEmits();\n\n// let date = new Date();\n// let date = ref(new Date());\nlet date = ref(props.date);\nconst calendar = ref(null);\nconst inputValue = ref(props.inputValue || null);\n\n// Define refs to store selected date and time\n// const selectedDate = ref(props.initialDate || null);\n// const selectedTime = ref(props.initialTime || null);\n\n\n\n// Watch for changes in selected dateTime emit it\nwatch([date], ([newDate]) => {\n    emits('date-time-selected', { date: newDate });\n});\n</script>\n","import script from \"./ShowEpisodeEditHeader.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./ShowEpisodeEditHeader.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","import script from \"./TabbableTextarea.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./TabbableTextarea.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n    <textarea\n        @keydown.tab.prevent=\"onTabPress\"\n        @keyup=\"emit('update:modelValue', $event.target.value)\"\n        v-text=\"modelValue\" />\n</template>\n\n<script setup>\ndefineProps ({\n    modelValue: String\n});\n\nlet emit = defineEmits(['update:modelValue']);\n\nfunction onTabPress(e) {\n    let textarea = e.target;\n\n    // get caret position/selection\n    let val = textarea.value,\n        start = textarea.selectionStart,\n        end = textarea.selectionEnd;\n\n    // set textarea value to: text before caret + tab + text after caret\n    textarea.value = val.substring(0, start) + \"\\t\" + val.substring(end);\n\n    // put caret at right position again\n    textarea.selectionStart = textarea.selectionEnd = start + 1;\n}\n\n</script>\n","import script from \"./ImageUpload.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./ImageUpload.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n<div class=\"\">\n    <div class=\"max-full mx-auto mt-2 mb-6 bg-gray-200 p-6 text-black\">\n        <h2 class=\"text-xl font-semibold\">{{ name }}</h2>\n\n        <ul class=\"pb-4\">\n            <li>Max File Size: <span class=\"text-orange-400\">{{ maxSize }}</span></li>\n            <li>File Types accepted: <span class=\"text-orange-400\">{{ fileTypes }}</span></li>\n        </ul>\n        <file-pond\n            name=\"image\"\n            ref=\"pond\"\n            label-idle=\"Click to choose file, or drag here...\"\n            @init=\"filepondInitialized\"\n            :server=\"server\"\n            :accepted-file-types=\"fileTypes\"\n            @processfile=\"handleProcessedFile\"\n            :max-file-size=\"maxSize\"\n        />\n<!--        <file-pond-->\n<!--            ref=\"filePond\"-->\n<!--            :files=\"files\"-->\n<!--            :server=\"serverOptions\"-->\n<!--            @init=\"handleFilePondInit\"-->\n<!--            @beforeaddfile=\"handleBeforeAddFile\"-->\n<!--            @processfile=\"handleProcessedFile\"-->\n<!--        />-->\n    </div>\n</div>\n\n</template>\n\n<script setup>\nimport vueFilePond, { setOptions } from 'vue-filepond'\nimport FilePondPluginFileValidateType from \"filepond-plugin-file-validate-type\"\nimport FilePondPluginFileValidateSize from \"filepond-plugin-file-validate-size\"\nimport FilePondPluginImagePreview from \"filepond-plugin-image-preview\"\nimport FilePondPluginFileMetadata from \"filepond-plugin-file-metadata\"\nimport 'filepond/dist/filepond.min.css'\nimport 'filepond-plugin-image-preview/dist/filepond-plugin-image-preview.min.css'\nimport {Inertia} from \"@inertiajs/inertia\";\nimport {computed, ref} from \"vue\";\n\nlet props = defineProps({\n    image: Object,\n    name: String,\n    metadataKey: String,\n    metadataValue: String,\n    server: String,\n    maxSize: String,\n    fileTypes: String,\n})\n\n\n// // Initialize FilePond with the File Metadata plugin\n// const filePondOptions = {\n//     allowMultiple: false,\n//     labelIdle: \"Drop files here or click to upload\",\n//     plugins: [FilePondPluginFileMetadata()],\n// };\n\n\n// Files array to store uploaded files\n// const files = ref([]);\n\nconst metadataKey = props.metadataKey\nconst metadataValue = props.metadataValue\nconst customMetadata = {\n    [metadataKey]: metadataValue\n};\n// customMetadata.value[props.metadataKey] = 'bar';\n// customMetadata.value[props.metadataKey] = props.metadataValue;\n// const customMetadata = ref({ [props.metadataKey]: props.metadataValue });\n// const customMetadata = computed(() => ({\n//     [props.metadataKey]: props.metadataValue,\n// }));\n\n// FilePond server options (you can customize this)\nconst serverOptions = {\n    process: (fieldName, file, metadata, load, error, progress, abort) => {\n        // Construct a FormData object to send the file and metadata to your Laravel server\n        const formData = new FormData();\n        formData.append('file', file, file.name); // Add the file\n        formData.append('metadata', JSON.stringify(customMetadata)); // Add the metadata as a JSON string\n\n        // Make an Axios POST request to your Laravel backend\n        axios.post(props.server, formData, {\n            headers: {\n                'Content-Type': 'multipart/form-data', // Set the appropriate content type\n            },\n            onUploadProgress: (event) => {\n                const progressPercentage = Math.round((event.loaded / event.total) * 100);\n                // Update the progress bar or display progress percentage if needed\n                progress(progressPercentage);\n            },\n        })\n            .then((response) => {\n                // Handle a successful upload\n                load(response.data.url); // Pass the file URL to the load() function\n            })\n            .catch((err) => {\n                // Handle upload error\n                console.error('Upload error:', err);\n                error('Error uploading the file'); // Pass an error message to the error() function\n            });\n    },\n};\n\n\n// Initialize FilePond\n// const handleFilePondInit = () => {\n//     // FilePond has been initialized\n//     console.log(\"FilePond is ready\");\n// };\n\n// Handle the beforeaddfile event\n// const handleBeforeAddFile = (file) => {\n//     // Add metadata to the file object\n//     file.setMetadata(\"key\", \"value\");\n//     // You can set multiple metadata fields as needed\n//     // file.setMetadata(\"anotherKey\", \"anotherValue\");\n// };\n\n\n\n\n\nconst FilePond = vueFilePond(\n    FilePondPluginFileValidateType,\n    FilePondPluginFileValidateSize,\n    FilePondPluginImagePreview,\n    FilePondPluginFileMetadata\n);\n\n// Handle the beforeaddfile event\n// const handleBeforeAddFile = (file) => {\n//     // Add metadata to the file object\n//     file.setMetadata(\"show_id\", \"1\");\n//     // You can set multiple metadata fields as needed\n//     // file.setMetadata(\"anotherKey\", \"anotherValue\");\n// };\n\n// FilePond.registerPlugin(FilePondPluginFileMetadata);\nFilePond.setOptions = ({\n    fileMetadataObject: {\n        show_id: '1',\n    },\n});\n\n\n// Initialize FilePond with the File Metadata plugin\n// const filePondOptions = {\n//     allowMultiple: true,\n//     labelIdle: \"Drop files here or click to upload\",\n//     plugins: [FilePondPluginFileMetadata()],\n// };\n\nfunction filepondInitialized() {\n    console.log(\"Filepond is ready!\");\n    // console.log('Filepond object:', FilePond);\n\n}\nconst emit = defineEmits(['reloadImage'])\n\nfunction handleProcessedFile(error, file) {\n    if (error) {\n        console.log(\"Filepond processed file\");\n        console.log(error);\n        console.log(file);\n        return;\n    }\n\n    emit('reloadImage')\n\n    // Inertia.reload({\n    //     only: ['image'],\n    // });\n}\n\n</script>\n","<template>\n    <div>\n\n        <progress v-show=\"userStore.uploadPercentage != 0\" max=\"100\" :value=\"userStore.uploadPercentage\" class=\"w-full\" />\n        <div v-show=\"userStore.uploadPercentage != 0\" class=\"w-full mb-4\">{{userStore.uploadPercentageRounded}}%</div>\n\n        <div v-show=\"uploadingMessage\" class=\"mb-4 font-bold text-center\">Please stay on this screen until upload is complete.</div>\n        <div v-show=\"uploadCompleteMessage\" class=\"mb-4 font-bold text-center\">Upload is complete. The video is now processing.</div>\n        <form v-show=\"!isHidden\" id=\"videoUploadForm\" action=\"/videoupload\" class=\"dropzone dropzoneFile border border-black rounded w-full h-48 max-w-md px-2 py-2 mb-6\">\n            <!--                            add input fields and a submit button to send data back to Laravel -->\n            <input hidden name=\"movieId\" v-model=\"form.movieId\">\n<!--            <input hidden name=\"movieTrailerId\" v-model=\"form.movieTrailerId\">-->\n            <input hidden name=\"showEpisodeId\" v-model=\"form.showEpisodeId\">\n        </form>\n\n    </div>\n</template>\n\n<script setup>\nimport { Dropzone } from \"dropzone\";\nimport { useForm } from \"@inertiajs/inertia-vue3\"\nimport { useUserStore } from \"@/Stores/UserStore\";\nimport { onMounted, ref } from \"vue\";\nimport { Inertia } from \"@inertiajs/inertia\";\n\nlet userStore = useUserStore()\nlet uploadPercentage = ref(0);\nlet uploadingMessage = ref(0);\nlet uploadCompleteMessage = ref(0);\nlet isHidden = ref(false);\n\nonMounted(() => {\n    // Make sure the element with the ID \"videoUploadForm\" is available in the DOM.\n    const videoUploadForm = document.getElementById('videoUploadForm');\n\n    if (videoUploadForm) {\n        // Initialize Dropzone on the element.\n\n        // see options for Dropzone here: https://github.com/dropzone/dropzone/blob/main/src/options.js\n        let myDropzone = new Dropzone(\"#videoUploadForm\", {\n            url: \"/videoupload\",\n            paramName: \"file\", // The name that will be used to transfer the file\n            maxFilesize: '25 GB', // MB\n            chunking: true,\n            chunkSize: 2 * 1024 * 1024,\n            parallelChunkUploads: false,\n            retryChunks: true,\n            retryChunksLimit: 10,\n            capture: null,\n            // can set the capture method as camera, microphone or video\n            // for mobile devices to skip the file selection and choose the\n            // recording device instead.\n            acceptedFiles: 'video/*, audio/*',\n            uploadprogress: function(file, progress, bytesSent) {\n                userStore.uploadPercentage = progress;\n                console.log(userStore.uploadPercentage);\n                if(userStore.uploadPercentage !== 100){\n                    isHidden = true;\n                }\n            },\n            dictDefaultMessage: \"Click here or Drop video here to upload <br>(Max video file size is 25GB)\",\n            forceFallback: false, // for testing, set to true.\n            accept: function(file, done) {\n                if (file.name === \"\") {\n                    done(\"Need a file.\");\n                } else if (file.size > 25000000000) {\n                    console.log(file.size)\n                    done(\"Video file too big.\");\n                    alert('Video file must be smaller than 25GB');\n                }\n                else { done(); }\n            }\n        });\n\n        myDropzone.on(\"addedfile\", file => {\n            uploadingMessage = 1;\n            console.log(`File added: ${file.name}`);\n\n        });\n\n        myDropzone.on(\"complete\", function(file) {\n            uploadingMessage = 0;\n            uploadCompleteMessage = 1;\n            myDropzone.removeFile(file);\n            userStore.uploadPercentage = 0;\n            isHidden = false;\n            Inertia.reload({\n                only: [\"videos\"],\n            });\n        });\n\n    } else {\n        console.error('Element with ID \"videoUploadForm\" not found in the DOM.');\n    }\n})\n\nlet props = defineProps({\n    movieId: Number,\n    movieTrailerId: Number,\n    showEpisodeId: Number,\n})\n\nfunction setMovieOrEpisodeId() {\n    if (props.movieId !== null) {\n        userStore.uploadMovieId = props.mov;\n    } else if (props.movieTrailerId !== null) {\n        userStore.movieTrailerId = props.movieTrailerId;\n    } else if (props.showEpisodeId !== null) {\n        userStore.uploadShowEpisodeId = props.showEpisodeId;\n    }\n}\n\nsetMovieOrEpisodeId()\n\nlet form = useForm({\n    file: [],\n    // movieId: userStore.uploadMovieId,\n    movieId: props.movieId,\n    movieTrailerId: props.movieId,\n    showEpisodeId: props.showEpisodeId,\n});\n\n// let props = defineProps({\n//     filters: Object,\n//     can: Object,\n//     videos: Object,\n//     message: String,\n//     errors: ref(''),\n//     isHidden: ref(false),\n//     done: ref(),\n// });\n\n</script>\n<style scoped>\n\n.dropzone {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    row-gap: 16px;\n    border: 2px dashed #000000;\n    background-color: #fce4bb;\n    transition: 0.3s ease all;\n}\n\nlabel {\n    padding: 8px 12px;\n    color: #fff;\n    background-color: #4bb1b1;\n    transition: 0.3s ease all;\n}\n\n.active-dropzone {\n    color: #fff;\n    border-color: #fff;\n    background-color: #4bb1b1;\n}\n\n.active-dropzone  label {\n    background-color: #fff;\n    color: #4bb1b1;\n}\n/*6b7280*/\n/*4bb1b1*/\n\n</style>\n","import api from \"!../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../../node_modules/css-loader/dist/cjs.js??clonedRuleSet-9.use[1]!../../../../node_modules/vue-loader/dist/stylePostLoader.js!../../../../node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-9.use[2]!../../../../node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./VideoUpload.vue?vue&type=style&index=0&id=39899ada&scoped=true&lang=css\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","import script from \"./VideoUpload.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./VideoUpload.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./VideoUpload.vue?vue&type=style&index=0&id=39899ada&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-39899ada\"]])\n\nexport default __exports__","import script from \"./ValidationErrors.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./ValidationErrors.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<script setup>\nimport { computed } from 'vue';\nimport { usePage } from '@inertiajs/inertia-vue3';\n\nconst errors = computed(() => usePage().props.value.errors);\nconst hasErrors = computed(() => Object.keys(errors.value).length > 0);\n</script>\n\n<template>\n    <div v-if=\"hasErrors\">\n        <div class=\"font-medium text-red-600\">\n            Whoops! Something went wrong.\n        </div>\n\n        <ul class=\"mt-3 list-disc list-inside text-sm text-red-600\">\n            <li v-for=\"(error, key) in errors\" :key=\"key\">\n                {{ error }}\n            </li>\n        </ul>\n    </div>\n</template>\n","import script from \"./Edit.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Edit.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n\n    <Head :title=\"`Edit Episode: ${props.episode.name}`\"/>\n\n    <div id=\"topDiv\" class=\"place-self-center flex flex-col gap-y-3\">\n        <div class=\"bg-white dark:bg-gray-800 text-black light:text-black dark:text-white px-5 mb-10\">\n\n            <Message v-if=\"userStore.showFlashMessage\" :flash=\"$page.props.flash\"/>\n            <div class=\"alert alert-error mt-4 mx-3\"\n                 v-if=\"showStore.errorMessage\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"stroke-current shrink-0 h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z\" /></svg>\n                <span>{{ showStore.errorMessage }}</span>\n                <button class=\"text-xs ml-12\" @click=\"showStore.errorMessage = ''\"> Close</button>\n            </div>\n\n            <header>\n                <ShowEpisodeEditHeader :show=\"props.show\" :team=\"props.team\" :episode=\"props.episode\"/>\n            </header>\n\n            <div class=\"flex flex-col\">\n                <div class=\"-my-2 overflow-x-none\">\n                    <div class=\"py-2 align-middle inline-block min-w-full sm:px-6 lg:px-8\">\n                        <div class=\"shadow overflow-hidden border-b border-gray-200 sm:rounded-lg\">\n\n                            <div v-if=\"form.errors.name\" v-text=\"form.errors.name\"\n                                 class=\"bg-red-600 p-2 w-full text-white font-semibold mt-1\"></div>\n                            <div v-if=\"form.errors.description\" v-text=\"form.errors.description\"\n                                 class=\"bg-red-600 p-2 w-full text-white font-semibold mt-1\"></div>\n                            <div v-if=\"form.errors.episode_number\" v-text=\"form.errors.episode_number\"\n                                 class=\"bg-red-600 p-2 w-full text-white font-semibold mt-1\"></div>\n                            <div v-if=\"form.errors.notes\" v-text=\"form.errors.notes\"\n                                 class=\"bg-red-600 p-2 w-full text-white font-semibold mt-1\"></div>\n                            <div v-if=\"form.errors.video_file_url\" v-text=\"form.errors.video_file_url\"\n                                 class=\"bg-red-600 p-2 w-full text-white font-semibold mt-1\"></div>\n<!--                            <div v-if=\"form.errors.youtube_url\" v-text=\"form.errors.youtube_url\"-->\n<!--                                 class=\"bg-red-600 p-2 w-full text-white font-semibold mt-1\"></div>-->\n                            <div v-if=\"form.errors.video_embed_code\" v-text=\"form.errors.video_embed_code\"\n                                 class=\"bg-red-600 p-2 w-full text-white font-semibold mt-1\"></div>\n\n\n                            <form @submit.prevent=\"submit\">\n<!--                                <div class=\"flex justify-end mr-2 mb-6\">-->\n<!--                                    <button-->\n<!--                                        @click=\"submit\"-->\n<!--                                        class=\"bg-blue-600 hover:bg-blue-500 text-white rounded py-2 px-4\"-->\n<!--                                        :disabled=\"form.processing\"-->\n<!--                                    >-->\n<!--                                        Save-->\n<!--                                    </button>-->\n<!--                                </div>-->\n\n\n\n<!-- Begin grid 2-col -->\n                            <div class=\"grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 space-x-6 p-6\">\n\n<!--Left Column-->\n                                <div class=\"xl:col-span-2\">\n\n                                    <div class=\"mb-6\">\n                                        <label class=\"block mb-2 uppercase font-bold text-xs\"\n                                               for=\"notes\"\n                                        >\n                                            Episode Notes (only the team members see the notes)\n                                        </label>\n\n                                        <input v-model=\"form.notes\"\n                                               class=\"border border-gray-400 p-2 w-full rounded-lg text-black\"\n                                               type=\"text\"\n                                               name=\"notes\"\n                                               id=\"notes\"\n                                        >\n                                        <div v-if=\"form.errors.notes\" v-text=\"form.errors.notes\"\n                                             class=\"text-xs text-red-600 mt-1\"></div>\n                                    </div>\n\n\n\n                                    <div v-if=\"props.episode.status.id < 7\" class=\"mb-6\">\n                                        <label class=\"block mb-2 uppercase font-bold text-xs\"\n                                               for=\"releaseDate\"\n                                        >\n                                            <span v-if=\"props.episode.scheduled_release_dateTime\">\n                                                Scheduled Release Date</span>\n                                            <span v-else>\n                                                Schedule Release</span>\n                                        </label>\n\n                                        <div v-if=\"!cancelScheduledReleaseDate\">\n                                            <div v-if=\"props.episode.scheduled_release_dateTime && !selectedScheduledDateTime\"\n                                                 class=\"mb-2\">\n                                                {{ formatDate(props.episode.scheduled_release_dateTime)}}\n                                            </div>\n                                            <div v-if=\"selectedScheduledDateTime\"\n                                                 class=\"mb-2\">\n                                                {{ formatDate(selectedScheduledDateTime.date) }}\n                                            </div>\n                                        </div>\n                                        <div v-else class=\"mb-2\">\n                                            <span class=\"italic\">Scheduled release cancelled. Please save the changes.</span>\n                                        </div>\n\n                                        <div class=\"flex flex-row flex-wrap space-x-2\">\n                                            <DateTimePickerSelect :date=\"props.episode.scheduled_release_dateTime\" @date-time-selected=\"handleScheduledDateTime\" />\n                                            <!-- Display the selected date and time received from DateTimePicker -->\n                                            <button v-if=\"props.episode.scheduled_release_dateTime\"\n                                                    class=\"px-3 py-2 bg-blue-500 text-sm text-white font-semibold rounded-md\"\n                                                    @click.prevent=\"cancelScheduledRelease\">Cancel Release</button>\n                                        </div>\n\n\n                                    </div>\n\n                                    <div v-if=\"props.episode.status.id === 7\" class=\"mb-6\">\n                                        <label class=\"block mb-2 uppercase font-bold text-xs\"\n                                               for=\"releaseDate\"\n                                        >\n                                            Release Date\n                                        </label>\n\n                                        <div v-if=\"props.episode.release_dateTime && !selectedReleaseDateTime\"\n                                             class=\"mb-2\">\n                                            {{ formatDate(props.episode.release_dateTime)}}\n                                        </div>\n                                        <div v-if=\"selectedReleaseDateTime\"\n                                             class=\"mb-2\">\n                                            {{ formatDate(selectedReleaseDateTime.date) }}\n                                        </div>\n\n\n\n                                        <DateTimePickerSelect v-if=\"userStore.isAdmin\" :date=\"props.episode.release_dateTime\" @date-time-selected=\"handleReleaseDateTime\">\n                                            <template v-slot:buttonName>\n                                                Change date\n                                            </template>\n                                        </DateTimePickerSelect>\n                                        <!-- Display the selected date and time received from DateTimePicker -->\n\n\n                                    </div>\n\n                                    <div class=\"mb-6\">\n                                        <label class=\"block mb-2 uppercase font-bold text-xs\"\n                                               for=\"name\"\n                                        >\n                                            Episode Name\n                                        </label>\n\n                                        <input v-model=\"form.name\"\n                                               class=\"border border-gray-400 text-gray-800 p-2 w-1/2 rounded-lg\"\n                                               type=\"text\"\n                                               name=\"name\"\n                                               id=\"name\"\n                                               required\n                                        >\n                                        <div v-if=\"form.errors.name\" v-text=\"form.errors.name\"\n                                             class=\"text-xs text-red-600 mt-1\"></div>\n                                    </div>\n\n                                    <div class=\"mb-6\">\n                                        <label class=\"block mb-2 uppercase font-bold text-xs\"\n                                               for=\"episode_number\"\n                                        >\n                                            Episode Number\n                                        </label>\n\n                                        <input v-model=\"form.episode_number\"\n                                               class=\"border border-gray-400 text-gray-800 p-2 w-1/2 rounded-lg\"\n                                               type=\"text\"\n                                               :placeholder=\"props.episode.id\"\n                                               name=\"episode_number\"\n                                               id=\"episode_number\"\n                                        >\n                                        <div v-if=\"form.errors.episode_number\" v-text=\"form.errors.episode_number\"\n                                             class=\"text-xs text-red-600 mt-1\"></div>\n                                    </div>\n\n\n\n                                    <div class=\"mb-6 w-full\">\n                                        <label class=\"block mb-2 uppercase font-bold text-xs text-light\"\n                                               for=\"description\"\n                                        >\n                                            Description\n                                        </label>\n                                        <TabbableTextarea v-model=\"form.description\"\n                                                          class=\"border border-gray-400 text-gray-800 p-2 w-full rounded-lg\"\n                                                          name=\"description\"\n                                                          id=\"description\"\n                                                          rows=\"10\" cols=\"30\"\n                                                          required\n                                        />\n                                        <div v-if=\"form.errors.description\" v-text=\"form.errors.description\"\n                                             class=\"text-xs text-red-600 mt-1\"></div>\n                                    </div>\n\n<!--                                    <div class=\"mb-6\">-->\n<!--                                        <label class=\"block mb-2 uppercase font-bold text-xs text-white\"-->\n<!--                                               for=\"video_file_url\"-->\n<!--                                        >-->\n<!--                                            YouTube URL-->\n<!--                                        </label>-->\n\n<!--                                        <input v-model=\"form.youtube_url\"-->\n<!--                                               class=\"border border-gray-400 text-gray-800 p-2 w-full rounded-lg\"-->\n<!--                                               type=\"text\"-->\n<!--                                               name=\"youtube_url\"-->\n<!--                                               id=\"youtube_url\"-->\n<!--                                        >-->\n<!--                                        <div v-if=\"form.errors.youtube_url\" v-text=\"form.errors.youtube_url\"-->\n<!--                                             class=\"text-xs text-red-600 mt-1\"></div>-->\n<!--                                    </div>-->\n\n                                    <div class=\"mb-6\">\n                                        <label class=\"block mb-2 uppercase font-bold text-xs\"\n                                               for=\"video_file_url\"\n                                        >\n                                            Video URL (External MP4 only)\n                                        </label>\n\n                                        <input v-model=\"form.video_url\"\n                                               class=\"border border-gray-400 text-gray-800 p-2 w-full rounded-lg\"\n                                               type=\"text\"\n                                               name=\"video_url\"\n                                               id=\"video_url\"\n                                        >\n                                        <div class=\"text-xs mt-1\">\n                                            Example: <span class=\"underline\">https://domainname.com/filename.mp4</span>\n                                        </div>\n                                        <div v-if=\"form.errors.video_url\" v-text=\"form.errors.video_url\"\n                                             class=\"text-xs text-red-600 mt-1\"></div>\n                                    </div>\n\n                                    <div class=\"mb-6\">\n                                        <label class=\"block mb-2 uppercase font-bold text-xs\"\n                                               for=\"video_embed_code\"\n                                        >\n                                            Embed Code (Rumble or Bitchute only) <span class=\"\">*</span>\n                                        </label>\n\n                                        <TabbableTextarea v-model=\"form.video_embed_code\"\n                                                          class=\"border border-gray-400 text-gray-800 p-2 w-full rounded-lg\"\n                                                          type=\"text\"\n                                                          name=\"video_embed_code\"\n                                                          id=\"video_embed_code\"\n                                                          rows=\"10\" cols=\"30\"\n                                        />\n                                        <div v-if=\"form.errors.video_embed_code\" v-text=\"form.errors.video_embed_code\"\n                                             class=\"text-xs mt-1\"></div>\n                                    </div>\n\n                                    <div class=\"mt-2 mb-6 pb-4 border-b\">\n                                        <div class=\"mb-2 block uppercase font-bold text-xs\">\n                                            * Notes about video embedding:\n                                        </div>\n                                        <ul class=\"list-decimal pb-2 ml-2\">\n                                            <li>\n                                                If both URL and Embed Code are provided the system will attempt to get the Video Url from the Embed Code.\n                                            </li>\n                                            <li>\n                                                We have <span class=\"font-bold\">not</span> enabled the use of Facebook videos for security purposes.\n                                            </li>\n                                            <li>\n                                                If you want to use YouTube, enter the YouTube video URL above in the YouTube URL field. This option is least preferable, due to a lower quality user experience.\n                                            </li>\n                                        </ul>\n                                    </div>\n\n\n                                </div>\n<!-- End Left Column -->\n\n<!--Right Column-->\n                                <div>\n\n                                    <div>\n                                        <label class=\"block mb-2 uppercase font-bold text-xs\"\n                                               for=\"episodeVideo\"\n                                        >\n                                            Upload Episode\n                                        </label>\n                                        <div class=\"max-full mx-auto mt-2 mb-6 bg-gray-200 p-6\">\n                                            <h2 class=\"text-xl font-semibold text-gray-800\">Upload Video</h2>\n\n                                            <ul class=\"pb-4 text-gray-800\">\n                                                <li>Max Video Length: <span class=\"text-orange-400\">4 hours</span>\n                                                </li>\n                                                <li>File Types accepted: <span class=\"text-orange-400\">mp4, webm, ogg</span>\n                                                </li>\n                                            </ul>\n\n                                            <VideoUpload :showEpisodeId=\"episode.id\" class=\"text-black\"/>\n\n                                        </div>\n\n                                    </div>\n\n\n                                    <div>\n                                        <label class=\"block mb-2 uppercase font-bold text-xs\"\n                                               for=\"name\"\n                                        >\n                                            Change Episode Poster\n                                        </label>\n                                        <div class=\"max-full mx-auto mt-2 mb-6 bg-gray-200 p-6\">\n\n                                            <ImageUpload :image=\"props.image\"\n                                                         :server=\"'/showEpisodesUploadPoster'\"\n                                                         :name=\"'Upload Episode Poster'\"\n                                                         :maxSize=\"'20MB'\"\n                                                         :fileTypes=\"'image/jpg, image/jpeg, image/png'\"\n                                                         @reloadImage=\"reloadImage\"\n                                            />\n\n                                            <div class=\"flex space-y-3\">\n                                                <div class=\"mb-6\">\n                                                    <SingleImage :image=\"props.image\" :key=\"props.image\"/>\n                                                </div>\n                                            </div>\n\n\n\n                                        </div>\n\n                                    </div>\n\n\n\n                                </div>\n\n\n<!-- End Right Column -->\n                            </div>\n<!-- End grid 2-col -->\n\n                                <div class=\"flex justify-end mb-6\">\n                                    <JetValidationErrors class=\"mr-4\" />\n                                    <button\n                                        @click.prevent=\"submit\"\n                                        class=\"h-fit bg-blue-600 hover:bg-blue-500 text-white rounded py-2 px-4 mr-5\"\n                                        :disabled=\"form.processing\"\n                                    >\n                                        Save\n                                    </button>\n                                </div>\n\n                            </form>\n\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n\n\n        </div>\n    </div>\n\n</template>\n\n<script setup>\nimport {onBeforeMount, onMounted, onUnmounted, ref} from \"vue\"\nimport { Inertia } from \"@inertiajs/inertia\"\nimport { useForm } from \"@inertiajs/inertia-vue3\"\nimport { useVideoPlayerStore } from \"@/Stores/VideoPlayerStore.js\"\nimport { useTeamStore } from \"@/Stores/TeamStore.js\"\nimport { useShowStore } from \"@/Stores/ShowStore.js\"\nimport { useUserStore } from \"@/Stores/UserStore\";\nimport JetValidationErrors from '@/Jetstream/ValidationErrors.vue';\nimport TabbableTextarea from \"@/Components/TabbableTextarea\"\nimport ShowEpisodeEditHeader from \"@/Components/ShowEpisodes/Edit/ShowEpisodeEditHeader\"\nimport Message from \"@/Components/Modals/Messages\";\nimport ImageUpload from \"@/Components/Uploaders/ImageUpload.vue\";\nimport SingleImage from \"@/Components/Multimedia/SingleImage.vue\";\nimport VideoUpload from \"@/Components/Uploaders/VideoUpload\"\nimport videojs from \"video.js\";\nimport DateTimePickerSelect from \"@/Components/Calendar/DateTimePickerSelect\";\nimport { format } from 'date-fns';\n// import {DatePicker} from \"v-calendar\";\n// import 'v-calendar/style.css';\n\nlet videoPlayerStore = useVideoPlayerStore()\nlet teamStore = useTeamStore()\nlet showStore = useShowStore()\nlet userStore = useUserStore()\n\nlet props = defineProps({\n    show: Object,\n    team: Object,\n    episode: Object,\n    image: Object,\n    can: Object,\n});\n\nuserStore.currentPage = 'episodes'\nuserStore.showFlashMessage = true;\nteamStore.setActiveTeam(props.team);\nteamStore.setActiveShow(props.show);\nshowStore.episodePoster = props.image.name;\n\nlet scheduledDateTime = ref(''); // This will hold the selected date and time in ISO format\nlet releaseDateTime = ref(''); // This will hold the selected date and time in ISO format\n\n// Define a ref to store selected date and time received from DateTimePicker\nlet selectedReleaseDateTime = ref('');\nlet selectedScheduledDateTime = ref('');\nlet cancelScheduledReleaseDate = ref(false);\n\nlet formattedReleaseDateTime = ref(''); // This will display the formatted date and time\nlet formattedScheduledDateTime = ref(''); // This will display the formatted date and time\n\nlet userReleaseDateTime = ref(''); // This will display the date and time in the user's timezone\nlet userScheduledDateTime = ref(''); // This will display the date and time in the user's timezone\n\nconst userTimezone = ref('');\n\n// TODO: convert this to the user's local time\nreleaseDateTime = props.episode.release_dateTime\nscheduledDateTime = props.episode.scheduled_release_dateTime\n\nconst getUserTimezone = () => {\n    // Use the Intl object to get the user's timezone\n    userTimezone.value = Intl.DateTimeFormat().resolvedOptions().timeZone;\n};\n\nconst convertToTimeZone = (dateTime, userTimezone) => {\n    return format(dateTime, 'yyyy-MM-dd HH:mm:ssXXX', { userTimezone });\n};\n\nif (releaseDateTime) {\n    userReleaseDateTime.value = convertToTimeZone(\n        new Date(releaseDateTime),\n        userTimezone.value);\n    console.log('user release dateTime: ' + userReleaseDateTime.value)\n}\n\nif (scheduledDateTime) {\n    userScheduledDateTime.value = convertToTimeZone(\n        new Date(scheduledDateTime),\n        userTimezone.value);\n    console.log('user scheduled dateTime: ' + userScheduledDateTime.value)\n}\n\n\nlet form = useForm({\n    id: props.episode.id,\n    name: props.episode.name,\n    episode_number: props.episode.episode_number,\n    description: props.episode.description,\n    notes: props.episode.notes,\n    show_id: props.episode.show_id,\n    video_url: props.episode.video.video_url,\n    youtube_url: props.episode.youtube_url,\n    video_embed_code: props.episode.video_embed_code,\n    release_dateTime: '',\n    scheduled_release_dateTime: '',\n});\n\nlet reloadImage = () => {\n    Inertia.reload({\n        only: ['image'],\n    });\n};\n\nlet submit = () => {\n    if(form.video_embed_code !== props.episode.video_embed_code && form.video_url) {\n        addEmbedCodeConfirm();\n    } else\n    form.put(route('showEpisodes.update', props.episode.slug));\n};\n\n// Compare the converted date to the current date in the user's timezone\nconst currentDate = convertToTimeZone(\n    new Date(),\n    userTimezone.value\n);\n\nconst handleReleaseDateTime = (newDate) => {\n    let changedDate = convertToTimeZone(\n        newDate.date,\n        userTimezone.value\n    )\nconsole.log(changedDate)\n    console.log(currentDate)\n    // if release dateTime is in the future, alert and return\n    if (changedDate > currentDate) {\n        // selectedReleaseDateTime.value = props.episode.release_dateTime\n        return alert(\"The selected release date and time is in the future! Please select a date/time in the past.\");\n    } else {\n        // else proceed\n        selectedReleaseDateTime.value = newDate;\n        releaseDateTime = newDate.date;\n        // console.log(releaseDateTime)\n        updateReleaseDateTime()\n        console.log(formattedReleaseDateTime.value)\n        form.release_dateTime = formattedReleaseDateTime\n        form.scheduled_release_dateTime = null\n    }\n}\nconst handleScheduledDateTime = (newDate) => {\n    selectedScheduledDateTime.value = newDate;\n    scheduledDateTime = newDate.date;\n    // console.log(scheduledDateTime)\n    updateScheduledDateTime()\n    console.log(formattedScheduledDateTime.value)\n\n    form.scheduled_release_dateTime = formattedScheduledDateTime\n    form.release_dateTime = null\n}\n\nfunction cancelScheduledRelease() {\n    cancelScheduledReleaseDate.value = true;\n    selectedScheduledDateTime.value = null;\n    form.scheduled_release_dateTime = null;\n}\n\nconst updateReleaseDateTime = () => {\n    if (selectedReleaseDateTime.value) {\n        // Convert the selected date and time to the desired time zone\n        // const timeZone = 'UTC'; // Change this to your desired time zone\n        formattedReleaseDateTime.value = convertToTimeZone(\n            new Date(releaseDateTime),\n            userTimezone.value\n        );\n\n        // Compare the converted date to the current date in the user's timezone\n        // const currentDate = convertToTimeZone(\n        //     new Date(),\n        //     userTimezone.value\n        // );\n        //\n        // if (formattedReleaseDateTime.value > currentDate) {\n        //     props.episode.release_dateTime = userReleaseDateTime.value\n        //     alert(\"The selected release date and time is in the future!\");\n        // }\n\n    } else {\n        formattedReleaseDateTime.value = '';\n    }\n};\n\nconst updateScheduledDateTime = () => {\n    if (selectedScheduledDateTime.value) {\n        // Convert the selected date and time to the desired time zone\n        // const timeZone = 'UTC'; // Change this to your desired time zone\n        formattedScheduledDateTime.value = convertToTimeZone(\n            new Date(scheduledDateTime),\n            userTimezone.value\n        );\n    } else {\n        formattedScheduledDateTime.value = '';\n    }\n};\n\nonMounted(() => {\n    videoPlayerStore.makeVideoTopRight();\n    if (userStore.isMobile) {\n        videoPlayerStore.ottClass = 'ottClose'\n        videoPlayerStore.ott = 0\n    }\n    document.getElementById(\"topDiv\").scrollIntoView()\n    getUserTimezone()\n    console.log(userTimezone.value)\n});\n\nonUnmounted( () => {\n    showStore.errorMessage = ''\n})\n\nfunction addEmbedCodeConfirm() {\n    if (confirm(\"Are you sure you want to add this embed code? It will override the video url.\")) {\n        form.put(route('showEpisodes.update', props.episode.slug));\n    }\n}\n\n</script>\n"],"names":["useTeamStore","defineStore","state","id","name","description","slug","totalSpots","memberSpots","teamCreator","teamLeader","members","managers","activeShow","activeEpisode","creators","showModal","Boolean","confirmDialog","confirmManagerDialog","selectedManagerName","selectedManagerId","addManager","removeManager","deleteMemberName","deleteMemberId","noteEdit","note","saveNoteProcessing","goLiveDisplay","can","actions","setActiveTeam","team","this","setActiveShow","show","setActiveEpisode","episode","deleteTeamMemberCancel","confirmTeamManagerCancel","deleteTeamMember","Inertia","visit","route","method","data","user_id","team_id","team_slug","addTeamManager","removeTeamManager","toggleGoLiveDisplay","getters","spotsRemaining","___CSS_LOADER_EXPORT___","push","module","userStore","useUserStore","cancel","prevUrl","props","__props","emits","date","ref","inputValue","watch","_ref2","newDate","_slicedToArray","emit","onTabPress","e","textarea","target","val","value","start","selectionStart","end","selectionEnd","substring","FilePond","_defineProperty","metadataKey","metadataValue","vueFilePond","FilePondPluginFileValidateType","FilePondPluginFileValidateSize","FilePondPluginImagePreview","FilePondPluginFileMetadata","filepondInitialized","console","log","setOptions","fileMetadataObject","show_id","__emit","handleProcessedFile","error","file","uploadingMessage","uploadCompleteMessage","isHidden","onMounted","document","getElementById","myDropzone","Dropzone","url","paramName","maxFilesize","chunking","chunkSize","parallelChunkUploads","retryChunks","retryChunksLimit","capture","acceptedFiles","uploadprogress","progress","bytesSent","uploadPercentage","dictDefaultMessage","forceFallback","accept","done","size","alert","on","concat","removeFile","reload","only","movieId","uploadMovieId","mov","movieTrailerId","showEpisodeId","uploadShowEpisodeId","form","useForm","options","locals","errors","computed","usePage","hasErrors","Object","keys","length","videoPlayerStore","useVideoPlayerStore","teamStore","showStore","useShowStore","currentPage","showFlashMessage","episodePoster","image","scheduledDateTime","releaseDateTime","selectedReleaseDateTime","selectedScheduledDateTime","cancelScheduledReleaseDate","formattedReleaseDateTime","formattedScheduledDateTime","userReleaseDateTime","userScheduledDateTime","userTimezone","release_dateTime","scheduled_release_dateTime","convertToTimeZone","dateTime","format","Date","episode_number","notes","video_url","video","youtube_url","video_embed_code","reloadImage","submit","confirm","put","currentDate","handleReleaseDateTime","changedDate","updateReleaseDateTime","handleScheduledDateTime","updateScheduledDateTime","cancelScheduledRelease","makeVideoTopRight","isMobile","ottClass","ott","scrollIntoView","Intl","DateTimeFormat","resolvedOptions","timeZone","onUnmounted","errorMessage"],"sourceRoot":""}