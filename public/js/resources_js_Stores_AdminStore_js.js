"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk"] = self["webpackChunk"] || []).push([["resources_js_Stores_AdminStore_js"],{

/***/ "./resources/js/Stores/AdminStore.js":
/*!*******************************************!*\
  !*** ./resources/js/Stores/AdminStore.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useAdminStore: () => (/* binding */ useAdminStore)\n/* harmony export */ });\n/* harmony import */ var pinia__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! pinia */ \"./node_modules/pinia/dist/pinia.mjs\");\n/* harmony import */ var _Stores_NotificationStore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/Stores/NotificationStore */ \"./resources/js/Stores/NotificationStore.js\");\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, \"catch\": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n\nvar initialState = function initialState() {\n  return {\n    channels: [],\n    // For Admin Channels page\n    items: [],\n    // for Admin Channels DynamicModal... ExternalSource, ChannelPlaylist, MistStream\n    activeItemId: null,\n    selectedChannel: null,\n    // The currently active item\n    currentType: '',\n    // 'externalSource', 'channelPlaylist', 'mistStream'\n    searchTerm: '',\n    type: '',\n    modalHeader: '',\n    currentPage: 1,\n    itemsPerPage: 10,\n    currentChannelsPage: 1,\n    itemsPerChannelsPage: 7,\n    sourceSelector: {\n      source: null,\n      sourceType: null\n    },\n    firstPlaySettings: {},\n    validationErrors: {}\n  };\n};\nvar useAdminStore = (0,pinia__WEBPACK_IMPORTED_MODULE_1__.defineStore)('adminStore', {\n  state: initialState,\n  actions: {\n    reset: function reset() {\n      // Reset the store to its original state (clear all data)\n      Object.assign(this, initialState());\n    },\n    loadChannels: function loadChannels(channels) {\n      this.channels = channels;\n    },\n    fetchChannels: function fetchChannels() {\n      var _this = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return axios.get('/api/channels_list').then(function (response) {\n                _this.channels = response.data;\n              })[\"catch\"](function (error) {\n                console.log(error);\n              });\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }))();\n    },\n    toggleChannelActiveStatus: function toggleChannelActiveStatus(channelId) {\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var notificationStore, response, _response$data, message, status;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              notificationStore = (0,_Stores_NotificationStore__WEBPACK_IMPORTED_MODULE_0__.useNotificationStore)();\n              _context2.prev = 1;\n              _context2.next = 4;\n              return axios.post('/admin/channels/' + channelId + '/toggleChannelActive');\n            case 4:\n              response = _context2.sent;\n              // Extract message and status from the response\n              _response$data = response.data, message = _response$data.message, status = _response$data.status; // Use the status from the response for the notification\n              notificationStore.setToastNotification(message, status);\n              _context2.next = 13;\n              break;\n            case 9:\n              _context2.prev = 9;\n              _context2.t0 = _context2[\"catch\"](1);\n              console.error(_context2.t0);\n              notificationStore.setToastNotification('Failed to toggle channel status.', 'error');\n            case 13:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, null, [[1, 9]]);\n      }))();\n    },\n    addChannel: function addChannel(name) {\n      var _this2 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var notificationStore, response, _response$data2, message, status, errorMessage, validationMessages;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              notificationStore = (0,_Stores_NotificationStore__WEBPACK_IMPORTED_MODULE_0__.useNotificationStore)();\n              _context3.prev = 1;\n              _context3.next = 4;\n              return axios.post('/admin/channels/add', {\n                'name': name\n              });\n            case 4:\n              response = _context3.sent;\n              if (!response.data.success) {\n                _context3.next = 11;\n                break;\n              }\n              _context3.next = 8;\n              return _this2.fetchChannels();\n            case 8:\n              notificationStore.setToastNotification(response.data.message, 'success');\n              _context3.next = 15;\n              break;\n            case 11:\n              // Handle logical errors even when the HTTP response was OK\n              // Assuming 'status' and 'message' are part of the error response\n              _response$data2 = response.data, message = _response$data2.message, status = _response$data2.status;\n              errorMessage = 'Failed to add channel due to a server error.';\n              if (status === 'error' && message && message.fallbackMessages) {\n                // Construct a more detailed error message based on validation feedback\n                validationMessages = Object.values(message.fallbackMessages).map(function (msgs) {\n                  return msgs.join(' ');\n                }) // Join messages if there are multiple for one field\n                .join('; '); // Separate field messages with semicolons\n                errorMessage = validationMessages || errorMessage;\n              }\n              notificationStore.setToastNotification(errorMessage, 'error');\n            case 15:\n              _context3.next = 21;\n              break;\n            case 17:\n              _context3.prev = 17;\n              _context3.t0 = _context3[\"catch\"](1);\n              console.error(_context3.t0);\n              notificationStore.setToastNotification('Failed to add channel due to a network or server error.', 'error');\n            case 21:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, null, [[1, 17]]);\n      }))();\n    },\n    updateChannel: function updateChannel(channelId, newName) {\n      var _this3 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var notificationStore, response, _response$data3, message, status, errorMessage, validationMessages;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              notificationStore = (0,_Stores_NotificationStore__WEBPACK_IMPORTED_MODULE_0__.useNotificationStore)();\n              _context4.prev = 1;\n              _context4.next = 4;\n              return axios.post(\"/admin/channels/\".concat(channelId), {\n                'name': newName\n              });\n            case 4:\n              response = _context4.sent;\n              if (!response.data.success) {\n                _context4.next = 11;\n                break;\n              }\n              _context4.next = 8;\n              return _this3.fetchChannels();\n            case 8:\n              notificationStore.setToastNotification(response.data.message, 'success');\n              _context4.next = 15;\n              break;\n            case 11:\n              // Handle logical errors even when the HTTP response was OK\n              // Assuming 'status' and 'message' are part of the error response\n              _response$data3 = response.data, message = _response$data3.message, status = _response$data3.status;\n              errorMessage = 'Failed to add channel due to a server error.';\n              if (status === 'error' && message && message.fallbackMessages) {\n                // Construct a more detailed error message based on validation feedback\n                validationMessages = Object.values(message.fallbackMessages).map(function (msgs) {\n                  return msgs.join(' ');\n                }) // Join messages if there are multiple for one field\n                .join('; '); // Separate field messages with semicolons\n                errorMessage = validationMessages || errorMessage;\n              }\n              notificationStore.setToastNotification(errorMessage, 'error');\n            case 15:\n              _context4.next = 21;\n              break;\n            case 17:\n              _context4.prev = 17;\n              _context4.t0 = _context4[\"catch\"](1);\n              console.error(_context4.t0);\n              notificationStore.setToastNotification('Failed to add channel due to a network or server error.', 'error');\n            case 21:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, null, [[1, 17]]);\n      }))();\n    },\n    setSelectedChannel: function setSelectedChannel(item) {\n      this.selectedChannel = item;\n    },\n    setCurrentType: function setCurrentType(type) {\n      this.currentType = type;\n      this.modalHeader = type + ' list';\n    },\n    clearSelectedChannelAndItems: function clearSelectedChannelAndItems() {\n      this.selectedChannel = null;\n      this.items = [];\n      this.activeItemId = null;\n      this.currentType = '';\n      this.modalHeader = '';\n      this.currentPage = 1;\n      this.itemsPerPage = 10;\n      this.searchTerm = '';\n    },\n    // async searchItems(type, searchTerm = '') {\n    //     this.currentType = type;\n    //     this.searchTerm = searchTerm;\n    //     // Assuming you have a function to perform the fetch; adjust accordingly\n    //     const response = await fetch(`/admin/channels/search/${type}?search=${searchTerm}`);\n    //     const data = await response.json();\n    //     this.items = data.items;\n    // },\n    fetchItems: function fetchItems(type) {\n      var _this4 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        var response, _response, _response2;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              _this4.currentType = type;\n              if (!(_this4.currentType === 'mistStream')) {\n                _context5.next = 11;\n                break;\n              }\n              _context5.next = 4;\n              return fetch(\"/mistStreams\");\n            case 4:\n              response = _context5.sent;\n              _context5.next = 7;\n              return response.json();\n            case 7:\n              _this4.items = _context5.sent;\n              if (_this4.selectedChannel.mist_stream_id) {\n                _this4.activeItemId = _this4.selectedChannel.mist_stream_id;\n              }\n              _context5.next = 29;\n              break;\n            case 11:\n              if (!(_this4.currentType === 'externalSource')) {\n                _context5.next = 21;\n                break;\n              }\n              _context5.next = 14;\n              return fetch(\"/externalSources\");\n            case 14:\n              _response = _context5.sent;\n              _context5.next = 17;\n              return _response.json();\n            case 17:\n              _this4.items = _context5.sent;\n              if (_this4.selectedChannel.channel_external_source_id) {\n                _this4.activeItemId = _this4.selectedChannel.channel_external_source_id;\n              }\n              _context5.next = 29;\n              break;\n            case 21:\n              if (!(_this4.currentType === 'channelPlaylist')) {\n                _context5.next = 29;\n                break;\n              }\n              _context5.next = 24;\n              return fetch(\"/channelPlaylists\");\n            case 24:\n              _response2 = _context5.sent;\n              _context5.next = 27;\n              return _response2.json();\n            case 27:\n              _this4.items = _context5.sent;\n              if (_this4.selectedChannel.channel_playlist_id) {\n                _this4.activeItemId = _this4.selectedChannel.channel_playlist_id;\n              }\n            case 29:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5);\n      }))();\n    },\n    updateActiveItemId: function updateActiveItemId(id) {\n      var _this5 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              _this5.activeItemId = id;\n              if (!(_this5.currentType === 'mistStream')) {\n                _context6.next = 6;\n                break;\n              }\n              _context6.next = 4;\n              return _this5.setMistStream(_this5.selectedChannel, id);\n            case 4:\n              _context6.next = 14;\n              break;\n            case 6:\n              if (!(_this5.currentType === 'channelPlaylist')) {\n                _context6.next = 11;\n                break;\n              }\n              _context6.next = 9;\n              return _this5.setChannelPlaylist(_this5.selectedChannel, id);\n            case 9:\n              _context6.next = 14;\n              break;\n            case 11:\n              if (!(_this5.currentType === 'externalSource')) {\n                _context6.next = 14;\n                break;\n              }\n              _context6.next = 14;\n              return _this5.setExternalSource(_this5.selectedChannel, id);\n            case 14:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee6);\n      }))();\n    },\n    // Add more actions as needed\n    // this next one should probably go in AdminChannelStore\n    setPlaybackPriorityType: function setPlaybackPriorityType(channel, priorityType) {\n      var _this6 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n        var dataToSend, response, index;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) switch (_context7.prev = _context7.next) {\n            case 0:\n              dataToSend = {\n                setPriorityType: priorityType\n              };\n              _context7.prev = 1;\n              _context7.next = 4;\n              return axios.post(\"/admin/channels/\".concat(channel.id, \"/setPlaybackPriorityType\"), dataToSend);\n            case 4:\n              response = _context7.sent;\n              if (response.data.success) {\n                _this6.fetchChannels();\n                // Find the index of the updated channel in the channels array\n                index = _this6.channels.findIndex(function (c) {\n                  return c.id === channel.id;\n                });\n                if (index !== -1) {\n                  // Update the channel in the channels array with the updated data\n                  _this6.channels[index] = response.data.channel;\n                }\n              }\n              _context7.next = 11;\n              break;\n            case 8:\n              _context7.prev = 8;\n              _context7.t0 = _context7[\"catch\"](1);\n              console.error(_context7.t0);\n            case 11:\n            case \"end\":\n              return _context7.stop();\n          }\n        }, _callee7, null, [[1, 8]]);\n      }))();\n    },\n    setMistStream: function setMistStream(channel, mistStreamId) {\n      var _this7 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {\n        var dataToSend, response, index;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) switch (_context8.prev = _context8.next) {\n            case 0:\n              dataToSend = {\n                mistStreamId: mistStreamId\n              };\n              _context8.prev = 1;\n              _context8.next = 4;\n              return axios.post(\"/admin/channels/\".concat(channel.id, \"/setMistStream\"), dataToSend);\n            case 4:\n              response = _context8.sent;\n              if (response.data.success) {\n                _this7.fetchChannels();\n                // Find the index of the updated channel in the channels array\n                index = _this7.channels.findIndex(function (c) {\n                  return c.id === channel.id;\n                });\n                if (index !== -1) {\n                  // Update the channel in the channels array with the updated data\n                  _this7.channels[index] = response.data.channel;\n                }\n              }\n              _context8.next = 11;\n              break;\n            case 8:\n              _context8.prev = 8;\n              _context8.t0 = _context8[\"catch\"](1);\n              console.error(_context8.t0);\n            case 11:\n            case \"end\":\n              return _context8.stop();\n          }\n        }, _callee8, null, [[1, 8]]);\n      }))();\n    },\n    setChannelPlaylist: function setChannelPlaylist(channel, channelPlaylistId) {\n      var _this8 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {\n        var dataToSend, response, index;\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) switch (_context9.prev = _context9.next) {\n            case 0:\n              dataToSend = {\n                channelPlaylistId: channelPlaylistId\n              };\n              _context9.prev = 1;\n              _context9.next = 4;\n              return axios.post(\"/admin/channels/\".concat(channel.id, \"/setChannelPlaylist\"), dataToSend);\n            case 4:\n              response = _context9.sent;\n              if (response.data.success) {\n                _this8.fetchChannels();\n                // Find the index of the updated channel in the channels array\n                index = _this8.channels.findIndex(function (c) {\n                  return c.id === channel.id;\n                });\n                if (index !== -1) {\n                  // Update the channel in the channels array with the updated data\n                  _this8.channels[index] = response.data.channel;\n                }\n              }\n              _context9.next = 11;\n              break;\n            case 8:\n              _context9.prev = 8;\n              _context9.t0 = _context9[\"catch\"](1);\n              console.error(_context9.t0);\n            case 11:\n            case \"end\":\n              return _context9.stop();\n          }\n        }, _callee9, null, [[1, 8]]);\n      }))();\n    },\n    setExternalSource: function setExternalSource(channel, externalSourceId) {\n      var _this9 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {\n        var dataToSend, response, index;\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) switch (_context10.prev = _context10.next) {\n            case 0:\n              dataToSend = {\n                mistStreamId: externalSourceId\n              };\n              _context10.prev = 1;\n              _context10.next = 4;\n              return axios.post(\"/admin/channels/\".concat(channel.id, \"/setExternalSource\"), dataToSend);\n            case 4:\n              response = _context10.sent;\n              if (response.data.success) {\n                _this9.fetchChannels();\n                // Find the index of the updated channel in the channels array\n                index = _this9.channels.findIndex(function (c) {\n                  return c.id === channel.id;\n                });\n                if (index !== -1) {\n                  // Update the channel in the channels array with the updated data\n                  _this9.channels[index] = response.data.channel;\n                }\n              }\n              _context10.next = 11;\n              break;\n            case 8:\n              _context10.prev = 8;\n              _context10.t0 = _context10[\"catch\"](1);\n              console.error(_context10.t0);\n            case 11:\n            case \"end\":\n              return _context10.stop();\n          }\n        }, _callee10, null, [[1, 8]]);\n      }))();\n    },\n    nextPage: function nextPage() {\n      var totalModalPages = Math.ceil(this.items.length / this.itemsPerPage);\n      if (this.currentPage < totalModalPages) this.currentPage++;\n    },\n    prevPage: function prevPage() {\n      if (this.currentPage > 1) this.currentPage--;\n    },\n    setPage: function setPage(page) {\n      this.currentPage = page;\n    },\n    nextChannelsPage: function nextChannelsPage() {\n      var totalModalPages = Math.ceil(this.channels.length / this.itemsPerChannelsPage);\n      if (this.currentChannelsPage < totalModalPages) this.currentChannelsPage++;\n    },\n    prevChannelsPage: function prevChannelsPage() {\n      if (this.currentChannelsPage > 1) this.currentChannelsPage--;\n    },\n    setChannelsPage: function setChannelsPage(page) {\n      this.currentChannelsPage = page;\n    },\n    ////// FIRST PLAY SETTINGS\n    /////////////////////////// admin/update-first-play-settings\n    fetchFirstPlaySettings: function fetchFirstPlaySettings() {\n      var _this10 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11() {\n        var notificationStore, response, _response$data4, message, status, errorMessage, validationMessages;\n        return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n          while (1) switch (_context11.prev = _context11.next) {\n            case 0:\n              notificationStore = (0,_Stores_NotificationStore__WEBPACK_IMPORTED_MODULE_0__.useNotificationStore)();\n              _context11.prev = 1;\n              _context11.next = 4;\n              return axios.post(\"/admin/fetch-first-play-settings\");\n            case 4:\n              response = _context11.sent;\n              if (response.data.success) {\n                // Operation was a success\n                _this10.firstPlaySettings = response.data.firstPlaySettings;\n                notificationStore.setToastNotification(response.data.message, 'success', 1500);\n              } else {\n                // Handle logical errors even when the HTTP response was OK\n                // Assuming 'status' and 'message' are part of the error response\n                _response$data4 = response.data, message = _response$data4.message, status = _response$data4.status;\n                errorMessage = 'Failed to fetch First Play Settings due to a server error.';\n                if (status === 'error' && message && message.fallbackMessages) {\n                  // Construct a more detailed error message based on validation feedback\n                  validationMessages = Object.values(message.fallbackMessages).map(function (msgs) {\n                    return msgs.join(' ');\n                  }) // Join messages if there are multiple for one field\n                  .join('; '); // Separate field messages with semicolons\n                  errorMessage = validationMessages || errorMessage;\n                }\n                notificationStore.setToastNotification(errorMessage, 'error');\n              }\n              _context11.next = 12;\n              break;\n            case 8:\n              _context11.prev = 8;\n              _context11.t0 = _context11[\"catch\"](1);\n              console.error(_context11.t0);\n              notificationStore.setToastNotification('Failed to fetch First Play Settings due to a network or server error.', 'error');\n            case 12:\n            case \"end\":\n              return _context11.stop();\n          }\n        }, _callee11, null, [[1, 8]]);\n      }))();\n    },\n    updateFirstPlaySettings: function updateFirstPlaySettings() {\n      var _this11 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12() {\n        var notificationStore, response, errorMessage;\n        return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n          while (1) switch (_context12.prev = _context12.next) {\n            case 0:\n              notificationStore = (0,_Stores_NotificationStore__WEBPACK_IMPORTED_MODULE_0__.useNotificationStore)();\n              _context12.prev = 1;\n              _context12.next = 4;\n              return axios.patch('/admin/update-first-play-settings', _this11.firstPlaySettings);\n            case 4:\n              response = _context12.sent;\n              if (response.data.success) {\n                _context12.next = 9;\n                break;\n              }\n              // This block might not be necessary if your server correctly uses HTTP status codes for errors\n              _this11.validationErrors = response.data.errors || {};\n              notificationStore.setToastNotification(response.data.message, 'error');\n              return _context12.abrupt(\"return\");\n            case 9:\n              // Operation was a success\n              _this11.firstPlaySettings = response.data.firstPlaySettings;\n              _this11.validationErrors = {}; // Clear any existing validation errors\n              notificationStore.setToastNotification(response.data.message, 'success', 1500);\n              _context12.next = 17;\n              break;\n            case 14:\n              _context12.prev = 14;\n              _context12.t0 = _context12[\"catch\"](1);\n              // Properly handle the error response\n              if (_context12.t0.response && _context12.t0.response.data) {\n                // Server responded with a non-2xx status code\n                console.log(\"Error response data:\", _context12.t0.response.data);\n                _this11.validationErrors = _context12.t0.response.data.errors || {};\n                errorMessage = _context12.t0.response.data.message || 'Failed to save First Play Settings due to a network or server error.';\n                notificationStore.setToastNotification(errorMessage, 'error');\n              } else {\n                // The request was made but no response was received or other errors occurred\n                notificationStore.setToastNotification('Failed to save First Play Settings due to a network or server error.', 'error');\n              }\n            case 17:\n            case \"end\":\n              return _context12.stop();\n          }\n        }, _callee12, null, [[1, 14]]);\n      }))();\n    },\n    handleErrors: function handleErrors(data) {\n      var notificationStore = (0,_Stores_NotificationStore__WEBPACK_IMPORTED_MODULE_0__.useNotificationStore)();\n      var errorMessage = 'Failed to save First Play Settings due to a server error.';\n      if (data.status === 'error') {\n        if (data.errors) {\n          // Directly use the validation errors from the server response\n          this.validationErrors = data.errors;\n          errorMessage = \"Please check your input.\";\n        } else if (data.message) {\n          // Use the message provided by the server as the error message\n          errorMessage = data.message;\n        }\n        notificationStore.setToastNotification(errorMessage, 'error');\n      }\n    }\n  },\n  // Getters (if needed)\n  getters: {\n    filteredItems: function filteredItems(state) {\n      return state.items;\n    },\n    // Placeholder, adjust if you need actual filtering\n    currentItem: function currentItem(state) {\n      return state.items.find(function (item) {\n        return item.id === state.activeItem;\n      });\n    },\n    // setHeader: (state) => state.modalHeader = state.currentType + ' list',\n    paginatedItems: function paginatedItems(state) {\n      var start = (state.currentPage - 1) * state.itemsPerPage;\n      var end = start + state.itemsPerPage;\n      return state.items.slice(start, end);\n    },\n    paginatedChannels: function paginatedChannels(state) {\n      var start = (state.currentChannelsPage - 1) * state.itemsPerChannelsPage;\n      var end = start + state.itemsPerChannelsPage;\n      return state.channels.slice(start, end);\n    },\n    totalModalPages: function totalModalPages(state) {\n      return Math.ceil(state.items.length / state.itemsPerPage);\n    },\n    totalChannelsPages: function totalChannelsPages(state) {\n      return Math.ceil(state.channels.length / state.itemsPerChannelsPage);\n    },\n    // Getter to count active channels\n    activeChannelsCount: function activeChannelsCount(state) {\n      // Use Array.prototype.filter to keep only items with 'active' true,\n      // then use the length property to get the count\n      return state.channels.filter(function (channel) {\n        return channel.active;\n      }).length;\n    }\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/Stores/AdminStore.js\n");

/***/ })

}]);