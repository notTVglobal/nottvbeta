"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk"] = self["webpackChunk"] || []).push([["resources_js_Stores_AdminStore_js"],{

/***/ "./resources/js/Stores/AdminStore.js":
/*!*******************************************!*\
  !*** ./resources/js/Stores/AdminStore.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useAdminStore: () => (/* binding */ useAdminStore)\n/* harmony export */ });\n/* harmony import */ var pinia__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! pinia */ \"./node_modules/pinia/dist/pinia.mjs\");\n/* harmony import */ var _Stores_NotificationStore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/Stores/NotificationStore */ \"./resources/js/Stores/NotificationStore.js\");\n/* harmony import */ var _Stores_VideoPlayerStore__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/Stores/VideoPlayerStore */ \"./resources/js/Stores/VideoPlayerStore.js\");\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, \"catch\": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n\n\nvar initialState = function initialState() {\n  return {\n    channels: [],\n    // For Admin Channels page\n    items: [],\n    // for Admin Channels DynamicModal... ExternalSource, ChannelPlaylist, MistStream\n    activeItemId: null,\n    selectedChannel: null,\n    // The currently active item\n    currentType: '',\n    // 'externalSource', 'channelPlaylist', 'mistStream'\n    searchTerm: '',\n    type: '',\n    modalHeader: '',\n    currentPage: 1,\n    itemsPerPage: 10,\n    currentChannelsPage: 1,\n    itemsPerChannelsPage: 7,\n    sourceSelector: {\n      source: null,\n      sourceType: null\n    },\n    firstPlaySettings: {\n      useCustomVideo: false,\n      customVideoSource: '',\n      customVideoSourceType: ''\n    },\n    validationErrors: {},\n    checkSendProcessing: false,\n    activeStreams: [],\n    fetchingActiveStreams: false,\n    settingsForm: {\n      subscriptionSettings: {\n        monthly: {\n          price: '',\n          api_id: ''\n        },\n        yearly: {\n          price: '',\n          api_id: ''\n        }\n      }\n    }\n  };\n};\nvar useAdminStore = (0,pinia__WEBPACK_IMPORTED_MODULE_2__.defineStore)('adminStore', {\n  state: initialState,\n  actions: {\n    reset: function reset() {\n      // Reset the store to its original state (clear all data)\n      Object.assign(this, initialState());\n    },\n    loadChannels: function loadChannels(channels) {\n      this.channels = channels;\n    },\n    setCheckSendProcessing: function setCheckSendProcessing() {\n      this.checkSendProcessing = true;\n    },\n    unsetCheckSendProcessing: function unsetCheckSendProcessing() {\n      this.checkSendProcessing = false;\n    },\n    fetchChannels: function fetchChannels() {\n      var _this = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return axios.get('/api/channels_list').then(function (response) {\n                _this.channels = response.data;\n              })[\"catch\"](function (error) {\n                console.log(error);\n              });\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }))();\n    },\n    toggleChannelActiveStatus: function toggleChannelActiveStatus(channelId) {\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var notificationStore, response, _response$data, message, status;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              notificationStore = (0,_Stores_NotificationStore__WEBPACK_IMPORTED_MODULE_0__.useNotificationStore)();\n              _context2.prev = 1;\n              _context2.next = 4;\n              return axios.post('/admin/channels/' + channelId + '/toggleChannelActive');\n            case 4:\n              response = _context2.sent;\n              // Extract message and status from the response\n              _response$data = response.data, message = _response$data.message, status = _response$data.status; // Use the status from the response for the notification\n              notificationStore.setToastNotification(message, status);\n              _context2.next = 13;\n              break;\n            case 9:\n              _context2.prev = 9;\n              _context2.t0 = _context2[\"catch\"](1);\n              console.error(_context2.t0);\n              notificationStore.setToastNotification('Failed to toggle channel status.', 'error');\n            case 13:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, null, [[1, 9]]);\n      }))();\n    },\n    addChannel: function addChannel(name) {\n      var _this2 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var notificationStore, response, _response$data2, message, status, errorMessage, validationMessages;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              notificationStore = (0,_Stores_NotificationStore__WEBPACK_IMPORTED_MODULE_0__.useNotificationStore)();\n              _context3.prev = 1;\n              _context3.next = 4;\n              return axios.post('/admin/channels/add', {\n                'name': name\n              });\n            case 4:\n              response = _context3.sent;\n              if (!response.data.success) {\n                _context3.next = 11;\n                break;\n              }\n              _context3.next = 8;\n              return _this2.fetchChannels();\n            case 8:\n              notificationStore.setToastNotification(response.data.message, 'success');\n              _context3.next = 15;\n              break;\n            case 11:\n              // Handle logical errors even when the HTTP response was OK\n              // Assuming 'status' and 'message' are part of the error response\n              _response$data2 = response.data, message = _response$data2.message, status = _response$data2.status;\n              errorMessage = 'Failed to add channel due to a server error.';\n              if (status === 'error' && message && message.fallbackMessages) {\n                // Construct a more detailed error message based on validation feedback\n                validationMessages = Object.values(message.fallbackMessages).map(function (msgs) {\n                  return msgs.join(' ');\n                }) // Join messages if there are multiple for one field\n                .join('; '); // Separate field messages with semicolons\n                errorMessage = validationMessages || errorMessage;\n              }\n              notificationStore.setToastNotification(errorMessage, 'error');\n            case 15:\n              _context3.next = 21;\n              break;\n            case 17:\n              _context3.prev = 17;\n              _context3.t0 = _context3[\"catch\"](1);\n              console.error(_context3.t0);\n              notificationStore.setToastNotification('Failed to add channel due to a network or server error.', 'error');\n            case 21:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, null, [[1, 17]]);\n      }))();\n    },\n    updateChannel: function updateChannel(channelId, newName) {\n      var _this3 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var notificationStore, response, _response$data3, message, status, errorMessage, validationMessages;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              notificationStore = (0,_Stores_NotificationStore__WEBPACK_IMPORTED_MODULE_0__.useNotificationStore)();\n              _context4.prev = 1;\n              _context4.next = 4;\n              return axios.post(\"/admin/channels/\".concat(channelId), {\n                'name': newName\n              });\n            case 4:\n              response = _context4.sent;\n              if (!response.data.success) {\n                _context4.next = 11;\n                break;\n              }\n              _context4.next = 8;\n              return _this3.fetchChannels();\n            case 8:\n              notificationStore.setToastNotification(response.data.message, 'success');\n              _context4.next = 15;\n              break;\n            case 11:\n              // Handle logical errors even when the HTTP response was OK\n              // Assuming 'status' and 'message' are part of the error response\n              _response$data3 = response.data, message = _response$data3.message, status = _response$data3.status;\n              errorMessage = 'Failed to add channel due to a server error.';\n              if (status === 'error' && message && message.fallbackMessages) {\n                // Construct a more detailed error message based on validation feedback\n                validationMessages = Object.values(message.fallbackMessages).map(function (msgs) {\n                  return msgs.join(' ');\n                }) // Join messages if there are multiple for one field\n                .join('; '); // Separate field messages with semicolons\n                errorMessage = validationMessages || errorMessage;\n              }\n              notificationStore.setToastNotification(errorMessage, 'error');\n            case 15:\n              _context4.next = 21;\n              break;\n            case 17:\n              _context4.prev = 17;\n              _context4.t0 = _context4[\"catch\"](1);\n              console.error(_context4.t0);\n              notificationStore.setToastNotification('Failed to add channel due to a network or server error.', 'error');\n            case 21:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, null, [[1, 17]]);\n      }))();\n    },\n    setSelectedChannel: function setSelectedChannel(item) {\n      this.selectedChannel = item;\n    },\n    setCurrentType: function setCurrentType(type) {\n      this.currentType = type;\n      this.modalHeader = type + ' list';\n    },\n    clearSelectedChannelAndItems: function clearSelectedChannelAndItems() {\n      this.selectedChannel = null;\n      this.items = [];\n      this.activeItemId = null;\n      this.currentType = '';\n      this.modalHeader = '';\n      this.currentPage = 1;\n      this.itemsPerPage = 10;\n      this.searchTerm = '';\n    },\n    // async searchItems(type, searchTerm = '') {\n    //     this.currentType = type;\n    //     this.searchTerm = searchTerm;\n    //     // Assuming you have a function to perform the fetch; adjust accordingly\n    //     const response = await fetch(`/admin/channels/search/${type}?search=${searchTerm}`);\n    //     const data = await response.json();\n    //     this.items = data.items;\n    // },\n    fetchItems: function fetchItems(type) {\n      var _this4 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        var response, _response, _response2;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              _this4.currentType = type;\n              if (!(_this4.currentType === 'mistStream')) {\n                _context5.next = 11;\n                break;\n              }\n              _context5.next = 4;\n              return fetch(\"/mistStreams\");\n            case 4:\n              response = _context5.sent;\n              _context5.next = 7;\n              return response.json();\n            case 7:\n              _this4.items = _context5.sent;\n              if (_this4.selectedChannel.mist_stream_id) {\n                _this4.activeItemId = _this4.selectedChannel.mist_stream_id;\n              }\n              _context5.next = 29;\n              break;\n            case 11:\n              if (!(_this4.currentType === 'externalSource')) {\n                _context5.next = 21;\n                break;\n              }\n              _context5.next = 14;\n              return fetch(\"/externalSources\");\n            case 14:\n              _response = _context5.sent;\n              _context5.next = 17;\n              return _response.json();\n            case 17:\n              _this4.items = _context5.sent;\n              if (_this4.selectedChannel.channel_external_source_id) {\n                _this4.activeItemId = _this4.selectedChannel.channel_external_source_id;\n              }\n              _context5.next = 29;\n              break;\n            case 21:\n              if (!(_this4.currentType === 'channelPlaylist')) {\n                _context5.next = 29;\n                break;\n              }\n              _context5.next = 24;\n              return fetch(\"/channelPlaylists\");\n            case 24:\n              _response2 = _context5.sent;\n              _context5.next = 27;\n              return _response2.json();\n            case 27:\n              _this4.items = _context5.sent;\n              if (_this4.selectedChannel.channel_playlist_id) {\n                _this4.activeItemId = _this4.selectedChannel.channel_playlist_id;\n              }\n            case 29:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5);\n      }))();\n    },\n    updateActiveItemId: function updateActiveItemId(id) {\n      var _this5 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              _this5.activeItemId = id;\n              if (!(_this5.currentType === 'mistStream')) {\n                _context6.next = 6;\n                break;\n              }\n              _context6.next = 4;\n              return _this5.setMistStream(_this5.selectedChannel, id);\n            case 4:\n              _context6.next = 14;\n              break;\n            case 6:\n              if (!(_this5.currentType === 'channelPlaylist')) {\n                _context6.next = 11;\n                break;\n              }\n              _context6.next = 9;\n              return _this5.setChannelPlaylist(_this5.selectedChannel, id);\n            case 9:\n              _context6.next = 14;\n              break;\n            case 11:\n              if (!(_this5.currentType === 'externalSource')) {\n                _context6.next = 14;\n                break;\n              }\n              _context6.next = 14;\n              return _this5.setExternalSource(_this5.selectedChannel, id);\n            case 14:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee6);\n      }))();\n    },\n    // Add more actions as needed\n    // this next one should probably go in AdminChannelStore\n    setPlaybackPriorityType: function setPlaybackPriorityType(channel, priorityType) {\n      var _this6 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n        var dataToSend, response, index;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) switch (_context7.prev = _context7.next) {\n            case 0:\n              dataToSend = {\n                setPriorityType: priorityType\n              };\n              _context7.prev = 1;\n              _context7.next = 4;\n              return axios.post(\"/admin/channels/\".concat(channel.id, \"/setPlaybackPriorityType\"), dataToSend);\n            case 4:\n              response = _context7.sent;\n              if (response.data.success) {\n                _this6.fetchChannels();\n                // Find the index of the updated channel in the channels array\n                index = _this6.channels.findIndex(function (c) {\n                  return c.id === channel.id;\n                });\n                if (index !== -1) {\n                  // Update the channel in the channels array with the updated data\n                  _this6.channels[index] = response.data.channel;\n                }\n              }\n              _context7.next = 11;\n              break;\n            case 8:\n              _context7.prev = 8;\n              _context7.t0 = _context7[\"catch\"](1);\n              console.error(_context7.t0);\n            case 11:\n            case \"end\":\n              return _context7.stop();\n          }\n        }, _callee7, null, [[1, 8]]);\n      }))();\n    },\n    setMistStream: function setMistStream(channel, mistStreamId) {\n      var _this7 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {\n        var dataToSend, response, index;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) switch (_context8.prev = _context8.next) {\n            case 0:\n              dataToSend = {\n                mistStreamId: mistStreamId\n              };\n              _context8.prev = 1;\n              _context8.next = 4;\n              return axios.post(\"/admin/channels/\".concat(channel.id, \"/setMistStream\"), dataToSend);\n            case 4:\n              response = _context8.sent;\n              if (response.data.success) {\n                _this7.fetchChannels();\n                // Find the index of the updated channel in the channels array\n                index = _this7.channels.findIndex(function (c) {\n                  return c.id === channel.id;\n                });\n                if (index !== -1) {\n                  // Update the channel in the channels array with the updated data\n                  _this7.channels[index] = response.data.channel;\n                }\n              }\n              _context8.next = 11;\n              break;\n            case 8:\n              _context8.prev = 8;\n              _context8.t0 = _context8[\"catch\"](1);\n              console.error(_context8.t0);\n            case 11:\n            case \"end\":\n              return _context8.stop();\n          }\n        }, _callee8, null, [[1, 8]]);\n      }))();\n    },\n    setChannelPlaylist: function setChannelPlaylist(channel, channelPlaylistId) {\n      var _this8 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {\n        var dataToSend, response, index;\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) switch (_context9.prev = _context9.next) {\n            case 0:\n              dataToSend = {\n                channelPlaylistId: channelPlaylistId\n              };\n              _context9.prev = 1;\n              _context9.next = 4;\n              return axios.post(\"/admin/channels/\".concat(channel.id, \"/setChannelPlaylist\"), dataToSend);\n            case 4:\n              response = _context9.sent;\n              if (response.data.success) {\n                _this8.fetchChannels();\n                // Find the index of the updated channel in the channels array\n                index = _this8.channels.findIndex(function (c) {\n                  return c.id === channel.id;\n                });\n                if (index !== -1) {\n                  // Update the channel in the channels array with the updated data\n                  _this8.channels[index] = response.data.channel;\n                }\n              }\n              _context9.next = 11;\n              break;\n            case 8:\n              _context9.prev = 8;\n              _context9.t0 = _context9[\"catch\"](1);\n              console.error(_context9.t0);\n            case 11:\n            case \"end\":\n              return _context9.stop();\n          }\n        }, _callee9, null, [[1, 8]]);\n      }))();\n    },\n    setExternalSource: function setExternalSource(channel, externalSourceId) {\n      var _this9 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {\n        var dataToSend, response, index;\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) switch (_context10.prev = _context10.next) {\n            case 0:\n              dataToSend = {\n                mistStreamId: externalSourceId\n              };\n              _context10.prev = 1;\n              _context10.next = 4;\n              return axios.post(\"/admin/channels/\".concat(channel.id, \"/setExternalSource\"), dataToSend);\n            case 4:\n              response = _context10.sent;\n              if (response.data.success) {\n                _this9.fetchChannels();\n                // Find the index of the updated channel in the channels array\n                index = _this9.channels.findIndex(function (c) {\n                  return c.id === channel.id;\n                });\n                if (index !== -1) {\n                  // Update the channel in the channels array with the updated data\n                  _this9.channels[index] = response.data.channel;\n                }\n              }\n              _context10.next = 11;\n              break;\n            case 8:\n              _context10.prev = 8;\n              _context10.t0 = _context10[\"catch\"](1);\n              console.error(_context10.t0);\n            case 11:\n            case \"end\":\n              return _context10.stop();\n          }\n        }, _callee10, null, [[1, 8]]);\n      }))();\n    },\n    nextPage: function nextPage() {\n      var totalModalPages = Math.ceil(this.items.length / this.itemsPerPage);\n      if (this.currentPage < totalModalPages) this.currentPage++;\n    },\n    prevPage: function prevPage() {\n      if (this.currentPage > 1) this.currentPage--;\n    },\n    setPage: function setPage(page) {\n      this.currentPage = page;\n    },\n    nextChannelsPage: function nextChannelsPage() {\n      var totalModalPages = Math.ceil(this.channels.length / this.itemsPerChannelsPage);\n      if (this.currentChannelsPage < totalModalPages) this.currentChannelsPage++;\n    },\n    prevChannelsPage: function prevChannelsPage() {\n      if (this.currentChannelsPage > 1) this.currentChannelsPage--;\n    },\n    setChannelsPage: function setChannelsPage(page) {\n      this.currentChannelsPage = page;\n    },\n    ////// FIRST PLAY SETTINGS\n    /////////////////////////// admin/update-first-play-settings\n    fetchFirstPlaySettings: function fetchFirstPlaySettings() {\n      var _this10 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11() {\n        var notificationStore, response, _response$data4, message, status, errorMessage, validationMessages;\n        return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n          while (1) switch (_context11.prev = _context11.next) {\n            case 0:\n              notificationStore = (0,_Stores_NotificationStore__WEBPACK_IMPORTED_MODULE_0__.useNotificationStore)();\n              _context11.prev = 1;\n              _context11.next = 4;\n              return axios.post(\"/admin/fetch-first-play-settings\");\n            case 4:\n              response = _context11.sent;\n              if (response.data.success) {\n                // Operation was a success\n                _this10.firstPlaySettings = response.data.firstPlaySettings;\n                notificationStore.setToastNotification(response.data.message, 'success', 1500);\n              } else {\n                // Handle logical errors even when the HTTP response was OK\n                // Assuming 'status' and 'message' are part of the error response\n                _response$data4 = response.data, message = _response$data4.message, status = _response$data4.status;\n                errorMessage = 'Failed to fetch First Play Settings due to a server error.';\n                if (status === 'error' && message && message.fallbackMessages) {\n                  // Construct a more detailed error message based on validation feedback\n                  validationMessages = Object.values(message.fallbackMessages).map(function (msgs) {\n                    return msgs.join(' ');\n                  }) // Join messages if there are multiple for one field\n                  .join('; '); // Separate field messages with semicolons\n                  errorMessage = validationMessages || errorMessage;\n                }\n                notificationStore.setToastNotification(errorMessage, 'error');\n              }\n              _context11.next = 12;\n              break;\n            case 8:\n              _context11.prev = 8;\n              _context11.t0 = _context11[\"catch\"](1);\n              console.error(_context11.t0);\n              notificationStore.setToastNotification('Failed to fetch First Play Settings due to a network or server error.', 'error');\n            case 12:\n            case \"end\":\n              return _context11.stop();\n          }\n        }, _callee11, null, [[1, 8]]);\n      }))();\n    },\n    updateFirstPlaySettings: function updateFirstPlaySettings() {\n      var _this11 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12() {\n        var notificationStore, response, errorMessage;\n        return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n          while (1) switch (_context12.prev = _context12.next) {\n            case 0:\n              notificationStore = (0,_Stores_NotificationStore__WEBPACK_IMPORTED_MODULE_0__.useNotificationStore)();\n              _context12.prev = 1;\n              _context12.next = 4;\n              return axios.patch('/admin/update-first-play-settings', _this11.firstPlaySettings);\n            case 4:\n              response = _context12.sent;\n              if (response.data.success) {\n                // Operation was a success\n                _this11.firstPlaySettings = response.data.firstPlaySettings;\n                _this11.validationErrors = {}; // Clear any existing validation errors\n                notificationStore.setToastNotification(response.data.message, 'success', 1500);\n              } else if (!response.data.success) {\n                // This block might not be necessary if your server correctly uses HTTP status codes for errors\n                _this11.validationErrors = response.data.errors || {};\n                notificationStore.setToastNotification(response.data.message, 'error');\n                // Exit early since we've handled the error case\n              }\n              _context12.next = 11;\n              break;\n            case 8:\n              _context12.prev = 8;\n              _context12.t0 = _context12[\"catch\"](1);\n              // Properly handle the error response\n              if (_context12.t0.response && _context12.t0.response.data) {\n                // Server responded with a non-2xx status code\n                console.log(\"Error response data:\", _context12.t0.response.data);\n                _this11.validationErrors = _context12.t0.response.data.errors || {};\n                errorMessage = _context12.t0.response.data.message || 'Failed to save First Play Settings due to a network or server error.';\n                notificationStore.setToastNotification(errorMessage, 'error');\n              } else {\n                // The request was made but no response was received or other errors occurred\n                notificationStore.setToastNotification('Failed to save First Play Settings due to a network or server error.', 'error');\n              }\n            case 11:\n            case \"end\":\n              return _context12.stop();\n          }\n        }, _callee12, null, [[1, 8]]);\n      }))();\n    },\n    handleErrors: function handleErrors(data) {\n      var notificationStore = (0,_Stores_NotificationStore__WEBPACK_IMPORTED_MODULE_0__.useNotificationStore)();\n      var errorMessage = 'Failed to save First Play Settings due to a server error.';\n      if (data.status === 'error') {\n        if (data.errors) {\n          // Directly use the validation errors from the server response\n          this.validationErrors = data.errors;\n          errorMessage = \"Please check your input.\";\n        } else if (data.message) {\n          // Use the message provided by the server as the error message\n          errorMessage = data.message;\n        }\n        notificationStore.setToastNotification(errorMessage, 'error');\n      }\n    },\n    fetchActiveStreams: function fetchActiveStreams() {\n      var _this12 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13() {\n        var notificationStore, response, _response$data5, message, status, errorMessage, validationMessages;\n        return _regeneratorRuntime().wrap(function _callee13$(_context13) {\n          while (1) switch (_context13.prev = _context13.next) {\n            case 0:\n              notificationStore = (0,_Stores_NotificationStore__WEBPACK_IMPORTED_MODULE_0__.useNotificationStore)();\n              _this12.fetchingActiveStreams = true;\n              _context13.prev = 2;\n              _context13.next = 5;\n              return axios.post(\"/admin/fetch-active-streams\");\n            case 5:\n              response = _context13.sent;\n              if (response.data.success) {\n                // Operation was a success\n                _this12.activeStreams = response.data.activeStreams;\n                notificationStore.setToastNotification(response.data.message, 'success', 1500);\n                _this12.fetchingActiveStreams = false;\n              } else {\n                // Handle logical errors even when the HTTP response was OK\n                // Assuming 'status' and 'message' are part of the error response\n                _response$data5 = response.data, message = _response$data5.message, status = _response$data5.status;\n                errorMessage = 'Failed to fetch active streams due to a server error.';\n                if (status === 'error' && message && message.fallbackMessages) {\n                  // Construct a more detailed error message based on validation feedback\n                  validationMessages = Object.values(message.fallbackMessages).map(function (msgs) {\n                    return msgs.join(' ');\n                  }) // Join messages if there are multiple for one field\n                  .join('; '); // Separate field messages with semicolons\n                  errorMessage = validationMessages || errorMessage;\n                }\n                notificationStore.setToastNotification(errorMessage, 'error');\n                _this12.fetchingActiveStreams = false;\n              }\n              _context13.next = 14;\n              break;\n            case 9:\n              _context13.prev = 9;\n              _context13.t0 = _context13[\"catch\"](2);\n              console.error(_context13.t0);\n              notificationStore.setToastNotification('Failed to fetch Active Streams due to a network or server error.', 'error');\n              _this12.fetchingActiveStreams = false;\n            case 14:\n            case \"end\":\n              return _context13.stop();\n          }\n        }, _callee13, null, [[2, 9]]);\n      }))();\n    },\n    setActiveStreamAsFirstPlay: function setActiveStreamAsFirstPlay(activeStream) {\n      var _this13 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14() {\n        var videoPlayerStore;\n        return _regeneratorRuntime().wrap(function _callee14$(_context14) {\n          while (1) switch (_context14.prev = _context14.next) {\n            case 0:\n              videoPlayerStore = (0,_Stores_VideoPlayerStore__WEBPACK_IMPORTED_MODULE_1__.useVideoPlayerStore)();\n              if (activeStream === 'test') {\n                _this13.firstPlaySettings.customVideoSource = videoPlayerStore.mistServerUri + 'hls/test/index.m3u8';\n                _this13.firstPlaySettings.customVideoSourceType = 'application/x-mpegURL';\n                _this13.firstPlaySettings.customVideoName = 'Test Stream';\n                _this13.firstPlaySettings.customMediaType = 'firstPlay';\n              } else {\n                // axios.post save firstPlaySettings and broadcast an event.\n                // this.\n                // showName, streamName, streamMimeType\n                _this13.firstPlaySettings.customVideoSource = videoPlayerStore.mistServerUri + 'hls/' + activeStream.streamName + '/index.m3u8';\n                _this13.firstPlaySettings.customVideoSourceType = activeStream.streamMimeType;\n                _this13.firstPlaySettings.customVideoName = activeStream.showName;\n                _this13.firstPlaySettings.customMediaType = 'firstPlay';\n              }\n              _context14.next = 4;\n              return _this13.updateFirstPlaySettings();\n            case 4:\n            case \"end\":\n              return _context14.stop();\n          }\n        }, _callee14);\n      }))();\n    }\n  },\n  // Getters (if needed)\n  getters: {\n    filteredItems: function filteredItems(state) {\n      return state.items;\n    },\n    // Placeholder, adjust if you need actual filtering\n    currentItem: function currentItem(state) {\n      return state.items.find(function (item) {\n        return item.id === state.activeItem;\n      });\n    },\n    // setHeader: (state) => state.modalHeader = state.currentType + ' list',\n    paginatedItems: function paginatedItems(state) {\n      var start = (state.currentPage - 1) * state.itemsPerPage;\n      var end = start + state.itemsPerPage;\n      return state.items.slice(start, end);\n    },\n    paginatedChannels: function paginatedChannels(state) {\n      var start = (state.currentChannelsPage - 1) * state.itemsPerChannelsPage;\n      var end = start + state.itemsPerChannelsPage;\n      return state.channels.slice(start, end);\n    },\n    totalModalPages: function totalModalPages(state) {\n      return Math.ceil(state.items.length / state.itemsPerPage);\n    },\n    totalChannelsPages: function totalChannelsPages(state) {\n      return Math.ceil(state.channels.length / state.itemsPerChannelsPage);\n    },\n    // Getter to count active channels\n    activeChannelsCount: function activeChannelsCount(state) {\n      // Use Array.prototype.filter to keep only items with 'active' true,\n      // then use the length property to get the count\n      return state.channels.filter(function (channel) {\n        return channel.active;\n      }).length;\n    }\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LG9CQUFvQixDQUFDO0lBQ3hFLENBQUM7SUFDRDtJQUNBNkssbUJBQW1CLEVBQUUsU0FBQUEsb0JBQUMxSixLQUFLLEVBQUs7TUFDNUI7TUFDQTtNQUNBLE9BQU9BLEtBQUssQ0FBQzdCLFFBQVEsQ0FBQ3dMLE1BQU0sQ0FBQyxVQUFBL0UsT0FBTztRQUFBLE9BQUlBLE9BQU8sQ0FBQ2dGLE1BQU07TUFBQSxFQUFDLENBQUNyTyxNQUFNO0lBQ2xFO0VBQ0o7QUFDSixDQUFDLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvU3RvcmVzL0FkbWluU3RvcmUuanM/OTA2NiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBkZWZpbmVTdG9yZSB9IGZyb20gJ3BpbmlhJ1xuaW1wb3J0IHsgdXNlTm90aWZpY2F0aW9uU3RvcmUgfSBmcm9tICdAL1N0b3Jlcy9Ob3RpZmljYXRpb25TdG9yZSdcbmltcG9ydCB7IHVzZVZpZGVvUGxheWVyU3RvcmUgfSBmcm9tICdAL1N0b3Jlcy9WaWRlb1BsYXllclN0b3JlJ1xuXG5jb25zdCBpbml0aWFsU3RhdGUgPSAoKSA9PiAoe1xuICAgIGNoYW5uZWxzOiBbXSwgLy8gRm9yIEFkbWluIENoYW5uZWxzIHBhZ2VcbiAgICBpdGVtczogW10sIC8vIGZvciBBZG1pbiBDaGFubmVscyBEeW5hbWljTW9kYWwuLi4gRXh0ZXJuYWxTb3VyY2UsIENoYW5uZWxQbGF5bGlzdCwgTWlzdFN0cmVhbVxuICAgIGFjdGl2ZUl0ZW1JZDogbnVsbCxcbiAgICBzZWxlY3RlZENoYW5uZWw6IG51bGwsIC8vIFRoZSBjdXJyZW50bHkgYWN0aXZlIGl0ZW1cbiAgICBjdXJyZW50VHlwZTogJycsIC8vICdleHRlcm5hbFNvdXJjZScsICdjaGFubmVsUGxheWxpc3QnLCAnbWlzdFN0cmVhbSdcbiAgICBzZWFyY2hUZXJtOiAnJyxcbiAgICB0eXBlOiAnJyxcbiAgICBtb2RhbEhlYWRlcjogJycsXG4gICAgY3VycmVudFBhZ2U6IDEsXG4gICAgaXRlbXNQZXJQYWdlOiAxMCxcbiAgICBjdXJyZW50Q2hhbm5lbHNQYWdlOiAxLFxuICAgIGl0ZW1zUGVyQ2hhbm5lbHNQYWdlOiA3LFxuICAgIHNvdXJjZVNlbGVjdG9yOiB7XG4gICAgICAgIHNvdXJjZTogbnVsbCxcbiAgICAgICAgc291cmNlVHlwZTogbnVsbFxuICAgIH0sXG4gICAgZmlyc3RQbGF5U2V0dGluZ3M6IHtcbiAgICAgICAgdXNlQ3VzdG9tVmlkZW86IGZhbHNlLFxuICAgICAgICBjdXN0b21WaWRlb1NvdXJjZTogJycsXG4gICAgICAgIGN1c3RvbVZpZGVvU291cmNlVHlwZTogJycsXG4gICAgfSxcbiAgICB2YWxpZGF0aW9uRXJyb3JzOiB7fSxcbiAgICBjaGVja1NlbmRQcm9jZXNzaW5nOiBmYWxzZSxcbiAgICBhY3RpdmVTdHJlYW1zOiBbXSxcbiAgICBmZXRjaGluZ0FjdGl2ZVN0cmVhbXM6IGZhbHNlLFxuICAgIHNldHRpbmdzRm9ybToge1xuICAgICAgICBzdWJzY3JpcHRpb25TZXR0aW5nczoge1xuICAgICAgICAgICAgbW9udGhseToge1xuICAgICAgICAgICAgICAgIHByaWNlOiAnJyxcbiAgICAgICAgICAgICAgICBhcGlfaWQ6ICcnXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgeWVhcmx5OiB7XG4gICAgICAgICAgICAgICAgcHJpY2U6ICcnLFxuICAgICAgICAgICAgICAgIGFwaV9pZDogJydcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICB9XG59KVxuXG5leHBvcnQgY29uc3QgdXNlQWRtaW5TdG9yZSA9IGRlZmluZVN0b3JlKCdhZG1pblN0b3JlJywge1xuICAgIHN0YXRlOiBpbml0aWFsU3RhdGUsXG4gICAgYWN0aW9uczoge1xuICAgICAgICByZXNldCgpIHtcbiAgICAgICAgICAgIC8vIFJlc2V0IHRoZSBzdG9yZSB0byBpdHMgb3JpZ2luYWwgc3RhdGUgKGNsZWFyIGFsbCBkYXRhKVxuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLCBpbml0aWFsU3RhdGUoKSlcbiAgICAgICAgfSxcblxuICAgICAgICBsb2FkQ2hhbm5lbHMoY2hhbm5lbHMpIHtcbiAgICAgICAgICAgIHRoaXMuY2hhbm5lbHMgPSBjaGFubmVsc1xuICAgICAgICB9LFxuICAgICAgICBzZXRDaGVja1NlbmRQcm9jZXNzaW5nKCkge1xuICAgICAgICAgIHRoaXMuY2hlY2tTZW5kUHJvY2Vzc2luZyA9IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAgdW5zZXRDaGVja1NlbmRQcm9jZXNzaW5nKCkge1xuICAgICAgICAgICAgdGhpcy5jaGVja1NlbmRQcm9jZXNzaW5nID0gZmFsc2VcbiAgICAgICAgfSxcbiAgICAgICAgYXN5bmMgZmV0Y2hDaGFubmVscygpIHtcbiAgICAgICAgICAgIGF3YWl0IGF4aW9zLmdldCgnL2FwaS9jaGFubmVsc19saXN0JylcbiAgICAgICAgICAgICAgICAudGhlbihyZXNwb25zZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2hhbm5lbHMgPSByZXNwb25zZS5kYXRhXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvcilcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICB9LFxuICAgICAgICBhc3luYyB0b2dnbGVDaGFubmVsQWN0aXZlU3RhdHVzKGNoYW5uZWxJZCkge1xuICAgICAgICAgICAgY29uc3Qgbm90aWZpY2F0aW9uU3RvcmUgPSB1c2VOb3RpZmljYXRpb25TdG9yZSgpO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGF4aW9zLnBvc3QoJy9hZG1pbi9jaGFubmVscy8nICsgY2hhbm5lbElkICsgJy90b2dnbGVDaGFubmVsQWN0aXZlJyk7XG4gICAgICAgICAgICAgICAgLy8gRXh0cmFjdCBtZXNzYWdlIGFuZCBzdGF0dXMgZnJvbSB0aGUgcmVzcG9uc2VcbiAgICAgICAgICAgICAgICBjb25zdCB7IG1lc3NhZ2UsIHN0YXR1cyB9ID0gcmVzcG9uc2UuZGF0YTtcbiAgICAgICAgICAgICAgICAvLyBVc2UgdGhlIHN0YXR1cyBmcm9tIHRoZSByZXNwb25zZSBmb3IgdGhlIG5vdGlmaWNhdGlvblxuICAgICAgICAgICAgICAgIG5vdGlmaWNhdGlvblN0b3JlLnNldFRvYXN0Tm90aWZpY2F0aW9uKG1lc3NhZ2UsIHN0YXR1cyk7XG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgICAgIG5vdGlmaWNhdGlvblN0b3JlLnNldFRvYXN0Tm90aWZpY2F0aW9uKCdGYWlsZWQgdG8gdG9nZ2xlIGNoYW5uZWwgc3RhdHVzLicsICdlcnJvcicpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBhc3luYyBhZGRDaGFubmVsKG5hbWUpIHtcbiAgICAgICAgICAgIGNvbnN0IG5vdGlmaWNhdGlvblN0b3JlID0gdXNlTm90aWZpY2F0aW9uU3RvcmUoKTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBheGlvcy5wb3N0KCcvYWRtaW4vY2hhbm5lbHMvYWRkJywgeyduYW1lJzogbmFtZX0pO1xuXG4gICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEuc3VjY2Vzcykge1xuICAgICAgICAgICAgICAgICAgICAvLyBPcGVyYXRpb24gd2FzIGEgc3VjY2Vzc1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmZldGNoQ2hhbm5lbHMoKTtcbiAgICAgICAgICAgICAgICAgICAgbm90aWZpY2F0aW9uU3RvcmUuc2V0VG9hc3ROb3RpZmljYXRpb24ocmVzcG9uc2UuZGF0YS5tZXNzYWdlLCAnc3VjY2VzcycpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEhhbmRsZSBsb2dpY2FsIGVycm9ycyBldmVuIHdoZW4gdGhlIEhUVFAgcmVzcG9uc2Ugd2FzIE9LXG4gICAgICAgICAgICAgICAgICAgIC8vIEFzc3VtaW5nICdzdGF0dXMnIGFuZCAnbWVzc2FnZScgYXJlIHBhcnQgb2YgdGhlIGVycm9yIHJlc3BvbnNlXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgbWVzc2FnZSwgc3RhdHVzIH0gPSByZXNwb25zZS5kYXRhO1xuICAgICAgICAgICAgICAgICAgICBsZXQgZXJyb3JNZXNzYWdlID0gJ0ZhaWxlZCB0byBhZGQgY2hhbm5lbCBkdWUgdG8gYSBzZXJ2ZXIgZXJyb3IuJztcblxuICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdHVzID09PSAnZXJyb3InICYmIG1lc3NhZ2UgJiYgbWVzc2FnZS5mYWxsYmFja01lc3NhZ2VzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBDb25zdHJ1Y3QgYSBtb3JlIGRldGFpbGVkIGVycm9yIG1lc3NhZ2UgYmFzZWQgb24gdmFsaWRhdGlvbiBmZWVkYmFja1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdmFsaWRhdGlvbk1lc3NhZ2VzID0gT2JqZWN0LnZhbHVlcyhtZXNzYWdlLmZhbGxiYWNrTWVzc2FnZXMpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLm1hcChtc2dzID0+IG1zZ3Muam9pbignICcpKSAvLyBKb2luIG1lc3NhZ2VzIGlmIHRoZXJlIGFyZSBtdWx0aXBsZSBmb3Igb25lIGZpZWxkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmpvaW4oJzsgJyk7IC8vIFNlcGFyYXRlIGZpZWxkIG1lc3NhZ2VzIHdpdGggc2VtaWNvbG9uc1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2UgPSB2YWxpZGF0aW9uTWVzc2FnZXMgfHwgZXJyb3JNZXNzYWdlO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgbm90aWZpY2F0aW9uU3RvcmUuc2V0VG9hc3ROb3RpZmljYXRpb24oZXJyb3JNZXNzYWdlLCAnZXJyb3InKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgICAgIG5vdGlmaWNhdGlvblN0b3JlLnNldFRvYXN0Tm90aWZpY2F0aW9uKCdGYWlsZWQgdG8gYWRkIGNoYW5uZWwgZHVlIHRvIGEgbmV0d29yayBvciBzZXJ2ZXIgZXJyb3IuJywgJ2Vycm9yJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGFzeW5jIHVwZGF0ZUNoYW5uZWwoY2hhbm5lbElkLCBuZXdOYW1lKSB7XG4gICAgICAgICAgICBjb25zdCBub3RpZmljYXRpb25TdG9yZSA9IHVzZU5vdGlmaWNhdGlvblN0b3JlKCk7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXhpb3MucG9zdChgL2FkbWluL2NoYW5uZWxzLyR7Y2hhbm5lbElkfWAsIHsnbmFtZSc6IG5ld05hbWV9KTtcblxuICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5kYXRhLnN1Y2Nlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gT3BlcmF0aW9uIHdhcyBhIHN1Y2Nlc3NcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5mZXRjaENoYW5uZWxzKCk7XG4gICAgICAgICAgICAgICAgICAgIG5vdGlmaWNhdGlvblN0b3JlLnNldFRvYXN0Tm90aWZpY2F0aW9uKHJlc3BvbnNlLmRhdGEubWVzc2FnZSwgJ3N1Y2Nlc3MnKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBIYW5kbGUgbG9naWNhbCBlcnJvcnMgZXZlbiB3aGVuIHRoZSBIVFRQIHJlc3BvbnNlIHdhcyBPS1xuICAgICAgICAgICAgICAgICAgICAvLyBBc3N1bWluZyAnc3RhdHVzJyBhbmQgJ21lc3NhZ2UnIGFyZSBwYXJ0IG9mIHRoZSBlcnJvciByZXNwb25zZVxuICAgICAgICAgICAgICAgICAgICBjb25zdCB7IG1lc3NhZ2UsIHN0YXR1cyB9ID0gcmVzcG9uc2UuZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGVycm9yTWVzc2FnZSA9ICdGYWlsZWQgdG8gYWRkIGNoYW5uZWwgZHVlIHRvIGEgc2VydmVyIGVycm9yLic7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXR1cyA9PT0gJ2Vycm9yJyAmJiBtZXNzYWdlICYmIG1lc3NhZ2UuZmFsbGJhY2tNZXNzYWdlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ29uc3RydWN0IGEgbW9yZSBkZXRhaWxlZCBlcnJvciBtZXNzYWdlIGJhc2VkIG9uIHZhbGlkYXRpb24gZmVlZGJhY2tcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbGlkYXRpb25NZXNzYWdlcyA9IE9iamVjdC52YWx1ZXMobWVzc2FnZS5mYWxsYmFja01lc3NhZ2VzKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAobXNncyA9PiBtc2dzLmpvaW4oJyAnKSkgLy8gSm9pbiBtZXNzYWdlcyBpZiB0aGVyZSBhcmUgbXVsdGlwbGUgZm9yIG9uZSBmaWVsZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5qb2luKCc7ICcpOyAvLyBTZXBhcmF0ZSBmaWVsZCBtZXNzYWdlcyB3aXRoIHNlbWljb2xvbnNcblxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlID0gdmFsaWRhdGlvbk1lc3NhZ2VzIHx8IGVycm9yTWVzc2FnZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIG5vdGlmaWNhdGlvblN0b3JlLnNldFRvYXN0Tm90aWZpY2F0aW9uKGVycm9yTWVzc2FnZSwgJ2Vycm9yJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICAgICAgICAgICAgICBub3RpZmljYXRpb25TdG9yZS5zZXRUb2FzdE5vdGlmaWNhdGlvbignRmFpbGVkIHRvIGFkZCBjaGFubmVsIGR1ZSB0byBhIG5ldHdvcmsgb3Igc2VydmVyIGVycm9yLicsICdlcnJvcicpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBzZXRTZWxlY3RlZENoYW5uZWwoaXRlbSkge1xuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZENoYW5uZWwgPSBpdGVtXG4gICAgICAgIH0sXG4gICAgICAgIHNldEN1cnJlbnRUeXBlKHR5cGUpIHtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudFR5cGUgPSB0eXBlXG4gICAgICAgICAgICB0aGlzLm1vZGFsSGVhZGVyID0gdHlwZSArICcgbGlzdCdcbiAgICAgICAgfSxcbiAgICAgICAgY2xlYXJTZWxlY3RlZENoYW5uZWxBbmRJdGVtcygpIHtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRDaGFubmVsID0gbnVsbFxuICAgICAgICAgICAgdGhpcy5pdGVtcyA9IFtdXG4gICAgICAgICAgICB0aGlzLmFjdGl2ZUl0ZW1JZCA9IG51bGxcbiAgICAgICAgICAgIHRoaXMuY3VycmVudFR5cGUgPSAnJ1xuICAgICAgICAgICAgdGhpcy5tb2RhbEhlYWRlciA9ICcnXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRQYWdlID0gMVxuICAgICAgICAgICAgdGhpcy5pdGVtc1BlclBhZ2UgPSAxMFxuICAgICAgICAgICAgdGhpcy5zZWFyY2hUZXJtID0gJydcbiAgICAgICAgfSxcbiAgICAgICAgLy8gYXN5bmMgc2VhcmNoSXRlbXModHlwZSwgc2VhcmNoVGVybSA9ICcnKSB7XG4gICAgICAgIC8vICAgICB0aGlzLmN1cnJlbnRUeXBlID0gdHlwZTtcbiAgICAgICAgLy8gICAgIHRoaXMuc2VhcmNoVGVybSA9IHNlYXJjaFRlcm07XG4gICAgICAgIC8vICAgICAvLyBBc3N1bWluZyB5b3UgaGF2ZSBhIGZ1bmN0aW9uIHRvIHBlcmZvcm0gdGhlIGZldGNoOyBhZGp1c3QgYWNjb3JkaW5nbHlcbiAgICAgICAgLy8gICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYC9hZG1pbi9jaGFubmVscy9zZWFyY2gvJHt0eXBlfT9zZWFyY2g9JHtzZWFyY2hUZXJtfWApO1xuICAgICAgICAvLyAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICAgICAgLy8gICAgIHRoaXMuaXRlbXMgPSBkYXRhLml0ZW1zO1xuICAgICAgICAvLyB9LFxuICAgICAgICBhc3luYyBmZXRjaEl0ZW1zKHR5cGUpIHtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudFR5cGUgPSB0eXBlXG4gICAgICAgICAgICBpZiAodGhpcy5jdXJyZW50VHlwZSA9PT0gJ21pc3RTdHJlYW0nKSB7XG4gICAgICAgICAgICAgICAgLy8gcmV0cmlldmUgYWxsIG1pc3RTdHJlYW1zIHBhZ2luYXRlZC5cbiAgICAgICAgICAgICAgICAvLyBDYW4gVnVlIHNlYXJjaCB0aHJvdWdoIHRoZSBpdGVtcz9cbiAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAvbWlzdFN0cmVhbXNgKVxuICAgICAgICAgICAgICAgIHRoaXMuaXRlbXMgPSBhd2FpdCByZXNwb25zZS5qc29uKClcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zZWxlY3RlZENoYW5uZWwubWlzdF9zdHJlYW1faWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hY3RpdmVJdGVtSWQgPSB0aGlzLnNlbGVjdGVkQ2hhbm5lbC5taXN0X3N0cmVhbV9pZFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5jdXJyZW50VHlwZSA9PT0gJ2V4dGVybmFsU291cmNlJykge1xuICAgICAgICAgICAgICAgIC8vIHJldHJpZXZlIGFsbCBleHRlcm5hbFNvdXJjZXNcbiAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAvZXh0ZXJuYWxTb3VyY2VzYClcbiAgICAgICAgICAgICAgICB0aGlzLml0ZW1zID0gYXdhaXQgcmVzcG9uc2UuanNvbigpXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc2VsZWN0ZWRDaGFubmVsLmNoYW5uZWxfZXh0ZXJuYWxfc291cmNlX2lkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWN0aXZlSXRlbUlkID0gdGhpcy5zZWxlY3RlZENoYW5uZWwuY2hhbm5lbF9leHRlcm5hbF9zb3VyY2VfaWRcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuY3VycmVudFR5cGUgPT09ICdjaGFubmVsUGxheWxpc3QnKSB7XG4gICAgICAgICAgICAgICAgLy8gcmV0cmlldmUgYWxsIGNoYW5uZWxQbGF5bGlzdHNcbiAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAvY2hhbm5lbFBsYXlsaXN0c2ApXG4gICAgICAgICAgICAgICAgdGhpcy5pdGVtcyA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKVxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnNlbGVjdGVkQ2hhbm5lbC5jaGFubmVsX3BsYXlsaXN0X2lkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWN0aXZlSXRlbUlkID0gdGhpcy5zZWxlY3RlZENoYW5uZWwuY2hhbm5lbF9wbGF5bGlzdF9pZFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEFzc3VtaW5nIHlvdSBoYXZlIGEgZnVuY3Rpb24gdG8gcGVyZm9ybSB0aGUgZmV0Y2g7IGFkanVzdCBhY2NvcmRpbmdseVxuICAgICAgICAgICAgLy8gY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgL2FkbWluL2NoYW5uZWxzL3NlYXJjaC8ke3R5cGV9P3NlYXJjaD0ke3NlYXJjaFRlcm19YCk7XG4gICAgICAgICAgICAvLyBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgICAgICAgICAgLy8gdGhpcy5pdGVtcyA9IGRhdGEuaXRlbXM7XG4gICAgICAgIH0sXG4gICAgICAgIGFzeW5jIHVwZGF0ZUFjdGl2ZUl0ZW1JZChpZCkge1xuICAgICAgICAgICAgdGhpcy5hY3RpdmVJdGVtSWQgPSBpZFxuICAgICAgICAgICAgaWYgKHRoaXMuY3VycmVudFR5cGUgPT09ICdtaXN0U3RyZWFtJykge1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuc2V0TWlzdFN0cmVhbSh0aGlzLnNlbGVjdGVkQ2hhbm5lbCwgaWQpXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuY3VycmVudFR5cGUgPT09ICdjaGFubmVsUGxheWxpc3QnKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5zZXRDaGFubmVsUGxheWxpc3QodGhpcy5zZWxlY3RlZENoYW5uZWwsIGlkKVxuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmN1cnJlbnRUeXBlID09PSAnZXh0ZXJuYWxTb3VyY2UnKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5zZXRFeHRlcm5hbFNvdXJjZSh0aGlzLnNlbGVjdGVkQ2hhbm5lbCwgaWQpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIC8vIEFkZCBtb3JlIGFjdGlvbnMgYXMgbmVlZGVkXG4gICAgICAgIC8vIHRoaXMgbmV4dCBvbmUgc2hvdWxkIHByb2JhYmx5IGdvIGluIEFkbWluQ2hhbm5lbFN0b3JlXG4gICAgICAgIGFzeW5jIHNldFBsYXliYWNrUHJpb3JpdHlUeXBlKGNoYW5uZWwsIHByaW9yaXR5VHlwZSkge1xuICAgICAgICAgICAgY29uc3QgZGF0YVRvU2VuZCA9IHtzZXRQcmlvcml0eVR5cGU6IHByaW9yaXR5VHlwZX1cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBheGlvcy5wb3N0KGAvYWRtaW4vY2hhbm5lbHMvJHtjaGFubmVsLmlkfS9zZXRQbGF5YmFja1ByaW9yaXR5VHlwZWAsIGRhdGFUb1NlbmQpXG4gICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEuc3VjY2Vzcykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmZldGNoQ2hhbm5lbHMoKVxuICAgICAgICAgICAgICAgICAgICAvLyBGaW5kIHRoZSBpbmRleCBvZiB0aGUgdXBkYXRlZCBjaGFubmVsIGluIHRoZSBjaGFubmVscyBhcnJheVxuICAgICAgICAgICAgICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMuY2hhbm5lbHMuZmluZEluZGV4KGMgPT4gYy5pZCA9PT0gY2hhbm5lbC5pZClcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVXBkYXRlIHRoZSBjaGFubmVsIGluIHRoZSBjaGFubmVscyBhcnJheSB3aXRoIHRoZSB1cGRhdGVkIGRhdGFcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2hhbm5lbHNbaW5kZXhdID0gcmVzcG9uc2UuZGF0YS5jaGFubmVsXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGFzeW5jIHNldE1pc3RTdHJlYW0oY2hhbm5lbCwgbWlzdFN0cmVhbUlkKSB7XG4gICAgICAgICAgICBjb25zdCBkYXRhVG9TZW5kID0ge21pc3RTdHJlYW1JZDogbWlzdFN0cmVhbUlkfVxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGF4aW9zLnBvc3QoYC9hZG1pbi9jaGFubmVscy8ke2NoYW5uZWwuaWR9L3NldE1pc3RTdHJlYW1gLCBkYXRhVG9TZW5kKVxuICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5kYXRhLnN1Y2Nlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mZXRjaENoYW5uZWxzKClcbiAgICAgICAgICAgICAgICAgICAgLy8gRmluZCB0aGUgaW5kZXggb2YgdGhlIHVwZGF0ZWQgY2hhbm5lbCBpbiB0aGUgY2hhbm5lbHMgYXJyYXlcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaW5kZXggPSB0aGlzLmNoYW5uZWxzLmZpbmRJbmRleChjID0+IGMuaWQgPT09IGNoYW5uZWwuaWQpXG4gICAgICAgICAgICAgICAgICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSB0aGUgY2hhbm5lbCBpbiB0aGUgY2hhbm5lbHMgYXJyYXkgd2l0aCB0aGUgdXBkYXRlZCBkYXRhXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNoYW5uZWxzW2luZGV4XSA9IHJlc3BvbnNlLmRhdGEuY2hhbm5lbFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBhc3luYyBzZXRDaGFubmVsUGxheWxpc3QoY2hhbm5lbCwgY2hhbm5lbFBsYXlsaXN0SWQpIHtcbiAgICAgICAgICAgIGNvbnN0IGRhdGFUb1NlbmQgPSB7Y2hhbm5lbFBsYXlsaXN0SWQ6IGNoYW5uZWxQbGF5bGlzdElkfVxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGF4aW9zLnBvc3QoYC9hZG1pbi9jaGFubmVscy8ke2NoYW5uZWwuaWR9L3NldENoYW5uZWxQbGF5bGlzdGAsIGRhdGFUb1NlbmQpXG4gICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEuc3VjY2Vzcykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmZldGNoQ2hhbm5lbHMoKVxuICAgICAgICAgICAgICAgICAgICAvLyBGaW5kIHRoZSBpbmRleCBvZiB0aGUgdXBkYXRlZCBjaGFubmVsIGluIHRoZSBjaGFubmVscyBhcnJheVxuICAgICAgICAgICAgICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMuY2hhbm5lbHMuZmluZEluZGV4KGMgPT4gYy5pZCA9PT0gY2hhbm5lbC5pZClcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVXBkYXRlIHRoZSBjaGFubmVsIGluIHRoZSBjaGFubmVscyBhcnJheSB3aXRoIHRoZSB1cGRhdGVkIGRhdGFcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2hhbm5lbHNbaW5kZXhdID0gcmVzcG9uc2UuZGF0YS5jaGFubmVsXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGFzeW5jIHNldEV4dGVybmFsU291cmNlKGNoYW5uZWwsIGV4dGVybmFsU291cmNlSWQpIHtcbiAgICAgICAgICAgIGNvbnN0IGRhdGFUb1NlbmQgPSB7bWlzdFN0cmVhbUlkOiBleHRlcm5hbFNvdXJjZUlkfVxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGF4aW9zLnBvc3QoYC9hZG1pbi9jaGFubmVscy8ke2NoYW5uZWwuaWR9L3NldEV4dGVybmFsU291cmNlYCwgZGF0YVRvU2VuZClcbiAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YS5zdWNjZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZmV0Y2hDaGFubmVscygpXG4gICAgICAgICAgICAgICAgICAgIC8vIEZpbmQgdGhlIGluZGV4IG9mIHRoZSB1cGRhdGVkIGNoYW5uZWwgaW4gdGhlIGNoYW5uZWxzIGFycmF5XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy5jaGFubmVscy5maW5kSW5kZXgoYyA9PiBjLmlkID09PSBjaGFubmVsLmlkKVxuICAgICAgICAgICAgICAgICAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBVcGRhdGUgdGhlIGNoYW5uZWwgaW4gdGhlIGNoYW5uZWxzIGFycmF5IHdpdGggdGhlIHVwZGF0ZWQgZGF0YVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGFubmVsc1tpbmRleF0gPSByZXNwb25zZS5kYXRhLmNoYW5uZWxcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcilcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbmV4dFBhZ2UoKSB7XG4gICAgICAgICAgICBjb25zdCB0b3RhbE1vZGFsUGFnZXMgPSBNYXRoLmNlaWwodGhpcy5pdGVtcy5sZW5ndGggLyB0aGlzLml0ZW1zUGVyUGFnZSlcbiAgICAgICAgICAgIGlmICh0aGlzLmN1cnJlbnRQYWdlIDwgdG90YWxNb2RhbFBhZ2VzKSB0aGlzLmN1cnJlbnRQYWdlKytcbiAgICAgICAgfSxcbiAgICAgICAgcHJldlBhZ2UoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5jdXJyZW50UGFnZSA+IDEpIHRoaXMuY3VycmVudFBhZ2UtLVxuICAgICAgICB9LFxuICAgICAgICBzZXRQYWdlKHBhZ2UpIHtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudFBhZ2UgPSBwYWdlXG4gICAgICAgIH0sXG4gICAgICAgIG5leHRDaGFubmVsc1BhZ2UoKSB7XG4gICAgICAgICAgICBjb25zdCB0b3RhbE1vZGFsUGFnZXMgPSBNYXRoLmNlaWwodGhpcy5jaGFubmVscy5sZW5ndGggLyB0aGlzLml0ZW1zUGVyQ2hhbm5lbHNQYWdlKVxuICAgICAgICAgICAgaWYgKHRoaXMuY3VycmVudENoYW5uZWxzUGFnZSA8IHRvdGFsTW9kYWxQYWdlcykgdGhpcy5jdXJyZW50Q2hhbm5lbHNQYWdlKytcbiAgICAgICAgfSxcbiAgICAgICAgcHJldkNoYW5uZWxzUGFnZSgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmN1cnJlbnRDaGFubmVsc1BhZ2UgPiAxKSB0aGlzLmN1cnJlbnRDaGFubmVsc1BhZ2UtLVxuICAgICAgICB9LFxuICAgICAgICBzZXRDaGFubmVsc1BhZ2UocGFnZSkge1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50Q2hhbm5lbHNQYWdlID0gcGFnZVxuICAgICAgICB9LFxuICAgICAgICAvLy8vLy8gRklSU1QgUExBWSBTRVRUSU5HU1xuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8gYWRtaW4vdXBkYXRlLWZpcnN0LXBsYXktc2V0dGluZ3NcbiAgICAgICAgYXN5bmMgZmV0Y2hGaXJzdFBsYXlTZXR0aW5ncygpIHtcbiAgICAgICAgICAgIGNvbnN0IG5vdGlmaWNhdGlvblN0b3JlID0gdXNlTm90aWZpY2F0aW9uU3RvcmUoKTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBheGlvcy5wb3N0KGAvYWRtaW4vZmV0Y2gtZmlyc3QtcGxheS1zZXR0aW5nc2ApO1xuICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5kYXRhLnN1Y2Nlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gT3BlcmF0aW9uIHdhcyBhIHN1Y2Nlc3NcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5maXJzdFBsYXlTZXR0aW5ncyA9IHJlc3BvbnNlLmRhdGEuZmlyc3RQbGF5U2V0dGluZ3NcbiAgICAgICAgICAgICAgICAgICAgbm90aWZpY2F0aW9uU3RvcmUuc2V0VG9hc3ROb3RpZmljYXRpb24ocmVzcG9uc2UuZGF0YS5tZXNzYWdlLCAnc3VjY2VzcycsIDE1MDApO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEhhbmRsZSBsb2dpY2FsIGVycm9ycyBldmVuIHdoZW4gdGhlIEhUVFAgcmVzcG9uc2Ugd2FzIE9LXG4gICAgICAgICAgICAgICAgICAgIC8vIEFzc3VtaW5nICdzdGF0dXMnIGFuZCAnbWVzc2FnZScgYXJlIHBhcnQgb2YgdGhlIGVycm9yIHJlc3BvbnNlXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgbWVzc2FnZSwgc3RhdHVzIH0gPSByZXNwb25zZS5kYXRhO1xuICAgICAgICAgICAgICAgICAgICBsZXQgZXJyb3JNZXNzYWdlID0gJ0ZhaWxlZCB0byBmZXRjaCBGaXJzdCBQbGF5IFNldHRpbmdzIGR1ZSB0byBhIHNlcnZlciBlcnJvci4nO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChzdGF0dXMgPT09ICdlcnJvcicgJiYgbWVzc2FnZSAmJiBtZXNzYWdlLmZhbGxiYWNrTWVzc2FnZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIENvbnN0cnVjdCBhIG1vcmUgZGV0YWlsZWQgZXJyb3IgbWVzc2FnZSBiYXNlZCBvbiB2YWxpZGF0aW9uIGZlZWRiYWNrXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB2YWxpZGF0aW9uTWVzc2FnZXMgPSBPYmplY3QudmFsdWVzKG1lc3NhZ2UuZmFsbGJhY2tNZXNzYWdlcylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAubWFwKG1zZ3MgPT4gbXNncy5qb2luKCcgJykpIC8vIEpvaW4gbWVzc2FnZXMgaWYgdGhlcmUgYXJlIG11bHRpcGxlIGZvciBvbmUgZmllbGRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuam9pbignOyAnKTsgLy8gU2VwYXJhdGUgZmllbGQgbWVzc2FnZXMgd2l0aCBzZW1pY29sb25zXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZSA9IHZhbGlkYXRpb25NZXNzYWdlcyB8fCBlcnJvck1lc3NhZ2U7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBub3RpZmljYXRpb25TdG9yZS5zZXRUb2FzdE5vdGlmaWNhdGlvbihlcnJvck1lc3NhZ2UsICdlcnJvcicpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgICAgICAgICAgICAgbm90aWZpY2F0aW9uU3RvcmUuc2V0VG9hc3ROb3RpZmljYXRpb24oJ0ZhaWxlZCB0byBmZXRjaCBGaXJzdCBQbGF5IFNldHRpbmdzIGR1ZSB0byBhIG5ldHdvcmsgb3Igc2VydmVyIGVycm9yLicsICdlcnJvcicpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBhc3luYyB1cGRhdGVGaXJzdFBsYXlTZXR0aW5ncygpIHtcbiAgICAgICAgICAgIGNvbnN0IG5vdGlmaWNhdGlvblN0b3JlID0gdXNlTm90aWZpY2F0aW9uU3RvcmUoKTtcblxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGF4aW9zLnBhdGNoKCcvYWRtaW4vdXBkYXRlLWZpcnN0LXBsYXktc2V0dGluZ3MnLCB0aGlzLmZpcnN0UGxheVNldHRpbmdzKTtcblxuICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5kYXRhLnN1Y2Nlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gT3BlcmF0aW9uIHdhcyBhIHN1Y2Nlc3NcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5maXJzdFBsYXlTZXR0aW5ncyA9IHJlc3BvbnNlLmRhdGEuZmlyc3RQbGF5U2V0dGluZ3M7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmFsaWRhdGlvbkVycm9ycyA9IHt9OyAvLyBDbGVhciBhbnkgZXhpc3RpbmcgdmFsaWRhdGlvbiBlcnJvcnNcbiAgICAgICAgICAgICAgICAgICAgbm90aWZpY2F0aW9uU3RvcmUuc2V0VG9hc3ROb3RpZmljYXRpb24ocmVzcG9uc2UuZGF0YS5tZXNzYWdlLCAnc3VjY2VzcycsIDE1MDApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICghcmVzcG9uc2UuZGF0YS5zdWNjZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFRoaXMgYmxvY2sgbWlnaHQgbm90IGJlIG5lY2Vzc2FyeSBpZiB5b3VyIHNlcnZlciBjb3JyZWN0bHkgdXNlcyBIVFRQIHN0YXR1cyBjb2RlcyBmb3IgZXJyb3JzXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmFsaWRhdGlvbkVycm9ycyA9IHJlc3BvbnNlLmRhdGEuZXJyb3JzIHx8IHt9O1xuICAgICAgICAgICAgICAgICAgICBub3RpZmljYXRpb25TdG9yZS5zZXRUb2FzdE5vdGlmaWNhdGlvbihyZXNwb25zZS5kYXRhLm1lc3NhZ2UsICdlcnJvcicpO1xuICAgICAgICAgICAgICAgICAgICAgLy8gRXhpdCBlYXJseSBzaW5jZSB3ZSd2ZSBoYW5kbGVkIHRoZSBlcnJvciBjYXNlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAvLyBQcm9wZXJseSBoYW5kbGUgdGhlIGVycm9yIHJlc3BvbnNlXG4gICAgICAgICAgICAgICAgaWYgKGVycm9yLnJlc3BvbnNlICYmIGVycm9yLnJlc3BvbnNlLmRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gU2VydmVyIHJlc3BvbmRlZCB3aXRoIGEgbm9uLTJ4eCBzdGF0dXMgY29kZVxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkVycm9yIHJlc3BvbnNlIGRhdGE6XCIsIGVycm9yLnJlc3BvbnNlLmRhdGEpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnZhbGlkYXRpb25FcnJvcnMgPSBlcnJvci5yZXNwb25zZS5kYXRhLmVycm9ycyB8fCB7fTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZXJyb3JNZXNzYWdlID0gZXJyb3IucmVzcG9uc2UuZGF0YS5tZXNzYWdlIHx8ICdGYWlsZWQgdG8gc2F2ZSBGaXJzdCBQbGF5IFNldHRpbmdzIGR1ZSB0byBhIG5ldHdvcmsgb3Igc2VydmVyIGVycm9yLic7XG4gICAgICAgICAgICAgICAgICAgIG5vdGlmaWNhdGlvblN0b3JlLnNldFRvYXN0Tm90aWZpY2F0aW9uKGVycm9yTWVzc2FnZSwgJ2Vycm9yJyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhlIHJlcXVlc3Qgd2FzIG1hZGUgYnV0IG5vIHJlc3BvbnNlIHdhcyByZWNlaXZlZCBvciBvdGhlciBlcnJvcnMgb2NjdXJyZWRcbiAgICAgICAgICAgICAgICAgICAgbm90aWZpY2F0aW9uU3RvcmUuc2V0VG9hc3ROb3RpZmljYXRpb24oJ0ZhaWxlZCB0byBzYXZlIEZpcnN0IFBsYXkgU2V0dGluZ3MgZHVlIHRvIGEgbmV0d29yayBvciBzZXJ2ZXIgZXJyb3IuJywgJ2Vycm9yJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBoYW5kbGVFcnJvcnMoZGF0YSkge1xuICAgICAgICAgICAgY29uc3Qgbm90aWZpY2F0aW9uU3RvcmUgPSB1c2VOb3RpZmljYXRpb25TdG9yZSgpO1xuICAgICAgICAgICAgbGV0IGVycm9yTWVzc2FnZSA9ICdGYWlsZWQgdG8gc2F2ZSBGaXJzdCBQbGF5IFNldHRpbmdzIGR1ZSB0byBhIHNlcnZlciBlcnJvci4nO1xuXG4gICAgICAgICAgICBpZiAoZGF0YS5zdGF0dXMgPT09ICdlcnJvcicpIHtcbiAgICAgICAgICAgICAgICBpZiAoZGF0YS5lcnJvcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gRGlyZWN0bHkgdXNlIHRoZSB2YWxpZGF0aW9uIGVycm9ycyBmcm9tIHRoZSBzZXJ2ZXIgcmVzcG9uc2VcbiAgICAgICAgICAgICAgICAgICAgdGhpcy52YWxpZGF0aW9uRXJyb3JzID0gZGF0YS5lcnJvcnM7XG4gICAgICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZSA9IFwiUGxlYXNlIGNoZWNrIHlvdXIgaW5wdXQuXCI7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkYXRhLm1lc3NhZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVXNlIHRoZSBtZXNzYWdlIHByb3ZpZGVkIGJ5IHRoZSBzZXJ2ZXIgYXMgdGhlIGVycm9yIG1lc3NhZ2VcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlID0gZGF0YS5tZXNzYWdlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIG5vdGlmaWNhdGlvblN0b3JlLnNldFRvYXN0Tm90aWZpY2F0aW9uKGVycm9yTWVzc2FnZSwgJ2Vycm9yJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGFzeW5jIGZldGNoQWN0aXZlU3RyZWFtcygpIHtcbiAgICAgICAgICAgIGNvbnN0IG5vdGlmaWNhdGlvblN0b3JlID0gdXNlTm90aWZpY2F0aW9uU3RvcmUoKTtcbiAgICAgICAgICAgIHRoaXMuZmV0Y2hpbmdBY3RpdmVTdHJlYW1zID0gdHJ1ZVxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGF4aW9zLnBvc3QoYC9hZG1pbi9mZXRjaC1hY3RpdmUtc3RyZWFtc2ApO1xuICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5kYXRhLnN1Y2Nlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gT3BlcmF0aW9uIHdhcyBhIHN1Y2Nlc3NcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hY3RpdmVTdHJlYW1zID0gcmVzcG9uc2UuZGF0YS5hY3RpdmVTdHJlYW1zXG4gICAgICAgICAgICAgICAgICAgIG5vdGlmaWNhdGlvblN0b3JlLnNldFRvYXN0Tm90aWZpY2F0aW9uKHJlc3BvbnNlLmRhdGEubWVzc2FnZSwgJ3N1Y2Nlc3MnLCAxNTAwKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mZXRjaGluZ0FjdGl2ZVN0cmVhbXMgPSBmYWxzZVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEhhbmRsZSBsb2dpY2FsIGVycm9ycyBldmVuIHdoZW4gdGhlIEhUVFAgcmVzcG9uc2Ugd2FzIE9LXG4gICAgICAgICAgICAgICAgICAgIC8vIEFzc3VtaW5nICdzdGF0dXMnIGFuZCAnbWVzc2FnZScgYXJlIHBhcnQgb2YgdGhlIGVycm9yIHJlc3BvbnNlXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgbWVzc2FnZSwgc3RhdHVzIH0gPSByZXNwb25zZS5kYXRhO1xuICAgICAgICAgICAgICAgICAgICBsZXQgZXJyb3JNZXNzYWdlID0gJ0ZhaWxlZCB0byBmZXRjaCBhY3RpdmUgc3RyZWFtcyBkdWUgdG8gYSBzZXJ2ZXIgZXJyb3IuJztcblxuICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdHVzID09PSAnZXJyb3InICYmIG1lc3NhZ2UgJiYgbWVzc2FnZS5mYWxsYmFja01lc3NhZ2VzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBDb25zdHJ1Y3QgYSBtb3JlIGRldGFpbGVkIGVycm9yIG1lc3NhZ2UgYmFzZWQgb24gdmFsaWRhdGlvbiBmZWVkYmFja1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdmFsaWRhdGlvbk1lc3NhZ2VzID0gT2JqZWN0LnZhbHVlcyhtZXNzYWdlLmZhbGxiYWNrTWVzc2FnZXMpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLm1hcChtc2dzID0+IG1zZ3Muam9pbignICcpKSAvLyBKb2luIG1lc3NhZ2VzIGlmIHRoZXJlIGFyZSBtdWx0aXBsZSBmb3Igb25lIGZpZWxkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmpvaW4oJzsgJyk7IC8vIFNlcGFyYXRlIGZpZWxkIG1lc3NhZ2VzIHdpdGggc2VtaWNvbG9uc1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2UgPSB2YWxpZGF0aW9uTWVzc2FnZXMgfHwgZXJyb3JNZXNzYWdlO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgbm90aWZpY2F0aW9uU3RvcmUuc2V0VG9hc3ROb3RpZmljYXRpb24oZXJyb3JNZXNzYWdlLCAnZXJyb3InKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mZXRjaGluZ0FjdGl2ZVN0cmVhbXMgPSBmYWxzZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgICAgICAgICAgICAgbm90aWZpY2F0aW9uU3RvcmUuc2V0VG9hc3ROb3RpZmljYXRpb24oJ0ZhaWxlZCB0byBmZXRjaCBBY3RpdmUgU3RyZWFtcyBkdWUgdG8gYSBuZXR3b3JrIG9yIHNlcnZlciBlcnJvci4nLCAnZXJyb3InKTtcbiAgICAgICAgICAgICAgICB0aGlzLmZldGNoaW5nQWN0aXZlU3RyZWFtcyA9IGZhbHNlXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGFzeW5jIHNldEFjdGl2ZVN0cmVhbUFzRmlyc3RQbGF5KGFjdGl2ZVN0cmVhbSkge1xuICAgICAgICAgICAgY29uc3QgdmlkZW9QbGF5ZXJTdG9yZSA9IHVzZVZpZGVvUGxheWVyU3RvcmUoKTtcbiAgICAgICAgICAgIGlmIChhY3RpdmVTdHJlYW0gPT09ICd0ZXN0Jykge1xuICAgICAgICAgICAgICAgIHRoaXMuZmlyc3RQbGF5U2V0dGluZ3MuY3VzdG9tVmlkZW9Tb3VyY2UgPSB2aWRlb1BsYXllclN0b3JlLm1pc3RTZXJ2ZXJVcmkgKyAnaGxzL3Rlc3QvaW5kZXgubTN1OCdcbiAgICAgICAgICAgICAgICB0aGlzLmZpcnN0UGxheVNldHRpbmdzLmN1c3RvbVZpZGVvU291cmNlVHlwZSA9ICdhcHBsaWNhdGlvbi94LW1wZWdVUkwnXG4gICAgICAgICAgICAgICAgdGhpcy5maXJzdFBsYXlTZXR0aW5ncy5jdXN0b21WaWRlb05hbWUgPSAnVGVzdCBTdHJlYW0nXG4gICAgICAgICAgICAgICAgdGhpcy5maXJzdFBsYXlTZXR0aW5ncy5jdXN0b21NZWRpYVR5cGUgPSAnZmlyc3RQbGF5J1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBheGlvcy5wb3N0IHNhdmUgZmlyc3RQbGF5U2V0dGluZ3MgYW5kIGJyb2FkY2FzdCBhbiBldmVudC5cbiAgICAgICAgICAgICAgICAvLyB0aGlzLlxuICAgICAgICAgICAgICAgIC8vIHNob3dOYW1lLCBzdHJlYW1OYW1lLCBzdHJlYW1NaW1lVHlwZVxuICAgICAgICAgICAgICAgIHRoaXMuZmlyc3RQbGF5U2V0dGluZ3MuY3VzdG9tVmlkZW9Tb3VyY2UgPSB2aWRlb1BsYXllclN0b3JlLm1pc3RTZXJ2ZXJVcmkgKyAnaGxzLycgKyBhY3RpdmVTdHJlYW0uc3RyZWFtTmFtZSArICcvaW5kZXgubTN1OCdcbiAgICAgICAgICAgICAgICB0aGlzLmZpcnN0UGxheVNldHRpbmdzLmN1c3RvbVZpZGVvU291cmNlVHlwZSA9IGFjdGl2ZVN0cmVhbS5zdHJlYW1NaW1lVHlwZVxuICAgICAgICAgICAgICAgIHRoaXMuZmlyc3RQbGF5U2V0dGluZ3MuY3VzdG9tVmlkZW9OYW1lID0gYWN0aXZlU3RyZWFtLnNob3dOYW1lXG4gICAgICAgICAgICAgICAgdGhpcy5maXJzdFBsYXlTZXR0aW5ncy5jdXN0b21NZWRpYVR5cGUgPSAnZmlyc3RQbGF5J1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYXdhaXQgdGhpcy51cGRhdGVGaXJzdFBsYXlTZXR0aW5ncygpXG4gICAgICAgICAgICAvLyBicm9hZGNhc3RcbiAgICAgICAgICAgIC8vIHNvdXJjZVxuICAgICAgICAgICAgLy8gbWVkaWFUeXBlXG4gICAgICAgICAgICAvLyB0eXBlXG4gICAgICAgICAgICAvLyBuYW1lXG5cbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvLyBHZXR0ZXJzIChpZiBuZWVkZWQpXG4gICAgZ2V0dGVyczoge1xuICAgICAgICBmaWx0ZXJlZEl0ZW1zOiAoc3RhdGUpID0+IHN0YXRlLml0ZW1zLCAvLyBQbGFjZWhvbGRlciwgYWRqdXN0IGlmIHlvdSBuZWVkIGFjdHVhbCBmaWx0ZXJpbmdcbiAgICAgICAgY3VycmVudEl0ZW06IChzdGF0ZSkgPT4gc3RhdGUuaXRlbXMuZmluZCgoaXRlbSkgPT4gaXRlbS5pZCA9PT0gc3RhdGUuYWN0aXZlSXRlbSksXG4gICAgICAgIC8vIHNldEhlYWRlcjogKHN0YXRlKSA9PiBzdGF0ZS5tb2RhbEhlYWRlciA9IHN0YXRlLmN1cnJlbnRUeXBlICsgJyBsaXN0JyxcbiAgICAgICAgcGFnaW5hdGVkSXRlbXM6IChzdGF0ZSkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc3RhcnQgPSAoc3RhdGUuY3VycmVudFBhZ2UgLSAxKSAqIHN0YXRlLml0ZW1zUGVyUGFnZVxuICAgICAgICAgICAgY29uc3QgZW5kID0gc3RhcnQgKyBzdGF0ZS5pdGVtc1BlclBhZ2VcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZS5pdGVtcy5zbGljZShzdGFydCwgZW5kKVxuICAgICAgICB9LFxuICAgICAgICBwYWdpbmF0ZWRDaGFubmVsczogKHN0YXRlKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBzdGFydCA9IChzdGF0ZS5jdXJyZW50Q2hhbm5lbHNQYWdlIC0gMSkgKiBzdGF0ZS5pdGVtc1BlckNoYW5uZWxzUGFnZVxuICAgICAgICAgICAgY29uc3QgZW5kID0gc3RhcnQgKyBzdGF0ZS5pdGVtc1BlckNoYW5uZWxzUGFnZVxuICAgICAgICAgICAgcmV0dXJuIHN0YXRlLmNoYW5uZWxzLnNsaWNlKHN0YXJ0LCBlbmQpXG4gICAgICAgIH0sXG4gICAgICAgIHRvdGFsTW9kYWxQYWdlcyhzdGF0ZSkge1xuICAgICAgICAgICAgcmV0dXJuIE1hdGguY2VpbChzdGF0ZS5pdGVtcy5sZW5ndGggLyBzdGF0ZS5pdGVtc1BlclBhZ2UpXG4gICAgICAgIH0sXG4gICAgICAgIHRvdGFsQ2hhbm5lbHNQYWdlcyhzdGF0ZSkge1xuICAgICAgICAgICAgcmV0dXJuIE1hdGguY2VpbChzdGF0ZS5jaGFubmVscy5sZW5ndGggLyBzdGF0ZS5pdGVtc1BlckNoYW5uZWxzUGFnZSlcbiAgICAgICAgfSxcbiAgICAgICAgLy8gR2V0dGVyIHRvIGNvdW50IGFjdGl2ZSBjaGFubmVsc1xuICAgICAgICBhY3RpdmVDaGFubmVsc0NvdW50OiAoc3RhdGUpID0+IHtcbiAgICAgICAgICAgIC8vIFVzZSBBcnJheS5wcm90b3R5cGUuZmlsdGVyIHRvIGtlZXAgb25seSBpdGVtcyB3aXRoICdhY3RpdmUnIHRydWUsXG4gICAgICAgICAgICAvLyB0aGVuIHVzZSB0aGUgbGVuZ3RoIHByb3BlcnR5IHRvIGdldCB0aGUgY291bnRcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZS5jaGFubmVscy5maWx0ZXIoY2hhbm5lbCA9PiBjaGFubmVsLmFjdGl2ZSkubGVuZ3RoO1xuICAgICAgICB9LFxuICAgIH0sXG59KVxuIl0sIm5hbWVzIjpbIl9yZWdlbmVyYXRvclJ1bnRpbWUiLCJlIiwidCIsInIiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJuIiwiaGFzT3duUHJvcGVydHkiLCJvIiwiZGVmaW5lUHJvcGVydHkiLCJ2YWx1ZSIsImkiLCJTeW1ib2wiLCJhIiwiaXRlcmF0b3IiLCJjIiwiYXN5bmNJdGVyYXRvciIsInUiLCJ0b1N0cmluZ1RhZyIsImRlZmluZSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIndyYXAiLCJHZW5lcmF0b3IiLCJjcmVhdGUiLCJDb250ZXh0IiwibWFrZUludm9rZU1ldGhvZCIsInRyeUNhdGNoIiwidHlwZSIsImFyZyIsImNhbGwiLCJoIiwibCIsImYiLCJzIiwieSIsIkdlbmVyYXRvckZ1bmN0aW9uIiwiR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUiLCJwIiwiZCIsImdldFByb3RvdHlwZU9mIiwidiIsInZhbHVlcyIsImciLCJkZWZpbmVJdGVyYXRvck1ldGhvZHMiLCJmb3JFYWNoIiwiX2ludm9rZSIsIkFzeW5jSXRlcmF0b3IiLCJpbnZva2UiLCJfdHlwZW9mIiwicmVzb2x2ZSIsIl9fYXdhaXQiLCJ0aGVuIiwiY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmciLCJFcnJvciIsImRvbmUiLCJtZXRob2QiLCJkZWxlZ2F0ZSIsIm1heWJlSW52b2tlRGVsZWdhdGUiLCJzZW50IiwiX3NlbnQiLCJkaXNwYXRjaEV4Y2VwdGlvbiIsImFicnVwdCIsIlR5cGVFcnJvciIsInJlc3VsdE5hbWUiLCJuZXh0IiwibmV4dExvYyIsInB1c2hUcnlFbnRyeSIsInRyeUxvYyIsImNhdGNoTG9jIiwiZmluYWxseUxvYyIsImFmdGVyTG9jIiwidHJ5RW50cmllcyIsInB1c2giLCJyZXNldFRyeUVudHJ5IiwiY29tcGxldGlvbiIsInJlc2V0IiwiaXNOYU4iLCJsZW5ndGgiLCJkaXNwbGF5TmFtZSIsImlzR2VuZXJhdG9yRnVuY3Rpb24iLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJtYXJrIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJhd3JhcCIsImFzeW5jIiwiUHJvbWlzZSIsImtleXMiLCJyZXZlcnNlIiwicG9wIiwicHJldiIsImNoYXJBdCIsInNsaWNlIiwic3RvcCIsInJ2YWwiLCJoYW5kbGUiLCJjb21wbGV0ZSIsImZpbmlzaCIsIl9jYXRjaCIsImRlbGVnYXRlWWllbGQiLCJhc3luY0dlbmVyYXRvclN0ZXAiLCJnZW4iLCJyZWplY3QiLCJfbmV4dCIsIl90aHJvdyIsImtleSIsImluZm8iLCJlcnJvciIsIl9hc3luY1RvR2VuZXJhdG9yIiwiZm4iLCJzZWxmIiwiYXJncyIsImFyZ3VtZW50cyIsImFwcGx5IiwiZXJyIiwidW5kZWZpbmVkIiwiZGVmaW5lU3RvcmUiLCJ1c2VOb3RpZmljYXRpb25TdG9yZSIsInVzZVZpZGVvUGxheWVyU3RvcmUiLCJpbml0aWFsU3RhdGUiLCJjaGFubmVscyIsIml0ZW1zIiwiYWN0aXZlSXRlbUlkIiwic2VsZWN0ZWRDaGFubmVsIiwiY3VycmVudFR5cGUiLCJzZWFyY2hUZXJtIiwibW9kYWxIZWFkZXIiLCJjdXJyZW50UGFnZSIsIml0ZW1zUGVyUGFnZSIsImN1cnJlbnRDaGFubmVsc1BhZ2UiLCJpdGVtc1BlckNoYW5uZWxzUGFnZSIsInNvdXJjZVNlbGVjdG9yIiwic291cmNlIiwic291cmNlVHlwZSIsImZpcnN0UGxheVNldHRpbmdzIiwidXNlQ3VzdG9tVmlkZW8iLCJjdXN0b21WaWRlb1NvdXJjZSIsImN1c3RvbVZpZGVvU291cmNlVHlwZSIsInZhbGlkYXRpb25FcnJvcnMiLCJjaGVja1NlbmRQcm9jZXNzaW5nIiwiYWN0aXZlU3RyZWFtcyIsImZldGNoaW5nQWN0aXZlU3RyZWFtcyIsInNldHRpbmdzRm9ybSIsInN1YnNjcmlwdGlvblNldHRpbmdzIiwibW9udGhseSIsInByaWNlIiwiYXBpX2lkIiwieWVhcmx5IiwidXNlQWRtaW5TdG9yZSIsInN0YXRlIiwiYWN0aW9ucyIsImFzc2lnbiIsImxvYWRDaGFubmVscyIsInNldENoZWNrU2VuZFByb2Nlc3NpbmciLCJ1bnNldENoZWNrU2VuZFByb2Nlc3NpbmciLCJmZXRjaENoYW5uZWxzIiwiX3RoaXMiLCJfY2FsbGVlIiwiX2NhbGxlZSQiLCJfY29udGV4dCIsImF4aW9zIiwiZ2V0IiwicmVzcG9uc2UiLCJkYXRhIiwiY29uc29sZSIsImxvZyIsInRvZ2dsZUNoYW5uZWxBY3RpdmVTdGF0dXMiLCJjaGFubmVsSWQiLCJfY2FsbGVlMiIsIm5vdGlmaWNhdGlvblN0b3JlIiwiX3Jlc3BvbnNlJGRhdGEiLCJtZXNzYWdlIiwic3RhdHVzIiwiX2NhbGxlZTIkIiwiX2NvbnRleHQyIiwicG9zdCIsInNldFRvYXN0Tm90aWZpY2F0aW9uIiwidDAiLCJhZGRDaGFubmVsIiwiX3RoaXMyIiwiX2NhbGxlZTMiLCJfcmVzcG9uc2UkZGF0YTIiLCJlcnJvck1lc3NhZ2UiLCJ2YWxpZGF0aW9uTWVzc2FnZXMiLCJfY2FsbGVlMyQiLCJfY29udGV4dDMiLCJzdWNjZXNzIiwiZmFsbGJhY2tNZXNzYWdlcyIsIm1hcCIsIm1zZ3MiLCJqb2luIiwidXBkYXRlQ2hhbm5lbCIsIm5ld05hbWUiLCJfdGhpczMiLCJfY2FsbGVlNCIsIl9yZXNwb25zZSRkYXRhMyIsIl9jYWxsZWU0JCIsIl9jb250ZXh0NCIsImNvbmNhdCIsInNldFNlbGVjdGVkQ2hhbm5lbCIsIml0ZW0iLCJzZXRDdXJyZW50VHlwZSIsImNsZWFyU2VsZWN0ZWRDaGFubmVsQW5kSXRlbXMiLCJmZXRjaEl0ZW1zIiwiX3RoaXM0IiwiX2NhbGxlZTUiLCJfcmVzcG9uc2UiLCJfcmVzcG9uc2UyIiwiX2NhbGxlZTUkIiwiX2NvbnRleHQ1IiwiZmV0Y2giLCJqc29uIiwibWlzdF9zdHJlYW1faWQiLCJjaGFubmVsX2V4dGVybmFsX3NvdXJjZV9pZCIsImNoYW5uZWxfcGxheWxpc3RfaWQiLCJ1cGRhdGVBY3RpdmVJdGVtSWQiLCJpZCIsIl90aGlzNSIsIl9jYWxsZWU2IiwiX2NhbGxlZTYkIiwiX2NvbnRleHQ2Iiwic2V0TWlzdFN0cmVhbSIsInNldENoYW5uZWxQbGF5bGlzdCIsInNldEV4dGVybmFsU291cmNlIiwic2V0UGxheWJhY2tQcmlvcml0eVR5cGUiLCJjaGFubmVsIiwicHJpb3JpdHlUeXBlIiwiX3RoaXM2IiwiX2NhbGxlZTciLCJkYXRhVG9TZW5kIiwiaW5kZXgiLCJfY2FsbGVlNyQiLCJfY29udGV4dDciLCJzZXRQcmlvcml0eVR5cGUiLCJmaW5kSW5kZXgiLCJtaXN0U3RyZWFtSWQiLCJfdGhpczciLCJfY2FsbGVlOCIsIl9jYWxsZWU4JCIsIl9jb250ZXh0OCIsImNoYW5uZWxQbGF5bGlzdElkIiwiX3RoaXM4IiwiX2NhbGxlZTkiLCJfY2FsbGVlOSQiLCJfY29udGV4dDkiLCJleHRlcm5hbFNvdXJjZUlkIiwiX3RoaXM5IiwiX2NhbGxlZTEwIiwiX2NhbGxlZTEwJCIsIl9jb250ZXh0MTAiLCJuZXh0UGFnZSIsInRvdGFsTW9kYWxQYWdlcyIsIk1hdGgiLCJjZWlsIiwicHJldlBhZ2UiLCJzZXRQYWdlIiwicGFnZSIsIm5leHRDaGFubmVsc1BhZ2UiLCJwcmV2Q2hhbm5lbHNQYWdlIiwic2V0Q2hhbm5lbHNQYWdlIiwiZmV0Y2hGaXJzdFBsYXlTZXR0aW5ncyIsIl90aGlzMTAiLCJfY2FsbGVlMTEiLCJfcmVzcG9uc2UkZGF0YTQiLCJfY2FsbGVlMTEkIiwiX2NvbnRleHQxMSIsInVwZGF0ZUZpcnN0UGxheVNldHRpbmdzIiwiX3RoaXMxMSIsIl9jYWxsZWUxMiIsIl9jYWxsZWUxMiQiLCJfY29udGV4dDEyIiwicGF0Y2giLCJlcnJvcnMiLCJoYW5kbGVFcnJvcnMiLCJmZXRjaEFjdGl2ZVN0cmVhbXMiLCJfdGhpczEyIiwiX2NhbGxlZTEzIiwiX3Jlc3BvbnNlJGRhdGE1IiwiX2NhbGxlZTEzJCIsIl9jb250ZXh0MTMiLCJzZXRBY3RpdmVTdHJlYW1Bc0ZpcnN0UGxheSIsImFjdGl2ZVN0cmVhbSIsIl90aGlzMTMiLCJfY2FsbGVlMTQiLCJ2aWRlb1BsYXllclN0b3JlIiwiX2NhbGxlZTE0JCIsIl9jb250ZXh0MTQiLCJtaXN0U2VydmVyVXJpIiwiY3VzdG9tVmlkZW9OYW1lIiwiY3VzdG9tTWVkaWFUeXBlIiwic3RyZWFtTmFtZSIsInN0cmVhbU1pbWVUeXBlIiwic2hvd05hbWUiLCJnZXR0ZXJzIiwiZmlsdGVyZWRJdGVtcyIsImN1cnJlbnRJdGVtIiwiZmluZCIsImFjdGl2ZUl0ZW0iLCJwYWdpbmF0ZWRJdGVtcyIsInN0YXJ0IiwiZW5kIiwicGFnaW5hdGVkQ2hhbm5lbHMiLCJ0b3RhbENoYW5uZWxzUGFnZXMiLCJhY3RpdmVDaGFubmVsc0NvdW50IiwiZmlsdGVyIiwiYWN0aXZlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/js/Stores/AdminStore.js\n");

/***/ })

}]);