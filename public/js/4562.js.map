{"version":3,"file":"js/4562.js","mappings":"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","sources":["webpack:///./resources/js/Stores/GoLiveStore.js","webpack:///./resources/js/Stores/VideoAuxPlayerStore.js","webpack:///./resources/js/Utilities/PageSetup.js","webpack:///./resources/js/Components/Global/GoLive/GoLive.vue?9a5a","webpack:///./resources/js/Components/Global/Buttons/CancelButton.vue?b7c6","webpack:///./resources/js/Components/Global/Buttons/CancelButton.vue","webpack:///./resources/js/Components/Global/VideoPlayer/VideoJs/VideoJsAux.vue?cfd4","webpack:///./resources/js/Components/Global/VideoPlayer/VideoJs/VideoJsAux.vue","webpack:///./resources/js/Components/Global/GoLive/GoLive.vue","webpack:///./resources/js/Components/Global/GoLive/GoLive.vue?be7e","webpack:///./resources/js/Components/Global/GoLive/GoLive.vue?3856","webpack:///./resources/js/Components/Global/Modals/Messages.vue?dfe9","webpack:///./resources/js/Components/Global/Modals/Messages.vue","webpack:///./resources/js/Components/Global/Modals/PopUpModal.vue","webpack:///./resources/js/Components/Pages/ShowEpisodes/Elements/ManageShowEpisodeNoticeModals.vue","webpack:///./resources/js/Pages/GoLive.vue?e1d2","webpack:///./resources/js/Pages/GoLive.vue"],"sourcesContent":["import { defineStore } from 'pinia'\n\nconst initialState = () => ({\n    displayEpisodeGoLiveComponent: false,\n    isEpisode: null,\n    episode: null,\n    preSelectedShowId: null,\n    selectedShowId: null,\n    // selectedShow: null, this uses the getter... set it up in the component as a computed property\n    shows: [], // Assuming you might want to store shows here too\n    streamKey: '', // Optional: Store the generated stream key if needed\n    isLive: false,\n    isRecording: false,\n    streamInfo: null,\n    rtmpUri: null,\n})\n\nexport const useGoLiveStore = defineStore('goLiveStore', {\n    state: initialState,\n    actions: {\n        reset() {\n            // Reset the store to its original state (clear all data)\n            Object.assign(this, initialState());\n        },\n        async fetchShows() {\n            try {\n                const response = await axios.get('/go-live/shows'); // Adjust the URL as needed\n                this.shows = response.data;\n            } catch (error) {\n                console.error('Failed to fetch shows:', error);\n                // Handle error appropriately\n            }\n        },\n        async generateStreamKey() {\n            if (!this.selectedShowId) {\n                console.error(\"No show selected\");\n                return; // Exit the function if no show is selected\n            }\n\n            try {\n                const response = await axios.post(`/go-live/shows/${this.selectedShowId}/stream-key`);\n                console.log(\"Stream key generated:\", response.data);\n                this.streamKey = response.data.streamKey; // Assuming the response includes the stream key\n            } catch (error) {\n                console.error(\"Error generating stream key:\", error.response ? error.response.data : error);\n            }\n        },\n        // setPreSelectedShowId(id) {\n        //     this.preSelectedShowId = id;\n        //     console.log('preSelectedShowId updated to:', this.preSelectedShowId);\n        // },\n        // Action to update selectedShowId and selectedShow based on selectedShowId\n        setSelectedShowId(showId) {\n            this.selectedShowId = showId;\n            this.updateSelectedShow(); // Call the method to update selectedShow based on new selectedShowId\n        },\n        // Method to find and update selectedShow based on selectedShowId\n        updateSelectedShow() {\n            this.selectedShow = this.shows.find(show => show.id === this.selectedShowId) || null;\n        },\n        goLive() {\n          this.isLive = true\n        },\n        stopLive() {\n            this.isLive = false\n        },\n        startRecording() {\n            this.isRecording = true\n        },\n        stopRecording() {\n            this.isRecording = false\n        },\n        async fetchStreamInfo(streamName) {\n            const encodedStreamName = encodeURIComponent(streamName);\n            try {\n                // const response = await fetch(`http://mist.nottv.io:8080/json_${encodedStreamName}.js`); // Replace with your URL\n                const response = await fetch(`/fetch-stream-info/${streamName}`); // Replace with your URL\n                if (!response.ok) throw new Error('Failed to fetch');\n                this.streamInfo = await response.json(); // Store the data in serverInfo\n            } catch (error) {\n                console.error('Error fetching server info:', error);\n            }\n        },\n        async fetchRtmpUri() {\n            try {\n                const response = await fetch(`/fetch-rtmp-uri`);\n                if (!response.ok) throw new Error('Failed to fetch');\n\n                // Parse the plain text body of the response\n                // Store the RTMP URI string in a Vue data property or similar\n                this.rtmpUri = await response.text();\n            } catch (error) {\n                console.error('Error fetching RTMP URI:', error);\n            }\n        },\n        clearStreamInfo() {\n            this.streamInfo = null\n        },\n        toggleDisplayEpisodeGoLiveComponent(episode) {\n            this.displayEpisodeGoLiveComponent = ! this.displayEpisodeGoLiveComponent;\n            this.isEpisode = !!this.displayEpisodeGoLiveComponent;\n            this.episode = episode\n            this.selectedShowId = this.episode.show_id\n\n        },\n        updateEpisode(episode) {\n            this.episode = episode;\n        },\n    },\n    getters: {\n        selectedShow: (state) => {\n            return state.shows.find(show => show.id === state.selectedShowId) || null;\n        },\n    },\n\n})\n","import { defineStore } from 'pinia'\nimport { useAppSettingStore } from '@/Stores/AppSettingStore'\nimport { useStreamStore } from '@/Stores/StreamStore'\nimport { useUserStore } from '@/Stores/UserStore'\nimport { useChannelStore } from '@/Stores/ChannelStore'\nimport { useShowStore } from '@/Stores/ShowStore'\nimport { useAudioStore } from '@/Stores/AudioStore'\nimport videojs from 'video.js'\nimport { usePage } from '@inertiajs/inertia-vue3'\nimport { nextTick } from 'vue'\nimport { useNotificationStore } from '@/Stores/NotificationStore'\n\nconst initialState = () => ({\n    player: null, // Video.js player instance\n    eventListenersAttached: false, // Track if listeners are attached\n    videoPlayerLoaded: false,\n    class: '',\n    videoContainerClass: '',\n    // ottClass: 'OttClose',\n    videoSourceIdSrc1: '',\n    videoSourceIdSrc2: '',\n    videoSourceIdSrc3: '',\n    videoSourceTypeSrc1: '',\n    videoSourceTypeSrc2: '',\n    videoSourceTypeSrc3: '',\n    firstPlayVideoSourceType: '',\n    firstPlayVideoSource: '',\n    key: '',\n    videoName: '',\n    videoSource: '',\n    videoSourceType: '',\n    videoPoster: '',\n    nextSource: '',\n    previousSource: '',\n    currentView: '',\n    currentChannelId: 0,\n    currentChannelName: '',\n    currentShow: {},\n    currentShowEpisode: {},\n    currentVideo: {},\n    hasVideo: false,\n    controls: true,\n    muted: true,\n    paused: true,\n    // videoCurrentTime: '',\n    currentTime: 0, // Current playback time in seconds\n    duration: 0, // Total video duration in seconds\n    formattedTime: '00:00 / 00:00', // Formatted time string\n    blue: false, // DO NOT REMOVE\n    videoIsYoutube: false,\n    videoUploadComplete: false,\n})\n\nexport const useVideoAuxPlayerStore = defineStore('videoAuxPlayerStore', {\n    state: initialState,\n    actions: {\n        reset() {\n            // Reset the store to its original state (clear all data)\n            Object.assign(this, initialState())\n        },\n\n        async getMistServerUri() {\n            try {\n                let response = await axios.get('/mist-server/uri')\n                this.mistServerUri = response.data\n            } catch (error) {\n                console.error(error)\n            }\n        },\n\n        // Initialize or update the player instance\n        setPlayer(playerInstance) {\n            this.player = playerInstance\n            this.initializePlayer().then(() => {\n                this.attachEventListeners() // Attach event listeners after initialization\n            }).catch(error => {\n                console.error('Error during video player initialization:', error)\n            })\n        },\n\n        // Initialize the player with necessary settings and start playback\n        async initializePlayer() {\n            if (!this.player) {\n                console.error('Video.js player is not initialized.')\n                return\n            }\n\n            await nextTick() // Ensure Vue's DOM updates are processed\n\n            // Perform any necessary audio context and node setup\n            await useAudioStore().ensureAudioContextAndNodesReady(this.player)\n\n            // Apply initial player settings\n            this.player.controls(false)\n            this.player.muted(this.muted)\n\n            // Attempt to start playback\n            this.player.ready(() => {\n                this.player.play().then(() => {\n                    console.log('Playback started successfully')\n                }).catch(error => {\n                    console.error('Error trying to play the video:', error)\n                    // Handle the error (e.g., showing a user-friendly message)\n                })\n            })\n        },\n\n        // Attach event listeners to the player\n        attachEventListeners() {\n            if (!this.player || this.eventListenersAttached) {\n                console.log('Event listeners are already attached or video player is not initialized.')\n                return\n            }\n\n            this.player.on('timeupdate', this.handleTimeUpdate)\n            this.player.on('fullscreenchange', this.handleFullscreenChange)\n            this.player.on('play', this.handlePlay)\n            this.player.on('pause', this.handlePause)\n            this.player.on('error', this.handleError)\n\n            this.eventListenersAttached = true\n            console.log('Event listeners attached.')\n        },\n\n        // Detach event listeners from the player\n        detachEventListeners() {\n            if (!this.player || !this.eventListenersAttached) {\n                console.log('Event listeners are already detached or video player is not initialized.')\n                return\n            }\n\n            useAudioStore().stopAudioLevelMonitoring()\n            this.player.off('timeupdate', this.handleTimeUpdate)\n            this.player.off('fullscreenchange', this.handleFullscreenChange)\n            this.player.off('play', this.handlePlay)\n            this.player.off('pause', this.handlePause)\n            this.player.off('error', this.handleError)\n\n            this.eventListenersAttached = false\n            console.log('Event listeners detached.')\n        },\n\n        // Dispose of the player and perform cleanup\n        disposePlayer() {\n            if (!this.player) {\n                console.error('Video player is not initialized.')\n                return\n            }\n\n            this.detachEventListeners() // Detach event listeners if attached\n            this.player.dispose() // Dispose of the player instance\n            this.player = null // Reset the player state\n\n            // Optionally, stop audio level monitoring if linked to the player lifecycle\n            // const audioStore = useAudioStore();\n            // audioStore.stopAudioLevelMonitoring();\n\n            console.log('Video player disposed and cleaned up.')\n        },\n\n        // New method to prepare for a new video source\n        prepareForNewVideoSource(source) {\n            console.log('Preparing for new video source')\n\n            // Example: Clear any existing channel or video-specific state\n            useChannelStore().clearChannel()\n\n            // Reset or cleanup any existing video playback, if necessary\n            // this.resetPlayback();\n\n            // Load and play the new video source\n            this.loadNewVideo(source)\n        },\n\n        resetPlayback() {\n            if (this.player) {\n                this.player.pause()\n                this.player.muted(true)\n                this.player.currentTime(0) // Optionally reset the time\n                // Further cleanup logic here, if necessary\n                this.detachEventListeners() // Detach event listeners if attached\n            }\n        },\n\n        // Event handlers\n        handleTimeUpdate() {\n            // console.log('Handling timeupdate...');\n            // Implement your logic\n            this.currentTime = this.player.currentTime()\n            this.duration = this.player.duration()\n            const progressPercentage = (this.currentTime / this.duration) * 100\n            this.formattedTime = `${this.formatDuration(this.currentTime)} / ${this.formatDuration(this.duration)}`\n\n            // Update UI elements or emit events as needed\n            // Note: Direct manipulation of the DOM or component refs from the store is not recommended\n\n        },\n        // for the handleTimeUpdate eventHandler\n        formatDuration(durationInSeconds) {\n            const hours = Math.floor(durationInSeconds / 3600)\n            const minutes = Math.floor((durationInSeconds % 3600) / 60)\n            const seconds = Math.floor(durationInSeconds % 60)\n\n            const parts = [hours, minutes, seconds].map(part => part.toString().padStart(2, '0'))\n            return parts.join(':')\n        },\n        handleFullscreenChange() {\n            console.log('Handling fullscreenchange...')\n            // Implement your logic\n            this.player?.on('fullscreenchange', () => {\n                if (this.player.isFullscreen()) {\n                    // Video is entering fullscreen mode\n                    // You can add custom behavior for entering fullscreen here if needed\n                } else {\n                    // Video is exiting fullscreen mode\n                    // Check if the video was playing before entering fullscreen\n                    if (this.player.paused() === false) {\n                        // Resume playback after exiting fullscreen\n                        this.player.play()\n                    }\n                }\n            })\n        },\n        handlePlay() {\n            console.log('Handling play...')\n            // Implement your logic\n            this.player?.on('play', () => {\n                this.paused = false\n            })\n        },\n        handlePause() {\n            console.log('Handling pause...')\n            // Implement your logic\n            this.player?.on('pause', () => {\n                this.paused = true\n            })\n        },\n        handleError() {\n            console.log('Handling error...')\n            // Implement your logic\n            this.player?.on('error', function () {\n                const error = this.player.error()\n                console.error('Video.js Error:', error.code, error.message)\n            })\n        },\n        makeBlue() {\n            // for testing. DO NOT REMOVE.\n            this.blue = true\n        },\n        // Apparently this loadFirstPlay isn't being used...\n        // loadFirstPlay() {\n        //     const {props} = usePage()\n        //     let videoJs = videojs('aux-player')\n        //     const type = props.firstPlayVideoSourceType\n        //     const src = props.firstPlayVideoSource\n        //     videoJs.ready(() => {\n        //         videoJs.src({src, type})\n        //         videoJs.play().then(() => {\n        //             console.log('Playback started successfully')\n        //         }).catch(error => {\n        //             console.error('Error trying to play the video:', error)\n        //             // Handle the error (e.g., showing a user-friendly message)\n        //         })\n        //     })\n        //     console.log(type)\n        //     console.log(src)\n        // },\n        // Toggle mute state\n        toggleMute() {\n            if (this.muted) {\n                this.unMute()\n            } else {\n                this.mute()\n            }\n        },\n        // Mute the video\n        mute() {\n            if (this.player) {\n                this.player.muted(true)\n                this.muted = true\n                console.log('Video muted')\n            }\n        },\n        // Unmute the video\n        unMute() {\n            // const audioStore = useAudioStore()\n\n            if (this.player) {\n                // Prepare audio setup for when it's unmuted\n                // audioStore.userInteractionForAudio()\n\n                // Optionally, if fadeInAudioFromMuted is a gradual process,\n                // ensure this.player.muted(false) is called within that function.\n                // audioStore.fadeInAudioFromMuted()\n\n                this.player.muted(false)\n                this.muted = false\n                console.log('Video muted')\n            }\n        },\n        togglePlay() {\n            let videoJs = videojs('aux-player')\n\n            if (this.paused) {\n                videoJs.play()\n            } else {\n                videoJs.pause()\n            }\n        },\n        load() {\n            let videoJs = videojs('aux-player')\n            videoJs.load()\n        },\n        loadNewLiveSource(source, sourceType) {\n            let videoJs = videojs('aux-player')\n            let fullSourceUrl = this.mistServerUri + '/hls/' + source + '/index.m3u8'\n            videoJs.src({'src': fullSourceUrl, 'type': sourceType});\n            videoJs.play()\n        },\n        pause() {\n            let videoJs = videojs('aux-player')\n            videoJs.controls(false)\n            videoJs.pause()\n            this.paused = true\n        },\n        play() {\n            let videoJs = videojs('aux-player')\n\n            videoJs.play()\n            videoJs.controls(false)\n            this.paused = false\n        },\n        // next not built yet\n        next() {\n            let videoJs = videojs('aux-player')\n            videoJs.controls(false)\n            videoJs.src(this.nextSource)\n        },\n        // back not built yet\n        back() {\n            let videoJs = videojs('aux-player')\n            videoJs.controls(false)\n            videoJs.src(this.previousSource)\n        },\n        fullscreen() {\n            let videoJs = videojs('aux-player')\n            videoJs.controls(false)\n            // videoJs.fullscreen(this.previousSource)\n            videoJs.requestFullscreen()\n        },\n        getVideoCurrentTime() {\n            let videoJs = videojs('aux-player')\n            videoJs.controls(false)\n            this.videoCurrentTime = videoJs.currentTime\n        },\n\n\n        // This playNewVideo was created to access the audioContext\n        // which our audio compressor uses. This is new as of 2/2/2024\n        // ~ tec21\n\n        // playNewVideo(source) {\n        //     useChannelStore().clearChannel() // Reset or clear channel store\n        //     const videoJs = videojs('aux-player')\n        //     let videoSrc, videoSourceType\n        //     // Determine the source type and construct the source URL if necessary\n        //     if (source.mediaType === 'externalVideo') {\n        //         videoSrc = source.video_url // Direct URL to the video\n        //         videoSourceType = source.type // MIME type, e.g., 'video/youtube', 'video/mp4'\n        //     } else {\n        //         // Construct file path for internal videos\n        //         videoSrc = `${source.cdn_endpoint}${source.cloud_folder}${source.folder}/${source.file_name}`\n        //         videoSourceType = source.type // MIME type, typically 'video/mp4' for file-based sources\n        //     }\n        //     this.resumeAudioContextIfNeeded()\n        //     videoJs.src({src: videoSrc, type: videoSourceType})\n        //     videoJs.muted(false)\n        // },\n\n        // getSourceDetails(source) {\n        //     let videoSrc = source.video_url; // Directly access the video URL\n        //\n        //     // Default to 'video/mp4' if type is falsy ('', null, undefined, etc.)\n        //     let videoSourceType = source.type || 'video/mp4'\n        //\n        //     // Determine the mediaType and construct the source URL if necessary\n        //     if (source.mediaType === 'externalVideo') {\n        //         videoSrc = source.video_url // Direct URL to the video\n        //     } else {\n        //         // Internal video: construct the path, ensuring the file name is encoded\n        //         let encodedFileName = encodeURIComponent(source.file_name);\n        //         console.log(encodedFileName)\n        //         videoSrc = `${source.cdn_endpoint}${source.cloud_folder}${source.folder}/${encodedFileName}`\n        //     }\n        //     // Logic to determine videoSrc and videoSourceType\n        //     console.log(`Video Source: ${videoSrc}, Type: ${videoSourceType}`);\n        //     return { videoSrc, videoSourceType } // Return as an object\n        // },\n\n\n        getSourceDetails(source) {\n            let videoSrc, videoSourceType\n\n            console.log('getSourceDetails called with source:', source);\n\n            // Default to 'video/mp4' if type is not specified or is empty\n            videoSourceType = source.type || 'video/mp4'\n            console.log(`Determined Video Source Type: ${videoSourceType}`);\n\n            if (source.mediaType === 'externalVideo') {\n                // For external videos, use the URL as provided without encoding\n                videoSrc = source.video_url\n                console.log('Using external video source:', videoSrc);\n            } else {\n                console.log('CDN Endpoint:', source.cdn_endpoint);\n                console.log('Cloud Folder:', source.cloud_folder);\n                console.log('Folder:', source.folder);\n                console.log('File Name:', source.file_name);\n                // For internal videos, construct the URL from its components\n                // Here, we assume the cdn_endpoint, cloud_folder, and folder are correctly formatted\n                // and do not require encoding. Only the file_name might need encoding.\n                const basePath = `${source.cdn_endpoint}${source.cloud_folder}${source.folder}/`\n                // const encodedFileName = encodeURIComponent(source.file_name);\n                const fileName = source.file_name\n                videoSrc = basePath + fileName\n                console.log('Constructed internal video source:', videoSrc);\n                // If your server or CDN is configured to handle spaces in URLs without %20 encoding\n                // or if the original working URLs did not use standard URL encoding,\n                // you might adjust the encoding strategy here.\n                // For example, to replace spaces with %20 but leave other characters as-is:\n                // const fileNameForUrl = source.file_name.replace(/ /g, '%20');\n                // videoSrc = basePath + fileNameForUrl;\n            }\n\n            console.log(`Final Constructed Video Source: ${videoSrc}, Type: ${videoSourceType}`);\n            return {videoSrc, videoSourceType}\n        },\n\n\n        loadNewVideo(source) {\n            try {\n                let videoJs = videojs('aux-player');\n                console.log('LOAD NEW VIDEO');\n                const audioStore = useAudioStore();\n                // Correctly destructure the returned object to get videoSrc and videoSourceType\n                const {videoSrc, videoSourceType} = this.getSourceDetails(source);\n\n                // Example: Stopping and cleaning up the current video and audio setup\n                if (videoJs) {\n                    videoJs.src({'src': videoSrc, 'type': videoSourceType});\n\n                    videoJs.ready(() => {\n                        // ensureAudioContextAndNodesReady does the following:\n                        // 1. Resumes AudioContext if suspended.\n                        // 2. (Re)connects MediaElementSource from the video element to AudioContext.\n                        audioStore.deferAudioSetup = false;\n                        audioStore.ensureAudioContextAndNodesReady(videoJs).then(() => {\n                            // Only attempt to play the video after ensuring the AudioContext is ready\n                            videoJs.play().catch(error => {\n                                useNotificationStore().setGeneralServiceNotification('Error', 'Playback initiation error: ' + error)\n                                console.error('Playback initiation error: ', error);\n                            });\n\n                            // Consider toggling mute based on the user's preference or previous state\n                            videoJs.muted(false);\n                            this.muted = false;\n                        });\n                    });\n                }\n            } catch (error) {\n                // Log the error or perform any other error handling\n                useNotificationStore().setGeneralServiceNotification('Error', 'Error loading new video: ' + error)\n                console.error('Error loading new video: ', error);\n            }\n        },\n\n        // loadNewVideo(source) {\n        //     console.log('LOAD NEW VIDEO TTTTTTTTTTTTTTTTTTTTTTTTTS');\n        //     console.log('LOAD NEW VIDEO initiated with source:', source);\n        //     const audioStore = useAudioStore();\n        //     this.unMute();\n        //     // Destructure the returned object to get videoSrc and videoSourceType\n        //     const { videoSrc, videoSourceType } = this.getSourceDetails(source);\n        //     console.log(`Video source details received: Src - ${videoSrc}, Type - ${videoSourceType}`);\n        //\n        //     // Ensure you're using the same player instance (`videoJs` in this context) for consistency\n        //     let videoJs = videojs('aux-player'); // Ensure this ID matches your video player element\n        //     console.log('Video.js player instance created or retrieved.');\n        //\n        //     // Stop and clean up the current video and audio setup if necessary\n        //     videoJs.ready(() => {\n        //         console.log('Video.js player is ready.');\n        //         videoJs.src({ 'src': videoSrc, 'type': videoSourceType });\n        //         console.log(`Video source set: ${videoSrc} of type ${videoSourceType}`);\n        //\n        //         // Ensure AudioContext and nodes are ready\n        //         audioStore.ensureAudioContextAndNodesReady(videoJs).then(() => {\n        //             console.log('Audio context and nodes are ready. Attempting to play video.');\n        //\n        //             videoJs.play().then(() => {\n        //                 console.log('Video playback started successfully.');\n        //             }).catch(error => {\n        //                 console.error('Playback initiation error:', error);\n        //             });\n        //             // Attempt to play the video after ensuring the AudioContext is ready\n        //             // videoJs.play().catch(error => {\n        //             //     console.error('Playback initiation error:', error);\n        //             // });\n        //\n        //             // Apply the unMute logic from loadMistStreamVideo to ensure audio is correctly configured\n        //             this.unMute();\n        //             console.log('Audio unmuted.');\n        //             this.paused = false;\n        //             console.log('Paused flag set to false.');\n        //         }).catch(error => {\n        //             console.error('Error ensuring audio context and nodes are ready:', error);\n        //         });\n        //     });\n        // },\n\n        playNewVideo() {\n            console.log('PLAY NEW VIDEO')\n            if (this.player) {\n                // Wait for the video to be ready before playing\n                this.player.ready(() => {\n                    this.player.play()\n                    // Assuming you want to unmute here; check if this aligns with user interaction policies\n                    this.player.muted(false)\n                    this.muted = false\n                })\n            }\n        },\n\n\n// load video from different types of sources:\n// Url\n// YouTube\n// EmbedCode\n// Mist\n// File\n        loadNewSourceFromYouTube(source) {\n            this.videoIsYoutube = true\n            useChannelStore().clearChannel()\n            let videoJs = videojs('aux-player')\n            this.videoSource = source\n            this.videoSourceType = 'video/youtube'\n            videoJs.src({'src': this.videoSource, 'type': this.videoSourceType})\n            videoJs.controls(false)\n            this.unMute()\n            this.paused = false\n        },\n        loadNewLiveSourceFromRumble(source) {\n            this.videoIsYoutube = true\n            useChannelStore().clearChannel()\n            let videoJs = videojs('aux-player')\n            this.videoSource = source\n            this.videoSourceType = 'application/x-mpegURL'\n            videoJs.src({'src': this.videoSource, 'type': this.videoSourceType})\n            videoJs.controls(false)\n            this.unMute()\n            this.paused = false\n        },\n        loadNewSourceFromUrl(source) {\n            try {\n                this.videoIsYoutube = false;\n                useChannelStore().clearChannel();\n                let videoJs = videojs('aux-player');\n\n                if (!source.video_url || !source.type) {\n                    useNotificationStore().setGeneralServiceNotification('Error', 'Invalid video source.')\n                    throw new Error(\"Invalid video source.\");\n                }\n\n                this.videoSource = source.video_url;\n                this.videoSourceType = source.type;\n                videoJs.src({'src': source.video_url, 'type': source.type});\n\n                this.unMute();\n                this.paused = false;\n            } catch (error) {\n                useNotificationStore().setGeneralServiceNotification('Error', 'Failed to load new source: ' + error)\n                console.error(\"Failed to load new source:\", error);\n                throw error; // Re-throw the error to be caught by the caller\n            }\n        },\n        loadNewSourceFromMist(source) {\n            this.videoIsYoutube = false\n            let videoJs = videojs('aux-player')\n            let filePath = 'https://mist.not.tv/hls/'\n            this.videoSource = filePath + source + '/index.m3u8'\n            this.videoSourceType = 'application/x-mpegURL'\n            videoJs.src({'src': this.videoSource, 'type': this.videoSourceType})\n            this.unMute()\n            this.paused = false\n        },\n        loadNewSourceFromFile(source) {\n            this.videoIsYoutube = false\n            useChannelStore().clearChannel()\n            let videoJs = videojs('aux-player')\n            let filePath = source.cdn_endpoint + source.cloud_folder + source.folder + '/'\n            this.videoSource = source.file_name\n            this.videoSourceType = source.type\n            videoJs.src({'src': filePath + this.videoSource, 'type': this.videoSourceType})\n            this.unMute()\n            this.paused = false\n        },\n\n        // The new load video functions (2024-02-09 tec21 and ChatGPT)\n        loadExternalSourceVideo() {\n\n        },\n        loadPlaylistVideos() {\n\n        },\n        async loadMistStreamVideo(mistStream) {\n            // console.log('Loading Mist Stream Video for:', mistStream.name); // Log which Mist Stream is being loaded\n            // This mistServerUri comes from appSettings\n            if (!this.mistServerUri) {\n                console.log('Mist Server URI not set, fetching...') // Log fetching attempt\n                await this.getMistServerUri()\n            }\n            if (this.mistServerUri) {\n                // console.log('Mist Server URI:', this.mistServerUri); // Log the URI to confirm it's fetched\n                let basePath = this.mistServerUri\n                this.videoSource = basePath + 'hls/' + mistStream.name + '/index.m3u8'\n                // console.log('Video Source Set To:', this.videoSource); // Log the final video source\n\n                this.videoSourceType = 'application/vnd.apple.mpegURL'\n                // console.log('Setting player source to:', this.videoSource, 'of type:', this.videoSourceType); // Log the source setting\n                let videoJs = videojs('aux-player')\n                videoJs.src({'src': this.videoSource, 'type': this.videoSourceType})\n                this.unMute()\n                this.paused = false\n            } else {\n                console.error('Mist Server URI is still not set after fetching.')\n            }\n            // let basePath = this.mistServerUri\n            // this.videoSource = basePath + 'hls/' + mistStream.name + '/index.m3u8'\n            // this.videoSourceType = \"application/vnd.apple.mpegURL\"\n            // this.player.src({'src': this.videoSource, 'type': this.videoSourceType})\n            // this.unMute()\n            // this.paused = false\n        },\n        async loadVideoFromFile(video) {\n            // console.log('Loading Mist Stream Video for:', mistStream.name); // Log which Mist Stream is being loaded\n            // This mistServerUri comes from appSettings\n            // if (!this.mistServerUri) {\n            //     console.log('Mist Server URI not set, fetching...') // Log fetching attempt\n            //     await this.getMistServerUri()\n            // }\n            // if (this.mistServerUri) {\n                // console.log('Mist Server URI:', this.mistServerUri); // Log the URI to confirm it's fetched\n                // let basePath = this.mistServerUri\n                // this.videoSource = basePath + 'hls/' + video.name + '/index.m3u8'\n                // console.log('Video Source Set To:', this.videoSource); // Log the final video source\n\n            // this.videoSourceType = 'video/mp4'\n            console.log('Video Source Type:', video.type);\n            console.log('Video URL:', video.video_url);\n            console.log('CDN Endpoint:', video.cdn_endpoint);\n            console.log('Cloud Folder:', video.cloud_folder);\n            console.log('Folder:', video.folder);\n            console.log('File Name:', video.file_name);\n\n            let videoSource = video.cdn_endpoint + video.cloud_folder + video.folder + '/' + video.file_name\n                // console.log('Setting player source to:', this.videoSource, 'of type:', this.videoSourceType); // Log the source setting\n                let videoJs = videojs('aux-player')\n                videoJs.src({'src': videoSource, 'type': video.type})\n                this.unMute()\n                this.paused = false\n            // } else {\n            //     console.error('Mist Server URI is still not set after fetching.')\n            // }\n            // let basePath = this.mistServerUri\n            // this.videoSource = basePath + 'hls/' + mistStream.name + '/index.m3u8'\n            // this.videoSourceType = \"application/vnd.apple.mpegURL\"\n            // this.player.src({'src': this.videoSource, 'type': this.videoSourceType})\n            // this.unMute()\n            // this.paused = false\n        },\n\n\n        setNowPlayingInfoVideoFile(source) {\n            this.nowPlayingType = 'Video File'\n            this.nowPlayingName = source.file_name\n            useStreamStore().currentChannel = 'On Demand'\n        },\n        setNowPlayingInfoShow(show, episode) {\n            this.clearNowPlayingInfo()\n            const showStore = useShowStore()\n\n            if (show.firstPlayVideo) {\n                showStore.setName(show.firstPlayVideo.name)\n                showStore.setEpisodeUrl(`/shows/${show.slug}/episode/${source.firstPlayVideo.slug}`)\n            } else if (episode) {\n                showStore.setName(show.name)\n                showStore.setUrl(`/shows/${show.slug}`)\n                showStore.setEpisodeName(episode.name)\n                showStore.setEpisodeUrl(`/shows/${show.slug}/episode/${episode.slug}`)\n            } else {\n                showStore.setName(show.name)\n                showStore.setUrl(`/shows/${show.slug}`)\n            }\n        },\n// change video size/position and page layout\n        makeVideoPiP() {\n            // const appSettingStore = useAppSettingStore();\n            // const userStore = useUserStore();\n            //\n            // if (userStore.isMobile) {\n            //     let videoJs = videojs('aux-player')\n            //     videoJs.controls(false)\n            //     if(this.fullPage) {\n            //         this.class = 'pipVideoClassFullPage'\n            //         this.videoContainerClass = 'pipVideoContainerFullPage'\n            //     } else {\n            //         this.class = 'pipVideoClassTopRight'\n            //         this.videoContainerClass = 'pipVideoContainerTopRight'\n            //     }\n            //     appSettingStore.togglePipChatMode()\n            // }\n        },\n        makeVideoFullPage() {\n            const appSettingStore = useAppSettingStore()\n            const userStore = useUserStore()\n\n            // this.fullPage = true; // to be deleted and replaced by appSettingStore.fullPage\n            appSettingStore.fullPage = true\n            // userStore.hidePage = true // to be deleted and replaced by appSettingStore.hidePage\n            appSettingStore.hidePage = true\n            appSettingStore.ott = 0\n\n            this.videoContainerClass = 'fullPageVideoContainer'\n            this.class = 'fullPageVideoClass'\n            this.controls = !userStore.isMobile\n        },\n        makeVideoTopRight() {\n            const appSettingStore = useAppSettingStore()\n\n            // this.fullPage = false // to be deleted and replaced by appSettingStore.fullPage\n            appSettingStore.fullPage = false\n            // userStore.hidePage = false // to be deleted and replaced by appSettingStore.hidePage\n            appSettingStore.hidePage = false\n            // this.currentPageIsStream = false // to be deleted and replaced by appSettingStore.currentPageIsStream\n            appSettingStore.currentPageIsStream = false\n\n            this.videoContainerClass = 'topRightVideoContainer'\n            this.class = 'topRightVideoClass'\n            this.controls = false\n        },\n        makeVideoWelcomePage() {\n            const appSettingStore = useAppSettingStore()\n            this.videoContainerClass = 'welcomeVideoContainer'\n            this.class = 'welcomeVideoClass'\n            appSettingStore.loggedIn = false\n            appSettingStore.fullPage = true\n            appSettingStore.hidePage = false\n        },\n\n\n    },\n\n    getters: {},\n})\n","import { onBeforeMount, onMounted } from 'vue'\nimport { useUserStore } from \"@/Stores/UserStore\"\nimport { useAppSettingStore } from \"@/Stores/AppSettingStore\"\nimport { useVideoPlayerStore } from \"@/Stores/VideoPlayerStore\"\nimport { Inertia } from \"@inertiajs/inertia\"\n\nexport function usePageSetup(pageName) {\n    const userStore = useUserStore()\n    const appSettingStore = useAppSettingStore()\n    const videoPlayerStore = useVideoPlayerStore()\n\n    appSettingStore.currentPage = pageName\n    appSettingStore.showFlashMessage = true\n    appSettingStore.pageIsHidden = false\n\n    if (userStore.isMobile) {\n        appSettingStore.ott = 0\n    }\n\n    videoPlayerStore.makeVideoTopRight()\n\n    onBeforeMount(() => {\n        // reload page\n        if (appSettingStore.pageReload) {\n            appSettingStore.pageReload = false\n            window.location.reload(true);\n        }\n    });\n\n    onMounted(() => {\n        // Check if the URL contains query strings\n        const hasQueryStrings = window.location.search !== '';\n\n        // Only scroll into view if there are no query strings\n        if (!hasQueryStrings) {\n            const topDiv = document.getElementById(\"topDiv\")\n            if (topDiv) {\n                topDiv.scrollIntoView()\n            }\n        }\n        // Only update if we're not already on this page to avoid overwriting with the current URL\n        appSettingStore.setPrevUrl()\n        appSettingStore.noLayout = false\n        appSettingStore.showOttButtons = true\n        // Inertia.reload()\n\n    });\n}\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".copied-message-fade[data-v-c2857aaa]{animation:fadeOut-c2857aaa 2s forwards}@keyframes fadeOut-c2857aaa{0%{opacity:1}to{opacity:0}}\", \"\",{\"version\":3,\"sources\":[\"webpack://./resources/js/Components/Global/GoLive/GoLive.vue\"],\"names\":[],\"mappings\":\"AAslBA,sCACE,sCACF,CAEA,4BACE,GACE,SACF,CACA,GACE,SACF,CACF\",\"sourcesContent\":[\"<template>\\n  <div class=\\\"mx-0 md:mx-4 mt-4 mb-2 px-2 md:px-6 py-1\\\">\\n    <div\\n        class=\\\"text-sm font-semibold  text-white text-center w-full border-2 rounded uppercase px-0 md:px-6 py-1 \\\"\\n        :class=\\\"[ goLiveStore.isLive ? 'bg-gray-600 border-gray-600 ' : 'bg-red-600 border-red-600' ]\\\">\\n      Go Live Instructions\\n    </div>\\n    <div class=\\\"shadow overflow-hidden border-2 border-red-600 rounded p-2 md:p-6\\\"\\n         :class=\\\"[ goLiveStore.isLive ? 'bg-gray-100' : 'bg-red-100' ]\\\">\\n\\n\\n      <div class=\\\"flex flex-row flex-wrap-reverse w-full justify-between\\\">\\n        <div>\\n          <div class=\\\"mb-2\\\">\\n            <button @click=\\\"appSettingStore.btnRedirect('/training/go-live-using-zoom')\\\"\\n                    class=\\\"btn bg-blue-500 hover:bg-blue-700 rounded-lg text-white\\\">How To Stream From Zoom\\n            </button>\\n\\n          </div>\\n          <div>RTMP full url: <span class=\\\"font-bold\\\">{{rtmpUri}}{{streamKey}}</span>\\n            &nbsp;<button @click=\\\"copyFullUrl\\\"><font-awesome-icon icon=\\\"fa-clipboard\\\" class=\\\"text-blue-500 hover:text-blue-700 hover:cursor-pointer\\\"/></button>\\n            <span v-if=\\\"showCopiedFullUrl\\\" class=\\\"ml-1 copied-message\\\" style=\\\"transition: opacity 0.5s; opacity: 1;\\\">Copied!</span>\\n          </div>\\n          <div>RTMP url: <span class=\\\"font-bold\\\">{{rtmpUri}}</span>\\n            &nbsp;<button @click=\\\"copyRtmpUri\\\"><font-awesome-icon icon=\\\"fa-clipboard\\\" class=\\\"text-blue-500 hover:text-blue-700 hover:cursor-pointer\\\"/></button>\\n            <span v-if=\\\"showCopiedRtmpUri\\\" class=\\\"ml-1 copied-message\\\" style=\\\"transition: opacity 0.5s; opacity: 1;\\\">Copied!</span>\\n          </div>\\n          <div>RTMP stream key: <span class=\\\"font-bold\\\">{{streamKey}}</span>\\n            &nbsp;<button @click=\\\"copyStreamKey\\\"><font-awesome-icon icon=\\\"fa-clipboard\\\" class=\\\"text-blue-500 hover:text-blue-700 hover:cursor-pointer\\\"/></button>\\n            <span v-if=\\\"showCopiedStreamKey\\\" class=\\\"ml-1 copied-message\\\" style=\\\"transition: opacity 0.5s; opacity: 1;\\\">Copied!</span>\\n          </div>\\n        </div>\\n        <div class=\\\"flex flex-col\\\">\\n          <div class=\\\"\\\">\\n            <button v-if=\\\"!goLiveStore.isRecording\\\" @click=\\\"goLiveStore.startRecording\\\"\\n                    class=\\\"btn text-white bg-green-500 hover:bg-green-700 uppercase\\\"\\n            >Start Recording\\n            </button>\\n            <button v-else @click=\\\"goLiveStore.stopRecording\\\" class=\\\"btn text-white bg-red-700 hover:bg-red-900 uppercase\\\"\\n            >Stop Recording\\n            </button>\\n            <div v-if=\\\"!goLiveStore.isRecording\\\" class=\\\"text-xs text-green-500 font-semibold tracking-wider\\\">Premium Creator\\n              Service\\n            </div>\\n          </div>\\n          <div class=\\\"my-4\\\">\\n            <button v-if=\\\"!goLiveStore.isLive\\\" @click=\\\"goLiveStore.goLive\\\"\\n                    class=\\\"btn text-white bg-green-500 hover:bg-green-700 uppercase\\\"\\n            >Go Live Now\\n            </button>\\n            <button v-else @click=\\\"goLiveStore.stopLive\\\" class=\\\"btn text-white bg-red-700 hover:bg-red-900 uppercase\\\"\\n            >End Live\\n            </button>\\n            <div v-if=\\\"!goLiveStore.isLive\\\" class=\\\"text-xs text-green-500 font-semibold tracking-wider\\\">Premium Creator\\n              Service\\n            </div>\\n          </div>\\n          <div></div>\\n          <div>Live will begin in...</div>\\n          <div>{{ formattedCountdown }}</div>\\n        </div>\\n      </div>\\n\\n\\n      <div class=\\\"flex flex-col justify-center mt-3 h-fit\\\">\\n        <div class=\\\"text-xs tracking-wider font-semibold mb-1 pl-1\\\">VIDEO STREAM</div>\\n\\n        <div class=\\\"flex flex-row flex-wrap\\\">\\n          <div class=\\\"flex flex-col\\\">\\n            <div class=\\\"px-10 h-fit w-fit\\\">\\n              <button @click=\\\"reloadPlayer\\\"\\n                      class=\\\"btn btn-xs w-full\\\"\\n                      :class=\\\"liveOrRecordingGrayButtonClass\\\"\\n              >Reload Player\\n              </button>\\n              <div v-if=\\\"goLiveStore.isLive || goLiveStore.isRecording\\\" class=\\\"w-full bg-red-700 text-white text-center uppercase font-bold\\\">\\n                <span v-if=\\\"goLiveStore.isLive\\\">LIVE</span> <span v-if=\\\"goLiveStore.isLive && goLiveStore.isRecording\\\"> + </span>\\n                <span v-if=\\\"goLiveStore.isRecording\\\">RECORDING</span>\\n              </div>\\n              <video-js-aux :id=\\\"`aux-player`\\\"\\n                            :source=\\\"videoSource\\\"\\n                            :sourceType=\\\"videoSourceType\\\"\\n                            class=\\\"\\\"\\n                            :class=\\\"liveOrRecordingVideoBorderClass\\\"/>\\n\\n\\n              <!--            <div v-if=\\\"playerTargetId\\\" class=\\\"mistvideo\\\" :id=\\\"playerTargetId\\\">-->\\n              <!--              <noscript>-->\\n              <!--                <a :href=\\\"`http://mist.nottv.io:8080/${goLiveStore.selectedShow.mist_stream_wildcard.name}.html`\\\" target=\\\"_blank\\\">-->\\n              <!--                  Click here to play this video-->\\n              <!--                </a>-->\\n              <!--              </noscript>-->\\n              <!--            </div>-->\\n\\n            </div>\\n            <div class=\\\"flex flex-row px-10\\\">\\n              <div class=\\\"mt-2\\\">\\n                <button v-if=\\\"!videoPlayerStore.muted\\\"\\n                        class=\\\"btn\\\"\\n                        :class=\\\"liveOrRecordingGrayButtonClass\\\"\\n                        @click=\\\"videoPlayerStore.mute\\\">Mute Main Player Audio\\n                </button>\\n                <button v-else\\n                        class=\\\"btn\\\"\\n                        @click=\\\"videoPlayerStore.unMute\\\"\\n                        :class=\\\"liveOrRecordingGrayButtonClass\\\">Turn On Main Player Audio\\n                </button>\\n              </div>\\n              <div class=\\\"mt-2 ml-2\\\">\\n                <button v-if=\\\"!videoAuxPlayerStore.muted\\\"\\n                        class=\\\"btn\\\"\\n                        :class=\\\"liveOrRecordingGrayButtonClass\\\"\\n                        @click=\\\"videoAuxPlayerStore.mute\\\">Mute Live Stream\\n                  Video\\n                </button>\\n                <button v-else\\n                        class=\\\"btn\\\"\\n                        :class=\\\"liveOrRecordingGrayButtonClass\\\"\\n                        @click=\\\"videoAuxPlayerStore.unMute\\\">Turn On Live Stream Audio\\n                </button>\\n              </div>\\n            </div>\\n          </div>\\n\\n          <div v-if=\\\"goLiveStore.streamInfo && !goLiveStore.streamInfo.error\\\" class=\\\"w-fit\\\" :key=\\\"goLiveStore.selectedShowId\\\">\\n            <div>\\n              <h3>Stream Info</h3>\\n              <!--                <RecursivePropertyList :object=\\\"serverInfo\\\" />-->\\n\\n              <p><strong>Width:</strong> {{ goLiveStore.streamInfo?.width }}</p>\\n              <p><strong>Height:</strong> {{ goLiveStore.streamInfo?.height }}</p>\\n\\n              <!-- Assuming you want to display tracks info specifically -->\\n              <div v-if=\\\"goLiveStore.streamInfo?.meta?.tracks\\\">\\n                <h4 class=\\\"font-semibold\\\">Tracks</h4>\\n                <ul>\\n                  <li v-for=\\\"(track, name) in goLiveStore?.streamInfo?.meta.tracks\\\" :key=\\\"name\\\">\\n                    &middot; {{ name }} - Codec: {{ track.codec }}, Rate: {{ track.rate }}\\n                  </li>\\n                </ul>\\n              </div>\\n            </div>\\n          </div>\\n          <div v-if=\\\"!goLiveStore?.streamInfo && !goLiveStore?.streamInfo?.error\\\">\\n            <div class=\\\"flex flex-col\\\">\\n              <span class=\\\"mb-2\\\">Loading stream data...</span>\\n              <span class=\\\"loading loading-spinner text-neutral\\\"></span>\\n            </div>\\n\\n          </div>\\n          <div v-if=\\\"goLiveStore?.streamInfo?.error\\\">\\n            <div class=\\\"flex flex-col\\\">\\n              <span class=\\\"mb-2\\\">{{ goLiveStore?.streamInfo?.error }}</span>\\n            </div>\\n\\n          </div>\\n\\n        </div>\\n\\n      </div>\\n\\n\\n      <div class=\\\"mx-4 mt-4 mb-2 px-6 py-1 \\\">\\n        <div\\n            class=\\\"text-sm font-semibold bg-blue-600 text-white text-center w-full border-2 border-blue-600 rounded uppercase px-6 py-1 \\\">\\n          Push Destinations\\n        </div>\\n        <div class=\\\"shadow bg-blue-100 overflow-hidden border-2 border-blue-600 rounded p-6 space-y-3\\\">\\n          <div></div>\\n          <div>Set up <span class=\\\"font-bold\\\">push destinations:</span></div>\\n          <div>Here you can set additional streaming destinations such as Facebook, YouTube, Rumble, Twitch, etc. and\\n            notTV will automatically start pushing to those destinations when you go live.\\n          </div>\\n          <div class=\\\"w-full flex justify-center pt-4\\\">\\n            <button onclick=\\\"setPushDestinationsNotice.showModal()\\\"\\n                    class=\\\"bg-blue-600 hover:bg-blue-500 text-white font-semibold rounded-lg px-4 py-2\\\">Set Push\\n              Destinations\\n            </button>\\n          </div>\\n        </div>\\n\\n      </div>\\n\\n    </div>\\n\\n  </div>\\n\\n  <div class=\\\"mx-4 mt-4 mb-8 px-6 py-1 \\\">\\n    <div\\n        class=\\\"text-sm font-semibold bg-orange-600 text-white text-center w-full border-2 border-orange-600 rounded uppercase px-6 py-1 \\\">\\n      Commercial Breaks\\n    </div>\\n    <div class=\\\"shadow bg-orange-100 overflow-hidden border-2 border-orange-600 rounded p-6 space-y-3\\\">\\n      <div></div>\\n      <div>Click the <span class=\\\"font-bold\\\">Trigger Commercial Break</span> button below to go to commercial.</div>\\n      <div>You will see a countdown timer until the show resumes. This will be 1-2 minutes.</div>\\n      <div>As a notTV creator, your voice matters. How can this feature be improved to better serve you and your\\n        sponsors?\\n        Please email and let us know: <a href=\\\"mailto:hello@not.tv\\\" target=\\\"_blank\\\"\\n                                         class=\\\"text-blue-500 hover:text-blue-600\\\">hello@not.tv</a>\\n      </div>\\n      <div class=\\\"w-full flex justify-center pt-4\\\">\\n        <button onclick=\\\"setCommercialBreakNotice.showModal()\\\"\\n                class=\\\"bg-orange-600 hover:bg-orange-500 text-white font-semibold rounded-lg px-4 py-2\\\">Trigger\\n          Commercial Break\\n        </button>\\n      </div>\\n    </div>\\n\\n  </div>\\n\\n\\n</template>\\n\\n<script setup>\\n// import { useTimeAgo } from '@vueuse/core'\\nimport { computed, onBeforeUnmount, onMounted, ref, watchEffect } from 'vue'\\nimport { useAppSettingStore } from '@/Stores/AppSettingStore'\\nimport { useVideoPlayerStore } from '@/Stores/VideoPlayerStore'\\nimport { useVideoAuxPlayerStore } from '@/Stores/VideoAuxPlayerStore'\\nimport { useGoLiveStore } from '@/Stores/GoLiveStore'\\nimport VideoJsAux from '@/Components/Global/VideoPlayer/VideoJs/VideoJsAux'\\nimport videojs from 'video.js'\\nimport { FontAwesomeIcon } from '@fortawesome/vue-fontawesome'\\nimport { useClipboard } from '@vueuse/core'\\n\\nconst appSettingStore = useAppSettingStore()\\nconst videoPlayerStore = useVideoPlayerStore()\\nconst videoAuxPlayerStore = useVideoAuxPlayerStore()\\nconst goLiveStore = useGoLiveStore()\\n\\nlet props = defineProps({\\n  // show: Object,\\n})\\n\\nconst showCopiedFullUrl = ref(false)\\nconst showCopiedRtmpUri = ref(false)\\nconst showCopiedStreamKey = ref(false)\\nconst { copy } = useClipboard()\\n\\n// const copyText = () => {\\n//   copy('Text to be copied');\\n//   showCopied.value = true;\\n//   setTimeout(() => {\\n//     showCopied.value = false;\\n//   }, 2000); // Hide the message after 2 seconds\\n// };\\n\\nlet videoSource = videoPlayerStore.mistServerUri + 'hls/' + goLiveStore?.selectedShow?.mist_stream_wildcard.name\\n    + '/index.m3u8'\\nlet videoSourceType = 'application/vnd.apple.mpegURL'\\n\\n// Fetch server info on component mount\\n// goLiveStore.fetchStreamInfo(goLiveStore?.selectedShow?.mist_stream_wildcard.name)\\n// goLiveStore.fetchRtmpUri()\\n\\nconst fullUrl = ref('');\\nconst rtmpUri = ref('');\\nconst streamKey = ref('');\\n\\n// Initialize fetching of server information\\ngoLiveStore.fetchStreamInfo(goLiveStore?.selectedShow?.mist_stream_wildcard.name);\\ngoLiveStore.fetchRtmpUri();\\n\\n// Reactively update URLs when the store updates\\nwatchEffect(() => {\\n  if (goLiveStore.rtmpUri) {\\n    rtmpUri.value = goLiveStore.rtmpUri + 'live/';\\n    // Check if it's an episode or a selected show and update accordingly\\n    if (goLiveStore.isEpisode && goLiveStore.episode?.mist_stream_wildcard?.name) {\\n      streamKey.value = goLiveStore.episode.mist_stream_wildcard.name;\\n    } else if (!goLiveStore.isEpisode && goLiveStore.selectedShow?.mist_stream_wildcard?.name) {\\n      streamKey.value = goLiveStore.selectedShow.mist_stream_wildcard.name;\\n    }\\n    fullUrl.value = `${rtmpUri.value}${streamKey.value}`;\\n  }\\n});\\n\\n// Function to handle the copy action and display the \\\"copied\\\" message for each type\\nconst copyFullUrl = () => {\\n  copy(fullUrl.value);\\n  showCopiedFullUrl.value = true;\\n  setTimeout(() => showCopiedFullUrl.value = false, 1000);\\n};\\n\\nconst copyRtmpUri = () => {\\n  copy(rtmpUri.value);\\n  showCopiedRtmpUri.value = true;\\n  setTimeout(() => showCopiedRtmpUri.value = false, 1000);\\n};\\n\\nconst copyStreamKey = () => {\\n  copy(streamKey.value);\\n  showCopiedStreamKey.value = true;\\n  setTimeout(() => showCopiedStreamKey.value = false, 1000);\\n};\\n\\n// if (goLiveStore.isEpisode) {\\n//   fullUrl = rtmpUri.value + goLiveStore?.episode?.mist_stream_wildcard?.name\\n//   streamKey = goLiveStore?.episode?.mist_stream_wildcard?.name\\n// } else if (!goLiveStore.isEpisode) {\\n//   fullUrl = rtmpUri.value + goLiveStore?.selectedShow?.mist_stream_wildcard?.name\\n//   streamKey = goLiveStore?.selectedShow?.mist_stream_wildcard?.name\\n// }\\n\\n// const copyFullUrl = () => copy(fullUrl);\\n// const copyRtmpUri = () => copy(rtmpUri.value);\\n// const copyStreamKey = () => copy(streamKey);\\n//\\n// watchEffect(() => {\\n//   if (goLiveStore.rtmpUri) {\\n//     rtmpUri.value = goLiveStore.rtmpUri + 'live/';\\n//   }\\n// });\\n\\n// Asynchronously fetch the JSON data\\n// async function fetchServerInfo() {\\n//   try {\\n//     const response = await fetch('http://mist.nottv.io:8080/json_dvr_playback_2.js'); // Replace with your URL\\n//     if (!response.ok) throw new Error('Failed to fetch');\\n//     const data = await response.json();\\n//     serverInfo.value = data; // Store the data in serverInfo\\n//     console.log (serverInfo)\\n//   } catch (error) {\\n//     console.error('Error fetching server info:', error);\\n//   }\\n// }\\n\\n// let videoSrc = ref('')\\n// let videoJsAux = ('aux-player')\\n\\n// const videoOptions = ref({\\n//   autoplay: true,\\n//   muted: true,\\n//   controls: true,\\n//   fill: true,\\n//   sources: [\\n//     {\\n//       src: videoSource,\\n//       type: videoSourceType,\\n//     },\\n//   ],\\n// });\\n\\nconst reloadPlayer = () => {\\n  let source = null\\n  if(goLiveStore?.selectedShow?.mist_stream_wildcard?.name) {\\n    source = goLiveStore?.selectedShow?.mist_stream_wildcard?.name\\n    goLiveStore.fetchStreamInfo(goLiveStore?.selectedShow?.mist_stream_wildcard?.name)\\n  } else if (goLiveStore?.episode?.mist_stream_wildcard?.name) {\\n    source = goLiveStore?.episode?.mist_stream_wildcard?.name\\n    goLiveStore.fetchStreamInfo(goLiveStore?.episode?.mist_stream_wildcard?.name)\\n  }\\n  let sourceUrl = videoPlayerStore.mistServerUri + 'hls/' + source + '/index.m3u8'\\n  console.log('source url: ' + sourceUrl)\\n  let sourceType = 'application/vnd.apple.mpegurl'\\n  let videoJs = videojs('aux-player')\\n  videoJs.src({'src': sourceUrl, 'type': sourceType})\\n  // videoAuxPlayerStore.loadNewLiveSource(source, sourceType)\\n  console.log('reload player')\\n}\\n\\n\\n\\nonMounted(() => {\\n  // videoSrc = goLiveStore.selectedShow.mist_stream_wildcard.name\\n  // videoJsAux.src({'src': videoSrc, 'type': 'application/vnd.apple.mpegurl'});\\n  // videoJsAux.ready(() => {\\n  //\\n  // })\\n  startCountdown()\\n\\n  console.log('onPlayerReady AUX')\\n  // fetchServerInfo()\\n\\n})\\n\\n// Initial countdown time in seconds (5 minutes * 60 seconds)\\nconst countdownTime = 5 * 60\\n// Reactive state for the countdown\\nconst countdown = ref(countdownTime)\\n\\n// Computed property to format the countdown as mm:ss\\nconst formattedCountdown = computed(() => {\\n  const minutes = Math.floor(countdown.value / 60)\\n  const seconds = countdown.value % 60\\n  return `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`\\n})\\n\\n// Function to start the countdown - temporary for demo purposes.\\nconst startCountdown = () => {\\n  const interval = setInterval(() => {\\n    countdown.value--\\n\\n    if (countdown.value < 0) {\\n      clearInterval(interval) // Stop the interval\\n      countdown.value = countdownTime // Reset countdown\\n      startCountdown() // Restart the countdown\\n    }\\n  }, 1000)\\n}\\n\\nconst liveOrRecordingGrayButtonClass = computed(() => {\\n  if (goLiveStore.isLive || goLiveStore.isRecording) {\\n    return 'bg-gray-200 hover:bg-gray-400'\\n  } else {\\n    return ''\\n  }\\n})\\n\\nconst liveOrRecordingVideoBorderClass = computed(() => {\\n  if (goLiveStore.isLive || goLiveStore.isRecording) {\\n    return 'border-4 border-red-700'\\n  } else {\\n    return ''\\n  }\\n})\\n\\n//\\n// // Assuming props.show.mist_stream_wildcard.name exists and is reactive\\n// const playerTargetId = ref('');\\n//\\n// const initializePlayer = () => {\\n//   const targetElement = document.getElementById(playerTargetId.value);\\n//   if (targetElement) {\\n//     mistPlay(goLiveStore.selectedShow.mist_stream_wildcard.name, {\\n//       target: targetElement,\\n//       fillSpace: true\\n//     });\\n//   } else {\\n//     console.error('Target element for video player not found.');\\n//   }\\n// };\\n//\\n// const removePlayer = () => {\\n//   const existingContainer = document.getElementById(playerTargetId.value);\\n//   if (existingContainer) {\\n//     existingContainer.remove();\\n//   }\\n// };\\n//\\n//\\n// const reloadPlayer = () => {\\n//   removePlayer();\\n//\\n//   nextTick(() => {\\n//     const newPlayerContainer = document.createElement('div');\\n//     const uniqueId = `${goLiveStore.selectedShow.mist_stream_wildcard.name}-${Date.now()}`;\\n//     newPlayerContainer.id = uniqueId;\\n//     playerTargetId.value = uniqueId;\\n//\\n//     document.body.appendChild(newPlayerContainer); // Append to body or choose a specific container\\n//\\n//     loadAndInitializePlayer();\\n//   });\\n// };\\n//\\n// const loadAndInitializePlayer = () => {\\n//   if (!window.mistplayers) {\\n//     const playerScript = document.createElement(\\\"script\\\");\\n//     playerScript.src = \\\"https://mist.nottv.io:443/player.js\\\"; // Assuming HTTPS site\\n//     document.head.appendChild(playerScript);\\n//     playerScript.onload = initializePlayer;\\n//   } else {\\n//     initializePlayer();\\n//   }\\n// };\\n//\\n// onMounted(() => {\\n//   playerTargetId.value = `${goLiveStore.selectedShow.mist_stream_wildcard.name}-${Date.now()}`;\\n//   loadAndInitializePlayer();\\n// });\\n//\\n// watch(() => playerTargetId.value, (newVal) => {\\n//   if (newVal) {\\n//     loadAndInitializePlayer();\\n//   }\\n// });\\n//\\n// onBeforeUnmount(() => {\\n//   removePlayer(); // Ensure the player's container is removed when the component unmounts\\n// });\\n\\n\\n//\\n//\\n// const loadAndInitializePlayer = () => {\\n//   if (!window.mistplayers) {\\n//     const playerScript = document.createElement(\\\"script\\\");\\n//     playerScript.src = location.protocol === \\\"https:\\\" ? \\\"https://mist.nottv.io:443/player.js\\\" : \\\"http://mist.nottv.io:8080/player.js\\\";\\n//     document.head.appendChild(playerScript);\\n//     playerScript.onload = initializePlayer;\\n//   } else {\\n//     initializePlayer();\\n//   }\\n// };\\n//\\n// const removePlayer = () => {\\n//   const targetElement = document.getElementById(playerTargetId.value);\\n//   if (targetElement) {\\n//     // Option 1: Remove the child element completely\\n//     targetElement.parentNode.removeChild(targetElement);\\n//\\n//     // OR Option 2: Reset the content of the element\\n//     // targetElement.innerHTML = '';\\n//\\n//     console.log('Video player removed.');\\n//   } else {\\n//     console.error('Target element for video player not found for removal.');\\n//   }\\n// };\\n//\\n// onMounted(() => {\\n//   playerTargetId.value = `${props.show.mist_stream_wildcard.name}-${Date.now()}` // Set the target ID based on props\\n//   console.log(playerTargetId.value)\\n//   loadAndInitializePlayer();\\n//   // nextTick(() => {\\n//   //   loadAndInitializePlayer();\\n//   // });\\n// });\\n//\\n// // onMounted(() => {\\n// //\\n// //   // loadAndInitializePlayer()\\n// //   if (!window.mistplayers) {\\n// //     const playerScript = document.createElement(\\\"script\\\");\\n// //     playerScript.src = location.protocol === \\\"https:\\\" ? \\\"https://mist.nottv.io:443/player.js\\\" : \\\"http://mist.nottv.io:8080/player.js\\\";\\n// //     document.head.appendChild(playerScript);\\n// //     playerScript.onload = initializePlayer;\\n// //   } else {\\n// //     initializePlayer();\\n// //   }\\n// // });\\n//\\n// // Define `reloadPlayer` method to reload the player. This could be the same as `initializePlayer`\\n// // if reloading simply means reinitializing.\\n// const reloadPlayer = () => {\\n//   // Remove the existing player and its container\\n//   removePlayer();\\n//\\n//   // Recreate the container element for the player\\n//   const newPlayerContainer = document.createElement('div');\\n//   newPlayerContainer.id = `${props.show.mist_stream_wildcard.name}-${Date.now()}`; // Set the new target ID\\n//   playerTargetId.value = newPlayerContainer.id; // Update the reactive reference\\n//\\n//   // Append the new container to the appropriate parent element in your DOM\\n//   // Replace `parentElementSelector` with the actual selector of the parent where the player should be attached\\n//   const parentElement = document.querySelector('parentElementSelector');\\n//   if (parentElement) {\\n//     parentElement.appendChild(newPlayerContainer);\\n//   } else {\\n//     console.error('Parent element for video player not found.');\\n//     return;\\n//   }\\n//\\n//   // Initialize the player in the new container\\n//   loadAndInitializePlayer();\\n// };\\n//\\n// // If there's a need to watch for `playerTargetId` changes to reinitialize the player\\n// watch(() => playerTargetId.value, (newVal) => {\\n//   // Load and initialize player only if newVal is truthy\\n//   if (newVal) {\\n//     loadAndInitializePlayer();\\n//   }\\n// });\\n//\\n// // const loadAndInitializePlayer = () => {\\n// //   if (!window.mistplayers) {\\n// //     const playerScript = document.createElement(\\\"script\\\");\\n// //     playerScript.src = location.protocol === \\\"https:\\\" ? \\\"https://mist.nottv.io:443/player.js\\\" : \\\"http://mist.nottv.io:8080/player.js\\\";\\n// //     document.head.appendChild(playerScript);\\n// //     playerScript.onload = initializePlayer;\\n// //   } else {\\n// //     initializePlayer();\\n// //   }\\n// // };\\n//\\nonBeforeUnmount(() => {\\n  // goLiveStore.reset()\\n  // Example cleanup logic; adjust based on your player's API\\n  // if (window.mistplayers && window.mistplayers[playerTargetId.value]) {\\n  //   window.mistplayers[playerTargetId.value].destroy(); // Hypothetical destroy method\\n  // }\\n});\\n//\\n// onBeforeUnmount(() => {\\n//   if (videoPlayer && typeof videoPlayer.dispose === 'function') {\\n//     videoPlayer.dispose();\\n//   }\\n// });\\n// let videoEmbedCode = props.episode.video_file_embed_code;\\n\\n// const timeAgo = useTimeAgo(new Date(2023, 10, 5))\\n// const timeAgo = useTimeAgo(props.episode.scheduledDateTime)\\n</script>\\n\\n<style scoped>\\n.copied-message-fade {\\n  animation: fadeOut 2s forwards;\\n}\\n\\n@keyframes fadeOut {\\n  from {\\n    opacity: 1;\\n  }\\n  to {\\n    opacity: 0;\\n  }\\n}\\n</style>\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","import script from \"./CancelButton.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./CancelButton.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n  <div>\n    <button\n        @click.prevent=\"cancel\"\n        class=\"ml-2 px-4 py-2 text-white bg-orange-600 hover:bg-orange-500 rounded-lg\"\n    >Cancel\n    </button>\n  </div>\n</template>\n\n<script setup>\nimport { Inertia } from \"@inertiajs/inertia\"\nimport { useAppSettingStore } from \"@/Stores/AppSettingStore\"\nimport { useUserStore } from '@/Stores/UserStore'\n\nconst appSettingStore = useAppSettingStore()\nconst userStore = useUserStore()\n\nlet props = defineProps({\n  url: String\n})\n\nfunction cancel() {\n  if (appSettingStore.prevUrl) {\n    if (props.url) {\n      Inertia.visit(props.url)\n    } else {\n      Inertia.visit(appSettingStore.prevUrl)\n    }\n  } else {\n    if (props.url) {\n      Inertia.visit(props.url)\n    } else {\n      // Fallback if prevUrl is not available\n      let prevUrl = userStore.isCreator ? '/dashboard' : '/';\n      Inertia.visit(prevUrl);\n    }\n  }\n}\n</script>\n","import script from \"./VideoJsAux.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./VideoJsAux.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n  <div class=\"w-full h-fit bg-yellow-400\">\n<!--    <video ref=\"videoPlayerAux\" :id=\"id\" class=\"vjs-layout-tiny w-full\" playsinline controls autoplay-->\n<!--           muted/>-->\n\n    <video-js :id=\"id\"\n              class=\"video-js vjs-layout-tiny w-96 h-64 bg-blue-400\"\n              autoplay\n              muted\n              playsinline\n              crossorigin=\"anonymous\"\n    >\n      <source :src=\"source\"\n              :type=\"sourceType\">\n    </video-js>\n\n\n\n\n  </div>\n\n\n\n\n</template>\n\n\n<script setup>\nimport { onMounted, onBeforeUnmount } from \"vue\"\nimport videojs from 'video.js'\nimport 'video.js/dist/video-js.css'\nimport { useVideoAuxPlayerStore } from \"@/Stores/VideoAuxPlayerStore\"\nimport { useAppSettingStore } from \"@/Stores/AppSettingStore\"\nconst appSettingStore = useAppSettingStore()\nimport { useStreamStore } from \"@/Stores/StreamStore\"\nimport VideoJs from '@/Components/Global/VideoPlayer/VideoJs/VideoJs.vue'\n\nconst videoAuxPlayerStore = useVideoAuxPlayerStore()\nconst streamStore = useStreamStore()\n\nconst props = defineProps({\n  options: Object,\n  id: String,\n  source: String,\n  sourceType: String\n})\n\nonMounted(() => {\n  const videoElementId = props.id\n  const playerOptions = {\n    // Define your player options here\n    controlBar: {\n      audioTrackButton: false,\n      autoHide: true,\n      captionsButton: false,\n      chaptersButton: false,\n      currentTimeDisplay: false,\n      customControlSpacer: false,\n      descriptionsButton: false,\n      durationDisplay: false,\n      fullscreenToggle: false, // Removes the full screen option\n      liveDisplay: false,\n      pictureInPictureToggle: false,\n      playToggle: false,\n      playbackRateMenuButton: false,\n      progressControl: {seekBar: false},\n      remainingTimeDisplay: false,\n      seekToLive: false,\n      subsCapsButton: false,\n      subtitlesButton: false,\n      timeDivider: false,\n      volumePanel: {\n        inline: true,\n        volumeBar: {\n          vertical: false,\n          liveDisplay: false,\n        },\n      },\n    },\n    userActions: {\n      hotkeys: true, // Enable hotkeys to show/hide controls\n    },\n    controls: true,\n    muted: false, // Start muted to comply with autoplay policies\n    inactivityTimeout: 0,\n    autoplay: true,\n    preload: 'auto',\n    // techOrder: ['html5'],\n    html5: {\n      hls: {\n        overrideNative: !videojs.browser.IS_SAFARI, // Override native HLS on non-Safari browsers\n      },\n    },\n  }\n\n  // Initialize Video.js player\n  const videoAuxPlayer = videojs(videoElementId, playerOptions);\n\n  // Use the store to manage the player\n  videoAuxPlayerStore.setPlayer(videoAuxPlayer);\n\n  // Access the video DOM element controlled by VideoJS\n  const videoDomElement = videoAuxPlayer.el();\n\n  // Disable right-click on the video element\n  videoDomElement.addEventListener('contextmenu', (event) => {\n    event.preventDefault();\n  });\n})\n\nonBeforeUnmount(() => {\n  let videoAuxPlayer = videojs(props.id)\n  videoAuxPlayer.dispose()\n})\n\n</script>","<template>\n  <div class=\"mx-0 md:mx-4 mt-4 mb-2 px-2 md:px-6 py-1\">\n    <div\n        class=\"text-sm font-semibold  text-white text-center w-full border-2 rounded uppercase px-0 md:px-6 py-1 \"\n        :class=\"[ goLiveStore.isLive ? 'bg-gray-600 border-gray-600 ' : 'bg-red-600 border-red-600' ]\">\n      Go Live Instructions\n    </div>\n    <div class=\"shadow overflow-hidden border-2 border-red-600 rounded p-2 md:p-6\"\n         :class=\"[ goLiveStore.isLive ? 'bg-gray-100' : 'bg-red-100' ]\">\n\n\n      <div class=\"flex flex-row flex-wrap-reverse w-full justify-between\">\n        <div>\n          <div class=\"mb-2\">\n            <button @click=\"appSettingStore.btnRedirect('/training/go-live-using-zoom')\"\n                    class=\"btn bg-blue-500 hover:bg-blue-700 rounded-lg text-white\">How To Stream From Zoom\n            </button>\n\n          </div>\n          <div>RTMP full url: <span class=\"font-bold\">{{rtmpUri}}{{streamKey}}</span>\n            &nbsp;<button @click=\"copyFullUrl\"><font-awesome-icon icon=\"fa-clipboard\" class=\"text-blue-500 hover:text-blue-700 hover:cursor-pointer\"/></button>\n            <span v-if=\"showCopiedFullUrl\" class=\"ml-1 copied-message\" style=\"transition: opacity 0.5s; opacity: 1;\">Copied!</span>\n          </div>\n          <div>RTMP url: <span class=\"font-bold\">{{rtmpUri}}</span>\n            &nbsp;<button @click=\"copyRtmpUri\"><font-awesome-icon icon=\"fa-clipboard\" class=\"text-blue-500 hover:text-blue-700 hover:cursor-pointer\"/></button>\n            <span v-if=\"showCopiedRtmpUri\" class=\"ml-1 copied-message\" style=\"transition: opacity 0.5s; opacity: 1;\">Copied!</span>\n          </div>\n          <div>RTMP stream key: <span class=\"font-bold\">{{streamKey}}</span>\n            &nbsp;<button @click=\"copyStreamKey\"><font-awesome-icon icon=\"fa-clipboard\" class=\"text-blue-500 hover:text-blue-700 hover:cursor-pointer\"/></button>\n            <span v-if=\"showCopiedStreamKey\" class=\"ml-1 copied-message\" style=\"transition: opacity 0.5s; opacity: 1;\">Copied!</span>\n          </div>\n        </div>\n        <div class=\"flex flex-col\">\n          <div class=\"\">\n            <button v-if=\"!goLiveStore.isRecording\" @click=\"goLiveStore.startRecording\"\n                    class=\"btn text-white bg-green-500 hover:bg-green-700 uppercase\"\n            >Start Recording\n            </button>\n            <button v-else @click=\"goLiveStore.stopRecording\" class=\"btn text-white bg-red-700 hover:bg-red-900 uppercase\"\n            >Stop Recording\n            </button>\n            <div v-if=\"!goLiveStore.isRecording\" class=\"text-xs text-green-500 font-semibold tracking-wider\">Premium Creator\n              Service\n            </div>\n          </div>\n          <div class=\"my-4\">\n            <button v-if=\"!goLiveStore.isLive\" @click=\"goLiveStore.goLive\"\n                    class=\"btn text-white bg-green-500 hover:bg-green-700 uppercase\"\n            >Go Live Now\n            </button>\n            <button v-else @click=\"goLiveStore.stopLive\" class=\"btn text-white bg-red-700 hover:bg-red-900 uppercase\"\n            >End Live\n            </button>\n            <div v-if=\"!goLiveStore.isLive\" class=\"text-xs text-green-500 font-semibold tracking-wider\">Premium Creator\n              Service\n            </div>\n          </div>\n          <div></div>\n          <div>Live will begin in...</div>\n          <div>{{ formattedCountdown }}</div>\n        </div>\n      </div>\n\n\n      <div class=\"flex flex-col justify-center mt-3 h-fit\">\n        <div class=\"text-xs tracking-wider font-semibold mb-1 pl-1\">VIDEO STREAM</div>\n\n        <div class=\"flex flex-row flex-wrap\">\n          <div class=\"flex flex-col\">\n            <div class=\"px-10 h-fit w-fit\">\n              <button @click=\"reloadPlayer\"\n                      class=\"btn btn-xs w-full\"\n                      :class=\"liveOrRecordingGrayButtonClass\"\n              >Reload Player\n              </button>\n              <div v-if=\"goLiveStore.isLive || goLiveStore.isRecording\" class=\"w-full bg-red-700 text-white text-center uppercase font-bold\">\n                <span v-if=\"goLiveStore.isLive\">LIVE</span> <span v-if=\"goLiveStore.isLive && goLiveStore.isRecording\"> + </span>\n                <span v-if=\"goLiveStore.isRecording\">RECORDING</span>\n              </div>\n              <video-js-aux :id=\"`aux-player`\"\n                            :source=\"videoSource\"\n                            :sourceType=\"videoSourceType\"\n                            class=\"\"\n                            :class=\"liveOrRecordingVideoBorderClass\"/>\n\n\n              <!--            <div v-if=\"playerTargetId\" class=\"mistvideo\" :id=\"playerTargetId\">-->\n              <!--              <noscript>-->\n              <!--                <a :href=\"`http://mist.nottv.io:8080/${goLiveStore.selectedShow.mist_stream_wildcard.name}.html`\" target=\"_blank\">-->\n              <!--                  Click here to play this video-->\n              <!--                </a>-->\n              <!--              </noscript>-->\n              <!--            </div>-->\n\n            </div>\n            <div class=\"flex flex-row px-10\">\n              <div class=\"mt-2\">\n                <button v-if=\"!videoPlayerStore.muted\"\n                        class=\"btn\"\n                        :class=\"liveOrRecordingGrayButtonClass\"\n                        @click=\"videoPlayerStore.mute\">Mute Main Player Audio\n                </button>\n                <button v-else\n                        class=\"btn\"\n                        @click=\"videoPlayerStore.unMute\"\n                        :class=\"liveOrRecordingGrayButtonClass\">Turn On Main Player Audio\n                </button>\n              </div>\n              <div class=\"mt-2 ml-2\">\n                <button v-if=\"!videoAuxPlayerStore.muted\"\n                        class=\"btn\"\n                        :class=\"liveOrRecordingGrayButtonClass\"\n                        @click=\"videoAuxPlayerStore.mute\">Mute Live Stream\n                  Video\n                </button>\n                <button v-else\n                        class=\"btn\"\n                        :class=\"liveOrRecordingGrayButtonClass\"\n                        @click=\"videoAuxPlayerStore.unMute\">Turn On Live Stream Audio\n                </button>\n              </div>\n            </div>\n          </div>\n\n          <div v-if=\"goLiveStore.streamInfo && !goLiveStore.streamInfo.error\" class=\"w-fit\" :key=\"goLiveStore.selectedShowId\">\n            <div>\n              <h3>Stream Info</h3>\n              <!--                <RecursivePropertyList :object=\"serverInfo\" />-->\n\n              <p><strong>Width:</strong> {{ goLiveStore.streamInfo?.width }}</p>\n              <p><strong>Height:</strong> {{ goLiveStore.streamInfo?.height }}</p>\n\n              <!-- Assuming you want to display tracks info specifically -->\n              <div v-if=\"goLiveStore.streamInfo?.meta?.tracks\">\n                <h4 class=\"font-semibold\">Tracks</h4>\n                <ul>\n                  <li v-for=\"(track, name) in goLiveStore?.streamInfo?.meta.tracks\" :key=\"name\">\n                    &middot; {{ name }} - Codec: {{ track.codec }}, Rate: {{ track.rate }}\n                  </li>\n                </ul>\n              </div>\n            </div>\n          </div>\n          <div v-if=\"!goLiveStore?.streamInfo && !goLiveStore?.streamInfo?.error\">\n            <div class=\"flex flex-col\">\n              <span class=\"mb-2\">Loading stream data...</span>\n              <span class=\"loading loading-spinner text-neutral\"></span>\n            </div>\n\n          </div>\n          <div v-if=\"goLiveStore?.streamInfo?.error\">\n            <div class=\"flex flex-col\">\n              <span class=\"mb-2\">{{ goLiveStore?.streamInfo?.error }}</span>\n            </div>\n\n          </div>\n\n        </div>\n\n      </div>\n\n\n      <div class=\"mx-4 mt-4 mb-2 px-6 py-1 \">\n        <div\n            class=\"text-sm font-semibold bg-blue-600 text-white text-center w-full border-2 border-blue-600 rounded uppercase px-6 py-1 \">\n          Push Destinations\n        </div>\n        <div class=\"shadow bg-blue-100 overflow-hidden border-2 border-blue-600 rounded p-6 space-y-3\">\n          <div></div>\n          <div>Set up <span class=\"font-bold\">push destinations:</span></div>\n          <div>Here you can set additional streaming destinations such as Facebook, YouTube, Rumble, Twitch, etc. and\n            notTV will automatically start pushing to those destinations when you go live.\n          </div>\n          <div class=\"w-full flex justify-center pt-4\">\n            <button onclick=\"setPushDestinationsNotice.showModal()\"\n                    class=\"bg-blue-600 hover:bg-blue-500 text-white font-semibold rounded-lg px-4 py-2\">Set Push\n              Destinations\n            </button>\n          </div>\n        </div>\n\n      </div>\n\n    </div>\n\n  </div>\n\n  <div class=\"mx-4 mt-4 mb-8 px-6 py-1 \">\n    <div\n        class=\"text-sm font-semibold bg-orange-600 text-white text-center w-full border-2 border-orange-600 rounded uppercase px-6 py-1 \">\n      Commercial Breaks\n    </div>\n    <div class=\"shadow bg-orange-100 overflow-hidden border-2 border-orange-600 rounded p-6 space-y-3\">\n      <div></div>\n      <div>Click the <span class=\"font-bold\">Trigger Commercial Break</span> button below to go to commercial.</div>\n      <div>You will see a countdown timer until the show resumes. This will be 1-2 minutes.</div>\n      <div>As a notTV creator, your voice matters. How can this feature be improved to better serve you and your\n        sponsors?\n        Please email and let us know: <a href=\"mailto:hello@not.tv\" target=\"_blank\"\n                                         class=\"text-blue-500 hover:text-blue-600\">hello@not.tv</a>\n      </div>\n      <div class=\"w-full flex justify-center pt-4\">\n        <button onclick=\"setCommercialBreakNotice.showModal()\"\n                class=\"bg-orange-600 hover:bg-orange-500 text-white font-semibold rounded-lg px-4 py-2\">Trigger\n          Commercial Break\n        </button>\n      </div>\n    </div>\n\n  </div>\n\n\n</template>\n\n<script setup>\n// import { useTimeAgo } from '@vueuse/core'\nimport { computed, onBeforeUnmount, onMounted, ref, watchEffect } from 'vue'\nimport { useAppSettingStore } from '@/Stores/AppSettingStore'\nimport { useVideoPlayerStore } from '@/Stores/VideoPlayerStore'\nimport { useVideoAuxPlayerStore } from '@/Stores/VideoAuxPlayerStore'\nimport { useGoLiveStore } from '@/Stores/GoLiveStore'\nimport VideoJsAux from '@/Components/Global/VideoPlayer/VideoJs/VideoJsAux'\nimport videojs from 'video.js'\nimport { FontAwesomeIcon } from '@fortawesome/vue-fontawesome'\nimport { useClipboard } from '@vueuse/core'\n\nconst appSettingStore = useAppSettingStore()\nconst videoPlayerStore = useVideoPlayerStore()\nconst videoAuxPlayerStore = useVideoAuxPlayerStore()\nconst goLiveStore = useGoLiveStore()\n\nlet props = defineProps({\n  // show: Object,\n})\n\nconst showCopiedFullUrl = ref(false)\nconst showCopiedRtmpUri = ref(false)\nconst showCopiedStreamKey = ref(false)\nconst { copy } = useClipboard()\n\n// const copyText = () => {\n//   copy('Text to be copied');\n//   showCopied.value = true;\n//   setTimeout(() => {\n//     showCopied.value = false;\n//   }, 2000); // Hide the message after 2 seconds\n// };\n\nlet videoSource = videoPlayerStore.mistServerUri + 'hls/' + goLiveStore?.selectedShow?.mist_stream_wildcard.name\n    + '/index.m3u8'\nlet videoSourceType = 'application/vnd.apple.mpegURL'\n\n// Fetch server info on component mount\n// goLiveStore.fetchStreamInfo(goLiveStore?.selectedShow?.mist_stream_wildcard.name)\n// goLiveStore.fetchRtmpUri()\n\nconst fullUrl = ref('');\nconst rtmpUri = ref('');\nconst streamKey = ref('');\n\n// Initialize fetching of server information\ngoLiveStore.fetchStreamInfo(goLiveStore?.selectedShow?.mist_stream_wildcard.name);\ngoLiveStore.fetchRtmpUri();\n\n// Reactively update URLs when the store updates\nwatchEffect(() => {\n  if (goLiveStore.rtmpUri) {\n    rtmpUri.value = goLiveStore.rtmpUri + 'live/';\n    // Check if it's an episode or a selected show and update accordingly\n    if (goLiveStore.isEpisode && goLiveStore.episode?.mist_stream_wildcard?.name) {\n      streamKey.value = goLiveStore.episode.mist_stream_wildcard.name;\n    } else if (!goLiveStore.isEpisode && goLiveStore.selectedShow?.mist_stream_wildcard?.name) {\n      streamKey.value = goLiveStore.selectedShow.mist_stream_wildcard.name;\n    }\n    fullUrl.value = `${rtmpUri.value}${streamKey.value}`;\n  }\n});\n\n// Function to handle the copy action and display the \"copied\" message for each type\nconst copyFullUrl = () => {\n  copy(fullUrl.value);\n  showCopiedFullUrl.value = true;\n  setTimeout(() => showCopiedFullUrl.value = false, 1000);\n};\n\nconst copyRtmpUri = () => {\n  copy(rtmpUri.value);\n  showCopiedRtmpUri.value = true;\n  setTimeout(() => showCopiedRtmpUri.value = false, 1000);\n};\n\nconst copyStreamKey = () => {\n  copy(streamKey.value);\n  showCopiedStreamKey.value = true;\n  setTimeout(() => showCopiedStreamKey.value = false, 1000);\n};\n\n// if (goLiveStore.isEpisode) {\n//   fullUrl = rtmpUri.value + goLiveStore?.episode?.mist_stream_wildcard?.name\n//   streamKey = goLiveStore?.episode?.mist_stream_wildcard?.name\n// } else if (!goLiveStore.isEpisode) {\n//   fullUrl = rtmpUri.value + goLiveStore?.selectedShow?.mist_stream_wildcard?.name\n//   streamKey = goLiveStore?.selectedShow?.mist_stream_wildcard?.name\n// }\n\n// const copyFullUrl = () => copy(fullUrl);\n// const copyRtmpUri = () => copy(rtmpUri.value);\n// const copyStreamKey = () => copy(streamKey);\n//\n// watchEffect(() => {\n//   if (goLiveStore.rtmpUri) {\n//     rtmpUri.value = goLiveStore.rtmpUri + 'live/';\n//   }\n// });\n\n// Asynchronously fetch the JSON data\n// async function fetchServerInfo() {\n//   try {\n//     const response = await fetch('http://mist.nottv.io:8080/json_dvr_playback_2.js'); // Replace with your URL\n//     if (!response.ok) throw new Error('Failed to fetch');\n//     const data = await response.json();\n//     serverInfo.value = data; // Store the data in serverInfo\n//     console.log (serverInfo)\n//   } catch (error) {\n//     console.error('Error fetching server info:', error);\n//   }\n// }\n\n// let videoSrc = ref('')\n// let videoJsAux = ('aux-player')\n\n// const videoOptions = ref({\n//   autoplay: true,\n//   muted: true,\n//   controls: true,\n//   fill: true,\n//   sources: [\n//     {\n//       src: videoSource,\n//       type: videoSourceType,\n//     },\n//   ],\n// });\n\nconst reloadPlayer = () => {\n  let source = null\n  if(goLiveStore?.selectedShow?.mist_stream_wildcard?.name) {\n    source = goLiveStore?.selectedShow?.mist_stream_wildcard?.name\n    goLiveStore.fetchStreamInfo(goLiveStore?.selectedShow?.mist_stream_wildcard?.name)\n  } else if (goLiveStore?.episode?.mist_stream_wildcard?.name) {\n    source = goLiveStore?.episode?.mist_stream_wildcard?.name\n    goLiveStore.fetchStreamInfo(goLiveStore?.episode?.mist_stream_wildcard?.name)\n  }\n  let sourceUrl = videoPlayerStore.mistServerUri + 'hls/' + source + '/index.m3u8'\n  console.log('source url: ' + sourceUrl)\n  let sourceType = 'application/vnd.apple.mpegurl'\n  let videoJs = videojs('aux-player')\n  videoJs.src({'src': sourceUrl, 'type': sourceType})\n  // videoAuxPlayerStore.loadNewLiveSource(source, sourceType)\n  console.log('reload player')\n}\n\n\n\nonMounted(() => {\n  // videoSrc = goLiveStore.selectedShow.mist_stream_wildcard.name\n  // videoJsAux.src({'src': videoSrc, 'type': 'application/vnd.apple.mpegurl'});\n  // videoJsAux.ready(() => {\n  //\n  // })\n  startCountdown()\n\n  console.log('onPlayerReady AUX')\n  // fetchServerInfo()\n\n})\n\n// Initial countdown time in seconds (5 minutes * 60 seconds)\nconst countdownTime = 5 * 60\n// Reactive state for the countdown\nconst countdown = ref(countdownTime)\n\n// Computed property to format the countdown as mm:ss\nconst formattedCountdown = computed(() => {\n  const minutes = Math.floor(countdown.value / 60)\n  const seconds = countdown.value % 60\n  return `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`\n})\n\n// Function to start the countdown - temporary for demo purposes.\nconst startCountdown = () => {\n  const interval = setInterval(() => {\n    countdown.value--\n\n    if (countdown.value < 0) {\n      clearInterval(interval) // Stop the interval\n      countdown.value = countdownTime // Reset countdown\n      startCountdown() // Restart the countdown\n    }\n  }, 1000)\n}\n\nconst liveOrRecordingGrayButtonClass = computed(() => {\n  if (goLiveStore.isLive || goLiveStore.isRecording) {\n    return 'bg-gray-200 hover:bg-gray-400'\n  } else {\n    return ''\n  }\n})\n\nconst liveOrRecordingVideoBorderClass = computed(() => {\n  if (goLiveStore.isLive || goLiveStore.isRecording) {\n    return 'border-4 border-red-700'\n  } else {\n    return ''\n  }\n})\n\n//\n// // Assuming props.show.mist_stream_wildcard.name exists and is reactive\n// const playerTargetId = ref('');\n//\n// const initializePlayer = () => {\n//   const targetElement = document.getElementById(playerTargetId.value);\n//   if (targetElement) {\n//     mistPlay(goLiveStore.selectedShow.mist_stream_wildcard.name, {\n//       target: targetElement,\n//       fillSpace: true\n//     });\n//   } else {\n//     console.error('Target element for video player not found.');\n//   }\n// };\n//\n// const removePlayer = () => {\n//   const existingContainer = document.getElementById(playerTargetId.value);\n//   if (existingContainer) {\n//     existingContainer.remove();\n//   }\n// };\n//\n//\n// const reloadPlayer = () => {\n//   removePlayer();\n//\n//   nextTick(() => {\n//     const newPlayerContainer = document.createElement('div');\n//     const uniqueId = `${goLiveStore.selectedShow.mist_stream_wildcard.name}-${Date.now()}`;\n//     newPlayerContainer.id = uniqueId;\n//     playerTargetId.value = uniqueId;\n//\n//     document.body.appendChild(newPlayerContainer); // Append to body or choose a specific container\n//\n//     loadAndInitializePlayer();\n//   });\n// };\n//\n// const loadAndInitializePlayer = () => {\n//   if (!window.mistplayers) {\n//     const playerScript = document.createElement(\"script\");\n//     playerScript.src = \"https://mist.nottv.io:443/player.js\"; // Assuming HTTPS site\n//     document.head.appendChild(playerScript);\n//     playerScript.onload = initializePlayer;\n//   } else {\n//     initializePlayer();\n//   }\n// };\n//\n// onMounted(() => {\n//   playerTargetId.value = `${goLiveStore.selectedShow.mist_stream_wildcard.name}-${Date.now()}`;\n//   loadAndInitializePlayer();\n// });\n//\n// watch(() => playerTargetId.value, (newVal) => {\n//   if (newVal) {\n//     loadAndInitializePlayer();\n//   }\n// });\n//\n// onBeforeUnmount(() => {\n//   removePlayer(); // Ensure the player's container is removed when the component unmounts\n// });\n\n\n//\n//\n// const loadAndInitializePlayer = () => {\n//   if (!window.mistplayers) {\n//     const playerScript = document.createElement(\"script\");\n//     playerScript.src = location.protocol === \"https:\" ? \"https://mist.nottv.io:443/player.js\" : \"http://mist.nottv.io:8080/player.js\";\n//     document.head.appendChild(playerScript);\n//     playerScript.onload = initializePlayer;\n//   } else {\n//     initializePlayer();\n//   }\n// };\n//\n// const removePlayer = () => {\n//   const targetElement = document.getElementById(playerTargetId.value);\n//   if (targetElement) {\n//     // Option 1: Remove the child element completely\n//     targetElement.parentNode.removeChild(targetElement);\n//\n//     // OR Option 2: Reset the content of the element\n//     // targetElement.innerHTML = '';\n//\n//     console.log('Video player removed.');\n//   } else {\n//     console.error('Target element for video player not found for removal.');\n//   }\n// };\n//\n// onMounted(() => {\n//   playerTargetId.value = `${props.show.mist_stream_wildcard.name}-${Date.now()}` // Set the target ID based on props\n//   console.log(playerTargetId.value)\n//   loadAndInitializePlayer();\n//   // nextTick(() => {\n//   //   loadAndInitializePlayer();\n//   // });\n// });\n//\n// // onMounted(() => {\n// //\n// //   // loadAndInitializePlayer()\n// //   if (!window.mistplayers) {\n// //     const playerScript = document.createElement(\"script\");\n// //     playerScript.src = location.protocol === \"https:\" ? \"https://mist.nottv.io:443/player.js\" : \"http://mist.nottv.io:8080/player.js\";\n// //     document.head.appendChild(playerScript);\n// //     playerScript.onload = initializePlayer;\n// //   } else {\n// //     initializePlayer();\n// //   }\n// // });\n//\n// // Define `reloadPlayer` method to reload the player. This could be the same as `initializePlayer`\n// // if reloading simply means reinitializing.\n// const reloadPlayer = () => {\n//   // Remove the existing player and its container\n//   removePlayer();\n//\n//   // Recreate the container element for the player\n//   const newPlayerContainer = document.createElement('div');\n//   newPlayerContainer.id = `${props.show.mist_stream_wildcard.name}-${Date.now()}`; // Set the new target ID\n//   playerTargetId.value = newPlayerContainer.id; // Update the reactive reference\n//\n//   // Append the new container to the appropriate parent element in your DOM\n//   // Replace `parentElementSelector` with the actual selector of the parent where the player should be attached\n//   const parentElement = document.querySelector('parentElementSelector');\n//   if (parentElement) {\n//     parentElement.appendChild(newPlayerContainer);\n//   } else {\n//     console.error('Parent element for video player not found.');\n//     return;\n//   }\n//\n//   // Initialize the player in the new container\n//   loadAndInitializePlayer();\n// };\n//\n// // If there's a need to watch for `playerTargetId` changes to reinitialize the player\n// watch(() => playerTargetId.value, (newVal) => {\n//   // Load and initialize player only if newVal is truthy\n//   if (newVal) {\n//     loadAndInitializePlayer();\n//   }\n// });\n//\n// // const loadAndInitializePlayer = () => {\n// //   if (!window.mistplayers) {\n// //     const playerScript = document.createElement(\"script\");\n// //     playerScript.src = location.protocol === \"https:\" ? \"https://mist.nottv.io:443/player.js\" : \"http://mist.nottv.io:8080/player.js\";\n// //     document.head.appendChild(playerScript);\n// //     playerScript.onload = initializePlayer;\n// //   } else {\n// //     initializePlayer();\n// //   }\n// // };\n//\nonBeforeUnmount(() => {\n  // goLiveStore.reset()\n  // Example cleanup logic; adjust based on your player's API\n  // if (window.mistplayers && window.mistplayers[playerTargetId.value]) {\n  //   window.mistplayers[playerTargetId.value].destroy(); // Hypothetical destroy method\n  // }\n});\n//\n// onBeforeUnmount(() => {\n//   if (videoPlayer && typeof videoPlayer.dispose === 'function') {\n//     videoPlayer.dispose();\n//   }\n// });\n// let videoEmbedCode = props.episode.video_file_embed_code;\n\n// const timeAgo = useTimeAgo(new Date(2023, 10, 5))\n// const timeAgo = useTimeAgo(props.episode.scheduledDateTime)\n</script>\n\n<style scoped>\n.copied-message-fade {\n  animation: fadeOut 2s forwards;\n}\n\n@keyframes fadeOut {\n  from {\n    opacity: 1;\n  }\n  to {\n    opacity: 0;\n  }\n}\n</style>","import api from \"!../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../../../node_modules/css-loader/dist/cjs.js??clonedRuleSet-9.use[1]!../../../../../node_modules/vue-loader/dist/stylePostLoader.js!../../../../../node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-9.use[2]!../../../../../node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./GoLive.vue?vue&type=style&index=0&id=c2857aaa&scoped=true&lang=css\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","import script from \"./GoLive.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./GoLive.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./GoLive.vue?vue&type=style&index=0&id=c2857aaa&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-c2857aaa\"]])\n\nexport default __exports__","import script from \"./Messages.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Messages.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n  <div class=\"mx-4 my-4\">\n    <div class=\"alert alert-info mt-4\"\n         v-if=\"props.flash.message\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" class=\"stroke-current shrink-0 w-6 h-6\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n              d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"></path>\n      </svg>\n      <span>{{ props.flash.message }}</span>\n      <button class=\"text-xs ml-12\" @click=\"clearFlashMessage\"> Close</button>\n    </div>\n    <div class=\"alert alert-success mt-4 mx-3\"\n         v-if=\"props.flash.success\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"stroke-current shrink-0 h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n              d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"/>\n      </svg>\n      <span>{{ props.flash.success }}</span>\n      <button class=\"text-xs ml-12\" @click=\"clearFlashMessage\"> Close</button>\n    </div>\n    <div class=\"alert alert-warning mt-4 mx-3\"\n         v-if=\"props.flash.warning\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"stroke-current shrink-0 h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n              d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z\"/>\n      </svg>\n      <span>{{ props.flash.warning }}</span>\n      <button class=\"text-xs ml-12\" @click=\"clearFlashMessage\"> Close</button>\n    </div>\n    <div class=\"alert alert-error mt-4 mx-3\"\n         v-if=\"props.flash.error\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"stroke-current shrink-0 h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n              d=\"M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z\"/>\n      </svg>\n      <span>{{ props.flash.error }}</span>\n      <button class=\"text-xs ml-12\" @click=\"clearFlashMessage\"> Close</button>\n    </div>\n  </div>\n\n</template>\n\n<script setup>\nimport { Inertia } from \"@inertiajs/inertia\"\nimport { computed } from \"vue\"\nimport { useAppSettingStore } from \"@/Stores/AppSettingStore\"\n\nconst appSettingStore = useAppSettingStore()\n\nappSettingStore.showFlashMessage = true\n\nlet props = defineProps({\n  flash: Object,\n\n})\n\nconst messageType = computed(() => ({\n  'text-green-700 bg-green-100 dark:bg-green-200 dark:text-green-800': props.flash.success,\n  'text-blue-700 bg-blue-100 dark:bg-blue-200 dark:text-blue-800': props.flash.message,\n  'text-orange-700 bg-orange-100 dark:bg-orange-200 dark:text-orange-800': props.flash.warning,\n  'text-red-700 bg-red-100 dark:bg-red-200 dark:text-red-800': props.flash.error,\n}))\n\nconst clearFlashMessage = async () => {\n  await Inertia.post(route('flash.clear'));\n  Inertia.reload();\n};\n</script>\n","import script from \"./PopUpModal.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./PopUpModal.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","import script from \"./ManageShowEpisodeNoticeModals.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./ManageShowEpisodeNoticeModals.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","import script from \"./GoLive.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./GoLive.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n  <Head title=\"Go Live\"/>\n  <!--        <template #header>-->\n  <!--            <h2 class=\"font-semibold text-xl text-gray-800 leading-tight\">-->\n  <!--                Dashboard-->\n  <!--            </h2>-->\n  <!--        </template>-->\n\n  <!--        <div class=\"py-12\">-->\n  <!--            <div class=\"max-w-7xl mx-auto sm:px-6 lg:px-8\">-->\n  <!--                <div class=\"bg-white overflow-hidden shadow-xl sm:rounded-lg\">-->\n\n  <div class=\"place-self-center flex flex-col gap-y-3\">\n    <div id=\"topDiv\" class=\"bg-white text-black p-5 mb-10\">\n\n      <Message v-if=\"appSettingStore.showFlashMessage\" :flash=\"$page.props.flash\"/>\n\n      <div class=\"flex justify-between mx-4 px-6\">\n        <div class=\"grid grid-cols-1 grid-rows-2\">\n          <h1 class=\"text-3xl font-semibold\">Go Live</h1>\n        </div>\n        <div>\n          <CancelButton/>\n        </div>\n        <!--                <div class=\"grid grid-cols-1 grid-rows-2\">-->\n        <!--                    <div class=\"justify-self-end\">-->\n        <!--                        <Link :href=\"`/dashboard`\"><button-->\n        <!--                            class=\"px-4 py-2 text-white bg-blue-600 hover:bg-blue-500 rounded-lg\"-->\n        <!--                        >Dashboard</button>-->\n        <!--                        </Link>-->\n        <!--                    </div>-->\n        <!--                </div>-->\n      </div>\n      <div v-if=\"goLiveStore.shows && goLiveStore.shows.length > 0\" class=\"mb-6 mx-4 px-6\">\n        <label class=\"block mb-2 uppercase font-bold text-xs text-light text-gray-700\"\n               for=\"show\"\n        >\n          Select Show To Go Live On\n        </label>\n\n        <select\n            class=\"border border-gray-400 text-gray-800 p-2 w-full rounded-lg block my-2 uppercase font-bold text-xs \"\n            v-model=\"goLiveStore.selectedShowId\"\n            @change=\"reloadPlayer\"\n        >\n          <option disabled value=\"\">Select show</option>\n          <option v-for=\"show in goLiveStore.shows\"\n                  :key=\"show.id\" :value=\"show.id\">{{ show.name }}\n          </option>\n\n        </select>\n\n\n\n      </div>\n\n      <div v-else class=\"bg-black w-3/4 text-center px-10 py-6 text-white mx-auto border-red-700 border-2\">\n        You don't have any shows to go live with... please check your show(s).\n      </div>\n\n      <div v-if=\"goLiveStore.selectedShow\" class=\"text-2xl font-semibold text-center w-full\">\n        <Link :href=\"`/shows/${goLiveStore.selectedShow.slug}/manage`\">{{goLiveStore.selectedShow.name}}</Link>\n      </div>\n\n      <GoLive v-if=\"goLiveStore.selectedShow && goLiveStore.selectedShow.mist_stream_wildcard_id\" />\n      <div v-if=\"goLiveStore.selectedShow && !goLiveStore.selectedShow.mist_stream_wildcard_id\" class=\"flex flex-col justify-items-center text-center px-16\">\n        <div class=\"mb-3\">Please generate a stream key:</div>\n        <div><button @click=\"handleGenerateStreamKey\" class=\"btn btn-sm w-fit bg-green-500 hover:bg-green-700 text-white\">generate key</button></div>\n      </div>\n    </div>\n  </div>\n  <!--                </div>-->\n  <!--            </div>-->\n  <!--        </div>-->\n\n  <ManageShowEpisodeNoticeModals />\n</template>\n\n<script setup>\nimport { usePageSetup } from '@/Utilities/PageSetup'\nimport { useAppSettingStore } from '@/Stores/AppSettingStore'\nimport { useVideoPlayerStore } from '@/Stores/VideoPlayerStore'\nimport { useVideoAuxPlayerStore } from '@/Stores/VideoAuxPlayerStore'\nimport { useGoLiveStore } from '@/Stores/GoLiveStore'\nimport Message from '@/Components/Global/Modals/Messages'\nimport CancelButton from '@/Components/Global/Buttons/CancelButton'\nimport GoLive from '@/Components/Global/GoLive/GoLive'\nimport { computed, onMounted, ref, watch, withDefaults } from 'vue'\nimport videojs from 'video.js'\nimport ManageShowEpisodeNoticeModals from '@/Components/Pages/ShowEpisodes/Elements/ManageShowEpisodeNoticeModals.vue'\nimport Button from '@/Jetstream/Button.vue'\n\nusePageSetup('goLive')\n\nconst appSettingStore = useAppSettingStore()\nconst videoPlayerStore = useVideoPlayerStore()\nconst videoAuxPlayerStore = useVideoAuxPlayerStore()\nconst goLiveStore = useGoLiveStore()\n\nconst props = defineProps({\n  shows: Object\n})\n\nonMounted(async () => {\n  goLiveStore.isEpisode = null\n  goLiveStore.episode = null\n  goLiveStore.fetchShows().then(() => {\n    if (goLiveStore.preSelectedShowId) {\n      goLiveStore.selectedShowId = goLiveStore.preSelectedShowId;\n    }\n  });\n});\n\n// const selectedShowId = ref('');\n// const selectedShow = computed(() => {\n//   return props.shows?.find(show => show.id === selectedShowId.value) || null;\n// });\n// const selectedShow = computed(() => goLiveStore.selectedShow);\n\nconst reloadPlayer = () => {\n  let source = goLiveStore.selectedShow.mist_stream_wildcard.name\n  let sourceUrl = videoAuxPlayerStore.mistServerUri + 'hls/' + source + '/index.m3u8'\n  console.log('source url: ' + sourceUrl)\n  let sourceType = 'application/vnd.apple.mpegurl'\n  let videoJs = videojs('aux-player')\n  videoJs.src({'src': sourceUrl, 'type': sourceType})\n  // videoAuxPlayerStore.loadNewLiveSource(source, sourceType)\n  goLiveStore.fetchStreamInfo(goLiveStore.selectedShow.mist_stream_wildcard.name);\n  console.log('reload player')\n}\n\nconst onChangeShow = (event) => {\n  goLiveStore.setSelectedShowId(event);\n  goLiveStore.fetchStreamInfo(goLiveStore.selectedShow.mist_stream_wildcard.name);\n  reloadPlayer()\n  // videoAuxPlayerStore.loadNewVideo(goLiveStore.selectedShow.mist)\n};\n\n\n\nconst handleGenerateStreamKey = async () => {\n  await goLiveStore.generateStreamKey();\n};\n\n// const generateStreamKey = () => {\n//   // Ensure selectedShowId is accessible and has a value\n//   if (!goLiveStore.selectedShowId.value) {\n//     console.error(\"No show selected\");\n//     return; // Exit the function if no show is selected\n//   }\n//\n//   axios.post(`/go-live/shows/${goLiveStore.selectedShowId.value}/stream-key`)\n//       .then(response => {\n//         // Handle the successful response here\n//         console.log(\"Stream key generated:\", response.data);\n//         // You might want to do something with the response data, like updating a data property\n//       })\n//       .catch(error => {\n//         // Handle any errors here\n//         console.error(\"Error generating stream key:\", error.response ? error.response.data : error);\n//       });\n// }\n\nwatch(goLiveStore.preSelectedShowId, (newVal, oldVal) => {\n  if (newVal !== '') {\n    // Assuming the video player is ready to be initialized at this point\n    // const videoPlayer = videojs('main-player');\n    videoPlayerStore.mute()\n    // goLiveStore.selectedShowId = selectedShowId\n\n    // Additional logic to load the video based on selectedShowId can be added here\n  }\n});\n</script>\n\n"],"names":["_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","delegateYield","asyncGeneratorStep","gen","reject","_next","_throw","key","info","error","_asyncToGenerator","fn","self","args","arguments","apply","err","undefined","initialState","displayEpisodeGoLiveComponent","isEpisode","episode","preSelectedShowId","selectedShowId","shows","streamKey","isLive","isRecording","streamInfo","rtmpUri","useGoLiveStore","defineStore","state","actions","assign","this","fetchShows","_this","_callee","response","_context","axios","get","data","t0","console","generateStreamKey","_this2","_callee2","_context2","post","concat","log","setSelectedShowId","showId","updateSelectedShow","_this3","selectedShow","find","show","id","goLive","stopLive","startRecording","stopRecording","fetchStreamInfo","streamName","_this4","_callee3","_context3","encodeURIComponent","fetch","ok","json","fetchRtmpUri","_this5","_callee4","_context4","text","clearStreamInfo","toggleDisplayEpisodeGoLiveComponent","show_id","updateEpisode","getters","player","eventListenersAttached","videoPlayerLoaded","class","videoContainerClass","videoSourceIdSrc1","videoSourceIdSrc2","videoSourceIdSrc3","videoSourceTypeSrc1","videoSourceTypeSrc2","videoSourceTypeSrc3","firstPlayVideoSourceType","firstPlayVideoSource","videoName","videoSource","videoSourceType","videoPoster","nextSource","previousSource","currentView","currentChannelId","currentChannelName","currentShow","currentShowEpisode","currentVideo","hasVideo","controls","muted","paused","currentTime","duration","formattedTime","blue","videoIsYoutube","videoUploadComplete","useVideoAuxPlayerStore","getMistServerUri","mistServerUri","setPlayer","playerInstance","initializePlayer","attachEventListeners","nextTick","useAudioStore","ensureAudioContextAndNodesReady","ready","play","on","handleTimeUpdate","handleFullscreenChange","handlePlay","handlePause","handleError","detachEventListeners","stopAudioLevelMonitoring","off","disposePlayer","dispose","prepareForNewVideoSource","source","useChannelStore","clearChannel","loadNewVideo","resetPlayback","pause","formatDuration","durationInSeconds","Math","floor","map","part","toString","padStart","join","_this$player","isFullscreen","_this$player2","_this$player3","_this6","_this$player4","code","message","makeBlue","toggleMute","unMute","mute","togglePlay","videoJs","videojs","load","loadNewLiveSource","sourceType","fullSourceUrl","src","back","fullscreen","requestFullscreen","getVideoCurrentTime","videoCurrentTime","getSourceDetails","videoSrc","mediaType","video_url","cdn_endpoint","cloud_folder","folder","file_name","_this7","audioStore","_this$getSourceDetail","deferAudioSetup","useNotificationStore","setGeneralServiceNotification","playNewVideo","_this8","loadNewSourceFromYouTube","loadNewLiveSourceFromRumble","loadNewSourceFromUrl","loadNewSourceFromMist","loadNewSourceFromFile","filePath","loadExternalSourceVideo","loadPlaylistVideos","loadMistStreamVideo","mistStream","_this9","basePath","loadVideoFromFile","video","_this10","setNowPlayingInfoVideoFile","nowPlayingType","nowPlayingName","useStreamStore","currentChannel","setNowPlayingInfoShow","clearNowPlayingInfo","showStore","useShowStore","firstPlayVideo","setName","setEpisodeUrl","slug","setUrl","setEpisodeName","makeVideoPiP","makeVideoFullPage","appSettingStore","useAppSettingStore","userStore","useUserStore","fullPage","hidePage","ott","isMobile","makeVideoTopRight","currentPageIsStream","makeVideoWelcomePage","loggedIn","usePageSetup","pageName","videoPlayerStore","useVideoPlayerStore","currentPage","showFlashMessage","pageIsHidden","onBeforeMount","pageReload","window","location","reload","onMounted","search","topDiv","document","getElementById","scrollIntoView","setPrevUrl","noLayout","showOttButtons","___CSS_LOADER_EXPORT___","module","props","__props","cancel","prevUrl","url","Inertia","visit","isCreator","videoAuxPlayerStore","videoElementId","playerOptions","controlBar","audioTrackButton","autoHide","captionsButton","chaptersButton","currentTimeDisplay","customControlSpacer","descriptionsButton","durationDisplay","fullscreenToggle","liveDisplay","pictureInPictureToggle","playToggle","playbackRateMenuButton","progressControl","seekBar","remainingTimeDisplay","seekToLive","subsCapsButton","subtitlesButton","timeDivider","volumePanel","inline","volumeBar","vertical","userActions","hotkeys","inactivityTimeout","autoplay","preload","html5","hls","overrideNative","browser","IS_SAFARI","videoAuxPlayer","el","addEventListener","event","preventDefault","onBeforeUnmount","goLiveStore","showCopiedFullUrl","ref","showCopiedRtmpUri","showCopiedStreamKey","copy","useClipboard","_goLiveStore$selected","mist_stream_wildcard","fullUrl","_goLiveStore$selected2","watchEffect","_goLiveStore$episode","_goLiveStore$selected3","copyFullUrl","setTimeout","copyRtmpUri","copyStreamKey","reloadPlayer","_goLiveStore$selected4","_goLiveStore$episode2","_goLiveStore$selected5","_goLiveStore$selected6","_goLiveStore$episode3","_goLiveStore$episode4","sourceUrl","startCountdown","countdown","formattedCountdown","computed","minutes","seconds","interval","setInterval","clearInterval","liveOrRecordingGrayButtonClass","liveOrRecordingVideoBorderClass","options","locals","clearFlashMessage","flash","success","warning","_ref","route","handleGenerateStreamKey","_ref2","watch","newVal","oldVal"],"sourceRoot":""}