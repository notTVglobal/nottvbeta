{"version":3,"file":"js/1493.js","mappings":"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","sources":["webpack:///./resources/js/Stores/GoLiveStore.js","webpack:///./resources/js/Stores/VideoAuxPlayerStore.js"],"sourcesContent":["import { defineStore } from 'pinia'\nimport { useNotificationStore } from '@/Stores/NotificationStore'\nimport { useVideoPlayerStore } from '@/Stores/VideoPlayerStore'\nimport { useVideoAuxPlayerStore } from '@/Stores/VideoAuxPlayerStore'\nimport videojs from 'video.js'\n\nconst initialState = () => ({\n    displayEpisodeGoLiveComponent: false,\n    isEpisode: null,\n    episode: null,\n    preSelectedShowId: null,\n    selectedShowId: null,\n    // selectedShow: null, this uses the getter... set it up in the component as a computed property\n    shows: [], // Assuming you might want to store shows here too\n    streamKey: '', // Optional: Store the generated stream key if needed\n    wildcardId: '',\n    isLive: false,\n    isRecording: false,\n    streamInfo: null,\n    rtmpUri: null,\n    destinations: [], // New state for holding destinations\n    isLoadingDestinations: false,\n    loadingDestinationId: null,\n    isProcessingDisableAllAutoPushes: false,\n    playerIsReloading: false,\n    pushDestinationFormSubmitProcessing: false,\n})\n\nexport const useGoLiveStore = defineStore('goLiveStore', {\n    state: initialState,\n    actions: {\n        reset() {\n            // Reset the store to its original state (clear all data)\n            Object.assign(this, initialState())\n        },\n        async fetchShows() {\n            try {\n                const response = await axios.get('/go-live/shows') // Adjust the URL as needed\n                this.shows = response.data\n            } catch (error) {\n                console.error('Failed to fetch shows:', error)\n                // Handle error appropriately\n            }\n        },\n\n\n        // temporarily commenting this out\n        async generateStreamKey() {\n            if (!this.selectedShowId) {\n                console.error('No show selected')\n                throw new Error('No show selected') // Throw an error to be caught by the caller\n            }\n\n            try {\n                const response = await axios.post(`/go-live/shows/${this.selectedShowId}/stream-key`)\n                console.log('Stream key generated:', response.data)\n                this.streamKey = response.data.stream_key // Assuming the response includes the stream key\n                console.log('this new stream key: ' + this.streamKey)\n                console.log('response data stream key: ' + response.data.stream_key)\n                // Update goLiveStore.selectedShow.mist_stream_wildcard_id with the returned stream key\n                if (this.selectedShowId && response.data.stream_key) {\n                    this.selectedShow.mist_stream_wildcard = response.data\n                    this.selectedShow.mist_stream_wildcard_id = response.data.stream_key\n                }\n                return response.data // Return the response data\n            } catch (error) {\n                console.error('Error generating stream key:', error.response ? error.response.data : error)\n                throw error // Re-throw the error to be caught by the component\n            }\n        },\n\n        // Other actions...\n        updateAndGetStreamKey() {\n            const show = this.shows.find(show => show.id === this.selectedShowId) || null\n            const streamKey = show?.mist_stream_wildcard?.name || ' < RELOAD THIS PAGE TO GET YOUR STREAM KEY > '\n\n            // Perform the state update\n            this.streamKey = streamKey\n\n            // Return the stream key for immediate use\n            return streamKey\n        },\n\n\n\n        // async generateStreamKey() {\n        //     if (!this.selectedShowId) {\n        //         console.error(\"No show selected\");\n        //         throw new Error(\"No show selected\");\n        //     }\n        //\n        //     try {\n        //         const response = await axios.post(`/go-live/shows/${this.selectedShowId}/stream-key`);\n        //         console.log(\"Stream key generated:\", response.data);\n        //\n        //         // Find the index of the selected show in the shows array\n        //         const selectedIndex = this.shows.findIndex(show => show.id === this.selectedShowId);\n        //         if (selectedIndex !== -1) {\n        //             // Update the selected show with the new stream key information\n        //             this.shows[selectedIndex].mist_stream_wildcard = response.data;\n        //             this.shows[selectedIndex].mist_stream_wildcard_id = response.data.stream_key;\n        //         }\n        //         return response.data;\n        //     } catch (error) {\n        //         console.error(\"Error generating stream key:\", error.response ? error.response.data : error);\n        //         throw error;\n        //     }\n        // },\n\n\n        // setPreSelectedShowId(id) {\n        //     this.preSelectedShowId = id;\n        //     console.log('preSelectedShowId updated to:', this.preSelectedShowId);\n        // },\n        // Action to update selectedShowId and selectedShow based on selectedShowId\n        setSelectedShowId(showId) {\n            this.selectedShowId = showId\n            this.updateSelectedShow() // Call the method to update selectedShow based on new selectedShowId\n        },\n        // Method to find and update selectedShow based on selectedShowId\n        updateSelectedShow() {\n            this.selectedShow = this.shows.find(show => show.id === this.selectedShowId) || null\n        },\n        goLive() {\n            this.isLive = true\n        },\n        stopLive() {\n            this.isLive = false\n        },\n        startRecording() {\n            this.isRecording = true\n        },\n        stopRecording() {\n            this.isRecording = false\n        },\n        // async fetchStreamInfo(streamName) {\n        //     try {\n        //         // const response = await fetch(`http://mist.nottv.io:8080/json_${encodedStreamName}.js`); // Replace with your URL\n        //         const response = await fetch(`/fetch-stream-info/${streamName}`) // Replace with your URL\n        //         if (!response.ok) throw new Error('Failed to fetch')\n        //         this.streamInfo = await response.json() // Store the data in serverInfo\n        //     } catch (error) {\n        //         console.error('Error fetching server info:', error)\n        //     }\n        // },\n        async fetchStreamInfo() {\n            const notificationStore = useNotificationStore();\n            try {\n                const response = await axios.get('/fetch-stream-info/'+this?.selectedShow?.mist_stream_wildcard.name);\n                console.log(response.data);\n                this.streamInfo = response.data.streamInfo || [];\n                // Assuming a successful response might look like {\"message\": \"Stream is online\", \"status\": \"success\"}\n                let message, status;\n\n                // Check if the response contains an error field\n                if (response.data.streamInfo.error) {\n                    message = response.data.streamInfo.error;\n                    status = 'error'; // Assuming 'error' as a fallback status\n                } else if (response.data.message && response.data.success) {\n                    // If it's a success message with a status\n                    message = response.data.message;\n                    status = 'info';\n                } else {\n                    // Fallback for unexpected response structure\n                    message = 'Received unexpected response from server.';\n                    status = 'info'; // Default to 'info' or another appropriate fallback status\n                }\n\n                // Use the status from the response for the notification\n                notificationStore.setToastNotification(message, status);\n            } catch (error) {\n                console.error(error);\n                notificationStore.setToastNotification('Failed to fetch stream info.', 'error');\n            }\n        },\n        async fetchRtmpUri() {\n            try {\n                const response = await fetch(`/fetch-rtmp-uri`)\n                if (!response.ok) throw new Error('Failed to fetch')\n\n                // Parse the plain text body of the response\n                // Store the RTMP URI string in a Vue data property or similar\n                this.rtmpUri = await response.text()\n            } catch (error) {\n                console.error('Error fetching RTMP URI:', error)\n            }\n        },\n        clearStreamInfo() {\n            this.streamInfo = null\n        },\n        toggleDisplayEpisodeGoLiveComponent(episode) {\n            // const videoPlayerAuxStore = useVideoAuxPlayerStore()\n            // videoPlayerAuxStore.reset()\n            this.displayEpisodeGoLiveComponent = !this.displayEpisodeGoLiveComponent\n            this.isEpisode = !!this.displayEpisodeGoLiveComponent\n            this.episode = episode\n            this.selectedShowId = this?.episode?.show_id\n\n        },\n        updateEpisode(episode) {\n            this.episode = episode\n        },\n        async reloadPlayer() {\n            const videoAuxPlayerStore = useVideoAuxPlayerStore();\n            this.playerIsReloading = true; // Start loading\n            try {\n                // Create an object and set the 'name' property\n                const mistStream = {\n                    name: this.streamKey\n                };\n                console.log('source: ' + mistStream.name)\n                await videoAuxPlayerStore.getMistServerUri()\n                // Now, you can pass the 'mistStream' object to the method\n                await videoAuxPlayerStore.loadMistStreamVideo(mistStream, true).then (\n                    await this.fetchStreamInfo()\n                );\n            } catch (error) {\n                console.error(error);\n                notificationStore.setToastNotification('Failed to reload player.', 'error');\n            } finally {\n                this.playerIsReloading = false; // Stop loading regardless of outcome\n            }\n\n        },\n        async fetchPushDestinations() {\n            const notificationStore = useNotificationStore();\n            this.isLoadingDestinations = true; // Start loading\n            try {\n                const response = await axios.post('/go-live/fetch-push-destinations', {showId: this.selectedShowId, streamName: this.streamKey});\n                console.log(response.data);\n                this.destinations = response.data.destinations || [];\n                this.isRecording = response.data.isRecording || false;\n                // Extract message and status from the response\n                const { message, status } = response.data;\n                // Use the status from the response for the notification\n                notificationStore.setToastNotification(message, status);\n            } catch (error) {\n                console.error(error);\n                notificationStore.setToastNotification('Failed to fetch push destinations.', 'error');\n            } finally {\n                this.isLoadingDestinations = false; // Stop loading regardless of outcome\n            }\n        },\n        async backgroundFetchPushDestinations() {\n            // Background Fetch doesn't use Toast Notifications,\n            // Keep the fetch silent in the background.\n\n            this.isLoadingDestinations = true; // Start loading\n            try {\n                const response = await axios.post('/go-live/fetch-push-destinations/', {showId: this.selectedShowId, streamName: this.streamKey});\n                this.destinations = response.data.destinations || [];\n                this.isRecording = response.data.isRecording || false;\n            } catch (error) {\n                console.error(error);\n            } finally {\n                this.isLoadingDestinations = false; // Stop loading regardless of outcome\n            }\n        },\n        async deleteDestination (destinationId) {\n            // Confirm deletion with the user before proceeding\n            if (confirm(`Are you sure you want to delete the destination with ID: ${destinationId}?`)) {\n                try {\n                    // Perform the delete operation\n                    await axios.delete('/mist-stream-push-destinations/'+destinationId)\n                    // Optionally, remove the item from your local state to update the UI\n                    this.destinations = this.destinations.filter(destination => destination.id !== destinationId)\n                } catch (error) {\n                    console.error(`Error deleting destination with ID: ${destinationId}`, error)\n                }\n            }\n        },\n        async startPush(destinationId, fullPushUri) {\n            const notificationStore = useNotificationStore();\n            this.loadingDestinationId = destinationId;\n            // console.log(`Starting push for destination ${destinationId}`)\n            try {\n                const response = await axios.post('/mist-stream/start-push', {destination_id: destinationId, full_push_uri: fullPushUri, stream_name: this.streamKey})\n                console.log('Push started successfully:', response.data)\n                console.log('Destination ID:', destinationId)\n                console.log('Full Push URI:', fullPushUri)\n                console.log('Stream Name:', this.streamKey)\n                const { message, status } = response.data;\n                // Use the status from the response for the notification\n                notificationStore.setToastNotification(message, status);\n                // Update the component's state to reflect the change\n                const index = this.destinations.findIndex(destination => destination.id === destinationId)\n                if (index !== -1) {\n                    this.destinations[index].push_is_started = 1\n                }\n            } catch (error) {\n                console.error('Error starting push:', error)\n                notificationStore.setToastNotification('Failed to start push.', 'error');\n                // Handle the error appropriately in your UI\n            } finally {\n                this.loadingDestinationId = null; // Stop loading regardless of outcome\n            }\n        },\n        async stopPush(destinationId) {\n            const notificationStore = useNotificationStore();\n            this.loadingDestinationId = destinationId;\n            // console.log(`Stopping push for destination ${destinationId}`)\n            try {\n                const response = await axios.post('/mist-stream/stop-push', {destination_id: destinationId})\n                console.log('Push stopped successfully:', response.data)\n                const { message, status } = response.data;\n                notificationStore.setToastNotification(message, status);\n                // Update the component's state to reflect the change\n            } catch (error) {\n                console.error('Error stopping push:', error)\n                notificationStore.setToastNotification('Failed to stop push.', 'error');\n            } finally {\n                this.loadingDestinationId = null; // Stop loading regardless of outcome\n                const index = this.destinations.findIndex(destination => destination.id === destinationId)\n                if (index !== -1) {\n                    this.destinations[index].push_is_started = 0\n                }\n            }\n        },\n        async enableAutoPush(destinationId) {\n            this.loadingDestinationId = destinationId;\n            const notificationStore = useNotificationStore();\n            try {\n                const response = await axios.post('/mist-stream/push-auto-add/'+destinationId)\n                console.log('Auto push enabled successfully:', response.data)\n                const { message, status } = response.data;\n                notificationStore.setToastNotification(message, status);\n                const index = this.destinations.findIndex(destination => destination.id === destinationId)\n                if (index !== -1) {\n                    this.destinations[index].has_auto_push = 1\n                }\n            } catch (error) {\n                console.error('Error enabling auto push:', error)\n                notificationStore.setToastNotification('Failed to enable auto push.', 'error');\n            } finally {\n                this.loadingDestinationId = null; // Stop loading regardless of outcome\n            }\n        },\n        async disableAutoPush(destinationId) {\n            const notificationStore = useNotificationStore();\n            this.loadingDestinationId = destinationId;\n            try {\n                const response = await axios.post('/mist-stream/push-auto-remove/'+destinationId)\n                console.log('Auto push removed successfully:', response.data)\n                const { message, status } = response.data;\n                notificationStore.setToastNotification(message, status);\n                const index = this.destinations.findIndex(destination => destination.id === destinationId)\n                if (index !== -1) {\n                    this.destinations[index].has_auto_push = 0\n                }\n            } catch (error) {\n                console.error('Error disabling auto push:', error)\n                notificationStore.setToastNotification('Failed to disable auto push.', 'error');\n            } finally {\n                this.loadingDestinationId = null; // Stop loading regardless of outcome\n            }\n        },\n        async disableAllAutoPushes() {\n            const notificationStore = useNotificationStore();\n            this.isProcessingDisableAllAutoPushes = true;\n            try {\n                const response = await axios.post('/mist-stream/remove-all-auto-pushes-for-stream', {'streamName':this.streamKey})\n                console.log('Auto push disabled successfully:', response.data)\n                const { message, status } = response.data;\n                notificationStore.setToastNotification(message, status);\n                await this.fetchPushDestinations()\n            } catch (error) {\n                console.error('Error disabling auto push:', error)\n                notificationStore.setToastNotification('Failed to disable auto push.', 'error');\n            } finally {\n                this.isProcessingDisableAllAutoPushes = false; // Stop loading regardless of outcome\n                await this.fetchPushDestinations()\n            }\n        },\n    },\n    getters: {\n        selectedShow: (state) => {\n            const show = state.shows.find(show => show.id === state.selectedShowId) || null\n            state.streamKey = show?.mist_stream_wildcard?.name || 'Fallback value if undefined'\n            state.wildcardId = show?.mist_stream_wildcard?.id || 'Fallback value if undefined'\n            return show\n        },\n        fullRtmpUri: (state) => {\n            return state.rtmpUri ? state.rtmpUri + 'live/' : ''\n        },\n        fullUrl: (state) => {\n            // Directly construct fullRtmpUri from state\n            const fullRtmpUri = state.rtmpUri ? state.rtmpUri + 'live/' : ''\n\n            // Directly find the show based on selectedShowId to avoid using getters\n            // const show = state.shows.find(show => show.id === state.selectedShowId) || null;\n            // const streamKey = show?.mist_stream_wildcard?.name || 'Fallback value if undefined';\n\n            // Return the concatenated URL\n            return `${fullRtmpUri}${state.streamKey}`\n        },\n        // Example getter that might filter destinations based on some criteria\n        activeDestinations: (state) => {\n            return state.destinations.filter(destination => destination.push_is_started);\n        },\n        sourceName: (state) => {\n            if (state.selectedShow?.mist_stream_wildcard?.name) {\n                return state.selectedShow.mist_stream_wildcard.name;\n            } else if (state.episode?.mist_stream_wildcard?.name) {\n                return state.episode.mist_stream_wildcard.name;\n            }\n            return null; // No source available\n        },\n    },\n\n\n})\n","import { defineStore } from 'pinia'\nimport { useAppSettingStore } from '@/Stores/AppSettingStore'\nimport { useStreamStore } from '@/Stores/StreamStore'\nimport { useUserStore } from '@/Stores/UserStore'\nimport { useChannelStore } from '@/Stores/ChannelStore'\nimport { useShowStore } from '@/Stores/ShowStore'\nimport { useAudioStore } from '@/Stores/AudioStore'\nimport videojs from 'video.js'\nimport { usePage } from '@inertiajs/inertia-vue3'\nimport { nextTick } from 'vue'\nimport { useNotificationStore } from '@/Stores/NotificationStore'\n\nconst initialState = () => ({\n    mistServerUri: 'https://mist.nottv.io/', // tec21: 2024-02-09, if we don't start with the address here changing channels is really slow and buggy. Address for the MistServer listed in the Admin Settings saved in AppSetting\n    player: null, // Video.js player instance\n    eventListenersAttached: false, // Track if listeners are attached\n    videoPlayerLoaded: false,\n    class: '',\n    videoContainerClass: '',\n    // ottClass: 'OttClose',\n    videoSourceIdSrc1: '',\n    videoSourceIdSrc2: '',\n    videoSourceIdSrc3: '',\n    videoSourceTypeSrc1: '',\n    videoSourceTypeSrc2: '',\n    videoSourceTypeSrc3: '',\n    firstPlayVideoSourceType: '',\n    firstPlayVideoSource: '',\n    key: '',\n    videoName: '',\n    videoSource: '',\n    videoSourceType: '',\n    videoPoster: '',\n    nextSource: '',\n    previousSource: '',\n    currentView: '',\n    currentChannelId: 0,\n    currentChannelName: '',\n    currentShow: {},\n    currentShowEpisode: {},\n    currentVideo: {},\n    hasVideo: false,\n    controls: true,\n    muted: true,\n    paused: true,\n    // videoCurrentTime: '',\n    currentTime: 0, // Current playback time in seconds\n    duration: 0, // Total video duration in seconds\n    formattedTime: '00:00 / 00:00', // Formatted time string\n    blue: false, // DO NOT REMOVE\n    videoIsYoutube: false,\n    videoUploadComplete: false,\n})\n\nexport const useVideoAuxPlayerStore = defineStore('videoAuxPlayerStore', {\n    state: initialState,\n    actions: {\n        reset() {\n            // Reset the store to its original state (clear all data)\n            Object.assign(this, initialState())\n        },\n\n        async getMistServerUri() {\n            try {\n                let response = await axios.get('/mist-server/uri')\n                this.mistServerUri = response.data\n            } catch (error) {\n                console.error(error)\n            }\n        },\n\n        // Initialize or update the player instance\n        setPlayer(playerInstance) {\n            this.player = playerInstance\n            this.initializePlayer().then(() => {\n                this.attachEventListeners() // Attach event listeners after initialization\n            }).catch(error => {\n                console.error('Error during video player initialization:', error)\n            })\n        },\n\n        // Initialize the player with necessary settings and start playback\n        async initializePlayer() {\n            if (!this.player) {\n                console.error('Video.js player is not initialized.')\n                return\n            }\n\n            await nextTick() // Ensure Vue's DOM updates are processed\n\n            // Perform any necessary audio context and node setup\n            await useAudioStore().ensureAudioContextAndNodesReady(this.player)\n\n            // Apply initial player settings\n            this.player.controls(false)\n            this.player.muted(this.muted)\n\n            // Attempt to start playback\n            this.player.ready(() => {\n                this.player.play().then(() => {\n                    console.log('Playback started successfully')\n                }).catch(error => {\n                    console.error('Error trying to play the video:', error)\n                    // Handle the error (e.g., showing a user-friendly message)\n                })\n            })\n        },\n\n        // Attach event listeners to the player\n        attachEventListeners() {\n            if (!this.player || this.eventListenersAttached) {\n                console.log('Event listeners are already attached or video player is not initialized.')\n                return\n            }\n\n            this.player.on('timeupdate', this.handleTimeUpdate)\n            this.player.on('fullscreenchange', this.handleFullscreenChange)\n            this.player.on('play', this.handlePlay)\n            this.player.on('pause', this.handlePause)\n            this.player.on('error', this.handleError)\n\n            this.eventListenersAttached = true\n            console.log('Event listeners attached.')\n        },\n\n        // Detach event listeners from the player\n        detachEventListeners() {\n            if (!this.player || !this.eventListenersAttached) {\n                console.log('Event listeners are already detached or video player is not initialized.')\n                return\n            }\n\n            useAudioStore().stopAudioLevelMonitoring()\n            this.player.off('timeupdate', this.handleTimeUpdate)\n            this.player.off('fullscreenchange', this.handleFullscreenChange)\n            this.player.off('play', this.handlePlay)\n            this.player.off('pause', this.handlePause)\n            this.player.off('error', this.handleError)\n\n            this.eventListenersAttached = false\n            console.log('Event listeners detached.')\n        },\n\n        // Dispose of the player and perform cleanup\n        disposePlayer() {\n            if (!this.player) {\n                console.error('Video player is not initialized.')\n                return\n            }\n            this.detachEventListeners() // Detach event listeners if attached\n            this.player.dispose() // Dispose of the player instance\n            this.player = null // Reset the player state\n\n            // Optionally, stop audio level monitoring if linked to the player lifecycle\n            // const audioStore = useAudioStore();\n            // audioStore.stopAudioLevelMonitoring();\n\n            console.log('Video player disposed and cleaned up.')\n        },\n\n        // New method to prepare for a new video source\n        prepareForNewVideoSource(source) {\n            console.log('Preparing for new video source')\n\n            // Example: Clear any existing channel or video-specific state\n            useChannelStore().clearChannel()\n\n            // Reset or cleanup any existing video playback, if necessary\n            // this.resetPlayback();\n\n            // Load and play the new video source\n            this.loadNewVideo(source)\n        },\n\n        resetPlayback() {\n            if (this.player) {\n                this.player.pause()\n                this.player.muted(true)\n                this.player.currentTime(0) // Optionally reset the time\n                // Further cleanup logic here, if necessary\n                this.detachEventListeners() // Detach event listeners if attached\n            }\n        },\n\n        // Event handlers\n        handleTimeUpdate() {\n            // console.log('Handling timeupdate...');\n            // Implement your logic\n            this.currentTime = this.player.currentTime()\n            this.duration = this.player.duration()\n            const progressPercentage = (this.currentTime / this.duration) * 100\n            this.formattedTime = `${this.formatDuration(this.currentTime)} / ${this.formatDuration(this.duration)}`\n\n            // Update UI elements or emit events as needed\n            // Note: Direct manipulation of the DOM or component refs from the store is not recommended\n\n        },\n        // for the handleTimeUpdate eventHandler\n        formatDuration(durationInSeconds) {\n            const hours = Math.floor(durationInSeconds / 3600)\n            const minutes = Math.floor((durationInSeconds % 3600) / 60)\n            const seconds = Math.floor(durationInSeconds % 60)\n\n            const parts = [hours, minutes, seconds].map(part => part.toString().padStart(2, '0'))\n            return parts.join(':')\n        },\n        handleFullscreenChange() {\n            console.log('Handling fullscreenchange...')\n            // Implement your logic\n            this.player?.on('fullscreenchange', () => {\n                if (this.player.isFullscreen()) {\n                    // Video is entering fullscreen mode\n                    // You can add custom behavior for entering fullscreen here if needed\n                } else {\n                    // Video is exiting fullscreen mode\n                    // Check if the video was playing before entering fullscreen\n                    if (this.player.paused() === false) {\n                        // Resume playback after exiting fullscreen\n                        this.player.play()\n                    }\n                }\n            })\n        },\n        handlePlay() {\n            console.log('Handling play...')\n            // Implement your logic\n            this.player?.on('play', () => {\n                this.paused = false\n            })\n        },\n        handlePause() {\n            console.log('Handling pause...')\n            // Implement your logic\n            this.player?.on('pause', () => {\n                this.paused = true\n            })\n        },\n        handleError() {\n            console.log('Handling error...')\n            // Implement your logic\n            this.player?.on('error', function () {\n                const error = this.player.error()\n                console.error('Video.js Error:', error.code, error.message)\n            })\n        },\n        makeBlue() {\n            // for testing. DO NOT REMOVE.\n            this.blue = true\n        },\n        // Apparently this loadFirstPlay isn't being used...\n        // loadFirstPlay() {\n        //     const {props} = usePage()\n        //     let videoJs = videojs('aux-player')\n        //     const type = props.firstPlayVideoSourceType\n        //     const src = props.firstPlayVideoSource\n        //     videoJs.ready(() => {\n        //         videoJs.src({src, type})\n        //         videoJs.play().then(() => {\n        //             console.log('Playback started successfully')\n        //         }).catch(error => {\n        //             console.error('Error trying to play the video:', error)\n        //             // Handle the error (e.g., showing a user-friendly message)\n        //         })\n        //     })\n        //     console.log(type)\n        //     console.log(src)\n        // },\n        // Toggle mute state\n        toggleMute() {\n            if (this.muted) {\n                this.unMute()\n            } else {\n                this.mute()\n            }\n        },\n        // Mute the video\n        mute() {\n            if (this.player) {\n                this.player.muted(true)\n                this.muted = true\n            }\n        },\n        // Unmute the video\n        unMute() {\n            // const audioStore = useAudioStore()\n\n            if (this.player) {\n                // Prepare audio setup for when it's unmuted\n                // audioStore.userInteractionForAudio()\n\n                // Optionally, if fadeInAudioFromMuted is a gradual process,\n                // ensure this.player.muted(false) is called within that function.\n                // audioStore.fadeInAudioFromMuted()\n\n                this.player.muted(false)\n                this.muted = false\n            }\n        },\n        togglePlay() {\n            let videoJs = videojs('aux-player')\n\n            if (this.paused) {\n                videoJs.play()\n            } else {\n                videoJs.pause()\n            }\n        },\n        load() {\n            let videoJs = videojs('aux-player')\n            videoJs.load()\n        },\n        loadNewLiveSource(source, sourceType) {\n            let videoJs = videojs('aux-player')\n            let fullSourceUrl = this.mistServerUri + '/hls/' + source + '/index.m3u8'\n            videoJs.src({'src': fullSourceUrl, 'type': sourceType});\n            videoJs.play()\n        },\n        pause() {\n            let videoJs = videojs('aux-player')\n            videoJs.controls(false)\n            videoJs.pause()\n            this.paused = true\n        },\n        play() {\n            let videoJs = videojs('aux-player')\n\n            videoJs.play()\n            videoJs.controls(false)\n            this.paused = false\n        },\n        // next not built yet\n        next() {\n            let videoJs = videojs('aux-player')\n            videoJs.controls(false)\n            videoJs.src(this.nextSource)\n        },\n        // back not built yet\n        back() {\n            let videoJs = videojs('aux-player')\n            videoJs.controls(false)\n            videoJs.src(this.previousSource)\n        },\n        fullscreen() {\n            let videoJs = videojs('aux-player')\n            videoJs.controls(false)\n            // videoJs.fullscreen(this.previousSource)\n            videoJs.requestFullscreen()\n        },\n        getVideoCurrentTime() {\n            let videoJs = videojs('aux-player')\n            videoJs.controls(false)\n            this.videoCurrentTime = videoJs.currentTime\n        },\n\n\n        // This playNewVideo was created to access the audioContext\n        // which our audio compressor uses. This is new as of 2/2/2024\n        // ~ tec21\n\n        // playNewVideo(source) {\n        //     useChannelStore().clearChannel() // Reset or clear channel store\n        //     const videoJs = videojs('aux-player')\n        //     let videoSrc, videoSourceType\n        //     // Determine the source type and construct the source URL if necessary\n        //     if (source.mediaType === 'externalVideo') {\n        //         videoSrc = source.video_url // Direct URL to the video\n        //         videoSourceType = source.type // MIME type, e.g., 'video/youtube', 'video/mp4'\n        //     } else {\n        //         // Construct file path for internal videos\n        //         videoSrc = `${source.cdn_endpoint}${source.cloud_folder}${source.folder}/${source.file_name}`\n        //         videoSourceType = source.type // MIME type, typically 'video/mp4' for file-based sources\n        //     }\n        //     this.resumeAudioContextIfNeeded()\n        //     videoJs.src({src: videoSrc, type: videoSourceType})\n        //     videoJs.muted(false)\n        // },\n\n        // getSourceDetails(source) {\n        //     let videoSrc = source.video_url; // Directly access the video URL\n        //\n        //     // Default to 'video/mp4' if type is falsy ('', null, undefined, etc.)\n        //     let videoSourceType = source.type || 'video/mp4'\n        //\n        //     // Determine the mediaType and construct the source URL if necessary\n        //     if (source.mediaType === 'externalVideo') {\n        //         videoSrc = source.video_url // Direct URL to the video\n        //     } else {\n        //         // Internal video: construct the path, ensuring the file name is encoded\n        //         let encodedFileName = encodeURIComponent(source.file_name);\n        //         console.log(encodedFileName)\n        //         videoSrc = `${source.cdn_endpoint}${source.cloud_folder}${source.folder}/${encodedFileName}`\n        //     }\n        //     // Logic to determine videoSrc and videoSourceType\n        //     console.log(`Video Source: ${videoSrc}, Type: ${videoSourceType}`);\n        //     return { videoSrc, videoSourceType } // Return as an object\n        // },\n\n\n        getSourceDetails(source) {\n            let videoSrc, videoSourceType\n\n            console.log('getSourceDetails called with source:', source);\n\n            // Default to 'video/mp4' if type is not specified or is empty\n            videoSourceType = source.type || 'video/mp4'\n            console.log(`Determined Video Source Type: ${videoSourceType}`);\n\n            if (source.mediaType === 'externalVideo') {\n                // For external videos, use the URL as provided without encoding\n                videoSrc = source.video_url\n                console.log('Using external video source:', videoSrc);\n            } else {\n                console.log('CDN Endpoint:', source.cdn_endpoint);\n                console.log('Cloud Folder:', source.cloud_folder);\n                console.log('Folder:', source.folder);\n                console.log('File Name:', source.file_name);\n                // For internal videos, construct the URL from its components\n                // Here, we assume the cdn_endpoint, cloud_folder, and folder are correctly formatted\n                // and do not require encoding. Only the file_name might need encoding.\n                const basePath = `${source.cdn_endpoint}${source.cloud_folder}${source.folder}/`\n                // const encodedFileName = encodeURIComponent(source.file_name);\n                const fileName = source.file_name\n                videoSrc = basePath + fileName\n                console.log('Constructed internal video source:', videoSrc);\n                // If your server or CDN is configured to handle spaces in URLs without %20 encoding\n                // or if the original working URLs did not use standard URL encoding,\n                // you might adjust the encoding strategy here.\n                // For example, to replace spaces with %20 but leave other characters as-is:\n                // const fileNameForUrl = source.file_name.replace(/ /g, '%20');\n                // videoSrc = basePath + fileNameForUrl;\n            }\n\n            console.log(`Final Constructed Video Source: ${videoSrc}, Type: ${videoSourceType}`);\n            return {videoSrc, videoSourceType}\n        },\n\n\n        loadNewVideo(source) {\n            try {\n                let videoJs = videojs('aux-player');\n                console.log('LOAD NEW VIDEO');\n                const audioStore = useAudioStore();\n                // Correctly destructure the returned object to get videoSrc and videoSourceType\n                const {videoSrc, videoSourceType} = this.getSourceDetails(source);\n\n                // Example: Stopping and cleaning up the current video and audio setup\n                if (videoJs) {\n                    videoJs.src({'src': videoSrc, 'type': videoSourceType});\n\n                    videoJs.ready(() => {\n                        // ensureAudioContextAndNodesReady does the following:\n                        // 1. Resumes AudioContext if suspended.\n                        // 2. (Re)connects MediaElementSource from the video element to AudioContext.\n                        audioStore.deferAudioSetup = false;\n                        audioStore.ensureAudioContextAndNodesReady(videoJs).then(() => {\n                            // Only attempt to play the video after ensuring the AudioContext is ready\n                            videoJs.play().catch(error => {\n                                useNotificationStore().setGeneralServiceNotification('Error', 'Playback initiation error: ' + error)\n                                console.error('Playback initiation error: ', error);\n                            });\n\n                            // Consider toggling mute based on the user's preference or previous state\n                            videoJs.muted(false);\n                            this.muted = false;\n                        });\n                    });\n                }\n            } catch (error) {\n                // Log the error or perform any other error handling\n                useNotificationStore().setGeneralServiceNotification('Error', 'Error loading new video: ' + error)\n                console.error('Error loading new video: ', error);\n            }\n        },\n\n        // loadNewVideo(source) {\n        //     console.log('LOAD NEW VIDEO TTTTTTTTTTTTTTTTTTTTTTTTTS');\n        //     console.log('LOAD NEW VIDEO initiated with source:', source);\n        //     const audioStore = useAudioStore();\n        //     this.unMute();\n        //     // Destructure the returned object to get videoSrc and videoSourceType\n        //     const { videoSrc, videoSourceType } = this.getSourceDetails(source);\n        //     console.log(`Video source details received: Src - ${videoSrc}, Type - ${videoSourceType}`);\n        //\n        //     // Ensure you're using the same player instance (`videoJs` in this context) for consistency\n        //     let videoJs = videojs('aux-player'); // Ensure this ID matches your video player element\n        //     console.log('Video.js player instance created or retrieved.');\n        //\n        //     // Stop and clean up the current video and audio setup if necessary\n        //     videoJs.ready(() => {\n        //         console.log('Video.js player is ready.');\n        //         videoJs.src({ 'src': videoSrc, 'type': videoSourceType });\n        //         console.log(`Video source set: ${videoSrc} of type ${videoSourceType}`);\n        //\n        //         // Ensure AudioContext and nodes are ready\n        //         audioStore.ensureAudioContextAndNodesReady(videoJs).then(() => {\n        //             console.log('Audio context and nodes are ready. Attempting to play video.');\n        //\n        //             videoJs.play().then(() => {\n        //                 console.log('Video playback started successfully.');\n        //             }).catch(error => {\n        //                 console.error('Playback initiation error:', error);\n        //             });\n        //             // Attempt to play the video after ensuring the AudioContext is ready\n        //             // videoJs.play().catch(error => {\n        //             //     console.error('Playback initiation error:', error);\n        //             // });\n        //\n        //             // Apply the unMute logic from loadMistStreamVideo to ensure audio is correctly configured\n        //             this.unMute();\n        //             console.log('Audio unmuted.');\n        //             this.paused = false;\n        //             console.log('Paused flag set to false.');\n        //         }).catch(error => {\n        //             console.error('Error ensuring audio context and nodes are ready:', error);\n        //         });\n        //     });\n        // },\n\n        playNewVideo() {\n            console.log('PLAY NEW VIDEO')\n            if (this.player) {\n                // Wait for the video to be ready before playing\n                this.player.ready(() => {\n                    this.player.play()\n                    // Assuming you want to unmute here; check if this aligns with user interaction policies\n                    this.player.muted(false)\n                    this.muted = false\n                })\n            }\n        },\n\n\n// load video from different types of sources:\n// Url\n// YouTube\n// EmbedCode\n// Mist\n// File\n        loadNewSourceFromYouTube(source) {\n            this.videoIsYoutube = true\n            useChannelStore().clearChannel()\n            let videoJs = videojs('aux-player')\n            this.videoSource = source\n            this.videoSourceType = 'video/youtube'\n            videoJs.src({'src': this.videoSource, 'type': this.videoSourceType})\n            videoJs.controls(false)\n            this.unMute()\n            this.paused = false\n        },\n        loadNewLiveSourceFromRumble(source) {\n            this.videoIsYoutube = true\n            useChannelStore().clearChannel()\n            let videoJs = videojs('aux-player')\n            this.videoSource = source\n            this.videoSourceType = 'application/x-mpegURL'\n            videoJs.src({'src': this.videoSource, 'type': this.videoSourceType})\n            videoJs.controls(false)\n            this.unMute()\n            this.paused = false\n        },\n        loadNewSourceFromUrl(source) {\n            try {\n                this.videoIsYoutube = false;\n                useChannelStore().clearChannel();\n                let videoJs = videojs('aux-player');\n\n                if (!source.video_url || !source.type) {\n                    useNotificationStore().setGeneralServiceNotification('Error', 'Invalid video source.')\n                    throw new Error(\"Invalid video source.\");\n                }\n\n                this.videoSource = source.video_url;\n                this.videoSourceType = source.type;\n                videoJs.src({'src': source.video_url, 'type': source.type});\n\n                this.unMute();\n                this.paused = false;\n            } catch (error) {\n                useNotificationStore().setGeneralServiceNotification('Error', 'Failed to load new source: ' + error)\n                console.error(\"Failed to load new source:\", error);\n                throw error; // Re-throw the error to be caught by the caller\n            }\n        },\n        loadNewSourceFromMist(source) {\n            this.videoIsYoutube = false\n            let videoJs = videojs('aux-player')\n            let filePath = 'https://mist.not.tv/hls/'\n            this.videoSource = filePath + source + '/index.m3u8'\n            this.videoSourceType = 'application/x-mpegURL'\n            videoJs.src({'src': this.videoSource, 'type': this.videoSourceType})\n            this.unMute()\n            this.paused = false\n        },\n        loadNewSourceFromFile(source) {\n            this.videoIsYoutube = false\n            useChannelStore().clearChannel()\n            let videoJs = videojs('aux-player')\n            let filePath = source.cdn_endpoint + source.cloud_folder + source.folder + '/'\n            this.videoSource = source.file_name\n            this.videoSourceType = source.type\n            videoJs.src({'src': filePath + this.videoSource, 'type': this.videoSourceType})\n            this.unMute()\n            this.paused = false\n        },\n\n        // The new load video functions (2024-02-09 tec21 and ChatGPT)\n        loadExternalSourceVideo() {\n\n        },\n        loadPlaylistVideos() {\n\n        },\n        async loadMistStreamVideo(mistStream, stayMuted) {\n            let shouldUnmute = true\n            if(stayMuted) {\n                shouldUnmute = false\n            };\n            // console.log('Loading Mist Stream Video for:', mistStream.name); // Log which Mist Stream is being loaded\n            // This mistServerUri comes from appSettings\n            if (!this.mistServerUri) {\n                console.log('Mist Server URI not set, fetching...') // Log fetching attempt\n                await this.getMistServerUri()\n            }\n            if (this.mistServerUri) {\n                // console.log('Mist Server URI:', this.mistServerUri); // Log the URI to confirm it's fetched\n                let basePath = this.mistServerUri\n                this.videoSource = basePath + 'hls/' + mistStream.name + '/index.m3u8'\n                // console.log('Video Source Set To:', this.videoSource); // Log the final video source\n\n                this.videoSourceType = 'application/vnd.apple.mpegURL'\n                // console.log('Setting player source to:', this.videoSource, 'of type:', this.videoSourceType); // Log the source setting\n                let videoJs = videojs('aux-player')\n                videoJs.src({'src': this.videoSource, 'type': this.videoSourceType})\n                if (shouldUnmute) {\n                    this.unMute()\n                }\n                this.paused = false\n            } else {\n                console.error('Mist Server URI is still not set after fetching.')\n            }\n            // let basePath = this.mistServerUri\n            // this.videoSource = basePath + 'hls/' + mistStream.name + '/index.m3u8'\n            // this.videoSourceType = \"application/vnd.apple.mpegURL\"\n            // this.player.src({'src': this.videoSource, 'type': this.videoSourceType})\n            // this.unMute()\n            // this.paused = false\n        },\n        async loadVideoFromFile(video) {\n            // console.log('Loading Mist Stream Video for:', mistStream.name); // Log which Mist Stream is being loaded\n            // This mistServerUri comes from appSettings\n            // if (!this.mistServerUri) {\n            //     console.log('Mist Server URI not set, fetching...') // Log fetching attempt\n            //     await this.getMistServerUri()\n            // }\n            // if (this.mistServerUri) {\n                // console.log('Mist Server URI:', this.mistServerUri); // Log the URI to confirm it's fetched\n                // let basePath = this.mistServerUri\n                // this.videoSource = basePath + 'hls/' + video.name + '/index.m3u8'\n                // console.log('Video Source Set To:', this.videoSource); // Log the final video source\n\n            // this.videoSourceType = 'video/mp4'\n            console.log('Video Source Type:', video.type);\n            console.log('Video URL:', video.video_url);\n            console.log('CDN Endpoint:', video.cdn_endpoint);\n            console.log('Cloud Folder:', video.cloud_folder);\n            console.log('Folder:', video.folder);\n            console.log('File Name:', video.file_name);\n\n            let videoSource = video.cdn_endpoint + video.cloud_folder + video.folder + '/' + video.file_name\n                // console.log('Setting player source to:', this.videoSource, 'of type:', this.videoSourceType); // Log the source setting\n                let videoJs = videojs('aux-player')\n                videoJs.src({'src': videoSource, 'type': video.type})\n                this.unMute()\n                this.paused = false\n            // } else {\n            //     console.error('Mist Server URI is still not set after fetching.')\n            // }\n            // let basePath = this.mistServerUri\n            // this.videoSource = basePath + 'hls/' + mistStream.name + '/index.m3u8'\n            // this.videoSourceType = \"application/vnd.apple.mpegURL\"\n            // this.player.src({'src': this.videoSource, 'type': this.videoSourceType})\n            // this.unMute()\n            // this.paused = false\n        },\n\n\n        setNowPlayingInfoVideoFile(source) {\n            this.nowPlayingType = 'Video File'\n            this.nowPlayingName = source.file_name\n            useStreamStore().currentChannel = 'On Demand'\n        },\n        setNowPlayingInfoShow(show, episode) {\n            this.clearNowPlayingInfo()\n            const showStore = useShowStore()\n\n            if (show.firstPlayVideo) {\n                showStore.setName(show.firstPlayVideo.name)\n                showStore.setEpisodeUrl(`/shows/${show.slug}/episode/${source.firstPlayVideo.slug}`)\n            } else if (episode) {\n                showStore.setName(show.name)\n                showStore.setUrl(`/shows/${show.slug}`)\n                showStore.setEpisodeName(episode.name)\n                showStore.setEpisodeUrl(`/shows/${show.slug}/episode/${episode.slug}`)\n            } else {\n                showStore.setName(show.name)\n                showStore.setUrl(`/shows/${show.slug}`)\n            }\n        },\n// change video size/position and page layout\n        makeVideoPiP() {\n            // const appSettingStore = useAppSettingStore();\n            // const userStore = useUserStore();\n            //\n            // if (userStore.isMobile) {\n            //     let videoJs = videojs('aux-player')\n            //     videoJs.controls(false)\n            //     if(this.fullPage) {\n            //         this.class = 'pipVideoClassFullPage'\n            //         this.videoContainerClass = 'pipVideoContainerFullPage'\n            //     } else {\n            //         this.class = 'pipVideoClassTopRight'\n            //         this.videoContainerClass = 'pipVideoContainerTopRight'\n            //     }\n            //     appSettingStore.togglePipChatMode()\n            // }\n        },\n        makeVideoFullPage() {\n            const appSettingStore = useAppSettingStore()\n            const userStore = useUserStore()\n\n            // this.fullPage = true; // to be deleted and replaced by appSettingStore.fullPage\n            appSettingStore.fullPage = true\n            // userStore.hidePage = true // to be deleted and replaced by appSettingStore.hidePage\n            appSettingStore.hidePage = true\n            appSettingStore.ott = 0\n\n            this.videoContainerClass = 'fullPageVideoContainer'\n            this.class = 'fullPageVideoClass'\n            this.controls = !userStore.isMobile\n        },\n        makeVideoTopRight() {\n            const appSettingStore = useAppSettingStore()\n\n            // this.fullPage = false // to be deleted and replaced by appSettingStore.fullPage\n            appSettingStore.fullPage = false\n            // userStore.hidePage = false // to be deleted and replaced by appSettingStore.hidePage\n            appSettingStore.hidePage = false\n            // this.currentPageIsStream = false // to be deleted and replaced by appSettingStore.currentPageIsStream\n            appSettingStore.currentPageIsStream = false\n\n            this.videoContainerClass = 'topRightVideoContainer'\n            this.class = 'topRightVideoClass'\n            this.controls = false\n        },\n        makeVideoWelcomePage() {\n            const appSettingStore = useAppSettingStore()\n            this.videoContainerClass = 'welcomeVideoContainer'\n            this.class = 'welcomeVideoClass'\n            appSettingStore.loggedIn = false\n            appSettingStore.fullPage = true\n            appSettingStore.hidePage = false\n        },\n\n\n    },\n\n    getters: {},\n})\n"],"names":["_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","delegateYield","asyncGeneratorStep","gen","reject","_next","_throw","key","info","error","_asyncToGenerator","fn","self","args","arguments","apply","err","undefined","initialState","displayEpisodeGoLiveComponent","isEpisode","episode","preSelectedShowId","selectedShowId","shows","streamKey","wildcardId","isLive","isRecording","streamInfo","rtmpUri","destinations","isLoadingDestinations","loadingDestinationId","isProcessingDisableAllAutoPushes","playerIsReloading","pushDestinationFormSubmitProcessing","useGoLiveStore","defineStore","state","actions","assign","this","fetchShows","_this","_callee","response","_context","axios","get","data","t0","console","generateStreamKey","_this2","_callee2","_context2","post","concat","log","stream_key","selectedShow","mist_stream_wildcard","mist_stream_wildcard_id","updateAndGetStreamKey","_show$mist_stream_wil","_this3","show","find","id","setSelectedShowId","showId","updateSelectedShow","_this4","goLive","stopLive","startRecording","stopRecording","fetchStreamInfo","_this5","_callee3","notificationStore","_this5$selectedShow","message","status","_context3","useNotificationStore","success","setToastNotification","fetchRtmpUri","_this6","_callee4","_context4","fetch","ok","text","clearStreamInfo","toggleDisplayEpisodeGoLiveComponent","_this$episode","show_id","updateEpisode","reloadPlayer","_this7","_callee5","videoAuxPlayerStore","mistStream","_context5","useVideoAuxPlayerStore","getMistServerUri","loadMistStreamVideo","t1","t2","fetchPushDestinations","_this8","_callee6","_response$data","_context6","streamName","backgroundFetchPushDestinations","_this9","_callee7","_context7","deleteDestination","destinationId","_this10","_callee8","_context8","confirm","filter","destination","startPush","fullPushUri","_this11","_callee9","_response$data2","index","_context9","destination_id","full_push_uri","stream_name","findIndex","push_is_started","stopPush","_this12","_callee10","_response$data3","_context10","enableAutoPush","_this13","_callee11","_response$data4","_context11","has_auto_push","disableAutoPush","_this14","_callee12","_response$data5","_context12","disableAllAutoPushes","_this15","_callee13","_response$data6","_context13","getters","_show$mist_stream_wil2","_show$mist_stream_wil3","fullRtmpUri","fullUrl","activeDestinations","sourceName","_state$selectedShow","_state$episode","mistServerUri","player","eventListenersAttached","videoPlayerLoaded","class","videoContainerClass","videoSourceIdSrc1","videoSourceIdSrc2","videoSourceIdSrc3","videoSourceTypeSrc1","videoSourceTypeSrc2","videoSourceTypeSrc3","firstPlayVideoSourceType","firstPlayVideoSource","videoName","videoSource","videoSourceType","videoPoster","nextSource","previousSource","currentView","currentChannelId","currentChannelName","currentShow","currentShowEpisode","currentVideo","hasVideo","controls","muted","paused","currentTime","duration","formattedTime","blue","videoIsYoutube","videoUploadComplete","setPlayer","playerInstance","initializePlayer","attachEventListeners","nextTick","useAudioStore","ensureAudioContextAndNodesReady","ready","play","on","handleTimeUpdate","handleFullscreenChange","handlePlay","handlePause","handleError","detachEventListeners","stopAudioLevelMonitoring","off","disposePlayer","dispose","prepareForNewVideoSource","source","useChannelStore","clearChannel","loadNewVideo","resetPlayback","pause","formatDuration","durationInSeconds","Math","floor","map","part","toString","padStart","join","_this$player","isFullscreen","_this$player2","_this$player3","_this$player4","code","makeBlue","toggleMute","unMute","mute","togglePlay","videoJs","videojs","load","loadNewLiveSource","sourceType","fullSourceUrl","src","back","fullscreen","requestFullscreen","getVideoCurrentTime","videoCurrentTime","getSourceDetails","videoSrc","mediaType","video_url","cdn_endpoint","cloud_folder","folder","file_name","audioStore","_this$getSourceDetail","deferAudioSetup","setGeneralServiceNotification","playNewVideo","loadNewSourceFromYouTube","loadNewLiveSourceFromRumble","loadNewSourceFromUrl","loadNewSourceFromMist","loadNewSourceFromFile","filePath","loadExternalSourceVideo","loadPlaylistVideos","stayMuted","shouldUnmute","basePath","loadVideoFromFile","video","setNowPlayingInfoVideoFile","nowPlayingType","nowPlayingName","useStreamStore","currentChannel","setNowPlayingInfoShow","clearNowPlayingInfo","showStore","useShowStore","firstPlayVideo","setName","setEpisodeUrl","slug","setUrl","setEpisodeName","makeVideoPiP","makeVideoFullPage","appSettingStore","useAppSettingStore","userStore","useUserStore","fullPage","hidePage","ott","isMobile","makeVideoTopRight","currentPageIsStream","makeVideoWelcomePage","loggedIn"],"sourceRoot":""}