{"version":3,"file":"js/1129.js","mappings":"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","sources":["webpack:///./resources/js/Utilities/PageSetup.js","webpack:///./resources/js/Components/Global/Modals/Messages.vue?dfe9","webpack:///./resources/js/Components/Global/Modals/Messages.vue","webpack:///./resources/js/Jetstream/ValidationErrors.vue?5fdc","webpack:///./resources/js/Jetstream/ValidationErrors.vue","webpack:///./resources/js/Components/Pages/Admin/ServerTime.vue?93d0","webpack:///./resources/js/Components/Pages/Admin/ServerTime.vue","webpack:///./resources/js/Pages/Admin/Settings.vue?277d","webpack:///./resources/js/Pages/Admin/Settings.vue"],"sourcesContent":["import { onBeforeMount, onMounted } from 'vue'\nimport { useUserStore } from \"@/Stores/UserStore\"\nimport { useAppSettingStore } from \"@/Stores/AppSettingStore\"\nimport { useVideoPlayerStore } from \"@/Stores/VideoPlayerStore\"\nimport { Inertia } from \"@inertiajs/inertia\"\n\nexport function usePageSetup(pageName) {\n    const userStore = useUserStore()\n    const appSettingStore = useAppSettingStore()\n    const videoPlayerStore = useVideoPlayerStore()\n\n    appSettingStore.currentPage = pageName\n    appSettingStore.showFlashMessage = true\n    appSettingStore.pageIsHidden = false\n\n    if (userStore.isMobile) {\n        appSettingStore.ott = 0\n    }\n\n    videoPlayerStore.makeVideoTopRight()\n\n    onBeforeMount(() => {\n        // reload page\n        if (appSettingStore.pageReload) {\n            appSettingStore.pageReload = false\n            window.location.reload(true);\n        }\n    });\n\n    onMounted(() => {\n        // Check if the URL contains query strings\n        const hasQueryStrings = window.location.search !== '';\n\n        // Only scroll into view if there are no query strings\n        if (!hasQueryStrings) {\n            const topDiv = document.getElementById(\"topDiv\")\n            if (topDiv) {\n                topDiv.scrollIntoView()\n            }\n        }\n        // Only update if we're not already on this page to avoid overwriting with the current URL\n        appSettingStore.setPrevUrl()\n        appSettingStore.noLayout = false\n        appSettingStore.showOttButtons = true\n        // Inertia.reload()\n\n    });\n}\n","import script from \"./Messages.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Messages.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n  <div class=\"mx-4 my-4\">\n    <div class=\"alert alert-info mt-4\"\n         v-if=\"props.flash.message\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" class=\"stroke-current shrink-0 w-6 h-6\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n              d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"></path>\n      </svg>\n      <span>{{ props.flash.message }}</span>\n      <button class=\"text-xs ml-12\" @click=\"clearFlashMessage\"> Close</button>\n    </div>\n    <div class=\"alert alert-success mt-4 mx-3\"\n         v-if=\"props.flash.success\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"stroke-current shrink-0 h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n              d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"/>\n      </svg>\n      <span>{{ props.flash.success }}</span>\n      <button class=\"text-xs ml-12\" @click=\"clearFlashMessage\"> Close</button>\n    </div>\n    <div class=\"alert alert-warning mt-4 mx-3\"\n         v-if=\"props.flash.warning\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"stroke-current shrink-0 h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n              d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z\"/>\n      </svg>\n      <span>{{ props.flash.warning }}</span>\n      <button class=\"text-xs ml-12\" @click=\"clearFlashMessage\"> Close</button>\n    </div>\n    <div class=\"alert alert-error mt-4 mx-3\"\n         v-if=\"props.flash.error\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"stroke-current shrink-0 h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n              d=\"M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z\"/>\n      </svg>\n      <span>{{ props.flash.error }}</span>\n      <button class=\"text-xs ml-12\" @click=\"clearFlashMessage\"> Close</button>\n    </div>\n  </div>\n\n</template>\n\n<script setup>\nimport { Inertia } from \"@inertiajs/inertia\"\nimport { computed } from \"vue\"\nimport { useAppSettingStore } from \"@/Stores/AppSettingStore\"\n\nconst appSettingStore = useAppSettingStore()\n\nappSettingStore.showFlashMessage = true\n\nlet props = defineProps({\n  flash: Object,\n\n})\n\nconst messageType = computed(() => ({\n  'text-green-700 bg-green-100 dark:bg-green-200 dark:text-green-800': props.flash.success,\n  'text-blue-700 bg-blue-100 dark:bg-blue-200 dark:text-blue-800': props.flash.message,\n  'text-orange-700 bg-orange-100 dark:bg-orange-200 dark:text-orange-800': props.flash.warning,\n  'text-red-700 bg-red-100 dark:bg-red-200 dark:text-red-800': props.flash.error,\n}))\n\nconst clearFlashMessage = async () => {\n  await Inertia.post(route('flash.clear'));\n  Inertia.reload();\n};\n</script>\n","import script from \"./ValidationErrors.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./ValidationErrors.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<script setup>\nimport { computed } from 'vue';\nimport { usePage } from '@inertiajs/inertia-vue3';\n\nconst errors = computed(() => usePage().props.value.errors);\nconst hasErrors = computed(() => Object.keys(errors.value).length > 0);\n</script>\n\n<template>\n    <div v-if=\"hasErrors\">\n        <div class=\"font-medium text-red-600\">\n            Whoops! Something went wrong.\n        </div>\n\n        <ul class=\"mt-3 list-disc list-inside text-sm text-red-600\">\n            <li v-for=\"(error, key) in errors\" :key=\"key\">\n                {{ error }}\n            </li>\n        </ul>\n    </div>\n</template>\n","import script from \"./ServerTime.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./ServerTime.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n  <div>\n    <p class=\"mb-2\">\n      Server Time: {{ serverTime }}\n    </p>\n    <p class=\"mb-2\">\n      Local Time: {{ localTime }}\n    </p>\n    <p class=\"mb-2\">\n      User's Timezone: {{ userTimezone }}\n    </p>\n  </div>\n</template>\n\n<script setup>\nimport { onMounted, ref } from \"vue\"\n\nlet serverTime = ref('')\nlet localTime = ref('')\n\nconst updateLocalTime = () => {\n  const userLocalDate = new Date()\n  localTime.value = userLocalDate.toLocaleString() // Format as desired\n};\n\nasync function fetchServerTime() {\n  try {\n    const response = await axios.get('/admin/server-time') // Replace with your actual API endpoint\n    // Assuming your server returns the time as a string\n    serverTime.value = response.data.serverTime\n    console.log(serverTime.value)\n  } catch (error) {\n    console.error('Error fetching server time', error)\n  }\n}\n\nonMounted(() => {\n  fetchServerTime()\n  updateLocalTime()\n  getUserTimezone()\n})\n\nconst userTimezone = ref('')\n\nconst getUserTimezone = () => {\n  // Use the Intl object to get the user's timezone\n  userTimezone.value = Intl.DateTimeFormat().resolvedOptions().timeZone\n};\n\n</script>\n","import script from \"./Settings.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Settings.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n\n  <Head :title=\"`Administrative Settings`\"/>\n\n  <div id=\"topDiv\" class=\"place-self-center flex flex-col gap-y-3\">\n    <div\n        class=\"w-fit lg:w-3/4 left-0 right-0 mx-auto bg-white dark:bg-gray-800 rounded text-black dark:text-gray-50 mt-6 p-5\">\n\n      <Message v-if=\"appSettingStore.showFlashMessage\" :flash=\"$page.props.flash\"/>\n\n      <header>\n        <div class=\"flex justify-between mb-3\">\n          <div class=\"mb-4\">\n            <h1 class=\"text-3xl font-semibold\">Administrative Settings</h1>\n          </div>\n          <div>\n            <div>\n              <button\n                  @click=\"appSettingStore.btnRedirect('/dashboard')\"\n                  class=\"bg-black hover:bg-gray-800 text-white font-semibold ml-2 mt-2 px-4 py-2 rounded disabled:bg-gray-400 h-max w-max\"\n              >Dashboard\n              </button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <ServerTime/>\n\n      <div class=\"bg-gray-300 dark:bg-gray-900 rounded pb-8 p-3 mb-6 mx-2 border-b border-2\">\n        <div class=\"font-semibold text-xl pb-2\">Administrator only links</div>\n        <div class=\"flex flex-wrap md:flex-row justify-items-start gap-2\">\n          <button\n              @click=\"appSettingStore.btnRedirect(`/users`)\"\n              class=\"bg-blue-600 hover:bg-blue-500 text-white mt-1 p-2 col-span-1 rounded disabled:bg-gray-400\"\n          >All Users\n          </button>\n          <button\n              @click=\"appSettingStore.btnRedirect(`/admin/episodes`)\"\n              class=\"bg-blue-600 hover:bg-blue-500 text-white mt-1 p-2 col-span-1 rounded disabled:bg-gray-400\"\n          >All Episodes\n          </button>\n          <button\n              @click=\"appSettingStore.btnRedirect(`/admin/shows`)\"\n              class=\"bg-blue-600 hover:bg-blue-500 text-white mt-1 p-2 col-span-1 rounded disabled:bg-gray-400\"\n          >All Shows\n          </button>\n          <button\n              @click=\"appSettingStore.btnRedirect(`/admin/movies`)\"\n              class=\"bg-blue-600 hover:bg-blue-500 text-white mt-1 p-2 col-span-1 rounded disabled:bg-gray-400\"\n          >All Movies\n          </button>\n          <button\n              @click=\"appSettingStore.btnRedirect(`/admin/teams`)\"\n              class=\"bg-blue-600 hover:bg-blue-500 text-white mt-1 p-2 col-span-1 rounded disabled:bg-gray-400\"\n          >All Teams\n          </button>\n          <button\n              @click=\"appSettingStore.btnRedirect(`/admin/channels`)\"\n              class=\"bg-orange-600 hover:bg-orange-500 text-white mt-1 p-2 rounded disabled:bg-gray-400\"\n          >Channels\n          </button>\n          <button\n              @click=\"appSettingStore.btnRedirect(`/admin/mistServerApi`)\"\n              class=\"bg-blue-600 hover:bg-blue-500 text-white mt-1 p-2 rounded disabled:bg-gray-400\"\n          >MistServer API Test Page\n          </button>\n          <a\n              :href=\"mistServerUriForManagementInterface+`:4242`\" target=\"_blank\"\n              class=\"bg-blue-600 hover:bg-blue-500 text-white mt-1 p-2 rounded disabled:bg-gray-400\"\n          >MistServer Management Interface</a>\n          <button\n              @click=\"appSettingStore.btnRedirect(`/admin/images`)\"\n              class=\"bg-blue-600 hover:bg-blue-500 text-white mt-1 p-2 rounded disabled:bg-gray-400\"\n          >Images\n          </button>\n          <button\n              @click=\"appSettingStore.btnRedirect(`/videoupload`)\"\n              class=\"bg-blue-600 hover:bg-blue-500 text-white mt-1 p-2 rounded disabled:bg-gray-400\"\n          >Video Upload\n          </button>\n          <button\n              @click=\"appSettingStore.btnRedirect(`/movies/create`)\"\n              class=\"bg-blue-600 hover:bg-blue-500 text-white mt-1 mx-2 px-4 py-2 rounded disabled:bg-gray-400\"\n          >Add a Movie\n          </button>\n          <button\n              @click=\"appSettingStore.btnRedirect(`/admin/invite_codes`)\"\n              class=\"bg-blue-600 hover:bg-blue-500 text-white mt-1 mx-2 px-4 py-2 rounded disabled:bg-gray-400\"\n          >Invite Codes\n          </button>\n          <button\n              @click=\"getEpisodesFromEmbedCodes\"\n              class=\"bg-blue-600 hover:bg-blue-500 text-white mt-1 mx-2 px-4 py-2 rounded disabled:bg-gray-400 disabled:no-cursor\"\n              :disabled=\"!getAllEpisodesButtonActive\"\n          >Get All Episode Videos From Embed Codes\n          </button>\n          <!--                    <Link-->\n          <!--                        :href=\"`/admin/phpmyinfo`\"><button-->\n          <!--                        class=\"bg-blue-600 hover:bg-blue-500 text-white mt-1 mx-2 px-4 py-2 rounded disabled:bg-gray-400\"-->\n          <!--                    >phpinfo()</button>-->\n          <!--                    </Link>-->\n\n        </div>\n\n      </div>\n\n      <div>\n        <form @submit.prevent=\"submit\">\n          <div class=\"mb-6\">\n            <label class=\"block mb-2 uppercase font-bold text-xs text-gray-700 dark:text-gray-300\"\n                   for=\"default_country\"\n            >\n              COUNTRY\n            </label>\n            <div class=\"text-xs mb-2\">This should probably be baked into the code somewhere. Content, and especially News Stories, uploaded and managed to this instance of notTV is specific to this country. The system has a list of provinces, cities and postal codes based on the country. This system is designed to only manage one country. Eventually, each notTV country will be able to share their content and News Stories, with each other.</div>\n\n            <select disabled id=\"default_country\" v-model=\"form.default_country\" class=\"disabled:bg-gray-100 cursor-not-allowed\">\n              <option v-for=\"country in countries\" :key=\"country.id\" :value=\"country.id\">{{ country.name }}</option>\n            </select>\n\n            <div v-if=\"form.errors.default_country\" v-text=\"form.errors.default_country\"\n                 class=\"text-xs text-red-600 mt-1\"></div>\n          </div>\n          <div class=\"mb-6\">\n            <label class=\"block mb-2 uppercase font-bold text-xs text-gray-700 dark:text-gray-300\"\n                   for=\"cdn_endpoint\"\n            >\n              CDN ENDPOINT\n            </label>\n\n            <input v-model=\"form.cdn_endpoint\"\n                   class=\"border border-gray-400 p-2 w-full rounded-lg text-black\"\n                   type=\"text\"\n                   name=\"cdn_endpoint\"\n                   id=\"cdn_endpoint\"\n            >\n            <div v-if=\"form.errors.cdn_endpoint\" v-text=\"form.errors.cdn_endpoint\"\n                 class=\"text-xs text-red-600 mt-1\"></div>\n          </div>\n          <div class=\"mb-6\">\n            <label class=\"block mb-2 uppercase font-bold text-xs text-gray-700 dark:text-gray-300\"\n                   for=\"cloud_folder\"\n            >\n              CLOUD FOLDER\n            </label>\n\n            <div class=\"flex flex-row\">\n              <span class=\"pt-2 mr-2\">/ </span>\n              <input v-model=\"form.cloud_folder\"\n                     class=\"border border-gray-400 p-2 w-full rounded-lg text-black\"\n                     type=\"text\"\n                     name=\"cloud_folder\"\n                     id=\"cloud_folder\"\n              >\n            </div>\n            <span\n                class=\"text-xs\">NOTE: The forward slash is already entered in the backend. Just type the folder name.</span>\n\n            <div v-if=\"form.errors.cloud_folder\" v-text=\"form.errors.cloud_folder\"\n                 class=\"text-xs text-red-600 mt-1\"></div>\n          </div>\n          <div class=\"mb-6 border-t-2 pt-4\">\n\n            <div>\n              <button @click.prevent=\"clearFirstPlayCacheData\"\n                      class=\"btn btn-warning btn-sm mb-2\">\n                Clear First Play Data Cache</button>\n            </div>\n            <div class=\"px-3 pb-2 text-sm font-semibold text-orange-400\">Please close your browser window after clearing the cache, this only applies to you.</div>\n\n            <label class=\"block mb-2 uppercase font-bold text-xs text-gray-700 dark:text-gray-300\"\n                   for=\"cloud_folder\"\n            >\n              FIRST PLAY VIDEO SOURCE\n            </label>\n\n            <div class=\"flex flex-row\">\n              <input v-model=\"form.first_play_video_source\"\n                     class=\"border border-gray-400 p-2 w-full rounded-lg text-black\"\n                     type=\"text\"\n                     name=\"first_play_video_source\"\n                     id=\"first_play_video_source\"\n              >\n            </div>\n            <span class=\"text-xs\">e.g., https://mist.nottv.io/hls/test/index.m3u8</span>\n\n            <span class=\"text-xs\"></span>\n\n            <div v-if=\"form.errors.first_play_video_source\" v-text=\"form.errors.first_play_video_source\"\n                 class=\"text-xs text-red-600 mt-1\"></div>\n          </div>\n          <div class=\"mb-6\">\n            <label class=\"block mb-2 uppercase font-bold text-xs text-gray-700 dark:text-gray-300\"\n                   for=\"cloud_folder\"\n            >\n              FIRST PLAY VIDEO SOURCE TYPE\n            </label>\n\n            <div class=\"flex flex-row\">\n              <input v-model=\"form.first_play_video_source_type\"\n                     class=\"border border-gray-400 p-2 w-full rounded-lg text-black\"\n                     type=\"text\"\n                     name=\"first_play_video_source\"\n                     id=\"first_play_video_source\"\n              >\n            </div>\n            <span class=\"text-xs\">e.g., video/mp4 or application/x-mpegURL</span>\n\n            <div v-if=\"form.errors.first_play_video_source\" v-text=\"form.errors.first_play_video_source\"\n                 class=\"text-xs text-red-600 mt-1\"></div>\n          </div>\n          <div class=\"mb-6\">\n            <label class=\"block mb-2 uppercase font-bold text-xs text-gray-700 dark:text-gray-300\"\n                   for=\"cloud_folder\"\n            >\n              VIDEO NAME\n            </label>\n\n            <div class=\"flex flex-row\">\n              <input v-model=\"form.first_play_video_name\"\n                     class=\"border border-gray-400 p-2 w-full rounded-lg text-black\"\n                     type=\"text\"\n                     name=\"first_play_video_name\"\n                     id=\"first_play_video_name\"\n              >\n            </div>\n            <span class=\"text-xs\"></span>\n\n            <div v-if=\"form.errors.first_play_video_name\" v-text=\"form.errors.first_play_video_name\"\n                 class=\"text-xs text-red-600 mt-1\"></div>\n          </div>\n          <div class=\"mb-6 border-b-2 pb-4\">\n            <label class=\"block mb-2 uppercase font-bold text-xs text-gray-700 dark:text-gray-300\"\n                   for=\"cloud_folder\"\n            >\n              CHANNEL ID\n            </label>\n\n            <div class=\"flex flex-row\">\n              <input v-model=\"form.first_play_channel_id\"\n                     class=\"border border-gray-400 p-2 w-full rounded-lg text-black\"\n                     type=\"text\"\n                     name=\"first_play_channel_id\"\n                     id=\"first_play_channel_id\"\n              >\n            </div>\n            <span class=\"text-xs text-orange-500\">This needs to become a dropdown of channels to select.</span>\n\n            <div v-if=\"form.errors.first_play_channel_id\" v-text=\"form.errors.first_play_channel_id\"\n                 class=\"text-xs text-red-600 mt-1\"></div>\n          </div>\n\n          <div class=\"mb-6\">\n            <label class=\"block mb-2 uppercase font-bold text-xs text-gray-700 dark:text-gray-300\"\n                   for=\"mist_server_api_url\"\n            >\n              MIST SERVER URI\n            </label>\n            <div class=\"text-xs mb-2\">This is the primary mist server. Right now we don't have a load balancer.</div>\n\n            <div class=\"flex flex-row\">\n              <input v-model=\"form.mist_server_uri\"\n                     class=\"border border-gray-400 p-2 w-full rounded-lg text-black\"\n                     type=\"text\"\n                     name=\"mist_server_uri\"\n                     id=\"mist_server_uri\"\n              >\n            </div>\n            <div class=\"text-xs mb-2\">e.g., https://mist.nottv.io</div>\n\n            <div v-if=\"form.errors.mist_server_uri\" v-text=\"form.errors.mist_server_uri\"\n                 class=\"text-xs text-red-600 mt-1\"></div>\n          </div>\n\n          <div class=\"mb-6\">\n            <label class=\"block mb-2 uppercase font-bold text-xs text-gray-700 dark:text-gray-300\"\n                   for=\"mist_server_ip\"\n            >\n              MIST SERVER IP ADDRESS\n            </label>\n            <div class=\"text-xs mb-2\">This is used as part of the hash for Mist Stream Access Control.</div>\n\n            <div class=\"flex flex-row\">\n              <input v-model=\"form.mist_server_ip\"\n                     class=\"border border-gray-400 p-2 w-full rounded-lg text-black\"\n                     type=\"text\"\n                     name=\"mist_server_ip\"\n                     id=\"mist_server_ip\"\n              >\n            </div>\n            <div v-if=\"form.errors.mist_server_ip\" v-text=\"form.errors.mist_server_ip\"\n                 class=\"text-xs text-red-600 mt-1\"></div>\n          </div>\n          <div class=\"mb-6\">\n            <label class=\"block mb-2 uppercase font-bold text-xs text-gray-700 dark:text-gray-300\"\n                   for=\"mist_server_api_url\"\n            >\n              MIST SERVER API URL\n            </label>\n\n            <div class=\"flex flex-row\">\n              <input v-model=\"form.mist_server_api_url\"\n                     class=\"border border-gray-400 p-2 w-full rounded-lg text-black\"\n                     type=\"text\"\n                     name=\"mist_server_api_url\"\n                     id=\"mist_server_api_url\"\n              >\n            </div>\n            <div class=\"text-xs mb-2\">e.g., https://mist.nottv.io/api</div>\n\n            <div v-if=\"form.errors.mist_server_api_url\" v-text=\"form.errors.mist_server_api_url\"\n                 class=\"text-xs text-red-600 mt-1\"></div>\n          </div>\n          <div class=\"mb-6\">\n            <label class=\"block mb-2 uppercase font-bold text-xs text-gray-700 dark:text-gray-300\"\n                   for=\"mist_server_username\"\n            >\n              MIST SERVER USERNAME\n            </label>\n\n            <div class=\"flex flex-row\">\n              <input v-model=\"form.mist_server_username\"\n                     class=\"border border-gray-400 p-2 w-full rounded-lg text-black\"\n                     type=\"text\"\n                     name=\"mist_server_username\"\n                     id=\"mist_server_username\"\n              >\n            </div>\n            <div v-if=\"form.errors.mist_server_username\" v-text=\"form.errors.mist_server_username\"\n                 class=\"text-xs text-red-600 mt-1\"></div>\n          </div>\n          <div class=\"mb-6\">\n            <label class=\"block mb-2 uppercase font-bold text-xs text-gray-700 dark:text-gray-300\"\n                   for=\"mist_server_password\"\n            >\n              MIST SERVER PASSWORD\n            </label>\n\n            <div class=\"flex flex-row\">\n              <input v-model=\"form.mist_server_password\"\n                     class=\"border border-gray-400 p-2 w-full rounded-lg text-black\"\n                     type=\"password\"\n                     name=\"mist_server_password\"\n                     id=\"mist_server_password\"\n              >\n            </div>\n            <div v-if=\"form.errors.mist_server_password\" v-text=\"form.errors.mist_server_password\"\n                 class=\"text-xs text-red-600 mt-1\"></div>\n          </div>\n\n          <div class=\"mb-6\">\n            <label class=\"block mb-2 uppercase font-bold text-xs text-gray-700 dark:text-gray-300\"\n                   for=\"mist_server_password\"\n            >\n              MIST ACCESS CONTROL SECRET\n            </label>\n            <div class=\"text-xs mb-2\">A string used to create the access control urls for playing streams and videos from the mist server.</div>\n            <div class=\"flex flex-row\">\n              <input v-model=\"form.mist_access_control_secret\"\n                     class=\"border border-gray-400 p-2 w-full rounded-lg text-black\"\n                     type=\"text\"\n                     name=\"mist_access_control_secret\"\n                     id=\"mist_access_control_secret\"\n              >\n            </div>\n            <div v-if=\"form.errors.mist_access_control_secret\" v-text=\"form.errors.mist_access_control_secret\"\n                 class=\"text-xs text-red-600 mt-1\"></div>\n          </div>\n\n          <div class=\"flex justify-end my-6 mr-6\">\n            <JetValidationErrors class=\"mr-4\"/>\n            <button\n                @click.prevent=\"submit\"\n                class=\"bg-blue-600 hover:bg-blue-500 text-white rounded py-2 px-4\"\n                :disabled=\"form.processing\"\n            >\n              Save\n            </button>\n          </div>\n\n        </form>\n\n\n        <div class=\"w-full flex flex-wrap mb-4 p-2 bg-amber-800 text-white\">\n          <span>Change Max Video Upload Size. convert Bytes to KB, MB, GB, TB.</span>\n          <span>Update Video Uploader with the size.</span>\n        </div>\n\n        <div class=\"w-full flex flex-wrap mb-4 p-2 bg-amber-800 text-white\">\n          Content licenses\n        </div>\n\n        <div class=\"w-full flex flex-wrap mb-4 p-2 bg-amber-800 text-white\">\n          Episode Statuses\n        </div>\n\n        <div class=\"w-full flex flex-wrap mb-4 p-2 bg-amber-800 text-white\">\n          Show Statuses\n        </div>\n\n        <div class=\"w-full flex flex-wrap mb-4 p-2 bg-amber-800 text-white\">\n          Channels. Display list of channels. Click channel name to go to the channel playlist edit page.\n          Grid style, 1 column mobile, 2 column tablet, 3 column lg, 4 column xl\n          Rows: Times (next 24 hours) --> can scroll up to 72 hours ahead or 72 hours back.\n          Columns: Days (next 7 days). Need new Pages folder: Channels/Index, Channels/Create, Channels/Edit,\n          ch/channelId (e.g., ch/01).\n\n        </div>\n      </div>\n\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { Inertia } from \"@inertiajs/inertia\"\nimport { nextTick, onMounted, ref } from 'vue'\nimport { useForm } from \"@inertiajs/inertia-vue3\"\nimport { usePageSetup } from '@/Utilities/PageSetup'\nimport { useAppSettingStore } from \"@/Stores/AppSettingStore\"\nimport JetValidationErrors from '@/Jetstream/ValidationErrors'\nimport ServerTime from \"@/Components/Pages/Admin/ServerTime\"\nimport Message from \"@/Components/Global/Modals/Messages\"\n\nusePageSetup('admin.settings')\n\nconst appSettingStore = useAppSettingStore()\n\nlet props = defineProps({\n  id: Number,\n  countries: Object,\n  default_country: Number,\n  cdn_endpoint: String,\n  cloud_folder: String,\n  first_play_video_source: String,\n  first_play_video_source_type: String,\n  first_play_video_name: String,\n  first_play_channel_id: String,\n  mist_server_ip: String,\n  mist_server_uri: String,\n  mist_server_api_url: String,\n  mist_server_username: String,\n  mist_server_password: String,\n  mist_access_control_secret: String,\n  messageType: String,\n});\n\nlet form = useForm({\n  id: props.id,\n  default_country: props.default_country,\n  cdn_endpoint: props.cdn_endpoint,\n  cloud_folder: props.cloud_folder,\n  first_play_video_source: props.first_play_video_source,\n  first_play_video_source_type: props.first_play_video_source_type,\n  first_play_video_name: props.first_play_video_name,\n  first_play_channel_id: props.first_play_channel_id,\n  mist_server_ip: props.mist_server_ip,\n  mist_server_uri: props.mist_server_uri,\n  mist_server_api_url: props.mist_server_api_url,\n  mist_server_username: props.mist_server_username,\n  mist_server_password: props.mist_server_password,\n  mist_access_control_secret: props.mist_access_control_secret,\n})\n\nconst countries = ref([]);\n// const topDiv = document.getElementById(\"topDiv\")\n\nonMounted(() => {\n  countries.value = props.countries;\n});\n\nnextTick(() => {\n  const topDiv = document.getElementById(\"topDiv\");\n  if (topDiv) {\n    topDiv.scrollIntoView();\n  }\n});\n\nlet submit = () => {\n  form.patch(route('admin.settings'));\n  topDiv.scrollIntoView()\n};\n\nlet clearFirstPlayCacheData = () => {\n  Inertia.post(route('admin.clear-first-play-data-cache'));\n  topDiv.scrollIntoView()\n}\n\nlet getAllEpisodesButtonActive = ref(false);\n\nfunction getEpisodesFromEmbedCodes() {\n  Inertia.post('getVideosFromEmbedCodes')\n  getAllEpisodesButtonActive = false;\n}\n\n\n// Sample URL\nconst mistServerUri = props.mist_server_uri ?? '';\n\n// Function to remove 's' from 'https'\nfunction convertToHttp(url) {\n  return url.replace('https://', 'http://');\n}\n\n// Convert the URL and store it\nconst mistServerUriForManagementInterface = ref(convertToHttp(mistServerUri));\n\n\n</script>\n"],"names":["usePageSetup","pageName","userStore","useUserStore","appSettingStore","useAppSettingStore","videoPlayerStore","useVideoPlayerStore","currentPage","showFlashMessage","pageIsHidden","isMobile","ott","makeVideoTopRight","onBeforeMount","pageReload","window","location","reload","onMounted","search","topDiv","document","getElementById","scrollIntoView","setPrevUrl","noLayout","showOttButtons","props","__props","clearFlashMessage","computed","flash","success","message","warning","error","_ref","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","Inertia","post","route","stop","apply","arguments","errors","usePage","value","hasErrors","Object","keys","length","serverTime","ref","localTime","_fetchServerTime","response","axios","get","sent","data","console","log","t0","userLocalDate","fetchServerTime","Date","toLocaleString","getUserTimezone","userTimezone","Intl","DateTimeFormat","resolvedOptions","timeZone","form","useForm","id","default_country","cdn_endpoint","cloud_folder","first_play_video_source","first_play_video_source_type","first_play_video_name","first_play_channel_id","mist_server_ip","mist_server_uri","mist_server_api_url","mist_server_username","mist_server_password","mist_access_control_secret","countries","nextTick","submit","patch","clearFirstPlayCacheData","getAllEpisodesButtonActive","getEpisodesFromEmbedCodes","mistServerUri","_props$mist_server_ur","mistServerUriForManagementInterface","replace"],"sourceRoot":""}