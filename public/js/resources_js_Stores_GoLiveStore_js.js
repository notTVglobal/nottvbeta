"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk"] = self["webpackChunk"] || []).push([["resources_js_Stores_GoLiveStore_js"],{

/***/ "./resources/js/Stores/GoLiveStore.js":
/*!********************************************!*\
  !*** ./resources/js/Stores/GoLiveStore.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useGoLiveStore: () => (/* binding */ useGoLiveStore)\n/* harmony export */ });\n/* harmony import */ var pinia__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! pinia */ \"./node_modules/pinia/dist/pinia.mjs\");\n/* harmony import */ var _Stores_VideoPlayerStore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/Stores/VideoPlayerStore */ \"./resources/js/Stores/VideoPlayerStore.js\");\n/* harmony import */ var video_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! video.js */ \"./node_modules/video.js/dist/video.es.js\");\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, \"catch\": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n\n\nvar initialState = function initialState() {\n  return {\n    displayEpisodeGoLiveComponent: false,\n    isEpisode: null,\n    episode: null,\n    preSelectedShowId: null,\n    selectedShowId: null,\n    // selectedShow: null, this uses the getter... set it up in the component as a computed property\n    shows: [],\n    // Assuming you might want to store shows here too\n    streamKey: '',\n    // Optional: Store the generated stream key if needed\n    wildcardId: '',\n    isLive: false,\n    isRecording: false,\n    streamInfo: null,\n    rtmpUri: null\n  };\n};\nvar useGoLiveStore = (0,pinia__WEBPACK_IMPORTED_MODULE_2__.defineStore)('goLiveStore', {\n  state: initialState,\n  actions: {\n    reset: function reset() {\n      // Reset the store to its original state (clear all data)\n      Object.assign(this, initialState());\n    },\n    fetchShows: function fetchShows() {\n      var _this = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var response;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return axios.get('/go-live/shows');\n            case 3:\n              response = _context.sent;\n              // Adjust the URL as needed\n              _this.shows = response.data;\n              _context.next = 10;\n              break;\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](0);\n              console.error('Failed to fetch shows:', _context.t0);\n              // Handle error appropriately\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[0, 7]]);\n      }))();\n    },\n    // temporarily commenting this out\n    generateStreamKey: function generateStreamKey() {\n      var _this2 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var response;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              if (_this2.selectedShowId) {\n                _context2.next = 3;\n                break;\n              }\n              console.error('No show selected');\n              throw new Error('No show selected');\n            case 3:\n              _context2.prev = 3;\n              _context2.next = 6;\n              return axios.post(\"/go-live/shows/\".concat(_this2.selectedShowId, \"/stream-key\"));\n            case 6:\n              response = _context2.sent;\n              console.log('Stream key generated:', response.data);\n              _this2.streamKey = response.data.stream_key; // Assuming the response includes the stream key\n              console.log('this new stream key: ' + _this2.streamKey);\n              console.log('response data stream key: ' + response.data.stream_key);\n              // Update goLiveStore.selectedShow.mist_stream_wildcard_id with the returned stream key\n              if (_this2.selectedShowId && response.data.stream_key) {\n                _this2.selectedShow.mist_stream_wildcard = response.data;\n                _this2.selectedShow.mist_stream_wildcard_id = response.data.stream_key;\n              }\n              return _context2.abrupt(\"return\", response.data);\n            case 15:\n              _context2.prev = 15;\n              _context2.t0 = _context2[\"catch\"](3);\n              console.error('Error generating stream key:', _context2.t0.response ? _context2.t0.response.data : _context2.t0);\n              throw _context2.t0;\n            case 19:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, null, [[3, 15]]);\n      }))();\n    },\n    // Other actions...\n    updateAndGetStreamKey: function updateAndGetStreamKey() {\n      var _this3 = this,\n        _show$mist_stream_wil;\n      var show = this.shows.find(function (show) {\n        return show.id === _this3.selectedShowId;\n      }) || null;\n      var streamKey = (show === null || show === void 0 || (_show$mist_stream_wil = show.mist_stream_wildcard) === null || _show$mist_stream_wil === void 0 ? void 0 : _show$mist_stream_wil.name) || ' < RELOAD THIS PAGE TO GET YOUR STREAM KEY > ';\n\n      // Perform the state update\n      this.streamKey = streamKey;\n\n      // Return the stream key for immediate use\n      return streamKey;\n    },\n    // async generateStreamKey() {\n    //     if (!this.selectedShowId) {\n    //         console.error(\"No show selected\");\n    //         throw new Error(\"No show selected\");\n    //     }\n    //\n    //     try {\n    //         const response = await axios.post(`/go-live/shows/${this.selectedShowId}/stream-key`);\n    //         console.log(\"Stream key generated:\", response.data);\n    //\n    //         // Find the index of the selected show in the shows array\n    //         const selectedIndex = this.shows.findIndex(show => show.id === this.selectedShowId);\n    //         if (selectedIndex !== -1) {\n    //             // Update the selected show with the new stream key information\n    //             this.shows[selectedIndex].mist_stream_wildcard = response.data;\n    //             this.shows[selectedIndex].mist_stream_wildcard_id = response.data.stream_key;\n    //         }\n    //         return response.data;\n    //     } catch (error) {\n    //         console.error(\"Error generating stream key:\", error.response ? error.response.data : error);\n    //         throw error;\n    //     }\n    // },\n    // setPreSelectedShowId(id) {\n    //     this.preSelectedShowId = id;\n    //     console.log('preSelectedShowId updated to:', this.preSelectedShowId);\n    // },\n    // Action to update selectedShowId and selectedShow based on selectedShowId\n    setSelectedShowId: function setSelectedShowId(showId) {\n      this.selectedShowId = showId;\n      this.updateSelectedShow(); // Call the method to update selectedShow based on new selectedShowId\n    },\n    // Method to find and update selectedShow based on selectedShowId\n    updateSelectedShow: function updateSelectedShow() {\n      var _this4 = this;\n      this.selectedShow = this.shows.find(function (show) {\n        return show.id === _this4.selectedShowId;\n      }) || null;\n    },\n    goLive: function goLive() {\n      this.isLive = true;\n    },\n    stopLive: function stopLive() {\n      this.isLive = false;\n    },\n    startRecording: function startRecording() {\n      this.isRecording = true;\n    },\n    stopRecording: function stopRecording() {\n      this.isRecording = false;\n    },\n    fetchStreamInfo: function fetchStreamInfo(streamName) {\n      var _this5 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var response;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.prev = 0;\n              _context3.next = 3;\n              return fetch(\"/fetch-stream-info/\".concat(streamName));\n            case 3:\n              response = _context3.sent;\n              if (response.ok) {\n                _context3.next = 6;\n                break;\n              }\n              throw new Error('Failed to fetch');\n            case 6:\n              _context3.next = 8;\n              return response.json();\n            case 8:\n              _this5.streamInfo = _context3.sent;\n              _context3.next = 14;\n              break;\n            case 11:\n              _context3.prev = 11;\n              _context3.t0 = _context3[\"catch\"](0);\n              console.error('Error fetching server info:', _context3.t0);\n            case 14:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, null, [[0, 11]]);\n      }))();\n    },\n    fetchRtmpUri: function fetchRtmpUri() {\n      var _this6 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var response;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.prev = 0;\n              _context4.next = 3;\n              return fetch(\"/fetch-rtmp-uri\");\n            case 3:\n              response = _context4.sent;\n              if (response.ok) {\n                _context4.next = 6;\n                break;\n              }\n              throw new Error('Failed to fetch');\n            case 6:\n              _context4.next = 8;\n              return response.text();\n            case 8:\n              _this6.rtmpUri = _context4.sent;\n              _context4.next = 14;\n              break;\n            case 11:\n              _context4.prev = 11;\n              _context4.t0 = _context4[\"catch\"](0);\n              console.error('Error fetching RTMP URI:', _context4.t0);\n            case 14:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, null, [[0, 11]]);\n      }))();\n    },\n    clearStreamInfo: function clearStreamInfo() {\n      this.streamInfo = null;\n    },\n    toggleDisplayEpisodeGoLiveComponent: function toggleDisplayEpisodeGoLiveComponent(episode) {\n      var _this$episode;\n      // const videoPlayerAuxStore = useVideoAuxPlayerStore()\n      // videoPlayerAuxStore.reset()\n      this.displayEpisodeGoLiveComponent = !this.displayEpisodeGoLiveComponent;\n      this.isEpisode = !!this.displayEpisodeGoLiveComponent;\n      this.episode = episode;\n      this.selectedShowId = this === null || this === void 0 || (_this$episode = this.episode) === null || _this$episode === void 0 ? void 0 : _this$episode.show_id;\n    },\n    updateEpisode: function updateEpisode(episode) {\n      this.episode = episode;\n    },\n    reloadPlayer: function reloadPlayer() {\n      var _this7 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        var _this7$selectedShow, _this7$episode;\n        var videoPlayerStore, source, _this7$selectedShow2, _this7$selectedShow3, _this7$episode2, _this7$episode3, sourceUrl, sourceType, videoJs;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              videoPlayerStore = _Stores_VideoPlayerStore__WEBPACK_IMPORTED_MODULE_0__.useVideoPlayerStore; // Accessing another store\n              source = null;\n              if (!((_this7$selectedShow = _this7.selectedShow) !== null && _this7$selectedShow !== void 0 && (_this7$selectedShow = _this7$selectedShow.mist_stream_wildcard) !== null && _this7$selectedShow !== void 0 && _this7$selectedShow.name)) {\n                _context5.next = 8;\n                break;\n              }\n              source = (_this7$selectedShow2 = _this7.selectedShow) === null || _this7$selectedShow2 === void 0 || (_this7$selectedShow2 = _this7$selectedShow2.mist_stream_wildcard) === null || _this7$selectedShow2 === void 0 ? void 0 : _this7$selectedShow2.name;\n              _context5.next = 6;\n              return _this7.fetchStreamInfo((_this7$selectedShow3 = _this7.selectedShow) === null || _this7$selectedShow3 === void 0 || (_this7$selectedShow3 = _this7$selectedShow3.mist_stream_wildcard) === null || _this7$selectedShow3 === void 0 ? void 0 : _this7$selectedShow3.name);\n            case 6:\n              _context5.next = 12;\n              break;\n            case 8:\n              if (!((_this7$episode = _this7.episode) !== null && _this7$episode !== void 0 && (_this7$episode = _this7$episode.mist_stream_wildcard) !== null && _this7$episode !== void 0 && _this7$episode.name)) {\n                _context5.next = 12;\n                break;\n              }\n              source = (_this7$episode2 = _this7.episode) === null || _this7$episode2 === void 0 || (_this7$episode2 = _this7$episode2.mist_stream_wildcard) === null || _this7$episode2 === void 0 ? void 0 : _this7$episode2.name;\n              _context5.next = 12;\n              return _this7.fetchStreamInfo((_this7$episode3 = _this7.episode) === null || _this7$episode3 === void 0 || (_this7$episode3 = _this7$episode3.mist_stream_wildcard) === null || _this7$episode3 === void 0 ? void 0 : _this7$episode3.name);\n            case 12:\n              sourceUrl = videoPlayerStore.mistServerUri + 'hls/' + source + '/index.m3u8';\n              console.log('source url: ' + sourceUrl);\n              sourceType = 'application/vnd.apple.mpegurl';\n              videoJs = (0,video_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])('aux-player');\n              videoJs.src({\n                'src': sourceUrl,\n                'type': sourceType\n              });\n              // You might have other logic here as needed\n\n              console.log('reload player');\n            case 18:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5);\n      }))();\n    }\n  },\n  getters: {\n    selectedShow: function selectedShow(state) {\n      var _show$mist_stream_wil2, _show$mist_stream_wil3;\n      var show = state.shows.find(function (show) {\n        return show.id === state.selectedShowId;\n      }) || null;\n      state.streamKey = (show === null || show === void 0 || (_show$mist_stream_wil2 = show.mist_stream_wildcard) === null || _show$mist_stream_wil2 === void 0 ? void 0 : _show$mist_stream_wil2.name) || 'Fallback value if undefined';\n      state.wildcardId = (show === null || show === void 0 || (_show$mist_stream_wil3 = show.mist_stream_wildcard) === null || _show$mist_stream_wil3 === void 0 ? void 0 : _show$mist_stream_wil3.id) || 'Fallback value if undefined';\n      return show;\n    },\n    fullRtmpUri: function fullRtmpUri(state) {\n      return state.rtmpUri ? state.rtmpUri + 'live/' : '';\n    },\n    fullUrl: function fullUrl(state) {\n      // Directly construct fullRtmpUri from state\n      var fullRtmpUri = state.rtmpUri ? state.rtmpUri + 'live/' : '';\n\n      // Directly find the show based on selectedShowId to avoid using getters\n      // const show = state.shows.find(show => show.id === state.selectedShowId) || null;\n      // const streamKey = show?.mist_stream_wildcard?.name || 'Fallback value if undefined';\n\n      // Return the concatenated URL\n      return \"\".concat(fullRtmpUri).concat(state.streamKey);\n    }\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/Stores/GoLiveStore.js\n");

/***/ })

}]);