"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk"] = self["webpackChunk"] || []).push([["resources_js_Stores_VideoAuxPlayerStore_js"],{

/***/ "./resources/js/Stores/VideoAuxPlayerStore.js":
/*!****************************************************!*\
  !*** ./resources/js/Stores/VideoAuxPlayerStore.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useVideoAuxPlayerStore: () => (/* binding */ useVideoAuxPlayerStore)\n/* harmony export */ });\n/* harmony import */ var pinia__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! pinia */ \"./node_modules/pinia/dist/pinia.mjs\");\n/* harmony import */ var _Stores_AppSettingStore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/Stores/AppSettingStore */ \"./resources/js/Stores/AppSettingStore.js\");\n/* harmony import */ var _Stores_StreamStore__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/Stores/StreamStore */ \"./resources/js/Stores/StreamStore.js\");\n/* harmony import */ var _Stores_UserStore__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/Stores/UserStore */ \"./resources/js/Stores/UserStore.js\");\n/* harmony import */ var _Stores_ChannelStore__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/Stores/ChannelStore */ \"./resources/js/Stores/ChannelStore.js\");\n/* harmony import */ var _Stores_ShowStore__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/Stores/ShowStore */ \"./resources/js/Stores/ShowStore.js\");\n/* harmony import */ var _Stores_AudioStore__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/Stores/AudioStore */ \"./resources/js/Stores/AudioStore.js\");\n/* harmony import */ var video_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! video.js */ \"./node_modules/video.js/dist/video.es.js\");\n/* harmony import */ var _inertiajs_inertia_vue3__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @inertiajs/inertia-vue3 */ \"./node_modules/@inertiajs/inertia-vue3/dist/index.js\");\n/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! vue */ \"./node_modules/vue/dist/vue.esm-bundler.js\");\n/* harmony import */ var _Stores_NotificationStore__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @/Stores/NotificationStore */ \"./resources/js/Stores/NotificationStore.js\");\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, \"catch\": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n\n\n\n\n\n\n\n\n\n\nvar initialState = function initialState() {\n  return {\n    player: null,\n    // Video.js player instance\n    eventListenersAttached: false,\n    // Track if listeners are attached\n    videoPlayerLoaded: false,\n    \"class\": '',\n    videoContainerClass: '',\n    // ottClass: 'OttClose',\n    videoSourceIdSrc1: '',\n    videoSourceIdSrc2: '',\n    videoSourceIdSrc3: '',\n    videoSourceTypeSrc1: '',\n    videoSourceTypeSrc2: '',\n    videoSourceTypeSrc3: '',\n    firstPlayVideoSourceType: '',\n    firstPlayVideoSource: '',\n    key: '',\n    videoName: '',\n    videoSource: '',\n    videoSourceType: '',\n    videoPoster: '',\n    nextSource: '',\n    previousSource: '',\n    currentView: '',\n    currentChannelId: 0,\n    currentChannelName: '',\n    currentShow: {},\n    currentShowEpisode: {},\n    currentVideo: {},\n    hasVideo: false,\n    controls: true,\n    muted: true,\n    paused: true,\n    // videoCurrentTime: '',\n    currentTime: 0,\n    // Current playback time in seconds\n    duration: 0,\n    // Total video duration in seconds\n    formattedTime: '00:00 / 00:00',\n    // Formatted time string\n    blue: false,\n    // DO NOT REMOVE\n    videoIsYoutube: false,\n    videoUploadComplete: false\n  };\n};\nvar useVideoAuxPlayerStore = (0,pinia__WEBPACK_IMPORTED_MODULE_10__.defineStore)('videoAuxPlayerStore', {\n  state: initialState,\n  actions: {\n    reset: function reset() {\n      // Reset the store to its original state (clear all data)\n      Object.assign(this, initialState());\n    },\n    getMistServerUri: function getMistServerUri() {\n      var _this = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var response;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return axios.get('/mist-server/uri');\n            case 3:\n              response = _context.sent;\n              _this.mistServerUri = response.data;\n              _context.next = 10;\n              break;\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](0);\n              console.error(_context.t0);\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[0, 7]]);\n      }))();\n    },\n    // Initialize or update the player instance\n    setPlayer: function setPlayer(playerInstance) {\n      var _this2 = this;\n      this.player = playerInstance;\n      this.initializePlayer().then(function () {\n        _this2.attachEventListeners(); // Attach event listeners after initialization\n      })[\"catch\"](function (error) {\n        console.error('Error during video player initialization:', error);\n      });\n    },\n    // Initialize the player with necessary settings and start playback\n    initializePlayer: function initializePlayer() {\n      var _this3 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              if (_this3.player) {\n                _context2.next = 3;\n                break;\n              }\n              console.error('Video.js player is not initialized.');\n              return _context2.abrupt(\"return\");\n            case 3:\n              _context2.next = 5;\n              return (0,vue__WEBPACK_IMPORTED_MODULE_8__.nextTick)();\n            case 5:\n              _context2.next = 7;\n              return (0,_Stores_AudioStore__WEBPACK_IMPORTED_MODULE_5__.useAudioStore)().ensureAudioContextAndNodesReady(_this3.player);\n            case 7:\n              // Apply initial player settings\n              _this3.player.controls(false);\n              _this3.player.muted(_this3.muted);\n\n              // Attempt to start playback\n              _this3.player.ready(function () {\n                _this3.player.play().then(function () {\n                  console.log('Playback started successfully');\n                })[\"catch\"](function (error) {\n                  console.error('Error trying to play the video:', error);\n                  // Handle the error (e.g., showing a user-friendly message)\n                });\n              });\n            case 10:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2);\n      }))();\n    },\n    // Attach event listeners to the player\n    attachEventListeners: function attachEventListeners() {\n      if (!this.player || this.eventListenersAttached) {\n        console.log('Event listeners are already attached or video player is not initialized.');\n        return;\n      }\n      this.player.on('timeupdate', this.handleTimeUpdate);\n      this.player.on('fullscreenchange', this.handleFullscreenChange);\n      this.player.on('play', this.handlePlay);\n      this.player.on('pause', this.handlePause);\n      this.player.on('error', this.handleError);\n      this.eventListenersAttached = true;\n      console.log('Event listeners attached.');\n    },\n    // Detach event listeners from the player\n    detachEventListeners: function detachEventListeners() {\n      if (!this.player || !this.eventListenersAttached) {\n        console.log('Event listeners are already detached or video player is not initialized.');\n        return;\n      }\n      (0,_Stores_AudioStore__WEBPACK_IMPORTED_MODULE_5__.useAudioStore)().stopAudioLevelMonitoring();\n      this.player.off('timeupdate', this.handleTimeUpdate);\n      this.player.off('fullscreenchange', this.handleFullscreenChange);\n      this.player.off('play', this.handlePlay);\n      this.player.off('pause', this.handlePause);\n      this.player.off('error', this.handleError);\n      this.eventListenersAttached = false;\n      console.log('Event listeners detached.');\n    },\n    // Dispose of the player and perform cleanup\n    disposePlayer: function disposePlayer() {\n      if (!this.player) {\n        console.error('Video player is not initialized.');\n        return;\n      }\n      this.detachEventListeners(); // Detach event listeners if attached\n      this.player.dispose(); // Dispose of the player instance\n      this.player = null; // Reset the player state\n\n      // Optionally, stop audio level monitoring if linked to the player lifecycle\n      // const audioStore = useAudioStore();\n      // audioStore.stopAudioLevelMonitoring();\n\n      console.log('Video player disposed and cleaned up.');\n    },\n    // New method to prepare for a new video source\n    prepareForNewVideoSource: function prepareForNewVideoSource(source) {\n      console.log('Preparing for new video source');\n\n      // Example: Clear any existing channel or video-specific state\n      (0,_Stores_ChannelStore__WEBPACK_IMPORTED_MODULE_3__.useChannelStore)().clearChannel();\n\n      // Reset or cleanup any existing video playback, if necessary\n      // this.resetPlayback();\n\n      // Load and play the new video source\n      this.loadNewVideo(source);\n    },\n    resetPlayback: function resetPlayback() {\n      if (this.player) {\n        this.player.pause();\n        this.player.muted(true);\n        this.player.currentTime(0); // Optionally reset the time\n        // Further cleanup logic here, if necessary\n        this.detachEventListeners(); // Detach event listeners if attached\n      }\n    },\n    // Event handlers\n    handleTimeUpdate: function handleTimeUpdate() {\n      // console.log('Handling timeupdate...');\n      // Implement your logic\n      this.currentTime = this.player.currentTime();\n      this.duration = this.player.duration();\n      var progressPercentage = this.currentTime / this.duration * 100;\n      this.formattedTime = \"\".concat(this.formatDuration(this.currentTime), \" / \").concat(this.formatDuration(this.duration));\n\n      // Update UI elements or emit events as needed\n      // Note: Direct manipulation of the DOM or component refs from the store is not recommended\n    },\n    // for the handleTimeUpdate eventHandler\n    formatDuration: function formatDuration(durationInSeconds) {\n      var hours = Math.floor(durationInSeconds / 3600);\n      var minutes = Math.floor(durationInSeconds % 3600 / 60);\n      var seconds = Math.floor(durationInSeconds % 60);\n      var parts = [hours, minutes, seconds].map(function (part) {\n        return part.toString().padStart(2, '0');\n      });\n      return parts.join(':');\n    },\n    handleFullscreenChange: function handleFullscreenChange() {\n      var _this$player,\n        _this4 = this;\n      console.log('Handling fullscreenchange...');\n      // Implement your logic\n      (_this$player = this.player) === null || _this$player === void 0 || _this$player.on('fullscreenchange', function () {\n        if (_this4.player.isFullscreen()) {\n          // Video is entering fullscreen mode\n          // You can add custom behavior for entering fullscreen here if needed\n        } else {\n          // Video is exiting fullscreen mode\n          // Check if the video was playing before entering fullscreen\n          if (_this4.player.paused() === false) {\n            // Resume playback after exiting fullscreen\n            _this4.player.play();\n          }\n        }\n      });\n    },\n    handlePlay: function handlePlay() {\n      var _this$player2,\n        _this5 = this;\n      console.log('Handling play...');\n      // Implement your logic\n      (_this$player2 = this.player) === null || _this$player2 === void 0 || _this$player2.on('play', function () {\n        _this5.paused = false;\n      });\n    },\n    handlePause: function handlePause() {\n      var _this$player3,\n        _this6 = this;\n      console.log('Handling pause...');\n      // Implement your logic\n      (_this$player3 = this.player) === null || _this$player3 === void 0 || _this$player3.on('pause', function () {\n        _this6.paused = true;\n      });\n    },\n    handleError: function handleError() {\n      var _this$player4;\n      console.log('Handling error...');\n      // Implement your logic\n      (_this$player4 = this.player) === null || _this$player4 === void 0 || _this$player4.on('error', function () {\n        var error = this.player.error();\n        console.error('Video.js Error:', error.code, error.message);\n      });\n    },\n    makeBlue: function makeBlue() {\n      // for testing. DO NOT REMOVE.\n      this.blue = true;\n    },\n    // Apparently this loadFirstPlay isn't being used...\n    // loadFirstPlay() {\n    //     const {props} = usePage()\n    //     let videoJs = videojs('aux-player')\n    //     const type = props.firstPlayVideoSourceType\n    //     const src = props.firstPlayVideoSource\n    //     videoJs.ready(() => {\n    //         videoJs.src({src, type})\n    //         videoJs.play().then(() => {\n    //             console.log('Playback started successfully')\n    //         }).catch(error => {\n    //             console.error('Error trying to play the video:', error)\n    //             // Handle the error (e.g., showing a user-friendly message)\n    //         })\n    //     })\n    //     console.log(type)\n    //     console.log(src)\n    // },\n    // Toggle mute state\n    toggleMute: function toggleMute() {\n      if (this.muted) {\n        this.unMute();\n      } else {\n        this.mute();\n      }\n    },\n    // Mute the video\n    mute: function mute() {\n      if (this.player) {\n        this.player.muted(true);\n        this.muted = true;\n      }\n    },\n    // Unmute the video\n    unMute: function unMute() {\n      // const audioStore = useAudioStore()\n\n      if (this.player) {\n        // Prepare audio setup for when it's unmuted\n        // audioStore.userInteractionForAudio()\n\n        // Optionally, if fadeInAudioFromMuted is a gradual process,\n        // ensure this.player.muted(false) is called within that function.\n        // audioStore.fadeInAudioFromMuted()\n\n        this.player.muted(false);\n        this.muted = false;\n      }\n    },\n    togglePlay: function togglePlay() {\n      var videoJs = (0,video_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"])('aux-player');\n      if (this.paused) {\n        videoJs.play();\n      } else {\n        videoJs.pause();\n      }\n    },\n    load: function load() {\n      var videoJs = (0,video_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"])('aux-player');\n      videoJs.load();\n    },\n    loadNewLiveSource: function loadNewLiveSource(source, sourceType) {\n      var videoJs = (0,video_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"])('aux-player');\n      var fullSourceUrl = this.mistServerUri + '/hls/' + source + '/index.m3u8';\n      videoJs.src({\n        'src': fullSourceUrl,\n        'type': sourceType\n      });\n      videoJs.play();\n    },\n    pause: function pause() {\n      var videoJs = (0,video_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"])('aux-player');\n      videoJs.controls(false);\n      videoJs.pause();\n      this.paused = true;\n    },\n    play: function play() {\n      var videoJs = (0,video_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"])('aux-player');\n      videoJs.play();\n      videoJs.controls(false);\n      this.paused = false;\n    },\n    // next not built yet\n    next: function next() {\n      var videoJs = (0,video_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"])('aux-player');\n      videoJs.controls(false);\n      videoJs.src(this.nextSource);\n    },\n    // back not built yet\n    back: function back() {\n      var videoJs = (0,video_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"])('aux-player');\n      videoJs.controls(false);\n      videoJs.src(this.previousSource);\n    },\n    fullscreen: function fullscreen() {\n      var videoJs = (0,video_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"])('aux-player');\n      videoJs.controls(false);\n      // videoJs.fullscreen(this.previousSource)\n      videoJs.requestFullscreen();\n    },\n    getVideoCurrentTime: function getVideoCurrentTime() {\n      var videoJs = (0,video_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"])('aux-player');\n      videoJs.controls(false);\n      this.videoCurrentTime = videoJs.currentTime;\n    },\n    // This playNewVideo was created to access the audioContext\n    // which our audio compressor uses. This is new as of 2/2/2024\n    // ~ tec21\n    // playNewVideo(source) {\n    //     useChannelStore().clearChannel() // Reset or clear channel store\n    //     const videoJs = videojs('aux-player')\n    //     let videoSrc, videoSourceType\n    //     // Determine the source type and construct the source URL if necessary\n    //     if (source.mediaType === 'externalVideo') {\n    //         videoSrc = source.video_url // Direct URL to the video\n    //         videoSourceType = source.type // MIME type, e.g., 'video/youtube', 'video/mp4'\n    //     } else {\n    //         // Construct file path for internal videos\n    //         videoSrc = `${source.cdn_endpoint}${source.cloud_folder}${source.folder}/${source.file_name}`\n    //         videoSourceType = source.type // MIME type, typically 'video/mp4' for file-based sources\n    //     }\n    //     this.resumeAudioContextIfNeeded()\n    //     videoJs.src({src: videoSrc, type: videoSourceType})\n    //     videoJs.muted(false)\n    // },\n    // getSourceDetails(source) {\n    //     let videoSrc = source.video_url; // Directly access the video URL\n    //\n    //     // Default to 'video/mp4' if type is falsy ('', null, undefined, etc.)\n    //     let videoSourceType = source.type || 'video/mp4'\n    //\n    //     // Determine the mediaType and construct the source URL if necessary\n    //     if (source.mediaType === 'externalVideo') {\n    //         videoSrc = source.video_url // Direct URL to the video\n    //     } else {\n    //         // Internal video: construct the path, ensuring the file name is encoded\n    //         let encodedFileName = encodeURIComponent(source.file_name);\n    //         console.log(encodedFileName)\n    //         videoSrc = `${source.cdn_endpoint}${source.cloud_folder}${source.folder}/${encodedFileName}`\n    //     }\n    //     // Logic to determine videoSrc and videoSourceType\n    //     console.log(`Video Source: ${videoSrc}, Type: ${videoSourceType}`);\n    //     return { videoSrc, videoSourceType } // Return as an object\n    // },\n    getSourceDetails: function getSourceDetails(source) {\n      var videoSrc, videoSourceType;\n      console.log('getSourceDetails called with source:', source);\n\n      // Default to 'video/mp4' if type is not specified or is empty\n      videoSourceType = source.type || 'video/mp4';\n      console.log(\"Determined Video Source Type: \".concat(videoSourceType));\n      if (source.mediaType === 'externalVideo') {\n        // For external videos, use the URL as provided without encoding\n        videoSrc = source.video_url;\n        console.log('Using external video source:', videoSrc);\n      } else {\n        console.log('CDN Endpoint:', source.cdn_endpoint);\n        console.log('Cloud Folder:', source.cloud_folder);\n        console.log('Folder:', source.folder);\n        console.log('File Name:', source.file_name);\n        // For internal videos, construct the URL from its components\n        // Here, we assume the cdn_endpoint, cloud_folder, and folder are correctly formatted\n        // and do not require encoding. Only the file_name might need encoding.\n        var basePath = \"\".concat(source.cdn_endpoint).concat(source.cloud_folder).concat(source.folder, \"/\");\n        // const encodedFileName = encodeURIComponent(source.file_name);\n        var fileName = source.file_name;\n        videoSrc = basePath + fileName;\n        console.log('Constructed internal video source:', videoSrc);\n        // If your server or CDN is configured to handle spaces in URLs without %20 encoding\n        // or if the original working URLs did not use standard URL encoding,\n        // you might adjust the encoding strategy here.\n        // For example, to replace spaces with %20 but leave other characters as-is:\n        // const fileNameForUrl = source.file_name.replace(/ /g, '%20');\n        // videoSrc = basePath + fileNameForUrl;\n      }\n      console.log(\"Final Constructed Video Source: \".concat(videoSrc, \", Type: \").concat(videoSourceType));\n      return {\n        videoSrc: videoSrc,\n        videoSourceType: videoSourceType\n      };\n    },\n    loadNewVideo: function loadNewVideo(source) {\n      var _this7 = this;\n      try {\n        var videoJs = (0,video_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"])('aux-player');\n        console.log('LOAD NEW VIDEO');\n        var audioStore = (0,_Stores_AudioStore__WEBPACK_IMPORTED_MODULE_5__.useAudioStore)();\n        // Correctly destructure the returned object to get videoSrc and videoSourceType\n        var _this$getSourceDetail = this.getSourceDetails(source),\n          videoSrc = _this$getSourceDetail.videoSrc,\n          videoSourceType = _this$getSourceDetail.videoSourceType;\n\n        // Example: Stopping and cleaning up the current video and audio setup\n        if (videoJs) {\n          videoJs.src({\n            'src': videoSrc,\n            'type': videoSourceType\n          });\n          videoJs.ready(function () {\n            // ensureAudioContextAndNodesReady does the following:\n            // 1. Resumes AudioContext if suspended.\n            // 2. (Re)connects MediaElementSource from the video element to AudioContext.\n            audioStore.deferAudioSetup = false;\n            audioStore.ensureAudioContextAndNodesReady(videoJs).then(function () {\n              // Only attempt to play the video after ensuring the AudioContext is ready\n              videoJs.play()[\"catch\"](function (error) {\n                (0,_Stores_NotificationStore__WEBPACK_IMPORTED_MODULE_9__.useNotificationStore)().setGeneralServiceNotification('Error', 'Playback initiation error: ' + error);\n                console.error('Playback initiation error: ', error);\n              });\n\n              // Consider toggling mute based on the user's preference or previous state\n              videoJs.muted(false);\n              _this7.muted = false;\n            });\n          });\n        }\n      } catch (error) {\n        // Log the error or perform any other error handling\n        (0,_Stores_NotificationStore__WEBPACK_IMPORTED_MODULE_9__.useNotificationStore)().setGeneralServiceNotification('Error', 'Error loading new video: ' + error);\n        console.error('Error loading new video: ', error);\n      }\n    },\n    // loadNewVideo(source) {\n    //     console.log('LOAD NEW VIDEO TTTTTTTTTTTTTTTTTTTTTTTTTS');\n    //     console.log('LOAD NEW VIDEO initiated with source:', source);\n    //     const audioStore = useAudioStore();\n    //     this.unMute();\n    //     // Destructure the returned object to get videoSrc and videoSourceType\n    //     const { videoSrc, videoSourceType } = this.getSourceDetails(source);\n    //     console.log(`Video source details received: Src - ${videoSrc}, Type - ${videoSourceType}`);\n    //\n    //     // Ensure you're using the same player instance (`videoJs` in this context) for consistency\n    //     let videoJs = videojs('aux-player'); // Ensure this ID matches your video player element\n    //     console.log('Video.js player instance created or retrieved.');\n    //\n    //     // Stop and clean up the current video and audio setup if necessary\n    //     videoJs.ready(() => {\n    //         console.log('Video.js player is ready.');\n    //         videoJs.src({ 'src': videoSrc, 'type': videoSourceType });\n    //         console.log(`Video source set: ${videoSrc} of type ${videoSourceType}`);\n    //\n    //         // Ensure AudioContext and nodes are ready\n    //         audioStore.ensureAudioContextAndNodesReady(videoJs).then(() => {\n    //             console.log('Audio context and nodes are ready. Attempting to play video.');\n    //\n    //             videoJs.play().then(() => {\n    //                 console.log('Video playback started successfully.');\n    //             }).catch(error => {\n    //                 console.error('Playback initiation error:', error);\n    //             });\n    //             // Attempt to play the video after ensuring the AudioContext is ready\n    //             // videoJs.play().catch(error => {\n    //             //     console.error('Playback initiation error:', error);\n    //             // });\n    //\n    //             // Apply the unMute logic from loadMistStreamVideo to ensure audio is correctly configured\n    //             this.unMute();\n    //             console.log('Audio unmuted.');\n    //             this.paused = false;\n    //             console.log('Paused flag set to false.');\n    //         }).catch(error => {\n    //             console.error('Error ensuring audio context and nodes are ready:', error);\n    //         });\n    //     });\n    // },\n    playNewVideo: function playNewVideo() {\n      var _this8 = this;\n      console.log('PLAY NEW VIDEO');\n      if (this.player) {\n        // Wait for the video to be ready before playing\n        this.player.ready(function () {\n          _this8.player.play();\n          // Assuming you want to unmute here; check if this aligns with user interaction policies\n          _this8.player.muted(false);\n          _this8.muted = false;\n        });\n      }\n    },\n    // load video from different types of sources:\n    // Url\n    // YouTube\n    // EmbedCode\n    // Mist\n    // File\n    loadNewSourceFromYouTube: function loadNewSourceFromYouTube(source) {\n      this.videoIsYoutube = true;\n      (0,_Stores_ChannelStore__WEBPACK_IMPORTED_MODULE_3__.useChannelStore)().clearChannel();\n      var videoJs = (0,video_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"])('aux-player');\n      this.videoSource = source;\n      this.videoSourceType = 'video/youtube';\n      videoJs.src({\n        'src': this.videoSource,\n        'type': this.videoSourceType\n      });\n      videoJs.controls(false);\n      this.unMute();\n      this.paused = false;\n    },\n    loadNewLiveSourceFromRumble: function loadNewLiveSourceFromRumble(source) {\n      this.videoIsYoutube = true;\n      (0,_Stores_ChannelStore__WEBPACK_IMPORTED_MODULE_3__.useChannelStore)().clearChannel();\n      var videoJs = (0,video_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"])('aux-player');\n      this.videoSource = source;\n      this.videoSourceType = 'application/x-mpegURL';\n      videoJs.src({\n        'src': this.videoSource,\n        'type': this.videoSourceType\n      });\n      videoJs.controls(false);\n      this.unMute();\n      this.paused = false;\n    },\n    loadNewSourceFromUrl: function loadNewSourceFromUrl(source) {\n      try {\n        this.videoIsYoutube = false;\n        (0,_Stores_ChannelStore__WEBPACK_IMPORTED_MODULE_3__.useChannelStore)().clearChannel();\n        var videoJs = (0,video_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"])('aux-player');\n        if (!source.video_url || !source.type) {\n          (0,_Stores_NotificationStore__WEBPACK_IMPORTED_MODULE_9__.useNotificationStore)().setGeneralServiceNotification('Error', 'Invalid video source.');\n          throw new Error(\"Invalid video source.\");\n        }\n        this.videoSource = source.video_url;\n        this.videoSourceType = source.type;\n        videoJs.src({\n          'src': source.video_url,\n          'type': source.type\n        });\n        this.unMute();\n        this.paused = false;\n      } catch (error) {\n        (0,_Stores_NotificationStore__WEBPACK_IMPORTED_MODULE_9__.useNotificationStore)().setGeneralServiceNotification('Error', 'Failed to load new source: ' + error);\n        console.error(\"Failed to load new source:\", error);\n        throw error; // Re-throw the error to be caught by the caller\n      }\n    },\n    loadNewSourceFromMist: function loadNewSourceFromMist(source) {\n      this.videoIsYoutube = false;\n      var videoJs = (0,video_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"])('aux-player');\n      var filePath = 'https://mist.not.tv/hls/';\n      this.videoSource = filePath + source + '/index.m3u8';\n      this.videoSourceType = 'application/x-mpegURL';\n      videoJs.src({\n        'src': this.videoSource,\n        'type': this.videoSourceType\n      });\n      this.unMute();\n      this.paused = false;\n    },\n    loadNewSourceFromFile: function loadNewSourceFromFile(source) {\n      this.videoIsYoutube = false;\n      (0,_Stores_ChannelStore__WEBPACK_IMPORTED_MODULE_3__.useChannelStore)().clearChannel();\n      var videoJs = (0,video_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"])('aux-player');\n      var filePath = source.cdn_endpoint + source.cloud_folder + source.folder + '/';\n      this.videoSource = source.file_name;\n      this.videoSourceType = source.type;\n      videoJs.src({\n        'src': filePath + this.videoSource,\n        'type': this.videoSourceType\n      });\n      this.unMute();\n      this.paused = false;\n    },\n    // The new load video functions (2024-02-09 tec21 and ChatGPT)\n    loadExternalSourceVideo: function loadExternalSourceVideo() {},\n    loadPlaylistVideos: function loadPlaylistVideos() {},\n    loadMistStreamVideo: function loadMistStreamVideo(mistStream) {\n      var _this9 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var basePath, videoJs;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              if (_this9.mistServerUri) {\n                _context3.next = 4;\n                break;\n              }\n              console.log('Mist Server URI not set, fetching...'); // Log fetching attempt\n              _context3.next = 4;\n              return _this9.getMistServerUri();\n            case 4:\n              if (_this9.mistServerUri) {\n                // console.log('Mist Server URI:', this.mistServerUri); // Log the URI to confirm it's fetched\n                basePath = _this9.mistServerUri;\n                _this9.videoSource = basePath + 'hls/' + mistStream.name + '/index.m3u8';\n                // console.log('Video Source Set To:', this.videoSource); // Log the final video source\n\n                _this9.videoSourceType = 'application/vnd.apple.mpegURL';\n                // console.log('Setting player source to:', this.videoSource, 'of type:', this.videoSourceType); // Log the source setting\n                videoJs = (0,video_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"])('aux-player');\n                videoJs.src({\n                  'src': _this9.videoSource,\n                  'type': _this9.videoSourceType\n                });\n                _this9.unMute();\n                _this9.paused = false;\n              } else {\n                console.error('Mist Server URI is still not set after fetching.');\n              }\n              // let basePath = this.mistServerUri\n              // this.videoSource = basePath + 'hls/' + mistStream.name + '/index.m3u8'\n              // this.videoSourceType = \"application/vnd.apple.mpegURL\"\n              // this.player.src({'src': this.videoSource, 'type': this.videoSourceType})\n              // this.unMute()\n              // this.paused = false\n            case 5:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3);\n      }))();\n    },\n    loadVideoFromFile: function loadVideoFromFile(video) {\n      var _this10 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var videoSource, videoJs;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              // console.log('Loading Mist Stream Video for:', mistStream.name); // Log which Mist Stream is being loaded\n              // This mistServerUri comes from appSettings\n              // if (!this.mistServerUri) {\n              //     console.log('Mist Server URI not set, fetching...') // Log fetching attempt\n              //     await this.getMistServerUri()\n              // }\n              // if (this.mistServerUri) {\n              // console.log('Mist Server URI:', this.mistServerUri); // Log the URI to confirm it's fetched\n              // let basePath = this.mistServerUri\n              // this.videoSource = basePath + 'hls/' + video.name + '/index.m3u8'\n              // console.log('Video Source Set To:', this.videoSource); // Log the final video source\n\n              // this.videoSourceType = 'video/mp4'\n              console.log('Video Source Type:', video.type);\n              console.log('Video URL:', video.video_url);\n              console.log('CDN Endpoint:', video.cdn_endpoint);\n              console.log('Cloud Folder:', video.cloud_folder);\n              console.log('Folder:', video.folder);\n              console.log('File Name:', video.file_name);\n              videoSource = video.cdn_endpoint + video.cloud_folder + video.folder + '/' + video.file_name; // console.log('Setting player source to:', this.videoSource, 'of type:', this.videoSourceType); // Log the source setting\n              videoJs = (0,video_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"])('aux-player');\n              videoJs.src({\n                'src': videoSource,\n                'type': video.type\n              });\n              _this10.unMute();\n              _this10.paused = false;\n              // } else {\n              //     console.error('Mist Server URI is still not set after fetching.')\n              // }\n              // let basePath = this.mistServerUri\n              // this.videoSource = basePath + 'hls/' + mistStream.name + '/index.m3u8'\n              // this.videoSourceType = \"application/vnd.apple.mpegURL\"\n              // this.player.src({'src': this.videoSource, 'type': this.videoSourceType})\n              // this.unMute()\n              // this.paused = false\n            case 11:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4);\n      }))();\n    },\n    setNowPlayingInfoVideoFile: function setNowPlayingInfoVideoFile(source) {\n      this.nowPlayingType = 'Video File';\n      this.nowPlayingName = source.file_name;\n      (0,_Stores_StreamStore__WEBPACK_IMPORTED_MODULE_1__.useStreamStore)().currentChannel = 'On Demand';\n    },\n    setNowPlayingInfoShow: function setNowPlayingInfoShow(show, episode) {\n      this.clearNowPlayingInfo();\n      var showStore = (0,_Stores_ShowStore__WEBPACK_IMPORTED_MODULE_4__.useShowStore)();\n      if (show.firstPlayVideo) {\n        showStore.setName(show.firstPlayVideo.name);\n        showStore.setEpisodeUrl(\"/shows/\".concat(show.slug, \"/episode/\").concat(source.firstPlayVideo.slug));\n      } else if (episode) {\n        showStore.setName(show.name);\n        showStore.setUrl(\"/shows/\".concat(show.slug));\n        showStore.setEpisodeName(episode.name);\n        showStore.setEpisodeUrl(\"/shows/\".concat(show.slug, \"/episode/\").concat(episode.slug));\n      } else {\n        showStore.setName(show.name);\n        showStore.setUrl(\"/shows/\".concat(show.slug));\n      }\n    },\n    // change video size/position and page layout\n    makeVideoPiP: function makeVideoPiP() {\n      // const appSettingStore = useAppSettingStore();\n      // const userStore = useUserStore();\n      //\n      // if (userStore.isMobile) {\n      //     let videoJs = videojs('aux-player')\n      //     videoJs.controls(false)\n      //     if(this.fullPage) {\n      //         this.class = 'pipVideoClassFullPage'\n      //         this.videoContainerClass = 'pipVideoContainerFullPage'\n      //     } else {\n      //         this.class = 'pipVideoClassTopRight'\n      //         this.videoContainerClass = 'pipVideoContainerTopRight'\n      //     }\n      //     appSettingStore.togglePipChatMode()\n      // }\n    },\n    makeVideoFullPage: function makeVideoFullPage() {\n      var appSettingStore = (0,_Stores_AppSettingStore__WEBPACK_IMPORTED_MODULE_0__.useAppSettingStore)();\n      var userStore = (0,_Stores_UserStore__WEBPACK_IMPORTED_MODULE_2__.useUserStore)();\n\n      // this.fullPage = true; // to be deleted and replaced by appSettingStore.fullPage\n      appSettingStore.fullPage = true;\n      // userStore.hidePage = true // to be deleted and replaced by appSettingStore.hidePage\n      appSettingStore.hidePage = true;\n      appSettingStore.ott = 0;\n      this.videoContainerClass = 'fullPageVideoContainer';\n      this[\"class\"] = 'fullPageVideoClass';\n      this.controls = !userStore.isMobile;\n    },\n    makeVideoTopRight: function makeVideoTopRight() {\n      var appSettingStore = (0,_Stores_AppSettingStore__WEBPACK_IMPORTED_MODULE_0__.useAppSettingStore)();\n\n      // this.fullPage = false // to be deleted and replaced by appSettingStore.fullPage\n      appSettingStore.fullPage = false;\n      // userStore.hidePage = false // to be deleted and replaced by appSettingStore.hidePage\n      appSettingStore.hidePage = false;\n      // this.currentPageIsStream = false // to be deleted and replaced by appSettingStore.currentPageIsStream\n      appSettingStore.currentPageIsStream = false;\n      this.videoContainerClass = 'topRightVideoContainer';\n      this[\"class\"] = 'topRightVideoClass';\n      this.controls = false;\n    },\n    makeVideoWelcomePage: function makeVideoWelcomePage() {\n      var appSettingStore = (0,_Stores_AppSettingStore__WEBPACK_IMPORTED_MODULE_0__.useAppSettingStore)();\n      this.videoContainerClass = 'welcomeVideoContainer';\n      this[\"class\"] = 'welcomeVideoClass';\n      appSettingStore.loggedIn = false;\n      appSettingStore.fullPage = true;\n      appSettingStore.hidePage = false;\n    }\n  },\n  getters: {}\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/Stores/VideoAuxPlayerStore.js\n");

/***/ })

}]);