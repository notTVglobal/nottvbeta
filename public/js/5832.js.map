{"version":3,"file":"js/5832.js","mappings":"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","sources":["webpack:///./resources/js/Utilities/TimeUtils.js","webpack:///./resources/js/Stores/ScheduleStore.js","webpack:///./resources/js/Utilities/PageSetup.js","webpack:///./resources/js/Components/Global/Schedule/ScheduleGridContainer.vue?20b6","webpack:///./resources/js/Components/Global/Modals/Messages.vue?dfe9","webpack:///./resources/js/Components/Global/Modals/Messages.vue","webpack:///./resources/js/Components/Global/Modals/PopUpModal.vue?0d51","webpack:///./resources/js/Components/Global/Modals/PopUpModal.vue","webpack:///./resources/js/Components/Global/Schedule/CurrentTime.vue","webpack:///./resources/js/Components/Global/Schedule/CurrentTime.vue?93a9","webpack:///./resources/js/Components/Global/Schedule/ScheduleGridContainer.vue","webpack:///./resources/js/Utilities/Throttle.js","webpack:///./resources/js/Components/Global/Schedule/ScheduleGridContainer.vue?3341","webpack:///./resources/js/Components/Global/Schedule/ScheduleGridContainer.vue?63d2","webpack:///./resources/js/Pages/Schedule/Index.vue?d7b5","webpack:///./resources/js/Pages/Schedule/Index.vue"],"sourcesContent":["// utilities/timeUtils.js\nimport dayjs from 'dayjs';\nimport utc from 'dayjs/plugin/utc';\nimport timezone from 'dayjs/plugin/timezone';\n\ndayjs.extend(utc);\ndayjs.extend(timezone);\n\n/**\n * Creates an array of Date objects representing time slots.\n *\n * This function generates a sequence of time slots starting from a specified\n * start time, continuing for a given number of hours, and spaced apart\n * by a specified interval in minutes.\n *\n * @param {Date} start - The start time from which to generate slots, as a Date object.\n * @param {number} [durationHours=4] - The total duration for which to generate slots, in hours.\n * @param {number} [intervalMinutes=30] - The interval between each slot, in minutes.\n * @param {string} timezone - The timezone in which the time slots will be calculated.\n * @returns {Date[]} An array of Date objects, each representing a time slot.\n *\n * Example:\n * If start is `new Date('2024-01-01T08:00:00Z')`, durationHours is 2, and intervalMinutes is 30,\n * the output will be an array of Date objects representing the times:\n * `08:00`, `08:30`, `09:00`, and `09:30`.\n */\nexport function createTimeSlots(start, durationHours = 4, intervalMinutes = 30, timezone) {\n    // console.log(`Creating time slots starting from ${start}, for ${durationHours} hours, every ${intervalMinutes} minutes in timezone ${timezone}.`);\n    let slots = [];\n    let startTime = dayjs(start).tz(timezone);  // Convert start time to the correct time zone\n    for (let i = 0; i < (durationHours * 60) / intervalMinutes; i++) {\n        let slotTime = startTime.add(i * intervalMinutes, 'minute').toDate();  // Generate slots in the correct time zone\n        slots.push(slotTime);  // Keep as Date object\n    }\n    return slots;\n}\n// export function createTimeSlots(start, durationHours = 4, intervalMinutes = 30) {\n//     let slots = [];\n//     let startTime = dayjs(start).tz(userStore.timezone);  // Convert start time to the correct time zone\n//     for (let i = 0; i < (durationHours * 60) / intervalMinutes; i++) {\n//         let slotTime = new Date(start.getTime() + i * intervalMinutes * 60000);\n//         slots.push(slotTime);  // Keep as Date object\n//     }\n//     return slots;\n// }","import { defineStore } from 'pinia'\nimport { useUserStore } from '@/Stores/UserStore'\nimport { useAppSettingStore } from '@/Stores/AppSettingStore'\nimport { createTimeSlots } from '@/Utilities/TimeUtils'\nimport {\n    format,\n    isToday,\n    isTomorrow,\n    isYesterday,\n    startOfDay,\n} from 'date-fns'\n\n// Import dayjs and its plugins\nimport dayjs from 'dayjs'\nimport isSameOrAfter from 'dayjs/plugin/isSameOrAfter'\nimport isSameOrBefore from 'dayjs/plugin/isSameOrBefore' // To check if the day is the same\nimport timezone from 'dayjs/plugin/timezone'\nimport utc from 'dayjs/plugin/utc'\nimport weekOfYear from 'dayjs/plugin/weekOfYear' // For week start and end calculations\nimport advancedFormat from 'dayjs/plugin/advancedFormat' // For more complex formatting options\n\n// Extend dayjs with the plugins\ndayjs.extend(timezone)\ndayjs.extend(weekOfYear)\ndayjs.extend(advancedFormat)\ndayjs.extend(utc)\ndayjs.extend(isSameOrAfter)\ndayjs.extend(isSameOrBefore)\n\nfunction convertScheduleToTimezone(scheduleData) {\n    const userStore = useUserStore() // Access the UserStore\n\n    return scheduleData.data.map(item => {\n        // Convert top-level start_time and end_time using UserStore methods\n        // console.log(`Original startTime for ${item.id}: ${item.startTime}`)\n        const startTimeInUserTz = item.start_dateTime ? userStore.formatDateTimeFromUtcToUserTimezone(item.start_dateTime, 'YYYY-MM-DD HH:mm:ss') : null\n        const endTimeInUserTz = item.end_dateTime ? userStore.formatDateTimeFromUtcToUserTimezone(item.end_dateTime, 'YYYY-MM-DD HH:mm:ss') : null\n        // Add debug logging to help trace conversion issues or confirm correct conversions\n        // console.log(`Converted startTime for ${item.id}: ${startTimeInUserTz}`)\n\n        return {\n            ...item,\n            start_dateTime: startTimeInUserTz,\n            end_dateTime: endTimeInUserTz,\n            timezone: userStore.timezone,\n        }\n    })\n}\n\n// Helper function to get dates within the next 6 hours from viewingWindowStart\nfunction getUpcomingContentDates(viewingWindowStart) {\n    let dates = []\n    let start = dayjs(viewingWindowStart) // Ensure viewingWindowStart is a Day.js object\n\n    for (let i = 0; i < 6; i++) {\n        // Add i hours to the start time, each time creating a new Day.js object\n        dates.push(start.add(i, 'hour').toDate()) // Convert to Date if necessary; otherwise keep as Day.js object\n    }\n    // console.log(1)\n    return dates\n\n}\n\nconst getTimeZone = () => {\n    const userStore = useUserStore()\n    // This function should return the timezone of the user.\n    // This could be dynamic based on the user's settings or browser settings.\n    // return Intl.DateTimeFormat().resolvedOptions().timeZone;\n    // console.log(2)\n    return userStore.timezone\n}\n\nconst initialState = () => ({\n    baseTime: dayjs().tz(getTimeZone()),\n    currentHalfHour: dayjs().tz(getTimeZone()).startOf('hour').add(dayjs().minute() >= 30 ? 30 : 0, 'minute'),\n    fourHoursLater: dayjs().tz(getTimeZone()).startOf('hour').add(dayjs().minute() >= 30 ? 30 : 0, 'minute').add(4, 'hour'),\n    viewingWindowStart: dayjs().tz(getTimeZone()).startOf('hour'),\n    currentMonth: dayjs().tz(getTimeZone()).startOf('month'),\n    selectedDay: dayjs().tz(getTimeZone()),\n    currentWeekStart: dayjs().tz(getTimeZone()).startOf('week'),\n    currentWeekEnd: dayjs().tz(getTimeZone()).endOf('week'),\n    nextFourHoursOfContent: [],\n    nextFourHoursOfContentWithPlaceholders: [],\n    // nextFourHoursWithHalfHourIntervals: [],\n    // viewingMode: 'automatic', // or 'userSelected'\n    fiveDaySixHourSchedule: [], // Holds the schedule shows 5 day / 6 hour structured data\n    schedules: [], // this is our new schedules array, storing fetched schedule data\n    isLoading: true, // This flag indicates if data is currently being fetched\n    nextPage: 1, // This keeps track of the next page to fetch for pagination\n    hasMore: true, // This flag indicates if there are more schedules to fetch\n    todaysContent: [],\n    weeklyContent: [],\n    dataFetchLog: [],\n    savingToSchedule: false,\n    slotIntervalMinutes: 30,\n    mediumScreenSlotHours: 4, // 4 hours = 8 slots\n    smallScreenSlotHours: 2, // 2 hours = 4 slots\n    verySmallScreenSlotHours: 1, // 1 hour = 2 slots\n    timeSlots: [],\n    timeBanners: [\n        {id: 1, name: 'Early Morning', startTime: '04:00', duration: 2},\n        {id: 2, name: 'Morning', startTime: '06:00', duration: 6},\n        {id: 3, name: 'Afternoon', startTime: '12:00', duration: 5},\n        {id: 4, name: 'Prime Time', startTime: '17:00', duration: 3},\n        {id: 5, name: 'Late Prime Time', startTime: '20:00', duration: 3},\n        {id: 6, name: 'Late Night', startTime: '23:00', duration: 2}, // Spans midnight to 01:00\n        {id: 7, name: 'Overnight', startTime: '01:00', duration: 3}, // Spans from 01:00 to 04:00\n    ],\n})\n\nexport const useScheduleStore = defineStore('scheduleStore', {\n    state: initialState,\n    actions: {\n        resetAll() {\n            // Reset the store to its original state (clear all data)\n            Object.assign(this, initialState())\n            // console.log(3)\n        },\n        reset() {\n            this.baseTime = dayjs().tz(getTimeZone())\n            this.viewingWindowStart = dayjs().tz(getTimeZone()).startOf('hour')\n            this.currentMonth = dayjs().tz(getTimeZone()).startOf('month')\n            this.selectedDay = dayjs().tz(getTimeZone())\n            // console.log(4)\n        },\n        async setSelectedDay(day) {\n            // Ensure that 'day' is a Day.js object, convert if coming as a native Date or string\n            const selectedDay = dayjs(day)\n\n            // Set the selected day\n            this.selectedDay = selectedDay.toDate() // Convert back to Date if necessary; otherwise keep as Day.js object\n\n            // Explicitly set the viewingWindowStart to 4 AM for the selected day\n            this.viewingWindowStart = selectedDay.startOf('day').add(4, 'hours').toDate()\n\n            // Set the start and end of the week based on the selected day\n            this.currentWeekStart = selectedDay.startOf('week').toDate() // Consider week starting on Sunday\n            this.currentWeekEnd = selectedDay.endOf('week').toDate() // Consider week ending on Saturday\n\n            // Use the updated fetch logic\n            await this.fetchWeekDataIfNeeded()\n            // console.log(5)\n        },\n        setSelectedDayToToday(day) {\n            const now = dayjs()  // Create a Day.js object for the current date and time\n\n            // Set selectedDay to the current date and time\n            this.selectedDay = now.toDate() // Convert back to Date if necessary; otherwise keep as Day.js object\n\n            // Set viewingWindowStart to the start of the current hour using Day.js\n            this.viewingWindowStart = now.startOf('hour').toDate()\n            // console.log(6)\n        },\n        async changeDay(days) {\n            const currentTimeZone = getTimeZone() // or however you obtain the timezone\n            // Extract the time component from the current viewing window start\n            const currentTime = dayjs(this.viewingWindowStart).hour() * 60 + dayjs(this.viewingWindowStart).minute()\n\n            // Create a new day and set it to the start of that day\n            let newDay = dayjs(this.viewingWindowStart).tz(currentTimeZone).add(days, 'day').startOf('day')\n\n            // Set the time back to the original time\n            newDay = newDay.add(currentTime, 'minute')\n\n            // Depending on your application's needs, you may or may not need to convert it back to a JavaScript Date object\n            // If you need a Date object:\n            this.viewingWindowStart = newDay.toDate()\n\n            // If you can use dayjs objects directly (preferred if possible):\n            this.viewingWindowStart = newDay\n\n            // // Check if the week of the new day is already loaded\n            // const weekStart = startOfWeek(newDay, {weekStartsOn: 0});\n            // const weekEnd = endOfWeek(newDay, {weekStartsOn: 0});\n\n            // Use the updated centralized fetch logic without redundant checks\n            await this.fetchWeekDataIfNeeded()\n\n            // // Check for the need to load data for the new week\n            // if (this.needsDataForWeek(weekStart, weekEnd)) {\n            //     await this.loadWeekFromDate(newDay).catch(error => {\n            //         console.error(\"Failed to load data for the new week:\", error);\n            //     });\n            // }\n\n            // // Check for the need to load data for the new week\n            // if (!this.needsDataForWeek()) {\n            //     // Data for the current week has already been loaded; skip fetching\n            //     console.log(\"Data for the current week has already been loaded; skipping redundant fetch.\");\n            //     return;\n            // }\n            //\n            // // Proceed with data fetching if needed\n            // await this.checkAndFetchForUpcomingContent();\n            // console.log(7)\n        },\n        async shiftHours(hours) {\n            // Shift the viewing window by the specified number of hours\n            this.viewingWindowStart = dayjs(this.viewingWindowStart).add(hours, 'hour').toDate()\n\n            // Set the current week start and end based on the new viewing window start\n            this.currentWeekStart = dayjs(this.viewingWindowStart).startOf('week').toDate()\n            this.currentWeekEnd = dayjs(this.viewingWindowStart).endOf('week').toDate()\n\n            // If the day has changed, update selectedDay and the week's range\n            if (!dayjs(this.viewingWindowStart).isSame(dayjs(this.selectedDay), 'day')) {\n                this.selectedDay = dayjs(this.viewingWindowStart).startOf('day').toDate()\n            }\n\n            // Use the updated fetch logic\n            await this.fetchWeekDataIfNeeded()\n            // console.log(8)\n        },\n        isElevenPM(date) {\n            // Convert the date to a Day.js object if it's not already one\n            const time = dayjs(date)\n            // Check if the hour is 23 (11 PM)\n            // console.log(9)\n            return time.hour() === 23\n\n        },\n        // Actions to change the month\n        async subtractMonth() {\n            // Convert currentMonth to a Day.js object if it's not already and subtract one month\n            this.currentMonth = dayjs(this.currentMonth).subtract(1, 'month').toDate()\n\n            try {\n                // Pass the new currentMonth to setSelectedDay\n                await this.setSelectedDay(this.currentMonth)\n                // console.log('Set selected day based on current month:', this.currentMonth)\n            } catch (error) {\n                console.error(`Failed to set selected day based on current month ${this.currentMonth}:`, error)\n            }\n            // console.log(10)\n        },\n        async addMonth() {\n            // Convert currentMonth to a Day.js object if it's not already and add one month\n            this.currentMonth = dayjs(this.currentMonth).add(1, 'month').toDate()\n\n            try {\n                // Pass the new currentMonth to setSelectedDay\n                await this.setSelectedDay(this.currentMonth)\n                // console.log('Set selected day based on current month:', this.currentMonth)\n            } catch (error) {\n                console.error(`Failed to set selected day based on current month ${this.currentMonth}:`, error)\n            }\n            // console.log(11)\n        },\n        async fetchFiveDaySixHourSchedule() {\n            console.error('fetchFiveDaySixHourSchedule')\n            try {\n                const userStore = useUserStore()\n                const response = await axios.get('/api/schedule')\n\n                // Fallback to response timezone if userStore.timezone is not set\n                const timezone = userStore.timezone || response.data.userTimezone || 'UTC' // Additional fallback to 'UTC'\n\n                // Convert the entire schedule, including nested recurrenceDetails, to the user's timezone\n                this.fiveDaySixHourSchedule = convertScheduleToTimezone(response.data, timezone)\n                // console.error('fetchFiveDaySixHourSchedule', response.data)\n            } catch (error) {\n                console.error('Failed to load schedule shows:', error)\n                // Handle the error state as needed, e.g., setting an error state property\n            }\n            // console.log(12)\n        },\n        async fetchTodaysContent() {\n            try {\n                const userStore = useUserStore()\n                const response = await axios.get('/api/schedule/today')\n\n                // Fallback to response timezone if userStore.timezone is not set\n                const timezone = userStore.timezone || response.data.userTimezone || 'UTC' // Additional fallback to 'UTC'\n\n                this.todaysContent = convertScheduleToTimezone(response.data, timezone)\n            } catch (error) {\n                console.error('Failed to fetch today\\'s content:', error)\n            }\n            // console.log(13)\n        },\n        async preloadWeeklyContent() {\n            console.log('preloading weekly content...')\n            // Use the current date to preload content for the current week\n            const currentDate = dayjs(this.baseTime) // Creates a Day.js object representing the current date and time\n\n            try {\n                // Call loadWeekFromDate with the current Day.js date object\n                await this.loadWeekFromDate(currentDate) // loadWeekFromDate uses dayjs\n            } catch (error) {\n                console.error('Failed to preload weekly content:', error)\n            }\n            // console.log(14)\n        },\n        // this is our new fetch schedules method.\n        async fetchSchedules(startDate, endDate) {\n            this.isLoading = true\n            console.log(`Loading schedule between: ${startDate} and ${endDate}`) // Log the date being requested\n            try {\n                const userStore = useUserStore()\n                const dayStartDate = dayjs(startDate)\n                const dayEndDate = dayjs(endDate)\n                const fullISOStartDate = dayStartDate.toISOString()\n                const fullISOEndDate = dayEndDate.toISOString()\n\n                const response = await axios.get(`/api/schedules/range?start=${fullISOStartDate}&end=${fullISOEndDate}`)\n\n                // const formattedStartDate = dayStartDate.format('YYYY-MM-DD') // For potential error messages and logging\n                // const formattedEndDate = dayEndDate.format('YYYY-MM-DD') // For potential error messages and logging\n                // console.log(`Loading schedule between: ${formattedStartDate} and ${formattedEndDate}`) // Log the date being requested\n                console.log('Received response:', response.data) // Log the raw response data\n\n                // Fallback to response timezone if userStore.timezone is not set\n                const timezone = userStore.timezone || response.data.userTimezone\n\n                const newData = convertScheduleToTimezone(response.data, timezone) // Ensure you are accessing the correct data property from the response\n\n                // Merge newData into schedules, avoiding duplicates\n                // this.schedules = [...this.schedules, ...newData].filter((value, index, self) =>\n                //         index === self.findIndex((t) => (\n                //             t.id === value.id && t.startTime === value.startTime\n                //         )),\n                // )\n                // Merge newData into schedules, avoiding duplicates\n                this.schedules = [...new Set([...this.schedules, ...newData].map(item => JSON.stringify(item)))].map(item => JSON.parse(item));\n                // console.log('Updated schedules:', this.schedules); // Log the updated schedules\n\n                // Optionally update fetch logs or perform additional state updates\n                // this.updateFetchLogs(startDate) // this was designed to just log a week fetching at a time.\n\n            } catch (error) {\n                console.error('Failed to fetch schedules:', error)\n                this.isLoading = false\n                // console.log('012')\n            } finally {\n                this.isLoading = false\n                // console.log('Schedule loaded!')\n            }\n        },\n\n        async fetchMoreSchedules() {\n            // Prevent fetching if already loading or if there are no more schedules to fetch\n            if (this.isLoading || !this.hasMore) return;\n\n            this.isLoading = true;\n            console.log('Fetching more schedules...');\n            try {\n                const lastSchedule = this.schedules[this.schedules.length - 1];\n                const startDate = lastSchedule ? dayjs(lastSchedule.start_dateTime).format('YYYY-MM-DD') : dayjs().format('YYYY-MM-DD');\n                const endDate = dayjs(startDate).add(7, 'day').format('YYYY-MM-DD'); // Fetch the next 7 days\n\n                await this.fetchSchedules(startDate, endDate);\n\n                // Check if new schedules were added\n                const newSchedules = this.schedules.slice(this.schedules.length - 1);\n                // If no new schedules are fetched, set hasMore to false\n                if (newSchedules.length === 0) {\n                    this.hasMore = false;\n                } else {\n                    // Increment the next page number for future fetches\n                    this.nextPage += 1;\n                }\n            } catch (error) {\n                console.error('Failed to fetch more schedules:', error);\n            } finally {\n                this.isLoading = false;\n            }\n        },\n\n        async loadWeekFromDate(date) {\n            let formattedDate = null // Declare formattedDate outside of the try block\n            this.isLoading = true\n            console.log('Loading week from date...')\n            try {\n                const userStore = useUserStore()\n                // Ensure the date is in UTC format for the request\n                // console.log('Date before formatted: ' + date)\n                // Convert date to Day.js object and format it in ISO string with UTC\n                const dayDate = dayjs(date)\n                const fullISODate = dayDate.toISOString()\n                // console.log(`Loading week data for date in UTC: ${fullISODate}`)\n\n                // Fetch the week's schedule data\n                // Send the dateTime and timezone as a JSON object in a POST request\n                const response = await axios.post(`/api/schedule/week/${fullISODate}`)\n\n                // const formattedDate = date.toISOString().split('T')[0];\n                // Log and error handling\n                const formattedDate = dayDate.format('YYYY-MM-DD') // For potential error messages and logging\n                // console.log(`Loading week data for date: ${formattedDate}`) // Log the date being requested\n                //\n                // const response = await axios.get(`/api/schedule/week/${formattedDate}`);\n                // console.log('Received response:', response.data) // Log the raw response data\n\n                // Fallback to response timezone if userStore.timezone is not set\n                const timezone = userStore.timezone || response.data.userTimezone\n                // console.log(`Using timezone: ${timezone}`) // Log the timezone being used\n\n                const newData = convertScheduleToTimezone(response.data, timezone) // Ensure you are accessing the correct data property from the response\n\n                // Merge newData into weeklyContent, avoiding duplicates\n                this.weeklyContent = [...this.weeklyContent, ...newData].filter((value, index, self) =>\n                        index === self.findIndex((t) => (\n                            t.id === value.id && t.start_dateTime === value.start_dateTime\n                        )),\n                )\n\n                // console.log('Updated weeklyContent:', this.weeklyContent) // Log the updated weekly content\n\n                // Optionally update fetch logs or perform additional state updates\n                this.updateFetchLogs(date)\n\n                this.isLoading = false\n                // console.log('Week from date loaded!')\n            } catch (error) {\n                console.error(`Failed to load content for week starting ${formattedDate}:`, error)\n                this.isLoading = false\n                // console.log('002')\n            }\n            // console.log(15)\n            // console.log('End of loadWeekFromDate function')\n        },\n        updateFetchLogs(date) {\n            // Convert date to a Day.js object if it's not already one\n            const dayDate = dayjs(date)\n\n            // Use Day.js to calculate the start and end of the week\n            const weekStart = dayDate.startOf('week').toISOString() // Assumes the week starts on Sunday\n            const weekEnd = dayDate.endOf('week').toISOString() // Assumes the week ends on Saturday\n            const fetchTime = dayjs().toISOString() // Current time in ISO format\n\n            // Find existing log entry for the week\n            const existingLogIndex = this.dataFetchLog.findIndex(log =>\n                log.weekStart === weekStart && log.weekEnd === weekEnd)\n\n            if (existingLogIndex !== -1) {\n                // Update the last fetch time if the log already exists\n                this.dataFetchLog[existingLogIndex].lastFetch = fetchTime\n            } else {\n                // Add a new log entry if it does not exist\n                this.dataFetchLog.push({weekStart, weekEnd, lastFetch: fetchTime})\n            }\n            // console.log(16)\n        },\n        needsDataForWeek() {\n            // Helper function to format dates to 'YYYY-MM-DD' for easier comparison\n            const formatISODate = (date) => dayjs(date).format('YYYY-MM-DD')\n\n            // Current week range in 'YYYY-MM-DD' format\n            const weekStartStr = formatISODate(this.currentWeekStart)\n            const weekEndStr = formatISODate(this.currentWeekEnd)\n\n            // Enhanced logging for debugging\n            // console.log(`Current week range: ${weekStartStr} to ${weekEndStr}`)\n            // console.log('Existing data fetch log entries:', this.dataFetchLog)\n\n            // Iterate through the fetch log to check if the current week has been fetched\n            const weekHasBeenFetched = this.dataFetchLog.some(log => {\n                // Convert log dates to 'YYYY-MM-DD' format for comparison\n                const logWeekStartStr = formatISODate(log.weekStart)\n                const logWeekEndStr = formatISODate(log.weekEnd)\n\n                // Log each comparison for insight\n                // console.log(`Comparing to fetched range: ${logWeekStartStr} to ${logWeekEndStr}`)\n\n                return logWeekStartStr <= weekStartStr && logWeekEndStr >= weekEndStr\n            })\n\n            // Log the final determination\n            // console.log(`Week from ${weekStartStr} to ${weekEndStr} has ${weekHasBeenFetched ? '' : 'not '}been fetched.`)\n            // console.log(17)\n            return !weekHasBeenFetched\n        },\n        calculateExtendedEndForUpcomingContent() {\n            // Convert viewingWindowStart to a Day.js object if it's not already one\n            const baseStartTime = dayjs(this.viewingWindowStart)\n\n            // Extend by 6 hours to cover the upcoming content span\n            // Day.js handles date and time addition cleanly, returning a new Day.js object\n            const extendedEndTime = baseStartTime.add(6, 'hour')\n\n            // console.log(18)\n            // Return the extended end time as a Date object, if needed elsewhere as a Date\n            return extendedEndTime.toDate()\n        },\n        // Function to check for and fetch missing upcoming content\n        async checkAndFetchForUpcomingContent() {\n            const upcomingDates = getUpcomingContentDates(this.viewingWindowStart) // Assuming this returns Day.js objects\n            const now = dayjs()\n            const fifteenMinutesAgo = now.subtract(15, 'minutes')\n\n            for (const date of upcomingDates) {\n                const dateString = date.format('YYYY-MM-DD')  // Day.js format for 'YYYY-MM-DD'\n                const contentCoverageAndFreshness = this.weeklyContent.some(content => {\n                    const contentDate = dayjs(content.start_dateTime).format('YYYY-MM-DD')  // Convert and compare as 'YYYY-MM-DD'\n                    const lastFetchedTime = this.dataFetchLog[dateString]\n                    const isFresh = lastFetchedTime && dayjs(lastFetchedTime) > fifteenMinutesAgo\n                    return dateString === contentDate && isFresh\n                })\n\n                if (!contentCoverageAndFreshness) {\n                    // This date needs data fetching\n                    await this.fetchDataAndUpdateLog(dateString, date.toDate()) // Pass as Date if needed, or adjust downstream functions to accept Day.js objects\n                    break // Assuming you fetch data for the week, so no need to check further dates within the same week\n                }\n            }\n            // console.log(19)\n        },\n        async fetchDataAndUpdateLog(dateString, date) {\n            try {\n                // Assuming 'date' is already a Day.js object; if not, convert it\n                const dayDate = dayjs(date)\n\n                await this.loadWeekFromDate(dayDate.toDate())  // Pass as a Date if needed, or adjust 'loadWeekFromDate' to accept Day.js objects\n                // Successfully fetched, so update the log\n                this.dataFetchLog[dateString] = dayjs().toISOString()  // Use Day.js to get the current time in ISO format\n                // console.log('Data fetched successfully for date:', dateString)\n            } catch (error) {\n                console.error(`Failed to fetch data for date ${dateString}:`, error)\n            }\n            // console.log(20)\n        },\n\n        // Updated to use this.currentWeekStart and this.currentWeekEnd directly\n        async fetchWeekDataIfNeeded() {\n            // Assumes this.currentWeekStart and this.currentWeekEnd are already set\n            if (this.needsDataForWeek()) {\n                await this.checkAndFetchForUpcomingContent().catch(error => {\n                    console.error('Failed to load data for the week:', error)\n                    return false // Indicates failure to fetch when an error occurs\n                })\n            } else {\n                console.log('Week data already loaded; no need to fetch.')\n            }\n            // console.log(21)\n        },\n\n        // Function to simply update baseTime with the given time (expected to be a Day.js object or compatible input)\n        updateBaseTime(time) {\n            // Ensure the time is a Day.js object when setting baseTime\n            this.baseTime = dayjs(time).toDate()  // Convert to Date if necessary; consider keeping it as Day.js object if possible\n            // console.log(22)\n        },\n\n        // Function to set baseTime based on a new time input (expected to be a string, Date, etc.)\n        setBaseTime(newTime) {\n            // Convert newTime to a Day.js object and then to Date if necessary\n            this.baseTime = dayjs(newTime).toDate()  // This handles various input formats and ensures consistency\n            // console.log(23)\n        },\n\n\n        /**\n         * This method orchestrates the update of show scheduling data for the next four hours.\n         * It is designed to be triggered when there are changes to the base time or when a manual refresh is needed.\n         * The method handles loading and organizing the scheduling data to be ready for display in the grid.\n         */\n        async updateNextFourHours() {\n            // Set the loading state to true to indicate that data processing is underway.\n            // This can be used to display a loading spinner or disable user interaction temporarily.\n            this.isLoading = true\n\n            // Update the time range for the scheduling grid. This adjusts `currentHalfHour` and `fourHoursLater`\n            // based on the current `baseTime`. These values define the range of time for which shows will be displayed.\n            this.updateTimeRange()\n\n            // Update the time slots\n            this.setTimeSlots()\n\n            // Prepares the shows for the grid display by filtering, calculating grid slots,\n            // resolving conflicts, and optionally filling empty grid slots with placeholders.\n            // This step involves several functions that ensure shows are positioned correctly according to their\n            // start time, duration, and conflicts with other shows.\n            this.prepareShowsForGrid()\n\n            // Reset the loading state to false indicates that the data processing is complete.\n            // This allows the user interface to be interactive again and shows the updated data in the grid.\n            this.isLoading = false\n            // console.log(24)\n        },\n\n\n        updateTimeRange() {\n            // Ensure the baseTime is interpreted correctly in the current user's timezone\n            const baseDate = dayjs(this.baseTime).tz(getTimeZone())\n\n            // Calculate the rounded minutes to either 0 or 30 based on the current time\n            const roundedMinutes = baseDate.minute() < 30 ? 0 : 30\n\n            // Set the current half hour, rounding down to the nearest half-hour mark\n            let currentHalfHour = baseDate.minute(roundedMinutes).second(0).millisecond(0).startOf('minute')\n\n            // Adjust currentHalfHour to start 30 minutes earlier\n            currentHalfHour = currentHalfHour.subtract(30, 'minutes');\n\n            // Calculate four hours later from the current half-hour mark\n            const fourHoursLater = currentHalfHour.add(4, 'hours')\n\n            // Update the store's currentHalfHour and fourHoursLater ensuring they are Date objects if required\n            this.currentHalfHour = currentHalfHour.toDate()\n            this.fourHoursLater = fourHoursLater.toDate()\n            // console.log(25)\n\n            // console.log('Fetching shows between:', currentHalfHour.format('YYYY-MM-DD HH:mm:ss'), 'and', fourHoursLater.format('YYYY-MM-DD HH:mm:ss'))\n        },\n\n        initializeTimeSlots() {\n            this.timeSlots = createTimeSlots()\n        },\n\n        setTimeSlots() {\n            const appSettingStore = useAppSettingStore()\n            let slotHours\n\n            // Determine the number of slot hours based on screen size\n            if (appSettingStore.isVerySmallScreen) {\n                slotHours = this.verySmallScreenSlotHours\n            } else if (appSettingStore.isSmallScreen) {\n                slotHours = this.smallScreenSlotHours\n            } else {\n                slotHours = this.mediumScreenSlotHours\n            }\n\n            const intervalMinutes = this.slotIntervalMinutes\n            const slots = []\n            const totalSlots = (slotHours * 60) / intervalMinutes\n\n            // Ensure state.currentHalfHour is a Day.js object\n            const currentHalfHour = dayjs(this.currentHalfHour)\n\n            // Calculate the time for each slot using Day.js\n            for (let i = 0; i < totalSlots; i++) {\n                let slotTime = currentHalfHour.add(i * intervalMinutes, 'minute')\n                slots.push(slotTime.toDate())  // Convert back to JavaScript Date if necessary\n            }\n            this.timeSlots = slots\n            // console.log(26)\n            return slots.length\n        },\n\n        prepareShowsForGrid() {\n\n            if (!this.timeSlots || !Array.isArray(this.timeSlots) || this.timeSlots.length === 0) {\n                console.error('timeSlots is not properly initialized.')\n                // console.log(27)\n                // Handle this scenario, e.g., by initializing timeSlots, or skipping the update\n                return\n            }\n\n\n            // Step 1: Filter shows within the desired time range\n            const shows = this.filterShowsForTimeRange()\n\n            // Step 2: Calculate initial grid slots for these shows\n            const processedShows = this.calculateGridSlots(shows, this.timeSlots)\n\n            // Step 3: Process shows to set nowPlaying and comingUpNext flags\n            const showsWithStatusFlags = this.processShows(processedShows)\n\n            // Step 4: Update column occupancy and find the maximum row used\n            const {colOccupancy, maxRowUsed} = this.updateColumnOccupancy(showsWithStatusFlags, this.timeSlots.length)\n\n            // Step 5: Fill gaps in the grid with placeholders\n            const gridItems = this.fillGapsAndCreatePlaceholders(colOccupancy, maxRowUsed, this.timeSlots.length)\n\n            // Step 6: Combine processed shows with the placeholders\n            const combinedShows = [...showsWithStatusFlags, ...gridItems]\n\n            // Step 7: Sort and group shows by rows\n            this.nextFourHoursOfContent = this.sortShowsByPosition(combinedShows)\n            console.log(28)\n        },\n\n        filterShowsForTimeRange() {\n            return this.schedules.filter(show => {\n                // Validate show data integrity\n                if (typeof show.start_dateTime !== 'string' || typeof show.duration_minutes !== 'number') {\n                    console.warn('Invalid show data:', show.start_dateTime, show.duration_minutes)\n                    // console.log(29)\n                    return false // Skip this show if it doesn't meet data expectations\n                }\n\n                const showStart = dayjs(show.start_dateTime)\n                const showEnd = dayjs(show.end_dateTime)\n                const isInTimeRange = showStart.isBefore(this.fourHoursLater) && showEnd.isAfter(this.currentHalfHour)\n\n                // Detailed logging for debugging\n                if (isInTimeRange) {\n                    const hasStarted = showStart.isBefore(this.currentHalfHour) ? 'already started' : 'starts within range'\n                    // console.log(`Show: ${show.content.name}, ${hasStarted}, Start: ${showStart.format('HH:mm:ss')}, End: ${showEnd.format('HH:mm:ss')}, Duration: ${show.duration_minutes}`)\n                }\n                // console.log(30)\n                return isInTimeRange\n            })\n        },\n\n        calculateGridSlots(shows, timeSlots) {\n            // Validate the timeSlots array to prevent errors\n            if (!Array.isArray(timeSlots) || timeSlots.length === 0) {\n                console.error('Invalid or empty timeSlots array')\n                // console.log(31)\n                return [] // Exit if no valid time slots to work with\n            }\n\n            // Determine the range of timeSlots\n            const firstTimeSlot = dayjs(timeSlots[0])\n            const lastTimeSlot = dayjs(timeSlots[timeSlots.length - 1]).add(30, 'minutes')\n\n\n            return shows.filter(show => {\n                const showStart = dayjs(show.start_dateTime)\n                const showEnd = dayjs(show.end_dateTime)\n                return showStart.isBefore(lastTimeSlot) && showEnd.isAfter(firstTimeSlot)\n            }).map(show => {\n                const showStart = dayjs(show.start_dateTime)\n                const showEnd = dayjs(show.end_dateTime)\n                // console.log('************************************')\n                // console.log(`Processing show: ${show.content.name}, Start: ${show.startTime}, End: ${show.endTime}`)\n\n                // Find the index of the slot where the show should start\n                let slotIndex = timeSlots.findIndex(slot => showStart.isSameOrBefore(dayjs(slot)))\n\n                // Adjust if the show starts exactly at a slot time or just after the last checked slot time\n                if (slotIndex === -1 || showStart.isAfter(dayjs(timeSlots[slotIndex]))) {\n                    slotIndex = Math.max(0, slotIndex)\n                }\n\n                // console.log(`Comparing show start ${showStart.format()} to timeSlot index ${slotIndex} at ${dayjs(timeSlots[slotIndex]).format()}`)\n\n                // Calculate the end slot index\n                let endSlotIndex = timeSlots.findIndex(slot => showEnd.isSameOrBefore(dayjs(slot).add(30, 'minutes')))\n\n                // If the end slot index points to a slot that starts after the show ends, subtract one\n                if (endSlotIndex !== -1 && showEnd.isBefore(dayjs(timeSlots[endSlotIndex]))) {\n                    endSlotIndex--\n                }\n\n                // Handle cases where the show ends after the last slot\n                if (endSlotIndex === -1 || showEnd.isSame(dayjs(timeSlots[timeSlots.length - 1]).add(30, 'minutes'))) {\n                    endSlotIndex = timeSlots.length - 1\n                }\n\n                // console.log(`Comparing show end ${showEnd.format()} to timeSlot index ${endSlotIndex} at ${endSlotIndex !== -1 ? dayjs(timeSlots[endSlotIndex]).format() : 'out of range'}`)\n\n\n                // Calculate the number of slots the show should span\n                let span = endSlotIndex - slotIndex + 1\n\n                // console.log(`Calculated gridStart: ${slotIndex + 1}, gridSpan: ${span}`)\n                // console.log(32)\n                return {\n                    ...show,\n                    gridStart: slotIndex + 1, // Convert to 1-based index for grid positioning\n                    gridSpan: span,\n                }\n            })\n        },\n\n        processShows(shows) {\n            let comingUpNextSet = false\n\n            shows.forEach(show => {\n                const start = dayjs(show.start_dateTime)\n                const end = start.add(show.duration_minutes, 'minutes')\n                const now = dayjs(this.baseTime)\n\n                // Determine if the show is now playing\n                show.nowPlaying = !show.placeholder && now.isAfter(start) && now.isBefore(end) && show.gridRow === 1\n\n                // Find the first show that starts in gridRow 1 and does not start in the first grid column\n                if (!comingUpNextSet && !show.placeholder && show.gridRow === 1 && now.isBefore(start)) {\n                    show.comingUpNext = true\n                    comingUpNextSet = true  // Ensure only one show gets this flag\n                } else {\n                    show.comingUpNext = false\n                }\n            })\n\n            return shows\n        },\n\n        updateColumnOccupancy(processedShows, cols) {\n            let colOccupancy = new Array(cols).fill(null).map(() => new Set())\n            let maxRowUsed = 0\n            processedShows.forEach(show => {\n                for (let i = show.gridStart - 1; i < show.gridStart - 1 + show.gridSpan; i++) {\n                    if (i >= 0 && i < cols) {\n                        colOccupancy[i].add(show.gridRow)\n                        maxRowUsed = Math.max(maxRowUsed, show.gridRow)\n                    }\n                }\n            })\n            // console.log(34)\n            return {colOccupancy, maxRowUsed}\n        },\n\n        fillGapsAndCreatePlaceholders(colOccupancy, maxRowUsed, cols) {\n            let gridItems = []\n            // Ensure at least one row is processed even if no shows are present\n            maxRowUsed = Math.max(maxRowUsed, 1)\n            for (let row = 1; row <= maxRowUsed; row++) {\n                gridItems.push(...this.findAndFillGapsForSingleRow(colOccupancy, row, cols))\n            }\n            // console.log(35)\n            return gridItems\n        },\n\n        findAndFillGapsForSingleRow(colOccupancy, row, cols) {\n            let gridItems = []\n\n            // Skip processing for even-numbered rows\n            // if (row % 2 === 0) {\n            //     return gridItems;\n            // }\n\n            let gapStart = -1\n            for (let i = 0; i < cols; i++) {\n                if (!colOccupancy[i].has(row)) {\n                    gapStart = gapStart === -1 ? i : gapStart\n                } else if (gapStart !== -1) {\n                    // Use different placeholders based on the row number\n                    if (row === 1) {\n                        gridItems.push(this.createPlaceholder(gapStart + 1, i - gapStart, row))\n                    } else {\n                        gridItems.push(this.createBlankSpotPlaceholder(gapStart + 1, i - gapStart, row))\n                    }\n                    gapStart = -1\n                }\n            }\n            if (gapStart !== -1) {\n                // Again, differentiate between the first row and other rows\n                if (row === 1) {\n                    gridItems.push(this.createPlaceholder(gapStart + 1, cols - gapStart, row))\n                } else {\n                    gridItems.push(this.createBlankSpotPlaceholder(gapStart + 1, cols - gapStart, row))\n                }\n            }\n            // console.log(36)\n            return gridItems\n        },\n\n        sortShowsByPosition(combinedShows) {\n            if (!Array.isArray(combinedShows)) {\n                console.error('Expected an array of shows, received:', combinedShows)\n                return [] // Return an empty array if not an array to prevent errors\n            }\n\n            // console.log(37)\n            // Sort shows directly by row and then by start position within each row\n            return combinedShows.sort((a, b) => a.gridRow - b.gridRow || a.gridStart - b.gridStart)\n        },\n\n        createPlaceholder(start, span, row) {\n            // console.log(38)\n            return {\n                placeholder: true,\n                startTime: 'placeholder',\n                priority: 0,\n                gridStart: start,\n                gridSpan: span,\n                gridRow: row,\n                content: {name: 'Nothing scheduled.'},\n            }\n        },\n\n        createBlankSpotPlaceholder(start, span, row) {\n            // console.log(39)\n            return {\n                placeholder: true,\n                startTime: 'placeholder',\n                priority: 0,\n                gridStart: start,\n                gridSpan: span,\n                gridRow: row,\n                content: {name: 'Blank Spot'}, // Ensure it is differentiated from normal placeholders\n            }\n        },\n\n    },\n\n    getters: {\n        currentTime: (state) => {\n            // console.log('getter', 40)\n            return dayjs(state.baseTime).format('h:mm A')\n        },\n        currentDate: (state) => {\n            // console.log('getter', 40)\n            return dayjs(state.baseTime).format('MMMM DD, YYYY')\n        },\n        // Prepare banners with grid positions based on current time slots\n        preparedTimeBanners: (state) => {\n            // console.log('getter', 41)\n            const timeZone = getTimeZone() // Ensure this is defined\n            let now = dayjs().tz(timeZone)\n            let todayStart = now.startOf('day')\n            let tomorrowStart = todayStart.add(1, 'day')\n            let yesterdayStart = todayStart.subtract(1, 'day');\n\n            // console.log('Current Time Slots:', state.timeSlots.map(slot => dayjs(slot).format('HH:mm')))\n\n            return state.timeBanners.flatMap(banner => {\n                // console.log('getter', 42)\n                // Create banner times for today and tomorrow to handle overnight spans\n                let bannerTodayStart = todayStart.hour(parseInt(banner.startTime.split(':')[0])).minute(parseInt(banner.startTime.split(':')[1]))\n                let bannerTodayEnd = bannerTodayStart.clone().add(banner.duration, 'hours')\n                let bannerTomorrowStart = tomorrowStart.hour(parseInt(banner.startTime.split(':')[0])).minute(parseInt(banner.startTime.split(':')[1]))\n                let bannerTomorrowEnd = bannerTomorrowStart.clone().add(banner.duration, 'hours')\n                let bannerYesterdayStart = yesterdayStart.hour(parseInt(banner.startTime.split(':')[0])).minute(parseInt(banner.startTime.split(':')[1]));\n                let bannerYesterdayEnd = bannerYesterdayStart.clone().add(banner.duration, 'hours');\n\n                // Create an array of potential banners for today and tomorrow\n                let potentialBanners = [\n                    {...banner, start: bannerYesterdayStart, end: bannerYesterdayEnd},\n                    {...banner, start: bannerTodayStart, end: bannerTodayEnd},\n                    {...banner, start: bannerTomorrowStart, end: bannerTomorrowEnd},\n                ]\n\n                return potentialBanners.map(banner => {\n                    // console.log('getter', 43)\n                    const startSlotIndex = state.timeSlots.findIndex(slot => banner.start.isSameOrBefore(dayjs(slot)) && banner.end.isAfter(dayjs(slot)))\n                    let endSlotIndex = state.timeSlots.findIndex(slot => banner.end.isSameOrBefore(dayjs(slot)))\n\n                    // Adjust the end index to be inclusive of the end time\n                    if (endSlotIndex === -1 || banner.end.isAfter(dayjs(state.timeSlots[state.timeSlots.length - 1]))) {\n                        endSlotIndex = state.timeSlots.length - 1\n                    } else {\n                        endSlotIndex -= 1\n                    }\n\n                    const gridStart = startSlotIndex + 1\n                    const gridSpan = endSlotIndex - startSlotIndex + 1\n\n                    // console.log(`Processing Banner: ${banner.name}`)\n                    // console.log(`StartTime: ${banner.start.format('HH:mm')}, EndTime: ${banner.end.format('HH:mm')}`)\n                    // console.log(`StartSlotIndex: ${startSlotIndex}, EndSlotIndex: ${endSlotIndex}`)\n                    // console.log(`Calculated gridStart: ${gridStart}, gridSpan: ${gridSpan}`)\n\n                    // Ensure the banner should be displayed within the current time slots\n                    if (gridStart && gridSpan > 0) {\n                        // console.log('getter', 44)\n                        return {...banner, gridStart, gridSpan}\n                    }\n                    // console.log('getter', 45)\n                    return null\n                })\n            }).filter(banner => banner != null) // Filter out banners that don't fit within the current time slots\n                .sort((a, b) => a.gridStart - b.gridStart) // Sort by gridStart, with the lowest number first\n        },\n\n\n        // setTimeSlots: (state) => {\n        //     const appSettingStore = useAppSettingStore()\n        //     let slotHours\n        //\n        //     // Determine the number of slot hours based on screen size\n        //     if (appSettingStore.isVerySmallScreen) {\n        //         slotHours = state.verySmallScreenSlotHours\n        //     } else if (appSettingStore.isSmallScreen) {\n        //         slotHours = state.smallScreenSlotHours\n        //     } else {\n        //         slotHours = state.mediumScreenSlotHours\n        //     }\n        //\n        //     const intervalMinutes = state.slotIntervalMinutes\n        //     const slots = []\n        //     const totalSlots = (slotHours * 60) / intervalMinutes\n        //\n        //     // Ensure state.currentHalfHour is a Day.js object\n        //     const currentHalfHour = dayjs(state.currentHalfHour)\n        //\n        //     // Calculate the time for each slot using Day.js\n        //     for (let i = 0; i < totalSlots; i++) {\n        //         let slotTime = currentHalfHour.add(i * intervalMinutes, 'minute')\n        //         slots.push(slotTime.toDate())  // Convert back to JavaScript Date if necessary\n        //     }\n        //     state.timeSlots = slots\n        //     return slots.length\n        // },\n\n        nextFourHoursWithHalfHourIntervals: (state) => {\n            // Check if timeSlots is not null, undefined, or empty before accessing length\n            if (!state.timeSlots || state.timeSlots.length === 0) {\n                console.log('timeSlots is null or has no elements')\n                // console.log('getter', 46)\n                // Handle this scenario appropriately, such as returning an empty array or a default value\n                return []\n            }\n\n            const userStore = useUserStore() // Access the user store\n            const appSettingStore = useAppSettingStore() // Access the settings store\n            const userTimezone = userStore.timezone // Get the user's timezone\n            const cols = state.timeSlots.length\n\n            const intervals = []\n            const now = dayjs(state.baseTime).tz(userTimezone) // Get the current time in the user's timezone\n\n            // Determine if the current minute is less than 30 to start at the top of the hour or at the half-hour\n            let current = now.minute() < 30 ? now.startOf('hour') : now.startOf('hour').add(30, 'minutes')\n\n            // Adjust current to start 30 minutes before the calculated time\n            current = current.subtract(30, 'minutes');\n\n            // Generate intervals for the next 4 hours, each 30 minutes apart\n            // Adjust the loop count based on the number of columns/ intervals needed\n            for (let i = 0; i < cols; i++) { // Adjust the number of intervals based on the screen size\n                intervals.push({\n                    formatted: current.format('hh:mm A'), // Formatted time for display\n                    dateTimeString: current.format('YYYY-MM-DD HH:mm:ss'), // Y-m-d H:m:s format for comparisons\n                })\n                current = current.add(30, 'minute') // Move to the next 30-minute interval\n            }\n            // console.log('getter', 47)\n            return intervals\n        },\n\n        upcomingContent: (state) => {\n            // Since viewingWindowStart is now a Day.js object, use Day.js methods directly\n            const start = dayjs(state.viewingWindowStart).subtract(1, 'hour') // 1 hour earlier\n            const end = start.add(7, 'hours') // 6 hours later from the start\n\n            // Group shows by start time using Day.js\n            const showsGroupedByStartTime = state.weeklyContent.reduce((acc, item) => {\n                const itemStart = dayjs(item.start_dateTime).valueOf() // Use .valueOf() to get the timestamp\n                if (!acc[itemStart]) {\n                    acc[itemStart] = []\n                }\n                acc[itemStart].push(item)\n                return acc\n            }, {})\n\n            // Select the show with the lowest priority for each start time\n            const selectedShows = Object.values(showsGroupedByStartTime).map(group => {\n                return group.reduce((selected, item) => {\n                    return !selected || item.priority < selected.priority ? item : selected\n                }, null)\n            })\n            // console.log('getter', 48)\n            // Filter shows that fall within the next 6-hour window and sort them\n            return selectedShows\n                .filter(item => {\n                    const itemStart = dayjs(item.start_dateTime)\n                    return itemStart.isSameOrAfter(start) && itemStart.isBefore(end)\n                })\n                .sort((a, b) => dayjs(a.start_dateTime).unix() - dayjs(b.start_dateTime).unix()) // Sorting by Unix timestamp\n        },\n\n\n        nextSixHours: (state) => {\n            // Assuming state.viewingWindowStart is already a Day.js object.\n            // If it's still a native Date, convert it first:\n            let adjustedStart = dayjs(state.viewingWindowStart)\n\n            // Add 6 hours to the adjusted start time\n            const end = adjustedStart.add(6, 'hours')\n\n            // Generate each hour of the interval between adjustedStart and end\n            const hours = []\n            let hour = adjustedStart\n\n            while (hour.isBefore(end)) {\n                hours.push(hour.toDate()) // Convert back to Date if necessary; otherwise, just use `hour` if you can use Day.js objects directly\n                hour = hour.add(1, 'hour')\n            }\n            // console.log('getter', 49)\n            return hours\n        },\n\n        dateMessage: (state) => {\n            const startDay = startOfDay(state.viewingWindowStart)\n            const formattedDate = format(startDay, 'EEEE MMMM do, yyyy')\n            // console.log('getter', 50)\n            if (isToday(startDay)) {\n                return `Today - ${formattedDate}`\n            } else if (isYesterday(startDay)) {\n                return `Yesterday - ${formattedDate}`\n            } else if (isTomorrow(startDay)) {\n                return `Tomorrow - ${formattedDate}`\n            } else {\n                return formattedDate\n            }\n        },\n\n        currentMonthIndex: (state) => {\n            // Ensure state.currentMonth is converted to a Day.js object\n            const month = dayjs(state.currentMonth)\n            // console.log('getter', 51)\n            // Day.js months are 0-indexed just like JavaScript Date, returns the month (0-11)\n            return month.month()\n        },\n\n        currentMonthName: (state) => {\n            // Ensure state.currentMonth is converted to a Day.js object\n            const month = dayjs(state.currentMonth)\n            // console.log('getter', 52)\n            // Returns the full name of the month, e.g., 'January', 'February', etc.\n            return month.format('MMMM')\n        },\n\n        currentYear: (state) => {\n            // Ensure state.currentMonth is converted to a Day.js object\n            const month = dayjs(state.currentMonth)\n            // console.log('getter', 53)\n            // Returns the year\n            return month.year()\n        },\n        isToday: (state) => {\n            const today = dayjs()  // Gets today's date as a Day.js object\n            const viewingStart = dayjs(state.viewingWindowStart)  // Convert to Day.js object if not already\n            // console.log('getter', 54)\n            // Compare if both dates are the same calendar day\n            return today.isSame(viewingStart, 'day')\n        },\n\n        daysInMonth: (state) => {\n            // Assuming state.currentMonth is a Day.js object; if it's a Date, convert it:\n            const currentMonth = dayjs(state.currentMonth)\n\n            const startOfCurrentMonth = currentMonth.startOf('month')\n            const endOfCurrentMonth = currentMonth.endOf('month')\n\n            // Adjust these to ensure the grid starts on Sunday and ends on Saturday\n            const startOfGrid = startOfCurrentMonth.startOf('week')  // Assumes the week starts on Sunday by default\n            const endOfGrid = endOfCurrentMonth.endOf('week')        // Assumes the week ends on Saturday by default\n\n            // Generate the days for the calendar grid\n            const days = []\n            let day = startOfGrid\n\n            while (day.isBefore(endOfGrid) || day.isSame(endOfGrid, 'day')) {\n                days.push(day.toDate()) // Collect days as Date objects; remove toDate() if you can use Day.js objects directly\n                day = day.add(1, 'day')\n            }\n            // console.log('getter', 55)\n            return days\n        },\n\n    },\n})\n","import { onBeforeMount, onMounted, watch } from 'vue'\nimport { useUserStore } from \"@/Stores/UserStore\"\nimport { useAppSettingStore } from \"@/Stores/AppSettingStore\"\nimport { useVideoPlayerStore } from \"@/Stores/VideoPlayerStore\"\nimport { router } from '@inertiajs/vue3'\n\nexport function usePageSetup(pageName) {\n    const userStore = useUserStore()\n    const appSettingStore = useAppSettingStore()\n    const videoPlayerStore = useVideoPlayerStore()\n\n    appSettingStore.currentPage = pageName\n    appSettingStore.showFlashMessage = true\n    appSettingStore.pageIsHidden = false\n\n// PageSetup utility\n    if (userStore.isMobile || window.innerWidth < 1024) {\n        appSettingStore.ott = 0; // Close all panels on mobile devices\n    } else if (appSettingStore.fullPage) {\n        appSettingStore.ott = 0; // Default to closed in fullPage mode\n    } else {\n        if (appSettingStore.ott === 0) {\n            appSettingStore.ott = 4\n        }\n        // appSettingStore.ott = 4; // Open OttChat by default on larger screens\n        appSettingStore.showOttButtons = true;\n    }\n\n    videoPlayerStore.makeVideoTopRight()\n\n    if (appSettingStore.pageReload) {\n        appSettingStore.pageReload = false\n        appSettingStore.pageWasReloaded = true\n        window.location.reload();\n    }\n    // Check if the URL contains query strings\n\n\n    // Only scroll into view if there are no query strings\n\n        // const topDiv = document.getElementById(\"topDiv\")\n        // if (topDiv) {\n        //     topDiv.scrollIntoView()\n        // }\n        router.on('navigate', (event) => {\n            // Ensure OTT panels do not open automatically on mobile devices\n            if (userStore.isMobile || window.innerWidth < 1024 || appSettingStore.fullPage) {\n                appSettingStore.ott = 0; // Close all panels on mobile devices\n            } else {\n                if (appSettingStore.ott === 0) {\n                    appSettingStore.ott = 4\n                }\n                // appSettingStore.ott = 0; // Default to closed on larger screens\n            }\n            const hasQueryStrings = window.location.search !== '';\n            if (!hasQueryStrings || appSettingStore.shouldScrollToTop) {\n                requestAnimationFrame(() => {\n                    const topDiv = document.getElementById(\"topDiv\");\n                    if (topDiv) {\n                        topDiv.scrollIntoView({behavior: 'auto'});\n                    } else {\n                        window.scrollTo(0, 0);\n                    }\n                });\n            }\n            appSettingStore.shouldScrollToTop = false;\n        })\n    // Only update if we're not already on this page to avoid overwriting with the current URL\n    appSettingStore.setPrevUrl()\n    appSettingStore.showOttButtons = true\n    appSettingStore.noLayout = false\n\n    // router.reload()\n\n    watch(\n        () => appSettingStore.isSmallScreen,\n        (newValue) => {\n            if (newValue) {\n                appSettingStore.ott = 0;\n            } else {\n                appSettingStore.ott = 4;\n            }\n        },\n        { immediate: true } // This option ensures the watch executes immediately with the current value\n    );\n\n}\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".hover-gradient[data-v-a4d862a4]:hover{background:linear-gradient(90deg,#1e3a8a33,#1e40af33)}.bg-gradient-show[data-v-a4d862a4]{background:linear-gradient(90deg,#1f4037,#99f2c8)}.bg-gradient-show-hover[data-v-a4d862a4]:hover{background:linear-gradient(90deg,#66d3fa,#6e45e2)}.bg-gradient-new-release[data-v-a4d862a4]{background:linear-gradient(90deg,#654ea3,#eaafc8)}.bg-gradient-new-release-hover[data-v-a4d862a4]:hover{background:linear-gradient(90deg,#c2e59c,#64b3f4)}.column-width[data-v-a4d862a4]{@apply w-16}.schedule-item[data-v-a4d862a4]{align-items:center;background:#f0f0f0;color:#000;display:flex;flex-direction:column;gap:10px;padding:10px}.time-slot[data-v-a4d862a4]{border-bottom:1px solid #fff;grid-row:1;padding:10px 0;text-align:center}.time-banner[data-v-a4d862a4]{background-color:#007bff80;border:1px solid #fff;padding:10px;text-align:center}.show-cell[data-v-a4d862a4]{align-items:center;background-color:#f8f8f8;border:1px solid #ccc;display:flex;flex-direction:column;height:100%;justify-content:center;width:100%}.time-cell[data-v-a4d862a4]{border:1px solid #fff;padding:10px;text-align:center}.content[data-v-a4d862a4]{background:#f0f0f0;border:1px solid #ddd;padding:8px}.placeholder[data-v-a4d862a4]{background:#ccc;height:60px;width:100%}.schedule-grid[data-v-a4d862a4]{display:grid;width:100%}.content-row[data-v-a4d862a4],.header-row[data-v-a4d862a4]{display:contents}.schedule-cell[data-v-a4d862a4]{background:#333;color:#fff;padding:8px;text-align:center}.grid-container[data-v-a4d862a4]{grid-gap:10px;display:grid;width:100%}.grid-item[data-v-a4d862a4]{align-items:center;border:1px solid #ccc;display:flex;justify-content:center}.status-row[data-v-a4d862a4]{display:grid}.status-cell[data-v-a4d862a4],.status-row[data-v-a4d862a4]{align-items:center;width:100%}.status-cell[data-v-a4d862a4]{color:#fff;display:flex;font-weight:700;height:100%;justify-content:center;opacity:.8;padding:8px;transition:background-color .3s ease}.status-cell span[data-v-a4d862a4]{border-radius:4px;display:block;padding:4px 8px;text-align:center}.status-cell[data-v-a4d862a4]:empty:after{background:none;content:\\\"\\\";display:block;height:100%;width:100%}.show-cell:hover .gradient-on-hover[data-v-a4d862a4]{background-image:linear-gradient(90deg,#007b90,#006980)}.coming-up-next[data-v-a4d862a4],.now-playing[data-v-a4d862a4]{align-items:center;border:1px solid #ccc;display:flex;justify-content:center;padding:10px}.now-playing[data-v-a4d862a4]{animation:pulseAnimation-a4d862a4 2s infinite;background-color:#4caf50}.coming-up-next[data-v-a4d862a4]{background-color:#ff9800}@keyframes pulseAnimation-a4d862a4{0%{opacity:.75}50%{opacity:1}to{opacity:.75}}@media (min-width:1280px){.xl\\\\:hidden[data-v-a4d862a4]{display:none}}@media (min-width:1024px){.lg\\\\:hidden[data-v-a4d862a4]{display:none}}\", \"\",{\"version\":3,\"sources\":[\"webpack://./resources/js/Components/Global/Schedule/ScheduleGridContainer.vue\"],\"names\":[],\"mappings\":\"AAwiBA,uCACE,qDACF,CAEA,mCACE,iDACF,CAEA,+CACE,iDACF,CAEA,0CACE,iDACF,CAEA,sDACE,iDACF,CAGA,+BACE,WACF,CAGA,gCAOE,kBAAmB,CANnB,kBAAmB,CACnB,UAAW,CAEX,YAAa,CACb,qBAAsB,CACtB,QAAS,CAHT,YAKF,CAEA,4BAGE,4BAA6B,CAC7B,UAAW,CAFX,cAAe,CADf,iBAIF,CAEA,8BACE,0BAAwC,CAExC,qBAAuB,CACvB,YAAa,CAFb,iBAGF,CAEA,4BAIE,kBAAmB,CAEnB,wBAAyB,CADzB,qBAAsB,CAJtB,YAAa,CACb,qBAAsB,CAMtB,WAAY,CALZ,sBAAuB,CAIvB,UAEF,CAEA,4BACE,qBAAsB,CAEtB,YAAa,CADb,iBAEF,CAEA,0BACE,kBAAmB,CAEnB,qBAAsB,CADtB,WAEF,CAEA,8BACE,eAAgB,CAEhB,WAAY,CADZ,UAEF,CAGA,gCACE,YAAa,CACb,UACF,CAMA,2DACE,gBACF,CAEA,gCACE,eAAgB,CAChB,UAAW,CAEX,WAAY,CADZ,iBAEF,CAEA,iCAGE,aAAc,CAFd,YAAa,CACb,UAEF,CAEA,4BAEE,kBAAmB,CAEnB,qBAAsB,CAHtB,YAAa,CAEb,sBAEF,CAGA,6BACE,YAGF,CAGA,2DAJE,kBAAmB,CADnB,UAgBF,CAXA,8BAKE,UAAY,CAJZ,YAAa,CAOb,eAAiB,CADjB,WAAY,CALZ,sBAAuB,CAOvB,UAAY,CALZ,WAAY,CAMZ,oCACF,CAEA,mCAGE,iBAAkB,CAFlB,aAAc,CACd,eAAgB,CAEhB,iBACF,CAGA,0CAKE,eAAgB,CAJhB,UAAW,CACX,aAAc,CAEd,WAAY,CADZ,UAGF,CAGA,qDACE,uDACF,CAEA,+DAGE,kBAAmB,CAEnB,qBAAsB,CAJtB,YAAa,CACb,sBAAuB,CAEvB,YAEF,CAEA,8BAEE,6CAAqC,CADrC,wBAEF,CAEA,iCACE,wBACF,CAGA,mCACE,GACE,WACF,CACA,IACE,SACF,CACA,GACE,WACF,CACF,CAGA,0BAEE,6BACE,YACF,CACF,CAEA,0BAEE,6BACE,YACF,CACF\",\"sourcesContent\":[\"<template>\\n\\n  <!--  We need the CurrenTime component to keep our ScheduleStore currentTime up to date it has a SetInterval in it. -->\\n  <CurrentTime/>\\n\\n  <div class=\\\"tracking-wide\\\">\\n    <span class=\\\"text-sm uppercase text-purple-500\\\">All times are listed in your timezone.</span>\\n  </div>\\n  <div class=\\\"mb-2 tracking-wide\\\">\\n    <span class=\\\"text-sm uppercase text-yellow-500\\\">The schedule is updated every 30 minutes.</span>\\n  </div>\\n\\n  <div class=\\\"w-full\\\">\\n    <div class=\\\"schedule-grid\\\" :style=\\\"{ 'grid-template-columns': gridColumns }\\\">\\n      <div class=\\\"header-row\\\" :style=\\\"{ 'grid-template-columns': gridColumns }\\\">\\n        <!-- Time slots header -->\\n        <div class=\\\"time-cell bg-gray-900 px-3 py-2 text-center font-bold\\\"\\n             v-for=\\\"interval in nextFourHoursWithHalfHourIntervals\\\" :key=\\\"interval.dateTime\\\">\\n          {{ interval.formatted }}\\n        </div>\\n      </div>\\n      <div v-if=\\\"scheduleStore.isLoading && nextFourHoursOfContent.length === 0\\\"\\n           class=\\\"w-full flex justify-center text-center items-center\\\">\\n        <span class=\\\"loading loading-ball loading-xl text-info\\\"></span>\\n      </div>\\n    </div>\\n\\n    <div class=\\\"schedule-grid\\\" :style=\\\"{ 'grid-template-columns': gridColumns }\\\">\\n      <!-- Render time banners -->\\n      <div v-for=\\\"banner in scheduleStore.preparedTimeBanners\\\" :key=\\\"banner.id\\\"\\n           :style=\\\"gridItemStyle(banner)\\\" class=\\\"time-banner align-center\\\">\\n        {{ banner.name }}\\n      </div>\\n    </div>\\n\\n\\n    <div class=\\\"schedule-grid text-center\\\" :style=\\\"{ 'grid-template-columns': gridColumns }\\\">\\n\\n      <div v-if=\\\"nowPlayingShow\\\" :style=\\\"statusGridItemStyle(nowPlayingShow)\\\"\\n           class=\\\"now-playing text-black font-semibold\\\">\\n        <span>NOW PLAYING</span>\\n      </div>\\n\\n      <div v-if=\\\"comingUpNextShow\\\" :style=\\\"statusGridItemStyle(comingUpNextShow)\\\"\\n           class=\\\"coming-up-next text-black font-semibold\\\">\\n        <span>COMING UP NEXT</span>\\n      </div>\\n\\n\\n    </div>\\n\\n\\n    <div class=\\\"schedule-grid\\\" :style=\\\"{ 'grid-template-columns': gridColumns }\\\">\\n\\n\\n      <!-- Loop through combinedShows directly -->\\n      <div v-for=\\\"(item, index) in scheduleStore.nextFourHoursOfContent\\\"\\n           :key=\\\"item.id\\\"\\n           :style=\\\"gridItemStyle(item)\\\"\\n           class=\\\"show-cell\\\"\\n           :class=\\\"{'hover:cursor-pointer' : !item.placeholder}\\\"\\n           @click=\\\"handleShowClick(item)\\\">\\n        <div\\n            class=\\\"item-content px-4 flex flex-col justify-between items-center w-full h-full overflow-hidden\\\"\\n            :class=\\\"{\\n        'bg-gradient-to-r from-gray-900 to-gray-700': !item.placeholder,\\n        'bg-gradient-to-r from-tan-800 to-tan-600': item.placeholder,  // Assume tan-800 and tan-600 are defined in your tailwind config\\n        'gradient-on-hover': !item.placeholder\\n    }\\\">\\n          <div v-if=\\\"item.type\\\" :class=\\\"getBadgeClass(item.type)\\\" class=\\\"badge capitalize px-2 py-1 mt-6\\\">{{item.type}}</div>\\n\\n          <div class=\\\"show-info flex-grow flex flex-col items-center justify-center\\\">\\n            <h3 class=\\\"show-title mt-2 mb-4 w-full text-center text-lg font-semibold break-words\\\"\\n                :class=\\\"{'gradient-on-hover': !item.placeholder}\\\">\\n              {{ item.content.name || 'No Show Name' }}</h3>\\n            <!--            <p>{{ item.content.id }}</p>-->\\n            <!--            <p>Row: {{ item.gridRow }}</p>-->\\n            <SingleImage v-if=\\\"item.content.image\\\"\\n                         :image=\\\"item.content.image\\\"\\n                         :alt=\\\"item.content.name\\\"\\n                         :class=\\\"`skeleton w-full h-auto max-h-1/2screen object-cover transition-opacity duration-300 hover:opacity-80`\\\"/>\\n            <div v-if=\\\"!item.placeholder\\\"\\n                 class=\\\"show-time w-full text-center text-sm p-2 mt-2\\\"\\n                 :class=\\\"{'gradient-on-hover': !item.placeholder}\\\">\\n              <p v-if=\\\"!hasEnded\\\">\\n                {{ formatTime(item.start_dateTime, true) }}</p>\\n              <p :class=\\\"computeClassForConvertDateTimeToTimeAgo(item)\\\">\\n                <span v-if=\\\"!hasStarted(item)\\\">Starting </span>\\n                <span v-if=\\\"hasStarted(item) && !isEndingSoon(item) && !hasEnded(item)\\\">Started </span>\\n                <span v-if=\\\"isEndingSoon(item)\\\">Ending Soon </span>\\n                <span v-if=\\\"hasEnded(item)\\\">Ended </span>\\n                <ConvertDateTimeToTimeAgo\\n                    v-if=\\\"!isEndingSoon(item) && !hasEnded(item)\\\"\\n                    :key=\\\"scheduleStore.baseTime\\\"\\n                    :dateTime=\\\"item.start_dateTime\\\"\\n                    :timezone=\\\"userStore.timezone\\\"\\n              /></p>\\n            </div>\\n          </div>\\n        </div>\\n      </div>\\n\\n    </div>\\n\\n<!--    <div class=\\\"schedule-grid\\\" :style=\\\"{ 'grid-template-columns': gridColumns }\\\">-->\\n    <div class=\\\"schedule-grid h-24 bg-yellow-900 items-center text-center uppercase font-semibold my-4\\\">\\n      <span class=\\\"text-4xl\\\">Upcoming Broadcasts</span>\\n    </div>\\n\\n    <div class=\\\"infinite-scroll-container\\\">\\n      <div v-for=\\\"(show, index) in displayedShows\\\" :key=\\\"index\\\"\\n           class=\\\"next-show-highlight p-5 border border-gray-300 bg-gradient-to-r from-gray-900 to-gray-700 text-center hover-gradient\\\"\\n           :class=\\\"{ 'last-item': index === displayedShows.length - 1 }\\\">\\n        <div class=\\\"bg-gray-900 text-white py-2\\\">\\n          <h2>{{ getPlayingTimeLabel(show.start_dateTime) }}</h2>\\n        </div>\\n        <div v-if=\\\"show.type\\\" :class=\\\"getBadgeClass(show.type)\\\" class=\\\"badge capitalize px-2 py-1 mt-6\\\">{{show.type}}</div>\\n        <div class=\\\"show-details mt-2 mx-auto max-w-4xl\\\">\\n          <h3 @click=\\\"handleShowClick(show)\\\" class=\\\"text-3xl mb-1 hover:text-blue-300 hover:cursor-pointer\\\">\\n            {{ show.content.name }}</h3>\\n          <p class=\\\"text-lg\\\">{{ formatLongDate(show.start_dateTime) }}</p>\\n          <p class=\\\"text-lg\\\">{{ formatTime(show.start_dateTime, true) }} - {{ formatTime(show.end_dateTime, true) }}</p>\\n          <ConvertDateTimeToTimeAgo\\n              :key=\\\"scheduleStore.baseTime\\\"\\n              :dateTime=\\\"show.start_dateTime\\\"\\n              :timezone=\\\"userStore.timezone\\\"\\n              class=\\\"text-yellow-400\\\"\\n          />\\n          <div class=\\\"w-full flex flex-col justify-center items-center mt-4 hover:cursor-pointer\\\" @click=\\\"handleShowClick(show)\\\">\\n            <SingleImage v-if=\\\"show.content.image\\\"\\n                         :image=\\\"show.content.image\\\"\\n                         :alt=\\\"show.content.name\\\"\\n                         class=\\\"skeleton w-3/4 md:w-1/2 lg:w-1/3 h-auto object-cover mx-auto hover:opacity-80 transition-transform duration-300 ease-in-out transform hover:scale-105\\\"/>\\n          </div>\\n          <p class=\\\"pt-2 text-xs uppercase text-gray-300 tracking-wider\\\">Duration: {{ formatDuration(show.duration_minutes) }}</p>\\n        </div>\\n      </div>\\n      <!-- Loading Indicator -->\\n      <div v-if=\\\"scheduleStore.isLoading\\\" class=\\\"w-full text-center mt-4\\\">\\n      <span class=\\\"loading loading-dots loading-lg text-info\\\">\\n      </span>\\n      </div>\\n      <div v-element-visibility=\\\"onElementVisibility\\\"></div> <!-- This element triggers the visibility event -->\\n    </div>\\n\\n  </div>\\n</template>\\n<script setup>\\nimport { computed, onBeforeMount, onBeforeUnmount, onMounted, ref, watch } from 'vue'\\nimport { router } from '@inertiajs/vue3'\\nimport { vElementVisibility } from '@vueuse/components'\\nimport dayjs from 'dayjs'\\nimport utc from 'dayjs/plugin/utc';\\nimport timezone from 'dayjs/plugin/timezone';\\nimport isSameOrBefore from 'dayjs/plugin/isSameOrBefore';\\nimport isoWeek from 'dayjs/plugin/isoWeek';\\nimport advancedFormat from 'dayjs/plugin/advancedFormat' // for using 'a' for AM/PM format\\nimport { useScheduleStore } from '@/Stores/ScheduleStore'\\nimport { useAppSettingStore } from '@/Stores/AppSettingStore'\\nimport { useUserStore } from '@/Stores/UserStore'\\nimport SingleImage from '@/Components/Global/Multimedia/SingleImage.vue'\\nimport CurrentTime from '@/Components/Global/Schedule/CurrentTime.vue'\\nimport { throttle } from '@/Utilities/Throttle'\\nimport ConvertDateTimeToTimeAgo from '@/Components/Global/DateTime/ConvertDateTimeToTimeAgo.vue'\\n\\nconst scheduleStore = useScheduleStore()\\nconst appSettingStore = useAppSettingStore()\\nconst userStore = useUserStore()\\n\\ndayjs.extend(utc);\\ndayjs.extend(timezone);\\ndayjs.extend(isSameOrBefore);\\ndayjs.extend(isoWeek);\\ndayjs.extend(advancedFormat)\\n\\nlet initialLoadHandled = false\\nlet initialFetchCompleted = false\\n\\nconst isVisible = ref(false)\\nconst displayedShowsCount = ref(6)\\n\\nconst nextFourHoursWithHalfHourIntervals = computed(() => scheduleStore.nextFourHoursWithHalfHourIntervals)\\nconst nextFourHoursOfContent = computed(() => scheduleStore.nextFourHoursOfContent)\\n\\nconst getPlayingTimeLabel = (start_dateTime) => {\\n  const baseTime = dayjs(scheduleStore.baseTime).startOf('isoWeek');\\n  const start = dayjs(start_dateTime);\\n\\n  // console.log('baseTime:', baseTime.format('YYYY-MM-DD HH:mm:ss'));\\n  // console.log('start_dateTime:', start.format('YYYY-MM-DD HH:mm:ss'));\\n\\n  const diffDays = start.diff(baseTime, 'day');\\n  const diffWeeks = start.diff(baseTime, 'week');\\n  const diffMonths = start.diff(baseTime.startOf('month'), 'month');\\n  const diffYears = start.diff(baseTime, 'year');\\n\\n  if (diffDays === 0) {\\n    return 'Playing Today';\\n  } else if (diffDays === 1) {\\n    return 'Playing Tomorrow';\\n  } else if (diffDays > 1 && diffDays <= 7) {\\n    return 'Later This Week';\\n  } else if (diffWeeks === 1) {\\n    return 'Next Week';\\n  } else if (diffWeeks > 1 && diffWeeks <= 2) {\\n    return 'In 2 Weeks';\\n  } else if (diffMonths === 0) {\\n    return 'Later This Month';\\n  } else if (diffMonths === 1) {\\n    return 'Next Month';\\n  } else if (diffMonths === 2) {\\n    return 'In 2 Months';\\n  } else if (diffMonths === 3) {\\n    return 'In 3 Months';\\n  } else if (diffMonths === 4) {\\n    return 'In 4 Months';\\n  } else if (diffMonths === 5) {\\n    return 'In 5 Months';\\n  } else if (diffMonths === 6) {\\n    return 'In 6 Months';\\n  } else if (diffMonths > 6 && diffMonths <= 11) {\\n    return 'Later This Year';\\n  } else if (diffYears === 1) {\\n    return 'Next Year';\\n  } else {\\n    return 'In The Distant Future';\\n  }\\n};\\n\\n// Function to handle element visibility\\nfunction onElementVisibility(state) {\\n  isVisible.value = state;\\n}\\n\\n// Function to load more shows\\nconst loadMoreShows = async () => {\\n  if (isVisible.value && !scheduleStore.isLoading) {\\n    scheduleStore.isLoading = true;\\n    // console.log(\\\"Loading more shows\\\");\\n\\n    // Fetch more schedules\\n    await scheduleStore.fetchMoreSchedules();\\n\\n    displayedShowsCount.value += 6;\\n    scheduleStore.isLoading = false;\\n  }\\n};\\n\\n// Throttle the loadMoreShows function\\nconst throttledLoadMoreShows = throttle(loadMoreShows, 200);\\n\\n\\n\\n\\nconst allPlaceholders = computed(() => {\\n  return scheduleStore.nextFourHoursOfContent.every(item => item.placeholder)\\n})\\n\\nconst upcomingShows = computed(() => {\\n  const now = dayjs(scheduleStore.baseTime);\\n\\n  // Log baseTime and schedules for debugging\\n  // console.log('Base Time:', now);\\n  // console.log('Schedules:', scheduleStore.schedules);\\n\\n  // Create a set of show start times from nextFourHoursOfContent\\n  const nextFourHoursShowTimes = new Set(scheduleStore.nextFourHoursOfContent.map(show => show.start_dateTime));\\n  // console.log('Next Four Hours Show Times:', Array.from(nextFourHoursShowTimes));\\n\\n  // Filter out shows that are part of nextFourHoursOfContent by matching start_dateTime\\n  const filteredShows = scheduleStore.schedules.filter(show => {\\n    const isAfterNow = dayjs(show.start_dateTime).isAfter(now);\\n    const isNotPlaceholder = !show.placeholder;\\n    const isNotInNextFourHours = !nextFourHoursShowTimes.has(show.start_dateTime);\\n    const shouldInclude = isAfterNow && isNotPlaceholder && isNotInNextFourHours;\\n\\n    // console.log(`Show ID: ${show.id}, Start Time: ${show.start_dateTime}, Include: ${shouldInclude}`);\\n    return shouldInclude;\\n  });\\n\\n  // Sort filtered shows by start time\\n  return filteredShows.sort((a, b) => dayjs(a.start_dateTime).diff(dayjs(b.start_dateTime)));\\n});\\n\\nconst displayedShows = computed(() => upcomingShows.value.slice(0, displayedShowsCount.value))\\n\\nfunction isNowPlaying(start_dateTime, duration) {\\n  const now = dayjs()\\n  const start = dayjs(start_dateTime)\\n  const end = start.add(duration, 'minutes')\\n  return now.isAfter(start) && now.isBefore(end)\\n}\\n\\n\\nconst nowPlayingShow = computed(() => {\\n  return scheduleStore.nextFourHoursOfContent.find(show => show.nowPlaying)\\n})\\n\\nconst comingUpNextShow = computed(() => {\\n  return scheduleStore.nextFourHoursOfContent.find(  show => show.comingUpNext)\\n})\\n\\n// Function to return the appropriate badge class based on item type\\nconst getBadgeClass = (type) => {\\n  switch (type) {\\n    case 'show':\\n      return 'badge-info';\\n    case 'movie':\\n      return 'badge-secondary';\\n    case 'showEpisode':\\n      return 'badge-success';\\n    case 'newsStory':\\n      return 'badge-warning';\\n    case 'otherContent':\\n    default:\\n      return 'neutral';\\n  }\\n};\\n\\nonBeforeMount(() => {\\n  scheduleStore.reset()\\n})\\n\\nonMounted(async () => {\\n  // scheduleStore.resetAll()\\n  const now = dayjs();\\n  const startDate = now.subtract(4, 'hour').toISOString();\\n  const endDate = now.add(7, 'day').toISOString();\\n  await scheduleStore.fetchSchedules(startDate, endDate);\\n  initialFetchCompleted = true\\n\\n  // Watcher for isVisible.value\\n  watch(isVisible, (newValue) => {\\n    if (newValue && initialFetchCompleted) {\\n      throttledLoadMoreShows();\\n    }\\n  });\\n\\n  // Watcher for schedules to ensure initial data load\\n  watch(\\n      () => scheduleStore.schedules,\\n      (newSchedules) => {\\n        if (newSchedules && newSchedules.length > 0 && !initialLoadHandled && initialFetchCompleted) {\\n          scheduleStore.updateNextFourHours();\\n          initialLoadHandled = true;\\n        }\\n      },\\n      { immediate: true },\\n  );\\n\\n  // Watch for changes in screen size indicators\\n  watch(\\n      [() => appSettingStore.isVerySmallScreen, () => appSettingStore.isSmallScreen],\\n      ([newVerySmall, newSmall], [oldVerySmall, oldSmall]) => {\\n        if ((newVerySmall !== oldVerySmall || newSmall !== oldSmall) && initialFetchCompleted) {\\n          // console.log(`Screen size change detected: VerySmallScreen: ${newVerySmall}, SmallScreen: ${newSmall}`)\\n          scheduleStore.fetchSchedules()\\n        }\\n      },\\n      {immediate: false},  // Optionally run on initial setup\\n  )\\n\\n  // Update the next four hours when baseTime changes\\n  watch(\\n      () => scheduleStore.baseTime,\\n      (newTime, oldTime) => {\\n        if (newTime !== oldTime && initialFetchCompleted) { // This check may be redundant but adds clarity\\n          // console.log(`Base time updated from ${oldTime} to ${newTime}`)\\n          scheduleStore.updateNextFourHours()\\n        }\\n      },\\n      {immediate: true},\\n  )\\n\\n});\\n\\nonBeforeUnmount(() => {\\n  // Any specific cleanup logic can go here\\n  // For example: cancel any ongoing API requests if applicable\\n  scheduleStore.resetAll()\\n});\\n\\n\\n// Method to format time with conditional AM/PM display\\nfunction formatTime(time, showMeridiem = false) {\\n  return dayjs(time).format(`h:mm ${showMeridiem ? 'a' : ''}`)\\n}\\n\\nfunction formatLongDate(date) {\\n  return dayjs(date).format('dddd MMM D, YYYY')\\n}\\n\\n// Method to format duration into a readable format\\nfunction formatDuration(minutes) {\\n  const hours = Math.floor(minutes / 60)\\n  const remainderMinutes = minutes % 60\\n  if (hours === 0) return `${remainderMinutes} minutes`\\n  return `${hours} hour${hours > 1 ? 's' : ''} ${remainderMinutes > 0 ? remainderMinutes + ' minutes' : ''}`\\n}\\n\\n// Define the function to calculate grid style directly\\nfunction gridItemStyle(item) {\\n  const style = {\\n    gridColumn: `${item.gridStart} / span ${item.gridSpan}`,\\n    gridRow: `row ${item.gridRow}`,\\n  }\\n  // console.log(style)  // Log to see what styles are being returned\\n  return style\\n}\\n\\n// Dedicated function to handle status row grid styling\\nfunction statusGridItemStyle(item) {\\n  if (!item) return {}\\n\\n  // Log to debug the grid positions being applied\\n  // console.log(`Status Item - Grid Start: ${item.gridStart}, Grid Span: ${item.gridSpan}`)\\n\\n  return {\\n    gridColumn: `${item.gridStart} / span ${item.gridSpan}`,\\n    gridRow: `row 2`, // Assuming status rows are always in the first grid row for visibility\\n  }\\n}\\n\\n// Computed property to determine the number of columns\\nconst gridColumns = computed(() => {\\n  let numColumns\\n  if (appSettingStore.isVerySmallScreen) {\\n    numColumns = Math.floor((scheduleStore.verySmallScreenSlotHours * 60) / scheduleStore.slotIntervalMinutes)\\n  } else if (appSettingStore.isSmallScreen) {\\n    numColumns = Math.floor((scheduleStore.smallScreenSlotHours * 60) / scheduleStore.slotIntervalMinutes)\\n  } else {\\n    numColumns = Math.floor((scheduleStore.mediumScreenSlotHours * 60) / scheduleStore.slotIntervalMinutes)\\n  }\\n  document.documentElement.style.setProperty('--text-size', numColumns < 4 ? '0.8em' : '1em')\\n  document.documentElement.style.setProperty('--text-small', numColumns < 4 ? '0.7em' : '0.8em')\\n\\n  return `repeat(${numColumns}, minmax(0, 1fr))` // Returns the CSS grid-template-columns value\\n})\\n\\nconst gridPlacement = (gridStart, gridSpan) => {\\n  return {\\n    gridColumnStart: gridStart,\\n    gridColumnEnd: `span ${gridSpan}`,\\n    gridRowStart: 'auto',\\n    gridRowEnd: 'span 1', // Assuming each item occupies one row height-wise\\n  }\\n}\\n\\nfunction getCellClasses(type) {\\n  const baseClass = 'column-width text-sm 2xl:text-md border border-0.5 border-green-300 hover:border-blue-500 cursor-pointer'\\n  switch (type) {\\n    case 'show':\\n      return `${baseClass} bg-gradient-show hover:bg-gradient-show-hover`\\n    case 'new_release':\\n      return `${baseClass} bg-gradient-new-release hover:bg-gradient-new-release-hover`\\n      // Add more cases as needed\\n    default:\\n      return baseClass\\n  }\\n}\\n\\nfunction handleShowClick(item) {\\n  let url = '' // Initialize url variable\\n\\n  switch (item.type) {\\n    case 'show':\\n      url = `/shows/${item.content.slug}/`\\n      // url = `/teams/${item.content.teamSlug}/`\\n      break\\n    case 'movie':\\n      url = `/movie/${item.content.slug}/`\\n      break\\n    case 'showEpisode':\\n      url = `/shows/${item.content.show.slug}/episode/${item.content.slug}`\\n      break\\n    default:\\n      // Handle default case or do nothing\\n  }\\n  router.visit(url) // Visit the dynamically created URL\\n}\\n\\n\\nfunction updateNowPlayingAndComingUpNext() {\\n  // Logic to update nowPlaying and comingUpNext based on the current time and show data\\n}\\n\\n\\n// Helper function to determine the appropriate classes based on the gridStart and certain conditions\\nconst getStatusCellClasses = (gridStart, isFirst, isSecond) => {\\n  const classes = ['status-cell'] // Base class for all status cells\\n  if (isFirst && gridStart === 1) {\\n    // 'Now Playing' is only assigned if it's the first item and it starts at the first grid column\\n    classes.push('now-playing')\\n  } else if (isSecond && gridStart !== 1) {\\n    // 'Coming Up Next' is only assigned to the second item and it should not start at the first grid column\\n    classes.push('coming-up-next')\\n  } else {\\n    // Default class for other cells or when no specific condition is met\\n    classes.push('status-cell-empty')\\n  }\\n  return classes\\n}\\n\\n// Compute the total occupied columns\\nconst occupiedCols = computed(() => {\\n  let cols = 0;\\n  if (nowPlayingShow.value) {\\n    cols += nowPlayingShow.value.cols;\\n  }\\n  if (comingUpNextShow.value) {\\n    cols += comingUpNextShow.value.cols;\\n  }\\n  return cols;\\n});\\n\\n// Check if there are remaining columns to fill\\nconst hasRemainingCols = computed(() => {\\n  return gridColumns > occupiedCols.value;\\n});\\n\\n// Style for remaining columns\\nconst remainingColsStyle = computed(() => {\\n  if (hasRemainingCols.value) {\\n    return {\\n      'grid-column': `span ${gridColumns - occupiedCols.value}`,\\n    };\\n  }\\n  return {};\\n});\\n\\nconst hasStarted = (item) => dayjs(item.start_dateTime).isBefore(scheduleStore.baseTime);\\nconst isEndingSoon = (item) => dayjs(item.end_dateTime).isAfter(scheduleStore.baseTime) && dayjs(item.end_dateTime).diff(scheduleStore.baseTime, 'minute') <= 5;\\nconst hasEnded = (item) => dayjs(item.end_dateTime).isBefore(scheduleStore.baseTime);\\n\\nconst computeClassForConvertDateTimeToTimeAgo = (item) => {\\n  if (isEndingSoon(item)) {\\n    return 'text-orange-500';\\n  } else if (!hasStarted(item)) {\\n    return 'text-green-500';\\n  } else if (hasEnded(item)) {\\n    return 'text-gray-500'; // You can choose any color that signifies \\\"Ended\\\"\\n  } else {\\n    return 'text-yellow-500';\\n  }\\n};\\nfunction openModal(modalName) {\\n  document.getElementById(modalName).showModal()\\n}\\n</script>\\n\\n<style scoped>\\n\\n.hover-gradient:hover {\\n  background: linear-gradient(to right, rgba(30, 58, 138, 0.2), rgba(30, 64, 175, 0.2));\\n}\\n\\n.bg-gradient-show {\\n  background: linear-gradient(to right, #1f4037, #99f2c8); /* Example green gradient */\\n}\\n\\n.bg-gradient-show-hover:hover {\\n  background: linear-gradient(to right, #66D3FA, #6E45E2); /* Example green gradient on hover */\\n}\\n\\n.bg-gradient-new-release {\\n  background: linear-gradient(to right, #654ea3, #eaafc8); /* Example purple gradient */\\n}\\n\\n.bg-gradient-new-release-hover:hover {\\n  background: linear-gradient(to right, #c2e59c, #64b3f4); /* Example purple gradient on hover */\\n}\\n\\n\\n.column-width {\\n  @apply w-16\\n}\\n\\n\\n.schedule-item {\\n  background: #f0f0f0;\\n  color: #000;\\n  padding: 10px;\\n  display: flex;\\n  flex-direction: column;\\n  gap: 10px;\\n  align-items: center;\\n}\\n\\n.time-slot {\\n  text-align: center;\\n  padding: 10px 0;\\n  border-bottom: 1px solid #fff;\\n  grid-row: 1; /* Ensures all time slots are in the first row */\\n}\\n\\n.time-banner {\\n  background-color: rgba(0, 123, 255, 0.5); /* Example styling */\\n  text-align: center;\\n  border: 1px solid white; /* White border */\\n  padding: 10px;\\n}\\n\\n.show-cell {\\n  display: flex; /* Ensure this is set to flex to control child elements with flex properties */\\n  flex-direction: column; /* Align children in a column */\\n  justify-content: center; /* Align items to the top */\\n  align-items: center; /* Center children horizontally */\\n  border: 1px solid #ccc;\\n  background-color: #f8f8f8;\\n  width: 100%; /* Ensures cell uses full width of its grid column */\\n  height: 100%; /* Ensures cell uses full height */\\n}\\n\\n.time-cell {\\n  border: 1px solid #fff;\\n  text-align: center; /* Center text if desired */\\n  padding: 10px;\\n}\\n\\n.content {\\n  background: #f0f0f0;\\n  padding: 8px;\\n  border: 1px solid #ddd;\\n}\\n\\n.placeholder {\\n  background: #ccc;\\n  width: 100%;\\n  height: 60px;\\n}\\n\\n\\n.schedule-grid {\\n  display: grid;\\n  width: 100%;\\n}\\n\\n.header-row {\\n  display: contents; /* This makes the header-row itself not generate a box, allowing .time-cell to be direct children of .schedule-grid */\\n}\\n\\n.content-row {\\n  display: contents; /* This makes the row container disappear, directly using the grid defined in parent */\\n}\\n\\n.schedule-cell {\\n  background: #333;\\n  color: #fff;\\n  text-align: center;\\n  padding: 8px;\\n}\\n\\n.grid-container {\\n  display: grid;\\n  width: 100%;\\n  grid-gap: 10px;\\n}\\n\\n.grid-item {\\n  display: flex;\\n  align-items: center;\\n  justify-content: center;\\n  border: 1px solid #ccc;\\n}\\n\\n\\n.status-row {\\n  display: grid;\\n  width: 100%;\\n  align-items: center;\\n}\\n\\n\\n.status-cell {\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  padding: 8px;\\n  color: white;\\n  width: 100%;\\n  height: 100%;\\n  font-weight: bold;\\n  opacity: 0.8;\\n  transition: background-color 0.3s ease;\\n}\\n\\n.status-cell span {\\n  display: block;\\n  padding: 4px 8px;\\n  border-radius: 4px;\\n  text-align: center;\\n}\\n\\n/* Optional: If you want the empty cells to have a slight indication they are there */\\n.status-cell:empty::after {\\n  content: \\\"\\\";\\n  display: block;\\n  width: 100%;\\n  height: 100%;\\n  background: none; /* Adjust this to a very subtle color or keep transparent */\\n}\\n\\n/* Custom hover effect for the parent that affects children */\\n.show-cell:hover .gradient-on-hover {\\n  background-image: linear-gradient(to right, rgba(0, 123, 144), rgba(0, 105, 128));\\n}\\n\\n.now-playing, .coming-up-next {\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  padding: 10px;\\n  border: 1px solid #ccc;\\n}\\n\\n.now-playing {\\n  background-color: #4CAF50; /* Green for now playing */\\n  animation: pulseAnimation 2s infinite;\\n}\\n\\n.coming-up-next {\\n  background-color: #FF9800; /* Orange for coming up next */\\n}\\n\\n\\n@keyframes pulseAnimation {\\n  0% {\\n    opacity: 0.75;\\n  }\\n  50% {\\n    opacity: 1;\\n  }\\n  100% {\\n    opacity: 0.75;\\n  }\\n}\\n\\n/* Responsive visibility */\\n@media (min-width: 1280px) {\\n  /* 2xl */\\n  .xl\\\\:hidden {\\n    display: none;\\n  }\\n}\\n\\n@media (min-width: 1024px) {\\n  /* xl */\\n  .lg\\\\:hidden {\\n    display: none;\\n  }\\n}\\n\\n</style>\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","import script from \"./Messages.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Messages.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n  <div class=\"mx-4 my-4\">\n    <div class=\"alert alert-info mt-4\"\n         v-if=\"props.flash.message\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" class=\"stroke-current shrink-0 w-6 h-6\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n              d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"></path>\n      </svg>\n      <span>{{ props.flash.message }}</span>\n      <button class=\"text-xs ml-12\" @click=\"clearFlashMessage\"> Close</button>\n    </div>\n    <div class=\"alert alert-success mt-4 mx-3\"\n         v-if=\"props.flash.success\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"stroke-current shrink-0 h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n              d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"/>\n      </svg>\n      <span>{{ props.flash.success }}</span>\n      <button class=\"text-xs ml-12\" @click=\"clearFlashMessage\"> Close</button>\n    </div>\n    <div class=\"alert alert-warning mt-4 mx-3\"\n         v-if=\"props.flash.warning\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"stroke-current shrink-0 h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n              d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z\"/>\n      </svg>\n      <span>{{ props.flash.warning }}</span>\n      <button class=\"text-xs ml-12\" @click=\"clearFlashMessage\"> Close</button>\n    </div>\n    <div class=\"alert alert-error mt-4 mx-3\"\n         v-if=\"props.flash.error\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"stroke-current shrink-0 h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n              d=\"M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z\"/>\n      </svg>\n      <span>{{ props.flash.error }}</span>\n      <button class=\"text-xs ml-12\" @click=\"clearFlashMessage\"> Close</button>\n    </div>\n  </div>\n\n</template>\n\n<script setup>\nimport { router } from '@inertiajs/vue3'\nimport { computed } from \"vue\"\nimport { useAppSettingStore } from \"@/Stores/AppSettingStore\"\n\nconst appSettingStore = useAppSettingStore()\n\nappSettingStore.showFlashMessage = true\n\nlet props = defineProps({\n  flash: Object,\n\n})\n\nconst messageType = computed(() => ({\n  'text-green-700 bg-green-100 dark:bg-green-200 dark:text-green-800': props.flash.success,\n  'text-blue-700 bg-blue-100 dark:bg-blue-200 dark:text-blue-800': props.flash.message,\n  'text-orange-700 bg-orange-100 dark:bg-orange-200 dark:text-orange-800': props.flash.warning,\n  'text-red-700 bg-red-100 dark:bg-red-200 dark:text-red-800': props.flash.error,\n}))\n\nconst clearFlashMessage = async () => {\n  await router.post(route('flash.clear'));\n  router.reload();\n};\n</script>\n","import script from \"./PopUpModal.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./PopUpModal.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n  <div>\n    <dialog :id=\"id\" class=\"modal\">\n      <div class=\"modal-box text-center my-auto border-2 border-secondary\" data-theme=\"dark\">\n        <h2 class=\"font-bold text-3xl text-secondary\">\n          <slot name=\"header\"></slot>\n        </h2>\n        <p class=\"py-4 text-xl\">\n          <slot name=\"main\"></slot>\n        </p>\n        <div class=\"modal-action justify-center w-full\">\n          <form method=\"dialog\">\n            <!-- if there is a button in form, it will close the modal -->\n            <button @click=\"notificationStore.showPopUpModal = false\" class=\"btn btn-secondary\">Okay</button>\n          </form>\n        </div>\n      </div>\n    </dialog>\n  </div>\n</template>\n<script setup>\nimport { useNotificationStore } from \"@/Stores/NotificationStore\"\n\nconst notificationStore = useNotificationStore()\n\ndefineProps({\n  id: String,\n})\n</script>\n","<template>\n  <div class=\"tracking-wide\">\n    <!-- Day of the week in large, semi-bold letters -->\n    <p class=\"tracking-wide text-4xl font-semibold mb-2\">{{ currentDay }}</p>\n\n    <!-- Current time display -->\n    <p class=\"tracking-wide text-gray-300\"><span class=\"text-white font-medium\">{{ scheduleStore.currentDate }}</span></p>\n    <p class=\"tracking-wide text-xl text-gray-300\">Current Time:  <span class=\"text-white font-medium\">{{ scheduleStore.currentTime }} {{ userStore.timezoneAbbreviation }}</span></p>\n\n    <!-- Input for testing current time -->\n<!--    <p>CURRENT TIME (for testing): <input type=\"time\" v-model=\"formattedTime\" @input=\"stopAutoUpdateTime\"-->\n<!--                                          class=\"text-black\"></p>-->\n\n  </div>\n</template>\n\n<script setup>\nimport { computed, onMounted, onUnmounted, ref, watch } from 'vue'\nimport { useUserStore } from '@/Stores/UserStore'\nimport { useScheduleStore } from '@/Stores/ScheduleStore'\nimport dayjs from 'dayjs'\nimport utc from 'dayjs/plugin/utc'  // for UTC support\nimport timezone from 'dayjs/plugin/timezone'  // for timezone support\n\nconst userStore = useUserStore()\nconst scheduleStore = useScheduleStore()\n\ndayjs.extend(utc)\ndayjs.extend(timezone)\n\n// const baseTime = ref(new Date());\n// const currentTime = ref(baseTime.value.toISOString().substring(11, 16));\nlet intervalId = null\nlet timeoutId = null  // Variable to store the timeout reference\nlet initialUpdateDone = false  // Flag to track if the first update has been done\n\n// Computed property to get the current day of the week\nconst currentDay = computed(() => {\n  return dayjs().format('dddd'); // 'dddd' for full day name according to dayjs formatting\n});\n\n// const updateShows = () => {\n//   const [hour, minute] = currentTime.value.split(':');\n//   baseTime.value.setHours(parseInt(hour), parseInt(minute), 0, 0);\n//   // You might want to force a re-render or re-compute of visible shows here\n// };\n\n// Function to update current time\nfunction updateCurrentTime() {\n  const timezone = userStore.timezone || 'UTC'; // Default to 'UTC' if no timezone is set\n\n  // Use dayjs to handle the timezone conversion\n  const currentTime = dayjs().tz(timezone).format('YYYY-MM-DD HH:mm:ss');\n  const minutes = dayjs().tz(timezone).format('mm');\n\n  scheduleStore.setBaseTime(currentTime);\n\n  // Log the time only at the top of the hour and the half-hour mark\n  if (minutes === '00' || minutes === '30') {\n    console.log('Time updated:', currentTime);\n  }\n}\n\n// Function to start auto-update interval\nfunction startAutoUpdateTime(updateImmediately = true) {\n  clearInterval(intervalId)  // Clear any existing interval first\n  if (updateImmediately && !initialUpdateDone) {\n    updateCurrentTime()  // Optionally update time immediately\n    initialUpdateDone = true  // Set the flag after the first update\n  }\n  intervalId = setInterval(() => {\n    updateCurrentTime()  // Continue updating every minute\n  }, 60000)\n  console.log('Interval started, ID:', intervalId)\n}\n\n// Function to clear the interval\nfunction stopAutoUpdateTime() {\n  clearInterval(intervalId)\n  console.log('Interval stopped, ID:', intervalId)\n  intervalId = null  // Reset the interval ID\n  clearTimeout(timeoutId)  // Use clearTimeout to stop the timeout\n  timeoutId = null         // Reset the variable after cancelling\n  console.log('Auto-update canceled.')\n}\n\nonMounted(() => {\n  // Use dayjs to get the current time\n  const now = dayjs();\n\n  // Calculate milliseconds until the next minute to align updates\n  const msUntilNextMinute = (60 - now.second()) * 1000 - now.millisecond();\n\n  // Delay the start of regular updates to align with the start of the next minute\n  timeoutId = setTimeout(() => {\n    startAutoUpdateTime();  // Start regular updates at the next minute\n  }, msUntilNextMinute);\n});\n\nonUnmounted(() => {\n  stopAutoUpdateTime()\n})\n\nconst formattedTime = computed({\n  get() {\n    // Use dayjs to format the time from the baseTime in scheduleStore\n    return dayjs(scheduleStore.baseTime).format('HH:mm');\n  },\n  set(value) {\n    // Parse the hours and minutes from the input value\n    const [hours, minutes] = value.split(':').map(Number);\n    // Use dayjs to update the time while keeping the date part unchanged\n    const newTime = dayjs(scheduleStore.baseTime).hour(hours).minute(minutes).toDate();\n    // Update the baseTime in the scheduleStore\n    scheduleStore.setBaseTime(newTime);\n  },\n})\n\n\n</script>","import script from \"./CurrentTime.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./CurrentTime.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n\n  <!--  We need the CurrenTime component to keep our ScheduleStore currentTime up to date it has a SetInterval in it. -->\n  <CurrentTime/>\n\n  <div class=\"tracking-wide\">\n    <span class=\"text-sm uppercase text-purple-500\">All times are listed in your timezone.</span>\n  </div>\n  <div class=\"mb-2 tracking-wide\">\n    <span class=\"text-sm uppercase text-yellow-500\">The schedule is updated every 30 minutes.</span>\n  </div>\n\n  <div class=\"w-full\">\n    <div class=\"schedule-grid\" :style=\"{ 'grid-template-columns': gridColumns }\">\n      <div class=\"header-row\" :style=\"{ 'grid-template-columns': gridColumns }\">\n        <!-- Time slots header -->\n        <div class=\"time-cell bg-gray-900 px-3 py-2 text-center font-bold\"\n             v-for=\"interval in nextFourHoursWithHalfHourIntervals\" :key=\"interval.dateTime\">\n          {{ interval.formatted }}\n        </div>\n      </div>\n      <div v-if=\"scheduleStore.isLoading && nextFourHoursOfContent.length === 0\"\n           class=\"w-full flex justify-center text-center items-center\">\n        <span class=\"loading loading-ball loading-xl text-info\"></span>\n      </div>\n    </div>\n\n    <div class=\"schedule-grid\" :style=\"{ 'grid-template-columns': gridColumns }\">\n      <!-- Render time banners -->\n      <div v-for=\"banner in scheduleStore.preparedTimeBanners\" :key=\"banner.id\"\n           :style=\"gridItemStyle(banner)\" class=\"time-banner align-center\">\n        {{ banner.name }}\n      </div>\n    </div>\n\n\n    <div class=\"schedule-grid text-center\" :style=\"{ 'grid-template-columns': gridColumns }\">\n\n      <div v-if=\"nowPlayingShow\" :style=\"statusGridItemStyle(nowPlayingShow)\"\n           class=\"now-playing text-black font-semibold\">\n        <span>NOW PLAYING</span>\n      </div>\n\n      <div v-if=\"comingUpNextShow\" :style=\"statusGridItemStyle(comingUpNextShow)\"\n           class=\"coming-up-next text-black font-semibold\">\n        <span>COMING UP NEXT</span>\n      </div>\n\n\n    </div>\n\n\n    <div class=\"schedule-grid\" :style=\"{ 'grid-template-columns': gridColumns }\">\n\n\n      <!-- Loop through combinedShows directly -->\n      <div v-for=\"(item, index) in scheduleStore.nextFourHoursOfContent\"\n           :key=\"item.id\"\n           :style=\"gridItemStyle(item)\"\n           class=\"show-cell\"\n           :class=\"{'hover:cursor-pointer' : !item.placeholder}\"\n           @click=\"handleShowClick(item)\">\n        <div\n            class=\"item-content px-4 flex flex-col justify-between items-center w-full h-full overflow-hidden\"\n            :class=\"{\n        'bg-gradient-to-r from-gray-900 to-gray-700': !item.placeholder,\n        'bg-gradient-to-r from-tan-800 to-tan-600': item.placeholder,  // Assume tan-800 and tan-600 are defined in your tailwind config\n        'gradient-on-hover': !item.placeholder\n    }\">\n          <div v-if=\"item.type\" :class=\"getBadgeClass(item.type)\" class=\"badge capitalize px-2 py-1 mt-6\">{{item.type}}</div>\n\n          <div class=\"show-info flex-grow flex flex-col items-center justify-center\">\n            <h3 class=\"show-title mt-2 mb-4 w-full text-center text-lg font-semibold break-words\"\n                :class=\"{'gradient-on-hover': !item.placeholder}\">\n              {{ item.content.name || 'No Show Name' }}</h3>\n            <!--            <p>{{ item.content.id }}</p>-->\n            <!--            <p>Row: {{ item.gridRow }}</p>-->\n            <SingleImage v-if=\"item.content.image\"\n                         :image=\"item.content.image\"\n                         :alt=\"item.content.name\"\n                         :class=\"`skeleton w-full h-auto max-h-1/2screen object-cover transition-opacity duration-300 hover:opacity-80`\"/>\n            <div v-if=\"!item.placeholder\"\n                 class=\"show-time w-full text-center text-sm p-2 mt-2\"\n                 :class=\"{'gradient-on-hover': !item.placeholder}\">\n              <p v-if=\"!hasEnded\">\n                {{ formatTime(item.start_dateTime, true) }}</p>\n              <p :class=\"computeClassForConvertDateTimeToTimeAgo(item)\">\n                <span v-if=\"!hasStarted(item)\">Starting </span>\n                <span v-if=\"hasStarted(item) && !isEndingSoon(item) && !hasEnded(item)\">Started </span>\n                <span v-if=\"isEndingSoon(item)\">Ending Soon </span>\n                <span v-if=\"hasEnded(item)\">Ended </span>\n                <ConvertDateTimeToTimeAgo\n                    v-if=\"!isEndingSoon(item) && !hasEnded(item)\"\n                    :key=\"scheduleStore.baseTime\"\n                    :dateTime=\"item.start_dateTime\"\n                    :timezone=\"userStore.timezone\"\n              /></p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n    </div>\n\n<!--    <div class=\"schedule-grid\" :style=\"{ 'grid-template-columns': gridColumns }\">-->\n    <div class=\"schedule-grid h-24 bg-yellow-900 items-center text-center uppercase font-semibold my-4\">\n      <span class=\"text-4xl\">Upcoming Broadcasts</span>\n    </div>\n\n    <div class=\"infinite-scroll-container\">\n      <div v-for=\"(show, index) in displayedShows\" :key=\"index\"\n           class=\"next-show-highlight p-5 border border-gray-300 bg-gradient-to-r from-gray-900 to-gray-700 text-center hover-gradient\"\n           :class=\"{ 'last-item': index === displayedShows.length - 1 }\">\n        <div class=\"bg-gray-900 text-white py-2\">\n          <h2>{{ getPlayingTimeLabel(show.start_dateTime) }}</h2>\n        </div>\n        <div v-if=\"show.type\" :class=\"getBadgeClass(show.type)\" class=\"badge capitalize px-2 py-1 mt-6\">{{show.type}}</div>\n        <div class=\"show-details mt-2 mx-auto max-w-4xl\">\n          <h3 @click=\"handleShowClick(show)\" class=\"text-3xl mb-1 hover:text-blue-300 hover:cursor-pointer\">\n            {{ show.content.name }}</h3>\n          <p class=\"text-lg\">{{ formatLongDate(show.start_dateTime) }}</p>\n          <p class=\"text-lg\">{{ formatTime(show.start_dateTime, true) }} - {{ formatTime(show.end_dateTime, true) }}</p>\n          <ConvertDateTimeToTimeAgo\n              :key=\"scheduleStore.baseTime\"\n              :dateTime=\"show.start_dateTime\"\n              :timezone=\"userStore.timezone\"\n              class=\"text-yellow-400\"\n          />\n          <div class=\"w-full flex flex-col justify-center items-center mt-4 hover:cursor-pointer\" @click=\"handleShowClick(show)\">\n            <SingleImage v-if=\"show.content.image\"\n                         :image=\"show.content.image\"\n                         :alt=\"show.content.name\"\n                         class=\"skeleton w-3/4 md:w-1/2 lg:w-1/3 h-auto object-cover mx-auto hover:opacity-80 transition-transform duration-300 ease-in-out transform hover:scale-105\"/>\n          </div>\n          <p class=\"pt-2 text-xs uppercase text-gray-300 tracking-wider\">Duration: {{ formatDuration(show.duration_minutes) }}</p>\n        </div>\n      </div>\n      <!-- Loading Indicator -->\n      <div v-if=\"scheduleStore.isLoading\" class=\"w-full text-center mt-4\">\n      <span class=\"loading loading-dots loading-lg text-info\">\n      </span>\n      </div>\n      <div v-element-visibility=\"onElementVisibility\"></div> <!-- This element triggers the visibility event -->\n    </div>\n\n  </div>\n</template>\n<script setup>\nimport { computed, onBeforeMount, onBeforeUnmount, onMounted, ref, watch } from 'vue'\nimport { router } from '@inertiajs/vue3'\nimport { vElementVisibility } from '@vueuse/components'\nimport dayjs from 'dayjs'\nimport utc from 'dayjs/plugin/utc';\nimport timezone from 'dayjs/plugin/timezone';\nimport isSameOrBefore from 'dayjs/plugin/isSameOrBefore';\nimport isoWeek from 'dayjs/plugin/isoWeek';\nimport advancedFormat from 'dayjs/plugin/advancedFormat' // for using 'a' for AM/PM format\nimport { useScheduleStore } from '@/Stores/ScheduleStore'\nimport { useAppSettingStore } from '@/Stores/AppSettingStore'\nimport { useUserStore } from '@/Stores/UserStore'\nimport SingleImage from '@/Components/Global/Multimedia/SingleImage.vue'\nimport CurrentTime from '@/Components/Global/Schedule/CurrentTime.vue'\nimport { throttle } from '@/Utilities/Throttle'\nimport ConvertDateTimeToTimeAgo from '@/Components/Global/DateTime/ConvertDateTimeToTimeAgo.vue'\n\nconst scheduleStore = useScheduleStore()\nconst appSettingStore = useAppSettingStore()\nconst userStore = useUserStore()\n\ndayjs.extend(utc);\ndayjs.extend(timezone);\ndayjs.extend(isSameOrBefore);\ndayjs.extend(isoWeek);\ndayjs.extend(advancedFormat)\n\nlet initialLoadHandled = false\nlet initialFetchCompleted = false\n\nconst isVisible = ref(false)\nconst displayedShowsCount = ref(6)\n\nconst nextFourHoursWithHalfHourIntervals = computed(() => scheduleStore.nextFourHoursWithHalfHourIntervals)\nconst nextFourHoursOfContent = computed(() => scheduleStore.nextFourHoursOfContent)\n\nconst getPlayingTimeLabel = (start_dateTime) => {\n  const baseTime = dayjs(scheduleStore.baseTime).startOf('isoWeek');\n  const start = dayjs(start_dateTime);\n\n  // console.log('baseTime:', baseTime.format('YYYY-MM-DD HH:mm:ss'));\n  // console.log('start_dateTime:', start.format('YYYY-MM-DD HH:mm:ss'));\n\n  const diffDays = start.diff(baseTime, 'day');\n  const diffWeeks = start.diff(baseTime, 'week');\n  const diffMonths = start.diff(baseTime.startOf('month'), 'month');\n  const diffYears = start.diff(baseTime, 'year');\n\n  if (diffDays === 0) {\n    return 'Playing Today';\n  } else if (diffDays === 1) {\n    return 'Playing Tomorrow';\n  } else if (diffDays > 1 && diffDays <= 7) {\n    return 'Later This Week';\n  } else if (diffWeeks === 1) {\n    return 'Next Week';\n  } else if (diffWeeks > 1 && diffWeeks <= 2) {\n    return 'In 2 Weeks';\n  } else if (diffMonths === 0) {\n    return 'Later This Month';\n  } else if (diffMonths === 1) {\n    return 'Next Month';\n  } else if (diffMonths === 2) {\n    return 'In 2 Months';\n  } else if (diffMonths === 3) {\n    return 'In 3 Months';\n  } else if (diffMonths === 4) {\n    return 'In 4 Months';\n  } else if (diffMonths === 5) {\n    return 'In 5 Months';\n  } else if (diffMonths === 6) {\n    return 'In 6 Months';\n  } else if (diffMonths > 6 && diffMonths <= 11) {\n    return 'Later This Year';\n  } else if (diffYears === 1) {\n    return 'Next Year';\n  } else {\n    return 'In The Distant Future';\n  }\n};\n\n// Function to handle element visibility\nfunction onElementVisibility(state) {\n  isVisible.value = state;\n}\n\n// Function to load more shows\nconst loadMoreShows = async () => {\n  if (isVisible.value && !scheduleStore.isLoading) {\n    scheduleStore.isLoading = true;\n    // console.log(\"Loading more shows\");\n\n    // Fetch more schedules\n    await scheduleStore.fetchMoreSchedules();\n\n    displayedShowsCount.value += 6;\n    scheduleStore.isLoading = false;\n  }\n};\n\n// Throttle the loadMoreShows function\nconst throttledLoadMoreShows = throttle(loadMoreShows, 200);\n\n\n\n\nconst allPlaceholders = computed(() => {\n  return scheduleStore.nextFourHoursOfContent.every(item => item.placeholder)\n})\n\nconst upcomingShows = computed(() => {\n  const now = dayjs(scheduleStore.baseTime);\n\n  // Log baseTime and schedules for debugging\n  // console.log('Base Time:', now);\n  // console.log('Schedules:', scheduleStore.schedules);\n\n  // Create a set of show start times from nextFourHoursOfContent\n  const nextFourHoursShowTimes = new Set(scheduleStore.nextFourHoursOfContent.map(show => show.start_dateTime));\n  // console.log('Next Four Hours Show Times:', Array.from(nextFourHoursShowTimes));\n\n  // Filter out shows that are part of nextFourHoursOfContent by matching start_dateTime\n  const filteredShows = scheduleStore.schedules.filter(show => {\n    const isAfterNow = dayjs(show.start_dateTime).isAfter(now);\n    const isNotPlaceholder = !show.placeholder;\n    const isNotInNextFourHours = !nextFourHoursShowTimes.has(show.start_dateTime);\n    const shouldInclude = isAfterNow && isNotPlaceholder && isNotInNextFourHours;\n\n    // console.log(`Show ID: ${show.id}, Start Time: ${show.start_dateTime}, Include: ${shouldInclude}`);\n    return shouldInclude;\n  });\n\n  // Sort filtered shows by start time\n  return filteredShows.sort((a, b) => dayjs(a.start_dateTime).diff(dayjs(b.start_dateTime)));\n});\n\nconst displayedShows = computed(() => upcomingShows.value.slice(0, displayedShowsCount.value))\n\nfunction isNowPlaying(start_dateTime, duration) {\n  const now = dayjs()\n  const start = dayjs(start_dateTime)\n  const end = start.add(duration, 'minutes')\n  return now.isAfter(start) && now.isBefore(end)\n}\n\n\nconst nowPlayingShow = computed(() => {\n  return scheduleStore.nextFourHoursOfContent.find(show => show.nowPlaying)\n})\n\nconst comingUpNextShow = computed(() => {\n  return scheduleStore.nextFourHoursOfContent.find(  show => show.comingUpNext)\n})\n\n// Function to return the appropriate badge class based on item type\nconst getBadgeClass = (type) => {\n  switch (type) {\n    case 'show':\n      return 'badge-info';\n    case 'movie':\n      return 'badge-secondary';\n    case 'showEpisode':\n      return 'badge-success';\n    case 'newsStory':\n      return 'badge-warning';\n    case 'otherContent':\n    default:\n      return 'neutral';\n  }\n};\n\nonBeforeMount(() => {\n  scheduleStore.reset()\n})\n\nonMounted(async () => {\n  // scheduleStore.resetAll()\n  const now = dayjs();\n  const startDate = now.subtract(4, 'hour').toISOString();\n  const endDate = now.add(7, 'day').toISOString();\n  await scheduleStore.fetchSchedules(startDate, endDate);\n  initialFetchCompleted = true\n\n  // Watcher for isVisible.value\n  watch(isVisible, (newValue) => {\n    if (newValue && initialFetchCompleted) {\n      throttledLoadMoreShows();\n    }\n  });\n\n  // Watcher for schedules to ensure initial data load\n  watch(\n      () => scheduleStore.schedules,\n      (newSchedules) => {\n        if (newSchedules && newSchedules.length > 0 && !initialLoadHandled && initialFetchCompleted) {\n          scheduleStore.updateNextFourHours();\n          initialLoadHandled = true;\n        }\n      },\n      { immediate: true },\n  );\n\n  // Watch for changes in screen size indicators\n  watch(\n      [() => appSettingStore.isVerySmallScreen, () => appSettingStore.isSmallScreen],\n      ([newVerySmall, newSmall], [oldVerySmall, oldSmall]) => {\n        if ((newVerySmall !== oldVerySmall || newSmall !== oldSmall) && initialFetchCompleted) {\n          // console.log(`Screen size change detected: VerySmallScreen: ${newVerySmall}, SmallScreen: ${newSmall}`)\n          scheduleStore.fetchSchedules()\n        }\n      },\n      {immediate: false},  // Optionally run on initial setup\n  )\n\n  // Update the next four hours when baseTime changes\n  watch(\n      () => scheduleStore.baseTime,\n      (newTime, oldTime) => {\n        if (newTime !== oldTime && initialFetchCompleted) { // This check may be redundant but adds clarity\n          // console.log(`Base time updated from ${oldTime} to ${newTime}`)\n          scheduleStore.updateNextFourHours()\n        }\n      },\n      {immediate: true},\n  )\n\n});\n\nonBeforeUnmount(() => {\n  // Any specific cleanup logic can go here\n  // For example: cancel any ongoing API requests if applicable\n  scheduleStore.resetAll()\n});\n\n\n// Method to format time with conditional AM/PM display\nfunction formatTime(time, showMeridiem = false) {\n  return dayjs(time).format(`h:mm ${showMeridiem ? 'a' : ''}`)\n}\n\nfunction formatLongDate(date) {\n  return dayjs(date).format('dddd MMM D, YYYY')\n}\n\n// Method to format duration into a readable format\nfunction formatDuration(minutes) {\n  const hours = Math.floor(minutes / 60)\n  const remainderMinutes = minutes % 60\n  if (hours === 0) return `${remainderMinutes} minutes`\n  return `${hours} hour${hours > 1 ? 's' : ''} ${remainderMinutes > 0 ? remainderMinutes + ' minutes' : ''}`\n}\n\n// Define the function to calculate grid style directly\nfunction gridItemStyle(item) {\n  const style = {\n    gridColumn: `${item.gridStart} / span ${item.gridSpan}`,\n    gridRow: `row ${item.gridRow}`,\n  }\n  // console.log(style)  // Log to see what styles are being returned\n  return style\n}\n\n// Dedicated function to handle status row grid styling\nfunction statusGridItemStyle(item) {\n  if (!item) return {}\n\n  // Log to debug the grid positions being applied\n  // console.log(`Status Item - Grid Start: ${item.gridStart}, Grid Span: ${item.gridSpan}`)\n\n  return {\n    gridColumn: `${item.gridStart} / span ${item.gridSpan}`,\n    gridRow: `row 2`, // Assuming status rows are always in the first grid row for visibility\n  }\n}\n\n// Computed property to determine the number of columns\nconst gridColumns = computed(() => {\n  let numColumns\n  if (appSettingStore.isVerySmallScreen) {\n    numColumns = Math.floor((scheduleStore.verySmallScreenSlotHours * 60) / scheduleStore.slotIntervalMinutes)\n  } else if (appSettingStore.isSmallScreen) {\n    numColumns = Math.floor((scheduleStore.smallScreenSlotHours * 60) / scheduleStore.slotIntervalMinutes)\n  } else {\n    numColumns = Math.floor((scheduleStore.mediumScreenSlotHours * 60) / scheduleStore.slotIntervalMinutes)\n  }\n  document.documentElement.style.setProperty('--text-size', numColumns < 4 ? '0.8em' : '1em')\n  document.documentElement.style.setProperty('--text-small', numColumns < 4 ? '0.7em' : '0.8em')\n\n  return `repeat(${numColumns}, minmax(0, 1fr))` // Returns the CSS grid-template-columns value\n})\n\nconst gridPlacement = (gridStart, gridSpan) => {\n  return {\n    gridColumnStart: gridStart,\n    gridColumnEnd: `span ${gridSpan}`,\n    gridRowStart: 'auto',\n    gridRowEnd: 'span 1', // Assuming each item occupies one row height-wise\n  }\n}\n\nfunction getCellClasses(type) {\n  const baseClass = 'column-width text-sm 2xl:text-md border border-0.5 border-green-300 hover:border-blue-500 cursor-pointer'\n  switch (type) {\n    case 'show':\n      return `${baseClass} bg-gradient-show hover:bg-gradient-show-hover`\n    case 'new_release':\n      return `${baseClass} bg-gradient-new-release hover:bg-gradient-new-release-hover`\n      // Add more cases as needed\n    default:\n      return baseClass\n  }\n}\n\nfunction handleShowClick(item) {\n  let url = '' // Initialize url variable\n\n  switch (item.type) {\n    case 'show':\n      url = `/shows/${item.content.slug}/`\n      // url = `/teams/${item.content.teamSlug}/`\n      break\n    case 'movie':\n      url = `/movie/${item.content.slug}/`\n      break\n    case 'showEpisode':\n      url = `/shows/${item.content.show.slug}/episode/${item.content.slug}`\n      break\n    default:\n      // Handle default case or do nothing\n  }\n  router.visit(url) // Visit the dynamically created URL\n}\n\n\nfunction updateNowPlayingAndComingUpNext() {\n  // Logic to update nowPlaying and comingUpNext based on the current time and show data\n}\n\n\n// Helper function to determine the appropriate classes based on the gridStart and certain conditions\nconst getStatusCellClasses = (gridStart, isFirst, isSecond) => {\n  const classes = ['status-cell'] // Base class for all status cells\n  if (isFirst && gridStart === 1) {\n    // 'Now Playing' is only assigned if it's the first item and it starts at the first grid column\n    classes.push('now-playing')\n  } else if (isSecond && gridStart !== 1) {\n    // 'Coming Up Next' is only assigned to the second item and it should not start at the first grid column\n    classes.push('coming-up-next')\n  } else {\n    // Default class for other cells or when no specific condition is met\n    classes.push('status-cell-empty')\n  }\n  return classes\n}\n\n// Compute the total occupied columns\nconst occupiedCols = computed(() => {\n  let cols = 0;\n  if (nowPlayingShow.value) {\n    cols += nowPlayingShow.value.cols;\n  }\n  if (comingUpNextShow.value) {\n    cols += comingUpNextShow.value.cols;\n  }\n  return cols;\n});\n\n// Check if there are remaining columns to fill\nconst hasRemainingCols = computed(() => {\n  return gridColumns > occupiedCols.value;\n});\n\n// Style for remaining columns\nconst remainingColsStyle = computed(() => {\n  if (hasRemainingCols.value) {\n    return {\n      'grid-column': `span ${gridColumns - occupiedCols.value}`,\n    };\n  }\n  return {};\n});\n\nconst hasStarted = (item) => dayjs(item.start_dateTime).isBefore(scheduleStore.baseTime);\nconst isEndingSoon = (item) => dayjs(item.end_dateTime).isAfter(scheduleStore.baseTime) && dayjs(item.end_dateTime).diff(scheduleStore.baseTime, 'minute') <= 5;\nconst hasEnded = (item) => dayjs(item.end_dateTime).isBefore(scheduleStore.baseTime);\n\nconst computeClassForConvertDateTimeToTimeAgo = (item) => {\n  if (isEndingSoon(item)) {\n    return 'text-orange-500';\n  } else if (!hasStarted(item)) {\n    return 'text-green-500';\n  } else if (hasEnded(item)) {\n    return 'text-gray-500'; // You can choose any color that signifies \"Ended\"\n  } else {\n    return 'text-yellow-500';\n  }\n};\nfunction openModal(modalName) {\n  document.getElementById(modalName).showModal()\n}\n</script>\n\n<style scoped>\n\n.hover-gradient:hover {\n  background: linear-gradient(to right, rgba(30, 58, 138, 0.2), rgba(30, 64, 175, 0.2));\n}\n\n.bg-gradient-show {\n  background: linear-gradient(to right, #1f4037, #99f2c8); /* Example green gradient */\n}\n\n.bg-gradient-show-hover:hover {\n  background: linear-gradient(to right, #66D3FA, #6E45E2); /* Example green gradient on hover */\n}\n\n.bg-gradient-new-release {\n  background: linear-gradient(to right, #654ea3, #eaafc8); /* Example purple gradient */\n}\n\n.bg-gradient-new-release-hover:hover {\n  background: linear-gradient(to right, #c2e59c, #64b3f4); /* Example purple gradient on hover */\n}\n\n\n.column-width {\n  @apply w-16\n}\n\n\n.schedule-item {\n  background: #f0f0f0;\n  color: #000;\n  padding: 10px;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  align-items: center;\n}\n\n.time-slot {\n  text-align: center;\n  padding: 10px 0;\n  border-bottom: 1px solid #fff;\n  grid-row: 1; /* Ensures all time slots are in the first row */\n}\n\n.time-banner {\n  background-color: rgba(0, 123, 255, 0.5); /* Example styling */\n  text-align: center;\n  border: 1px solid white; /* White border */\n  padding: 10px;\n}\n\n.show-cell {\n  display: flex; /* Ensure this is set to flex to control child elements with flex properties */\n  flex-direction: column; /* Align children in a column */\n  justify-content: center; /* Align items to the top */\n  align-items: center; /* Center children horizontally */\n  border: 1px solid #ccc;\n  background-color: #f8f8f8;\n  width: 100%; /* Ensures cell uses full width of its grid column */\n  height: 100%; /* Ensures cell uses full height */\n}\n\n.time-cell {\n  border: 1px solid #fff;\n  text-align: center; /* Center text if desired */\n  padding: 10px;\n}\n\n.content {\n  background: #f0f0f0;\n  padding: 8px;\n  border: 1px solid #ddd;\n}\n\n.placeholder {\n  background: #ccc;\n  width: 100%;\n  height: 60px;\n}\n\n\n.schedule-grid {\n  display: grid;\n  width: 100%;\n}\n\n.header-row {\n  display: contents; /* This makes the header-row itself not generate a box, allowing .time-cell to be direct children of .schedule-grid */\n}\n\n.content-row {\n  display: contents; /* This makes the row container disappear, directly using the grid defined in parent */\n}\n\n.schedule-cell {\n  background: #333;\n  color: #fff;\n  text-align: center;\n  padding: 8px;\n}\n\n.grid-container {\n  display: grid;\n  width: 100%;\n  grid-gap: 10px;\n}\n\n.grid-item {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border: 1px solid #ccc;\n}\n\n\n.status-row {\n  display: grid;\n  width: 100%;\n  align-items: center;\n}\n\n\n.status-cell {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 8px;\n  color: white;\n  width: 100%;\n  height: 100%;\n  font-weight: bold;\n  opacity: 0.8;\n  transition: background-color 0.3s ease;\n}\n\n.status-cell span {\n  display: block;\n  padding: 4px 8px;\n  border-radius: 4px;\n  text-align: center;\n}\n\n/* Optional: If you want the empty cells to have a slight indication they are there */\n.status-cell:empty::after {\n  content: \"\";\n  display: block;\n  width: 100%;\n  height: 100%;\n  background: none; /* Adjust this to a very subtle color or keep transparent */\n}\n\n/* Custom hover effect for the parent that affects children */\n.show-cell:hover .gradient-on-hover {\n  background-image: linear-gradient(to right, rgba(0, 123, 144), rgba(0, 105, 128));\n}\n\n.now-playing, .coming-up-next {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 10px;\n  border: 1px solid #ccc;\n}\n\n.now-playing {\n  background-color: #4CAF50; /* Green for now playing */\n  animation: pulseAnimation 2s infinite;\n}\n\n.coming-up-next {\n  background-color: #FF9800; /* Orange for coming up next */\n}\n\n\n@keyframes pulseAnimation {\n  0% {\n    opacity: 0.75;\n  }\n  50% {\n    opacity: 1;\n  }\n  100% {\n    opacity: 0.75;\n  }\n}\n\n/* Responsive visibility */\n@media (min-width: 1280px) {\n  /* 2xl */\n  .xl\\:hidden {\n    display: none;\n  }\n}\n\n@media (min-width: 1024px) {\n  /* xl */\n  .lg\\:hidden {\n    display: none;\n  }\n}\n\n</style>\n","// Utilities/Throttle.js\n\nexport function throttle(fn, limit) {\n    let lastFn;\n    let lastRan;\n    return function() {\n        const context = this;\n        const args = arguments;\n        if (!lastRan) {\n            fn.apply(context, args);\n            lastRan = Date.now();\n        } else {\n            clearTimeout(lastFn);\n            lastFn = setTimeout(function() {\n                if ((Date.now() - lastRan) >= limit) {\n                    fn.apply(context, args);\n                    lastRan = Date.now();\n                }\n            }, limit - (Date.now() - lastRan));\n        }\n    }\n}\n","import api from \"!../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../../../node_modules/css-loader/dist/cjs.js??clonedRuleSet-10.use[1]!../../../../../node_modules/vue-loader/dist/stylePostLoader.js!../../../../../node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-10.use[2]!../../../../../node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./ScheduleGridContainer.vue?vue&type=style&index=0&id=a4d862a4&scoped=true&lang=css\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","import script from \"./ScheduleGridContainer.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./ScheduleGridContainer.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./ScheduleGridContainer.vue?vue&type=style&index=0&id=a4d862a4&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-a4d862a4\"]])\n\nexport default __exports__","import script from \"./Index.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Index.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<script>\n\n// DELETE THIS SCRIPT TAG\n// This is only for notes about building this page.\n\n// The schedule page will allow free users to look back 72 hours and look ahead 72 hours.\n// On a mobile device it's easy enough to create a forever scroll for looking forward.\n// The easter egg will be scrolling UP to look back at the past 72 hours.\n// Free users can watch any of the content in the past 72 hours for free.\n// Users are given credits each month to watch premium notTV content.\n// They may purchase more credits, or subscribe for unlimited access.\n// They may also use credits to purchase licenses to content from creators.\n// Credits may also be spent in the shop.\n\n</script>\n\n<template>\n  <Head title=\"Schedule\"/>\n\n  <div ref=\"scrollContainer\" class=\"place-self-center flex flex-col w-full overscroll-x-none pb-64 px-4\">\n    <div id=\"topDiv\" class=\"flex justify-end px-5\">\n      <div class=\"relative w-32 h-32 mt-8 -mb-8 mr-8\">\n        <div class=\"absolute top-3 left-0 w-full h-full flex justify-center items-center z-20\"><h1\n            class=\"text-4xl font-bold text-white bg-black bg-opacity-80 px-4 py-1 text-center\">Broadcast<br/>Schedule\n        </h1></div>\n        <div class=\"absolute top-3 left-0 w-full h-full flex justify-center items-center z-10\"><img\n            src=\"/storage/images/Ping.png\" alt=\"notTV Ping\"/></div>\n      </div>\n\n    </div>\n    <Message v-if=\"appSettingStore.showFlashMessage\" :flash=\"$page.props.flash\"/>\n\n    <ScheduleGridContainer/>\n\n    <PopUpModal :id=\"`goToNowPlayingModal`\">\n      <template v-slot:header>Now Playing</template>\n      <template v-slot:main><span class=\"text-orange-500\">This modal is temporary. This will take you to the now playing show or episode page.</span>\n      </template>\n    </PopUpModal>\n    <PopUpModal :id=\"`getReminderModal`\">\n      <template v-slot:header>Set Reminder</template>\n      <template v-slot:main><span class=\"text-orange-500\">This modal is temporary. Set a reminder when this show starts and/or subscribe to the show to get all notifications when new episodes are released or the show goes live. <br/><br/><span\n          class=\"font-semibold text-yellow-600\">NOTE: Monthly and Yearly contributors get first access to new features.</span></span>\n      </template>\n    </PopUpModal>\n\n  </div>\n</template>\n\n<script setup>\nimport { usePageSetup } from '@/Utilities/PageSetup'\nimport { useAppSettingStore } from '@/Stores/AppSettingStore'\nimport { useUserStore } from '@/Stores/UserStore'\nimport { useScheduleStore } from '@/Stores/ScheduleStore'\nimport Message from '@/Components/Global/Modals/Messages'\nimport PopUpModal from '@/Components/Global/Modals/PopUpModal'\nimport ScheduleGridContainer from '@/Components/Global/Schedule/ScheduleGridContainer.vue'\nimport { onMounted, ref, watch } from 'vue'\nimport dayjs from 'dayjs'\n\nusePageSetup('schedule')\n\nconst appSettingStore = useAppSettingStore()\nconst userStore = useUserStore()\nconst scheduleStore = useScheduleStore()\n\nlet props = defineProps({\n  can: Object,\n})\n\n// onMounted(() => {\n//   scheduleStore.initializeTimeSlots();\n// });\n\n// Define a reactive watcher on the timezone\n// This watcher will call fetchSchedules whenever the timezone changes and is not null\n// watch(\n//     () => userStore.timezone,\n//     async (newTimezone, oldTimezone) => {\n//       // Ensure the timezone is set before calling preloadWeeklyContent\n//       if (newTimezone) {\n//         const startDate = dayjs();\n//         const endDate = startDate.add(4, 'hour');\n//         await scheduleStore.fetchSchedules(startDate.format(), endDate.format());\n//         console.log('Preload schedules...')\n//       }\n//     },\n//     {immediate: true}, // This option ensures the watcher is triggered immediately on mount\n// )\n\nonMounted(() => {\n  const topDiv = document.getElementById('topDiv')\n  if (topDiv) {\n    topDiv.scrollIntoView({behavior: 'smooth'})\n  }\n})\n\nfunction openModal(modalName) {\n  document.getElementById(modalName).showModal()\n}\n\n</script>\n"],"names":["dayjs","utc","timezone","_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","delegateYield","asyncGeneratorStep","gen","reject","_next","_throw","key","info","error","_asyncToGenerator","fn","self","args","arguments","apply","err","undefined","ownKeys","getOwnPropertySymbols","filter","getOwnPropertyDescriptor","_objectSpread","_defineProperty","getOwnPropertyDescriptors","defineProperties","obj","toPrimitive","String","Number","_toPrimitive","convertScheduleToTimezone","scheduleData","userStore","useUserStore","data","map","item","startTimeInUserTz","start_dateTime","formatDateTimeFromUtcToUserTimezone","endTimeInUserTz","end_dateTime","getUpcomingContentDates","viewingWindowStart","dates","start","add","toDate","weekOfYear","advancedFormat","isSameOrAfter","isSameOrBefore","getTimeZone","initialState","baseTime","tz","currentHalfHour","startOf","minute","fourHoursLater","currentMonth","selectedDay","currentWeekStart","currentWeekEnd","endOf","nextFourHoursOfContent","nextFourHoursOfContentWithPlaceholders","fiveDaySixHourSchedule","schedules","isLoading","nextPage","hasMore","todaysContent","weeklyContent","dataFetchLog","savingToSchedule","slotIntervalMinutes","mediumScreenSlotHours","smallScreenSlotHours","verySmallScreenSlotHours","timeSlots","timeBanners","id","startTime","duration","useScheduleStore","defineStore","state","actions","resetAll","assign","this","setSelectedDay","day","_this","_callee","_context","fetchWeekDataIfNeeded","setSelectedDayToToday","now","changeDay","days","_this2","_callee2","currentTimeZone","currentTime","newDay","_context2","hour","shiftHours","hours","_this3","_callee3","_context3","isSame","isElevenPM","date","subtractMonth","_this4","_callee4","_context4","subtract","t0","console","concat","addMonth","_this5","_callee5","_context5","fetchFiveDaySixHourSchedule","_this6","_callee6","response","_context6","axios","get","userTimezone","fetchTodaysContent","_this7","_callee7","_context7","preloadWeeklyContent","_this8","_callee8","currentDate","_context8","log","loadWeekFromDate","fetchSchedules","startDate","endDate","_this9","_callee9","dayStartDate","dayEndDate","fullISOStartDate","fullISOEndDate","newData","_context9","toISOString","_toConsumableArray","Set","JSON","stringify","parse","fetchMoreSchedules","_this10","_callee10","lastSchedule","_context10","format","_this11","_callee11","formattedDate","dayDate","fullISODate","_context11","post","index","findIndex","updateFetchLogs","weekStart","weekEnd","fetchTime","existingLogIndex","lastFetch","needsDataForWeek","formatISODate","weekStartStr","weekEndStr","some","logWeekStartStr","logWeekEndStr","calculateExtendedEndForUpcomingContent","checkAndFetchForUpcomingContent","_this12","_callee12","upcomingDates","fifteenMinutesAgo","_iterator","_step","_loop","_context13","_createForOfIteratorHelper","dateString","_context12","content","contentDate","lastFetchedTime","isFresh","fetchDataAndUpdateLog","t1","_this13","_callee13","_context14","_this14","_callee14","_context15","updateBaseTime","time","setBaseTime","newTime","updateNextFourHours","_this15","_callee15","_context16","updateTimeRange","setTimeSlots","prepareShowsForGrid","baseDate","roundedMinutes","second","millisecond","initializeTimeSlots","durationHours","intervalMinutes","slots","slotTime","createTimeSlots","slotHours","appSettingStore","useAppSettingStore","isVerySmallScreen","isSmallScreen","totalSlots","Array","isArray","shows","filterShowsForTimeRange","processedShows","calculateGridSlots","showsWithStatusFlags","processShows","_this$updateColumnOcc","updateColumnOccupancy","colOccupancy","maxRowUsed","gridItems","fillGapsAndCreatePlaceholders","combinedShows","sortShowsByPosition","_this16","show","duration_minutes","warn","showStart","showEnd","isInTimeRange","isBefore","isAfter","firstTimeSlot","lastTimeSlot","slotIndex","slot","Math","max","endSlotIndex","span","gridStart","gridSpan","_this17","comingUpNextSet","end","nowPlaying","placeholder","gridRow","comingUpNext","cols","fill","row","findAndFillGapsForSingleRow","gapStart","has","createPlaceholder","createBlankSpotPlaceholder","sort","b","priority","getters","preparedTimeBanners","timeZone","todayStart","tomorrowStart","yesterdayStart","flatMap","banner","bannerTodayStart","parseInt","split","bannerTodayEnd","clone","bannerTomorrowStart","bannerTomorrowEnd","bannerYesterdayStart","bannerYesterdayEnd","startSlotIndex","nextFourHoursWithHalfHourIntervals","intervals","current","formatted","dateTimeString","upcomingContent","showsGroupedByStartTime","reduce","acc","itemStart","valueOf","group","selected","unix","nextSixHours","adjustedStart","dateMessage","startDay","startOfDay","isToday","isYesterday","isTomorrow","currentMonthIndex","month","currentMonthName","currentYear","year","today","viewingStart","daysInMonth","startOfCurrentMonth","endOfCurrentMonth","startOfGrid","endOfGrid","usePageSetup","pageName","videoPlayerStore","useVideoPlayerStore","currentPage","showFlashMessage","pageIsHidden","isMobile","window","innerWidth","fullPage","ott","showOttButtons","makeVideoTopRight","pageReload","pageWasReloaded","location","reload","router","on","event","search","shouldScrollToTop","requestAnimationFrame","topDiv","document","getElementById","scrollIntoView","behavior","scrollTo","setPrevUrl","noLayout","watch","newValue","immediate","___CSS_LOADER_EXPORT___","module","props","__props","clearFlashMessage","computed","flash","success","message","warning","_ref","route","notificationStore","useNotificationStore","scheduleStore","intervalId","timeoutId","initialUpdateDone","currentDay","updateCurrentTime","minutes","onMounted","msUntilNextMinute","setTimeout","updateImmediately","clearInterval","setInterval","startAutoUpdateTime","onUnmounted","clearTimeout","set","_value$split$map2","_slicedToArray","isoWeek","initialLoadHandled","initialFetchCompleted","isVisible","ref","displayedShowsCount","onElementVisibility","limit","lastFn","lastRan","loadMoreShows","throttledLoadMoreShows","context","Date","upcomingShows","every","nextFourHoursShowTimes","isAfterNow","isNotPlaceholder","isNotInNextFourHours","diff","displayedShows","nowPlayingShow","find","comingUpNextShow","getBadgeClass","formatTime","showMeridiem","gridItemStyle","gridColumn","statusGridItemStyle","onBeforeMount","newSchedules","_ref3","_ref4","_ref5","newVerySmall","newSmall","_ref6","oldVerySmall","oldSmall","oldTime","onBeforeUnmount","gridColumns","numColumns","floor","documentElement","style","setProperty","handleShowClick","url","slug","visit","occupiedCols","hasRemainingCols","hasStarted","isEndingSoon","hasEnded","computeClassForConvertDateTimeToTimeAgo","diffDays","diffWeeks","diffMonths","diffYears","remainderMinutes","options","locals"],"sourceRoot":""}