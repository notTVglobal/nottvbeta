{"version":3,"file":"js/5832.js","mappings":";kOAKAA,IAAAA,OAAaC,KACbD,IAAAA,OAAaE,8xDCLbC,EAAA,kBAAAC,CAAA,MAAAC,EAAAD,EAAA,GAAAE,EAAAC,OAAAC,UAAAC,EAAAH,EAAAI,eAAAC,EAAAJ,OAAAK,gBAAA,SAAAP,EAAAD,EAAAE,GAAAD,EAAAD,GAAAE,EAAAO,KAAA,EAAAC,EAAA,mBAAAC,OAAAA,OAAA,GAAAC,EAAAF,EAAAG,UAAA,aAAAC,EAAAJ,EAAAK,eAAA,kBAAAC,EAAAN,EAAAO,aAAA,yBAAAC,EAAAjB,EAAAD,EAAAE,GAAA,OAAAC,OAAAK,eAAAP,EAAAD,EAAA,CAAAS,MAAAP,EAAAiB,YAAA,EAAAC,cAAA,EAAAC,UAAA,IAAApB,EAAAD,EAAA,KAAAkB,EAAA,aAAAjB,GAAAiB,EAAA,SAAAjB,EAAAD,EAAAE,GAAA,OAAAD,EAAAD,GAAAE,CAAA,WAAAoB,EAAArB,EAAAD,EAAAE,EAAAG,GAAA,IAAAK,EAAAV,GAAAA,EAAAI,qBAAAmB,EAAAvB,EAAAuB,EAAAX,EAAAT,OAAAqB,OAAAd,EAAAN,WAAAU,EAAA,IAAAW,EAAApB,GAAA,WAAAE,EAAAK,EAAA,WAAAH,MAAAiB,EAAAzB,EAAAC,EAAAY,KAAAF,CAAA,UAAAe,EAAA1B,EAAAD,EAAAE,GAAA,WAAA0B,KAAA,SAAAC,IAAA5B,EAAA6B,KAAA9B,EAAAE,GAAA,OAAAD,GAAA,OAAA2B,KAAA,QAAAC,IAAA5B,EAAA,EAAAD,EAAAsB,KAAAA,EAAA,IAAAS,EAAA,iBAAAC,EAAA,iBAAAC,EAAA,YAAAC,EAAA,YAAAC,EAAA,YAAAZ,IAAA,UAAAa,IAAA,UAAAC,IAAA,KAAAC,EAAA,GAAApB,EAAAoB,EAAA1B,GAAA,8BAAA2B,EAAApC,OAAAqC,eAAAC,EAAAF,GAAAA,EAAAA,EAAAG,EAAA,MAAAD,GAAAA,IAAAvC,GAAAG,EAAAyB,KAAAW,EAAA7B,KAAA0B,EAAAG,GAAA,IAAAE,EAAAN,EAAAjC,UAAAmB,EAAAnB,UAAAD,OAAAqB,OAAAc,GAAA,SAAAM,EAAA3C,GAAA,0BAAA4C,SAAA,SAAA7C,GAAAkB,EAAAjB,EAAAD,GAAA,SAAAC,GAAA,YAAA6C,QAAA9C,EAAAC,EAAA,gBAAA8C,EAAA9C,EAAAD,GAAA,SAAAgD,EAAA9C,EAAAK,EAAAG,EAAAE,GAAA,IAAAE,EAAAa,EAAA1B,EAAAC,GAAAD,EAAAM,GAAA,aAAAO,EAAAc,KAAA,KAAAZ,EAAAF,EAAAe,IAAAE,EAAAf,EAAAP,MAAA,OAAAsB,GAAA,UAAAkB,EAAAlB,IAAA1B,EAAAyB,KAAAC,EAAA,WAAA/B,EAAAkD,QAAAnB,EAAAoB,SAAAC,MAAA,SAAAnD,GAAA+C,EAAA,OAAA/C,EAAAS,EAAAE,EAAA,aAAAX,GAAA+C,EAAA,QAAA/C,EAAAS,EAAAE,EAAA,IAAAZ,EAAAkD,QAAAnB,GAAAqB,MAAA,SAAAnD,GAAAe,EAAAP,MAAAR,EAAAS,EAAAM,EAAA,aAAAf,GAAA,OAAA+C,EAAA,QAAA/C,EAAAS,EAAAE,EAAA,IAAAA,EAAAE,EAAAe,IAAA,KAAA3B,EAAAK,EAAA,gBAAAE,MAAA,SAAAR,EAAAI,GAAA,SAAAgD,IAAA,WAAArD,GAAA,SAAAA,EAAAE,GAAA8C,EAAA/C,EAAAI,EAAAL,EAAAE,EAAA,WAAAA,EAAAA,EAAAA,EAAAkD,KAAAC,EAAAA,GAAAA,GAAA,aAAA3B,EAAA1B,EAAAE,EAAAG,GAAA,IAAAE,EAAAwB,EAAA,gBAAArB,EAAAE,GAAA,GAAAL,IAAA0B,EAAA,UAAAqB,MAAA,mCAAA/C,IAAA2B,EAAA,cAAAxB,EAAA,MAAAE,EAAA,OAAAH,MAAAR,EAAAsD,MAAA,OAAAlD,EAAAmD,OAAA9C,EAAAL,EAAAwB,IAAAjB,IAAA,KAAAE,EAAAT,EAAAoD,SAAA,GAAA3C,EAAA,KAAAE,EAAA0C,EAAA5C,EAAAT,GAAA,GAAAW,EAAA,IAAAA,IAAAmB,EAAA,gBAAAnB,CAAA,cAAAX,EAAAmD,OAAAnD,EAAAsD,KAAAtD,EAAAuD,MAAAvD,EAAAwB,SAAA,aAAAxB,EAAAmD,OAAA,IAAAjD,IAAAwB,EAAA,MAAAxB,EAAA2B,EAAA7B,EAAAwB,IAAAxB,EAAAwD,kBAAAxD,EAAAwB,IAAA,gBAAAxB,EAAAmD,QAAAnD,EAAAyD,OAAA,SAAAzD,EAAAwB,KAAAtB,EAAA0B,EAAA,IAAAK,EAAAX,EAAA3B,EAAAE,EAAAG,GAAA,cAAAiC,EAAAV,KAAA,IAAArB,EAAAF,EAAAkD,KAAArB,EAAAF,EAAAM,EAAAT,MAAAM,EAAA,gBAAA1B,MAAA6B,EAAAT,IAAA0B,KAAAlD,EAAAkD,KAAA,WAAAjB,EAAAV,OAAArB,EAAA2B,EAAA7B,EAAAmD,OAAA,QAAAnD,EAAAwB,IAAAS,EAAAT,IAAA,YAAA6B,EAAA1D,EAAAE,GAAA,IAAAG,EAAAH,EAAAsD,OAAAjD,EAAAP,EAAAa,SAAAR,GAAA,GAAAE,IAAAN,EAAA,OAAAC,EAAAuD,SAAA,eAAApD,GAAAL,EAAAa,SAAA,SAAAX,EAAAsD,OAAA,SAAAtD,EAAA2B,IAAA5B,EAAAyD,EAAA1D,EAAAE,GAAA,UAAAA,EAAAsD,SAAA,WAAAnD,IAAAH,EAAAsD,OAAA,QAAAtD,EAAA2B,IAAA,IAAAkC,UAAA,oCAAA1D,EAAA,aAAA8B,EAAA,IAAAzB,EAAAiB,EAAApB,EAAAP,EAAAa,SAAAX,EAAA2B,KAAA,aAAAnB,EAAAkB,KAAA,OAAA1B,EAAAsD,OAAA,QAAAtD,EAAA2B,IAAAnB,EAAAmB,IAAA3B,EAAAuD,SAAA,KAAAtB,EAAA,IAAAvB,EAAAF,EAAAmB,IAAA,OAAAjB,EAAAA,EAAA2C,MAAArD,EAAAF,EAAAgE,YAAApD,EAAAH,MAAAP,EAAA+D,KAAAjE,EAAAkE,QAAA,WAAAhE,EAAAsD,SAAAtD,EAAAsD,OAAA,OAAAtD,EAAA2B,IAAA5B,GAAAC,EAAAuD,SAAA,KAAAtB,GAAAvB,GAAAV,EAAAsD,OAAA,QAAAtD,EAAA2B,IAAA,IAAAkC,UAAA,oCAAA7D,EAAAuD,SAAA,KAAAtB,EAAA,UAAAgC,EAAAlE,GAAA,IAAAD,EAAA,CAAAoE,OAAAnE,EAAA,SAAAA,IAAAD,EAAAqE,SAAApE,EAAA,SAAAA,IAAAD,EAAAsE,WAAArE,EAAA,GAAAD,EAAAuE,SAAAtE,EAAA,SAAAuE,WAAAC,KAAAzE,EAAA,UAAA0E,EAAAzE,GAAA,IAAAD,EAAAC,EAAA0E,YAAA,GAAA3E,EAAA4B,KAAA,gBAAA5B,EAAA6B,IAAA5B,EAAA0E,WAAA3E,CAAA,UAAAyB,EAAAxB,GAAA,KAAAuE,WAAA,EAAAJ,OAAA,SAAAnE,EAAA4C,QAAAsB,EAAA,WAAAS,OAAA,YAAAlC,EAAA1C,GAAA,GAAAA,GAAA,KAAAA,EAAA,KAAAE,EAAAF,EAAAY,GAAA,GAAAV,EAAA,OAAAA,EAAA4B,KAAA9B,GAAA,sBAAAA,EAAAiE,KAAA,OAAAjE,EAAA,IAAA6E,MAAA7E,EAAA8E,QAAA,KAAAvE,GAAA,EAAAG,EAAA,SAAAuD,IAAA,OAAA1D,EAAAP,EAAA8E,QAAA,GAAAzE,EAAAyB,KAAA9B,EAAAO,GAAA,OAAA0D,EAAAxD,MAAAT,EAAAO,GAAA0D,EAAAV,MAAA,EAAAU,EAAA,OAAAA,EAAAxD,MAAAR,EAAAgE,EAAAV,MAAA,EAAAU,CAAA,SAAAvD,EAAAuD,KAAAvD,CAAA,YAAAqD,UAAAd,EAAAjD,GAAA,2BAAAoC,EAAAhC,UAAAiC,EAAA9B,EAAAoC,EAAA,eAAAlC,MAAA4B,EAAAjB,cAAA,IAAAb,EAAA8B,EAAA,eAAA5B,MAAA2B,EAAAhB,cAAA,IAAAgB,EAAA2C,YAAA7D,EAAAmB,EAAArB,EAAA,qBAAAhB,EAAAgF,oBAAA,SAAA/E,GAAA,IAAAD,EAAA,mBAAAC,GAAAA,EAAAgF,YAAA,QAAAjF,IAAAA,IAAAoC,GAAA,uBAAApC,EAAA+E,aAAA/E,EAAAkF,MAAA,EAAAlF,EAAAmF,KAAA,SAAAlF,GAAA,OAAAE,OAAAiF,eAAAjF,OAAAiF,eAAAnF,EAAAoC,IAAApC,EAAAoF,UAAAhD,EAAAnB,EAAAjB,EAAAe,EAAA,sBAAAf,EAAAG,UAAAD,OAAAqB,OAAAmB,GAAA1C,CAAA,EAAAD,EAAAsF,MAAA,SAAArF,GAAA,OAAAkD,QAAAlD,EAAA,EAAA2C,EAAAG,EAAA3C,WAAAc,EAAA6B,EAAA3C,UAAAU,GAAA,0BAAAd,EAAA+C,cAAAA,EAAA/C,EAAAuF,MAAA,SAAAtF,EAAAC,EAAAG,EAAAE,EAAAG,QAAA,IAAAA,IAAAA,EAAA8E,SAAA,IAAA5E,EAAA,IAAAmC,EAAAzB,EAAArB,EAAAC,EAAAG,EAAAE,GAAAG,GAAA,OAAAV,EAAAgF,oBAAA9E,GAAAU,EAAAA,EAAAqD,OAAAb,MAAA,SAAAnD,GAAA,OAAAA,EAAAsD,KAAAtD,EAAAQ,MAAAG,EAAAqD,MAAA,KAAArB,EAAAD,GAAAzB,EAAAyB,EAAA3B,EAAA,aAAAE,EAAAyB,EAAA/B,GAAA,0BAAAM,EAAAyB,EAAA,qDAAA3C,EAAAyF,KAAA,SAAAxF,GAAA,IAAAD,EAAAG,OAAAF,GAAAC,EAAA,WAAAG,KAAAL,EAAAE,EAAAuE,KAAApE,GAAA,OAAAH,EAAAwF,UAAA,SAAAzB,IAAA,KAAA/D,EAAA4E,QAAA,KAAA7E,EAAAC,EAAAyF,MAAA,GAAA1F,KAAAD,EAAA,OAAAiE,EAAAxD,MAAAR,EAAAgE,EAAAV,MAAA,EAAAU,CAAA,QAAAA,EAAAV,MAAA,EAAAU,CAAA,GAAAjE,EAAA0C,OAAAA,EAAAjB,EAAArB,UAAA,CAAA6E,YAAAxD,EAAAmD,MAAA,SAAA5E,GAAA,QAAA4F,KAAA,OAAA3B,KAAA,OAAAN,KAAA,KAAAC,MAAA3D,EAAA,KAAAsD,MAAA,OAAAE,SAAA,UAAAD,OAAA,YAAA3B,IAAA5B,EAAA,KAAAuE,WAAA3B,QAAA6B,IAAA1E,EAAA,QAAAE,KAAA,WAAAA,EAAA2F,OAAA,IAAAxF,EAAAyB,KAAA,KAAA5B,KAAA2E,OAAA3E,EAAA4F,MAAA,WAAA5F,GAAAD,EAAA,EAAA8F,KAAA,gBAAAxC,MAAA,MAAAtD,EAAA,KAAAuE,WAAA,GAAAG,WAAA,aAAA1E,EAAA2B,KAAA,MAAA3B,EAAA4B,IAAA,YAAAmE,IAAA,EAAAnC,kBAAA,SAAA7D,GAAA,QAAAuD,KAAA,MAAAvD,EAAA,IAAAE,EAAA,cAAA+F,EAAA5F,EAAAE,GAAA,OAAAK,EAAAgB,KAAA,QAAAhB,EAAAiB,IAAA7B,EAAAE,EAAA+D,KAAA5D,EAAAE,IAAAL,EAAAsD,OAAA,OAAAtD,EAAA2B,IAAA5B,KAAAM,CAAA,SAAAA,EAAA,KAAAiE,WAAAM,OAAA,EAAAvE,GAAA,IAAAA,EAAA,KAAAG,EAAA,KAAA8D,WAAAjE,GAAAK,EAAAF,EAAAiE,WAAA,YAAAjE,EAAA0D,OAAA,OAAA6B,EAAA,UAAAvF,EAAA0D,QAAA,KAAAwB,KAAA,KAAA9E,EAAAT,EAAAyB,KAAApB,EAAA,YAAAM,EAAAX,EAAAyB,KAAApB,EAAA,iBAAAI,GAAAE,EAAA,SAAA4E,KAAAlF,EAAA2D,SAAA,OAAA4B,EAAAvF,EAAA2D,UAAA,WAAAuB,KAAAlF,EAAA4D,WAAA,OAAA2B,EAAAvF,EAAA4D,WAAA,SAAAxD,GAAA,QAAA8E,KAAAlF,EAAA2D,SAAA,OAAA4B,EAAAvF,EAAA2D,UAAA,YAAArD,EAAA,UAAAsC,MAAA,kDAAAsC,KAAAlF,EAAA4D,WAAA,OAAA2B,EAAAvF,EAAA4D,WAAA,KAAAR,OAAA,SAAA7D,EAAAD,GAAA,QAAAE,EAAA,KAAAsE,WAAAM,OAAA,EAAA5E,GAAA,IAAAA,EAAA,KAAAK,EAAA,KAAAiE,WAAAtE,GAAA,GAAAK,EAAA6D,QAAA,KAAAwB,MAAAvF,EAAAyB,KAAAvB,EAAA,oBAAAqF,KAAArF,EAAA+D,WAAA,KAAA5D,EAAAH,EAAA,OAAAG,IAAA,UAAAT,GAAA,aAAAA,IAAAS,EAAA0D,QAAApE,GAAAA,GAAAU,EAAA4D,aAAA5D,EAAA,UAAAE,EAAAF,EAAAA,EAAAiE,WAAA,UAAA/D,EAAAgB,KAAA3B,EAAAW,EAAAiB,IAAA7B,EAAAU,GAAA,KAAA8C,OAAA,YAAAS,KAAAvD,EAAA4D,WAAAnC,GAAA,KAAA+D,SAAAtF,EAAA,EAAAsF,SAAA,SAAAjG,EAAAD,GAAA,aAAAC,EAAA2B,KAAA,MAAA3B,EAAA4B,IAAA,gBAAA5B,EAAA2B,MAAA,aAAA3B,EAAA2B,KAAA,KAAAqC,KAAAhE,EAAA4B,IAAA,WAAA5B,EAAA2B,MAAA,KAAAoE,KAAA,KAAAnE,IAAA5B,EAAA4B,IAAA,KAAA2B,OAAA,cAAAS,KAAA,kBAAAhE,EAAA2B,MAAA5B,IAAA,KAAAiE,KAAAjE,GAAAmC,CAAA,EAAAgE,OAAA,SAAAlG,GAAA,QAAAD,EAAA,KAAAwE,WAAAM,OAAA,EAAA9E,GAAA,IAAAA,EAAA,KAAAE,EAAA,KAAAsE,WAAAxE,GAAA,GAAAE,EAAAoE,aAAArE,EAAA,YAAAiG,SAAAhG,EAAAyE,WAAAzE,EAAAqE,UAAAG,EAAAxE,GAAAiC,CAAA,kBAAAlC,GAAA,QAAAD,EAAA,KAAAwE,WAAAM,OAAA,EAAA9E,GAAA,IAAAA,EAAA,KAAAE,EAAA,KAAAsE,WAAAxE,GAAA,GAAAE,EAAAkE,SAAAnE,EAAA,KAAAI,EAAAH,EAAAyE,WAAA,aAAAtE,EAAAuB,KAAA,KAAArB,EAAAF,EAAAwB,IAAA6C,EAAAxE,EAAA,QAAAK,CAAA,YAAA+C,MAAA,0BAAA8C,cAAA,SAAApG,EAAAE,EAAAG,GAAA,YAAAoD,SAAA,CAAA5C,SAAA6B,EAAA1C,GAAAgE,WAAA9D,EAAAgE,QAAA7D,GAAA,cAAAmD,SAAA,KAAA3B,IAAA5B,GAAAkC,CAAA,GAAAnC,CAAA,UAAAqG,EAAAC,EAAApD,EAAAqD,EAAAC,EAAAC,EAAAC,EAAA7E,GAAA,QAAA8E,EAAAL,EAAAI,GAAA7E,GAAApB,EAAAkG,EAAAlG,KAAA,OAAAmG,GAAA,YAAAL,EAAAK,EAAA,CAAAD,EAAApD,KAAAL,EAAAzC,GAAA+E,QAAAtC,QAAAzC,GAAA2C,KAAAoD,EAAAC,EAAA,UAAAI,EAAAC,GAAA,sBAAAC,EAAA,KAAAC,EAAAC,UAAA,WAAAzB,SAAA,SAAAtC,EAAAqD,GAAA,IAAAD,EAAAQ,EAAAI,MAAAH,EAAAC,GAAA,SAAAR,EAAA/F,GAAA4F,EAAAC,EAAApD,EAAAqD,EAAAC,EAAAC,EAAA,OAAAhG,EAAA,UAAAgG,EAAAU,GAAAd,EAAAC,EAAApD,EAAAqD,EAAAC,EAAAC,EAAA,QAAAU,EAAA,CAAAX,OAAAY,EAAA,cAAAC,EAAArH,EAAAE,GAAA,IAAAD,EAAAE,OAAAsF,KAAAzF,GAAA,GAAAG,OAAAmH,sBAAA,KAAA/G,EAAAJ,OAAAmH,sBAAAtH,GAAAE,IAAAK,EAAAA,EAAAgH,QAAA,SAAArH,GAAA,OAAAC,OAAAqH,yBAAAxH,EAAAE,GAAAiB,UAAA,KAAAlB,EAAAwE,KAAAyC,MAAAjH,EAAAM,EAAA,QAAAN,CAAA,UAAAwH,EAAAzH,GAAA,QAAAE,EAAA,EAAAA,EAAA+G,UAAAnC,OAAA5E,IAAA,KAAAD,EAAA,MAAAgH,UAAA/G,GAAA+G,UAAA/G,GAAA,GAAAA,EAAA,EAAAmH,EAAAlH,OAAAF,IAAA,GAAA4C,SAAA,SAAA3C,GAAAwH,EAAA1H,EAAAE,EAAAD,EAAAC,GAAA,IAAAC,OAAAwH,0BAAAxH,OAAAyH,iBAAA5H,EAAAG,OAAAwH,0BAAA1H,IAAAoH,EAAAlH,OAAAF,IAAA4C,SAAA,SAAA3C,GAAAC,OAAAK,eAAAR,EAAAE,EAAAC,OAAAqH,yBAAAvH,EAAAC,GAAA,WAAAF,CAAA,UAAA0H,EAAAG,EAAAnB,EAAAjG,GAAA,IAAAC,EAAA,OAAAA,EAAA,SAAAT,EAAAC,GAAA,aAAA+C,EAAAhD,KAAAA,EAAA,OAAAA,EAAA,IAAAD,EAAAC,EAAAU,OAAAmH,aAAA,YAAA9H,EAAA,KAAAU,EAAAV,EAAA8B,KAAA7B,EAAAC,GAAA,wBAAA+C,EAAAvC,GAAA,OAAAA,EAAA,UAAAqD,UAAA,kEAAA7D,EAAA6H,OAAAC,QAAA/H,EAAA,CAAAgI,CAAAvB,EAAA,WAAAA,EAAA,UAAAzD,EAAAvC,GAAAA,EAAAqH,OAAArH,MAAAmH,EAAA1H,OAAAK,eAAAqH,EAAAnB,EAAA,CAAAjG,MAAAA,EAAAU,YAAA,EAAAC,cAAA,EAAAC,UAAA,IAAAwG,EAAAnB,GAAAjG,EAAAoH,CAAA,CA+CA,SAASK,EAA0BC,GAC/B,IAAMC,GAAYC,EAAAA,EAAAA,gBAElB,OAAOF,EAAaG,KAAKC,KAAI,SAAAC,GAGzB,IAAMC,EAAoBD,EAAKE,UAAYN,EAAUO,oCAAoCH,EAAKE,UAAW,uBAAyB,KAC5HE,EAAkBJ,EAAKK,QAAUT,EAAUO,oCAAoCH,EAAKK,QAAS,uBAAyB,KAI5H,OAAApB,EAAAA,EAAA,GACOe,GAAI,IACPE,UAAWD,EACXI,QAASD,EACT9I,SAAUsI,EAAUtI,UAE5B,GACJ,CAGA,SAASgJ,EAAwBC,GAI7B,IAHA,IAAIC,EAAQ,GACRC,EAAQrJ,IAAMmJ,GAETrI,EAAI,EAAGA,EAAI,EAAGA,IAEnBsI,EAAMvE,KAAKwE,EAAMC,IAAIxI,EAAG,QAAQyI,UAGpC,OAAOH,CACX,CAxCApJ,IAAAA,OAAawJ,KACbxJ,IAAAA,OAAayJ,KACbzJ,IAAAA,OAAaE,KACbF,IAAAA,OAAa0J,KACb1J,IAAAA,OAAa2J,KACb3J,IAAAA,OAAaC,KACbD,IAAAA,OAAa4J,KACb5J,IAAAA,OAAa6J,KAmCb,IAAMC,EAAc,WAKhB,OAJkBrB,EAAAA,EAAAA,gBAIDvI,QACrB,EAEM6J,EAAe,WAAH,MAAU,CACxBC,SAAUhK,MAAQiK,GAAGH,KAAeP,SACpCW,gBAAiBlK,MAAQiK,GAAGH,KAAeK,QAAQ,QAAQb,IAAItJ,MAAQoK,UAAY,GAAK,GAAK,EAAG,UAAUb,SAC1Gc,eAAgBrK,MAAQiK,GAAGH,KAAeK,QAAQ,QAAQb,IAAItJ,MAAQoK,UAAY,GAAK,GAAK,EAAG,UAAUd,IAAI,EAAG,QAAQC,SACxHJ,mBAAoBnJ,MAAQiK,GAAGH,KAAeK,QAAQ,QAAQZ,SAC9De,aAActK,MAAQiK,GAAGH,KAAeK,QAAQ,SAASZ,SACzDgB,YAAavK,MAAQiK,GAAGH,KAAeP,SACvCiB,iBAAkBxK,MAAQiK,GAAGH,KAAeK,QAAQ,QAAQZ,SAC5DkB,eAAgBzK,MAAQiK,GAAGH,KAAeY,MAAM,QAAQnB,SACxDoB,uBAAwB,GACxBC,uCAAwC,GAGxCC,uBAAwB,GACxBC,cAAe,GACfC,cAAe,GACfC,aAAc,GACdC,mBAAmB,EACnBC,kBAAkB,EAClBC,oBAAqB,GACrBC,sBAAuB,EACvBC,qBAAsB,EACtBC,yBAA0B,EAC1BC,UAAW,KACXC,YAAa,CACT,CAACC,GAAI,EAAGnG,KAAM,gBAAiBwD,UAAW,QAASW,SAAU,GAC7D,CAACgC,GAAI,EAAGnG,KAAM,UAAWwD,UAAW,QAASW,SAAU,GACvD,CAACgC,GAAI,EAAGnG,KAAM,YAAawD,UAAW,QAASW,SAAU,GACzD,CAACgC,GAAI,EAAGnG,KAAM,aAAcwD,UAAW,QAASW,SAAU,GAC1D,CAACgC,GAAI,EAAGnG,KAAM,kBAAmBwD,UAAW,QAASW,SAAU,GAC/D,CAACgC,GAAI,EAAGnG,KAAM,aAAcwD,UAAW,QAASW,SAAU,GAC1D,CAACgC,GAAI,EAAGnG,KAAM,YAAawD,UAAW,QAASW,SAAU,IAEhE,EAEYiC,GAAmBC,EAAAA,EAAAA,IAAY,gBAAiB,CACzDC,MAAO7B,EACP8B,QAAS,CACLC,SAAQ,WAEJvL,OAAOwL,OAAOC,KAAMjC,IACxB,EACA/E,MAAK,WACDgH,KAAK7C,mBAAqBnJ,MAAQiK,GAAGH,KAAeK,QAAQ,QAAQZ,SACpEyC,KAAK1B,aAAetK,MAAQiK,GAAGH,KAAeK,QAAQ,SAASZ,SAC/DyC,KAAKzB,YAAcvK,MAAQiK,GAAGH,KAAeP,QACjD,EACM0C,eAAc,SAACC,GAAK,IAAAC,EAAA,YAAAlF,EAAA9G,IAAAoF,MAAA,SAAA6G,IAAA,IAAA7B,EAAA,OAAApK,IAAAuB,MAAA,SAAA2K,GAAA,cAAAA,EAAArG,KAAAqG,EAAAhI,MAAA,OActB,OAZMkG,EAAcvK,IAAMkM,GAG1BC,EAAK5B,YAAcA,EAAYhB,SAG/B4C,EAAKhD,mBAAqBoB,EAAYJ,QAAQ,OAAOb,IAAI,EAAG,SAASC,SAGrE4C,EAAK3B,iBAAmBD,EAAYJ,QAAQ,QAAQZ,SACpD4C,EAAK1B,eAAiBF,EAAYG,MAAM,QAAQnB,SAEhD8C,EAAAhI,KAAA,EACM8H,EAAKG,wBAAuB,wBAAAD,EAAAlG,OAAA,GAAAiG,EAAA,IAfZnF,EAgB1B,EACAsF,sBAAqB,SAACL,GAClB,IAAMM,EAAMxM,MAGZgM,KAAKzB,YAAciC,EAAIjD,SAGvByC,KAAK7C,mBAAqBqD,EAAIrC,QAAQ,QAAQZ,QAClD,EACMkD,UAAS,SAACC,GAAM,IAAAC,EAAA,YAAA1F,EAAA9G,IAAAoF,MAAA,SAAAqH,IAAA,IAAAC,EAAAC,EAAAC,EAAA,OAAA5M,IAAAuB,MAAA,SAAAsL,GAAA,cAAAA,EAAAhH,KAAAgH,EAAA3I,MAAA,OAsBlB,OArBMwI,EAAkB/C,IAElBgD,EAAsD,GAAxC9M,IAAM2M,EAAKxD,oBAAoB8D,OAAcjN,IAAM2M,EAAKxD,oBAAoBiB,SAMhG2C,GAHIA,EAAS/M,IAAM2M,EAAKxD,oBAAoBc,GAAG4C,GAAiBvD,IAAIoD,EAAM,OAAOvC,QAAQ,QAGzEb,IAAIwD,EAAa,UAIjCH,EAAKxD,mBAAqB4D,EAAOxD,SAGjCoD,EAAKxD,mBAAqB4D,EAM1BC,EAAA3I,KAAA,EACMsI,EAAKL,wBAAuB,wBAAAU,EAAA7G,OAAA,GAAAyG,EAAA,IAvBhB3F,EAyCtB,EACMiG,WAAU,SAACC,GAAO,IAAAC,EAAA,YAAAnG,EAAA9G,IAAAoF,MAAA,SAAA8H,IAAA,OAAAlN,IAAAuB,MAAA,SAAA4L,GAAA,cAAAA,EAAAtH,KAAAsH,EAAAjJ,MAAA,OAapB,OAXA+I,EAAKjE,mBAAqBnJ,IAAMoN,EAAKjE,oBAAoBG,IAAI6D,EAAO,QAAQ5D,SAG5E6D,EAAK5C,iBAAmBxK,IAAMoN,EAAKjE,oBAAoBgB,QAAQ,QAAQZ,SACvE6D,EAAK3C,eAAiBzK,IAAMoN,EAAKjE,oBAAoBuB,MAAM,QAAQnB,SAG9DvJ,IAAMoN,EAAKjE,oBAAoBoE,OAAOvN,IAAMoN,EAAK7C,aAAc,SAChE6C,EAAK7C,YAAcvK,IAAMoN,EAAKjE,oBAAoBgB,QAAQ,OAAOZ,UAGrE+D,EAAAjJ,KAAA,EACM+I,EAAKd,wBAAuB,wBAAAgB,EAAAnH,OAAA,GAAAkH,EAAA,IAddpG,EAexB,EACAuG,WAAU,SAACC,GAIP,OAAuB,KAFVzN,IAAMyN,GAEPR,MAChB,EAEMS,cAAa,WAAG,IAAAC,EAAA,YAAA1G,EAAA9G,IAAAoF,MAAA,SAAAqI,IAAA,OAAAzN,IAAAuB,MAAA,SAAAmM,GAAA,cAAAA,EAAA7H,KAAA6H,EAAAxJ,MAAA,OAEwD,OAA1EsJ,EAAKrD,aAAetK,IAAM2N,EAAKrD,cAAcwD,SAAS,EAAG,SAASvE,SAAQsE,EAAA7H,KAAA,EAAA6H,EAAAxJ,KAAA,EAIhEsJ,EAAK1B,eAAe0B,EAAKrD,cAAa,OAC5CyD,QAAQC,IAAI,2CAA4CL,EAAKrD,cAAauD,EAAAxJ,KAAA,gBAAAwJ,EAAA7H,KAAA,EAAA6H,EAAAI,GAAAJ,EAAA,SAE1EE,QAAQ/G,MAAM,qDAADkH,OAAsDP,EAAKrD,aAAY,KAAAuD,EAAAI,IAAW,yBAAAJ,EAAA1H,OAAA,GAAAyH,EAAA,iBATjF3G,EAWtB,EACMkH,SAAQ,WAAG,IAAAC,EAAA,YAAAnH,EAAA9G,IAAAoF,MAAA,SAAA8I,IAAA,OAAAlO,IAAAuB,MAAA,SAAA4M,GAAA,cAAAA,EAAAtI,KAAAsI,EAAAjK,MAAA,OAEwD,OAArE+J,EAAK9D,aAAetK,IAAMoO,EAAK9D,cAAchB,IAAI,EAAG,SAASC,SAAQ+E,EAAAtI,KAAA,EAAAsI,EAAAjK,KAAA,EAI3D+J,EAAKnC,eAAemC,EAAK9D,cAAa,OAC5CyD,QAAQC,IAAI,2CAA4CI,EAAK9D,cAAagE,EAAAjK,KAAA,gBAAAiK,EAAAtI,KAAA,EAAAsI,EAAAL,GAAAK,EAAA,SAE1EP,QAAQ/G,MAAM,qDAADkH,OAAsDE,EAAK9D,aAAY,KAAAgE,EAAAL,IAAW,yBAAAK,EAAAnI,OAAA,GAAAkI,EAAA,iBATtFpH,EAWjB,EACMsH,4BAA2B,WAAG,IAAAC,EAAA,YAAAvH,EAAA9G,IAAAoF,MAAA,SAAAkJ,IAAA,IAAAjG,EAAAkG,EAAA,OAAAvO,IAAAuB,MAAA,SAAAiN,GAAA,cAAAA,EAAA3I,KAAA2I,EAAAtK,MAAA,OAGI,OAFpC0J,QAAQ/G,MAAM,+BAA8B2H,EAAA3I,KAAA,EAElCwC,GAAYC,EAAAA,EAAAA,gBAAckG,EAAAtK,KAAA,EACTuK,MAAMC,IAAI,iBAAgB,OAA3CH,EAAQC,EAAA5K,KAGGyE,EAAUtI,UAAYwO,EAAShG,KAAKoG,cAAgB,MAGrEN,EAAK3D,uBAAyBvC,EAA0BoG,EAAShG,MACjEqF,QAAQ/G,MAAM,8BAA+B0H,EAAShG,MAAKiG,EAAAtK,KAAA,iBAAAsK,EAAA3I,KAAA,GAAA2I,EAAAV,GAAAU,EAAA,SAE3DZ,QAAQ/G,MAAM,iCAAgC2H,EAAAV,IAC9C,yBAAAU,EAAAxI,OAAA,GAAAsI,EAAA,kBAd4BxH,EAgBpC,EACM8H,mBAAkB,WAAG,IAAAC,EAAA,YAAA/H,EAAA9G,IAAAoF,MAAA,SAAA0J,IAAA,IAAAzG,EAAAkG,EAAA,OAAAvO,IAAAuB,MAAA,SAAAwN,GAAA,cAAAA,EAAAlJ,KAAAkJ,EAAA7K,MAAA,OAEa,OAFb6K,EAAAlJ,KAAA,EAEbwC,GAAYC,EAAAA,EAAAA,gBAAcyG,EAAA7K,KAAA,EACTuK,MAAMC,IAAI,uBAAsB,OAAjDH,EAAQQ,EAAAnL,KAGGyE,EAAUtI,UAAYwO,EAAShG,KAAKoG,cAAgB,MAErEE,EAAKlE,cAAgBxC,EAA0BoG,EAAShG,MAAewG,EAAA7K,KAAA,gBAAA6K,EAAAlJ,KAAA,EAAAkJ,EAAAjB,GAAAiB,EAAA,SAEvEnB,QAAQ/G,MAAM,mCAAmCkI,EAAAjB,IAAQ,yBAAAiB,EAAA/I,OAAA,GAAA8I,EAAA,iBAVtChI,EAY3B,EACMkI,qBAAoB,WAAG,IAAAC,EAAA,YAAAnI,EAAA9G,IAAAoF,MAAA,SAAA8J,IAAA,IAAAC,EAAA,OAAAnP,IAAAuB,MAAA,SAAA6N,GAAA,cAAAA,EAAAvJ,KAAAuJ,EAAAlL,MAAA,OAEG,OAAtBiL,EAActP,MAAQuP,EAAAvJ,KAAA,EAAAuJ,EAAAlL,KAAA,EAIlB+K,EAAKI,iBAAiBF,EAAY/F,UAAS,OAAAgG,EAAAlL,KAAA,eAAAkL,EAAAvJ,KAAA,EAAAuJ,EAAAtB,GAAAsB,EAAA,SAEjDxB,QAAQ/G,MAAM,oCAAmCuI,EAAAtB,IAAQ,wBAAAsB,EAAApJ,OAAA,GAAAkJ,EAAA,iBARpCpI,EAU7B,EACMuI,iBAAgB,SAAC/B,GAAM,IAAAgC,EAAA,YAAAxI,EAAA9G,IAAAoF,MAAA,SAAAmK,IAAA,IAAAC,EAAAnH,EAAAoH,EAAAC,EAAAnB,EAAAoB,EAAA,OAAA3P,IAAAuB,MAAA,SAAAqO,GAAA,cAAAA,EAAA/J,KAAA+J,EAAA1L,MAAA,OAarB,OAZAsL,EAAgB,KACpBF,EAAKxE,mBAAoB,EAAI8E,EAAA/J,KAAA,EAEnBwC,GAAYC,EAAAA,EAAAA,gBAIZmH,EAAU5P,IAAMyN,GAChBoC,EAAcD,EAAQI,cAI5BD,EAAA1L,KAAA,EACuBuK,MAAMqB,KAAK,sBAAD/B,OAAuB2B,IAAc,OAAhEnB,EAAQqB,EAAAhM,KAIQ6L,EAAQM,OAAO,cAOpB1H,EAAUtI,UAAYwO,EAAShG,KAAKoG,cAAgB,MAG/DgB,EAAUxH,EAA0BoG,EAAShG,MAGnD+G,EAAK1E,cAAgB,GAAAmD,OAAAiC,EAAIV,EAAK1E,eAAaoF,EAAKL,IAASnI,QAAO,SAAC9G,EAAOuP,EAAOjJ,GAAI,OAC3EiJ,IAAUjJ,EAAKkJ,WAAU,SAAChQ,GAAC,OACvBA,EAAEoL,KAAO5K,EAAM4K,IAAMpL,EAAEyI,YAAcjI,EAAMiI,SAAS,GACtD,IAIV2G,EAAKa,gBAAgB7C,GAErBgC,EAAKxE,mBAAoB,EAAK8E,EAAA1L,KAAA,iBAAA0L,EAAA/J,KAAA,GAAA+J,EAAA9B,GAAA8B,EAAA,SAE9BhC,QAAQ/G,MAAM,4CAADkH,OAA6CyB,EAAa,KAAAI,EAAA9B,IACvEwB,EAAKxE,mBAAoB,EAAK,yBAAA8E,EAAA5J,OAAA,GAAAuJ,EAAA,kBA3CTzI,EA6C7B,EACAqJ,gBAAe,SAAC7C,GAEZ,IAAMmC,EAAU5P,IAAMyN,GAGhB8C,EAAYX,EAAQzF,QAAQ,QAAQ6F,cACpCQ,EAAUZ,EAAQlF,MAAM,QAAQsF,cAChCS,EAAYzQ,MAAQgQ,cAGpBU,EAAmB1E,KAAKhB,aAAaqF,WAAU,SAAArC,GAAG,OACpDA,EAAIuC,YAAcA,GAAavC,EAAIwC,UAAYA,CAAO,KAEhC,IAAtBE,EAEA1E,KAAKhB,aAAa0F,GAAkBC,UAAYF,EAGhDzE,KAAKhB,aAAanG,KAAK,CAAC0L,UAAAA,EAAWC,QAAAA,EAASG,UAAWF,GAE/D,EACAG,iBAAgB,WAEZ,IAAMC,EAAgB,SAACpD,GAAI,OAAKzN,IAAMyN,GAAMyC,OAAO,aAAa,EAG1DY,EAAeD,EAAc7E,KAAKxB,kBAClCuG,EAAaF,EAAc7E,KAAKvB,gBAGtCsD,QAAQC,IAAI,uBAADE,OAAwB4C,EAAY,QAAA5C,OAAO6C,IACtDhD,QAAQC,IAAI,mCAAoChC,KAAKhB,cAGrD,IAAMgG,EAAqBhF,KAAKhB,aAAaiG,MAAK,SAAAjD,GAE9C,IAAMkD,EAAkBL,EAAc7C,EAAIuC,WACpCY,EAAgBN,EAAc7C,EAAIwC,SAKxC,OAFAzC,QAAQC,IAAI,+BAADE,OAAgCgD,EAAe,QAAAhD,OAAOiD,IAE1DD,GAAmBJ,GAAgBK,GAAiBJ,CAC/D,IAKA,OAFAhD,QAAQC,IAAI,aAADE,OAAc4C,EAAY,QAAA5C,OAAO6C,EAAU,SAAA7C,OAAQ8C,EAAqB,GAAK,OAAM,mBAEtFA,CACZ,EACAI,uCAAsC,WASlC,OAPsBpR,IAAMgM,KAAK7C,oBAIKG,IAAI,EAAG,QAGtBC,QAC3B,EAEM8H,gCAA+B,WAAG,IAAAC,EAAA,YAAArK,EAAA9G,IAAAoF,MAAA,SAAAgM,IAAA,IAAAC,EAAAhF,EAAAiF,EAAAC,EAAAC,EAAAC,EAAA,OAAAzR,IAAAuB,MAAA,SAAAmQ,GAAA,cAAAA,EAAA7L,KAAA6L,EAAAxN,MAAA,OAC9BmN,EAAgBtI,EAAwBoI,EAAKnI,oBAC7CqD,EAAMxM,MACNyR,EAAoBjF,EAAIsB,SAAS,GAAI,WAAU4D,EAAAI,EAElCN,GAAaK,EAAA7L,KAAA,EAAA4L,EAAAzR,IAAAoF,MAAA,SAAAqM,IAAA,IAAAnE,EAAAsE,EAAA,OAAA5R,IAAAuB,MAAA,SAAAsQ,GAAA,cAAAA,EAAAhM,KAAAgM,EAAA3N,MAAA,OAO1B,GAPKoJ,EAAIkE,EAAA9Q,MACLkR,EAAatE,EAAKyC,OAAO,cACKoB,EAAKvG,cAAckG,MAAK,SAAAgB,GACxD,IAAMC,EAAclS,IAAMiS,EAAQnJ,WAAWoH,OAAO,cAC9CiC,EAAkBb,EAAKtG,aAAa+G,GACpCK,EAAUD,GAAmBnS,IAAMmS,GAAmBV,EAC5D,OAAOM,IAAeG,GAAeE,CACzC,IAEkC,CAAFJ,EAAA3N,KAAA,eAAA2N,EAAA3N,KAAA,EAEtBiN,EAAKe,sBAAsBN,EAAYtE,EAAKlE,UAAS,cAAAyI,EAAA9N,OAAA,oCAAA8N,EAAA7L,OAAA,GAAAyL,EAAA,IAAAF,EAAApP,IAAA,WAAAqP,EAAAD,EAAAjR,KAAAkD,KAAA,CAAAkO,EAAAxN,KAAA,gBAAAwN,EAAArL,cAAAoL,IAAA,mBAAAC,EAAA5D,GAAA,CAAA4D,EAAAxN,KAAA,gBAAAwN,EAAA3N,OAAA,oBAAA2N,EAAAxN,KAAA,gBAAAwN,EAAAxN,KAAA,iBAAAwN,EAAA7L,KAAA,GAAA6L,EAAAS,GAAAT,EAAA,SAAAH,EAAAtR,EAAAyR,EAAAS,IAAA,eAAAT,EAAA7L,KAAA,GAAA0L,EAAArP,IAAAwP,EAAAtL,OAAA,6BAAAsL,EAAA1L,OAAA,GAAAoL,EAAA,wBAhB/BtK,EAoBxC,EACMoL,sBAAqB,SAACN,EAAYtE,GAAM,IAAA8E,EAAA,YAAAtL,EAAA9G,IAAAoF,MAAA,SAAAiN,IAAA,IAAA5C,EAAA,OAAAzP,IAAAuB,MAAA,SAAA+Q,GAAA,cAAAA,EAAAzM,KAAAyM,EAAApO,MAAA,OAGX,OAHWoO,EAAAzM,KAAA,EAGhC4J,EAAU5P,IAAMyN,GAAKgF,EAAApO,KAAA,EAErBkO,EAAK/C,iBAAiBI,EAAQrG,UAAS,OAE7CgJ,EAAKvH,aAAa+G,GAAc/R,MAAQgQ,cACxCjC,QAAQC,IAAI,sCAAuC+D,GAAWU,EAAApO,KAAA,gBAAAoO,EAAAzM,KAAA,EAAAyM,EAAAxE,GAAAwE,EAAA,SAE9D1E,QAAQ/G,MAAM,iCAADkH,OAAkC6D,EAAU,KAAAU,EAAAxE,IAAW,yBAAAwE,EAAAtM,OAAA,GAAAqM,EAAA,iBAV9BvL,EAY9C,EAGMqF,sBAAqB,WAAG,IAAAoG,EAAA,YAAAzL,EAAA9G,IAAAoF,MAAA,SAAAoN,IAAA,OAAAxS,IAAAuB,MAAA,SAAAkR,GAAA,cAAAA,EAAA5M,KAAA4M,EAAAvO,MAAA,WAEtBqO,EAAK9B,mBAAoB,CAAFgC,EAAAvO,KAAA,eAAAuO,EAAAvO,KAAA,EACjBqO,EAAKrB,kCAAiC,OAAO,SAAArK,GAE/C,OADA+G,QAAQ/G,MAAM,oCAAqCA,IAC5C,CACX,IAAE,OAAA4L,EAAAvO,KAAA,eAEF0J,QAAQC,IAAI,+CAA8C,wBAAA4E,EAAAzM,OAAA,GAAAwM,EAAA,IARpC1L,EAU9B,EAGA4L,eAAc,SAACC,GAEX9G,KAAKhC,SAAWhK,IAAM8S,GAAMvJ,QAChC,EAGAwJ,YAAW,SAACC,GAERhH,KAAKhC,SAAWhK,IAAMgT,GAASzJ,QACnC,EAQM0J,oBAAmB,WAAG,IAAAC,EAAA,YAAAjM,EAAA9G,IAAAoF,MAAA,SAAA4N,IAAA,OAAAhT,IAAAuB,MAAA,SAAA0R,GAAA,cAAAA,EAAApN,KAAAoN,EAAA/O,MAAA,OAGxB6O,EAAKjI,mBAAoB,EAIzBiI,EAAKG,kBAGLH,EAAKI,eAMLJ,EAAKK,sBAILL,EAAKjI,mBAAoB,EAAK,wBAAAmI,EAAAjN,OAAA,GAAAgN,EAAA,IApBNlM,EAqB5B,EAGAoM,gBAAe,WAEX,IAAMG,EAAWxT,IAAMgM,KAAKhC,UAAUC,GAAGH,KAGnC2J,EAAiBD,EAASpJ,SAAW,GAAK,EAAI,GAG9CF,EAAkBsJ,EAASpJ,OAAOqJ,GAAgBC,OAAO,GAAGC,YAAY,GAAGxJ,QAAQ,UAGnFE,EAAiBH,EAAgBZ,IAAI,EAAG,SAG9C0C,KAAK9B,gBAAkBA,EAAgBX,SACvCyC,KAAK3B,eAAiBA,EAAed,SAErCwE,QAAQC,IAAI,0BAA2B9D,EAAgBgG,OAAO,uBAAwB,MAAO7F,EAAe6F,OAAO,uBACvH,EAEAoD,aAAY,WACR,IACIM,EADEC,GAAkBC,EAAAA,EAAAA,sBAKpBF,EADAC,EAAgBE,kBACJ/H,KAAKV,yBACVuI,EAAgBG,cACXhI,KAAKX,qBAELW,KAAKZ,sBAWrB,IARA,IAAM6I,EAAkBjI,KAAKb,oBACvB+I,EAAQ,GACRC,EAA0B,GAAZP,EAAkBK,EAGhC/J,EAAkBlK,IAAMgM,KAAK9B,iBAG1BpJ,EAAI,EAAGA,EAAIqT,EAAYrT,IAAK,CACjC,IAAIsT,EAAWlK,EAAgBZ,IAAIxI,EAAImT,EAAiB,UACxDC,EAAMrP,KAAKuP,EAAS7K,SACxB,CAEA,OADAyC,KAAKT,UAAY2I,EACVA,EAAMhP,MACjB,EAEAqO,oBAAmB,WAEf,IAAMc,EAAQrI,KAAKsI,0BAGbC,EAAiBvI,KAAKwI,mBAAmBH,EAAOrI,KAAKT,WAE3D,GAAKS,KAAKT,WAAckJ,MAAMC,QAAQ1I,KAAKT,YAAwC,IAA1BS,KAAKT,UAAUrG,OAAxE,CAOA,IAAMyP,EAAuB3I,KAAK4I,aAAaL,GAG/CM,EAAmC7I,KAAK8I,sBAAsBH,EAAsB3I,KAAKT,UAAUrG,QAA5F6P,EAAYF,EAAZE,aAAcC,EAAUH,EAAVG,WAGfC,EAAYjJ,KAAKkJ,8BAA8BH,EAAcC,EAAYhJ,KAAKT,UAAUrG,QAGxFiQ,EAAgB,GAAHjH,OAAAiC,EAAOwE,GAAoBxE,EAAK8E,IAGnDjJ,KAAKrB,uBAAyBqB,KAAKoJ,oBAAoBD,EAfvD,MAHIpH,QAAQ/G,MAAM,yCAmBtB,EAEAsN,wBAAuB,WAAG,IAAAe,EAAA,KACtB,OAAOrJ,KAAKjB,cAAcpD,QAAO,SAAA2N,GAE7B,GAA8B,iBAAnBA,EAAKxM,WAA0D,iBAAzBwM,EAAKC,gBAElD,OADAxH,QAAQyH,KAAK,qBAAsBF,EAAKxM,UAAWwM,EAAKC,kBACjD,EAGX,IAAME,EAAYzV,IAAMsV,EAAKxM,WACvB4M,EAAU1V,IAAMsV,EAAKrM,SACrB0M,EAAgBF,EAAUG,SAASP,EAAKhL,iBAAmBqL,EAAQG,QAAQR,EAAKnL,iBAGtF,GAAIyL,EAAe,CACf,IAAMG,EAAaL,EAAUG,SAASP,EAAKnL,iBAAmB,kBAAoB,sBAClF6D,QAAQC,IAAI,SAADE,OAAUoH,EAAKrD,QAAQ3M,KAAI,MAAA4I,OAAK4H,EAAU,aAAA5H,OAAYuH,EAAUvF,OAAO,YAAW,WAAAhC,OAAUwH,EAAQxF,OAAO,YAAW,gBAAAhC,OAAeoH,EAAKC,iBACzJ,CAEA,OAAOI,CACX,GACJ,EAEAnB,mBAAkB,SAACH,EAAO9I,GAEtB,IAAKkJ,MAAMC,QAAQnJ,IAAmC,IAArBA,EAAUrG,OAEvC,OADA6I,QAAQ/G,MAAM,oCACP,GAIX,IAAM+O,EAAgB/V,IAAMuL,EAAU,IAChCyK,EAAehW,IAAMuL,EAAUA,EAAUrG,OAAS,IAAIoE,IAAI,GAAI,WAGpE,OAAO+K,EAAM1M,QAAO,SAAA2N,GAChB,IAAMG,EAAYzV,IAAMsV,EAAKxM,WACvB4M,EAAU1V,IAAMsV,EAAKrM,SAC3B,OAAOwM,EAAUG,SAASI,IAAiBN,EAAQG,QAAQE,EAC/D,IAAGpN,KAAI,SAAA2M,GACH,IAAMG,EAAYzV,IAAMsV,EAAKxM,WACvB4M,EAAU1V,IAAMsV,EAAKrM,SAC3B8E,QAAQC,IAAI,wCACZD,QAAQC,IAAI,oBAADE,OAAqBoH,EAAKrD,QAAQ3M,KAAI,aAAA4I,OAAYoH,EAAKxM,UAAS,WAAAoF,OAAUoH,EAAKrM,UAG1F,IAAIgN,EAAY1K,EAAU8E,WAAU,SAAA6F,GAAI,OAAIT,EAAU5L,eAAe7J,IAAMkW,GAAM,MAG9D,IAAfD,GAAoBR,EAAUI,QAAQ7V,IAAMuL,EAAU0K,QACtDA,EAAYE,KAAKC,IAAI,EAAGH,IAG5BlI,QAAQC,IAAI,wBAADE,OAAyBuH,EAAUvF,SAAQ,uBAAAhC,OAAsB+H,EAAS,QAAA/H,OAAOlO,IAAMuL,EAAU0K,IAAY/F,WAGxH,IAAImG,EAAe9K,EAAU8E,WAAU,SAAA6F,GAAI,OAAIR,EAAQ7L,eAAe7J,IAAMkW,GAAM5M,IAAI,GAAI,WAAW,KAG/E,IAAlB+M,GAAuBX,EAAQE,SAAS5V,IAAMuL,EAAU8K,MACxDA,MAIkB,IAAlBA,GAAuBX,EAAQnI,OAAOvN,IAAMuL,EAAUA,EAAUrG,OAAS,IAAIoE,IAAI,GAAI,eACrF+M,EAAe9K,EAAUrG,OAAS,GAGtC6I,QAAQC,IAAI,sBAADE,OAAuBwH,EAAQxF,SAAQ,uBAAAhC,OAAsBmI,EAAY,QAAAnI,QAAyB,IAAlBmI,EAAsBrW,IAAMuL,EAAU8K,IAAenG,SAAW,iBAI3J,IAAIoG,EAAOD,EAAeJ,EAAY,EAItC,OAFAlI,QAAQC,IAAI,yBAADE,OAA0B+H,EAAY,EAAC,gBAAA/H,OAAeoI,IAEjEzO,EAAAA,EAAA,GACOyN,GAAI,IACPiB,UAAWN,EAAY,EACvBO,SAAUF,GAElB,GACJ,EAEA1B,aAAY,SAACP,GAAO,IAAAoC,EAAA,KACZC,GAAkB,EAiBtB,OAfArC,EAAMpR,SAAQ,SAAAqS,GACV,IAAMjM,EAAQrJ,IAAMsV,EAAKxM,WACnB6N,EAAMtN,EAAMC,IAAIgM,EAAKC,gBAAiB,WACtC/I,EAAMxM,IAAMyW,EAAKzM,UAGvBsL,EAAKsB,YAActB,EAAKuB,aAAerK,EAAIqJ,QAAQxM,IAAUmD,EAAIoJ,SAASe,IAA2B,IAAnBrB,EAAKiB,WAGlFG,IAAoBpB,EAAKuB,aAAevB,EAAKiB,UAAY,IAC1DjB,EAAKwB,cAAe,EACpBJ,GAAkB,EAE1B,IAEOrC,CACX,EAEAS,sBAAqB,SAACP,EAAgBwC,GAClC,IAAIhC,EAAe,IAAIN,MAAMsC,GAAMC,KAAK,MAAMrO,KAAI,kBAAM,IAAIsO,GAAK,IAC7DjC,EAAa,EASjB,OARAT,EAAetR,SAAQ,SAAAqS,GACnB,IAAK,IAAIxU,EAAIwU,EAAKiB,UAAY,EAAGzV,EAAIwU,EAAKiB,UAAY,EAAIjB,EAAKkB,SAAU1V,IACjEA,GAAK,GAAKA,EAAIiW,IACdhC,EAAajU,GAAGwI,IAAIgM,EAAK4B,SACzBlC,EAAamB,KAAKC,IAAIpB,EAAYM,EAAK4B,SAGnD,IACO,CAACnC,aAAAA,EAAcC,WAAAA,EAC1B,EAEAE,8BAA6B,SAACH,EAAcC,EAAY+B,GACpD,IAAI9B,EAAY,GAEhBD,EAAamB,KAAKC,IAAIpB,EAAY,GAClC,IAAK,IAAImC,EAAM,EAAGA,GAAOnC,EAAYmC,IACjClC,EAAUpQ,KAAIyC,MAAd2N,EAAS9E,EAASnE,KAAKoL,4BAA4BrC,EAAcoC,EAAKJ,KAE1E,OAAO9B,CACX,EAEAmC,4BAA2B,SAACrC,EAAcoC,EAAKJ,GAG3C,IAFA,IAAI9B,EAAY,GACZoC,GAAY,EACPvW,EAAI,EAAGA,EAAIiW,EAAMjW,IACjBiU,EAAajU,GAAGwW,IAAIH,IAEA,IAAdE,IAEK,IAARF,EACAlC,EAAUpQ,KAAKmH,KAAKuL,kBAAkBF,EAAW,EAAGvW,EAAIuW,EAAUF,IAElElC,EAAUpQ,KAAKmH,KAAKwL,2BAA2BH,EAAW,EAAGvW,EAAIuW,EAAUF,IAE/EE,GAAY,GARZA,GAAyB,IAAdA,EAAkBvW,EAAIuW,EAmBzC,OARkB,IAAdA,IAEY,IAARF,EACAlC,EAAUpQ,KAAKmH,KAAKuL,kBAAkBF,EAAW,EAAGN,EAAOM,EAAUF,IAErElC,EAAUpQ,KAAKmH,KAAKwL,2BAA2BH,EAAW,EAAGN,EAAOM,EAAUF,KAG/ElC,CACX,EAEAG,oBAAmB,SAACD,GAChB,OAAKV,MAAMC,QAAQS,GAMZA,EAAcsC,MAAK,SAACzW,EAAG0W,GAAC,OAAK1W,EAAEkW,QAAUQ,EAAER,SAAWlW,EAAEuV,UAAYmB,EAAEnB,SAAS,KALlFxI,QAAQ/G,MAAM,wCAAyCmO,GAChD,GAKf,EAEAoC,kBAAiB,SAAClO,EAAOiN,EAAMa,GAC3B,MAAO,CACHN,aAAa,EACb/N,UAAW,cACX6O,SAAU,EACVpB,UAAWlN,EACXmN,SAAUF,EACVY,QAASC,EACTlF,QAAS,CAAC3M,KAAM,sBAExB,EAEAkS,2BAA0B,SAACnO,EAAOiN,EAAMa,GACpC,MAAO,CACHN,aAAa,EACb/N,UAAW,cACX6O,SAAU,EACVpB,UAAWlN,EACXmN,SAAUF,EACVY,QAASC,EACTlF,QAAS,CAAC3M,KAAM,cAExB,GAIJsS,QAAS,CACL9K,YAAa,SAAClB,GACV,OAAO5L,IAAM4L,EAAM5B,UAAUkG,OAAO,SACxC,EAEA2H,oBAAqB,SAACjM,GAClB,IAAMkM,EAAWhO,IAEbiO,EADM/X,MAAQiK,GAAG6N,GACA3N,QAAQ,OACzB6N,EAAgBD,EAAWzO,IAAI,EAAG,OAItC,OAFAyE,QAAQC,IAAI,sBAAuBpC,EAAML,UAAU5C,KAAI,SAAAuN,GAAI,OAAIlW,IAAMkW,GAAMhG,OAAO,QAAQ,KAEnFtE,EAAMJ,YAAYyM,SAAQ,SAAAC,GAE7B,IAAIC,EAAmBJ,EAAW9K,KAAKmL,SAASF,EAAOpP,UAAUuP,MAAM,KAAK,KAAKjO,OAAOgO,SAASF,EAAOpP,UAAUuP,MAAM,KAAK,KACzHC,EAAiBH,EAAiBI,QAAQjP,IAAI4O,EAAOzO,SAAU,SAC/D+O,EAAsBR,EAAc/K,KAAKmL,SAASF,EAAOpP,UAAUuP,MAAM,KAAK,KAAKjO,OAAOgO,SAASF,EAAOpP,UAAUuP,MAAM,KAAK,KAC/HI,EAAoBD,EAAoBD,QAAQjP,IAAI4O,EAAOzO,SAAU,SAQzE,MALuB,CAAA5B,EAAAA,EAAA,GACdqQ,GAAM,IAAE7O,MAAO8O,EAAkBxB,IAAK2B,IAAczQ,EAAAA,EAAA,GACpDqQ,GAAM,IAAE7O,MAAOmP,EAAqB7B,IAAK8B,KAG1B9P,KAAI,SAAAuP,GACxB,IAAMQ,EAAiB9M,EAAML,UAAU8E,WAAU,SAAA6F,GAAI,OAAIgC,EAAO7O,MAAMQ,eAAe7J,IAAMkW,KAAUgC,EAAOvB,IAAId,QAAQ7V,IAAMkW,GAAM,IAChIG,EAAezK,EAAML,UAAU8E,WAAU,SAAA6F,GAAI,OAAIgC,EAAOvB,IAAI9M,eAAe7J,IAAMkW,GAAM,KAGrE,IAAlBG,GAAuB6B,EAAOvB,IAAId,QAAQ7V,IAAM4L,EAAML,UAAUK,EAAML,UAAUrG,OAAS,KACzFmR,EAAezK,EAAML,UAAUrG,OAAS,EAExCmR,GAAgB,EAGpB,IAAME,EAAYmC,EAAiB,EAC7BlC,EAAWH,EAAeqC,EAAiB,EAQjD,OANA3K,QAAQC,IAAI,sBAADE,OAAuBgK,EAAO5S,OACzCyI,QAAQC,IAAI,cAADE,OAAegK,EAAO7O,MAAM6G,OAAO,SAAQ,eAAAhC,OAAcgK,EAAOvB,IAAIzG,OAAO,WACtFnC,QAAQC,IAAI,mBAADE,OAAoBwK,EAAc,oBAAAxK,OAAmBmI,IAChEtI,QAAQC,IAAI,yBAADE,OAA0BqI,EAAS,gBAAArI,OAAesI,IAGzDD,GAAaC,EAAW,EACxB3O,EAAAA,EAAA,GAAYqQ,GAAM,IAAE3B,UAAAA,EAAWC,SAAAA,IAE5B,IACX,GACJ,IAAG7O,QAAO,SAAAuQ,GAAM,OAAc,MAAVA,CAAc,GACtC,EA6CAS,mCAAoC,SAAC/M,GAgBjC,IAfA,IAAMpD,GAAYC,EAAAA,EAAAA,gBAEZqG,IADkBgF,EAAAA,EAAAA,sBACHtL,EAAUtI,UACzB6W,EAAOnL,EAAML,UAAUrG,OAGvB0T,EAAY,GACZpM,EAAMxM,IAAM4L,EAAM5B,UAAUC,GAAG6E,GAGjC+J,EAAUrM,EAAIpC,SAAW,GAAKoC,EAAIrC,QAAQ,QAAUqC,EAAIrC,QAAQ,QAAQb,IAAI,GAAI,WAK3ExI,EAAI,EAAGA,EAAIiW,EAAMjW,IACtB8X,EAAU/T,KAAK,CACXiU,UAAWD,EAAQ3I,OAAO,WAC1B6I,eAAgBF,EAAQ3I,OAAO,yBAEnC2I,EAAUA,EAAQvP,IAAI,GAAI,UAG9B,OAAOsP,CACX,EAEAI,gBAAiB,SAACpN,GAEd,IAAMvC,EAAQrJ,IAAM4L,EAAMzC,oBAAoB2E,SAAS,EAAG,QACpD6I,EAAMtN,EAAMC,IAAI,EAAG,SAGnB2P,EAA0BrN,EAAMb,cAAcmO,QAAO,SAACC,EAAKvQ,GAC7D,IAAMwQ,EAAYpZ,IAAM4I,EAAKE,WAAWuQ,UAKxC,OAJKF,EAAIC,KACLD,EAAIC,GAAa,IAErBD,EAAIC,GAAWvU,KAAK+D,GACbuQ,CACX,GAAG,CAAC,GAUJ,OAPsB5Y,OAAOuC,OAAOmW,GAAyBtQ,KAAI,SAAA2Q,GAC7D,OAAOA,EAAMJ,QAAO,SAACK,EAAU3Q,GAC3B,OAAQ2Q,GAAY3Q,EAAK+O,SAAW4B,EAAS5B,SAAW/O,EAAO2Q,CACnE,GAAG,KACP,IAIK5R,QAAO,SAAAiB,GACJ,IAAMwQ,EAAYpZ,IAAM4I,EAAKE,WAC7B,OAAOsQ,EAAUxP,cAAcP,IAAU+P,EAAUxD,SAASe,EAChE,IACCc,MAAK,SAACzW,EAAG0W,GAAC,OAAK1X,IAAMgB,EAAE8H,WAAW0Q,OAASxZ,IAAM0X,EAAE5O,WAAW0Q,MAAM,GAC7E,EAGAC,aAAc,SAAC7N,GAYX,IATA,IAAI8N,EAAgB1Z,IAAM4L,EAAMzC,oBAG1BwN,EAAM+C,EAAcpQ,IAAI,EAAG,SAG3B6D,EAAQ,GACVF,EAAOyM,EAEJzM,EAAK2I,SAASe,IACjBxJ,EAAMtI,KAAKoI,EAAK1D,UAChB0D,EAAOA,EAAK3D,IAAI,EAAG,QAGvB,OAAO6D,CACX,EAEAwM,YAAa,SAAC/N,GACV,IAAMgO,GAAWC,EAAAA,EAAAA,GAAWjO,EAAMzC,oBAC5BwG,GAAgBO,EAAAA,EAAAA,IAAO0J,EAAU,sBACvC,OAAIE,EAAAA,EAAAA,GAAQF,GACD,WAAP1L,OAAkByB,IACXoK,EAAAA,EAAAA,GAAYH,GACZ,eAAP1L,OAAsByB,IACfqK,EAAAA,EAAAA,GAAWJ,GACX,cAAP1L,OAAqByB,GAEdA,CAEf,EAEAsK,kBAAmB,SAACrO,GAIhB,OAFc5L,IAAM4L,EAAMtB,cAEb4P,OACjB,EAEAC,iBAAkB,SAACvO,GAIf,OAFc5L,IAAM4L,EAAMtB,cAEb4F,OAAO,OACxB,EAEAkK,YAAa,SAACxO,GAIV,OAFc5L,IAAM4L,EAAMtB,cAEb+P,MACjB,EACAP,QAAS,SAAClO,GACN,IAAM0O,EAAQta,MACRua,EAAeva,IAAM4L,EAAMzC,oBAGjC,OAAOmR,EAAM/M,OAAOgN,EAAc,MACtC,EAEAC,YAAa,SAAC5O,GAeV,IAbA,IAAMtB,EAAetK,IAAM4L,EAAMtB,cAE3BmQ,EAAsBnQ,EAAaH,QAAQ,SAC3CuQ,EAAoBpQ,EAAaI,MAAM,SAGvCiQ,EAAcF,EAAoBtQ,QAAQ,QAC1CyQ,EAAYF,EAAkBhQ,MAAM,QAGpCgC,EAAO,GACTR,EAAMyO,EAEHzO,EAAI0J,SAASgF,IAAc1O,EAAIqB,OAAOqN,EAAW,QACpDlO,EAAK7H,KAAKqH,EAAI3C,UACd2C,EAAMA,EAAI5C,IAAI,EAAG,OAGrB,OAAOoD,CACX,+FCh+BD,SAASmO,EAAaC,GACzB,IAAMtS,GAAYC,EAAAA,EAAAA,gBACZoL,GAAkBC,EAAAA,EAAAA,sBAClBiH,GAAmBC,EAAAA,EAAAA,uBAEzBnH,EAAgBoH,YAAcH,EAC9BjH,EAAgBqH,kBAAmB,EACnCrH,EAAgBsH,cAAe,EAE3B3S,EAAU4S,UAAYC,OAAOC,WAAa,MAAQzH,EAAgB0H,SAClE1H,EAAgB2H,IAAM,GAEtB3H,EAAgB2H,IAAM,EACtB3H,EAAgB4H,gBAAiB,GAGrCV,EAAiBW,oBAEb7H,EAAgB8H,aAChB9H,EAAgB8H,YAAa,EAC7BN,OAAOO,SAASC,QAAO,IAWvBC,EAAAA,QAAQC,GAAG,YAAY,SAACC,GAChBxT,EAAU4S,UAAYC,OAAOC,WAAa,MAAQzH,EAAgB0H,SAClE1H,EAAgB2H,IAAM,EAEtB3H,EAAgB2H,IAAM,EAEyB,KAA3BH,OAAOO,SAASK,SAChBpI,EAAgBqI,mBACpCC,uBAAsB,WAClB,IAAMC,EAASC,SAASC,eAAe,UACnCF,EACAA,EAAOG,eAAe,CAACC,SAAU,SAEjCnB,OAAOoB,SAAS,EAAG,EAE3B,IAEJ5I,EAAgBqI,mBAAoB,CACxC,IAEJrI,EAAgB6I,aAChB7I,EAAgB4H,gBAAiB,EACjC5H,EAAgB8I,UAAW,CAI/B,uEC5DIC,QAA0B,GAA4B,KAE1DA,EAAwB/X,KAAK,CAACgY,EAAOpR,GAAI,GAAI,GAAG,CAAC,QAAU,EAAE,QAAU,GAAG,MAAQ,GAAG,SAAW,GAAG,WAAa,MAEhH,+ECJImR,QAA0B,GAA4B,KAE1DA,EAAwB/X,KAAK,CAACgY,EAAOpR,GAAI,8pFAAiqF,GAAG,CAAC,QAAU,EAAE,QAAU,CAAC,iFAAiF,MAAQ,GAAG,SAAW,4oCAA4oC,eAAiB,CAAC,8qmBAAgomB,WAAa,MAEvnuB,+ECJImR,QAA0B,GAA4B,KAE1DA,EAAwB/X,KAAK,CAACgY,EAAOpR,GAAI,kbAAmb,GAAG,CAAC,QAAU,EAAE,QAAU,CAAC,uEAAuE,MAAQ,GAAG,SAAW,yIAAyI,eAAiB,CAAC,m9MAAk9M,WAAa,MAE9sO,gnRC2IA,IAAMqR,GAAgBpR,EAAAA,EAAAA,oBAChBlD,GAAYC,EAAAA,EAAAA,gBAClBsU,GAAuCC,EAAAA,EAAAA,IAAYF,GAA5C9D,EAAe+D,EAAf/D,gBAAiBW,EAAWoD,EAAXpD,YAElBpP,GAAc0S,EAAAA,EAAAA,KAAIH,EAAcvS,aAGhC2C,KAFgBgQ,EAAAA,EAAAA,WAAS,kBAAMJ,EAAc/R,aAAa,IAEhD,eAAAoS,EAAAlW,EAAA9G,IAAAoF,MAAG,SAAA6G,EAAMe,GAAK,OAAAhN,IAAAuB,MAAA,SAAA2K,GAAA,cAAAA,EAAArG,KAAAqG,EAAAhI,MAAA,OAEgB,OAD7BgY,SAASC,eAAe,sBAChCC,eAAe,CAACC,SAAU,WAAWnQ,EAAAhI,KAAA,EACtCyY,EAAc5P,WAAWC,GAAM,wBAAAd,EAAAlG,OAAA,GAAAiG,EAAA,KACtC,gBAJegR,GAAA,OAAAD,EAAA7V,MAAA,KAAAD,UAAA,MAWhB,SAASgW,GAAoBzU,EAAMqE,GACjC,IAAMqQ,GAAqBC,EAAAA,EAAAA,GAAYtQ,GACjCuQ,GAAmBC,EAAAA,EAAAA,GAASH,EAAoB,GAChDI,EAAmB,IAAIC,KAAK/U,EAAKgV,YACvC,OAAOF,GAAoBJ,GAAsBI,EAAmBF,CACtE,CAIA,SAASK,GAA0B5Q,GAEjC,IAAMqQ,GAAqBC,EAAAA,EAAAA,GAAYtQ,GACjCuQ,GAAmBC,EAAAA,EAAAA,GAASH,EAAoB,GAGtD,OAAOtE,EAAgBnY,MAAMoQ,MAAK,SAAArI,GAChC,IAAM8U,EAAmB,IAAIC,KAAK/U,EAAKgV,YACvC,OAAOF,GAAoBJ,GAAsBI,EAAmBF,CACtE,GACF,CAEA,SAASM,GAAWrQ,GAClB,OAAOyC,EAAAA,EAAAA,IAAOzC,EAAM,YACtB,CAEA,SAASsQ,GAAe9Q,GACtB,IAAM+Q,EAAY/Q,EAAKgR,WACvB,OAAID,GAAa,GAAKA,EAAY,EAAU,CAACE,QAAS,gBAAiBC,MAAO,eAC1EH,GAAa,GAAKA,EAAY,GAAW,CAACE,QAAS,UAAWC,MAAO,iBACrEH,GAAa,IAAMA,EAAY,GAAW,CAACE,QAAS,YAAaC,MAAO,gBACxEH,GAAa,IAAMA,EAAY,GAAW,CAACE,QAAS,aAAcC,MAAO,cACzEH,GAAa,IAAMA,EAAY,GAAW,CAACE,QAAS,kBAAmBC,MAAO,iBAC9EH,GAAa,IAAMA,EAAY,EAAU,CAACE,QAAS,aAAcC,MAAO,eACxEH,GAAa,GAAKA,EAAY,EAAU,CAACE,QAAS,YAAaC,MAAO,iBACnE,CAACD,QAAS,GAAIC,MAAO,GAC9B,EAxCAC,EAAAA,EAAAA,OAAM7T,GAAa,SAAC8T,GAClBvB,EAAc7Q,eAAeoS,EAE/B,KAwCwBnB,EAAAA,EAAAA,WAAS,kBAAMJ,EAAcrD,aAAa5Y,MAAMqE,OAAS,EAAI6Y,GAAejB,EAAcrD,aAAa5Y,MAAM,IAAM,IAAI,IAiB/I,IAAMyd,GAAkB,SAAC1V,GACL,SAAdA,EAAK5G,KACP8Z,EAAAA,QAAQyC,MAAM,UAADrQ,OAAWtF,EAAKqJ,QAAQqD,KAAKkJ,OACnB,UAAd5V,EAAK5G,MACd8Z,EAAAA,QAAQyC,MAAM,WAADrQ,OAAYtF,EAAKqJ,QAAQuM,MAE1C,EAEMC,GAAiB,SAACC,GACtB,GAAIA,EAAU,GACZ,MAAO,GAAPxQ,OAAUwQ,EAAO,YACZ,GAAgB,KAAZA,EACT,MAAO,SAEP,IAAMvR,EAAQgJ,KAAKwI,MAAMD,EAAU,IAC7BE,EAAmBF,EAAU,GACnC,OAAyB,IAArBE,EACK,GAAP1Q,OAAUf,EAAK,UAER,GAAPe,OAAUf,EAAK,SAAAe,OAAQf,EAAQ,EAAI,IAAM,GAAE,SAAAe,OAAQ0Q,EAAgB,WAGzE,SAKAR,EAAAA,EAAAA,QACI,kBAAM5V,EAAUtI,QAAQ,kBAAA2e,EAAA5X,EAAA9G,IAAAoF,MACxB,SAAAqH,EAAOkS,EAAaC,GAAW,OAAA5e,IAAAuB,MAAA,SAAAsL,GAAA,cAAAA,EAAAhH,KAAAgH,EAAA3I,MAAA,WAEzBya,EAAa,CAAF9R,EAAA3I,KAAA,eAAA2I,EAAA3I,KAAA,EACPyY,EAAc3N,uBAAsB,wBAAAnC,EAAA7G,OAAA,GAAAyG,EAAA,KAE7C,gBAAAoS,EAAAC,GAAA,OAAAJ,EAAAvX,MAAA,KAAAD,UAAA,EANuB,GAOxB,CAAC6X,WAAW,2zMAlDazR,wBAErBmM,GAAWC,EAAAA,EAAAA,GAAWpM,GACtBkC,GAAgBO,EAAAA,EAAAA,IAAO0J,EAAU,kBACnCE,EAAAA,EAAAA,GAAQF,GACH,WAAP1L,OAAkByB,IACToK,EAAAA,EAAAA,GAAYH,GACd,eAAP1L,OAAsByB,IACbqK,EAAAA,EAAAA,GAAWJ,GACb,cAAP1L,OAAqByB,GAEdA,0CAXX,IAA6BlC,EAErBmM,EACAjK,wOC5MJwP,GAAU,CAEdA,OAAiB,OACjBA,WAAoB,GAEP,KAAI,KAASA,IAIX,KAAQC,OCNvB,MAEA,IAFiC,cAAgB,EAAQ,CAAC,CAAC,YAAY,gzQCDvE,6DC0CwBtL,EAAAA,EAAAA,sBAERoH,kBAAmB,EAEnC,IAAImE,EAAQC,EAYNC,IAPcrC,EAAAA,EAAAA,WAAS,iBAAO,CAClC,oEAAqEmC,EAAMG,MAAMC,QACjF,gEAAiEJ,EAAMG,MAAME,QAC7E,wEAAyEL,EAAMG,MAAMG,QACrF,4DAA6DN,EAAMG,MAAMxY,MAC1E,IAEsB,iBAAAmW,KAAAhd,IAAAoF,MAAG,SAAA6G,IAAA,OAAAjM,IAAAuB,MAAA,SAAA2K,GAAA,cAAAA,EAAArG,KAAAqG,EAAAhI,MAAA,cAAAgI,EAAAhI,KAAA,EAClByX,EAAAA,QAAQ7L,KAAK2P,MAAM,gBAAe,OACxC9D,EAAAA,QAAQD,SAAS,wBAAAxP,EAAAlG,OAAA,GAAAiG,EAAA,mLAClB,kBAHsB,OAAA+Q,EAAA7V,MAAA,KAAAD,UAAA,ugDC1DvB,2DCkBA,IAAMwY,GAAoBC,EAAAA,EAAAA,yuBCpBtBX,EAAU,CAEdA,OAAiB,OACjBA,WAAoB,GAEP,IAAI,IAASA,GAIX,IAAQC,m0CCWvB,IAAM5W,GAAYC,EAAAA,EAAAA,gBACZqU,GAAgBpR,EAAAA,EAAAA,oBAEtB1L,IAAAA,OAAaC,KACbD,IAAAA,OAAaE,KAIb,IAAI6f,EAAa,KACbC,EAAY,KACZC,GAAoB,EAGlBC,GAAahD,EAAAA,EAAAA,WAAS,WAC1B,OAAOld,MAAQkQ,OAAO,OACxB,IASA,SAASiQ,IACP,IAAMjgB,EAAWsI,EAAUtI,UAAY,MAGjC4M,EAAc9M,MAAQiK,GAAG/J,GAAUgQ,OAAO,uBAEhD4M,EAAc/J,YAAYjG,GAC1BiB,QAAQC,IAAI,gBAAiBlB,EAC/B,EAyBAsT,EAAAA,EAAAA,YAAU,WAER,IAAM5T,EAAMxM,MAGNqgB,EAA0C,KAArB,GAAK7T,EAAIkH,UAAmBlH,EAAImH,cAG3DqM,EAAYM,YAAW,YA9BzB,WAAuD,IAA1BC,IAAiBlZ,UAAAnC,OAAA,QAAAsC,IAAAH,UAAA,KAAAA,UAAA,GAC5CmZ,cAAcT,GACVQ,IAAsBN,IACxBE,IACAF,GAAoB,GAEtBF,EAAaU,aAAY,WACvBN,GACF,GAAG,KACHpS,QAAQC,IAAI,wBAAyB+R,EACvC,CAqBIW,EACF,GAAGL,EACL,KAEAM,EAAAA,EAAAA,cAAY,WArBVH,cAAcT,GACdhS,QAAQC,IAAI,wBAAyB+R,GACrCA,EAAa,KACba,aAAaZ,GACbA,EAAY,KACZjS,QAAQC,IAAI,wBAkBd,KAEsBkP,EAAAA,EAAAA,UAAS,CAC7BrO,IAAG,WAED,OAAO7O,IAAM8c,EAAc9S,UAAUkG,OAAO,QAC9C,EACA2Q,IAAG,SAAChgB,GAEF,IAAqDigB,EAAAC,EAA5BlgB,EAAMwX,MAAM,KAAK1P,IAAIP,QAAO,GAA9C+E,EAAK2T,EAAA,GAAEpC,EAAOoC,EAAA,GAEf9N,EAAUhT,IAAM8c,EAAc9S,UAAUiD,KAAKE,GAAO/C,OAAOsU,GAASnV,SAE1EuT,EAAc/J,YAAYC,EAC5B,yXCxGF,EAFoB,yyECuHpB,IAAM8J,GAAgBpR,EAAAA,EAAAA,oBAChBmI,GAAkBC,EAAAA,EAAAA,uBACNrL,EAAAA,EAAAA,gBAElBzI,IAAAA,OAAa2J,KAEb,IAAIqX,GAAqB,EA8BnBC,GAAkB/D,EAAAA,EAAAA,WAAS,WAC/B,OAAOJ,EAAcnS,uBAAuBuW,OAAM,SAAAtY,GAAI,OAAIA,EAAKiO,WAAW,GAC5E,IAEMsK,GAAoBjE,EAAAA,EAAAA,WAAS,WACjC,IAAM1Q,EAAMxM,MACZ,OAAO8c,EAAc/R,cAAcqW,MAAK,SAAA9L,GAAI,OACxCtV,IAAMsV,EAAKxM,WAAW+M,QAAQrJ,KAAS8I,EAAKuB,WAAW,GAE7D,IAUA,IAAMwK,GAAiBnE,EAAAA,EAAAA,WAAS,WAC9B,OAAOJ,EAAcnS,uBAAuByW,MAAK,SAAA9L,GAAI,OAAIA,EAAKsB,UAAU,GAC1E,IAEM0K,GAAmBpE,EAAAA,EAAAA,WAAS,WAChC,OAAOJ,EAAcnS,uBAAuByW,MAAK,SAAA9L,GAAI,OAAIA,EAAKwB,YAAY,GAC5E,IAuCA,SAASyK,EAAWzO,GAA4B,IAAtB0O,EAAYna,UAAAnC,OAAA,QAAAsC,IAAAH,UAAA,IAAAA,UAAA,GACpC,OAAOrH,IAAM8S,GAAM5C,OAAO,QAADhC,OAASsT,EAAe,IAAM,IACzD,CAOA,SAAS/C,EAAeC,GACtB,IAAMvR,EAAQgJ,KAAKwI,MAAMD,EAAU,IAC7B+C,EAAmB/C,EAAU,GACnC,OAAc,IAAVvR,EAAoB,GAAPe,OAAUuT,EAAgB,YACpC,GAAPvT,OAAUf,EAAK,SAAAe,OAAQf,EAAQ,EAAI,IAAM,GAAE,KAAAe,OAAIuT,EAAmB,EAAIA,EAAmB,WAAa,GACxG,CAGA,SAASC,EAAc9Y,GACrB,IAAM+Y,EAAQ,CACZC,WAAY,GAAF1T,OAAKtF,EAAK2N,UAAS,YAAArI,OAAWtF,EAAK4N,UAC7CU,QAAS,OAAFhJ,OAAStF,EAAKsO,UAGvB,OADAnJ,QAAQC,IAAI2T,GACLA,CACT,CAGA,SAASE,EAAoBjZ,GAC3B,OAAKA,GAGLmF,QAAQC,IAAI,6BAADE,OAA8BtF,EAAK2N,UAAS,iBAAArI,OAAgBtF,EAAK4N,WAErE,CACLoL,WAAY,GAAF1T,OAAKtF,EAAK2N,UAAS,YAAArI,OAAWtF,EAAK4N,UAC7CU,QAAS,UAPO,CAAC,CASrB,EA1EAkH,EAAAA,EAAAA,QAAM,kBAAMtB,EAAcvR,SAAS,IAAE,SAACuW,EAAcC,GAC9CD,GAAgBA,EAAa5c,OAAS,IAAM8b,IAC9CjT,QAAQC,IAAI,mDACZ8O,EAAc7J,sBACd+N,GAAqB,EAEzB,GAAG,CAAC9B,WAAW,KAEfd,EAAAA,EAAAA,QACI,kBAAMtB,EAAc9S,QAAQ,IAC5B,SAACgJ,EAASgP,GACJhP,IAAYgP,IACdjU,QAAQC,IAAI,0BAADE,OAA2B8T,EAAO,QAAA9T,OAAO8E,IACpD8J,EAAc7J,sBAElB,GACA,CAACiM,WAAW,KAKhBd,EAAAA,EAAAA,OACI,CAAC,kBAAMvK,EAAgBE,iBAAiB,EAAE,kBAAMF,EAAgBG,aAAa,IAC7E,SAAAmJ,EAAA0B,GAAwD,IAAAoD,EAAAlB,EAAA5D,EAAA,GAAtD+E,EAAYD,EAAA,GAAEE,EAAQF,EAAA,GAAAG,EAAArB,EAAAlC,EAAA,GAAIwD,EAAYD,EAAA,GAAEE,EAAQF,EAAA,GAC5CF,IAAiBG,GAAgBF,IAAaG,IAChDvU,QAAQC,IAAI,iDAADE,OAAkDgU,EAAY,mBAAAhU,OAAkBiU,IAC3FrF,EAAc7J,sBAElB,GACA,CAACiM,WAAW,KAGhBqD,EAAAA,EAAAA,cAAY,WACVxU,QAAQC,IAAI,0BAA2B8O,EAAcnS,uBACvD,IA4CA,IAAM6X,GAActF,EAAAA,EAAAA,WAAS,WAC3B,IAAIuF,EAWJ,OATEA,EADE5O,EAAgBE,kBACLoC,KAAKwI,MAAgD,GAAzC7B,EAAcxR,yBAAiCwR,EAAc3R,qBAC7E0I,EAAgBG,cACZmC,KAAKwI,MAA4C,GAArC7B,EAAczR,qBAA6ByR,EAAc3R,qBAErEgL,KAAKwI,MAA6C,GAAtC7B,EAAc1R,sBAA8B0R,EAAc3R,qBAErFkR,SAASqG,gBAAgBf,MAAMgB,YAAY,cAAeF,EAAa,EAAI,QAAU,OACrFpG,SAASqG,gBAAgBf,MAAMgB,YAAY,eAAgBF,EAAa,EAAI,QAAU,SAE/E,UAAPvU,OAAiBuU,EAAU,oBAC7B,IAGM9J,GAAqCuE,EAAAA,EAAAA,WAAS,kBAAMJ,EAAcnE,kCAAkC,IACpGhO,GAAyBuS,EAAAA,EAAAA,WAAS,kBAAMJ,EAAcnS,sBAAsB,IAC5EM,GAAoBiS,EAAAA,EAAAA,WAAS,kBAAMJ,EAAc7R,iBAAiB,WAiExE8C,QAAQC,IAAI,sBAAuB8O,EAAcnS,yBAqBjDyT,EAAAA,EAAAA,QAAM,kBAAMtB,EAAcnS,sBAAsB,IAAE,WAChDoD,QAAQC,IAAI,wCACd,GAAG,CAAC4U,MAAM,4mDAvDV,SAAyBha,GACvBkT,EAAAA,QAAQyC,MAAM,UAADrQ,OAAWtF,EAAKqJ,QAAQuM,KAAI,KAQ3C,o+CAjGwB/Q,oBACfzN,IAAMyN,GAAMyC,OAAO,wkCAD5B,IAAwBzC,oBC/NpB,EAAU,CAEd,OAAiB,OACjB,WAAoB,GAEP,IAAI,IAAS,GAIX,IAAQ2R,OAAvB,MCJA,GAFiC,OAAgB,EAAQ,CAAC,CAAC,YAAY,+0CCDvE,wDCiIAvE,EAAAA,EAAAA,GAAa,YAEb,IAAMhH,GAAkBC,EAAAA,EAAAA,uBACFpI,EAAAA,EAAAA","sources":["webpack:///./resources/js/Utilities/TimeUtils.js","webpack:///./resources/js/Stores/ScheduleStore.js","webpack:///./resources/js/Utilities/PageSetup.js","webpack:///./resources/js/Components/Global/Calendar/TodayView.vue?6d78","webpack:///./resources/js/Components/Global/Schedule/ScheduleGridContainer.vue?eabc","webpack:///./resources/js/Components/Pages/Schedule/ScheduleGrid.vue","webpack:///./resources/js/Components/Global/Calendar/TodayView.vue","webpack:///./resources/js/Components/Global/Calendar/TodayView.vue?9797","webpack:///./resources/js/Components/Global/Calendar/TodayView.vue?ee4f","webpack:///./resources/js/Components/Global/Modals/Messages.vue?dfe9","webpack:///./resources/js/Components/Global/Modals/Messages.vue","webpack:///./resources/js/Components/Global/Modals/PopUpModal.vue?0d51","webpack:///./resources/js/Components/Global/Modals/PopUpModal.vue","webpack:///./resources/js/Components/Pages/Schedule/ScheduleGrid.vue?c989","webpack:///./resources/js/Components/Global/Schedule/CurrentTime.vue","webpack:///./resources/js/Components/Global/Schedule/CurrentTime.vue?93a9","webpack:///./resources/js/Components/Global/Schedule/ScheduleGridContainer.vue","webpack:///./resources/js/Components/Global/Schedule/ScheduleGridContainer.vue?f112","webpack:///./resources/js/Components/Global/Schedule/ScheduleGridContainer.vue?63d2","webpack:///./resources/js/Pages/Schedule/Index.vue?d7b5","webpack:///./resources/js/Pages/Schedule/Index.vue"],"sourcesContent":["// utilities/timeUtils.js\nimport dayjs from 'dayjs';\nimport utc from 'dayjs/plugin/utc';\nimport timezone from 'dayjs/plugin/timezone';\n\ndayjs.extend(utc);\ndayjs.extend(timezone);\n\n/**\n * Creates an array of Date objects representing time slots.\n *\n * This function generates a sequence of time slots starting from a specified\n * start time, continuing for a given number of hours, and spaced apart\n * by a specified interval in minutes.\n *\n * @param {Date} start - The start time from which to generate slots, as a Date object.\n * @param {number} [durationHours=4] - The total duration for which to generate slots, in hours.\n * @param {number} [intervalMinutes=30] - The interval between each slot, in minutes.\n * @param {string} timezone - The timezone in which the time slots will be calculated.\n * @returns {Date[]} An array of Date objects, each representing a time slot.\n *\n * Example:\n * If start is `new Date('2024-01-01T08:00:00Z')`, durationHours is 2, and intervalMinutes is 30,\n * the output will be an array of Date objects representing the times:\n * `08:00`, `08:30`, `09:00`, and `09:30`.\n */\nexport function createTimeSlots(start, durationHours = 4, intervalMinutes = 30, timezone) {\n    // console.log(`Creating time slots starting from ${start}, for ${durationHours} hours, every ${intervalMinutes} minutes in timezone ${timezone}.`);\n    let slots = [];\n    let startTime = dayjs(start).tz(timezone);  // Convert start time to the correct time zone\n    for (let i = 0; i < (durationHours * 60) / intervalMinutes; i++) {\n        let slotTime = startTime.add(i * intervalMinutes, 'minute').toDate();  // Generate slots in the correct time zone\n        slots.push(slotTime);  // Keep as Date object\n    }\n    return slots;\n}\n// export function createTimeSlots(start, durationHours = 4, intervalMinutes = 30) {\n//     let slots = [];\n//     let startTime = dayjs(start).tz(userStore.timezone);  // Convert start time to the correct time zone\n//     for (let i = 0; i < (durationHours * 60) / intervalMinutes; i++) {\n//         let slotTime = new Date(start.getTime() + i * intervalMinutes * 60000);\n//         slots.push(slotTime);  // Keep as Date object\n//     }\n//     return slots;\n// }","import { defineStore } from 'pinia'\nimport { useUserStore } from '@/Stores/UserStore'\nimport { useAppSettingStore } from '@/Stores/AppSettingStore'\nimport { createTimeSlots } from '@/Utilities/TimeUtils'\nimport {\n    addDays,\n    addHours,\n    addMonths,\n    eachDayOfInterval,\n    eachHourOfInterval,\n    endOfMonth,\n    endOfWeek,\n    format,\n    getHours,\n    getMonth,\n    getYear,\n    isSameDay,\n    isToday,\n    isTomorrow,\n    isYesterday,\n    startOfDay,\n    startOfHour,\n    startOfMonth,\n    startOfWeek,\n    subMonths,\n} from 'date-fns'\n\n// Import dayjs and its plugins\nimport dayjs from 'dayjs'\nimport isSameOrAfter from 'dayjs/plugin/isSameOrAfter'\nimport isSameOrBefore from 'dayjs/plugin/isSameOrBefore' // To check if the day is the same\nimport relativeTime from 'dayjs/plugin/relativeTime'\nimport duration from 'dayjs/plugin/duration'\nimport timezone from 'dayjs/plugin/timezone'\nimport utc from 'dayjs/plugin/utc'\nimport weekOfYear from 'dayjs/plugin/weekOfYear' // For week start and end calculations\nimport advancedFormat from 'dayjs/plugin/advancedFormat' // For more complex formatting options\n\n// Extend dayjs with the plugins\ndayjs.extend(relativeTime)\ndayjs.extend(duration)\ndayjs.extend(timezone)\ndayjs.extend(weekOfYear)\ndayjs.extend(advancedFormat)\ndayjs.extend(utc)\ndayjs.extend(isSameOrAfter)\ndayjs.extend(isSameOrBefore)\n\nfunction convertScheduleToTimezone(scheduleData) {\n    const userStore = useUserStore() // Access the UserStore\n\n    return scheduleData.data.map(item => {\n        // Convert top-level start_time and end_time using UserStore methods\n        // console.log(`Original startTime for ${item.id}: ${item.startTime}`);\n        const startTimeInUserTz = item.startTime ? userStore.formatDateTimeFromUtcToUserTimezone(item.startTime, 'YYYY-MM-DD HH:mm:ss') : null\n        const endTimeInUserTz = item.endTime ? userStore.formatDateTimeFromUtcToUserTimezone(item.endTime, 'YYYY-MM-DD HH:mm:ss') : null\n        // Add debug logging to help trace conversion issues or confirm correct conversions\n        // console.log(`Converted startTime for ${item.id}: ${startTimeInUserTz}`);\n\n        return {\n            ...item,\n            startTime: startTimeInUserTz,\n            endTime: endTimeInUserTz,\n            timezone: userStore.timezone,\n        }\n    })\n}\n\n// Helper function to get dates within the next 6 hours from viewingWindowStart\nfunction getUpcomingContentDates(viewingWindowStart) {\n    let dates = []\n    let start = dayjs(viewingWindowStart) // Ensure viewingWindowStart is a Day.js object\n\n    for (let i = 0; i < 6; i++) {\n        // Add i hours to the start time, each time creating a new Day.js object\n        dates.push(start.add(i, 'hour').toDate()) // Convert to Date if necessary; otherwise keep as Day.js object\n    }\n\n    return dates\n}\n\nconst getTimeZone = () => {\n    const userStore = useUserStore()\n    // This function should return the timezone of the user.\n    // This could be dynamic based on the user's settings or browser settings.\n    // return Intl.DateTimeFormat().resolvedOptions().timeZone;\n    return userStore.timezone\n}\n\nconst initialState = () => ({\n    baseTime: dayjs().tz(getTimeZone()).toDate(),\n    currentHalfHour: dayjs().tz(getTimeZone()).startOf('hour').add(dayjs().minute() >= 30 ? 30 : 0, 'minute').toDate(),\n    fourHoursLater: dayjs().tz(getTimeZone()).startOf('hour').add(dayjs().minute() >= 30 ? 30 : 0, 'minute').add(4, 'hour').toDate(),\n    viewingWindowStart: dayjs().tz(getTimeZone()).startOf('hour').toDate(),\n    currentMonth: dayjs().tz(getTimeZone()).startOf('month').toDate(),\n    selectedDay: dayjs().tz(getTimeZone()).toDate(),\n    currentWeekStart: dayjs().tz(getTimeZone()).startOf('week').toDate(),\n    currentWeekEnd: dayjs().tz(getTimeZone()).endOf('week').toDate(),\n    nextFourHoursOfContent: [],\n    nextFourHoursOfContentWithPlaceholders: [],\n    // nextFourHoursWithHalfHourIntervals: [],\n    // viewingMode: 'automatic', // or 'userSelected'\n    fiveDaySixHourSchedule: [], // Holds the schedule shows 5 day / 6 hour structured data\n    todaysContent: [],\n    weeklyContent: [],\n    dataFetchLog: [],\n    scheduleIsLoading: false,\n    savingToSchedule: false,\n    slotIntervalMinutes: 30,\n    mediumScreenSlotHours: 4, // 4 hours = 8 slots\n    smallScreenSlotHours: 2, // 2 hours = 4 slots\n    verySmallScreenSlotHours: 1, // 1 hour = 2 slots\n    timeSlots: null,\n    timeBanners: [\n        {id: 1, name: 'Early Morning', startTime: '04:00', duration: 2},\n        {id: 2, name: 'Morning', startTime: '06:00', duration: 6},\n        {id: 3, name: 'Afternoon', startTime: '12:00', duration: 5},\n        {id: 4, name: 'Prime Time', startTime: '17:00', duration: 3},\n        {id: 5, name: 'Late Prime Time', startTime: '20:00', duration: 3},\n        {id: 6, name: 'Late Night', startTime: '23:00', duration: 2}, // Spans midnight to 01:00\n        {id: 7, name: 'Overnight', startTime: '01:00', duration: 3}, // Spans from 01:00 to 04:00\n    ]\n})\n\nexport const useScheduleStore = defineStore('scheduleStore', {\n    state: initialState,\n    actions: {\n        resetAll() {\n            // Reset the store to its original state (clear all data)\n            Object.assign(this, initialState())\n        },\n        reset() {\n            this.viewingWindowStart = dayjs().tz(getTimeZone()).startOf('hour').toDate()\n            this.currentMonth = dayjs().tz(getTimeZone()).startOf('month').toDate()\n            this.selectedDay = dayjs().tz(getTimeZone()).toDate()\n        },\n        async setSelectedDay(day) {\n            // Ensure that 'day' is a Day.js object, convert if coming as a native Date or string\n            const selectedDay = dayjs(day)\n\n            // Set the selected day\n            this.selectedDay = selectedDay.toDate() // Convert back to Date if necessary; otherwise keep as Day.js object\n\n            // Explicitly set the viewingWindowStart to 4 AM for the selected day\n            this.viewingWindowStart = selectedDay.startOf('day').add(4, 'hours').toDate()\n\n            // Set the start and end of the week based on the selected day\n            this.currentWeekStart = selectedDay.startOf('week').toDate() // Consider week starting on Sunday\n            this.currentWeekEnd = selectedDay.endOf('week').toDate() // Consider week ending on Saturday\n\n            // Use the updated fetch logic\n            await this.fetchWeekDataIfNeeded()\n        },\n        setSelectedDayToToday(day) {\n            const now = dayjs()  // Create a Day.js object for the current date and time\n\n            // Set selectedDay to the current date and time\n            this.selectedDay = now.toDate() // Convert back to Date if necessary; otherwise keep as Day.js object\n\n            // Set viewingWindowStart to the start of the current hour using Day.js\n            this.viewingWindowStart = now.startOf('hour').toDate()\n        },\n        async changeDay(days) {\n            const currentTimeZone = getTimeZone() // or however you obtain the timezone\n            // Extract the time component from the current viewing window start\n            const currentTime = dayjs(this.viewingWindowStart).hour() * 60 + dayjs(this.viewingWindowStart).minute()\n\n            // Create a new day and set it to the start of that day\n            let newDay = dayjs(this.viewingWindowStart).tz(currentTimeZone).add(days, 'day').startOf('day')\n\n            // Set the time back to the original time\n            newDay = newDay.add(currentTime, 'minute')\n\n            // Depending on your application's needs, you may or may not need to convert it back to a JavaScript Date object\n            // If you need a Date object:\n            this.viewingWindowStart = newDay.toDate()\n\n            // If you can use dayjs objects directly (preferred if possible):\n            this.viewingWindowStart = newDay\n\n            // // Check if the week of the new day is already loaded\n            // const weekStart = startOfWeek(newDay, {weekStartsOn: 0});\n            // const weekEnd = endOfWeek(newDay, {weekStartsOn: 0});\n\n            // Use the updated centralized fetch logic without redundant checks\n            await this.fetchWeekDataIfNeeded()\n\n            // // Check for the need to load data for the new week\n            // if (this.needsDataForWeek(weekStart, weekEnd)) {\n            //     await this.loadWeekFromDate(newDay).catch(error => {\n            //         console.error(\"Failed to load data for the new week:\", error);\n            //     });\n            // }\n\n            // // Check for the need to load data for the new week\n            // if (!this.needsDataForWeek()) {\n            //     // Data for the current week has already been loaded; skip fetching\n            //     console.log(\"Data for the current week has already been loaded; skipping redundant fetch.\");\n            //     return;\n            // }\n            //\n            // // Proceed with data fetching if needed\n            // await this.checkAndFetchForUpcomingContent();\n        },\n        async shiftHours(hours) {\n            // Shift the viewing window by the specified number of hours\n            this.viewingWindowStart = dayjs(this.viewingWindowStart).add(hours, 'hour').toDate()\n\n            // Set the current week start and end based on the new viewing window start\n            this.currentWeekStart = dayjs(this.viewingWindowStart).startOf('week').toDate()\n            this.currentWeekEnd = dayjs(this.viewingWindowStart).endOf('week').toDate()\n\n            // If the day has changed, update selectedDay and the week's range\n            if (!dayjs(this.viewingWindowStart).isSame(dayjs(this.selectedDay), 'day')) {\n                this.selectedDay = dayjs(this.viewingWindowStart).startOf('day').toDate()\n            }\n\n            // Use the updated fetch logic\n            await this.fetchWeekDataIfNeeded()\n        },\n        isElevenPM(date) {\n            // Convert the date to a Day.js object if it's not already one\n            const time = dayjs(date)\n            // Check if the hour is 23 (11 PM)\n            return time.hour() === 23\n        },\n        // Actions to change the month\n        async subtractMonth() {\n            // Convert currentMonth to a Day.js object if it's not already and subtract one month\n            this.currentMonth = dayjs(this.currentMonth).subtract(1, 'month').toDate()\n\n            try {\n                // Pass the new currentMonth to setSelectedDay\n                await this.setSelectedDay(this.currentMonth)\n                console.log('Set selected day based on current month:', this.currentMonth)\n            } catch (error) {\n                console.error(`Failed to set selected day based on current month ${this.currentMonth}:`, error)\n            }\n        },\n        async addMonth() {\n            // Convert currentMonth to a Day.js object if it's not already and add one month\n            this.currentMonth = dayjs(this.currentMonth).add(1, 'month').toDate()\n\n            try {\n                // Pass the new currentMonth to setSelectedDay\n                await this.setSelectedDay(this.currentMonth)\n                console.log('Set selected day based on current month:', this.currentMonth)\n            } catch (error) {\n                console.error(`Failed to set selected day based on current month ${this.currentMonth}:`, error)\n            }\n        },\n        async fetchFiveDaySixHourSchedule() {\n            console.error('fetchFiveDaySixHourSchedule')\n            try {\n                const userStore = useUserStore()\n                const response = await axios.get('/api/schedule')\n\n                // Fallback to response timezone if userStore.timezone is not set\n                const timezone = userStore.timezone || response.data.userTimezone || 'UTC' // Additional fallback to 'UTC'\n\n                // Convert the entire schedule, including nested recurrenceDetails, to the user's timezone\n                this.fiveDaySixHourSchedule = convertScheduleToTimezone(response.data, timezone)\n                console.error('fetchFiveDaySixHourSchedule', response.data)\n            } catch (error) {\n                console.error('Failed to load schedule shows:', error)\n                // Handle the error state as needed, e.g., setting an error state property\n            }\n        },\n        async fetchTodaysContent() {\n            try {\n                const userStore = useUserStore()\n                const response = await axios.get('/api/schedule/today')\n\n                // Fallback to response timezone if userStore.timezone is not set\n                const timezone = userStore.timezone || response.data.userTimezone || 'UTC' // Additional fallback to 'UTC'\n\n                this.todaysContent = convertScheduleToTimezone(response.data, timezone)\n            } catch (error) {\n                console.error('Failed to fetch today\\'s content:', error)\n            }\n        },\n        async preloadWeeklyContent() {\n            // Use the current date to preload content for the current week\n            const currentDate = dayjs() // Creates a Day.js object representing the current date and time\n\n            try {\n                // Call loadWeekFromDate with the current Day.js date object, converted to a Date if necessary\n                await this.loadWeekFromDate(currentDate.toDate()) // Convert to JavaScript Date if loadWeekFromDate expects a Date object\n            } catch (error) {\n                console.error('Failed to preload weekly content:', error)\n            }\n        },\n        async loadWeekFromDate(date) {\n            let formattedDate = null // Declare formattedDate outside of the try block\n            this.scheduleIsLoading = true\n            try {\n                const userStore = useUserStore()\n                // Ensure the date is in UTC format for the request\n                // console.log('Date before formatted: ' + date)\n                // Convert date to Day.js object and format it in ISO string with UTC\n                const dayDate = dayjs(date)\n                const fullISODate = dayDate.toISOString()\n                // console.log(`Loading week data for date in UTC: ${fullISODate}`)\n\n                // Fetch the week's schedule data\n                // Send the dateTime and timezone as a JSON object in a POST request\n                const response = await axios.post(`/api/schedule/week/${fullISODate}`)\n\n                // const formattedDate = date.toISOString().split('T')[0];\n                // Log and error handling\n                const formattedDate = dayDate.format('YYYY-MM-DD') // For potential error messages and logging\n                // console.log(`Loading week data for date: ${formattedDate}`); // Log the date being requested\n                //\n                // const response = await axios.get(`/api/schedule/week/${formattedDate}`);\n                // console.log('Received response:', response.data) // Log the raw response data\n\n                // Fallback to response timezone if userStore.timezone is not set\n                const timezone = userStore.timezone || response.data.userTimezone || 'UTC' // Additional fallback to 'UTC'\n                // console.log(`Using timezone: ${timezone}`) // Log the timezone being used\n\n                const newData = convertScheduleToTimezone(response.data, timezone) // Ensure you are accessing the correct data property from the response\n\n                // Merge newData into weeklyContent, avoiding duplicates\n                this.weeklyContent = [...this.weeklyContent, ...newData].filter((value, index, self) =>\n                        index === self.findIndex((t) => (\n                            t.id === value.id && t.startTime === value.startTime\n                        )),\n                )\n\n                // Optionally update fetch logs or perform additional state updates\n                this.updateFetchLogs(date)\n\n                this.scheduleIsLoading = false\n            } catch (error) {\n                console.error(`Failed to load content for week starting ${formattedDate}:`, error)\n                this.scheduleIsLoading = false\n            }\n        },\n        updateFetchLogs(date) {\n            // Convert date to a Day.js object if it's not already one\n            const dayDate = dayjs(date)\n\n            // Use Day.js to calculate the start and end of the week\n            const weekStart = dayDate.startOf('week').toISOString() // Assumes the week starts on Sunday\n            const weekEnd = dayDate.endOf('week').toISOString() // Assumes the week ends on Saturday\n            const fetchTime = dayjs().toISOString() // Current time in ISO format\n\n            // Find existing log entry for the week\n            const existingLogIndex = this.dataFetchLog.findIndex(log =>\n                log.weekStart === weekStart && log.weekEnd === weekEnd)\n\n            if (existingLogIndex !== -1) {\n                // Update the last fetch time if the log already exists\n                this.dataFetchLog[existingLogIndex].lastFetch = fetchTime\n            } else {\n                // Add a new log entry if it does not exist\n                this.dataFetchLog.push({weekStart, weekEnd, lastFetch: fetchTime})\n            }\n        },\n        needsDataForWeek() {\n            // Helper function to format dates to 'YYYY-MM-DD' for easier comparison\n            const formatISODate = (date) => dayjs(date).format('YYYY-MM-DD')\n\n            // Current week range in 'YYYY-MM-DD' format\n            const weekStartStr = formatISODate(this.currentWeekStart)\n            const weekEndStr = formatISODate(this.currentWeekEnd)\n\n            // Enhanced logging for debugging\n            console.log(`Current week range: ${weekStartStr} to ${weekEndStr}`)\n            console.log('Existing data fetch log entries:', this.dataFetchLog)\n\n            // Iterate through the fetch log to check if the current week has been fetched\n            const weekHasBeenFetched = this.dataFetchLog.some(log => {\n                // Convert log dates to 'YYYY-MM-DD' format for comparison\n                const logWeekStartStr = formatISODate(log.weekStart)\n                const logWeekEndStr = formatISODate(log.weekEnd)\n\n                // Log each comparison for insight\n                console.log(`Comparing to fetched range: ${logWeekStartStr} to ${logWeekEndStr}`)\n\n                return logWeekStartStr <= weekStartStr && logWeekEndStr >= weekEndStr\n            })\n\n            // Log the final determination\n            console.log(`Week from ${weekStartStr} to ${weekEndStr} has ${weekHasBeenFetched ? '' : 'not '}been fetched.`)\n\n            return !weekHasBeenFetched\n        },\n        calculateExtendedEndForUpcomingContent() {\n            // Convert viewingWindowStart to a Day.js object if it's not already one\n            const baseStartTime = dayjs(this.viewingWindowStart)\n\n            // Extend by 6 hours to cover the upcoming content span\n            // Day.js handles date and time addition cleanly, returning a new Day.js object\n            const extendedEndTime = baseStartTime.add(6, 'hour')\n\n            // Return the extended end time as a Date object, if needed elsewhere as a Date\n            return extendedEndTime.toDate()\n        },\n        // Function to check for and fetch missing upcoming content\n        async checkAndFetchForUpcomingContent() {\n            const upcomingDates = getUpcomingContentDates(this.viewingWindowStart) // Assuming this returns Day.js objects\n            const now = dayjs()\n            const fifteenMinutesAgo = now.subtract(15, 'minutes')\n\n            for (const date of upcomingDates) {\n                const dateString = date.format('YYYY-MM-DD')  // Day.js format for 'YYYY-MM-DD'\n                const contentCoverageAndFreshness = this.weeklyContent.some(content => {\n                    const contentDate = dayjs(content.startTime).format('YYYY-MM-DD')  // Convert and compare as 'YYYY-MM-DD'\n                    const lastFetchedTime = this.dataFetchLog[dateString]\n                    const isFresh = lastFetchedTime && dayjs(lastFetchedTime) > fifteenMinutesAgo\n                    return dateString === contentDate && isFresh\n                })\n\n                if (!contentCoverageAndFreshness) {\n                    // This date needs data fetching\n                    await this.fetchDataAndUpdateLog(dateString, date.toDate()) // Pass as Date if needed, or adjust downstream functions to accept Day.js objects\n                    break // Assuming you fetch data for the week, so no need to check further dates within the same week\n                }\n            }\n        },\n        async fetchDataAndUpdateLog(dateString, date) {\n            try {\n                // Assuming 'date' is already a Day.js object; if not, convert it\n                const dayDate = dayjs(date)\n\n                await this.loadWeekFromDate(dayDate.toDate())  // Pass as a Date if needed, or adjust 'loadWeekFromDate' to accept Day.js objects\n                // Successfully fetched, so update the log\n                this.dataFetchLog[dateString] = dayjs().toISOString()  // Use Day.js to get the current time in ISO format\n                console.log('Data fetched successfully for date:', dateString)\n            } catch (error) {\n                console.error(`Failed to fetch data for date ${dateString}:`, error)\n            }\n        },\n\n        // Updated to use this.currentWeekStart and this.currentWeekEnd directly\n        async fetchWeekDataIfNeeded() {\n            // Assumes this.currentWeekStart and this.currentWeekEnd are already set\n            if (this.needsDataForWeek()) {\n                await this.checkAndFetchForUpcomingContent().catch(error => {\n                    console.error('Failed to load data for the week:', error)\n                    return false // Indicates failure to fetch when an error occurs\n                })\n            } else {\n                console.log('Week data already loaded; no need to fetch.')\n            }\n        },\n\n        // Function to simply update baseTime with the given time (expected to be a Day.js object or compatible input)\n        updateBaseTime(time) {\n            // Ensure the time is a Day.js object when setting baseTime\n            this.baseTime = dayjs(time).toDate()  // Convert to Date if necessary; consider keeping it as Day.js object if possible\n        },\n\n        // Function to set baseTime based on a new time input (expected to be a string, Date, etc.)\n        setBaseTime(newTime) {\n            // Convert newTime to a Day.js object and then to Date if necessary\n            this.baseTime = dayjs(newTime).toDate()  // This handles various input formats and ensures consistency\n        },\n\n\n        /**\n         * This method orchestrates the update of show scheduling data for the next four hours.\n         * It is designed to be triggered when there are changes to the base time or when a manual refresh is needed.\n         * The method handles loading and organizing the scheduling data to be ready for display in the grid.\n         */\n        async updateNextFourHours() {\n            // Set the loading state to true to indicate that data processing is underway.\n            // This can be used to display a loading spinner or disable user interaction temporarily.\n            this.scheduleIsLoading = true\n\n            // Update the time range for the scheduling grid. This adjusts `currentHalfHour` and `fourHoursLater`\n            // based on the current `baseTime`. These values define the range of time for which shows will be displayed.\n            this.updateTimeRange()\n\n            // Update the time slots\n            this.setTimeSlots()\n\n            // Prepares the shows for the grid display by filtering, calculating grid slots,\n            // resolving conflicts, and optionally filling empty grid slots with placeholders.\n            // This step involves several functions that ensure shows are positioned correctly according to their\n            // start time, duration, and conflicts with other shows.\n            this.prepareShowsForGrid()\n\n            // Reset the loading state to false indicates that the data processing is complete.\n            // This allows the user interface to be interactive again and shows the updated data in the grid.\n            this.scheduleIsLoading = false\n        },\n\n\n        updateTimeRange() {\n            // Ensure the baseTime is interpreted correctly in the current user's timezone\n            const baseDate = dayjs(this.baseTime).tz(getTimeZone())\n\n            // Calculate the rounded minutes to either 0 or 30 based on the current time\n            const roundedMinutes = baseDate.minute() < 30 ? 0 : 30\n\n            // Set the current half hour, rounding down to the nearest half-hour mark\n            const currentHalfHour = baseDate.minute(roundedMinutes).second(0).millisecond(0).startOf('minute')\n\n            // Calculate four hours later from the current half-hour mark\n            const fourHoursLater = currentHalfHour.add(4, 'hours')\n\n            // Update the store's currentHalfHour and fourHoursLater ensuring they are Date objects if required\n            this.currentHalfHour = currentHalfHour.toDate()\n            this.fourHoursLater = fourHoursLater.toDate()\n\n            console.log('Fetching shows between:', currentHalfHour.format('YYYY-MM-DD HH:mm:ss'), 'and', fourHoursLater.format('YYYY-MM-DD HH:mm:ss'))\n        },\n\n        setTimeSlots() {\n            const appSettingStore = useAppSettingStore()\n            let slotHours\n\n            // Determine the number of slot hours based on screen size\n            if (appSettingStore.isVerySmallScreen) {\n                slotHours = this.verySmallScreenSlotHours\n            } else if (appSettingStore.isSmallScreen) {\n                slotHours = this.smallScreenSlotHours\n            } else {\n                slotHours = this.mediumScreenSlotHours\n            }\n\n            const intervalMinutes = this.slotIntervalMinutes\n            const slots = []\n            const totalSlots = (slotHours * 60) / intervalMinutes\n\n            // Ensure state.currentHalfHour is a Day.js object\n            const currentHalfHour = dayjs(this.currentHalfHour)\n\n            // Calculate the time for each slot using Day.js\n            for (let i = 0; i < totalSlots; i++) {\n                let slotTime = currentHalfHour.add(i * intervalMinutes, 'minute')\n                slots.push(slotTime.toDate())  // Convert back to JavaScript Date if necessary\n            }\n            this.timeSlots = slots\n            return slots.length\n        },\n\n        prepareShowsForGrid() {\n            // Step 1: Filter shows within the desired time range\n            const shows = this.filterShowsForTimeRange()\n\n            // Step 2: Calculate initial grid slots for these shows\n            const processedShows = this.calculateGridSlots(shows, this.timeSlots)\n\n            if (!this.timeSlots || !Array.isArray(this.timeSlots) || this.timeSlots.length === 0) {\n                console.error('timeSlots is not properly initialized.')\n                // Handle this scenario, e.g., by initializing timeSlots, or skipping the update\n                return\n            }\n\n            // Step 3: Process shows to set nowPlaying and comingUpNext flags\n            const showsWithStatusFlags = this.processShows(processedShows)\n\n            // Step 4: Update column occupancy and find the maximum row used\n            const {colOccupancy, maxRowUsed} = this.updateColumnOccupancy(showsWithStatusFlags, this.timeSlots.length)\n\n            // Step 5: Fill gaps in the grid with placeholders\n            const gridItems = this.fillGapsAndCreatePlaceholders(colOccupancy, maxRowUsed, this.timeSlots.length)\n\n            // Step 6: Combine processed shows with the placeholders\n            const combinedShows = [...showsWithStatusFlags, ...gridItems]\n\n            // Step 7: Sort and group shows by rows\n            this.nextFourHoursOfContent = this.sortShowsByPosition(combinedShows)\n        },\n\n        filterShowsForTimeRange() {\n            return this.weeklyContent.filter(show => {\n                // Validate show data integrity\n                if (typeof show.startTime !== 'string' || typeof show.durationMinutes !== 'number') {\n                    console.warn('Invalid show data:', show.startTime, show.durationMinutes)\n                    return false // Skip this show if it doesn't meet data expectations\n                }\n\n                const showStart = dayjs(show.startTime)\n                const showEnd = dayjs(show.endTime)\n                const isInTimeRange = showStart.isBefore(this.fourHoursLater) && showEnd.isAfter(this.currentHalfHour)\n\n                // Detailed logging for debugging\n                if (isInTimeRange) {\n                    const hasStarted = showStart.isBefore(this.currentHalfHour) ? 'already started' : 'starts within range'\n                    console.log(`Show: ${show.content.name}, ${hasStarted}, Start: ${showStart.format('HH:mm:ss')}, End: ${showEnd.format('HH:mm:ss')}, Duration: ${show.durationMinutes}`)\n                }\n\n                return isInTimeRange\n            })\n        },\n\n        calculateGridSlots(shows, timeSlots) {\n            // Validate the timeSlots array to prevent errors\n            if (!Array.isArray(timeSlots) || timeSlots.length === 0) {\n                console.error('Invalid or empty timeSlots array')\n                return [] // Exit if no valid time slots to work with\n            }\n\n            // Determine the range of timeSlots\n            const firstTimeSlot = dayjs(timeSlots[0])\n            const lastTimeSlot = dayjs(timeSlots[timeSlots.length - 1]).add(30, 'minutes')\n\n\n            return shows.filter(show => {\n                const showStart = dayjs(show.startTime)\n                const showEnd = dayjs(show.endTime)\n                return showStart.isBefore(lastTimeSlot) && showEnd.isAfter(firstTimeSlot)\n            }).map(show => {\n                const showStart = dayjs(show.startTime)\n                const showEnd = dayjs(show.endTime)\n                console.log('************************************')\n                console.log(`Processing show: ${show.content.name}, Start: ${show.startTime}, End: ${show.endTime}`)\n\n                // Find the index of the slot where the show should start\n                let slotIndex = timeSlots.findIndex(slot => showStart.isSameOrBefore(dayjs(slot)))\n\n                // Adjust if the show starts exactly at a slot time or just after the last checked slot time\n                if (slotIndex === -1 || showStart.isAfter(dayjs(timeSlots[slotIndex]))) {\n                    slotIndex = Math.max(0, slotIndex)\n                }\n\n                console.log(`Comparing show start ${showStart.format()} to timeSlot index ${slotIndex} at ${dayjs(timeSlots[slotIndex]).format()}`)\n\n                // Calculate the end slot index\n                let endSlotIndex = timeSlots.findIndex(slot => showEnd.isSameOrBefore(dayjs(slot).add(30, 'minutes')))\n\n                // If the end slot index points to a slot that starts after the show ends, subtract one\n                if (endSlotIndex !== -1 && showEnd.isBefore(dayjs(timeSlots[endSlotIndex]))) {\n                    endSlotIndex--\n                }\n\n                // Handle cases where the show ends after the last slot\n                if (endSlotIndex === -1 || showEnd.isSame(dayjs(timeSlots[timeSlots.length - 1]).add(30, 'minutes'))) {\n                    endSlotIndex = timeSlots.length - 1\n                }\n\n                console.log(`Comparing show end ${showEnd.format()} to timeSlot index ${endSlotIndex} at ${endSlotIndex !== -1 ? dayjs(timeSlots[endSlotIndex]).format() : 'out of range'}`)\n\n\n                // Calculate the number of slots the show should span\n                let span = endSlotIndex - slotIndex + 1\n\n                console.log(`Calculated gridStart: ${slotIndex + 1}, gridSpan: ${span}`)\n\n                return {\n                    ...show,\n                    gridStart: slotIndex + 1, // Convert to 1-based index for grid positioning\n                    gridSpan: span,\n                }\n            })\n        },\n\n        processShows(shows) {\n            let comingUpNextSet = false\n\n            shows.forEach(show => {\n                const start = dayjs(show.startTime)\n                const end = start.add(show.durationMinutes, 'minutes')\n                const now = dayjs(this.baseTime)\n\n                // Determine if the show is now playing\n                show.nowPlaying = !show.placeholder && now.isAfter(start) && now.isBefore(end) && show.gridStart === 1\n\n                // Find the first show that does not start in the first grid column\n                if (!comingUpNextSet && !show.placeholder && show.gridStart > 1) {\n                    show.comingUpNext = true\n                    comingUpNextSet = true  // Ensure only one show gets this flag\n                }\n            })\n\n            return shows\n        },\n\n        updateColumnOccupancy(processedShows, cols) {\n            let colOccupancy = new Array(cols).fill(null).map(() => new Set())\n            let maxRowUsed = 0\n            processedShows.forEach(show => {\n                for (let i = show.gridStart - 1; i < show.gridStart - 1 + show.gridSpan; i++) {\n                    if (i >= 0 && i < cols) {\n                        colOccupancy[i].add(show.gridRow)\n                        maxRowUsed = Math.max(maxRowUsed, show.gridRow)\n                    }\n                }\n            })\n            return {colOccupancy, maxRowUsed}\n        },\n\n        fillGapsAndCreatePlaceholders(colOccupancy, maxRowUsed, cols) {\n            let gridItems = []\n            // Ensure at least one row is processed even if no shows are present\n            maxRowUsed = Math.max(maxRowUsed, 1)\n            for (let row = 1; row <= maxRowUsed; row++) {\n                gridItems.push(...this.findAndFillGapsForSingleRow(colOccupancy, row, cols))\n            }\n            return gridItems\n        },\n\n        findAndFillGapsForSingleRow(colOccupancy, row, cols) {\n            let gridItems = []\n            let gapStart = -1\n            for (let i = 0; i < cols; i++) {\n                if (!colOccupancy[i].has(row)) {\n                    gapStart = gapStart === -1 ? i : gapStart\n                } else if (gapStart !== -1) {\n                    // Use different placeholders based on the row number\n                    if (row === 1) {\n                        gridItems.push(this.createPlaceholder(gapStart + 1, i - gapStart, row))\n                    } else {\n                        gridItems.push(this.createBlankSpotPlaceholder(gapStart + 1, i - gapStart, row))\n                    }\n                    gapStart = -1\n                }\n            }\n            if (gapStart !== -1) {\n                // Again, differentiate between the first row and other rows\n                if (row === 1) {\n                    gridItems.push(this.createPlaceholder(gapStart + 1, cols - gapStart, row))\n                } else {\n                    gridItems.push(this.createBlankSpotPlaceholder(gapStart + 1, cols - gapStart, row))\n                }\n            }\n            return gridItems\n        },\n\n        sortShowsByPosition(combinedShows) {\n            if (!Array.isArray(combinedShows)) {\n                console.error('Expected an array of shows, received:', combinedShows)\n                return [] // Return an empty array if not an array to prevent errors\n            }\n\n            // Sort shows directly by row and then by start position within each row\n            return combinedShows.sort((a, b) => a.gridRow - b.gridRow || a.gridStart - b.gridStart)\n        },\n\n        createPlaceholder(start, span, row) {\n            return {\n                placeholder: true,\n                startTime: 'placeholder',\n                priority: 0,\n                gridStart: start,\n                gridSpan: span,\n                gridRow: row,\n                content: {name: 'Nothing scheduled.'},\n            }\n        },\n\n        createBlankSpotPlaceholder(start, span, row) {\n            return {\n                placeholder: true,\n                startTime: 'placeholder',\n                priority: 0,\n                gridStart: start,\n                gridSpan: span,\n                gridRow: row,\n                content: {name: 'Blank Spot'}, // Ensure it is differentiated from normal placeholders\n            }\n        },\n\n    },\n\n    getters: {\n        currentTime: (state) => {\n            return dayjs(state.baseTime).format('h:mm A')\n        },\n        // Prepare banners with grid positions based on current time slots\n        preparedTimeBanners: (state) => {\n            const timeZone = getTimeZone(); // Ensure this is defined\n            let now = dayjs().tz(timeZone);\n            let todayStart = now.startOf('day');\n            let tomorrowStart = todayStart.add(1, 'day');\n\n            console.log('Current Time Slots:', state.timeSlots.map(slot => dayjs(slot).format('HH:mm')));\n\n            return state.timeBanners.flatMap(banner => {\n                // Create banner times for today and tomorrow to handle overnight spans\n                let bannerTodayStart = todayStart.hour(parseInt(banner.startTime.split(':')[0])).minute(parseInt(banner.startTime.split(':')[1]));\n                let bannerTodayEnd = bannerTodayStart.clone().add(banner.duration, 'hours');\n                let bannerTomorrowStart = tomorrowStart.hour(parseInt(banner.startTime.split(':')[0])).minute(parseInt(banner.startTime.split(':')[1]));\n                let bannerTomorrowEnd = bannerTomorrowStart.clone().add(banner.duration, 'hours');\n\n                // Create an array of potential banners for today and tomorrow\n                let potentialBanners = [\n                    { ...banner, start: bannerTodayStart, end: bannerTodayEnd },\n                    { ...banner, start: bannerTomorrowStart, end: bannerTomorrowEnd }\n                ];\n\n                return potentialBanners.map(banner => {\n                    const startSlotIndex = state.timeSlots.findIndex(slot => banner.start.isSameOrBefore(dayjs(slot)) && banner.end.isAfter(dayjs(slot)));\n                    let endSlotIndex = state.timeSlots.findIndex(slot => banner.end.isSameOrBefore(dayjs(slot)));\n\n                    // Adjust the end index to be inclusive of the end time\n                    if (endSlotIndex === -1 || banner.end.isAfter(dayjs(state.timeSlots[state.timeSlots.length - 1]))) {\n                        endSlotIndex = state.timeSlots.length - 1;\n                    } else {\n                        endSlotIndex -= 1;\n                    }\n\n                    const gridStart = startSlotIndex + 1;\n                    const gridSpan = endSlotIndex - startSlotIndex + 1;\n\n                    console.log(`Processing Banner: ${banner.name}`);\n                    console.log(`StartTime: ${banner.start.format('HH:mm')}, EndTime: ${banner.end.format('HH:mm')}`);\n                    console.log(`StartSlotIndex: ${startSlotIndex}, EndSlotIndex: ${endSlotIndex}`);\n                    console.log(`Calculated gridStart: ${gridStart}, gridSpan: ${gridSpan}`);\n\n                    // Ensure the banner should be displayed within the current time slots\n                    if (gridStart && gridSpan > 0) {\n                        return { ...banner, gridStart, gridSpan };\n                    }\n                    return null;\n                });\n            }).filter(banner => banner != null); // Filter out banners that don't fit within the current time slots\n        },\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        // setTimeSlots: (state) => {\n        //     const appSettingStore = useAppSettingStore()\n        //     let slotHours\n        //\n        //     // Determine the number of slot hours based on screen size\n        //     if (appSettingStore.isVerySmallScreen) {\n        //         slotHours = state.verySmallScreenSlotHours\n        //     } else if (appSettingStore.isSmallScreen) {\n        //         slotHours = state.smallScreenSlotHours\n        //     } else {\n        //         slotHours = state.mediumScreenSlotHours\n        //     }\n        //\n        //     const intervalMinutes = state.slotIntervalMinutes\n        //     const slots = []\n        //     const totalSlots = (slotHours * 60) / intervalMinutes\n        //\n        //     // Ensure state.currentHalfHour is a Day.js object\n        //     const currentHalfHour = dayjs(state.currentHalfHour)\n        //\n        //     // Calculate the time for each slot using Day.js\n        //     for (let i = 0; i < totalSlots; i++) {\n        //         let slotTime = currentHalfHour.add(i * intervalMinutes, 'minute')\n        //         slots.push(slotTime.toDate())  // Convert back to JavaScript Date if necessary\n        //     }\n        //     state.timeSlots = slots\n        //     return slots.length\n        // },\n\n        nextFourHoursWithHalfHourIntervals: (state) => {\n            const userStore = useUserStore() // Access the user store\n            const appSettingStore = useAppSettingStore() // Access the settings store\n            const userTimezone = userStore.timezone // Get the user's timezone\n            const cols = state.timeSlots.length\n\n\n            const intervals = []\n            const now = dayjs(state.baseTime).tz(userTimezone) // Get the current time in the user's timezone\n\n            // Determine if the current minute is less than 30 to start at the top of the hour or at the half-hour\n            let current = now.minute() < 30 ? now.startOf('hour') : now.startOf('hour').add(30, 'minutes')\n\n\n            // Generate intervals for the next 4 hours, each 30 minutes apart\n            // Adjust the loop count based on the number of columns/ intervals needed\n            for (let i = 0; i < cols; i++) { // Adjust the number of intervals based on the screen size\n                intervals.push({\n                    formatted: current.format('hh:mm A'), // Formatted time for display\n                    dateTimeString: current.format('YYYY-MM-DD HH:mm:ss'), // Y-m-d H:m:s format for comparisons\n                })\n                current = current.add(30, 'minute') // Move to the next 30-minute interval\n            }\n\n            return intervals\n        },\n\n        upcomingContent: (state) => {\n            // Since viewingWindowStart is now a Day.js object, use Day.js methods directly\n            const start = dayjs(state.viewingWindowStart).subtract(1, 'hour') // 1 hour earlier\n            const end = start.add(7, 'hours') // 6 hours later from the start\n\n            // Group shows by start time using Day.js\n            const showsGroupedByStartTime = state.weeklyContent.reduce((acc, item) => {\n                const itemStart = dayjs(item.startTime).valueOf() // Use .valueOf() to get the timestamp\n                if (!acc[itemStart]) {\n                    acc[itemStart] = []\n                }\n                acc[itemStart].push(item)\n                return acc\n            }, {})\n\n            // Select the show with the lowest priority for each start time\n            const selectedShows = Object.values(showsGroupedByStartTime).map(group => {\n                return group.reduce((selected, item) => {\n                    return !selected || item.priority < selected.priority ? item : selected\n                }, null)\n            })\n\n            // Filter shows that fall within the next 6-hour window and sort them\n            return selectedShows\n                .filter(item => {\n                    const itemStart = dayjs(item.startTime)\n                    return itemStart.isSameOrAfter(start) && itemStart.isBefore(end)\n                })\n                .sort((a, b) => dayjs(a.startTime).unix() - dayjs(b.startTime).unix()) // Sorting by Unix timestamp\n        },\n\n\n        nextSixHours: (state) => {\n            // Assuming state.viewingWindowStart is already a Day.js object.\n            // If it's still a native Date, convert it first:\n            let adjustedStart = dayjs(state.viewingWindowStart)\n\n            // Add 6 hours to the adjusted start time\n            const end = adjustedStart.add(6, 'hours')\n\n            // Generate each hour of the interval between adjustedStart and end\n            const hours = []\n            let hour = adjustedStart\n\n            while (hour.isBefore(end)) {\n                hours.push(hour.toDate()) // Convert back to Date if necessary; otherwise, just use `hour` if you can use Day.js objects directly\n                hour = hour.add(1, 'hour')\n            }\n\n            return hours\n        },\n\n        dateMessage: (state) => {\n            const startDay = startOfDay(state.viewingWindowStart)\n            const formattedDate = format(startDay, 'EEEE MMMM do, yyyy')\n            if (isToday(startDay)) {\n                return `Today - ${formattedDate}`\n            } else if (isYesterday(startDay)) {\n                return `Yesterday - ${formattedDate}`\n            } else if (isTomorrow(startDay)) {\n                return `Tomorrow - ${formattedDate}`\n            } else {\n                return formattedDate\n            }\n        },\n\n        currentMonthIndex: (state) => {\n            // Ensure state.currentMonth is converted to a Day.js object\n            const month = dayjs(state.currentMonth)\n            // Day.js months are 0-indexed just like JavaScript Date, returns the month (0-11)\n            return month.month()\n        },\n\n        currentMonthName: (state) => {\n            // Ensure state.currentMonth is converted to a Day.js object\n            const month = dayjs(state.currentMonth)\n            // Returns the full name of the month, e.g., 'January', 'February', etc.\n            return month.format('MMMM')\n        },\n\n        currentYear: (state) => {\n            // Ensure state.currentMonth is converted to a Day.js object\n            const month = dayjs(state.currentMonth)\n            // Returns the year\n            return month.year()\n        },\n        isToday: (state) => {\n            const today = dayjs()  // Gets today's date as a Day.js object\n            const viewingStart = dayjs(state.viewingWindowStart)  // Convert to Day.js object if not already\n\n            // Compare if both dates are the same calendar day\n            return today.isSame(viewingStart, 'day')\n        },\n\n        daysInMonth: (state) => {\n            // Assuming state.currentMonth is a Day.js object; if it's a Date, convert it:\n            const currentMonth = dayjs(state.currentMonth)\n\n            const startOfCurrentMonth = currentMonth.startOf('month')\n            const endOfCurrentMonth = currentMonth.endOf('month')\n\n            // Adjust these to ensure the grid starts on Sunday and ends on Saturday\n            const startOfGrid = startOfCurrentMonth.startOf('week')  // Assumes the week starts on Sunday by default\n            const endOfGrid = endOfCurrentMonth.endOf('week')        // Assumes the week ends on Saturday by default\n\n            // Generate the days for the calendar grid\n            const days = []\n            let day = startOfGrid\n\n            while (day.isBefore(endOfGrid) || day.isSame(endOfGrid, 'day')) {\n                days.push(day.toDate()) // Collect days as Date objects; remove toDate() if you can use Day.js objects directly\n                day = day.add(1, 'day')\n            }\n\n            return days\n        },\n\n    },\n})\n","import { onBeforeMount, onMounted } from 'vue'\nimport { useUserStore } from \"@/Stores/UserStore\"\nimport { useAppSettingStore } from \"@/Stores/AppSettingStore\"\nimport { useVideoPlayerStore } from \"@/Stores/VideoPlayerStore\"\nimport { Inertia } from '@inertiajs/inertia'\n\nexport function usePageSetup(pageName) {\n    const userStore = useUserStore()\n    const appSettingStore = useAppSettingStore()\n    const videoPlayerStore = useVideoPlayerStore()\n\n    appSettingStore.currentPage = pageName\n    appSettingStore.showFlashMessage = true\n    appSettingStore.pageIsHidden = false\n\n    if (userStore.isMobile || window.innerWidth < 1024 || appSettingStore.fullPage) {\n        appSettingStore.ott = 0;\n    } else {\n        appSettingStore.ott = 1;\n        appSettingStore.showOttButtons = true;\n    }\n\n    videoPlayerStore.makeVideoTopRight()\n\n    if (appSettingStore.pageReload) {\n        appSettingStore.pageReload = false\n        window.location.reload(true);\n    }\n    // Check if the URL contains query strings\n\n\n    // Only scroll into view if there are no query strings\n\n        // const topDiv = document.getElementById(\"topDiv\")\n        // if (topDiv) {\n        //     topDiv.scrollIntoView()\n        // }\n        Inertia.on('navigate', (event) => {\n            if (userStore.isMobile || window.innerWidth < 1024 || appSettingStore.fullPage) {\n                appSettingStore.ott = 0;\n            } else {\n                appSettingStore.ott = 1;\n            }\n            const hasQueryStrings = window.location.search !== '';\n            if (!hasQueryStrings || appSettingStore.shouldScrollToTop) {\n                requestAnimationFrame(() => {\n                    const topDiv = document.getElementById(\"topDiv\");\n                    if (topDiv) {\n                        topDiv.scrollIntoView({behavior: 'auto'});\n                    } else {\n                        window.scrollTo(0, 0);\n                    }\n                });\n            }\n            appSettingStore.shouldScrollToTop = false;\n        })\n    // Only update if we're not already on this page to avoid overwriting with the current URL\n    appSettingStore.setPrevUrl()\n    appSettingStore.showOttButtons = true\n    appSettingStore.noLayout = false\n\n    // Inertia.reload()\n\n}\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"\", \"\",{\"version\":3,\"sources\":[],\"names\":[],\"mappings\":\"\",\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".bg-gradient-show[data-v-274905dc]{background:linear-gradient(90deg,#1f4037,#99f2c8)}.bg-gradient-show-hover[data-v-274905dc]:hover{background:linear-gradient(90deg,#66d3fa,#6e45e2)}.bg-gradient-new-release[data-v-274905dc]{background:linear-gradient(90deg,#654ea3,#eaafc8)}.bg-gradient-new-release-hover[data-v-274905dc]:hover{background:linear-gradient(90deg,#c2e59c,#64b3f4)}.column-width[data-v-274905dc]{@apply w-16}.schedule-item[data-v-274905dc]{align-items:center;background:#f0f0f0;color:#000;display:flex;flex-direction:column;gap:10px;padding:10px}.time-slot[data-v-274905dc]{border-bottom:1px solid #fff;grid-row:1;padding:10px 0;text-align:center}.time-banner[data-v-274905dc]{background-color:#007bff80;border:1px solid #fff;padding:10px;text-align:center}.show-cell[data-v-274905dc]{align-items:center;background-color:#f8f8f8;border:1px solid #ccc;display:flex;flex-direction:column;height:100%;justify-content:center;width:100%}.time-cell[data-v-274905dc]{border:1px solid #fff;padding:10px;text-align:center}.content[data-v-274905dc]{background:#f0f0f0;border:1px solid #ddd;padding:8px}.placeholder[data-v-274905dc]{background:#ccc;height:60px;width:100%}.schedule-grid[data-v-274905dc]{display:grid;width:100%}.content-row[data-v-274905dc],.header-row[data-v-274905dc]{display:contents}.schedule-cell[data-v-274905dc]{background:#333;color:#fff;padding:8px;text-align:center}.grid-container[data-v-274905dc]{grid-gap:10px;display:grid;width:100%}.grid-item[data-v-274905dc]{align-items:center;border:1px solid #ccc;display:flex;justify-content:center}.status-row[data-v-274905dc]{display:grid}.status-cell[data-v-274905dc],.status-row[data-v-274905dc]{align-items:center;width:100%}.status-cell[data-v-274905dc]{color:#fff;display:flex;font-weight:700;height:100%;justify-content:center;opacity:.8;padding:8px;transition:background-color .3s ease}.status-cell span[data-v-274905dc]{border-radius:4px;display:block;padding:4px 8px;text-align:center}.status-cell[data-v-274905dc]:empty:after{background:none;content:\\\"\\\";display:block;height:100%;width:100%}.show-cell:hover .gradient-on-hover[data-v-274905dc]{background-image:linear-gradient(90deg,#06beb6,#48b1bf)}.coming-up-next[data-v-274905dc],.now-playing[data-v-274905dc]{align-items:center;border:1px solid #ccc;display:flex;justify-content:center;padding:10px}.now-playing[data-v-274905dc]{animation:pulseAnimation-274905dc 2s infinite;background-color:#4caf50}.coming-up-next[data-v-274905dc]{background-color:#ff9800}@keyframes pulseAnimation-274905dc{0%{opacity:.75}50%{opacity:1}to{opacity:.75}}@media (min-width:1280px){.xl\\\\:hidden[data-v-274905dc]{display:none}}@media (min-width:1024px){.lg\\\\:hidden[data-v-274905dc]{display:none}}\", \"\",{\"version\":3,\"sources\":[\"webpack://./resources/js/Components/Global/Schedule/ScheduleGridContainer.vue\"],\"names\":[],\"mappings\":\"AAyYA,mCACE,iDACF,CAEA,+CACE,iDACF,CAEA,0CACE,iDACF,CAEA,sDACE,iDACF,CAGA,+BACE,WACF,CAGA,gCAOE,kBAAmB,CANnB,kBAAmB,CACnB,UAAW,CAEX,YAAa,CACb,qBAAsB,CACtB,QAAS,CAHT,YAKF,CAEA,4BAGE,4BAA6B,CAC7B,UAAW,CAFX,cAAe,CADf,iBAIF,CAEA,8BACE,0BAAwC,CAExC,qBAAuB,CACvB,YAAa,CAFb,iBAGF,CAEA,4BAIE,kBAAmB,CAEnB,wBAAyB,CADzB,qBAAsB,CAJtB,YAAa,CACb,qBAAsB,CAMtB,WAAY,CALZ,sBAAuB,CAIvB,UAEF,CAEA,4BACE,qBAAsB,CAEtB,YAAa,CADb,iBAEF,CAEA,0BACE,kBAAmB,CAEnB,qBAAsB,CADtB,WAEF,CAEA,8BACE,eAAgB,CAEhB,WAAY,CADZ,UAEF,CAGA,gCACE,YAAa,CACb,UACF,CAMA,2DACE,gBACF,CAEA,gCACE,eAAgB,CAChB,UAAW,CAEX,WAAY,CADZ,iBAEF,CAEA,iCAGE,aAAc,CAFd,YAAa,CACb,UAEF,CAEA,4BAEE,kBAAmB,CAEnB,qBAAsB,CAHtB,YAAa,CAEb,sBAEF,CAGA,6BACE,YAGF,CAGA,2DAJE,kBAAmB,CADnB,UAgBF,CAXA,8BAKE,UAAY,CAJZ,YAAa,CAOb,eAAiB,CADjB,WAAY,CALZ,sBAAuB,CAOvB,UAAY,CALZ,WAAY,CAMZ,oCACF,CAEA,mCAGE,iBAAkB,CAFlB,aAAc,CACd,eAAgB,CAEhB,iBACF,CAGA,0CAKE,eAAgB,CAJhB,UAAW,CACX,aAAc,CAEd,WAAY,CADZ,UAGF,CAGA,qDACE,uDACF,CAEA,+DAGE,kBAAmB,CAEnB,qBAAsB,CAJtB,YAAa,CACb,sBAAuB,CAEvB,YAEF,CAEA,8BAEE,6CAAqC,CADrC,wBAEF,CAEA,iCACE,wBACF,CAGA,mCACE,GACE,WACF,CACA,IACE,SACF,CACA,GACE,WACF,CACF,CAGA,0BAEE,6BACE,YACF,CACF,CAEA,0BAEE,6BACE,YACF,CACF\",\"sourcesContent\":[\"<template>\\n\\n  <!--  We need the CurrenTime component to keep our ScheduleStore currentTime up to date\\n        it has a SetInterval in it. -->\\n  <CurrentTime/>\\n\\n  <div class=\\\"mb-2 tracking-wide\\\">\\n    <span class=\\\"text-sm uppercase text-purple-500\\\">All times are listed in your timezone.</span>\\n  </div>\\n\\n  <div class=\\\"w-full\\\">\\n    <div class=\\\"schedule-grid\\\" :style=\\\"{ 'grid-template-columns': gridColumns }\\\">\\n      <div class=\\\"header-row\\\" :style=\\\"{ 'grid-template-columns': gridColumns }\\\">\\n        <!-- Time slots header -->\\n        <div class=\\\"time-cell bg-gray-900 px-3 py-2 text-center font-bold\\\"\\n             v-for=\\\"interval in nextFourHoursWithHalfHourIntervals\\\" :key=\\\"interval.dateTime\\\">\\n          {{ interval.formatted }}\\n        </div>\\n      </div>\\n      <div v-if=\\\"scheduleIsLoading && nextFourHoursOfContent.length === 0\\\"\\n           class=\\\"w-full flex justify-center text-center items-center\\\">\\n        <span class=\\\"loading loading-ball loading-xl text-info\\\"></span>\\n      </div>\\n    </div>\\n    <div class=\\\"schedule-grid\\\" :style=\\\"{ 'grid-template-columns': gridColumns }\\\">\\n      <!-- Render time banners -->\\n      <div v-for=\\\"banner in scheduleStore.preparedTimeBanners\\\" :key=\\\"banner.id\\\"\\n           :style=\\\"gridItemStyle(banner)\\\" class=\\\"time-banner\\\">\\n        {{ banner.name }}\\n      </div>\\n    </div>\\n    <div class=\\\"schedule-grid\\\" :style=\\\"{ 'grid-template-columns': gridColumns }\\\">\\n\\n\\n      <!-- Loop through combinedShows directly -->\\n      <div v-for=\\\"item in scheduleStore.nextFourHoursOfContent\\\"\\n           :key=\\\"item.id\\\"\\n           :style=\\\"gridItemStyle(item)\\\"\\n           class=\\\"show-cell\\\"\\n           :class=\\\"{'hover:cursor-pointer' : !item.placeholder}\\\"\\n           @click=\\\"handleShowClick(item)\\\">\\n        <div\\n            class=\\\"item-content px-4 flex flex-col justify-between items-center w-full h-full overflow-hidden\\\"\\n            :class=\\\"{\\n        'bg-gradient-to-r from-gray-900 to-gray-700': !item.placeholder,\\n        'bg-gradient-to-r from-tan-800 to-tan-600': item.placeholder,  // Assume tan-800 and tan-600 are defined in your tailwind config\\n        'gradient-on-hover': !item.placeholder\\n    }\\\">\\n          <div class=\\\"show-info flex-grow flex flex-col items-center justify-center\\\">\\n            <h3 class=\\\"show-title my-4 w-full text-center text-lg font-semibold break-words\\\"\\n                :class=\\\"{'gradient-on-hover': !item.placeholder}\\\">\\n              {{ item.content.name || 'No Show Name' }}</h3>\\n            <!--            <p>{{ item.content.id }}</p>-->\\n            <!--            <p>Row: {{ item.gridRow }}</p>-->\\n            <SingleImage v-if=\\\"item.content.image\\\"\\n                         :image=\\\"item.content.image\\\"\\n                         :alt=\\\"item.content.name\\\"\\n                         :class=\\\"`w-full h-auto max-h-1/2 object-cover transition-opacity duration-300 hover:opacity-80`\\\"/>\\n            <div v-if=\\\"!item.placeholder\\\"\\n                 class=\\\"show-time w-full text-center text-sm p-2 mt-2\\\"\\n                 :class=\\\"{'gradient-on-hover': !item.placeholder}\\\">\\n              <p>{{ formatTime(item.startTime, true) }}</p>\\n<!--              <p>{{ formatTime(item.startTime) }} - {{ formatTime(item.endTime, true) }}</p>-->\\n              <p>{{ formatDuration(item.durationMinutes) }}</p>\\n            </div>\\n          </div>\\n        </div>\\n      </div>\\n\\n\\n    </div>\\n\\n    <div v-if=\\\"allPlaceholders && nextScheduledShow\\\" class=\\\"next-show-highlight p-5 my-2 border border-gray-300 bg-gradient-to-r from-gray-900 to-gray-700 text-center\\\">\\n      <div class=\\\"bg-green-500 text-white py-2\\\">\\n        <h2>Playing Soon</h2>\\n      </div>\\n      <div class=\\\"show-details mt-4 mx-auto max-w-4xl\\\">\\n        <h3 class=\\\"text-3xl mb-1\\\">{{ nextScheduledShow.content.name }}</h3>\\n        <p class=\\\"text-lg\\\">{{ formatLongDate(nextScheduledShow.startTime) }}</p> <!-- Formatted start date -->\\n        <p class=\\\"text-lg\\\">{{ formatTime(nextScheduledShow.startTime, true) }} - {{ formatTime(nextScheduledShow.endTime, true) }}</p>\\n        <div class=\\\"w-full flex justify-center items-center mt-4\\\">\\n          <SingleImage v-if=\\\"nextScheduledShow.content.image\\\"\\n               :image=\\\"nextScheduledShow.content.image\\\"\\n               :alt=\\\"nextScheduledShow.content.name\\\"\\n               :class=\\\"`w-3/4 md:w-1/2 lg:w-1/3 h-auto object-cover mx-auto`\\\"/>\\n        </div>\\n        <p class=\\\"text-lg\\\">{{ formatDuration(nextScheduledShow.durationMinutes) }}</p>\\n      </div>\\n    </div>\\n\\n\\n\\n    <div class=\\\"schedule-grid text-center\\\" :style=\\\"{ 'grid-template-columns': gridColumns }\\\">\\n\\n      <div v-if=\\\"nowPlayingShow\\\" :style=\\\"statusGridItemStyle(nowPlayingShow)\\\"\\n           class=\\\"now-playing text-black font-semibold\\\">\\n        <span>NOW PLAYING</span>\\n      </div>\\n\\n      <div v-if=\\\"comingUpNextShow\\\" :style=\\\"statusGridItemStyle(comingUpNextShow)\\\"\\n           class=\\\"coming-up-next text-black font-semibold\\\">\\n        <span>COMING UP NEXT</span>\\n\\n      </div>\\n\\n    </div>\\n  </div>\\n\\n</template>\\n<script setup>\\nimport { computed, onMounted, onUnmounted, ref, watch, watchEffect } from 'vue'\\nimport { Inertia } from '@inertiajs/inertia'\\nimport { debounce } from 'lodash'\\nimport dayjs from 'dayjs'\\nimport advancedFormat from 'dayjs/plugin/advancedFormat'; // for using 'a' for AM/PM format\\nimport { useScheduleStore } from '@/Stores/ScheduleStore'\\nimport { useAppSettingStore } from '@/Stores/AppSettingStore'\\nimport { useUserStore } from '@/Stores/UserStore'\\nimport ScheduleGrid from '@/Components/Pages/Schedule/ScheduleGrid.vue'\\nimport SingleImage from '@/Components/Global/Multimedia/SingleImage.vue'\\nimport CurrentTime from '@/Components/Global/Schedule/CurrentTime.vue'\\n\\nconst scheduleStore = useScheduleStore()\\nconst appSettingStore = useAppSettingStore()\\nconst userStore = useUserStore()\\n\\ndayjs.extend(advancedFormat);\\n\\nlet initialLoadHandled = false\\n\\n// // Computed property for the currently playing show\\n// const updateNowPlaying = computed(() => {\\n//   for (const show of scheduleStore.nextFourHoursOfContent) {\\n//     if (isNowPlaying(show.startTime, show.durationMinutes) && !show.placeholder && show.gridStart === 1) {\\n//       return show;  // ensure this has gridStart, gridSpan, gridRow\\n//     }\\n//   }\\n//   return null;\\n// });\\n//\\n//\\n//\\n// // Computed property for the show that is coming up next\\n// const updateComingUpNext = computed(() => {\\n//   let foundPlaying = false;\\n//   for (const show of scheduleStore.nextFourHoursOfContent) {\\n//     if (!show.placeholder && show.gridStart > 1) {\\n//       if (foundPlaying) {\\n//         return show;  // ensure this has gridStart, gridSpan, gridRow\\n//       }\\n//     }\\n//     if (isNowPlaying(show.startTime, show.durationMinutes)) {\\n//       foundPlaying = true;  // Mark as found\\n//     }\\n//   }\\n//   return null;\\n// });\\n\\nconst allPlaceholders = computed(() => {\\n  return scheduleStore.nextFourHoursOfContent.every(item => item.placeholder);\\n});\\n\\nconst nextScheduledShow = computed(() => {\\n  const now = dayjs();\\n  return scheduleStore.weeklyContent.find(show =>\\n      dayjs(show.startTime).isAfter(now) && !show.placeholder\\n  );\\n});\\n\\nfunction isNowPlaying(startTime, duration) {\\n  const now = dayjs()\\n  const start = dayjs(startTime)\\n  const end = start.add(duration, 'minutes')\\n  return now.isAfter(start) && now.isBefore(end)\\n}\\n\\n\\nconst nowPlayingShow = computed(() => {\\n  return scheduleStore.nextFourHoursOfContent.find(show => show.nowPlaying)\\n})\\n\\nconst comingUpNextShow = computed(() => {\\n  return scheduleStore.nextFourHoursOfContent.find(show => show.comingUpNext)\\n})\\n\\nwatch(() => scheduleStore.timeSlots, (newTimeSlots, oldTimeSlots) => {\\n  if (newTimeSlots && newTimeSlots.length > 0 && !initialLoadHandled) {\\n    console.log('Time slots are ready, updating next four hours.')\\n    scheduleStore.updateNextFourHours()\\n    initialLoadHandled = true\\n  }\\n}, {immediate: true})\\n\\nwatch(\\n    () => scheduleStore.baseTime,\\n    (newTime, oldTime) => {\\n      if (newTime !== oldTime) { // This check may be redundant but adds clarity\\n        console.log(`Base time updated from ${oldTime} to ${newTime}`)\\n        scheduleStore.updateNextFourHours()\\n      }\\n    },\\n    {immediate: true},\\n)\\n//\\n\\n// Watch for changes in screen size indicators\\nwatch(\\n    [() => appSettingStore.isVerySmallScreen, () => appSettingStore.isSmallScreen],\\n    ([newVerySmall, newSmall], [oldVerySmall, oldSmall]) => {\\n      if (newVerySmall !== oldVerySmall || newSmall !== oldSmall) {\\n        console.log(`Screen size change detected: VerySmallScreen: ${newVerySmall}, SmallScreen: ${newSmall}`)\\n        scheduleStore.updateNextFourHours()\\n      }\\n    },\\n    {immediate: true},  // Optionally run on initial setup\\n)\\n\\nwatchEffect(() => {\\n  console.log('nextFourHoursOfContent:', scheduleStore.nextFourHoursOfContent)\\n})\\n\\n// Method to format time with conditional AM/PM display\\nfunction formatTime(time, showMeridiem = false) {\\n  return dayjs(time).format(`h:mm ${showMeridiem ? 'a' : ''}`)\\n}\\n\\nfunction formatLongDate(date) {\\n  return dayjs(date).format('dddd, MMM, YYYY');\\n}\\n\\n// Method to format duration into a readable format\\nfunction formatDuration(minutes) {\\n  const hours = Math.floor(minutes / 60)\\n  const remainderMinutes = minutes % 60\\n  if (hours === 0) return `${remainderMinutes} minutes`\\n  return `${hours} hour${hours > 1 ? 's' : ''} ${remainderMinutes > 0 ? remainderMinutes + ' minutes' : ''}`\\n}\\n\\n// Define the function to calculate grid style directly\\nfunction gridItemStyle(item) {\\n  const style = {\\n    gridColumn: `${item.gridStart} / span ${item.gridSpan}`,\\n    gridRow: `row ${item.gridRow}`,\\n  }\\n  console.log(style)  // Log to see what styles are being returned\\n  return style\\n}\\n\\n// Dedicated function to handle status row grid styling\\nfunction statusGridItemStyle(item) {\\n  if (!item) return {}\\n\\n  // Log to debug the grid positions being applied\\n  console.log(`Status Item - Grid Start: ${item.gridStart}, Grid Span: ${item.gridSpan}`)\\n\\n  return {\\n    gridColumn: `${item.gridStart} / span ${item.gridSpan}`,\\n    gridRow: `row 1`, // Assuming status rows are always in the first grid row for visibility\\n  }\\n}\\n\\n\\n// Computed property to determine the number of columns\\nconst gridColumns = computed(() => {\\n  let numColumns\\n  if (appSettingStore.isVerySmallScreen) {\\n    numColumns = Math.floor((scheduleStore.verySmallScreenSlotHours * 60) / scheduleStore.slotIntervalMinutes)\\n  } else if (appSettingStore.isSmallScreen) {\\n    numColumns = Math.floor((scheduleStore.smallScreenSlotHours * 60) / scheduleStore.slotIntervalMinutes)\\n  } else {\\n    numColumns = Math.floor((scheduleStore.mediumScreenSlotHours * 60) / scheduleStore.slotIntervalMinutes)\\n  }\\n  document.documentElement.style.setProperty('--text-size', numColumns < 4 ? '0.8em' : '1em')\\n  document.documentElement.style.setProperty('--text-small', numColumns < 4 ? '0.7em' : '0.8em')\\n\\n  return `repeat(${numColumns}, minmax(0, 1fr))` // Returns the CSS grid-template-columns value\\n})\\n\\n// Computed property to ensure reactivity\\nconst nextFourHoursWithHalfHourIntervals = computed(() => scheduleStore.nextFourHoursWithHalfHourIntervals)\\nconst nextFourHoursOfContent = computed(() => scheduleStore.nextFourHoursOfContent)\\nconst scheduleIsLoading = computed(() => scheduleStore.scheduleIsLoading)\\n\\nconst gridPlacement = (gridStart, gridSpan) => {\\n  return {\\n    gridColumnStart: gridStart,\\n    gridColumnEnd: `span ${gridSpan}`,\\n    gridRowStart: 'auto',\\n    gridRowEnd: 'span 1', // Assuming each item occupies one row height-wise\\n  }\\n}\\n\\n// // Determines the classes for a status cell\\n// const getStatusCellClasses = (index) => {\\n//   const classes = ['status-cell']\\n//   if (index === 0) classes.push('now-playing')\\n//   else if (index === 1) classes.push('coming-up-next')\\n//   else classes.push('status-cell-empty') // For cells without specific content\\n//   return classes\\n// }\\n\\nfunction getCellClasses(type) {\\n  const baseClass = 'column-width text-sm 2xl:text-md border border-0.5 border-green-300 hover:border-blue-500 cursor-pointer'\\n  switch (type) {\\n    case 'show':\\n      return `${baseClass} bg-gradient-show hover:bg-gradient-show-hover`\\n    case 'new_release':\\n      return `${baseClass} bg-gradient-new-release hover:bg-gradient-new-release-hover`\\n      // Add more cases as needed\\n    default:\\n      return baseClass\\n  }\\n}\\n\\nfunction handleShowClick(item) {\\n  Inertia.visit(`/shows/${item.content.slug}/`)\\n  // if (isNowPlaying(item.startTime, item.durationMinutes)) {\\n  //   // Redirect to the show's page if it's currently playing\\n  //   Inertia.visit(`/shows/${item.content.slug}/`)\\n  // } else {\\n  //   // Open the reminder modal for shows that are not currently playing\\n  //   openModal('getReminderModal')\\n  // }\\n}\\n\\nfunction updateNowPlayingAndComingUpNext() {\\n  // Logic to update nowPlaying and comingUpNext based on the current time and show data\\n}\\n\\n\\n// Helper function to determine the appropriate classes based on the gridStart and certain conditions\\nconst getStatusCellClasses = (gridStart, isFirst, isSecond) => {\\n  const classes = ['status-cell'] // Base class for all status cells\\n  if (isFirst && gridStart === 1) {\\n    // 'Now Playing' is only assigned if it's the first item and it starts at the first grid column\\n    classes.push('now-playing')\\n  } else if (isSecond && gridStart !== 1) {\\n    // 'Coming Up Next' is only assigned to the second item and it should not start at the first grid column\\n    classes.push('coming-up-next')\\n  } else {\\n    // Default class for other cells or when no specific condition is met\\n    classes.push('status-cell-empty')\\n  }\\n  return classes\\n}\\n// Ensure the data structure is what you expect\\nconsole.log('All items in store:', scheduleStore.nextFourHoursOfContent)\\n\\n//\\n// const actualShows = computed(() => {\\n//   // Flatten the nested arrays, filter out placeholders, and ignore specific content names\\n//   return scheduleStore.nextFourHoursOfContent.flat().filter(item =>\\n//       !item.placeholder && item.content.name !== \\\"Nothing scheduled.\\\" && item.content.name !== \\\"Blank Spot\\\"\\n//   );\\n// });\\n//\\n\\n\\n// watch(nowPlayingShow, (newVal, oldVal) => {\\n//   console.log('Now Playing Show changed from:', oldVal, 'to:', newVal);\\n// });\\n//\\n// watch(comingUpNextShow, (newVal, oldVal) => {\\n//   console.log('Coming Up Next Show changed from:', oldVal, 'to:', newVal);\\n// });\\n\\n// Optional: Watch the entire content array if changes are frequent and need to trigger reevaluations\\nwatch(() => scheduleStore.nextFourHoursOfContent, () => {\\n  console.log('Content changed, recomputing shows...')\\n}, {deep: true})\\n\\n\\n//\\n// // Watch for changes in actualShows and log or react accordingly\\n// watch(actualShows, (newShows, oldShows) => {\\n//   console.log(\\\"Actual shows have updated:\\\", newShows);\\n//   // Additional reactions can be performed here\\n// });\\n//\\n// // Optionally, watch for changes in previousItemGridEnd if needed\\n// watch(previousItemGridEnd, (newEnd, oldEnd) => {\\n//   console.log(\\\"Previous item grid end has updated:\\\", newEnd);\\n//   // React to changes in the end of the first show, if necessary\\n// });\\n\\n\\nfunction openModal(modalName) {\\n  document.getElementById(modalName).showModal()\\n}\\n</script>\\n\\n<style scoped>\\n\\n.bg-gradient-show {\\n  background: linear-gradient(to right, #1f4037, #99f2c8); /* Example green gradient */\\n}\\n\\n.bg-gradient-show-hover:hover {\\n  background: linear-gradient(to right, #66D3FA, #6E45E2); /* Example green gradient on hover */\\n}\\n\\n.bg-gradient-new-release {\\n  background: linear-gradient(to right, #654ea3, #eaafc8); /* Example purple gradient */\\n}\\n\\n.bg-gradient-new-release-hover:hover {\\n  background: linear-gradient(to right, #c2e59c, #64b3f4); /* Example purple gradient on hover */\\n}\\n\\n\\n.column-width {\\n  @apply w-16\\n}\\n\\n\\n.schedule-item {\\n  background: #f0f0f0;\\n  color: #000;\\n  padding: 10px;\\n  display: flex;\\n  flex-direction: column;\\n  gap: 10px;\\n  align-items: center;\\n}\\n\\n.time-slot {\\n  text-align: center;\\n  padding: 10px 0;\\n  border-bottom: 1px solid #fff;\\n  grid-row: 1; /* Ensures all time slots are in the first row */\\n}\\n\\n.time-banner {\\n  background-color: rgba(0, 123, 255, 0.5); /* Example styling */\\n  text-align: center;\\n  border: 1px solid white; /* White border */\\n  padding: 10px;\\n}\\n\\n.show-cell {\\n  display: flex; /* Ensure this is set to flex to control child elements with flex properties */\\n  flex-direction: column; /* Align children in a column */\\n  justify-content: center; /* Align items to the top */\\n  align-items: center; /* Center children horizontally */\\n  border: 1px solid #ccc;\\n  background-color: #f8f8f8;\\n  width: 100%; /* Ensures cell uses full width of its grid column */\\n  height: 100%; /* Ensures cell uses full height */\\n}\\n\\n.time-cell {\\n  border: 1px solid #fff;\\n  text-align: center; /* Center text if desired */\\n  padding: 10px;\\n}\\n\\n.content {\\n  background: #f0f0f0;\\n  padding: 8px;\\n  border: 1px solid #ddd;\\n}\\n\\n.placeholder {\\n  background: #ccc;\\n  width: 100%;\\n  height: 60px;\\n}\\n\\n\\n.schedule-grid {\\n  display: grid;\\n  width: 100%;\\n}\\n\\n.header-row {\\n  display: contents; /* This makes the header-row itself not generate a box, allowing .time-cell to be direct children of .schedule-grid */\\n}\\n\\n.content-row {\\n  display: contents; /* This makes the row container disappear, directly using the grid defined in parent */\\n}\\n\\n.schedule-cell {\\n  background: #333;\\n  color: #fff;\\n  text-align: center;\\n  padding: 8px;\\n}\\n\\n.grid-container {\\n  display: grid;\\n  width: 100%;\\n  grid-gap: 10px;\\n}\\n\\n.grid-item {\\n  display: flex;\\n  align-items: center;\\n  justify-content: center;\\n  border: 1px solid #ccc;\\n}\\n\\n\\n.status-row {\\n  display: grid;\\n  width: 100%;\\n  align-items: center;\\n}\\n\\n\\n.status-cell {\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  padding: 8px;\\n  color: white;\\n  width: 100%;\\n  height: 100%;\\n  font-weight: bold;\\n  opacity: 0.8;\\n  transition: background-color 0.3s ease;\\n}\\n\\n.status-cell span {\\n  display: block;\\n  padding: 4px 8px;\\n  border-radius: 4px;\\n  text-align: center;\\n}\\n\\n/* Optional: If you want the empty cells to have a slight indication they are there */\\n.status-cell:empty::after {\\n  content: \\\"\\\";\\n  display: block;\\n  width: 100%;\\n  height: 100%;\\n  background: none; /* Adjust this to a very subtle color or keep transparent */\\n}\\n\\n/* Custom hover effect for the parent that affects children */\\n.show-cell:hover .gradient-on-hover {\\n  background-image: linear-gradient(to right, #06beb6, #48b1bf);\\n}\\n\\n.now-playing, .coming-up-next {\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  padding: 10px;\\n  border: 1px solid #ccc;\\n}\\n\\n.now-playing {\\n  background-color: #4CAF50; /* Green for now playing */\\n  animation: pulseAnimation 2s infinite;\\n}\\n\\n.coming-up-next {\\n  background-color: #FF9800; /* Orange for coming up next */\\n}\\n\\n\\n@keyframes pulseAnimation {\\n  0% {\\n    opacity: 0.75;\\n  }\\n  50% {\\n    opacity: 1;\\n  }\\n  100% {\\n    opacity: 0.75;\\n  }\\n}\\n\\n/* Responsive visibility */\\n@media (min-width: 1280px) {\\n  /* 2xl */\\n  .xl\\\\:hidden {\\n    display: none;\\n  }\\n}\\n\\n@media (min-width: 1024px) {\\n  /* xl */\\n  .lg\\\\:hidden {\\n    display: none;\\n  }\\n}\\n\\n</style>\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".grid[data-v-53f3bf92]{display:grid;gap:4px;grid-auto-rows:minmax(100px,auto);grid-template-columns:repeat(8,minmax(0,1fr))}@media (max-width:640px){.grid[data-v-53f3bf92]{grid-template-columns:repeat(4,minmax(0,1fr))}}@media (min-width:641px) and (max-width:768px){.grid[data-v-53f3bf92]{grid-template-columns:repeat(6,minmax(0,1fr))}}@media (min-width:769px){.grid[data-v-53f3bf92]{grid-template-columns:repeat(8,minmax(0,1fr))}}\", \"\",{\"version\":3,\"sources\":[\"webpack://./resources/js/Components/Pages/Schedule/ScheduleGrid.vue\"],\"names\":[],\"mappings\":\"AAgJA,uBACE,YAAa,CAGb,OAAQ,CADR,iCAAmC,CADnC,6CAGF,CAEA,yBACE,uBACE,6CACF,CACF,CACA,+CACE,uBACE,6CACF,CACF,CACA,yBACE,uBACE,6CACF,CACF\",\"sourcesContent\":[\"<template>\\n  <div>\\n    <div :class=\\\"gridClass\\\">\\n      <SpotComponent\\n          v-for=\\\"show in visibleShows\\\"\\n          :key=\\\"show.id\\\"\\n          :show=\\\"show\\\"\\n          :span=\\\"calculateSpan(show)\\\"\\n      />\\n    </div>\\n  </div>\\n</template>\\n\\n<script setup>\\nimport { ref, computed, watch, onMounted, onUnmounted, watchEffect } from 'vue'\\nimport { useScheduleStore } from '@/Stores/ScheduleStore'\\nimport SpotComponent from './SpotComponent.vue';\\n\\nconst scheduleStore = useScheduleStore()\\n\\n// const shows = ref([]);\\n\\n// Update base time whenever current hour changes\\n// const updateShows = () => {\\n//   const [hours, minutes] = currentHour.value.split(':');\\n//   baseTime.value.setHours(parseInt(hours), parseInt(minutes), 0, 0);\\n// };\\n\\nconst gridClass = computed(() => {\\n  // Here you can have logic based on window width or other factors\\n  return 'grid grid-cols-8 gap-2 p-4'\\n}); // as before\\n\\n\\n/**\\n * Calculates how many 30-minute columns a show should span within the visible grid based on its start and end times.\\n * @param {Object} show - The show object containing start time and duration.\\n * @returns {Number} The number of 30-minute columns the show spans within the visible grid.\\n */\\nconst calculateSpan = (show) => {\\n\\n  // gridWindowEnd is calculated as 4 hours beyond the baseTime.\\n  // This covers the full span of the visible schedule grid from the current base time.\\n  const gridWindowEnd = new Date(scheduleStore.baseTime.value.getTime() + 4 * 3600000); // 4 hours from baseTime\\n\\n  // Convert show start time and duration into JavaScript Date objects for easier manipulation.\\n  const showStart = new Date(show.startTime);\\n  const showEnd = new Date(showStart.getTime() + show.duration * 60000); // Convert duration from minutes to milliseconds\\n\\n  // Check if the show is outside the visible time window defined by baseTime and gridWindowEnd.\\n  if (showEnd <= scheduleStore.baseTime || showStart >= gridWindowEnd) {\\n    // If the show ends before the grid starts or begins after the grid ends, it is not visible.\\n    return 0;\\n  }\\n\\n  // Calculate the actual start and end times of the show that are visible within the grid.\\n  const visibleStartTime = showStart < scheduleStore.baseTime ? scheduleStore.baseTime : showStart;\\n  const visibleEndTime = showEnd > gridWindowEnd ? gridWindowEnd : showEnd;\\n\\n  // Calculate the visible duration of the show in minutes.\\n  const visibleDuration = (visibleEndTime - visibleStartTime) / 60000; // Convert milliseconds to minutes\\n\\n  // Determine how many 30-minute columns this visible duration spans.\\n  // Use Math.ceil to ensure that any part of a column used requires a full column allocation.\\n  return Math.ceil(visibleDuration / 30);\\n};\\n\\n\\n\\n\\nconst timeFormat = (date) => {\\n  return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\\n};\\n\\nconst endTime = (show) => {\\n  return new Date(show.startTime.getTime() + show.span * 30 * 60000);\\n};\\n\\n// const visibleShows = computed(() => {\\n//   return mockShows.map(show => {\\n//     // Calculate the adjusted start time based on the base time\\n//     const startTime = new Date(baseTime.value.toDateString() + ' ' + show.startTime);\\n//     const endTime = new Date(startTime.getTime() + show.span * 30 * 60000); // span in minutes to milliseconds\\n//\\n//     // Determine if the show should be visible within the current view window\\n//     // For example, assuming the view window is 4 hours from the base time\\n//     const viewWindowStart = baseTime.value;\\n//     const viewWindowEnd = new Date(baseTime.value.getTime() + 4 * 3600000);\\n//\\n//     // Check if the show overlaps with the current view window\\n//     const isVisible = (startTime < viewWindowEnd && endTime > viewWindowStart);\\n//\\n//     return {\\n//       ...show,\\n//       startTime,\\n//       endTime, // optional, for debugging or further calculations\\n//       isVisible // This can be used to conditionally render shows\\n//     };\\n//   }).filter(show => show.isVisible); // Optionally filter out shows not visible in the current window\\n// });\\n\\n// const visibleShows = computed(() => {\\n//   // Filter or adjust shows based on the current 'baseTime'\\n//   return mockShows.map(show => ({\\n//     ...show,\\n//     startTime: new Date(show.startTime.getTime()) // ensure reactive updates\\n//   }));\\n// });\\n\\n// const numberOfColumns = scheduleStore.numberOfColumns;\\n\\n// const width = ref(window.innerWidth);\\n\\nonMounted(async() => {\\n// Register the resize event listener to update the width\\n  window.addEventListener('resize', scheduleStore.updateWidth);\\n  // const response = await axios.get('@/Json/mockShows');\\n  // shows.value = response.data.mockShows.map(show => ({\\n  //   ...show,\\n  //   startTime: new Date(baseTime.value.toDateString() + ' ' + show.startTime)\\n  // }));\\n});\\n\\nonUnmounted(() => {\\n  window.removeEventListener('resize', scheduleStore.updateWidth);\\n});\\n\\n// Assuming the current hour is 0, which represents the start of our viewing grid\\n// const baseTime = new Date();\\n// baseTime.setMinutes(0, 0, 0); // Normalize to the full hour for consistency\\n\\n// const mockShows = [\\n//   { name: 'Early Morning Show', span: 2, startTime: new Date(baseTime.getTime() - 30*60000) }, // Started 30 minutes ago\\n//   { name: 'Morning Show', span: 4, startTime: baseTime }, // Starts now\\n//   { name: 'Late Morning Show', span: 3, startTime: new Date(baseTime.getTime() + 1*3600000) }, // Starts in 1 hour\\n//   { name: 'Noon News', span: 2, startTime: new Date(baseTime.getTime() + 90*60000) }, // Starts in 1.5 hours\\n//   { name: 'Afternoon Talk', span: 6, startTime: new Date(baseTime.getTime() + 2*3600000) }, // Starts in 2 hours\\n//   { name: 'Evening Special', span: 1, startTime: new Date(baseTime.getTime() - 90*60000) }, // Started 1.5 hours ago\\n//   { name: 'Late Show', span: 3, startTime: new Date(baseTime.getTime() + 2*3600000) }, // Starts in 2 hours\\n//   { name: 'Night Owl Movie', span: 2, startTime: new Date(baseTime.getTime() + 3*3600000) } // Starts in 3 hours\\n// ];\\n</script>\\n\\n<style scoped>\\n.grid {\\n  display: grid;\\n  grid-template-columns: repeat(8, minmax(0, 1fr));\\n  grid-auto-rows: minmax(100px, auto);\\n  gap: 4px;\\n}\\n\\n@media (max-width: 640px) {\\n  .grid {\\n    grid-template-columns: repeat(4, minmax(0, 1fr));\\n  }\\n}\\n@media (min-width: 641px) and (max-width: 768px) {\\n  .grid {\\n    grid-template-columns: repeat(6, minmax(0, 1fr));\\n  }\\n}\\n@media (min-width: 769px) {\\n  .grid {\\n    grid-template-columns: repeat(8, minmax(0, 1fr));\\n  }\\n}\\n</style>\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","<template>\n  <!-- Today view layout -->\n  <div class=\" hidden today-view container mx-auto px-4 py-8 flex flex-col\">\n    <div id=\"topDivForTodayView\"></div>\n    <button  v-if=\"!scheduleStore.isToday\"\n             @click=\"scheduleStore.setSelectedDayToToday(new Date());\"\n             class=\"py-1 px-2 text-white rounded-lg w-fit\"\n             :class=\"{'bg-blue-300': scheduleStore.isToday, 'bg-green-600 hover:bg-green-700': !scheduleStore.isToday}\">\n      Go To Now</button>\n    <div class=\"flex justify-center text-center mb-4\">\n      <h2 class=\"text-3xl font-bold mb-2\">{{ dateMessage }}</h2>\n    </div>\n    <div class=\"flex justify-between items-center mb-4\">\n      <button\n          @click=\"scheduleStore.changeDay(-1)\"\n          class=\"bg-gray-100 hover:bg-gray-200 text-black p-2 rounded shadow\"\n      >\n        &lt; Previous Day\n      </button>\n      <div class=\"flex flex-col text-center\">\n\n        <h3>{{ userStore.canadianTimezoneDescription }} Time</h3>\n      </div>\n      <button\n          @click=\"scheduleStore.changeDay(1)\"\n          class=\"bg-gray-100 hover:bg-gray-200 text-black p-2 rounded shadow\"\n      >\n        Next Day &gt;\n      </button>\n    </div>\n    <button\n        @click=\"scheduleStore.shiftHours(-6)\"\n        class=\"mb-4 bg-gray-100 hover:bg-gray-200 text-black py-2 rounded shadow\"\n    >\n      &#8593; Back 6 Hours\n    </button>\n\n    <div class=\"flex flex-col flex-grow\">\n      <div v-for=\"(hour, index) in scheduleStore.nextSixHours\" :key=\"hour.toString()\">\n\n        <!-- Time Segment Label -->\n        <div\n            v-if=\"index === 0 || getTimeSegment(hour).segment !== getTimeSegment(scheduleStore.nextSixHours[index - 1]).segment\"\n            :class=\"getTimeSegment(hour).color\"\n            class=\"mb-4 p-2 text-black text-center font-bold text-2xl rounded shadow\">\n          {{ getTimeSegment(hour).segment }}\n        </div>\n\n        <!-- Content for the current hour -->\n        <template v-for=\"item in upcomingContent\">\n          <div v-if=\"isWithinCurrentHour(item, hour)\" :key=\"item.id\"\n               class=\"hover:bg-blue-400 hover:cursor-pointer\"\n               @click.prevent=\"goToContentPage(item)\"\n               :class=\"['p-4 rounded-lg shadow', getTimeSegment(new Date(item.start_time)).color, 'mb-4']\">\n            <div class=\"flex flex-row flex-wrap gap-x-4 gap-y-2\">\n              <div class=\"flex flex-col w-28 max-w-28 text-gray-500\">\n                <div class=\"font-bold text-black break-words\">{{\n                    formatHour(new Date(item.start_time))\n                  }}&nbsp;{{ userStore.timezoneAbbreviation }}\n                </div>\n                <div class=\"break-words\">{{ formatDuration(item.durationMinutes) }}</div>\n              </div>\n              <div class=\"flex flex-col\">\n                <button @click.prevent=\"goToContentPage(item)\">\n                  <SingleImage v-if=\"item.type === 'show'\" :image=\"item?.content?.show?.image\"\n                               :alt=\"item?.content?.show?.name\" class=\"w-20 h-20\"/>\n                  <SingleImage v-else :image=\"item?.content?.image\" :alt=\"item?.content?.name\" class=\"w-20 h-20\"/>\n                </button>\n              </div>\n              <div class=\"flex flex-col items-start h-full\">\n                <div class=\"text-gray-800 text-2xl tracking-wider\">\n                  <button @click.prevent=\"goToContentPage(item)\" class=\"text-left\">\n                    <span v-if=\"item.type === 'show'\">{{ item?.content?.show?.name }}</span>\n                    <span v-if=\"item.type === 'movie'\">{{ item?.content?.name }}</span>\n                  </button>\n                </div>\n                <div class=\"mt-2 text-gray-700 flex flex-wrap gap-1\">\n                    <div class=\"w-fit text-xs font-semibold uppercase tracking-wide bg-gray-900 px-2 py-1 rounded\">\n                      <span v-if=\"item.type === 'show'\" class=\"text-green-500\">show</span>\n                      <span v-if=\"item.type === 'movie'\"\n                            class=\"text-pink-500 bg-gray-900 px-2 py-1\">movie</span>\n                    </div>\n                    <div v-if=\"item?.content?.show?.category?.name || item?.content?.category?.name\"\n                         class=\"w-fit text-xs font-semibold uppercase tracking-wider text-yellow-600 bg-gray-900 px-2 py-1 rounded\">\n                    <span v-if=\"item.type === 'show' && item?.content?.show?.category?.name\"\n                          class=\"\">{{ item?.content?.show?.category?.name }}</span>\n                      <span v-if=\"item.type === 'movie' && item?.content?.subCategory?.name\"\n                            class=\"\">{{ item?.content?.category?.name }}</span>\n                    </div>\n                    <div v-if=\"item?.content?.show?.subCategory?.name || item?.content?.subCategory?.name\"\n                         class=\"w-fit text-xs font-semibold tracking-wide text-yellow-500 bg-gray-900 px-2 py-1 rounded\">\n                      <span v-if=\"item.type === 'show'\" class=\"\">{{ item?.content?.show?.subCategory?.name }}</span>\n                      <span v-if=\"item.type === 'movie'\" class=\"\">{{ item?.content?.subCategory?.name }}</span>\n                    </div>\n                  </div>\n              </div>\n            </div>\n          </div>\n        </template>\n\n\n        <!-- Fallback if no content is found for the current hour -->\n        <div v-if=\"!isContentAvailableForHour(hour)\" :class=\"getTimeSegment(hour).color\"\n             class=\"mb-4 p-4 rounded-lg shadow text-gray-500\">\n          <div class=\"font-semibold\">{{ formatHour(hour) }}&nbsp;{{ userStore.timezoneAbbreviation }}</div>\n          <div>Nothing scheduled.</div>\n        </div>\n\n        <!-- Dynamically insert the dateMessage for the next day if the hour is 11 PM -->\n        <div v-if=\"scheduleStore.isElevenPM(hour) && scheduleStore.nextSixHours[index + 1]\"\n             class=\"my-4 p-2 bg-blue-800 text-white rounded shadow\">\n          {{ generateDateMessage(addHours(hour, 1)) }}\n        </div>\n      </div>\n    </div>\n\n    <button\n        @click=\"shiftHours(6)\"\n        class=\"bg-gray-100 hover:bg-gray-200 text-black py-2 rounded shadow\"\n    >\n      &#8595; Forward 6 Hours\n    </button>\n  </div>\n</template>\n\n<script setup>\n// Today view logic\n// import { ref, computed } from 'vue'\nimport { useScheduleStore } from '@/Stores/ScheduleStore'\nimport { useUserStore } from '@/Stores/UserStore'\nimport {\n  format,\n  startOfHour,\n  addHours,\n  isToday,\n  isYesterday,\n  isTomorrow,\n  startOfDay,\n  isWithinInterval,\n  isSameDay,\n} from 'date-fns'\nimport { storeToRefs } from 'pinia'\nimport { computed, onMounted, ref, watch, watchEffect } from 'vue'\nimport SingleImage from '@/Components/Global/Multimedia/SingleImage.vue'\nimport { Inertia } from '@inertiajs/inertia'\n\nconst scheduleStore = useScheduleStore()\nconst userStore = useUserStore()\nconst {upcomingContent, dateMessage} = storeToRefs(scheduleStore)\n\nconst selectedDay = ref(scheduleStore.selectedDay)\nconst weeklyContent = computed(() => scheduleStore.weeklyContent)\n\nconst shiftHours = async(hours) => {\n  const topDiv = document.getElementById(\"topDivForTodayView\");\n  topDiv.scrollIntoView({behavior: 'smooth'});\n  await scheduleStore.shiftHours(hours)\n}\n\nwatch(selectedDay, (newValue) => {\n  scheduleStore.setSelectedDay(newValue)\n  // If necessary, trigger other actions when selectedDay changes\n})\n\nfunction isWithinCurrentHour(item, hour) {\n  const startOfCurrentHour = startOfHour(hour)\n  const endOfCurrentHour = addHours(startOfCurrentHour, 1)\n  const contentStartTime = new Date(item.start_time)\n  return contentStartTime >= startOfCurrentHour && contentStartTime < endOfCurrentHour\n}\n\n// Assuming `upcomingContent` is a computed property that already filters\n// content within a 6-hour window from `scheduleStore.viewingWindowStart`\nfunction isContentAvailableForHour(hour) {\n  // Convert the given hour to the start and end of that hour block\n  const startOfCurrentHour = startOfHour(hour)\n  const endOfCurrentHour = addHours(startOfCurrentHour, 1)\n\n  // Check if any item in `upcomingContent` starts within this hour block\n  return upcomingContent.value.some(item => {\n    const contentStartTime = new Date(item.start_time)\n    return contentStartTime >= startOfCurrentHour && contentStartTime < endOfCurrentHour\n  })\n}\n\nfunction formatHour(date) {\n  return format(date, 'h:mm aaaa')\n}\n\nfunction getTimeSegment(hour) {\n  const hourOfDay = hour.getHours()\n  if (hourOfDay >= 4 && hourOfDay < 6) return {segment: 'Early Morning', color: 'bg-gray-200'}\n  if (hourOfDay >= 6 && hourOfDay < 12) return {segment: 'Morning', color: 'bg-yellow-200'}\n  if (hourOfDay >= 12 && hourOfDay < 17) return {segment: 'Afternoon', color: 'bg-green-200'}\n  if (hourOfDay >= 17 && hourOfDay < 20) return {segment: 'Prime Time', color: 'bg-red-200'}\n  if (hourOfDay >= 20 && hourOfDay < 23) return {segment: 'Late Prime Time', color: 'bg-purple-200'}\n  if (hourOfDay >= 23 || hourOfDay < 1) return {segment: 'Late Night', color: 'bg-blue-200'}\n  if (hourOfDay >= 1 && hourOfDay < 4) return {segment: 'Overnight', color: 'bg-indigo-200'}\n  return {segment: '', color: ''} // Default case\n}\n\n// A computed property to determine the starting segment for the displayed hours\nconst startingSegment = computed(() => scheduleStore.nextSixHours.value.length > 0 ? getTimeSegment(scheduleStore.nextSixHours.value[0]) : null)\n\nfunction generateDateMessage(date) {\n  // This method mirrors the logic in the store's getter but accepts any date.\n  const startDay = startOfDay(date)\n  const formattedDate = format(startDay, 'EEEE, MMMM do')\n  if (isToday(startDay)) {\n    return `Today - ${formattedDate}`\n  } else if (isYesterday(startDay)) {\n    return `Yesterday - ${formattedDate}`\n  } else if (isTomorrow(startDay)) {\n    return `Tomorrow - ${formattedDate}`\n  } else {\n    return formattedDate\n  }\n}\n\nconst goToContentPage = (item) => {\n  if (item.type === 'show') {\n    Inertia.visit(`/shows/${item.content.show.slug}`)\n  } else if (item.type === 'movie') {\n    Inertia.visit(`/movies/${item.content.slug}`)\n  }\n}\n\nconst formatDuration = (minutes) => {\n  if (minutes < 60) {\n    return `${minutes} minutes`\n  } else if (minutes === 60) {\n    return `1 hour`\n  } else {\n    const hours = Math.floor(minutes / 60)\n    const remainingMinutes = minutes % 60\n    if (remainingMinutes === 0) {\n      return `${hours} hours`\n    } else {\n      return `${hours} hour${hours > 1 ? 's' : ''} and ${remainingMinutes} minutes`\n    }\n  }\n}\n\n\n// Define a reactive watcher on the timezone\n// This watcher will call preloadWeeklyContent whenever the timezone changes and is not null\nwatch(\n    () => userStore.timezone,\n    async (newTimezone, oldTimezone) => {\n      // Ensure the timezone is set before calling preloadWeeklyContent\n      if (newTimezone) {\n        await scheduleStore.preloadWeeklyContent()\n      }\n    },\n    {immediate: true}, // This option ensures the watcher is triggered immediately on mount\n)\n\n// Optionally, keep the onMounted if there are other initialization tasks\n// onMounted(async () => {\n//   // Check if timezone is already available on mount and preload content if it hasn't been done by the watcher\n//   if (userStore.timezone) {\n//     await scheduleStore.preloadWeeklyContent()\n//   }\n// })\n</script>\n\n<style scoped>\n/* Styles specific to today view */\n</style>","import api from \"!../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../../../node_modules/css-loader/dist/cjs.js??clonedRuleSet-10.use[1]!../../../../../node_modules/vue-loader/dist/stylePostLoader.js!../../../../../node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-10.use[2]!../../../../../node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./TodayView.vue?vue&type=style&index=0&id=190f74da&scoped=true&lang=css\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","import script from \"./TodayView.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./TodayView.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./TodayView.vue?vue&type=style&index=0&id=190f74da&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-190f74da\"]])\n\nexport default __exports__","import script from \"./Messages.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Messages.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n  <div class=\"mx-4 my-4\">\n    <div class=\"alert alert-info mt-4\"\n         v-if=\"props.flash.message\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" class=\"stroke-current shrink-0 w-6 h-6\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n              d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"></path>\n      </svg>\n      <span>{{ props.flash.message }}</span>\n      <button class=\"text-xs ml-12\" @click=\"clearFlashMessage\"> Close</button>\n    </div>\n    <div class=\"alert alert-success mt-4 mx-3\"\n         v-if=\"props.flash.success\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"stroke-current shrink-0 h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n              d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"/>\n      </svg>\n      <span>{{ props.flash.success }}</span>\n      <button class=\"text-xs ml-12\" @click=\"clearFlashMessage\"> Close</button>\n    </div>\n    <div class=\"alert alert-warning mt-4 mx-3\"\n         v-if=\"props.flash.warning\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"stroke-current shrink-0 h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n              d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z\"/>\n      </svg>\n      <span>{{ props.flash.warning }}</span>\n      <button class=\"text-xs ml-12\" @click=\"clearFlashMessage\"> Close</button>\n    </div>\n    <div class=\"alert alert-error mt-4 mx-3\"\n         v-if=\"props.flash.error\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"stroke-current shrink-0 h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n              d=\"M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z\"/>\n      </svg>\n      <span>{{ props.flash.error }}</span>\n      <button class=\"text-xs ml-12\" @click=\"clearFlashMessage\"> Close</button>\n    </div>\n  </div>\n\n</template>\n\n<script setup>\nimport { Inertia } from \"@inertiajs/inertia\"\nimport { computed } from \"vue\"\nimport { useAppSettingStore } from \"@/Stores/AppSettingStore\"\n\nconst appSettingStore = useAppSettingStore()\n\nappSettingStore.showFlashMessage = true\n\nlet props = defineProps({\n  flash: Object,\n\n})\n\nconst messageType = computed(() => ({\n  'text-green-700 bg-green-100 dark:bg-green-200 dark:text-green-800': props.flash.success,\n  'text-blue-700 bg-blue-100 dark:bg-blue-200 dark:text-blue-800': props.flash.message,\n  'text-orange-700 bg-orange-100 dark:bg-orange-200 dark:text-orange-800': props.flash.warning,\n  'text-red-700 bg-red-100 dark:bg-red-200 dark:text-red-800': props.flash.error,\n}))\n\nconst clearFlashMessage = async () => {\n  await Inertia.post(route('flash.clear'));\n  Inertia.reload();\n};\n</script>\n","import script from \"./PopUpModal.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./PopUpModal.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n  <div>\n    <dialog :id=\"id\" class=\"modal\">\n      <div class=\"modal-box text-center my-auto border-2 border-secondary\" data-theme=\"dark\">\n        <h2 class=\"font-bold text-3xl text-secondary\">\n          <slot name=\"header\"></slot>\n        </h2>\n        <p class=\"py-4 text-xl\">\n          <slot name=\"main\"></slot>\n        </p>\n        <div class=\"modal-action justify-center w-full\">\n          <form method=\"dialog\">\n            <!-- if there is a button in form, it will close the modal -->\n            <button @click=\"notificationStore.showPopUpModal = false\" class=\"btn btn-secondary\">Okay</button>\n          </form>\n        </div>\n      </div>\n    </dialog>\n  </div>\n</template>\n<script setup>\nimport { useNotificationStore } from \"@/Stores/NotificationStore\"\n\nconst notificationStore = useNotificationStore()\n\ndefineProps({\n  id: String,\n})\n</script>\n","import api from \"!../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../../../node_modules/css-loader/dist/cjs.js??clonedRuleSet-10.use[1]!../../../../../node_modules/vue-loader/dist/stylePostLoader.js!../../../../../node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-10.use[2]!../../../../../node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./ScheduleGrid.vue?vue&type=style&index=0&id=53f3bf92&scoped=true&lang=css\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","<template>\n  <div class=\"tracking-wide\">\n    <!-- Day of the week in large, semi-bold letters -->\n    <p class=\"tracking-wide text-4xl font-semibold mb-2\">{{ currentDay }}</p>\n\n    <!-- Current time display -->\n    <p class=\"tracking-wide text-xl text-gray-300\">Current Time:  <span class=\"text-white font-medium\">{{ scheduleStore.currentTime }} {{ userStore.timezoneAbbreviation }}</span></p>\n\n    <!-- Input for testing current time -->\n<!--    <p>CURRENT TIME (for testing): <input type=\"time\" v-model=\"formattedTime\" @input=\"stopAutoUpdateTime\"-->\n<!--                                          class=\"text-black\"></p>-->\n\n  </div>\n</template>\n\n<script setup>\nimport { computed, onMounted, onUnmounted, ref, watch } from 'vue'\nimport { useUserStore } from '@/Stores/UserStore'\nimport { useScheduleStore } from '@/Stores/ScheduleStore'\nimport dayjs from 'dayjs'\nimport utc from 'dayjs/plugin/utc'  // for UTC support\nimport timezone from 'dayjs/plugin/timezone'  // for timezone support\n\nconst userStore = useUserStore()\nconst scheduleStore = useScheduleStore()\n\ndayjs.extend(utc)\ndayjs.extend(timezone)\n\n// const baseTime = ref(new Date());\n// const currentTime = ref(baseTime.value.toISOString().substring(11, 16));\nlet intervalId = null\nlet timeoutId = null  // Variable to store the timeout reference\nlet initialUpdateDone = false  // Flag to track if the first update has been done\n\n// Computed property to get the current day of the week\nconst currentDay = computed(() => {\n  return dayjs().format('dddd'); // 'dddd' for full day name according to dayjs formatting\n});\n\n// const updateShows = () => {\n//   const [hour, minute] = currentTime.value.split(':');\n//   baseTime.value.setHours(parseInt(hour), parseInt(minute), 0, 0);\n//   // You might want to force a re-render or re-compute of visible shows here\n// };\n\n// Function to update current time\nfunction updateCurrentTime() {\n  const timezone = userStore.timezone || 'UTC'  // Default to 'UTC' if no timezone is set\n\n  // Use dayjs to handle the timezone conversion\n  const currentTime = dayjs().tz(timezone).format('YYYY-MM-DD HH:mm:ss')\n\n  scheduleStore.setBaseTime(currentTime)\n  console.log('Time updated:', currentTime)\n}\n\n// Function to start auto-update interval\nfunction startAutoUpdateTime(updateImmediately = true) {\n  clearInterval(intervalId)  // Clear any existing interval first\n  if (updateImmediately && !initialUpdateDone) {\n    updateCurrentTime()  // Optionally update time immediately\n    initialUpdateDone = true  // Set the flag after the first update\n  }\n  intervalId = setInterval(() => {\n    updateCurrentTime()  // Continue updating every minute\n  }, 60000)\n  console.log('Interval started, ID:', intervalId)\n}\n\n// Function to clear the interval\nfunction stopAutoUpdateTime() {\n  clearInterval(intervalId)\n  console.log('Interval stopped, ID:', intervalId)\n  intervalId = null  // Reset the interval ID\n  clearTimeout(timeoutId)  // Use clearTimeout to stop the timeout\n  timeoutId = null         // Reset the variable after cancelling\n  console.log('Auto-update canceled.')\n}\n\nonMounted(() => {\n  // Use dayjs to get the current time\n  const now = dayjs();\n\n  // Calculate milliseconds until the next minute to align updates\n  const msUntilNextMinute = (60 - now.second()) * 1000 - now.millisecond();\n\n  // Delay the start of regular updates to align with the start of the next minute\n  timeoutId = setTimeout(() => {\n    startAutoUpdateTime();  // Start regular updates at the next minute\n  }, msUntilNextMinute);\n});\n\nonUnmounted(() => {\n  stopAutoUpdateTime()\n})\n\nconst formattedTime = computed({\n  get() {\n    // Use dayjs to format the time from the baseTime in scheduleStore\n    return dayjs(scheduleStore.baseTime).format('HH:mm');\n  },\n  set(value) {\n    // Parse the hours and minutes from the input value\n    const [hours, minutes] = value.split(':').map(Number);\n    // Use dayjs to update the time while keeping the date part unchanged\n    const newTime = dayjs(scheduleStore.baseTime).hour(hours).minute(minutes).toDate();\n    // Update the baseTime in the scheduleStore\n    scheduleStore.setBaseTime(newTime);\n  },\n})\n\n\n</script>","import script from \"./CurrentTime.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./CurrentTime.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n\n  <!--  We need the CurrenTime component to keep our ScheduleStore currentTime up to date\n        it has a SetInterval in it. -->\n  <CurrentTime/>\n\n  <div class=\"mb-2 tracking-wide\">\n    <span class=\"text-sm uppercase text-purple-500\">All times are listed in your timezone.</span>\n  </div>\n\n  <div class=\"w-full\">\n    <div class=\"schedule-grid\" :style=\"{ 'grid-template-columns': gridColumns }\">\n      <div class=\"header-row\" :style=\"{ 'grid-template-columns': gridColumns }\">\n        <!-- Time slots header -->\n        <div class=\"time-cell bg-gray-900 px-3 py-2 text-center font-bold\"\n             v-for=\"interval in nextFourHoursWithHalfHourIntervals\" :key=\"interval.dateTime\">\n          {{ interval.formatted }}\n        </div>\n      </div>\n      <div v-if=\"scheduleIsLoading && nextFourHoursOfContent.length === 0\"\n           class=\"w-full flex justify-center text-center items-center\">\n        <span class=\"loading loading-ball loading-xl text-info\"></span>\n      </div>\n    </div>\n    <div class=\"schedule-grid\" :style=\"{ 'grid-template-columns': gridColumns }\">\n      <!-- Render time banners -->\n      <div v-for=\"banner in scheduleStore.preparedTimeBanners\" :key=\"banner.id\"\n           :style=\"gridItemStyle(banner)\" class=\"time-banner\">\n        {{ banner.name }}\n      </div>\n    </div>\n    <div class=\"schedule-grid\" :style=\"{ 'grid-template-columns': gridColumns }\">\n\n\n      <!-- Loop through combinedShows directly -->\n      <div v-for=\"item in scheduleStore.nextFourHoursOfContent\"\n           :key=\"item.id\"\n           :style=\"gridItemStyle(item)\"\n           class=\"show-cell\"\n           :class=\"{'hover:cursor-pointer' : !item.placeholder}\"\n           @click=\"handleShowClick(item)\">\n        <div\n            class=\"item-content px-4 flex flex-col justify-between items-center w-full h-full overflow-hidden\"\n            :class=\"{\n        'bg-gradient-to-r from-gray-900 to-gray-700': !item.placeholder,\n        'bg-gradient-to-r from-tan-800 to-tan-600': item.placeholder,  // Assume tan-800 and tan-600 are defined in your tailwind config\n        'gradient-on-hover': !item.placeholder\n    }\">\n          <div class=\"show-info flex-grow flex flex-col items-center justify-center\">\n            <h3 class=\"show-title my-4 w-full text-center text-lg font-semibold break-words\"\n                :class=\"{'gradient-on-hover': !item.placeholder}\">\n              {{ item.content.name || 'No Show Name' }}</h3>\n            <!--            <p>{{ item.content.id }}</p>-->\n            <!--            <p>Row: {{ item.gridRow }}</p>-->\n            <SingleImage v-if=\"item.content.image\"\n                         :image=\"item.content.image\"\n                         :alt=\"item.content.name\"\n                         :class=\"`w-full h-auto max-h-1/2 object-cover transition-opacity duration-300 hover:opacity-80`\"/>\n            <div v-if=\"!item.placeholder\"\n                 class=\"show-time w-full text-center text-sm p-2 mt-2\"\n                 :class=\"{'gradient-on-hover': !item.placeholder}\">\n              <p>{{ formatTime(item.startTime, true) }}</p>\n<!--              <p>{{ formatTime(item.startTime) }} - {{ formatTime(item.endTime, true) }}</p>-->\n              <p>{{ formatDuration(item.durationMinutes) }}</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n\n    </div>\n\n    <div v-if=\"allPlaceholders && nextScheduledShow\" class=\"next-show-highlight p-5 my-2 border border-gray-300 bg-gradient-to-r from-gray-900 to-gray-700 text-center\">\n      <div class=\"bg-green-500 text-white py-2\">\n        <h2>Playing Soon</h2>\n      </div>\n      <div class=\"show-details mt-4 mx-auto max-w-4xl\">\n        <h3 class=\"text-3xl mb-1\">{{ nextScheduledShow.content.name }}</h3>\n        <p class=\"text-lg\">{{ formatLongDate(nextScheduledShow.startTime) }}</p> <!-- Formatted start date -->\n        <p class=\"text-lg\">{{ formatTime(nextScheduledShow.startTime, true) }} - {{ formatTime(nextScheduledShow.endTime, true) }}</p>\n        <div class=\"w-full flex justify-center items-center mt-4\">\n          <SingleImage v-if=\"nextScheduledShow.content.image\"\n               :image=\"nextScheduledShow.content.image\"\n               :alt=\"nextScheduledShow.content.name\"\n               :class=\"`w-3/4 md:w-1/2 lg:w-1/3 h-auto object-cover mx-auto`\"/>\n        </div>\n        <p class=\"text-lg\">{{ formatDuration(nextScheduledShow.durationMinutes) }}</p>\n      </div>\n    </div>\n\n\n\n    <div class=\"schedule-grid text-center\" :style=\"{ 'grid-template-columns': gridColumns }\">\n\n      <div v-if=\"nowPlayingShow\" :style=\"statusGridItemStyle(nowPlayingShow)\"\n           class=\"now-playing text-black font-semibold\">\n        <span>NOW PLAYING</span>\n      </div>\n\n      <div v-if=\"comingUpNextShow\" :style=\"statusGridItemStyle(comingUpNextShow)\"\n           class=\"coming-up-next text-black font-semibold\">\n        <span>COMING UP NEXT</span>\n\n      </div>\n\n    </div>\n  </div>\n\n</template>\n<script setup>\nimport { computed, onMounted, onUnmounted, ref, watch, watchEffect } from 'vue'\nimport { Inertia } from '@inertiajs/inertia'\nimport { debounce } from 'lodash'\nimport dayjs from 'dayjs'\nimport advancedFormat from 'dayjs/plugin/advancedFormat'; // for using 'a' for AM/PM format\nimport { useScheduleStore } from '@/Stores/ScheduleStore'\nimport { useAppSettingStore } from '@/Stores/AppSettingStore'\nimport { useUserStore } from '@/Stores/UserStore'\nimport ScheduleGrid from '@/Components/Pages/Schedule/ScheduleGrid.vue'\nimport SingleImage from '@/Components/Global/Multimedia/SingleImage.vue'\nimport CurrentTime from '@/Components/Global/Schedule/CurrentTime.vue'\n\nconst scheduleStore = useScheduleStore()\nconst appSettingStore = useAppSettingStore()\nconst userStore = useUserStore()\n\ndayjs.extend(advancedFormat);\n\nlet initialLoadHandled = false\n\n// // Computed property for the currently playing show\n// const updateNowPlaying = computed(() => {\n//   for (const show of scheduleStore.nextFourHoursOfContent) {\n//     if (isNowPlaying(show.startTime, show.durationMinutes) && !show.placeholder && show.gridStart === 1) {\n//       return show;  // ensure this has gridStart, gridSpan, gridRow\n//     }\n//   }\n//   return null;\n// });\n//\n//\n//\n// // Computed property for the show that is coming up next\n// const updateComingUpNext = computed(() => {\n//   let foundPlaying = false;\n//   for (const show of scheduleStore.nextFourHoursOfContent) {\n//     if (!show.placeholder && show.gridStart > 1) {\n//       if (foundPlaying) {\n//         return show;  // ensure this has gridStart, gridSpan, gridRow\n//       }\n//     }\n//     if (isNowPlaying(show.startTime, show.durationMinutes)) {\n//       foundPlaying = true;  // Mark as found\n//     }\n//   }\n//   return null;\n// });\n\nconst allPlaceholders = computed(() => {\n  return scheduleStore.nextFourHoursOfContent.every(item => item.placeholder);\n});\n\nconst nextScheduledShow = computed(() => {\n  const now = dayjs();\n  return scheduleStore.weeklyContent.find(show =>\n      dayjs(show.startTime).isAfter(now) && !show.placeholder\n  );\n});\n\nfunction isNowPlaying(startTime, duration) {\n  const now = dayjs()\n  const start = dayjs(startTime)\n  const end = start.add(duration, 'minutes')\n  return now.isAfter(start) && now.isBefore(end)\n}\n\n\nconst nowPlayingShow = computed(() => {\n  return scheduleStore.nextFourHoursOfContent.find(show => show.nowPlaying)\n})\n\nconst comingUpNextShow = computed(() => {\n  return scheduleStore.nextFourHoursOfContent.find(show => show.comingUpNext)\n})\n\nwatch(() => scheduleStore.timeSlots, (newTimeSlots, oldTimeSlots) => {\n  if (newTimeSlots && newTimeSlots.length > 0 && !initialLoadHandled) {\n    console.log('Time slots are ready, updating next four hours.')\n    scheduleStore.updateNextFourHours()\n    initialLoadHandled = true\n  }\n}, {immediate: true})\n\nwatch(\n    () => scheduleStore.baseTime,\n    (newTime, oldTime) => {\n      if (newTime !== oldTime) { // This check may be redundant but adds clarity\n        console.log(`Base time updated from ${oldTime} to ${newTime}`)\n        scheduleStore.updateNextFourHours()\n      }\n    },\n    {immediate: true},\n)\n//\n\n// Watch for changes in screen size indicators\nwatch(\n    [() => appSettingStore.isVerySmallScreen, () => appSettingStore.isSmallScreen],\n    ([newVerySmall, newSmall], [oldVerySmall, oldSmall]) => {\n      if (newVerySmall !== oldVerySmall || newSmall !== oldSmall) {\n        console.log(`Screen size change detected: VerySmallScreen: ${newVerySmall}, SmallScreen: ${newSmall}`)\n        scheduleStore.updateNextFourHours()\n      }\n    },\n    {immediate: true},  // Optionally run on initial setup\n)\n\nwatchEffect(() => {\n  console.log('nextFourHoursOfContent:', scheduleStore.nextFourHoursOfContent)\n})\n\n// Method to format time with conditional AM/PM display\nfunction formatTime(time, showMeridiem = false) {\n  return dayjs(time).format(`h:mm ${showMeridiem ? 'a' : ''}`)\n}\n\nfunction formatLongDate(date) {\n  return dayjs(date).format('dddd, MMM, YYYY');\n}\n\n// Method to format duration into a readable format\nfunction formatDuration(minutes) {\n  const hours = Math.floor(minutes / 60)\n  const remainderMinutes = minutes % 60\n  if (hours === 0) return `${remainderMinutes} minutes`\n  return `${hours} hour${hours > 1 ? 's' : ''} ${remainderMinutes > 0 ? remainderMinutes + ' minutes' : ''}`\n}\n\n// Define the function to calculate grid style directly\nfunction gridItemStyle(item) {\n  const style = {\n    gridColumn: `${item.gridStart} / span ${item.gridSpan}`,\n    gridRow: `row ${item.gridRow}`,\n  }\n  console.log(style)  // Log to see what styles are being returned\n  return style\n}\n\n// Dedicated function to handle status row grid styling\nfunction statusGridItemStyle(item) {\n  if (!item) return {}\n\n  // Log to debug the grid positions being applied\n  console.log(`Status Item - Grid Start: ${item.gridStart}, Grid Span: ${item.gridSpan}`)\n\n  return {\n    gridColumn: `${item.gridStart} / span ${item.gridSpan}`,\n    gridRow: `row 1`, // Assuming status rows are always in the first grid row for visibility\n  }\n}\n\n\n// Computed property to determine the number of columns\nconst gridColumns = computed(() => {\n  let numColumns\n  if (appSettingStore.isVerySmallScreen) {\n    numColumns = Math.floor((scheduleStore.verySmallScreenSlotHours * 60) / scheduleStore.slotIntervalMinutes)\n  } else if (appSettingStore.isSmallScreen) {\n    numColumns = Math.floor((scheduleStore.smallScreenSlotHours * 60) / scheduleStore.slotIntervalMinutes)\n  } else {\n    numColumns = Math.floor((scheduleStore.mediumScreenSlotHours * 60) / scheduleStore.slotIntervalMinutes)\n  }\n  document.documentElement.style.setProperty('--text-size', numColumns < 4 ? '0.8em' : '1em')\n  document.documentElement.style.setProperty('--text-small', numColumns < 4 ? '0.7em' : '0.8em')\n\n  return `repeat(${numColumns}, minmax(0, 1fr))` // Returns the CSS grid-template-columns value\n})\n\n// Computed property to ensure reactivity\nconst nextFourHoursWithHalfHourIntervals = computed(() => scheduleStore.nextFourHoursWithHalfHourIntervals)\nconst nextFourHoursOfContent = computed(() => scheduleStore.nextFourHoursOfContent)\nconst scheduleIsLoading = computed(() => scheduleStore.scheduleIsLoading)\n\nconst gridPlacement = (gridStart, gridSpan) => {\n  return {\n    gridColumnStart: gridStart,\n    gridColumnEnd: `span ${gridSpan}`,\n    gridRowStart: 'auto',\n    gridRowEnd: 'span 1', // Assuming each item occupies one row height-wise\n  }\n}\n\n// // Determines the classes for a status cell\n// const getStatusCellClasses = (index) => {\n//   const classes = ['status-cell']\n//   if (index === 0) classes.push('now-playing')\n//   else if (index === 1) classes.push('coming-up-next')\n//   else classes.push('status-cell-empty') // For cells without specific content\n//   return classes\n// }\n\nfunction getCellClasses(type) {\n  const baseClass = 'column-width text-sm 2xl:text-md border border-0.5 border-green-300 hover:border-blue-500 cursor-pointer'\n  switch (type) {\n    case 'show':\n      return `${baseClass} bg-gradient-show hover:bg-gradient-show-hover`\n    case 'new_release':\n      return `${baseClass} bg-gradient-new-release hover:bg-gradient-new-release-hover`\n      // Add more cases as needed\n    default:\n      return baseClass\n  }\n}\n\nfunction handleShowClick(item) {\n  Inertia.visit(`/shows/${item.content.slug}/`)\n  // if (isNowPlaying(item.startTime, item.durationMinutes)) {\n  //   // Redirect to the show's page if it's currently playing\n  //   Inertia.visit(`/shows/${item.content.slug}/`)\n  // } else {\n  //   // Open the reminder modal for shows that are not currently playing\n  //   openModal('getReminderModal')\n  // }\n}\n\nfunction updateNowPlayingAndComingUpNext() {\n  // Logic to update nowPlaying and comingUpNext based on the current time and show data\n}\n\n\n// Helper function to determine the appropriate classes based on the gridStart and certain conditions\nconst getStatusCellClasses = (gridStart, isFirst, isSecond) => {\n  const classes = ['status-cell'] // Base class for all status cells\n  if (isFirst && gridStart === 1) {\n    // 'Now Playing' is only assigned if it's the first item and it starts at the first grid column\n    classes.push('now-playing')\n  } else if (isSecond && gridStart !== 1) {\n    // 'Coming Up Next' is only assigned to the second item and it should not start at the first grid column\n    classes.push('coming-up-next')\n  } else {\n    // Default class for other cells or when no specific condition is met\n    classes.push('status-cell-empty')\n  }\n  return classes\n}\n// Ensure the data structure is what you expect\nconsole.log('All items in store:', scheduleStore.nextFourHoursOfContent)\n\n//\n// const actualShows = computed(() => {\n//   // Flatten the nested arrays, filter out placeholders, and ignore specific content names\n//   return scheduleStore.nextFourHoursOfContent.flat().filter(item =>\n//       !item.placeholder && item.content.name !== \"Nothing scheduled.\" && item.content.name !== \"Blank Spot\"\n//   );\n// });\n//\n\n\n// watch(nowPlayingShow, (newVal, oldVal) => {\n//   console.log('Now Playing Show changed from:', oldVal, 'to:', newVal);\n// });\n//\n// watch(comingUpNextShow, (newVal, oldVal) => {\n//   console.log('Coming Up Next Show changed from:', oldVal, 'to:', newVal);\n// });\n\n// Optional: Watch the entire content array if changes are frequent and need to trigger reevaluations\nwatch(() => scheduleStore.nextFourHoursOfContent, () => {\n  console.log('Content changed, recomputing shows...')\n}, {deep: true})\n\n\n//\n// // Watch for changes in actualShows and log or react accordingly\n// watch(actualShows, (newShows, oldShows) => {\n//   console.log(\"Actual shows have updated:\", newShows);\n//   // Additional reactions can be performed here\n// });\n//\n// // Optionally, watch for changes in previousItemGridEnd if needed\n// watch(previousItemGridEnd, (newEnd, oldEnd) => {\n//   console.log(\"Previous item grid end has updated:\", newEnd);\n//   // React to changes in the end of the first show, if necessary\n// });\n\n\nfunction openModal(modalName) {\n  document.getElementById(modalName).showModal()\n}\n</script>\n\n<style scoped>\n\n.bg-gradient-show {\n  background: linear-gradient(to right, #1f4037, #99f2c8); /* Example green gradient */\n}\n\n.bg-gradient-show-hover:hover {\n  background: linear-gradient(to right, #66D3FA, #6E45E2); /* Example green gradient on hover */\n}\n\n.bg-gradient-new-release {\n  background: linear-gradient(to right, #654ea3, #eaafc8); /* Example purple gradient */\n}\n\n.bg-gradient-new-release-hover:hover {\n  background: linear-gradient(to right, #c2e59c, #64b3f4); /* Example purple gradient on hover */\n}\n\n\n.column-width {\n  @apply w-16\n}\n\n\n.schedule-item {\n  background: #f0f0f0;\n  color: #000;\n  padding: 10px;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  align-items: center;\n}\n\n.time-slot {\n  text-align: center;\n  padding: 10px 0;\n  border-bottom: 1px solid #fff;\n  grid-row: 1; /* Ensures all time slots are in the first row */\n}\n\n.time-banner {\n  background-color: rgba(0, 123, 255, 0.5); /* Example styling */\n  text-align: center;\n  border: 1px solid white; /* White border */\n  padding: 10px;\n}\n\n.show-cell {\n  display: flex; /* Ensure this is set to flex to control child elements with flex properties */\n  flex-direction: column; /* Align children in a column */\n  justify-content: center; /* Align items to the top */\n  align-items: center; /* Center children horizontally */\n  border: 1px solid #ccc;\n  background-color: #f8f8f8;\n  width: 100%; /* Ensures cell uses full width of its grid column */\n  height: 100%; /* Ensures cell uses full height */\n}\n\n.time-cell {\n  border: 1px solid #fff;\n  text-align: center; /* Center text if desired */\n  padding: 10px;\n}\n\n.content {\n  background: #f0f0f0;\n  padding: 8px;\n  border: 1px solid #ddd;\n}\n\n.placeholder {\n  background: #ccc;\n  width: 100%;\n  height: 60px;\n}\n\n\n.schedule-grid {\n  display: grid;\n  width: 100%;\n}\n\n.header-row {\n  display: contents; /* This makes the header-row itself not generate a box, allowing .time-cell to be direct children of .schedule-grid */\n}\n\n.content-row {\n  display: contents; /* This makes the row container disappear, directly using the grid defined in parent */\n}\n\n.schedule-cell {\n  background: #333;\n  color: #fff;\n  text-align: center;\n  padding: 8px;\n}\n\n.grid-container {\n  display: grid;\n  width: 100%;\n  grid-gap: 10px;\n}\n\n.grid-item {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border: 1px solid #ccc;\n}\n\n\n.status-row {\n  display: grid;\n  width: 100%;\n  align-items: center;\n}\n\n\n.status-cell {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 8px;\n  color: white;\n  width: 100%;\n  height: 100%;\n  font-weight: bold;\n  opacity: 0.8;\n  transition: background-color 0.3s ease;\n}\n\n.status-cell span {\n  display: block;\n  padding: 4px 8px;\n  border-radius: 4px;\n  text-align: center;\n}\n\n/* Optional: If you want the empty cells to have a slight indication they are there */\n.status-cell:empty::after {\n  content: \"\";\n  display: block;\n  width: 100%;\n  height: 100%;\n  background: none; /* Adjust this to a very subtle color or keep transparent */\n}\n\n/* Custom hover effect for the parent that affects children */\n.show-cell:hover .gradient-on-hover {\n  background-image: linear-gradient(to right, #06beb6, #48b1bf);\n}\n\n.now-playing, .coming-up-next {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 10px;\n  border: 1px solid #ccc;\n}\n\n.now-playing {\n  background-color: #4CAF50; /* Green for now playing */\n  animation: pulseAnimation 2s infinite;\n}\n\n.coming-up-next {\n  background-color: #FF9800; /* Orange for coming up next */\n}\n\n\n@keyframes pulseAnimation {\n  0% {\n    opacity: 0.75;\n  }\n  50% {\n    opacity: 1;\n  }\n  100% {\n    opacity: 0.75;\n  }\n}\n\n/* Responsive visibility */\n@media (min-width: 1280px) {\n  /* 2xl */\n  .xl\\:hidden {\n    display: none;\n  }\n}\n\n@media (min-width: 1024px) {\n  /* xl */\n  .lg\\:hidden {\n    display: none;\n  }\n}\n\n</style>","import api from \"!../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../../../node_modules/css-loader/dist/cjs.js??clonedRuleSet-10.use[1]!../../../../../node_modules/vue-loader/dist/stylePostLoader.js!../../../../../node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-10.use[2]!../../../../../node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./ScheduleGridContainer.vue?vue&type=style&index=0&id=274905dc&scoped=true&lang=css\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","import script from \"./ScheduleGridContainer.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./ScheduleGridContainer.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./ScheduleGridContainer.vue?vue&type=style&index=0&id=274905dc&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-274905dc\"]])\n\nexport default __exports__","import script from \"./Index.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Index.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<script>\n\n// DELETE THIS SCRIPT TAG\n// This is only for notes about building this page.\n\n// The schedule page will allow free users to look back 72 hours and look ahead 72 hours.\n// On a mobile device it's easy enough to create a forever scroll for looking forward.\n// The easter egg will be scrolling UP to look back at the past 72 hours.\n// Free users can watch any of the content in the past 72 hours for free.\n// Users are given credits each month to watch premium notTV content.\n// They may purchase more credits, or subscribe for unlimited access.\n// They may also use credits to purchase licenses to content from creators.\n// Credits may also be spent in the shop.\n\n</script>\n\n<template>\n  <Head title=\"Schedule\"/>\n\n  <div class=\"place-self-center flex flex-col w-full overscroll-x-none pb-64 px-4\">\n    <div id=\"topDiv\" class=\"flex justify-end px-5\">\n      <div class=\"relative w-32 h-32 mt-8 -mb-8 mr-8\">\n        <div class=\"absolute top-3 left-0 w-full h-full flex justify-center items-center z-20\"><h1 class=\"text-4xl font-bold text-white bg-black bg-opacity-80 px-4 py-1 text-center\">Broadcast<br />Schedule</h1></div>\n        <div class=\"absolute top-3 left-0 w-full h-full flex justify-center items-center z-10\"><img src=\"/storage/images/Ping.png\" alt=\"notTV Ping\"/></div>\n      </div>\n\n    </div>\n    <Message v-if=\"appSettingStore.showFlashMessage\" :flash=\"$page.props.flash\"/>\n\n    <ScheduleGridContainer />\n\n<!--    <div class=\"ml-5 px-2 mb-2\">-->\n<!--      <span class=\"text-sm uppercase text-purple-500\">All times are listed in your timezone.</span>-->\n<!--    </div>-->\n\n<!--    <div class=\"schedule-grid\">-->\n<!--    <div class=\"header-row\">-->\n<!--      &lt;!&ndash; Time slots header &ndash;&gt;-->\n<!--      <div class=\"time-cell bg-gray-900 px-3 py-2 text-center font-bold\" v-for=\"interval in nextFourHoursWithHalfHourIntervals\" :key=\"interval.dateTime\">-->\n<!--        {{ interval.formatted }}-->\n<!--      </div>-->\n<!--    </div>-->\n<!--    </div>-->\n<!--    <ScheduleGrid />-->\n\n\n<!--    <div class=\"schedule-grid\">-->\n<!--      <div class=\"header-row\">-->\n<!--        &lt;!&ndash; Time slots header &ndash;&gt;-->\n<!--        <div class=\"time-cell bg-gray-900 px-3 py-2 text-center font-bold\" v-for=\"interval in nextFourHoursWithHalfHourIntervals\" :key=\"interval.dateTime\">-->\n<!--          {{ interval.formatted }}-->\n<!--        </div>-->\n<!--      </div>-->\n\n<!--      <div v-if=\"scheduleStore.scheduleIsLoading && scheduleStore.nextFourHoursOfContent.length === 0\"-->\n<!--            class=\"w-full flex justify-center text-center items-center\">-->\n<!--        <span class=\"loading loading-ball loading-xl text-info\"></span>-->\n<!--      </div>-->\n\n<!--      <div class=\"content-row\">-->\n<!--        &lt;!&ndash; Scheduled shows &ndash;&gt;-->\n<!--        <template v-for=\"item in nextFourHoursOfContent\" :key=\"item.id\">-->\n<!--          <div-->\n<!--              class=\"show-cell flex flex-col w-full h-full\"-->\n<!--              :class=\"getCellClasses(item.type)\"-->\n<!--              :style=\"gridPlacement(item.start_time, item.durationMinutes)\"-->\n<!--              @click=\"handleShowClick(item)\"-->\n<!--          >-->\n<!--            <div  class=\"item-content flex flex-col items-center justify-center gap-y-2 flex-grow\">-->\n<!--              <h3>{{ item.content.show?.name || 'No Show Name' }}</h3>-->\n<!--              &lt;!&ndash; Display the image if available &ndash;&gt;-->\n<!--              <SingleImage v-if=\"item.content.show?.image\"-->\n<!--                           :image=\"item.content.show?.image\"-->\n<!--                           :alt=\"item.content.show?.name\"-->\n<!--                           class=\"content-image\"/>-->\n<!--              &lt;!&ndash; Fallback placeholder if no image &ndash;&gt;-->\n<!--              <div v-else class=\"placeholder\"></div>-->\n<!--            </div>-->\n<!--          </div>-->\n<!--        </template>-->\n<!--      </div>-->\n\n\n<!--      &lt;!&ndash; Status Row &ndash;&gt;-->\n<!--      <div class=\"status-row\">-->\n<!--        &lt;!&ndash; Status for each show &ndash;&gt;-->\n<!--        <template v-for=\"(item, index) in nextFourHoursOfContent\" :key=\"`status-${item.id}`\">-->\n<!--          <div-->\n<!--              :class=\"getStatusCellClasses(index)\" :style=\"gridPlacement(item.start_time, item.durationMinutes)\"-->\n<!--          >-->\n<!--            &lt;!&ndash; Use the index to determine the status &ndash;&gt;-->\n<!--            <span v-if=\"index === 0\">NOW PLAYING</span>-->\n<!--            <span v-else-if=\"index === 1\">COMING UP NEXT</span>-->\n\n<!--          </div>-->\n<!--        </template>-->\n<!--      </div>-->\n\n\n<!--    </div>-->\n\n\n\n    <PopUpModal :id=\"`goToNowPlayingModal`\">\n      <template v-slot:header>Now Playing</template>\n      <template v-slot:main><span class=\"text-orange-500\">This modal is temporary. This will take you to the now playing show or episode page.</span>\n      </template>\n    </PopUpModal>\n    <PopUpModal :id=\"`getReminderModal`\">\n      <template v-slot:header>Set Reminder</template>\n      <template v-slot:main><span class=\"text-orange-500\">This modal is temporary. Set a reminder when this show starts and/or subscribe to the show to get all notifications when new episodes are released or the show goes live. <br /><br /><span class=\"font-semibold text-yellow-600\">NOTE: Monthly and Yearly contributors get first access to new features.</span></span>\n      </template>\n    </PopUpModal>\n\n<!--    <div class=\"bg-gray-600 rounded-lg shadow m-10 p-4\">-->\n\n\n      <TodayView/>\n<!--    </div>-->\n\n\n  </div>\n</template>\n\n<script setup>\nimport { usePageSetup } from '@/Utilities/PageSetup'\nimport { useAppSettingStore } from '@/Stores/AppSettingStore'\nimport { useScheduleStore } from '@/Stores/ScheduleStore'\nimport Message from '@/Components/Global/Modals/Messages'\nimport PopUpModal from '@/Components/Global/Modals/PopUpModal'\nimport TodayView from '@/Components/Global/Calendar/TodayView.vue'\n// import ScheduleGrid from '@/Components/Pages/Schedule/ScheduleGrid.vue'\nimport ScheduleGridContainer from '@/Components/Global/Schedule/ScheduleGridContainer.vue'\n\nusePageSetup('schedule')\n\nconst appSettingStore = useAppSettingStore()\nconst scheduleStore = useScheduleStore()\n\nlet props = defineProps({\n  can: Object,\n})\n\nfunction openModal(modalName) {\n  document.getElementById(modalName).showModal()\n}\n\n</script>\n"],"names":["dayjs","utc","timezone","_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","delegateYield","asyncGeneratorStep","gen","reject","_next","_throw","key","info","error","_asyncToGenerator","fn","self","args","arguments","apply","err","undefined","ownKeys","getOwnPropertySymbols","filter","getOwnPropertyDescriptor","_objectSpread","_defineProperty","getOwnPropertyDescriptors","defineProperties","obj","toPrimitive","String","Number","_toPrimitive","convertScheduleToTimezone","scheduleData","userStore","useUserStore","data","map","item","startTimeInUserTz","startTime","formatDateTimeFromUtcToUserTimezone","endTimeInUserTz","endTime","getUpcomingContentDates","viewingWindowStart","dates","start","add","toDate","relativeTime","duration","weekOfYear","advancedFormat","isSameOrAfter","isSameOrBefore","getTimeZone","initialState","baseTime","tz","currentHalfHour","startOf","minute","fourHoursLater","currentMonth","selectedDay","currentWeekStart","currentWeekEnd","endOf","nextFourHoursOfContent","nextFourHoursOfContentWithPlaceholders","fiveDaySixHourSchedule","todaysContent","weeklyContent","dataFetchLog","scheduleIsLoading","savingToSchedule","slotIntervalMinutes","mediumScreenSlotHours","smallScreenSlotHours","verySmallScreenSlotHours","timeSlots","timeBanners","id","useScheduleStore","defineStore","state","actions","resetAll","assign","this","setSelectedDay","day","_this","_callee","_context","fetchWeekDataIfNeeded","setSelectedDayToToday","now","changeDay","days","_this2","_callee2","currentTimeZone","currentTime","newDay","_context2","hour","shiftHours","hours","_this3","_callee3","_context3","isSame","isElevenPM","date","subtractMonth","_this4","_callee4","_context4","subtract","console","log","t0","concat","addMonth","_this5","_callee5","_context5","fetchFiveDaySixHourSchedule","_this6","_callee6","response","_context6","axios","get","userTimezone","fetchTodaysContent","_this7","_callee7","_context7","preloadWeeklyContent","_this8","_callee8","currentDate","_context8","loadWeekFromDate","_this9","_callee9","formattedDate","dayDate","fullISODate","newData","_context9","toISOString","post","format","_toConsumableArray","index","findIndex","updateFetchLogs","weekStart","weekEnd","fetchTime","existingLogIndex","lastFetch","needsDataForWeek","formatISODate","weekStartStr","weekEndStr","weekHasBeenFetched","some","logWeekStartStr","logWeekEndStr","calculateExtendedEndForUpcomingContent","checkAndFetchForUpcomingContent","_this10","_callee10","upcomingDates","fifteenMinutesAgo","_iterator","_step","_loop","_context11","_createForOfIteratorHelper","dateString","_context10","content","contentDate","lastFetchedTime","isFresh","fetchDataAndUpdateLog","t1","_this11","_callee11","_context12","_this12","_callee12","_context13","updateBaseTime","time","setBaseTime","newTime","updateNextFourHours","_this13","_callee13","_context14","updateTimeRange","setTimeSlots","prepareShowsForGrid","baseDate","roundedMinutes","second","millisecond","slotHours","appSettingStore","useAppSettingStore","isVerySmallScreen","isSmallScreen","intervalMinutes","slots","totalSlots","slotTime","shows","filterShowsForTimeRange","processedShows","calculateGridSlots","Array","isArray","showsWithStatusFlags","processShows","_this$updateColumnOcc","updateColumnOccupancy","colOccupancy","maxRowUsed","gridItems","fillGapsAndCreatePlaceholders","combinedShows","sortShowsByPosition","_this14","show","durationMinutes","warn","showStart","showEnd","isInTimeRange","isBefore","isAfter","hasStarted","firstTimeSlot","lastTimeSlot","slotIndex","slot","Math","max","endSlotIndex","span","gridStart","gridSpan","_this15","comingUpNextSet","end","nowPlaying","placeholder","comingUpNext","cols","fill","Set","gridRow","row","findAndFillGapsForSingleRow","gapStart","has","createPlaceholder","createBlankSpotPlaceholder","sort","b","priority","getters","preparedTimeBanners","timeZone","todayStart","tomorrowStart","flatMap","banner","bannerTodayStart","parseInt","split","bannerTodayEnd","clone","bannerTomorrowStart","bannerTomorrowEnd","startSlotIndex","nextFourHoursWithHalfHourIntervals","intervals","current","formatted","dateTimeString","upcomingContent","showsGroupedByStartTime","reduce","acc","itemStart","valueOf","group","selected","unix","nextSixHours","adjustedStart","dateMessage","startDay","startOfDay","isToday","isYesterday","isTomorrow","currentMonthIndex","month","currentMonthName","currentYear","year","today","viewingStart","daysInMonth","startOfCurrentMonth","endOfCurrentMonth","startOfGrid","endOfGrid","usePageSetup","pageName","videoPlayerStore","useVideoPlayerStore","currentPage","showFlashMessage","pageIsHidden","isMobile","window","innerWidth","fullPage","ott","showOttButtons","makeVideoTopRight","pageReload","location","reload","Inertia","on","event","search","shouldScrollToTop","requestAnimationFrame","topDiv","document","getElementById","scrollIntoView","behavior","scrollTo","setPrevUrl","noLayout","___CSS_LOADER_EXPORT___","module","scheduleStore","_storeToRefs","storeToRefs","ref","computed","_ref","_x","isWithinCurrentHour","startOfCurrentHour","startOfHour","endOfCurrentHour","addHours","contentStartTime","Date","start_time","isContentAvailableForHour","formatHour","getTimeSegment","hourOfDay","getHours","segment","color","watch","newValue","goToContentPage","visit","slug","formatDuration","minutes","floor","remainingMinutes","_ref2","newTimezone","oldTimezone","_x2","_x3","immediate","options","locals","props","__props","clearFlashMessage","flash","success","message","warning","route","notificationStore","useNotificationStore","intervalId","timeoutId","initialUpdateDone","currentDay","updateCurrentTime","onMounted","msUntilNextMinute","setTimeout","updateImmediately","clearInterval","setInterval","startAutoUpdateTime","onUnmounted","clearTimeout","set","_value$split$map2","_slicedToArray","initialLoadHandled","allPlaceholders","every","nextScheduledShow","find","nowPlayingShow","comingUpNextShow","formatTime","showMeridiem","remainderMinutes","gridItemStyle","style","gridColumn","statusGridItemStyle","newTimeSlots","oldTimeSlots","oldTime","_ref3","newVerySmall","newSmall","_ref4","oldVerySmall","oldSmall","watchEffect","gridColumns","numColumns","documentElement","setProperty","deep"],"sourceRoot":""}