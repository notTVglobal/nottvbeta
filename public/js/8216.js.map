{"version":3,"file":"js/8216.js","mappings":"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","sources":["webpack:///./resources/js/Stores/AdminStore.js","webpack:///./resources/js/Utilities/PageSetup.js","webpack:///./resources/js/Components/Global/Modals/Messages.vue?dfe9","webpack:///./resources/js/Components/Global/Modals/Messages.vue","webpack:///./resources/js/Components/Pages/Admin/AdminHeader.vue?239a","webpack:///./resources/js/Components/Pages/Admin/AdminHeader.vue","webpack:///./resources/js/Pages/Admin/MistServerApi.vue?7cc8","webpack:///./resources/js/Pages/Admin/MistServerApi.vue"],"sourcesContent":["import { defineStore } from 'pinia'\nimport { useNotificationStore } from '@/Stores/NotificationStore'\n\nconst initialState = () => ({\n    channels: [], // For Admin Channels page\n    items: [], // for Admin Channels DynamicModal... ExternalSource, ChannelPlaylist, MistStream\n    activeItemId: null,\n    selectedChannel: null, // The currently active item\n    currentType: '', // 'externalSource', 'channelPlaylist', 'mistStream'\n    searchTerm: '',\n    type: '',\n    modalHeader: '',\n    currentPage: 1,\n    itemsPerPage: 10,\n    currentChannelsPage: 1,\n    itemsPerChannelsPage: 7,\n    sourceSelector: {\n        source: null,\n        sourceType: null\n    },\n    firstPlaySettings: {},\n    validationErrors: {},\n    checkSendProcessing: false\n})\n\nexport const useAdminStore = defineStore('adminStore', {\n    state: initialState,\n    actions: {\n        reset() {\n            // Reset the store to its original state (clear all data)\n            Object.assign(this, initialState())\n        },\n\n        loadChannels(channels) {\n            this.channels = channels\n        },\n        setCheckSendProcessing() {\n          this.checkSendProcessing = true\n        },\n        unsetCheckSendProcessing() {\n            this.checkSendProcessing = false\n        },\n        async fetchChannels() {\n            await axios.get('/api/channels_list')\n                .then(response => {\n                    this.channels = response.data\n                })\n                .catch(error => {\n                    console.log(error)\n                })\n        },\n        async toggleChannelActiveStatus(channelId) {\n            const notificationStore = useNotificationStore();\n            try {\n                const response = await axios.post('/admin/channels/' + channelId + '/toggleChannelActive');\n                // Extract message and status from the response\n                const { message, status } = response.data;\n                // Use the status from the response for the notification\n                notificationStore.setToastNotification(message, status);\n            } catch (error) {\n                console.error(error);\n                notificationStore.setToastNotification('Failed to toggle channel status.', 'error');\n            }\n        },\n        async addChannel(name) {\n            const notificationStore = useNotificationStore();\n            try {\n                const response = await axios.post('/admin/channels/add', {'name': name});\n\n                if (response.data.success) {\n                    // Operation was a success\n                    await this.fetchChannels();\n                    notificationStore.setToastNotification(response.data.message, 'success');\n                } else {\n                    // Handle logical errors even when the HTTP response was OK\n                    // Assuming 'status' and 'message' are part of the error response\n                    const { message, status } = response.data;\n                    let errorMessage = 'Failed to add channel due to a server error.';\n\n                    if (status === 'error' && message && message.fallbackMessages) {\n                        // Construct a more detailed error message based on validation feedback\n                        const validationMessages = Object.values(message.fallbackMessages)\n                            .map(msgs => msgs.join(' ')) // Join messages if there are multiple for one field\n                            .join('; '); // Separate field messages with semicolons\n\n                        errorMessage = validationMessages || errorMessage;\n                    }\n\n                    notificationStore.setToastNotification(errorMessage, 'error');\n                }\n            } catch (error) {\n                console.error(error);\n                notificationStore.setToastNotification('Failed to add channel due to a network or server error.', 'error');\n            }\n        },\n        async updateChannel(channelId, newName) {\n            const notificationStore = useNotificationStore();\n            try {\n                const response = await axios.post(`/admin/channels/${channelId}`, {'name': newName});\n\n                if (response.data.success) {\n                    // Operation was a success\n                    await this.fetchChannels();\n                    notificationStore.setToastNotification(response.data.message, 'success');\n                } else {\n                    // Handle logical errors even when the HTTP response was OK\n                    // Assuming 'status' and 'message' are part of the error response\n                    const { message, status } = response.data;\n                    let errorMessage = 'Failed to add channel due to a server error.';\n\n                    if (status === 'error' && message && message.fallbackMessages) {\n                        // Construct a more detailed error message based on validation feedback\n                        const validationMessages = Object.values(message.fallbackMessages)\n                            .map(msgs => msgs.join(' ')) // Join messages if there are multiple for one field\n                            .join('; '); // Separate field messages with semicolons\n\n                        errorMessage = validationMessages || errorMessage;\n                    }\n\n                    notificationStore.setToastNotification(errorMessage, 'error');\n                }\n            } catch (error) {\n                console.error(error);\n                notificationStore.setToastNotification('Failed to add channel due to a network or server error.', 'error');\n            }\n        },\n        setSelectedChannel(item) {\n            this.selectedChannel = item\n        },\n        setCurrentType(type) {\n            this.currentType = type\n            this.modalHeader = type + ' list'\n        },\n        clearSelectedChannelAndItems() {\n            this.selectedChannel = null\n            this.items = []\n            this.activeItemId = null\n            this.currentType = ''\n            this.modalHeader = ''\n            this.currentPage = 1\n            this.itemsPerPage = 10\n            this.searchTerm = ''\n        },\n        // async searchItems(type, searchTerm = '') {\n        //     this.currentType = type;\n        //     this.searchTerm = searchTerm;\n        //     // Assuming you have a function to perform the fetch; adjust accordingly\n        //     const response = await fetch(`/admin/channels/search/${type}?search=${searchTerm}`);\n        //     const data = await response.json();\n        //     this.items = data.items;\n        // },\n        async fetchItems(type) {\n            this.currentType = type\n            if (this.currentType === 'mistStream') {\n                // retrieve all mistStreams paginated.\n                // Can Vue search through the items?\n                const response = await fetch(`/mistStreams`)\n                this.items = await response.json()\n                if (this.selectedChannel.mist_stream_id) {\n                    this.activeItemId = this.selectedChannel.mist_stream_id\n                }\n            } else if (this.currentType === 'externalSource') {\n                // retrieve all externalSources\n                const response = await fetch(`/externalSources`)\n                this.items = await response.json()\n                if (this.selectedChannel.channel_external_source_id) {\n                    this.activeItemId = this.selectedChannel.channel_external_source_id\n                }\n            } else if (this.currentType === 'channelPlaylist') {\n                // retrieve all channelPlaylists\n                const response = await fetch(`/channelPlaylists`)\n                this.items = await response.json()\n                if (this.selectedChannel.channel_playlist_id) {\n                    this.activeItemId = this.selectedChannel.channel_playlist_id\n                }\n            }\n            // Assuming you have a function to perform the fetch; adjust accordingly\n            // const response = await fetch(`/admin/channels/search/${type}?search=${searchTerm}`);\n            // const data = await response.json();\n            // this.items = data.items;\n        },\n        async updateActiveItemId(id) {\n            this.activeItemId = id\n            if (this.currentType === 'mistStream') {\n                await this.setMistStream(this.selectedChannel, id)\n            } else if (this.currentType === 'channelPlaylist') {\n                await this.setChannelPlaylist(this.selectedChannel, id)\n            } else if (this.currentType === 'externalSource') {\n                await this.setExternalSource(this.selectedChannel, id)\n            }\n        },\n        // Add more actions as needed\n        // this next one should probably go in AdminChannelStore\n        async setPlaybackPriorityType(channel, priorityType) {\n            const dataToSend = {setPriorityType: priorityType}\n            try {\n                const response = await axios.post(`/admin/channels/${channel.id}/setPlaybackPriorityType`, dataToSend)\n                if (response.data.success) {\n                    this.fetchChannels()\n                    // Find the index of the updated channel in the channels array\n                    const index = this.channels.findIndex(c => c.id === channel.id)\n                    if (index !== -1) {\n                        // Update the channel in the channels array with the updated data\n                        this.channels[index] = response.data.channel\n                    }\n                }\n            } catch (error) {\n                console.error(error)\n            }\n        },\n        async setMistStream(channel, mistStreamId) {\n            const dataToSend = {mistStreamId: mistStreamId}\n            try {\n                const response = await axios.post(`/admin/channels/${channel.id}/setMistStream`, dataToSend)\n                if (response.data.success) {\n                    this.fetchChannels()\n                    // Find the index of the updated channel in the channels array\n                    const index = this.channels.findIndex(c => c.id === channel.id)\n                    if (index !== -1) {\n                        // Update the channel in the channels array with the updated data\n                        this.channels[index] = response.data.channel\n                    }\n                }\n            } catch (error) {\n                console.error(error)\n            }\n        },\n        async setChannelPlaylist(channel, channelPlaylistId) {\n            const dataToSend = {channelPlaylistId: channelPlaylistId}\n            try {\n                const response = await axios.post(`/admin/channels/${channel.id}/setChannelPlaylist`, dataToSend)\n                if (response.data.success) {\n                    this.fetchChannels()\n                    // Find the index of the updated channel in the channels array\n                    const index = this.channels.findIndex(c => c.id === channel.id)\n                    if (index !== -1) {\n                        // Update the channel in the channels array with the updated data\n                        this.channels[index] = response.data.channel\n                    }\n                }\n            } catch (error) {\n                console.error(error)\n            }\n        },\n        async setExternalSource(channel, externalSourceId) {\n            const dataToSend = {mistStreamId: externalSourceId}\n            try {\n                const response = await axios.post(`/admin/channels/${channel.id}/setExternalSource`, dataToSend)\n                if (response.data.success) {\n                    this.fetchChannels()\n                    // Find the index of the updated channel in the channels array\n                    const index = this.channels.findIndex(c => c.id === channel.id)\n                    if (index !== -1) {\n                        // Update the channel in the channels array with the updated data\n                        this.channels[index] = response.data.channel\n                    }\n                }\n            } catch (error) {\n                console.error(error)\n            }\n        },\n        nextPage() {\n            const totalModalPages = Math.ceil(this.items.length / this.itemsPerPage)\n            if (this.currentPage < totalModalPages) this.currentPage++\n        },\n        prevPage() {\n            if (this.currentPage > 1) this.currentPage--\n        },\n        setPage(page) {\n            this.currentPage = page\n        },\n        nextChannelsPage() {\n            const totalModalPages = Math.ceil(this.channels.length / this.itemsPerChannelsPage)\n            if (this.currentChannelsPage < totalModalPages) this.currentChannelsPage++\n        },\n        prevChannelsPage() {\n            if (this.currentChannelsPage > 1) this.currentChannelsPage--\n        },\n        setChannelsPage(page) {\n            this.currentChannelsPage = page\n        },\n        ////// FIRST PLAY SETTINGS\n        /////////////////////////// admin/update-first-play-settings\n        async fetchFirstPlaySettings() {\n            const notificationStore = useNotificationStore();\n            try {\n                const response = await axios.post(`/admin/fetch-first-play-settings`);\n                if (response.data.success) {\n                    // Operation was a success\n                    this.firstPlaySettings = response.data.firstPlaySettings\n                    notificationStore.setToastNotification(response.data.message, 'success', 1500);\n                } else {\n                    // Handle logical errors even when the HTTP response was OK\n                    // Assuming 'status' and 'message' are part of the error response\n                    const { message, status } = response.data;\n                    let errorMessage = 'Failed to fetch First Play Settings due to a server error.';\n\n                    if (status === 'error' && message && message.fallbackMessages) {\n                        // Construct a more detailed error message based on validation feedback\n                        const validationMessages = Object.values(message.fallbackMessages)\n                            .map(msgs => msgs.join(' ')) // Join messages if there are multiple for one field\n                            .join('; '); // Separate field messages with semicolons\n\n                        errorMessage = validationMessages || errorMessage;\n                    }\n\n                    notificationStore.setToastNotification(errorMessage, 'error');\n                }\n            } catch (error) {\n                console.error(error);\n                notificationStore.setToastNotification('Failed to fetch First Play Settings due to a network or server error.', 'error');\n            }\n        },\n        async updateFirstPlaySettings() {\n            const notificationStore = useNotificationStore();\n\n            try {\n                const response = await axios.patch('/admin/update-first-play-settings', this.firstPlaySettings);\n\n                if (!response.data.success) {\n                    // This block might not be necessary if your server correctly uses HTTP status codes for errors\n                    this.validationErrors = response.data.errors || {};\n                    notificationStore.setToastNotification(response.data.message, 'error');\n                    return; // Exit early since we've handled the error case\n                }\n\n                // Operation was a success\n                this.firstPlaySettings = response.data.firstPlaySettings;\n                this.validationErrors = {}; // Clear any existing validation errors\n                notificationStore.setToastNotification(response.data.message, 'success', 1500);\n            } catch (error) {\n                // Properly handle the error response\n                if (error.response && error.response.data) {\n                    // Server responded with a non-2xx status code\n                    console.log(\"Error response data:\", error.response.data);\n                    this.validationErrors = error.response.data.errors || {};\n                    const errorMessage = error.response.data.message || 'Failed to save First Play Settings due to a network or server error.';\n                    notificationStore.setToastNotification(errorMessage, 'error');\n                } else {\n                    // The request was made but no response was received or other errors occurred\n                    notificationStore.setToastNotification('Failed to save First Play Settings due to a network or server error.', 'error');\n                }\n            }\n        },\n        handleErrors(data) {\n            const notificationStore = useNotificationStore();\n            let errorMessage = 'Failed to save First Play Settings due to a server error.';\n\n            if (data.status === 'error') {\n                if (data.errors) {\n                    // Directly use the validation errors from the server response\n                    this.validationErrors = data.errors;\n                    errorMessage = \"Please check your input.\";\n                } else if (data.message) {\n                    // Use the message provided by the server as the error message\n                    errorMessage = data.message;\n                }\n\n                notificationStore.setToastNotification(errorMessage, 'error');\n            }\n        },\n    },\n\n    // Getters (if needed)\n    getters: {\n        filteredItems: (state) => state.items, // Placeholder, adjust if you need actual filtering\n        currentItem: (state) => state.items.find((item) => item.id === state.activeItem),\n        // setHeader: (state) => state.modalHeader = state.currentType + ' list',\n        paginatedItems: (state) => {\n            const start = (state.currentPage - 1) * state.itemsPerPage\n            const end = start + state.itemsPerPage\n            return state.items.slice(start, end)\n        },\n        paginatedChannels: (state) => {\n            const start = (state.currentChannelsPage - 1) * state.itemsPerChannelsPage\n            const end = start + state.itemsPerChannelsPage\n            return state.channels.slice(start, end)\n        },\n        totalModalPages(state) {\n            return Math.ceil(state.items.length / state.itemsPerPage)\n        },\n        totalChannelsPages(state) {\n            return Math.ceil(state.channels.length / state.itemsPerChannelsPage)\n        },\n        // Getter to count active channels\n        activeChannelsCount: (state) => {\n            // Use Array.prototype.filter to keep only items with 'active' true,\n            // then use the length property to get the count\n            return state.channels.filter(channel => channel.active).length;\n        },\n    },\n})\n","import { onBeforeMount, onMounted } from 'vue'\nimport { useUserStore } from \"@/Stores/UserStore\"\nimport { useAppSettingStore } from \"@/Stores/AppSettingStore\"\nimport { useVideoPlayerStore } from \"@/Stores/VideoPlayerStore\"\nimport { Inertia } from '@inertiajs/inertia'\n\nexport function usePageSetup(pageName) {\n    const userStore = useUserStore()\n    const appSettingStore = useAppSettingStore()\n    const videoPlayerStore = useVideoPlayerStore()\n\n    appSettingStore.currentPage = pageName\n    appSettingStore.showFlashMessage = true\n    appSettingStore.pageIsHidden = false\n\n    if (userStore.isMobile || window.innerWidth < 1024 || appSettingStore.fullPage) {\n        appSettingStore.ott = 0;\n    } else {\n        appSettingStore.ott = 1;\n        appSettingStore.showOttButtons = true;\n    }\n\n    videoPlayerStore.makeVideoTopRight()\n\n    if (appSettingStore.pageReload) {\n        appSettingStore.pageReload = false\n        window.location.reload(true);\n    }\n    // Check if the URL contains query strings\n\n\n    // Only scroll into view if there are no query strings\n\n        // const topDiv = document.getElementById(\"topDiv\")\n        // if (topDiv) {\n        //     topDiv.scrollIntoView()\n        // }\n        Inertia.on('navigate', (event) => {\n            if (userStore.isMobile || window.innerWidth < 1024 || appSettingStore.fullPage) {\n                appSettingStore.ott = 0;\n            } else {\n                appSettingStore.ott = 1;\n            }\n            const hasQueryStrings = window.location.search !== '';\n            if (!hasQueryStrings || appSettingStore.shouldScrollToTop) {\n                requestAnimationFrame(() => {\n                    const topDiv = document.getElementById(\"topDiv\");\n                    if (topDiv) {\n                        topDiv.scrollIntoView({behavior: 'auto'});\n                    } else {\n                        window.scrollTo(0, 0);\n                    }\n                });\n            }\n            appSettingStore.shouldScrollToTop = false;\n        })\n    // Only update if we're not already on this page to avoid overwriting with the current URL\n    appSettingStore.setPrevUrl()\n    appSettingStore.showOttButtons = true\n    appSettingStore.noLayout = false\n\n    // Inertia.reload()\n\n}\n","import script from \"./Messages.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Messages.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n  <div class=\"mx-4 my-4\">\n    <div class=\"alert alert-info mt-4\"\n         v-if=\"props.flash.message\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" class=\"stroke-current shrink-0 w-6 h-6\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n              d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"></path>\n      </svg>\n      <span>{{ props.flash.message }}</span>\n      <button class=\"text-xs ml-12\" @click=\"clearFlashMessage\"> Close</button>\n    </div>\n    <div class=\"alert alert-success mt-4 mx-3\"\n         v-if=\"props.flash.success\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"stroke-current shrink-0 h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n              d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"/>\n      </svg>\n      <span>{{ props.flash.success }}</span>\n      <button class=\"text-xs ml-12\" @click=\"clearFlashMessage\"> Close</button>\n    </div>\n    <div class=\"alert alert-warning mt-4 mx-3\"\n         v-if=\"props.flash.warning\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"stroke-current shrink-0 h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n              d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z\"/>\n      </svg>\n      <span>{{ props.flash.warning }}</span>\n      <button class=\"text-xs ml-12\" @click=\"clearFlashMessage\"> Close</button>\n    </div>\n    <div class=\"alert alert-error mt-4 mx-3\"\n         v-if=\"props.flash.error\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"stroke-current shrink-0 h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n              d=\"M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z\"/>\n      </svg>\n      <span>{{ props.flash.error }}</span>\n      <button class=\"text-xs ml-12\" @click=\"clearFlashMessage\"> Close</button>\n    </div>\n  </div>\n\n</template>\n\n<script setup>\nimport { Inertia } from \"@inertiajs/inertia\"\nimport { computed } from \"vue\"\nimport { useAppSettingStore } from \"@/Stores/AppSettingStore\"\n\nconst appSettingStore = useAppSettingStore()\n\nappSettingStore.showFlashMessage = true\n\nlet props = defineProps({\n  flash: Object,\n\n})\n\nconst messageType = computed(() => ({\n  'text-green-700 bg-green-100 dark:bg-green-200 dark:text-green-800': props.flash.success,\n  'text-blue-700 bg-blue-100 dark:bg-blue-200 dark:text-blue-800': props.flash.message,\n  'text-orange-700 bg-orange-100 dark:bg-orange-200 dark:text-orange-800': props.flash.warning,\n  'text-red-700 bg-red-100 dark:bg-red-200 dark:text-red-800': props.flash.error,\n}))\n\nconst clearFlashMessage = async () => {\n  await Inertia.post(route('flash.clear'));\n  Inertia.reload();\n};\n</script>\n","import script from \"./AdminHeader.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./AdminHeader.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n  <header>\n    <div class=\"flex justify-between my-3\">\n      <div class=\"mb-4 relative\">\n        <h1 class=\"text-3xl font-semibold inline-block\">\n          <slot/>\n        </h1>\n        <span v-if=\"displayBadges\" class=\"text-white font-semibold badge badge-success absolute -top-2 -right-10 flex items-center justify-center min-w-[2rem] h-[2rem] rounded-full\">{{ (badgePrimaryNumber ?? 0) > 99 ? '99+' : (badgePrimaryNumber ?? 0) }}</span>\n        <span v-if=\"displayBadges\" class=\"font-semibold badge badge-warning absolute -top-2 -right-20 flex items-center justify-center min-w-[2rem] h-[2rem] rounded-full\">{{ (badgeSecondaryNumber ?? 0) > 99 ? '99+' : (badgeSecondaryNumber ?? 0) }}</span>\n\n      </div>\n      <div>\n        <div class=\"flex flex-wrap-reverse justify-end gap-2\">\n          <Link :href=\"`/admin/settings`\">\n            <button\n                class=\"px-4 py-2 text-white bg-blue-600 hover:bg-blue-500 rounded-lg\"\n            >Admin Settings\n            </button>\n          </Link>\n        </div>\n      </div>\n    </div>\n  </header>\n\n</template>\n\n<script setup>\nimport { reactive } from 'vue'\n\nconst props = defineProps({\n  displayBadges: Boolean,\n  badgePrimaryNumber: Number,\n  badgeSecondaryNumber: Number,\n});\n\nconst defaultProps = {\n  displayBadges: false,\n};\n\nconst finalProps = reactive({ ...defaultProps, ...props });\n\n</script>\n","import script from \"./MistServerApi.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./MistServerApi.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n\n  <Head title=\"MistServer API\"/>\n  <div class=\"place-self-center flex flex-col gap-y-3\">\n    <div id=\"topDiv\" class=\"bg-white text-black p-5 mb-10\">\n\n      <Message v-if=\"appSettingStore.showFlashMessage\" :flash=\"$page.props.flash\"/>\n\n      <AdminHeader>MistServer API</AdminHeader>\n      <div>Processing: {{ adminStore.checkSendProcessing }}</div>\n      <div class=\"flex justify-between\">\n        <div><span class=\"font-semibold\">{{ videoPlayerStore.status }}</span>\n          <div class=\"\">Status: </div>\n          <span v-show=\"adminStore.checkSendProcessing\" class=\"loading loading-spinner loading-xs text-blue-700\"></span>\n          <button v-for=\"server in serverTypes\" :key=\"server.type\"\n                  class=\"ml-2 py-2 my-2 px-4 text-white bg-orange-800 hover:bg-orange-500 mr-2 rounded-xl\"\n                  @click.prevent=\"checkMistApiSendFunction(server.type)\">\n            {{ server.name }}\n          </button>\n\n          <button class=\"ml-2 py-2 my-2 px-4 text-white bg-orange-800 hover:bg-orange-500 mr-2 rounded-xl\"\n                  @click.prevent=\"getStatus\">\n            Get Status\n          </button>\n\n        </div>\n        <div v-if=\"videoPlayerStore.status === 'OK'\" class=\"\">\n\n        </div>\n\n      </div>\n\n\n      <div>\n        <h2>API Response</h2>\n        <!-- Displaying as a string -->\n        <pre>{{ JSON.stringify(responseJson, null, 2) }}</pre>\n\n        <!-- Or iterating over properties -->\n        <!-- Use this as a starting point for displaying the MistServer responses -->\n        <!-- Note: We have another iteration version below -->\n        <div hidden v-if=\"responseJson\">\n          <div v-for=\"(value, key) in responseJson\" :key=\"key\">\n            {{ key }}: {{ value }}\n          </div>\n        </div>\n      </div>\n\n\n\n      <div v-if=\"videoPlayerStore.status === 'CHALL'\" class=\"mb-8\">\n        <div class=\"py-3 px-4 mb-4 bg-orange-800 text-white rounded\">MistServer needs to be authenticated</div>\n\n        <div class=\"font-semibold text-2xl px-2\">\n          Connect to the MistServer\n        </div>\n\n        <div class=\"my-3 pl-2 text-sm w-1/2\">If the MistServer Status will either be OK, CHALL, NOACC or ACC_MADE.\n          If it's \"CHALL\" then you need to re-authenticate with the username and password.\n        </div>\n\n        <form @submit.prevent class=\"mt-2 pl-2\">\n\n          <div class=\"mt-2\">Challenge:</div>\n          <input type=\"text\" name=\"challenge\" id=\"challenge\" v-model=\"videoPlayerStore.challenge\" disabled/>\n\n          <div class=\"font-semibold mt-2\">MistServer Username:</div>\n          <input class=\"mb-2\" type=\"text\" name=\"username\" v-model=\"videoPlayerStore.mistUsername\"/>\n\n          <div class=\"font-semibold mt-2\">MistServer Password:</div>\n          <input type=\"password\" name=\"password\" v-model=\"form.password\"/>\n\n          <div class=\"mb-4 w-1/2 text-sm\"> Credit to Jeff Mott for his work on a pure JS implementation of the MD5\n            algorithm.\n            You can find the npm package <a href=\"https://www.npmjs.com/package/md5\" target=\"_blank\"\n                                            class=\"text-blue-800 hover:text-gray-500\">here.</a></div>\n\n          <button class=\"ml-2 py-2 px-4 text-white bg-green-800 hover:bg-green-500 rounded-xl\"\n                  @click.prevent=\"authenticateMistServer\">\n            Authenticate\n          </button>\n\n        </form>\n\n      </div>\n\n      <div v-if=\"videoPlayerStore.status === 'OK'\" class=\"mb-8\">\n        <div class=\"py-3 px-4 mb-4 bg-green-900 text-white rounded\">MistServer is connected</div>\n\n        <div class=\"grid grid-cols-1 md:grid-cols-3\">\n          <div class=\"col-span-1\">\n            <div class=\"flex flex-col space-y-2\">\n\n              <button class=\"ml-2 py-2 px-4 text-white bg-blue-800 hover:bg-blue-500 rounded-xl\"\n                      @click.prevent=\"checkUpdates\">\n                Check for Updates\n              </button>\n\n              <button class=\"ml-2 py-2 px-4 text-white bg-blue-800 hover:bg-blue-500 rounded-xl\"\n                      @click.prevent=\"getCapabilities\">\n                Get Server Capabilities\n              </button>\n\n              <button class=\"ml-2 py-2 px-4 text-white bg-blue-800 hover:bg-blue-500 mr-2 rounded-xl\"\n                      @click.prevent=\"getTotals\">\n                Get Totals\n              </button>\n\n              <button class=\"ml-2 py-2 px-4 text-white bg-blue-800 hover:bg-blue-500 mr-2 rounded-xl\"\n                      @click.prevent=\"getClients\">\n                Get Clients\n              </button>\n\n              <button class=\"ml-2 py-2 px-4 text-white bg-blue-800 hover:bg-blue-500 rounded-xl\"\n                      @click.prevent=\"getActiveStreams\">\n                Get Active Streams\n              </button>\n\n              <button class=\"ml-2 py-2 px-4 text-white bg-blue-800 hover:bg-blue-500 rounded-xl\"\n                      @click.prevent=\"getLog\">\n                Get Log\n              </button>\n\n              <button class=\"ml-2 py-2 px-4 text-white bg-orange-800 hover:bg-orange-500 rounded-xl\"\n                      @click.prevent=\"clearLog\">\n                Clear Log\n              </button>\n\n              <button class=\"ml-2 py-2 px-4 text-white bg-blue-800 hover:bg-blue-500 rounded-xl\"\n                      @click.prevent=\"browseRecordings\">\n                Recordings\n              </button>\n\n            </div>\n          </div>\n\n\n          <div class=\"md:col-span-2 pl-6\">\n            <!--                        <div v-if=\"videoPlayer.mistStatus\">-->\n            <!--                            <div class=\"mt-2\">Returned data:</div>-->\n            <!--                            <div class=\"\">-->\n            <!--                                {{videoPlayer.apiResponse}}-->\n            <!--                            </div>-->\n            <!--                        </div>-->\n            <div class=\"mt-2 text-xs uppercase\">Returned data:</div>\n\n            <div v-if=\"videoPlayerStore.mistDisplay === 'updates'\">\n              <table>\n                <thead>\n                <td></td>\n                <td></td>\n                <td></td>\n                <td></td>\n                <td></td>\n                </thead>\n                <tr v-for=\"update in videoPlayerStore.apiResponse.update\" :key=\"update.item\">\n                  <td>{{ update[0] }}</td>\n                  <td>{{ update[1] }}</td>\n                  <td>{{ update[2] }}</td>\n                  <td>{{ update[3] }}</td>\n                  <td>{{ update[4] }}</td>\n                </tr>\n              </table>\n            </div>\n\n            <div v-if=\"videoPlayerStore.mistDisplay === 'capabilities'\">\n              <div class=\"mt-2 font-semibold\">CPU</div>\n              <table>\n                <tr v-for=\"(value, name) in videoPlayerStore.apiResponse.capabilities.cpu[0]\" :key=\"name\">\n                  <td>{{ name }}</td>\n                  <td>{{ value }}</td>\n                </tr>\n              </table>\n              <div class=\"mt-2 font-semibold\">Load</div>\n              <table>\n                <tr v-for=\"(value, name) in videoPlayerStore.apiResponse.capabilities.load\" :key=\"name\">\n                  <td>{{ name }}</td>\n                  <td>{{ value }}</td>\n                </tr>\n              </table>\n              <div class=\"mt-2 font-semibold\">Mem</div>\n              <table>\n                <tr v-for=\"(value, name) in videoPlayerStore.apiResponse.capabilities.mem\" :key=\"name\">\n                  <td>{{ name }}</td>\n                  <td>{{ value }}</td>\n                </tr>\n              </table>\n            </div>\n\n            <div v-if=\"videoPlayerStore.mistDisplay === 'totals'\">\n\n              <table>\n                <thead>\n                <td>{{ videoPlayerStore.apiResponse.totals.fields[0] }}</td>\n                <td>{{ videoPlayerStore.apiResponse.totals.fields[1] }}</td>\n                <td>{{ videoPlayerStore.apiResponse.totals.fields[2] }}</td>\n                <td>{{ videoPlayerStore.apiResponse.totals.fields[3] }}</td>\n                <td>{{ videoPlayerStore.apiResponse.totals.fields[4] }}</td>\n                <td>{{ videoPlayerStore.apiResponse.totals.fields[5] }}</td>\n                <td>{{ videoPlayerStore.apiResponse.totals.fields[6] }}</td>\n                </thead>\n                <tr v-for=\"total in videoPlayerStore.apiResponse.totals.data.slice().reverse()\" :key=\"total.item\">\n                  <td>{{ total[0] }}</td>\n                  <td>{{ total[1] }}</td>\n                  <td>{{ total[2] }}</td>\n                  <td>{{ total[3] }}</td>\n                  <td>{{ total[4] }}</td>\n                  <td>{{ total[5] }}</td>\n                  <td>{{ total[6] }}</td>\n                </tr>\n              </table>\n            </div>\n\n            <div v-if=\"videoPlayerStore.mistDisplay === 'clients'\">\n\n              <table>\n                <thead>\n                <td>{{ videoPlayerStore.apiResponse.clients.fields[0] }}</td>\n                <td>{{ videoPlayerStore.apiResponse.clients.fields[1] }}</td>\n                <td>{{ videoPlayerStore.apiResponse.clients.fields[2] }}</td>\n                <td>{{ videoPlayerStore.apiResponse.clients.fields[3] }}</td>\n                <td>{{ videoPlayerStore.apiResponse.clients.fields[4] }}</td>\n                <td>{{ videoPlayerStore.apiResponse.clients.fields[5] }}</td>\n                <td>{{ videoPlayerStore.apiResponse.clients.fields[6] }}</td>\n                <td>{{ videoPlayerStore.apiResponse.clients.fields[7] }}</td>\n                <td>{{ videoPlayerStore.apiResponse.clients.fields[8] }}</td>\n                <td>{{ videoPlayerStore.apiResponse.clients.fields[9] }}</td>\n                <td>{{ videoPlayerStore.apiResponse.clients.fields[10] }}</td>\n                <td>{{ videoPlayerStore.apiResponse.clients.fields[11] }}</td>\n                <td>{{ videoPlayerStore.apiResponse.clients.fields[12] }}</td>\n                <td>{{ videoPlayerStore.apiResponse.clients.fields[13] }}</td>\n                <td>time</td>\n                </thead>\n                <tr v-for=\"client in videoPlayerStore.apiResponse.clients.data\" :key=\"client.item\">\n                  <td>{{ client[0] }}</td>\n                  <td>{{ client[1] }}</td>\n                  <td>{{ client[2] }}</td>\n                  <td>{{ client[3] }}</td>\n                  <td>{{ client[4] }}</td>\n                  <td>{{ client[5] }}</td>\n                  <td>{{ client[6] }}</td>\n                  <td>{{ client[7] }}</td>\n                  <td>{{ client[8] }}</td>\n                  <td>{{ client[9] }}</td>\n                  <td>{{ client[10] }}</td>\n                  <td>{{ client[11] }}</td>\n                  <td>{{ client[12] }}</td>\n                  <td>{{ client[13] }}</td>\n                  <td>{{ client[14] }}</td>\n                </tr>\n              </table>\n            </div>\n\n            <div v-if=\"videoPlayerStore.mistDisplay === 'active_streams'\">\n\n              <table>\n                <thead class=\"font-semibold mb-2\">\n                <td>Stream Name</td>\n                </thead>\n                <tr v-for=\"stream in videoPlayerStore.apiResponse.active_streams\" :key=\"stream.item\">\n                  <td>{{ stream }}</td>\n\n                </tr>\n              </table>\n            </div>\n\n            <div v-if=\"videoPlayerStore.mistDisplay === 'log'\">\n\n              <table>\n                <tr v-for=\"log in videoPlayerStore.apiResponse.log\" :key=\"log.item\">\n                  <td>{{ log[0] }}</td>\n                  <td>{{ log[1] }}</td>\n                  <td>{{ log[2] }}</td>\n                  <td>{{ log[3] }}</td>\n                </tr>\n              </table>\n            </div>\n\n            <div v-if=\"videoPlayerStore.mistDisplay === 'recordings'\">\n\n              <table>\n                <tr v-for=\"log in videoPlayerStore.apiResponse.log\" :key=\"log.item\">\n                  <td>{{ log[0] }}</td>\n                  <td>{{ log[1] }}</td>\n                  <td>{{ log[2] }}</td>\n                  <td>{{ log[3] }}</td>\n                </tr>\n              </table>\n            </div>\n\n          </div>\n\n\n        </div>\n\n      </div>\n\n    </div>\n  </div>\n\n</template>\n\n<script setup>\nimport { ref, reactive, computed, onMounted } from 'vue'\nimport { usePageSetup } from '@/Utilities/PageSetup'\nimport { useAppSettingStore } from '@/Stores/AppSettingStore'\nimport { useAdminStore } from '@/Stores/AdminStore'\nimport { useVideoPlayerStore } from '@/Stores/VideoPlayerStore'\nimport { useStreamStore } from '@/Stores/StreamStore'\nimport AdminHeader from '@/Components/Pages/Admin/AdminHeader'\nimport Message from '@/Components/Global/Modals/Messages'\n\nusePageSetup('mistServerApi')\n\nconst appSettingStore = useAppSettingStore()\nconst adminStore = useAdminStore()\nconst videoPlayerStore = useVideoPlayerStore()\nconst streamStore = useStreamStore()\n\nvideoPlayerStore.apiActiveStreams = null\nvideoPlayerStore.mistStatus = false\n\nlet props = defineProps({\n  apiReturn: Object,\n  message: ref(String),\n  mistNewHashedPassword: ref(String),\n})\n\nlet form = reactive({\n  challenge: videoPlayerStore.challenge,\n  status: videoPlayerStore.status,\n  username: '',\n  password: '',\n})\n\nvideoPlayerStore.mistUsername = ''\nform.password = ''\n\nconst password = ref('')\n\nlet md5 = require('md5')\n\n\n////////////////////  MIST SERVER ADDRESS //////////////////////////////\n// Keep this here to change which MistServer is used for testing purposes\n//\n// let mistAddress = 'http://localhost:4242/api'\n// let mistAddress = 'https://beta-staging.not.tv/mistserver/api'\n// let mistAddress = 'https://mist.not.tv/mistinterface'\n// let mistAddress = 'http://10.124.0.3:4242/api'\nlet mistAddress = 'http://localhost:4242/api'\n// let mistAddress = 'http://mist.nottv.io:4242/api'\n// let mistAddressWs = 'ws://mist.nottv.io:4242/ws'\n//\nconst mistServerUri = ref('')\n\n///////////////////////////////////////////////////////////////////////\n\nasync function getMistServerUri() {\n  console.log('get MistServer URI')\n  await axios.get('/mist-server/uri')\n      .then(response => {\n        mistServerUri.value = response.data\n        console.log('MistServer URI: ' + mistServerUri.value)\n        return response.data\n      })\n      .catch(error => {\n        console.log(error)\n      })\n}\n\nconst responseJson = ref(null);\nconst isError = computed(() => {\n  // Check if responseJson is an error object\n  // This is a basic check, you might need to adjust it based on your actual error object's structure\n  isError.value = true\n  adminStore.unsetCheckSendProcessing()\n  return responseJson.value && responseJson.value.message && typeof responseJson.value.message === 'string';\n});\n\nconst serverTypes = ref([\n  { name: 'Check Push Server', type: 'push' },\n  { name: 'Check Playback Server', type: 'playback' },\n  { name: 'Check Vod Server', type: 'vod' },\n  { name: 'Check Recording Server', type: 'recording' }\n]);\n\nconst checkMistApiSendFunction = async(serverType) => {\n  responseJson.value = null\n  await checkSend(serverType)\n}\n\nconst checkSend = async(serverType) => {\n  adminStore.setCheckSendProcessing()\n  await axios.post('/mist-server/check-send', {serverType: serverType /* additional data if any */})\n      .then(response => {\n        console.log('Response:', response)\n        responseJson.value = response.data;\n        adminStore.unsetCheckSendProcessing()\n      })\n      .catch(error => {\n        console.error('Error:', error)\n        responseJson.value = `Error: ${error.response.data.message || 'Request failed'} with status code ${error.response.status}`;\n        responseJson.value.error = true\n        adminStore.unsetCheckSendProcessing()\n      })\n  console.log('Checked MistServerService send() with serverType:', serverType)\n}\n\n\nconst getStatus = async() => {\n  responseJson.value = null\n  adminStore.setCheckSendProcessing()\n  const mistUri = await getMistServerUri()\n  await axios.get(mistAddress)\n      .then(response => {\n        videoPlayerStore.apiRequest = response.data\n        videoPlayerStore.challenge = videoPlayerStore.apiRequest.authorize.challenge\n        videoPlayerStore.status = videoPlayerStore.apiRequest.authorize.status\n        adminStore.unsetCheckSendProcessing()\n      })\n      .catch(error => {\n        console.log(error)\n        adminStore.unsetCheckSendProcessing()\n      })\n  console.log('get API')\n\n}\n\n// The Websocket connection will give us near real-time\n// info from the server.\n//\n// Create the header for the MistServer WS API Request\n// const mistWsHeader = {\n//     headers: {\n//         \"Authorization\": \"json \"+AuthenticationGoesHere,\n//     },\n// };\n\nasync function authenticateMistServer() {\n  let hashedPassword = md5(form.password)\n  console.log('Hashed password: ' + hashedPassword)\n  let authReturn = md5(hashedPassword + videoPlayerStore.challenge)\n  videoPlayerStore.mistPassword = authReturn\n  console.log('Final hashed password: ' + authReturn)\n  await axios.get(mistAddress + '?command=%7B%0A%22authorize%22%3A%20%7B%0A%22username%22%3A%20%22' + videoPlayerStore.mistUsername + '%22,%0A%22password%22%3A%20%22' + authReturn + '%22%0A%7D%0A%7D')\n      .then(response => {\n        videoPlayerStore.apiRequest = response.data\n        videoPlayerStore.challenge = videoPlayerStore.apiRequest.authorize.challenge\n        videoPlayerStore.status = videoPlayerStore.apiRequest.authorize.status\n        console.log(response.data)\n      })\n      .catch(error => {\n        console.log(error)\n      })\n  console.log('mistServer API authorization sent.')\n\n}\n\nlet checkUpdates = () => {\n  videoPlayerStore.mistDisplay = 'updates'\n  let request = '\"update\": true'\n  getApi(request)\n}\n\nlet getCapabilities = () => {\n  videoPlayerStore.mistDisplay = 'capabilities'\n  let request = '%22capabilities%22%3A%20true'\n  getApi(request)\n}\n\nlet getTotals = () => {\n  videoPlayerStore.mistDisplay = 'totals'\n  let request = '\"totals\": {}'\n  getApi(request)\n}\n\nlet getActiveStreams = () => {\n  videoPlayerStore.mistDisplay = 'active_streams'\n  let request = '\"active_streams\": true'\n  getApi(request)\n}\n\nlet getClients = () => {\n  videoPlayerStore.mistDisplay = 'clients'\n  // This request delivers information about each client connected\n  // to a specific stream name.\n  //\n  // let request = \"\\\"clients\\\": [{\\\"streams\\\": [\\\"vmixsource03\\\"],},{}]}\"\n\n  // This request delivers all clients\n  let request = '\"clients\": {}'\n  getApi(request)\n}\n\nlet getLog = () => {\n  videoPlayerStore.mistDisplay = 'log'\n  let request = '\"log\": {}'\n  getApi(request)\n}\n\nlet clearLog = () => {\n  videoPlayerStore.mistDisplay = 'log'\n  let request = '\"clearstatlog\": true'\n  getApi(request)\n}\n\nlet browseRecordings = () => {\n  videoPlayerStore.mistDisplay = 'recordings'\n  let request = '\"path\": \"/media/upload\"'\n  getApi(request)\n}\n\n\nasync function getApi(request) {\n  videoPlayerStore.mistStatus = true\n  videoPlayerStore.mistDisplayPushForm = false\n  // let apiRequest = '%7B%20%22authorize%22%3A%20%7B%0A%20%20%20%20%22username%22%3A%20%22'+videoPlayer.mistUsername+'%22,%0A%20%20%20%20%22password%22%3A%20%22'+videoPlayer.mistPassword+'%22%0A%20%20%20%7D,%0A%20'+request+'%0A%7D'\n  let apiRequest = '%7B%20%22authorize%22%3A%20%7B%0A%20%20%20%20%22username%22%3A%20%22' + videoPlayerStore.mistUsername + '%22,%0A%20%20%20%20%22password%22%3A%20%22' + videoPlayerStore.mistPassword + '%22%0A%20%20%20%7D,%0A%20' + request + '%0A%0A%7D'\n  await axios.get(mistAddress + '?command=' + apiRequest)\n      .then(response => {\n        videoPlayerStore.apiResponse = response.data\n        videoPlayerStore.challenge = videoPlayerStore.apiResponse.authorize.challenge\n        videoPlayerStore.status = videoPlayerStore.apiResponse.authorize.status\n      })\n      .catch(error => {\n        console.log(error)\n      })\n  console.log('mistServer API request sent.')\n}\n\nasync function getApiLocal(request) {\n  videoPlayerStore.mistStatus = true\n  videoPlayerStore.mistDisplayPushForm = false\n  // let apiRequest = '%7B%20%22authorize%22%3A%20%7B%0A%20%20%20%20%22username%22%3A%20%22'+videoPlayer.mistUsername+'%22,%0A%20%20%20%20%22password%22%3A%20%22'+videoPlayer.mistPassword+'%22%0A%20%20%20%7D,%0A%20'+request+'%0A%7D'\n  // let apiRequest = '%7B%20%22authorize%22%3A%20%7B%0A%20%20%20%20%22username%22%3A%20%22'+videoPlayer.mistUsername+'%22,%0A%20%20%20%20%22password%22%3A%20%22'+videoPlayer.mistPassword+'%22%0A%20%20%20%7D,%0A%20'+request+'%0A%0A%7D'\n  await axios.get(mistAddress + '?command=' + request)\n      .then(response => {\n        videoPlayerStore.apiResponse = response.data\n        videoPlayerStore.challenge = videoPlayerStore.apiResponse.authorize.challenge\n        videoPlayerStore.status = videoPlayerStore.apiResponse.authorize.status\n      })\n      .catch(error => {\n        console.log(error)\n      })\n  console.log('mistServer API request sent.')\n}\n\n/////////////// EXAMPLES OF MISTSERVER API CALLS ///////////////\n//\n// Keep these here. The MistServer API Call needs to be Url Encoded.\n//\n// This is a properly formatted HTTP API call to the MistServer:\n//\n// {\n//     \"addstream\": {\n//     \"streamname_here\": {},\n// }\n// }\n\n// { \"authorize\": {\n//     \"username\": \"USERNAME\",\n//     \"password\": \"PASSWORD\"\n//     }\n// },\n// { \"minimal\": 1 },\n// { \"active_streams\": true }\n//\n// https://beta-staging.not.tv/mistserver/api?command=%7B%20%22authorize%22%3A%20%7B%0A%20%20%20%20%22username%22%3A%20%22USERNAME%22,%0A%20%20%20%20%22password%22%3A%20%22PASSWORD%22%0A%20%20%20%20%7D%0A%7D,%0A%7B%20%22minimal%22%3A%201%20%7D,%0A%7B%20%22active_streams%22%3A%20true%20%7D\n// https://beta-staging.not.tv/mistserver/api?command=%7B%20%22authorize%22%3A%20%7B%0A%20%20%20%20%22username%22%3A%20%22USERNAME%22,%0A%20%20%20%20%22password%22%3A%20%22PASSWORD%22%0A%20%20%20%20%7D,%0A%7B%20%22minimal%22%3A%201%20%7D,%0A%7B%20%22active_streams%22%3A%20true%20%7D%0A%7D\n\n//\n///////////////////////////////////////////////////////////////\n\n\n// {\n//     \"authorize\":\n//     {\n// //Username to login as\n//         \"username\":\n//         \"test\",\n// //Hash of password to login with. Send empty value when no challenge for the hash is known yet.\n// //When the challenge is known, the value to be used here can be calculated as follows:\n// // MD5( MD5(\"secret\") + challenge)\n// //Where \"secret\" is the plaintext password.\n//             \"password\": \"\"\n//     }\n// }\n\n\n// tec21: this returns the pattern that mistServer is apparently looking for.\n// let submit = () => {\n//     console.log(form.response);\n//     Inertia.post(route('mistApi', {authorization: {challenge: videoPlayer.challenge, status: videoPlayer.status}}));\n// }\n\n// tec21: this works... it returns $request->challenge and $request->status to Laravel\n// let submit = () => {\n//     console.log('sent to backend');\n//     Inertia.post(route('mistApi', {challenge: videoPlayer.challenge, status: videoPlayer.status}));\n// }\n\n</script>\n\n\n"],"names":["_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","delegateYield","asyncGeneratorStep","gen","reject","_next","_throw","key","info","error","_asyncToGenerator","fn","self","args","arguments","apply","err","undefined","initialState","channels","items","activeItemId","selectedChannel","currentType","searchTerm","modalHeader","currentPage","itemsPerPage","currentChannelsPage","itemsPerChannelsPage","sourceSelector","source","sourceType","firstPlaySettings","validationErrors","checkSendProcessing","useAdminStore","defineStore","state","actions","assign","this","loadChannels","setCheckSendProcessing","unsetCheckSendProcessing","fetchChannels","_this","_callee","_context","axios","get","response","data","console","log","toggleChannelActiveStatus","channelId","_callee2","notificationStore","_response$data","message","status","_context2","useNotificationStore","post","setToastNotification","t0","addChannel","_this2","_callee3","_response$data2","errorMessage","validationMessages","_context3","success","fallbackMessages","map","msgs","join","updateChannel","newName","_this3","_callee4","_response$data3","_context4","concat","setSelectedChannel","item","setCurrentType","clearSelectedChannelAndItems","fetchItems","_this4","_callee5","_response","_response2","_context5","fetch","json","mist_stream_id","channel_external_source_id","channel_playlist_id","updateActiveItemId","id","_this5","_callee6","_context6","setMistStream","setChannelPlaylist","setExternalSource","setPlaybackPriorityType","channel","priorityType","_this6","_callee7","dataToSend","index","_context7","setPriorityType","findIndex","mistStreamId","_this7","_callee8","_context8","channelPlaylistId","_this8","_callee9","_context9","externalSourceId","_this9","_callee10","_context10","nextPage","totalModalPages","Math","ceil","prevPage","setPage","page","nextChannelsPage","prevChannelsPage","setChannelsPage","fetchFirstPlaySettings","_this10","_callee11","_response$data4","_context11","updateFirstPlaySettings","_this11","_callee12","_context12","patch","errors","handleErrors","getters","filteredItems","currentItem","find","activeItem","paginatedItems","start","end","paginatedChannels","totalChannelsPages","activeChannelsCount","filter","active","usePageSetup","pageName","userStore","useUserStore","appSettingStore","useAppSettingStore","videoPlayerStore","useVideoPlayerStore","showFlashMessage","pageIsHidden","isMobile","window","innerWidth","fullPage","ott","showOttButtons","makeVideoTopRight","pageReload","location","reload","Inertia","on","event","search","shouldScrollToTop","requestAnimationFrame","topDiv","document","getElementById","scrollIntoView","behavior","scrollTo","setPrevUrl","noLayout","props","__props","clearFlashMessage","computed","flash","warning","_ref","route","reactive","_objectSpread","displayBadges","adminStore","useStreamStore","apiActiveStreams","mistStatus","form","challenge","username","password","mistUsername","ref","md5","require","mistAddress","mistServerUri","getMistServerUri","_getMistServerUri","responseJson","isError","serverTypes","checkMistApiSendFunction","serverType","checkSend","_x","_ref2","_x2","getStatus","_ref3","apiRequest","authorize","authenticateMistServer","_authenticateMistServer","hashedPassword","authReturn","mistPassword","checkUpdates","mistDisplay","getApi","getCapabilities","getTotals","getActiveStreams","getClients","getLog","clearLog","browseRecordings","_x3","_getApi","request","mistDisplayPushForm","apiResponse"],"sourceRoot":""}