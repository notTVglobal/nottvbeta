{"version":3,"file":"js/8216.js","mappings":"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","sources":["webpack:///./resources/js/Stores/AdminStore.js","webpack:///./resources/js/Utilities/PageSetup.js","webpack:///./resources/js/Components/Global/Modals/Messages.vue?dfe9","webpack:///./resources/js/Components/Global/Modals/Messages.vue","webpack:///./resources/js/Components/Pages/Admin/AdminHeader.vue?239a","webpack:///./resources/js/Components/Pages/Admin/AdminHeader.vue","webpack:///./resources/js/Pages/Admin/MistServerApi.vue?7cc8","webpack:///./resources/js/Pages/Admin/MistServerApi.vue"],"sourcesContent":["import { defineStore } from 'pinia'\nimport { useNotificationStore } from '@/Stores/NotificationStore'\nimport { useVideoPlayerStore } from '@/Stores/VideoPlayerStore'\n\nconst initialState = () => ({\n    channels: [], // For Admin Channels page\n    items: [], // for Admin Channels DynamicModal... ExternalSource, ChannelPlaylist, MistStream\n    activeItemId: null,\n    selectedChannel: null, // The currently active item\n    currentType: '', // 'externalSource', 'channelPlaylist', 'mistStream'\n    searchTerm: '',\n    type: '',\n    modalHeader: '',\n    currentPage: 1,\n    itemsPerPage: 10,\n    currentChannelsPage: 1,\n    itemsPerChannelsPage: 7,\n    sourceSelector: {\n        source: null,\n        sourceType: null\n    },\n    firstPlaySettings: {\n        useCustomVideo: false,\n        customVideoSource: '',\n        customVideoSourceType: '',\n    },\n    validationErrors: {},\n    checkSendProcessing: false,\n    activeStreams: [],\n    fetchingActiveStreams: false,\n})\n\nexport const useAdminStore = defineStore('adminStore', {\n    state: initialState,\n    actions: {\n        reset() {\n            // Reset the store to its original state (clear all data)\n            Object.assign(this, initialState())\n        },\n\n        loadChannels(channels) {\n            this.channels = channels\n        },\n        setCheckSendProcessing() {\n          this.checkSendProcessing = true\n        },\n        unsetCheckSendProcessing() {\n            this.checkSendProcessing = false\n        },\n        async fetchChannels() {\n            await axios.get('/api/channels_list')\n                .then(response => {\n                    this.channels = response.data\n                })\n                .catch(error => {\n                    console.log(error)\n                })\n        },\n        async toggleChannelActiveStatus(channelId) {\n            const notificationStore = useNotificationStore();\n            try {\n                const response = await axios.post('/admin/channels/' + channelId + '/toggleChannelActive');\n                // Extract message and status from the response\n                const { message, status } = response.data;\n                // Use the status from the response for the notification\n                notificationStore.setToastNotification(message, status);\n            } catch (error) {\n                console.error(error);\n                notificationStore.setToastNotification('Failed to toggle channel status.', 'error');\n            }\n        },\n        async addChannel(name) {\n            const notificationStore = useNotificationStore();\n            try {\n                const response = await axios.post('/admin/channels/add', {'name': name});\n\n                if (response.data.success) {\n                    // Operation was a success\n                    await this.fetchChannels();\n                    notificationStore.setToastNotification(response.data.message, 'success');\n                } else {\n                    // Handle logical errors even when the HTTP response was OK\n                    // Assuming 'status' and 'message' are part of the error response\n                    const { message, status } = response.data;\n                    let errorMessage = 'Failed to add channel due to a server error.';\n\n                    if (status === 'error' && message && message.fallbackMessages) {\n                        // Construct a more detailed error message based on validation feedback\n                        const validationMessages = Object.values(message.fallbackMessages)\n                            .map(msgs => msgs.join(' ')) // Join messages if there are multiple for one field\n                            .join('; '); // Separate field messages with semicolons\n\n                        errorMessage = validationMessages || errorMessage;\n                    }\n\n                    notificationStore.setToastNotification(errorMessage, 'error');\n                }\n            } catch (error) {\n                console.error(error);\n                notificationStore.setToastNotification('Failed to add channel due to a network or server error.', 'error');\n            }\n        },\n        async updateChannel(channelId, newName) {\n            const notificationStore = useNotificationStore();\n            try {\n                const response = await axios.post(`/admin/channels/${channelId}`, {'name': newName});\n\n                if (response.data.success) {\n                    // Operation was a success\n                    await this.fetchChannels();\n                    notificationStore.setToastNotification(response.data.message, 'success');\n                } else {\n                    // Handle logical errors even when the HTTP response was OK\n                    // Assuming 'status' and 'message' are part of the error response\n                    const { message, status } = response.data;\n                    let errorMessage = 'Failed to add channel due to a server error.';\n\n                    if (status === 'error' && message && message.fallbackMessages) {\n                        // Construct a more detailed error message based on validation feedback\n                        const validationMessages = Object.values(message.fallbackMessages)\n                            .map(msgs => msgs.join(' ')) // Join messages if there are multiple for one field\n                            .join('; '); // Separate field messages with semicolons\n\n                        errorMessage = validationMessages || errorMessage;\n                    }\n\n                    notificationStore.setToastNotification(errorMessage, 'error');\n                }\n            } catch (error) {\n                console.error(error);\n                notificationStore.setToastNotification('Failed to add channel due to a network or server error.', 'error');\n            }\n        },\n        setSelectedChannel(item) {\n            this.selectedChannel = item\n        },\n        setCurrentType(type) {\n            this.currentType = type\n            this.modalHeader = type + ' list'\n        },\n        clearSelectedChannelAndItems() {\n            this.selectedChannel = null\n            this.items = []\n            this.activeItemId = null\n            this.currentType = ''\n            this.modalHeader = ''\n            this.currentPage = 1\n            this.itemsPerPage = 10\n            this.searchTerm = ''\n        },\n        // async searchItems(type, searchTerm = '') {\n        //     this.currentType = type;\n        //     this.searchTerm = searchTerm;\n        //     // Assuming you have a function to perform the fetch; adjust accordingly\n        //     const response = await fetch(`/admin/channels/search/${type}?search=${searchTerm}`);\n        //     const data = await response.json();\n        //     this.items = data.items;\n        // },\n        async fetchItems(type) {\n            this.currentType = type\n            if (this.currentType === 'mistStream') {\n                // retrieve all mistStreams paginated.\n                // Can Vue search through the items?\n                const response = await fetch(`/mistStreams`)\n                this.items = await response.json()\n                if (this.selectedChannel.mist_stream_id) {\n                    this.activeItemId = this.selectedChannel.mist_stream_id\n                }\n            } else if (this.currentType === 'externalSource') {\n                // retrieve all externalSources\n                const response = await fetch(`/externalSources`)\n                this.items = await response.json()\n                if (this.selectedChannel.channel_external_source_id) {\n                    this.activeItemId = this.selectedChannel.channel_external_source_id\n                }\n            } else if (this.currentType === 'channelPlaylist') {\n                // retrieve all channelPlaylists\n                const response = await fetch(`/channelPlaylists`)\n                this.items = await response.json()\n                if (this.selectedChannel.channel_playlist_id) {\n                    this.activeItemId = this.selectedChannel.channel_playlist_id\n                }\n            }\n            // Assuming you have a function to perform the fetch; adjust accordingly\n            // const response = await fetch(`/admin/channels/search/${type}?search=${searchTerm}`);\n            // const data = await response.json();\n            // this.items = data.items;\n        },\n        async updateActiveItemId(id) {\n            this.activeItemId = id\n            if (this.currentType === 'mistStream') {\n                await this.setMistStream(this.selectedChannel, id)\n            } else if (this.currentType === 'channelPlaylist') {\n                await this.setChannelPlaylist(this.selectedChannel, id)\n            } else if (this.currentType === 'externalSource') {\n                await this.setExternalSource(this.selectedChannel, id)\n            }\n        },\n        // Add more actions as needed\n        // this next one should probably go in AdminChannelStore\n        async setPlaybackPriorityType(channel, priorityType) {\n            const dataToSend = {setPriorityType: priorityType}\n            try {\n                const response = await axios.post(`/admin/channels/${channel.id}/setPlaybackPriorityType`, dataToSend)\n                if (response.data.success) {\n                    this.fetchChannels()\n                    // Find the index of the updated channel in the channels array\n                    const index = this.channels.findIndex(c => c.id === channel.id)\n                    if (index !== -1) {\n                        // Update the channel in the channels array with the updated data\n                        this.channels[index] = response.data.channel\n                    }\n                }\n            } catch (error) {\n                console.error(error)\n            }\n        },\n        async setMistStream(channel, mistStreamId) {\n            const dataToSend = {mistStreamId: mistStreamId}\n            try {\n                const response = await axios.post(`/admin/channels/${channel.id}/setMistStream`, dataToSend)\n                if (response.data.success) {\n                    this.fetchChannels()\n                    // Find the index of the updated channel in the channels array\n                    const index = this.channels.findIndex(c => c.id === channel.id)\n                    if (index !== -1) {\n                        // Update the channel in the channels array with the updated data\n                        this.channels[index] = response.data.channel\n                    }\n                }\n            } catch (error) {\n                console.error(error)\n            }\n        },\n        async setChannelPlaylist(channel, channelPlaylistId) {\n            const dataToSend = {channelPlaylistId: channelPlaylistId}\n            try {\n                const response = await axios.post(`/admin/channels/${channel.id}/setChannelPlaylist`, dataToSend)\n                if (response.data.success) {\n                    this.fetchChannels()\n                    // Find the index of the updated channel in the channels array\n                    const index = this.channels.findIndex(c => c.id === channel.id)\n                    if (index !== -1) {\n                        // Update the channel in the channels array with the updated data\n                        this.channels[index] = response.data.channel\n                    }\n                }\n            } catch (error) {\n                console.error(error)\n            }\n        },\n        async setExternalSource(channel, externalSourceId) {\n            const dataToSend = {mistStreamId: externalSourceId}\n            try {\n                const response = await axios.post(`/admin/channels/${channel.id}/setExternalSource`, dataToSend)\n                if (response.data.success) {\n                    this.fetchChannels()\n                    // Find the index of the updated channel in the channels array\n                    const index = this.channels.findIndex(c => c.id === channel.id)\n                    if (index !== -1) {\n                        // Update the channel in the channels array with the updated data\n                        this.channels[index] = response.data.channel\n                    }\n                }\n            } catch (error) {\n                console.error(error)\n            }\n        },\n        nextPage() {\n            const totalModalPages = Math.ceil(this.items.length / this.itemsPerPage)\n            if (this.currentPage < totalModalPages) this.currentPage++\n        },\n        prevPage() {\n            if (this.currentPage > 1) this.currentPage--\n        },\n        setPage(page) {\n            this.currentPage = page\n        },\n        nextChannelsPage() {\n            const totalModalPages = Math.ceil(this.channels.length / this.itemsPerChannelsPage)\n            if (this.currentChannelsPage < totalModalPages) this.currentChannelsPage++\n        },\n        prevChannelsPage() {\n            if (this.currentChannelsPage > 1) this.currentChannelsPage--\n        },\n        setChannelsPage(page) {\n            this.currentChannelsPage = page\n        },\n        ////// FIRST PLAY SETTINGS\n        /////////////////////////// admin/update-first-play-settings\n        async fetchFirstPlaySettings() {\n            const notificationStore = useNotificationStore();\n            try {\n                const response = await axios.post(`/admin/fetch-first-play-settings`);\n                if (response.data.success) {\n                    // Operation was a success\n                    this.firstPlaySettings = response.data.firstPlaySettings\n                    notificationStore.setToastNotification(response.data.message, 'success', 1500);\n                } else {\n                    // Handle logical errors even when the HTTP response was OK\n                    // Assuming 'status' and 'message' are part of the error response\n                    const { message, status } = response.data;\n                    let errorMessage = 'Failed to fetch First Play Settings due to a server error.';\n\n                    if (status === 'error' && message && message.fallbackMessages) {\n                        // Construct a more detailed error message based on validation feedback\n                        const validationMessages = Object.values(message.fallbackMessages)\n                            .map(msgs => msgs.join(' ')) // Join messages if there are multiple for one field\n                            .join('; '); // Separate field messages with semicolons\n\n                        errorMessage = validationMessages || errorMessage;\n                    }\n\n                    notificationStore.setToastNotification(errorMessage, 'error');\n                }\n            } catch (error) {\n                console.error(error);\n                notificationStore.setToastNotification('Failed to fetch First Play Settings due to a network or server error.', 'error');\n            }\n        },\n        async updateFirstPlaySettings() {\n            const notificationStore = useNotificationStore();\n\n            try {\n                const response = await axios.patch('/admin/update-first-play-settings', this.firstPlaySettings);\n\n                if (response.data.success) {\n                    // Operation was a success\n                    this.firstPlaySettings = response.data.firstPlaySettings;\n                    this.validationErrors = {}; // Clear any existing validation errors\n                    notificationStore.setToastNotification(response.data.message, 'success', 1500);\n                }\n                else if (!response.data.success) {\n                    // This block might not be necessary if your server correctly uses HTTP status codes for errors\n                    this.validationErrors = response.data.errors || {};\n                    notificationStore.setToastNotification(response.data.message, 'error');\n                     // Exit early since we've handled the error case\n                }\n            } catch (error) {\n                // Properly handle the error response\n                if (error.response && error.response.data) {\n                    // Server responded with a non-2xx status code\n                    console.log(\"Error response data:\", error.response.data);\n                    this.validationErrors = error.response.data.errors || {};\n                    const errorMessage = error.response.data.message || 'Failed to save First Play Settings due to a network or server error.';\n                    notificationStore.setToastNotification(errorMessage, 'error');\n                } else {\n                    // The request was made but no response was received or other errors occurred\n                    notificationStore.setToastNotification('Failed to save First Play Settings due to a network or server error.', 'error');\n                }\n            }\n        },\n        handleErrors(data) {\n            const notificationStore = useNotificationStore();\n            let errorMessage = 'Failed to save First Play Settings due to a server error.';\n\n            if (data.status === 'error') {\n                if (data.errors) {\n                    // Directly use the validation errors from the server response\n                    this.validationErrors = data.errors;\n                    errorMessage = \"Please check your input.\";\n                } else if (data.message) {\n                    // Use the message provided by the server as the error message\n                    errorMessage = data.message;\n                }\n\n                notificationStore.setToastNotification(errorMessage, 'error');\n            }\n        },\n        async fetchActiveStreams() {\n            const notificationStore = useNotificationStore();\n            this.fetchingActiveStreams = true\n            try {\n                const response = await axios.post(`/admin/fetch-active-streams`);\n                if (response.data.success) {\n                    // Operation was a success\n                    this.activeStreams = response.data.activeStreams\n                    notificationStore.setToastNotification(response.data.message, 'success', 1500);\n                    this.fetchingActiveStreams = false\n                } else {\n                    // Handle logical errors even when the HTTP response was OK\n                    // Assuming 'status' and 'message' are part of the error response\n                    const { message, status } = response.data;\n                    let errorMessage = 'Failed to fetch active streams due to a server error.';\n\n                    if (status === 'error' && message && message.fallbackMessages) {\n                        // Construct a more detailed error message based on validation feedback\n                        const validationMessages = Object.values(message.fallbackMessages)\n                            .map(msgs => msgs.join(' ')) // Join messages if there are multiple for one field\n                            .join('; '); // Separate field messages with semicolons\n\n                        errorMessage = validationMessages || errorMessage;\n                    }\n\n                    notificationStore.setToastNotification(errorMessage, 'error');\n                    this.fetchingActiveStreams = false\n                }\n            } catch (error) {\n                console.error(error);\n                notificationStore.setToastNotification('Failed to fetch Active Streams due to a network or server error.', 'error');\n                this.fetchingActiveStreams = false\n            }\n        },\n        async setActiveStreamAsFirstPlay(activeStream) {\n            const videoPlayerStore = useVideoPlayerStore();\n            if (activeStream === 'test') {\n                this.firstPlaySettings.customVideoSource = videoPlayerStore.mistServerUri + 'hls/test/index.m3u8'\n                this.firstPlaySettings.customVideoSourceType = 'application/x-mpegURL'\n                this.firstPlaySettings.customVideoName = 'Test Stream'\n                this.firstPlaySettings.customMediaType = 'firstPlay'\n            } else {\n                // axios.post save firstPlaySettings and broadcast an event.\n                // this.\n                // showName, streamName, streamMimeType\n                this.firstPlaySettings.customVideoSource = videoPlayerStore.mistServerUri + 'hls/' + activeStream.streamName + '/index.m3u8'\n                this.firstPlaySettings.customVideoSourceType = activeStream.streamMimeType\n                this.firstPlaySettings.customVideoName = activeStream.showName\n                this.firstPlaySettings.customMediaType = 'firstPlay'\n            }\n            await this.updateFirstPlaySettings()\n            // broadcast\n            // source\n            // mediaType\n            // type\n            // name\n\n        }\n    },\n\n    // Getters (if needed)\n    getters: {\n        filteredItems: (state) => state.items, // Placeholder, adjust if you need actual filtering\n        currentItem: (state) => state.items.find((item) => item.id === state.activeItem),\n        // setHeader: (state) => state.modalHeader = state.currentType + ' list',\n        paginatedItems: (state) => {\n            const start = (state.currentPage - 1) * state.itemsPerPage\n            const end = start + state.itemsPerPage\n            return state.items.slice(start, end)\n        },\n        paginatedChannels: (state) => {\n            const start = (state.currentChannelsPage - 1) * state.itemsPerChannelsPage\n            const end = start + state.itemsPerChannelsPage\n            return state.channels.slice(start, end)\n        },\n        totalModalPages(state) {\n            return Math.ceil(state.items.length / state.itemsPerPage)\n        },\n        totalChannelsPages(state) {\n            return Math.ceil(state.channels.length / state.itemsPerChannelsPage)\n        },\n        // Getter to count active channels\n        activeChannelsCount: (state) => {\n            // Use Array.prototype.filter to keep only items with 'active' true,\n            // then use the length property to get the count\n            return state.channels.filter(channel => channel.active).length;\n        },\n    },\n})\n","import { onBeforeMount, onMounted } from 'vue'\nimport { useUserStore } from \"@/Stores/UserStore\"\nimport { useAppSettingStore } from \"@/Stores/AppSettingStore\"\nimport { useVideoPlayerStore } from \"@/Stores/VideoPlayerStore\"\nimport { router } from '@inertiajs/vue3'\n\nexport function usePageSetup(pageName) {\n    const userStore = useUserStore()\n    const appSettingStore = useAppSettingStore()\n    const videoPlayerStore = useVideoPlayerStore()\n\n    appSettingStore.currentPage = pageName\n    appSettingStore.showFlashMessage = true\n    appSettingStore.pageIsHidden = false\n\n    if (userStore.isMobile || window.innerWidth < 1024 || appSettingStore.fullPage) {\n        appSettingStore.ott = 0;\n    } else {\n        appSettingStore.ott = 1;\n        appSettingStore.showOttButtons = true;\n    }\n\n    videoPlayerStore.makeVideoTopRight()\n\n    if (appSettingStore.pageReload) {\n        appSettingStore.pageReload = false\n        appSettingStore.pageWasReloaded = true\n        window.location.reload();\n    }\n    // Check if the URL contains query strings\n\n\n    // Only scroll into view if there are no query strings\n\n        // const topDiv = document.getElementById(\"topDiv\")\n        // if (topDiv) {\n        //     topDiv.scrollIntoView()\n        // }\n        router.on('navigate', (event) => {\n            if (userStore.isMobile || window.innerWidth < 1024 || appSettingStore.fullPage) {\n                appSettingStore.ott = 0;\n            } else {\n                appSettingStore.ott = 1;\n            }\n            const hasQueryStrings = window.location.search !== '';\n            if (!hasQueryStrings || appSettingStore.shouldScrollToTop) {\n                requestAnimationFrame(() => {\n                    const topDiv = document.getElementById(\"topDiv\");\n                    if (topDiv) {\n                        topDiv.scrollIntoView({behavior: 'auto'});\n                    } else {\n                        window.scrollTo(0, 0);\n                    }\n                });\n            }\n            appSettingStore.shouldScrollToTop = false;\n        })\n    // Only update if we're not already on this page to avoid overwriting with the current URL\n    appSettingStore.setPrevUrl()\n    appSettingStore.showOttButtons = true\n    appSettingStore.noLayout = false\n\n    // router.reload()\n\n}\n","import script from \"./Messages.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Messages.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n  <div class=\"mx-4 my-4\">\n    <div class=\"alert alert-info mt-4\"\n         v-if=\"props.flash.message\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" class=\"stroke-current shrink-0 w-6 h-6\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n              d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"></path>\n      </svg>\n      <span>{{ props.flash.message }}</span>\n      <button class=\"text-xs ml-12\" @click=\"clearFlashMessage\"> Close</button>\n    </div>\n    <div class=\"alert alert-success mt-4 mx-3\"\n         v-if=\"props.flash.success\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"stroke-current shrink-0 h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n              d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"/>\n      </svg>\n      <span>{{ props.flash.success }}</span>\n      <button class=\"text-xs ml-12\" @click=\"clearFlashMessage\"> Close</button>\n    </div>\n    <div class=\"alert alert-warning mt-4 mx-3\"\n         v-if=\"props.flash.warning\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"stroke-current shrink-0 h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n              d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z\"/>\n      </svg>\n      <span>{{ props.flash.warning }}</span>\n      <button class=\"text-xs ml-12\" @click=\"clearFlashMessage\"> Close</button>\n    </div>\n    <div class=\"alert alert-error mt-4 mx-3\"\n         v-if=\"props.flash.error\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"stroke-current shrink-0 h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n              d=\"M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z\"/>\n      </svg>\n      <span>{{ props.flash.error }}</span>\n      <button class=\"text-xs ml-12\" @click=\"clearFlashMessage\"> Close</button>\n    </div>\n  </div>\n\n</template>\n\n<script setup>\nimport { router } from '@inertiajs/vue3'\nimport { computed } from \"vue\"\nimport { useAppSettingStore } from \"@/Stores/AppSettingStore\"\n\nconst appSettingStore = useAppSettingStore()\n\nappSettingStore.showFlashMessage = true\n\nlet props = defineProps({\n  flash: Object,\n\n})\n\nconst messageType = computed(() => ({\n  'text-green-700 bg-green-100 dark:bg-green-200 dark:text-green-800': props.flash.success,\n  'text-blue-700 bg-blue-100 dark:bg-blue-200 dark:text-blue-800': props.flash.message,\n  'text-orange-700 bg-orange-100 dark:bg-orange-200 dark:text-orange-800': props.flash.warning,\n  'text-red-700 bg-red-100 dark:bg-red-200 dark:text-red-800': props.flash.error,\n}))\n\nconst clearFlashMessage = async () => {\n  await router.post(route('flash.clear'));\n  router.reload();\n};\n</script>\n","import script from \"./AdminHeader.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./AdminHeader.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n  <header>\n    <div class=\"flex justify-between my-3\">\n      <div class=\"mb-4 relative\">\n        <h1 class=\"text-3xl font-semibold inline-block\">\n          <slot/>\n        </h1>\n        <span v-if=\"displayBadges\" class=\"text-white font-semibold badge badge-success absolute -top-2 -right-10 flex items-center justify-center min-w-[2rem] h-[2rem] rounded-full\">{{ (badgePrimaryNumber ?? 0) > 99 ? '99+' : (badgePrimaryNumber ?? 0) }}</span>\n        <span v-if=\"displayBadges\" class=\"font-semibold badge badge-warning absolute -top-2 -right-20 flex items-center justify-center min-w-[2rem] h-[2rem] rounded-full\">{{ (badgeSecondaryNumber ?? 0) > 99 ? '99+' : (badgeSecondaryNumber ?? 0) }}</span>\n\n      </div>\n      <div>\n        <div class=\"flex flex-wrap-reverse justify-end gap-2\">\n          <Link :href=\"`/admin/settings`\">\n            <button\n                class=\"px-4 py-2 text-white bg-blue-600 hover:bg-blue-500 rounded-lg\"\n            >Admin Settings\n            </button>\n          </Link>\n        </div>\n      </div>\n    </div>\n  </header>\n\n</template>\n\n<script setup>\nimport { reactive } from 'vue'\n\nconst props = defineProps({\n  displayBadges: Boolean,\n  badgePrimaryNumber: Number,\n  badgeSecondaryNumber: Number,\n});\n\nconst defaultProps = {\n  displayBadges: false,\n};\n\nconst finalProps = reactive({ ...defaultProps, ...props });\n\n</script>\n","import script from \"./MistServerApi.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./MistServerApi.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n\n  <Head title=\"MistServer API\"/>\n  <div class=\"place-self-center flex flex-col gap-y-3\">\n    <div id=\"topDiv\" class=\"bg-white text-black p-5 mb-10\">\n\n      <Message v-if=\"appSettingStore.showFlashMessage\" :flash=\"$page.props.flash\"/>\n\n      <AdminHeader>MistServer API</AdminHeader>\n      <div>Processing: {{ adminStore.checkSendProcessing }}</div>\n      <div class=\"flex justify-between\">\n        <div><span class=\"font-semibold\">{{ videoPlayerStore.status }}</span>\n          <div class=\"\">Status: </div>\n          <span v-show=\"adminStore.checkSendProcessing\" class=\"loading loading-spinner loading-xs text-blue-700\"></span>\n          <button v-for=\"server in serverTypes\" :key=\"server.type\"\n                  class=\"ml-2 py-2 my-2 px-4 text-white bg-orange-800 hover:bg-orange-500 mr-2 rounded-xl\"\n                  @click.prevent=\"checkMistApiSendFunction(server.type)\">\n            {{ server.name }}\n          </button>\n\n          <button class=\"ml-2 py-2 my-2 px-4 text-white bg-orange-800 hover:bg-orange-500 mr-2 rounded-xl\"\n                  @click.prevent=\"getStatus\">\n            Get Status\n          </button>\n\n        </div>\n        <div v-if=\"videoPlayerStore.status === 'OK'\" class=\"\">\n\n        </div>\n\n      </div>\n\n\n      <div>\n        <h2>API Response</h2>\n        <!-- Displaying as a string -->\n        <pre>{{ JSON.stringify(responseJson, null, 2) }}</pre>\n\n        <!-- Or iterating over properties -->\n        <!-- Use this as a starting point for displaying the MistServer responses -->\n        <!-- Note: We have another iteration version below -->\n        <div hidden v-if=\"responseJson\">\n          <div v-for=\"(value, key) in responseJson\" :key=\"key\">\n            {{ key }}: {{ value }}\n          </div>\n        </div>\n      </div>\n\n\n\n      <div v-if=\"videoPlayerStore.status === 'CHALL'\" class=\"mb-8\">\n        <div class=\"py-3 px-4 mb-4 bg-orange-800 text-white rounded\">MistServer needs to be authenticated</div>\n\n        <div class=\"font-semibold text-2xl px-2\">\n          Connect to the MistServer\n        </div>\n\n        <div class=\"my-3 pl-2 text-sm w-1/2\">If the MistServer Status will either be OK, CHALL, NOACC or ACC_MADE.\n          If it's \"CHALL\" then you need to re-authenticate with the username and password.\n        </div>\n\n        <form @submit.prevent class=\"mt-2 pl-2\">\n\n          <div class=\"mt-2\">Challenge:</div>\n          <input type=\"text\" name=\"challenge\" id=\"challenge\" v-model=\"videoPlayerStore.challenge\" disabled/>\n\n          <div class=\"font-semibold mt-2\">MistServer Username:</div>\n          <input class=\"mb-2\" type=\"text\" name=\"username\" v-model=\"videoPlayerStore.mistUsername\"/>\n\n          <div class=\"font-semibold mt-2\">MistServer Password:</div>\n          <input type=\"password\" name=\"password\" v-model=\"form.password\"/>\n\n          <div class=\"mb-4 w-1/2 text-sm\"> Credit to Jeff Mott for his work on a pure JS implementation of the MD5\n            algorithm.\n            You can find the npm package <a href=\"https://www.npmjs.com/package/md5\" target=\"_blank\"\n                                            class=\"text-blue-800 hover:text-gray-500\">here.</a></div>\n\n          <button class=\"ml-2 py-2 px-4 text-white bg-green-800 hover:bg-green-500 rounded-xl\"\n                  @click.prevent=\"authenticateMistServer\">\n            Authenticate\n          </button>\n\n        </form>\n\n      </div>\n\n      <div v-if=\"videoPlayerStore.status === 'OK'\" class=\"mb-8\">\n        <div class=\"py-3 px-4 mb-4 bg-green-900 text-white rounded\">MistServer is connected</div>\n\n        <div class=\"grid grid-cols-1 md:grid-cols-3\">\n          <div class=\"col-span-1\">\n            <div class=\"flex flex-col space-y-2\">\n\n              <button class=\"ml-2 py-2 px-4 text-white bg-blue-800 hover:bg-blue-500 rounded-xl\"\n                      @click.prevent=\"checkUpdates\">\n                Check for Updates\n              </button>\n\n              <button class=\"ml-2 py-2 px-4 text-white bg-blue-800 hover:bg-blue-500 rounded-xl\"\n                      @click.prevent=\"getCapabilities\">\n                Get Server Capabilities\n              </button>\n\n              <button class=\"ml-2 py-2 px-4 text-white bg-blue-800 hover:bg-blue-500 mr-2 rounded-xl\"\n                      @click.prevent=\"getTotals\">\n                Get Totals\n              </button>\n\n              <button class=\"ml-2 py-2 px-4 text-white bg-blue-800 hover:bg-blue-500 mr-2 rounded-xl\"\n                      @click.prevent=\"getClients\">\n                Get Clients\n              </button>\n\n              <button class=\"ml-2 py-2 px-4 text-white bg-blue-800 hover:bg-blue-500 rounded-xl\"\n                      @click.prevent=\"getActiveStreams\">\n                Get Active Streams\n              </button>\n\n              <button class=\"ml-2 py-2 px-4 text-white bg-blue-800 hover:bg-blue-500 rounded-xl\"\n                      @click.prevent=\"getLog\">\n                Get Log\n              </button>\n\n              <button class=\"ml-2 py-2 px-4 text-white bg-orange-800 hover:bg-orange-500 rounded-xl\"\n                      @click.prevent=\"clearLog\">\n                Clear Log\n              </button>\n\n              <button class=\"ml-2 py-2 px-4 text-white bg-blue-800 hover:bg-blue-500 rounded-xl\"\n                      @click.prevent=\"browseRecordings\">\n                Recordings\n              </button>\n\n            </div>\n          </div>\n\n\n          <div class=\"md:col-span-2 pl-6\">\n            <!--                        <div v-if=\"videoPlayer.mistStatus\">-->\n            <!--                            <div class=\"mt-2\">Returned data:</div>-->\n            <!--                            <div class=\"\">-->\n            <!--                                {{videoPlayer.apiResponse}}-->\n            <!--                            </div>-->\n            <!--                        </div>-->\n            <div class=\"mt-2 text-xs uppercase\">Returned data:</div>\n\n            <div v-if=\"videoPlayerStore.mistDisplay === 'updates'\">\n              <table>\n                <thead>\n                <td></td>\n                <td></td>\n                <td></td>\n                <td></td>\n                <td></td>\n                </thead>\n                <tr v-for=\"update in videoPlayerStore.apiResponse.update\" :key=\"update.item\">\n                  <td>{{ update[0] }}</td>\n                  <td>{{ update[1] }}</td>\n                  <td>{{ update[2] }}</td>\n                  <td>{{ update[3] }}</td>\n                  <td>{{ update[4] }}</td>\n                </tr>\n              </table>\n            </div>\n\n            <div v-if=\"videoPlayerStore.mistDisplay === 'capabilities'\">\n              <div class=\"mt-2 font-semibold\">CPU</div>\n              <table>\n                <tr v-for=\"(value, name) in videoPlayerStore.apiResponse.capabilities.cpu[0]\" :key=\"name\">\n                  <td>{{ name }}</td>\n                  <td>{{ value }}</td>\n                </tr>\n              </table>\n              <div class=\"mt-2 font-semibold\">Load</div>\n              <table>\n                <tr v-for=\"(value, name) in videoPlayerStore.apiResponse.capabilities.load\" :key=\"name\">\n                  <td>{{ name }}</td>\n                  <td>{{ value }}</td>\n                </tr>\n              </table>\n              <div class=\"mt-2 font-semibold\">Mem</div>\n              <table>\n                <tr v-for=\"(value, name) in videoPlayerStore.apiResponse.capabilities.mem\" :key=\"name\">\n                  <td>{{ name }}</td>\n                  <td>{{ value }}</td>\n                </tr>\n              </table>\n            </div>\n\n            <div v-if=\"videoPlayerStore.mistDisplay === 'totals'\">\n\n              <table>\n                <thead>\n                <td>{{ videoPlayerStore.apiResponse.totals.fields[0] }}</td>\n                <td>{{ videoPlayerStore.apiResponse.totals.fields[1] }}</td>\n                <td>{{ videoPlayerStore.apiResponse.totals.fields[2] }}</td>\n                <td>{{ videoPlayerStore.apiResponse.totals.fields[3] }}</td>\n                <td>{{ videoPlayerStore.apiResponse.totals.fields[4] }}</td>\n                <td>{{ videoPlayerStore.apiResponse.totals.fields[5] }}</td>\n                <td>{{ videoPlayerStore.apiResponse.totals.fields[6] }}</td>\n                </thead>\n                <tr v-for=\"total in videoPlayerStore.apiResponse.totals.data.slice().reverse()\" :key=\"total.item\">\n                  <td>{{ total[0] }}</td>\n                  <td>{{ total[1] }}</td>\n                  <td>{{ total[2] }}</td>\n                  <td>{{ total[3] }}</td>\n                  <td>{{ total[4] }}</td>\n                  <td>{{ total[5] }}</td>\n                  <td>{{ total[6] }}</td>\n                </tr>\n              </table>\n            </div>\n\n            <div v-if=\"videoPlayerStore.mistDisplay === 'clients'\">\n\n              <table>\n                <thead>\n                <td>{{ videoPlayerStore.apiResponse.clients.fields[0] }}</td>\n                <td>{{ videoPlayerStore.apiResponse.clients.fields[1] }}</td>\n                <td>{{ videoPlayerStore.apiResponse.clients.fields[2] }}</td>\n                <td>{{ videoPlayerStore.apiResponse.clients.fields[3] }}</td>\n                <td>{{ videoPlayerStore.apiResponse.clients.fields[4] }}</td>\n                <td>{{ videoPlayerStore.apiResponse.clients.fields[5] }}</td>\n                <td>{{ videoPlayerStore.apiResponse.clients.fields[6] }}</td>\n                <td>{{ videoPlayerStore.apiResponse.clients.fields[7] }}</td>\n                <td>{{ videoPlayerStore.apiResponse.clients.fields[8] }}</td>\n                <td>{{ videoPlayerStore.apiResponse.clients.fields[9] }}</td>\n                <td>{{ videoPlayerStore.apiResponse.clients.fields[10] }}</td>\n                <td>{{ videoPlayerStore.apiResponse.clients.fields[11] }}</td>\n                <td>{{ videoPlayerStore.apiResponse.clients.fields[12] }}</td>\n                <td>{{ videoPlayerStore.apiResponse.clients.fields[13] }}</td>\n                <td>time</td>\n                </thead>\n                <tr v-for=\"client in videoPlayerStore.apiResponse.clients.data\" :key=\"client.item\">\n                  <td>{{ client[0] }}</td>\n                  <td>{{ client[1] }}</td>\n                  <td>{{ client[2] }}</td>\n                  <td>{{ client[3] }}</td>\n                  <td>{{ client[4] }}</td>\n                  <td>{{ client[5] }}</td>\n                  <td>{{ client[6] }}</td>\n                  <td>{{ client[7] }}</td>\n                  <td>{{ client[8] }}</td>\n                  <td>{{ client[9] }}</td>\n                  <td>{{ client[10] }}</td>\n                  <td>{{ client[11] }}</td>\n                  <td>{{ client[12] }}</td>\n                  <td>{{ client[13] }}</td>\n                  <td>{{ client[14] }}</td>\n                </tr>\n              </table>\n            </div>\n\n            <div v-if=\"videoPlayerStore.mistDisplay === 'active_streams'\">\n\n              <table>\n                <thead class=\"font-semibold mb-2\">\n                <td>Stream Name</td>\n                </thead>\n                <tr v-for=\"stream in videoPlayerStore.apiResponse.active_streams\" :key=\"stream.item\">\n                  <td>{{ stream }}</td>\n\n                </tr>\n              </table>\n            </div>\n\n            <div v-if=\"videoPlayerStore.mistDisplay === 'log'\">\n\n              <table>\n                <tr v-for=\"log in videoPlayerStore.apiResponse.log\" :key=\"log.item\">\n                  <td>{{ log[0] }}</td>\n                  <td>{{ log[1] }}</td>\n                  <td>{{ log[2] }}</td>\n                  <td>{{ log[3] }}</td>\n                </tr>\n              </table>\n            </div>\n\n            <div v-if=\"videoPlayerStore.mistDisplay === 'recordings'\">\n\n              <table>\n                <tr v-for=\"log in videoPlayerStore.apiResponse.log\" :key=\"log.item\">\n                  <td>{{ log[0] }}</td>\n                  <td>{{ log[1] }}</td>\n                  <td>{{ log[2] }}</td>\n                  <td>{{ log[3] }}</td>\n                </tr>\n              </table>\n            </div>\n\n          </div>\n\n\n        </div>\n\n      </div>\n\n    </div>\n  </div>\n\n</template>\n\n<script setup>\nimport { ref, reactive, computed, onMounted } from 'vue'\nimport { usePageSetup } from '@/Utilities/PageSetup'\nimport { useAppSettingStore } from '@/Stores/AppSettingStore'\nimport { useAdminStore } from '@/Stores/AdminStore'\nimport { useVideoPlayerStore } from '@/Stores/VideoPlayerStore'\nimport { useStreamStore } from '@/Stores/StreamStore'\nimport AdminHeader from '@/Components/Pages/Admin/AdminHeader'\nimport Message from '@/Components/Global/Modals/Messages'\n\nusePageSetup('mistServerApi')\n\nconst appSettingStore = useAppSettingStore()\nconst adminStore = useAdminStore()\nconst videoPlayerStore = useVideoPlayerStore()\nconst streamStore = useStreamStore()\n\nvideoPlayerStore.apiActiveStreams = null\nvideoPlayerStore.mistStatus = false\n\nlet props = defineProps({\n  apiReturn: Object,\n  message: ref(String),\n  mistNewHashedPassword: ref(String),\n})\n\nlet form = reactive({\n  challenge: videoPlayerStore.challenge,\n  status: videoPlayerStore.status,\n  username: '',\n  password: '',\n})\n\nvideoPlayerStore.mistUsername = ''\nform.password = ''\n\nconst password = ref('')\n\nlet md5 = require('md5')\n\n\n////////////////////  MIST SERVER ADDRESS //////////////////////////////\n// Keep this here to change which MistServer is used for testing purposes\n//\n// let mistAddress = 'http://localhost:4242/api'\n// let mistAddress = 'https://beta-staging.not.tv/mistserver/api'\n// let mistAddress = 'https://mist.not.tv/mistinterface'\n// let mistAddress = 'http://10.124.0.3:4242/api'\nlet mistAddress = 'http://localhost:4242/api'\n// let mistAddress = 'http://mist.nottv.io:4242/api'\n// let mistAddressWs = 'ws://mist.nottv.io:4242/ws'\n//\nconst mistServerUri = ref('')\n\n///////////////////////////////////////////////////////////////////////\n\nasync function getMistServerUri() {\n  console.log('get MistServer URI')\n  await axios.get('/mist-server/uri')\n      .then(response => {\n        mistServerUri.value = response.data\n        console.log('MistServer URI: ' + mistServerUri.value)\n        return response.data\n      })\n      .catch(error => {\n        console.log(error)\n      })\n}\n\nconst responseJson = ref(null);\nconst isError = computed(() => {\n  // Check if responseJson is an error object\n  // This is a basic check, you might need to adjust it based on your actual error object's structure\n  isError.value = true\n  adminStore.unsetCheckSendProcessing()\n  return responseJson.value && responseJson.value.message && typeof responseJson.value.message === 'string';\n});\n\nconst serverTypes = ref([\n  { name: 'Check Push Server', type: 'push' },\n  { name: 'Check Playback Server', type: 'playback' },\n  { name: 'Check Vod Server', type: 'vod' },\n  { name: 'Check Recording Server', type: 'recording' }\n]);\n\nconst checkMistApiSendFunction = async(serverType) => {\n  responseJson.value = null\n  await checkSend(serverType)\n}\n\nconst checkSend = async(serverType) => {\n  adminStore.setCheckSendProcessing()\n  await axios.post('/mist-server/check-send', {serverType: serverType /* additional data if any */})\n      .then(response => {\n        console.log('Response:', response)\n        responseJson.value = response.data;\n        adminStore.unsetCheckSendProcessing()\n      })\n      .catch(error => {\n        console.error('Error:', error)\n        responseJson.value = `Error: ${error.response.data.message || 'Request failed'} with status code ${error.response.status}`;\n        responseJson.value.error = true\n        adminStore.unsetCheckSendProcessing()\n      })\n  console.log('Checked MistServerService send() with serverType:', serverType)\n}\n\n\nconst getStatus = async() => {\n  responseJson.value = null\n  adminStore.setCheckSendProcessing()\n  const mistUri = await getMistServerUri()\n  await axios.get(mistAddress)\n      .then(response => {\n        videoPlayerStore.apiRequest = response.data\n        videoPlayerStore.challenge = videoPlayerStore.apiRequest.authorize.challenge\n        videoPlayerStore.status = videoPlayerStore.apiRequest.authorize.status\n        adminStore.unsetCheckSendProcessing()\n      })\n      .catch(error => {\n        console.log(error)\n        adminStore.unsetCheckSendProcessing()\n      })\n  console.log('get API')\n\n}\n\n// The Websocket connection will give us near real-time\n// info from the server.\n//\n// Create the header for the MistServer WS API Request\n// const mistWsHeader = {\n//     headers: {\n//         \"Authorization\": \"json \"+AuthenticationGoesHere,\n//     },\n// };\n\nasync function authenticateMistServer() {\n  let hashedPassword = md5(form.password)\n  console.log('Hashed password: ' + hashedPassword)\n  let authReturn = md5(hashedPassword + videoPlayerStore.challenge)\n  videoPlayerStore.mistPassword = authReturn\n  console.log('Final hashed password: ' + authReturn)\n  await axios.get(mistAddress + '?command=%7B%0A%22authorize%22%3A%20%7B%0A%22username%22%3A%20%22' + videoPlayerStore.mistUsername + '%22,%0A%22password%22%3A%20%22' + authReturn + '%22%0A%7D%0A%7D')\n      .then(response => {\n        videoPlayerStore.apiRequest = response.data\n        videoPlayerStore.challenge = videoPlayerStore.apiRequest.authorize.challenge\n        videoPlayerStore.status = videoPlayerStore.apiRequest.authorize.status\n        console.log(response.data)\n      })\n      .catch(error => {\n        console.log(error)\n      })\n  console.log('mistServer API authorization sent.')\n\n}\n\nlet checkUpdates = () => {\n  videoPlayerStore.mistDisplay = 'updates'\n  let request = '\"update\": true'\n  getApi(request)\n}\n\nlet getCapabilities = () => {\n  videoPlayerStore.mistDisplay = 'capabilities'\n  let request = '%22capabilities%22%3A%20true'\n  getApi(request)\n}\n\nlet getTotals = () => {\n  videoPlayerStore.mistDisplay = 'totals'\n  let request = '\"totals\": {}'\n  getApi(request)\n}\n\nlet getActiveStreams = () => {\n  videoPlayerStore.mistDisplay = 'active_streams'\n  let request = '\"active_streams\": true'\n  getApi(request)\n}\n\nlet getClients = () => {\n  videoPlayerStore.mistDisplay = 'clients'\n  // This request delivers information about each client connected\n  // to a specific stream name.\n  //\n  // let request = \"\\\"clients\\\": [{\\\"streams\\\": [\\\"vmixsource03\\\"],},{}]}\"\n\n  // This request delivers all clients\n  let request = '\"clients\": {}'\n  getApi(request)\n}\n\nlet getLog = () => {\n  videoPlayerStore.mistDisplay = 'log'\n  let request = '\"log\": {}'\n  getApi(request)\n}\n\nlet clearLog = () => {\n  videoPlayerStore.mistDisplay = 'log'\n  let request = '\"clearstatlog\": true'\n  getApi(request)\n}\n\nlet browseRecordings = () => {\n  videoPlayerStore.mistDisplay = 'recordings'\n  let request = '\"path\": \"/media/upload\"'\n  getApi(request)\n}\n\n\nasync function getApi(request) {\n  videoPlayerStore.mistStatus = true\n  videoPlayerStore.mistDisplayPushForm = false\n  // let apiRequest = '%7B%20%22authorize%22%3A%20%7B%0A%20%20%20%20%22username%22%3A%20%22'+videoPlayer.mistUsername+'%22,%0A%20%20%20%20%22password%22%3A%20%22'+videoPlayer.mistPassword+'%22%0A%20%20%20%7D,%0A%20'+request+'%0A%7D'\n  let apiRequest = '%7B%20%22authorize%22%3A%20%7B%0A%20%20%20%20%22username%22%3A%20%22' + videoPlayerStore.mistUsername + '%22,%0A%20%20%20%20%22password%22%3A%20%22' + videoPlayerStore.mistPassword + '%22%0A%20%20%20%7D,%0A%20' + request + '%0A%0A%7D'\n  await axios.get(mistAddress + '?command=' + apiRequest)\n      .then(response => {\n        videoPlayerStore.apiResponse = response.data\n        videoPlayerStore.challenge = videoPlayerStore.apiResponse.authorize.challenge\n        videoPlayerStore.status = videoPlayerStore.apiResponse.authorize.status\n      })\n      .catch(error => {\n        console.log(error)\n      })\n  console.log('mistServer API request sent.')\n}\n\nasync function getApiLocal(request) {\n  videoPlayerStore.mistStatus = true\n  videoPlayerStore.mistDisplayPushForm = false\n  // let apiRequest = '%7B%20%22authorize%22%3A%20%7B%0A%20%20%20%20%22username%22%3A%20%22'+videoPlayer.mistUsername+'%22,%0A%20%20%20%20%22password%22%3A%20%22'+videoPlayer.mistPassword+'%22%0A%20%20%20%7D,%0A%20'+request+'%0A%7D'\n  // let apiRequest = '%7B%20%22authorize%22%3A%20%7B%0A%20%20%20%20%22username%22%3A%20%22'+videoPlayer.mistUsername+'%22,%0A%20%20%20%20%22password%22%3A%20%22'+videoPlayer.mistPassword+'%22%0A%20%20%20%7D,%0A%20'+request+'%0A%0A%7D'\n  await axios.get(mistAddress + '?command=' + request)\n      .then(response => {\n        videoPlayerStore.apiResponse = response.data\n        videoPlayerStore.challenge = videoPlayerStore.apiResponse.authorize.challenge\n        videoPlayerStore.status = videoPlayerStore.apiResponse.authorize.status\n      })\n      .catch(error => {\n        console.log(error)\n      })\n  console.log('mistServer API request sent.')\n}\n\n/////////////// EXAMPLES OF MISTSERVER API CALLS ///////////////\n//\n// Keep these here. The MistServer API Call needs to be Url Encoded.\n//\n// This is a properly formatted HTTP API call to the MistServer:\n//\n// {\n//     \"addstream\": {\n//     \"streamname_here\": {},\n// }\n// }\n\n// { \"authorize\": {\n//     \"username\": \"USERNAME\",\n//     \"password\": \"PASSWORD\"\n//     }\n// },\n// { \"minimal\": 1 },\n// { \"active_streams\": true }\n//\n// https://beta-staging.not.tv/mistserver/api?command=%7B%20%22authorize%22%3A%20%7B%0A%20%20%20%20%22username%22%3A%20%22USERNAME%22,%0A%20%20%20%20%22password%22%3A%20%22PASSWORD%22%0A%20%20%20%20%7D%0A%7D,%0A%7B%20%22minimal%22%3A%201%20%7D,%0A%7B%20%22active_streams%22%3A%20true%20%7D\n// https://beta-staging.not.tv/mistserver/api?command=%7B%20%22authorize%22%3A%20%7B%0A%20%20%20%20%22username%22%3A%20%22USERNAME%22,%0A%20%20%20%20%22password%22%3A%20%22PASSWORD%22%0A%20%20%20%20%7D,%0A%7B%20%22minimal%22%3A%201%20%7D,%0A%7B%20%22active_streams%22%3A%20true%20%7D%0A%7D\n\n//\n///////////////////////////////////////////////////////////////\n\n\n// {\n//     \"authorize\":\n//     {\n// //Username to login as\n//         \"username\":\n//         \"test\",\n// //Hash of password to login with. Send empty value when no challenge for the hash is known yet.\n// //When the challenge is known, the value to be used here can be calculated as follows:\n// // MD5( MD5(\"secret\") + challenge)\n// //Where \"secret\" is the plaintext password.\n//             \"password\": \"\"\n//     }\n// }\n\n\n// tec21: this returns the pattern that mistServer is apparently looking for.\n// let submit = () => {\n//     console.log(form.response);\n//     router.post(route('mistApi', {authorization: {challenge: videoPlayer.challenge, status: videoPlayer.status}}));\n// }\n\n// tec21: this works... it returns $request->challenge and $request->status to Laravel\n// let submit = () => {\n//     console.log('sent to backend');\n//     router.post(route('mistApi', {challenge: videoPlayer.challenge, status: videoPlayer.status}));\n// }\n\n</script>\n\n\n"],"names":["_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","delegateYield","asyncGeneratorStep","gen","reject","_next","_throw","key","info","error","_asyncToGenerator","fn","self","args","arguments","apply","err","undefined","initialState","channels","items","activeItemId","selectedChannel","currentType","searchTerm","modalHeader","currentPage","itemsPerPage","currentChannelsPage","itemsPerChannelsPage","sourceSelector","source","sourceType","firstPlaySettings","useCustomVideo","customVideoSource","customVideoSourceType","validationErrors","checkSendProcessing","activeStreams","fetchingActiveStreams","useAdminStore","defineStore","state","actions","assign","this","loadChannels","setCheckSendProcessing","unsetCheckSendProcessing","fetchChannels","_this","_callee","_context","axios","get","response","data","console","log","toggleChannelActiveStatus","channelId","_callee2","notificationStore","_response$data","message","status","_context2","useNotificationStore","post","setToastNotification","t0","addChannel","_this2","_callee3","_response$data2","errorMessage","validationMessages","_context3","success","fallbackMessages","map","msgs","join","updateChannel","newName","_this3","_callee4","_response$data3","_context4","concat","setSelectedChannel","item","setCurrentType","clearSelectedChannelAndItems","fetchItems","_this4","_callee5","_response","_response2","_context5","fetch","json","mist_stream_id","channel_external_source_id","channel_playlist_id","updateActiveItemId","id","_this5","_callee6","_context6","setMistStream","setChannelPlaylist","setExternalSource","setPlaybackPriorityType","channel","priorityType","_this6","_callee7","dataToSend","index","_context7","setPriorityType","findIndex","mistStreamId","_this7","_callee8","_context8","channelPlaylistId","_this8","_callee9","_context9","externalSourceId","_this9","_callee10","_context10","nextPage","totalModalPages","Math","ceil","prevPage","setPage","page","nextChannelsPage","prevChannelsPage","setChannelsPage","fetchFirstPlaySettings","_this10","_callee11","_response$data4","_context11","updateFirstPlaySettings","_this11","_callee12","_context12","patch","errors","handleErrors","fetchActiveStreams","_this12","_callee13","_response$data5","_context13","setActiveStreamAsFirstPlay","activeStream","_this13","_callee14","videoPlayerStore","_context14","useVideoPlayerStore","mistServerUri","customVideoName","customMediaType","streamName","streamMimeType","showName","getters","filteredItems","currentItem","find","activeItem","paginatedItems","start","end","paginatedChannels","totalChannelsPages","activeChannelsCount","filter","active","usePageSetup","pageName","userStore","useUserStore","appSettingStore","useAppSettingStore","showFlashMessage","pageIsHidden","isMobile","window","innerWidth","fullPage","ott","showOttButtons","makeVideoTopRight","pageReload","pageWasReloaded","location","reload","router","on","event","search","shouldScrollToTop","requestAnimationFrame","topDiv","document","getElementById","scrollIntoView","behavior","scrollTo","setPrevUrl","noLayout","props","__props","clearFlashMessage","computed","flash","warning","_ref","route","reactive","_objectSpread","displayBadges","adminStore","useStreamStore","apiActiveStreams","mistStatus","form","challenge","username","password","mistUsername","ref","md5","require","mistAddress","getMistServerUri","_getMistServerUri","responseJson","isError","serverTypes","checkMistApiSendFunction","serverType","checkSend","_x","_ref2","_x2","getStatus","_ref3","apiRequest","authorize","authenticateMistServer","_authenticateMistServer","hashedPassword","authReturn","mistPassword","checkUpdates","mistDisplay","getApi","getCapabilities","getTotals","getActiveStreams","getClients","getLog","clearLog","browseRecordings","_x3","_getApi","request","mistDisplayPushForm","apiResponse"],"sourceRoot":""}