{"version":3,"file":"js/4526.js","mappings":"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","sources":["webpack://nottvbeta/./resources/js/Stores/GoLiveStore.js","webpack://nottvbeta/./resources/js/Stores/VideoAuxPlayerStore.js"],"sourcesContent":["import { defineStore } from 'pinia'\nimport { useNotificationStore } from '@/Stores/NotificationStore'\nimport { useVideoPlayerStore } from '@/Stores/VideoPlayerStore'\nimport { useVideoAuxPlayerStore } from '@/Stores/VideoAuxPlayerStore'\nimport videojs from 'video.js'\n\nconst initialState = () => ({\n    displayEpisodeGoLiveComponent: false,\n    isEpisode: null,\n    episode: null,\n    selectedEpisodeId: null,\n    preSelectedShowId: null,\n    selectedShowId: null,\n    // selectedShow: null, this uses the getter... set it up in the component as a computed property\n    shows: [], // Assuming you might want to store shows here too\n    streamKey: '', // Optional: Store the generated stream key if needed\n    wildcardId: '',\n    isLive: false,\n    isRecording: false,\n    streamInfo: null,\n    rtmpUri: null,\n    destinations: [], // New state for holding destinations\n    otherShowDestinations: [],\n    loadingOtherDestinations: false,\n    isLoadingDestinations: false,\n    loadingDestinationId: null,\n    processingRecordingChange: false,\n    isProcessingDisableAllAutoPushes: false,\n    playerIsReloading: false,\n    pushDestinationFormSubmitProcessing: false,\n    mistServerUri: null,\n    previousStreamStatus: null,\n    mistStreamPushDestinationFormModalMode: null,\n    destinationDetails: {},\n})\n\nexport const useGoLiveStore = defineStore('goLiveStore', {\n    state: initialState,\n    actions: {\n        reset() {\n            // Reset the store to its original state (clear all data)\n            Object.assign(this, initialState())\n        },\n        async fetchShows() {\n            try {\n                const response = await axios.get('/go-live/shows') // Adjust the URL as needed\n                this.shows = response.data\n            } catch (error) {\n                // console.error('Failed to fetch shows:', error)\n                // Handle error appropriately\n            }\n        },\n\n\n        // temporarily commenting this out\n        async generateStreamKey() {\n            if (!this.selectedShowId) {\n                // console.error('No show selected')\n                throw new Error('No show selected') // Throw an error to be caught by the caller\n            }\n\n            try {\n                const response = await axios.post(`/go-live/shows/${this.selectedShowId}/stream-key`)\n                // console.log('Stream key generated:', response.data)\n                // this.streamKey = response.data.stream_key // Assuming the response includes the stream key\n                // console.log('this new stream key: ' + this.streamKey)\n                // console.log('response data stream key: ' + response.data.stream_key)\n                // Update goLiveStore.selectedShow.mist_stream_wildcard_id with the returned stream key\n                if (this.selectedShowId && response.data.stream_key) {\n                    this.selectedShow.mist_stream_wildcard = response.data\n                    this.selectedShow.mist_stream_wildcard_id = response.data.stream_key\n                }\n                return response.data // Return the response data\n            } catch (error) {\n                // console.error('Error generating stream key:', error.response ? error.response.data : error)\n                throw error // Re-throw the error to be caught by the component\n            }\n        },\n\n        // Other actions...\n        updateAndGetStreamKey() {\n            const show = this.shows.find(show => show.id === this.selectedShowId) || null\n            const streamKey = show?.mist_stream_wildcard?.name || ' < RELOAD THIS PAGE TO GET YOUR STREAM KEY > '\n\n            // Perform the state update\n            this.streamKey = streamKey\n\n            // Return the stream key for immediate use\n            return streamKey\n        },\n\n\n        // async generateStreamKey() {\n        //     if (!this.selectedShowId) {\n        //         console.error(\"No show selected\");\n        //         throw new Error(\"No show selected\");\n        //     }\n        //\n        //     try {\n        //         const response = await axios.post(`/go-live/shows/${this.selectedShowId}/stream-key`);\n        //         console.log(\"Stream key generated:\", response.data);\n        //\n        //         // Find the index of the selected show in the shows array\n        //         const selectedIndex = this.shows.findIndex(show => show.id === this.selectedShowId);\n        //         if (selectedIndex !== -1) {\n        //             // Update the selected show with the new stream key information\n        //             this.shows[selectedIndex].mist_stream_wildcard = response.data;\n        //             this.shows[selectedIndex].mist_stream_wildcard_id = response.data.stream_key;\n        //         }\n        //         return response.data;\n        //     } catch (error) {\n        //         console.error(\"Error generating stream key:\", error.response ? error.response.data : error);\n        //         throw error;\n        //     }\n        // },\n\n\n        // setPreSelectedShowId(id) {\n        //     this.preSelectedShowId = id;\n        //     console.log('preSelectedShowId updated to:', this.preSelectedShowId);\n        // },\n        // Action to update selectedShowId and selectedShow based on selectedShowId\n        setSelectedShowId(showId) {\n            this.selectedShowId = showId\n            this.updateSelectedShow() // Call the method to update selectedShow based on new selectedShowId\n        },\n        // Method to find and update selectedShow based on selectedShowId\n        updateSelectedShow() {\n            this.selectedShow = this.shows.find(show => show.id === this.selectedShowId) || null\n        },\n        goLive() {\n            this.isLive = true\n        },\n        stopLive() {\n            this.isLive = false\n        },\n        async startRecording() {\n            // console.log('1 start recording in Go Live Store')\n            const notificationStore = useNotificationStore()\n            const showSlug = this.selectedShow.slug\n            // console.log(`Starting recording for show ${showSlug}`)\n            this.processingRecordingChange = true\n            try {\n                // console.log('2a post to /mist-stream/start-recording/')\n                const response = await axios.post('/mist-stream/start-recording/' + showSlug, {\n                    stream_name: this.streamKey,\n                })\n                // console.log('5 and we\\'re back in the GoLiveStore')\n                // console.log('Recording started successfully:', response.data)\n                // console.log('Stream Name:', this.streamKey)\n                const {message, status} = response.data\n                // Use the status from the response for the notification\n                notificationStore.setToastNotification(message, status)\n                // Update the recording status\n                this.isRecording = true\n            } catch (error) {\n                // console.error('Error starting push:', error)\n                notificationStore.setToastNotification('Failed to start recording.', 'error')\n                // Handle the error appropriately in your UI\n            } finally {\n                this.processingRecordingChange = false // Stop processing spinner regardless of outcome\n            }\n        },\n        async stopRecording() {\n            const notificationStore = useNotificationStore()\n            const showSlug = this.selectedShow.slug\n            // console.log(`Stopping recording for show ${showSlug}`)\n            this.processingRecordingChange = true\n            // console.log(`Stopping recording for show ${showSlug}`)\n            try {\n                const response = await axios.post('/mist-stream/stop-recording/' + showSlug, {\n                    stream_name: this.streamKey,\n                })\n                // console.log('Recording stopped successfully:', response.data)\n                const {message, status} = response.data\n                notificationStore.setToastNotification(message, status)\n                // Update the recording status\n                this.isRecording = false\n            } catch (error) {\n                // console.error('Error stopping recording:', error)\n                notificationStore.setToastNotification('Failed to stop push.', 'error')\n            } finally {\n                this.processingRecordingChange = false // Stop processing spinner regardless of outcome\n            }\n        },\n        // async fetchStreamInfo(streamName) {\n        //     try {\n        //         // const response = await fetch(`http://mist.nottv.io:8080/json_${encodedStreamName}.js`); // Replace with your URL\n        //         const response = await fetch(`/fetch-stream-info/${streamName}`) // Replace with your URL\n        //         if (!response.ok) throw new Error('Failed to fetch')\n        //         this.streamInfo = await response.json() // Store the data in serverInfo\n        //     } catch (error) {\n        //         console.error('Error fetching server info:', error)\n        //     }\n        // },\n        async fetchStreamInfo() {\n            const notificationStore = useNotificationStore()\n            // console.log('start fetch stream info...')\n            try {\n                if (!this.mistServerUri) {\n                    await this.fetchMistServerUri()\n                }\n                // Then, use the URI in your next request\n                const response = await axios.post('/fetch-stream-info', {\n                    streamName: this.streamKey,\n                    mistServerUri: this.mistServerUri, // Pass it as a string\n                })\n                // console.log('response returned...')\n                // console.log(response.data);\n                this.streamInfo = response.data.streamInfo || []\n                // Assuming a successful response might look like {\"message\": \"Stream is online\", \"status\": \"success\"}\n                let message, status\n\n                // Check if the response contains an error field\n                if (response.data.streamInfo.error) {\n                    message = response.data.streamInfo.error\n                    status = 'error' // Assuming 'error' as a fallback status\n                    // console.log('error returned...')\n                } else if (response.data.message && response.data.success) {\n                    // If it's a success message with a status\n                    message = response.data.message\n                    status = 'info'\n                    // console.log('success returned...')\n\n                } else {\n                    // Fallback for unexpected response structure\n                    message = 'Received unexpected response from server.'\n                    status = 'info' // Default to 'info' or another appropriate fallback status\n                    // console.log('unexpected response returned...')\n                }\n\n                // Use the status from the response for the notification\n                // notificationStore.setToastNotification(message, status)\n            } catch (error) {\n                // console.error(error);\n                notificationStore.setToastNotification('Failed to fetch stream info.', 'error')\n                // console.log('catch error...')\n            }\n        },\n        async fetchRtmpUri() {\n            try {\n                const response = await fetch(`/fetch-rtmp-uri`)\n                if (!response.ok) throw new Error('Failed to fetch')\n\n                // Parse the plain text body of the response\n                // Store the RTMP URI string in a Vue data property or similar\n                this.rtmpUri = await response.text()\n            } catch (error) {\n                // console.error('Error fetching RTMP URI:', error)\n            }\n        },\n        clearStreamInfo() {\n            this.streamInfo = null\n        },\n        toggleDisplayEpisodeGoLiveComponent(episode) {\n            // const videoPlayerAuxStore = useVideoAuxPlayerStore()\n            // videoPlayerAuxStore.reset()\n            this.displayEpisodeGoLiveComponent = !this.displayEpisodeGoLiveComponent\n            this.isEpisode = !!this.displayEpisodeGoLiveComponent\n            this.episode = episode\n            this.selectedShowId = this?.episode?.show_id\n\n        },\n        updateEpisode(episode) {\n            this.episode = episode\n        },\n        async fetchMistServerUri() {\n            const videoAuxPlayerStore = useVideoAuxPlayerStore()\n            let uriResponse = await axios.get('/mist-server/uri')\n            this.mistServerUri = uriResponse.data\n            videoAuxPlayerStore.setMistServerUri(this.mistServerUri)\n        },\n        async reloadPlayer() {\n            const videoAuxPlayerStore = useVideoAuxPlayerStore()\n            const notificationStore = useNotificationStore()\n            this.playerIsReloading = true // Start loading\n            try {\n                // First, fetch the URI\n\n                // let uriResponse = await axios.get('/mist-server/uri');\n                // this.mistServerUri = uriResponse.data; // Accessing the data prop// erty\n                // // Create an object and set the 'name' property\n                const mistStream = {\n                    name: this.streamKey,\n                }\n                // // Now, use this URI in your next request\n                // const response = await axios.post('/fetch-stream-info', {\n                //     streamName: this.streamKey,\n                //     mistServerUri: this.mistServerUri,\n                // });\n                // Now, you can pass the 'mistStream' object to the method\n                await videoAuxPlayerStore.loadMistStreamVideo(mistStream, true).then(\n                    // await this.fetchStreamInfo(),\n                )\n            } catch (error) {\n                // console.error(error);\n                // notificationStore.setGeneralServiceNotification('Failed to reload player', error)\n                notificationStore.setToastNotification('Failed to reload player.', 'error')\n            } finally {\n                this.playerIsReloading = false // Stop loading regardless of outcome\n            }\n\n        },\n        async fetchOtherShowDestinations() {\n            this.loadingOtherDestinations = true\n            try {\n                const response = await axios.get('/go-live/existing-destinations', {\n                    params: {\n                        showId: this.selectedShowId,\n                        episodeId: this.selectedEpisodeId,\n                    },\n                })\n                this.otherShowDestinations = response.data.destinations\n                this.loadingOtherDestinations = false\n            } catch (error) {\n                notificationStore.setToastNotification('Failed to fetch destinations.', 'error')\n                console.error('Error fetching other show destinations', error)\n                this.loadingOtherDestinations = false\n            }\n        },\n        async copyDestinations(destinationIds) {\n            this.loadingOtherDestinations = true;\n            try {\n                const payload = {\n                    destinationIds,\n                    showId: this.selectedShowId,\n                    episodeId: this.selectedEpisodeId,\n                    mistStreamWildcardId: this.wildcardId\n                };\n                console.log('Sending copy destinations request', payload);\n\n                const response = await axios.post('/go-live/copy-destinations', payload);\n                console.log('Received response', response.data);\n\n                this.destinations = response.data.destinations || [];\n                const notificationStore = useNotificationStore();\n                notificationStore.setToastNotification(response.data.message, response.data.status);\n                this.loadingOtherDestinations = false;\n                return true; // Indicate success\n            } catch (error) {\n                console.error('Error copying destinations', error);\n                const notificationStore = useNotificationStore();\n                notificationStore.setToastNotification('Failed to copy destinations.', 'error');\n                this.loadingOtherDestinations = false;\n                return false; // Indicate failure\n            }\n        },\n        async fetchPushDestinations() {\n            const notificationStore = useNotificationStore()\n            this.isLoadingDestinations = true // Start loading\n            try {\n                const response = await axios.post('/go-live/fetch-push-destinations', {\n                    showId: this.selectedShowId,\n                    streamName: this.streamKey,\n                    backgroundFetch: false,\n                })\n                // console.log(response.data);\n                this.destinations = response.data.destinations || []\n                this.isRecording = response.data.recording || false\n                console.log('response about recording: ' + response.data.recording)\n                // Extract message and status from the response\n                const {message, status} = response.data\n                // Use the status from the response fo\n                // r the notification\n                // notificationStore.setToastNotification(message, status)\n            } catch (error) {\n                // console.error(error);\n                // notificationStore.setGeneralServiceNotification('Failed to reload player', error)\n                notificationStore.setToastNotification('Failed to fetch push destinations.', 'error')\n            } finally {\n                this.isLoadingDestinations = false // Stop loading regardless of outcome\n            }\n        },\n        async backgroundFetchPushDestinations() {\n            // Background Fetch doesn't use Toast Notifications,\n            // Keep the fetch silent in the background.\n\n            this.isLoadingDestinations = true // Start loading\n            try {\n                const response = await axios.post('/go-live/fetch-push-destinations/', {\n                    showId: this.selectedShowId,\n                    streamName: this.streamKey,\n                    backgroundFetch: true,\n                })\n                this.destinations = response.data.destinations || []\n                this.isRecording = response.data.recording || false\n            } catch (error) {\n                // console.error(error);\n                // notificationStore.setGeneralServiceNotification('Error Fetching Push Destinations', error)\n                notificationStore.setToastNotification('Failed to fetch push destinations.', 'error')\n            } finally {\n                this.isLoadingDestinations = false // Stop loading regardless of outcome\n            }\n        },\n        async deleteDestination(destinationId) {\n            // Confirm deletion with the user before proceeding\n            if (confirm(`Are you sure you want to delete the destination with ID: ${destinationId}?`)) {\n                try {\n                    // Perform the delete operation\n                    await axios.delete('/mist-stream-push-destinations/' + destinationId)\n                    // Optionally, remove the item from your local state to update the UI\n                    this.destinations = this.destinations.filter(destination => destination.id !== destinationId)\n                } catch (error) {\n                    notificationStore.setGeneralServiceNotification('Error deleting destination', error)\n                    // console.error(`Error deleting destination with ID: ${destinationId}`, error)\n                }\n            }\n        },\n        async startPush(destinationId, fullPushUri) {\n            const notificationStore = useNotificationStore()\n            this.loadingDestinationId = destinationId\n            // console.log(`Starting push for destination ${destinationId}`)\n            try {\n                const response = await axios.post('/mist-stream/start-push', {\n                    destination_id: destinationId,\n                    full_push_uri: fullPushUri,\n                    stream_name: this.streamKey,\n                })\n                // console.log('Push started successfully:', response.data)\n                // console.log('Destination ID:', destinationId)\n                // console.log('Full Push URI:', fullPushUri)\n                // console.log('Stream Name:', this.streamKey)\n                const {message, status} = response.data\n                // Use the status from the response for the notification\n                notificationStore.setToastNotification(message, status)\n                // Update the component's state to reflect the change\n                const index = this.destinations.findIndex(destination => destination.id === destinationId)\n                if (index !== -1) {\n                    this.destinations[index].push_is_started = 1\n                }\n            } catch (error) {\n                // console.error('Error starting push:', error)\n                notificationStore.setToastNotification('Failed to start push.', 'error')\n                // Handle the error appropriately in your UI\n            } finally {\n                this.loadingDestinationId = null // Stop loading regardless of outcome\n            }\n        },\n        async stopPush(destinationId) {\n            const notificationStore = useNotificationStore()\n            this.loadingDestinationId = destinationId\n            // console.log(`Stopping push for destination ${destinationId}`)\n            try {\n                const response = await axios.post('/mist-stream/stop-push', {destination_id: destinationId})\n                // console.log('Push stopped successfully:', response.data)\n                const {message, status} = response.data\n                notificationStore.setToastNotification(message, status)\n                // Update the component's state to reflect the change\n            } catch (error) {\n                // console.error('Error stopping push:', error)\n                notificationStore.setToastNotification('Failed to stop push.', 'error')\n            } finally {\n                this.loadingDestinationId = null // Stop loading regardless of outcome\n                const index = this.destinations.findIndex(destination => destination.id === destinationId)\n                if (index !== -1) {\n                    this.destinations[index].push_is_started = 0\n                }\n            }\n        },\n        async enableAutoPush(destinationId) {\n            this.loadingDestinationId = destinationId\n            const notificationStore = useNotificationStore()\n            try {\n                const response = await axios.post('/mist-stream/push-auto-add/' + destinationId)\n                // console.log('Auto push enabled successfully:', response.data)\n                const {message, status} = response.data\n                notificationStore.setToastNotification(message, status)\n                const index = this.destinations.findIndex(destination => destination.id === destinationId)\n                if (index !== -1) {\n                    this.destinations[index].has_auto_push = 1\n                }\n            } catch (error) {\n                // console.error('Error enabling auto push:', error)\n                notificationStore.setToastNotification('Failed to enable auto push.', 'error')\n            } finally {\n                this.loadingDestinationId = null // Stop loading regardless of outcome\n            }\n        },\n        async disableAutoPush(destinationId) {\n            const notificationStore = useNotificationStore()\n            this.loadingDestinationId = destinationId\n            try {\n                const response = await axios.post('/mist-stream/push-auto-remove/' + destinationId)\n                // console.log('Auto push removed successfully:', response.data)\n                const {message, status} = response.data\n                notificationStore.setToastNotification(message, status)\n                const index = this.destinations.findIndex(destination => destination.id === destinationId)\n                if (index !== -1) {\n                    this.destinations[index].has_auto_push = 0\n                }\n            } catch (error) {\n                // console.error('Error disabling auto push:', error)\n                notificationStore.setToastNotification('Failed to disable auto push.', 'error')\n            } finally {\n                this.loadingDestinationId = null // Stop loading regardless of outcome\n            }\n        },\n        async disableAllAutoPushes() {\n            const notificationStore = useNotificationStore()\n            this.isProcessingDisableAllAutoPushes = true\n            try {\n                const response = await axios.post('/mist-stream/remove-all-auto-pushes-for-stream', {'streamName': this.streamKey})\n                // console.log('Auto push disabled successfully:', response.data)\n                const {message, status} = response.data\n                notificationStore.setToastNotification(message, status)\n                await this.fetchPushDestinations()\n            } catch (error) {\n                // console.error('Error disabling auto push:', error)\n                notificationStore.setToastNotification('Failed to disable auto push.', 'error')\n            } finally {\n                this.isProcessingDisableAllAutoPushes = false // Stop loading regardless of outcome\n                await this.fetchPushDestinations()\n            }\n        },\n    },\n    getters: {\n        selectedShow: (state) => {\n            const show = state.shows.find(show => show.id === state.selectedShowId) || null\n            state.streamKey = show?.mist_stream_wildcard?.name || 'Fallback value if undefined'\n            state.wildcardId = show?.mist_stream_wildcard?.id || 'Fallback value if undefined'\n            state.isRecording = show?.mist_stream_wildcard?.is_recording || false\n            return show\n        },\n        fullRtmpUri: (state) => {\n            return state.rtmpUri ? state.rtmpUri + 'live/' : ''\n        },\n        fullUrl: (state) => {\n            // Directly construct fullRtmpUri from state\n            const fullRtmpUri = state.rtmpUri ? state.rtmpUri + 'live/' : ''\n\n            // Directly find the show based on selectedShowId to avoid using getters\n            // const show = state.shows.find(show => show.id === state.selectedShowId) || null;\n            // const streamKey = show?.mist_stream_wildcard?.name || 'Fallback value if undefined';\n\n            // Return the concatenated URL\n            return `${fullRtmpUri}${state.streamKey}`\n        },\n        // Example getter that might filter destinations based on some criteria\n        activeDestinations: (state) => {\n            return state.destinations.filter(destination => destination.push_is_started)\n        },\n        sourceName: (state) => {\n            if (state.selectedShow?.mist_stream_wildcard?.name) {\n                return state.selectedShow.mist_stream_wildcard.name\n            } else if (state.episode?.mist_stream_wildcard?.name) {\n                return state.episode.mist_stream_wildcard.name\n            }\n            return null // No source available\n        },\n        streamOffline: (state) => {\n            // Check if the 'error' key exists and if its value is 'Stream is offline'\n            // If streamInfo is null or undefined, it defaults to an empty object {}\n            return (state.streamInfo?.error ?? '') === 'Stream is offline'\n        },\n    },\n\n\n})\n","import { defineStore } from 'pinia'\nimport { useAppSettingStore } from '@/Stores/AppSettingStore'\nimport { useStreamStore } from '@/Stores/StreamStore'\nimport { useUserStore } from '@/Stores/UserStore'\nimport { useChannelStore } from '@/Stores/ChannelStore'\nimport { useShowStore } from '@/Stores/ShowStore'\nimport { useAudioStore } from '@/Stores/AudioStore'\nimport videojs from 'video.js'\nimport { usePage } from '@inertiajs/vue3'\nimport { nextTick } from 'vue'\nimport { useNotificationStore } from '@/Stores/NotificationStore'\n\nconst initialState = () => ({\n    mistServerUri: 'https://mist.nottv.io/', // tec21: 2024-02-09, if we don't start with the address here changing channels is really slow and buggy. Address for the MistServer listed in the Admin Settings saved in AppSetting\n    player: null, // Video.js player instance\n    eventListenersAttached: false, // Track if listeners are attached\n    videoPlayerLoaded: false,\n    class: '',\n    videoContainerClass: '',\n    // ottClass: 'OttClose',\n    videoSourceIdSrc1: '',\n    videoSourceIdSrc2: '',\n    videoSourceIdSrc3: '',\n    videoSourceTypeSrc1: '',\n    videoSourceTypeSrc2: '',\n    videoSourceTypeSrc3: '',\n    firstPlayVideoSourceType: '',\n    firstPlayVideoSource: '',\n    key: '',\n    videoName: '',\n    videoSource: '',\n    videoSourceType: '',\n    videoPoster: '',\n    nextSource: '',\n    previousSource: '',\n    currentView: '',\n    currentChannelId: 0,\n    currentChannelName: '',\n    currentShow: {},\n    currentShowEpisode: {},\n    currentVideo: {},\n    hasVideo: false,\n    controls: true,\n    muted: true,\n    paused: true,\n    // videoCurrentTime: '',\n    currentTime: 0, // Current playback time in seconds\n    duration: 0, // Total video duration in seconds\n    formattedTime: '00:00 / 00:00', // Formatted time string\n    blue: false, // DO NOT REMOVE\n    videoIsYoutube: false,\n    videoUploadComplete: false,\n})\n\nexport const useVideoAuxPlayerStore = defineStore('videoAuxPlayerStore', {\n    state: initialState,\n    actions: {\n        reset() {\n            // Reset the store to its original state (clear all data)\n            Object.assign(this, initialState())\n        },\n\n        async getMistServerUri() {\n            try {\n                let response = await axios.get('/mist-server/uri')\n                this.mistServerUri = response.data\n            } catch (error) {\n                console.error(error)\n            }\n        },\n\n        // Initialize or update the player instance\n        setPlayer(playerInstance) {\n            this.player = playerInstance\n            this.initializePlayer().then(() => {\n                this.attachEventListeners() // Attach event listeners after initialization\n            }).catch(error => {\n                console.error('Error during video player initialization:', error)\n            })\n        },\n\n        // Initialize the player with necessary settings and start playback\n        async initializePlayer() {\n            if (!this.player) {\n                console.error('Video.js player is not initialized.')\n                return\n            }\n\n            await nextTick() // Ensure Vue's DOM updates are processed\n\n            // Perform any necessary audio context and node setup\n            await useAudioStore().ensureAudioContextAndNodesReady(this.player)\n\n            // Apply initial player settings\n            this.player.controls(false)\n            this.player.muted(this.muted)\n\n            // Attempt to start playback\n            this.player.ready(() => {\n                this.player.play().then(() => {\n                    console.log('Playback started successfully')\n                }).catch(error => {\n                    console.error('Error trying to play the video:', error)\n                    // Handle the error (e.g., showing a user-friendly message)\n                })\n            })\n        },\n\n        // Attach event listeners to the player\n        attachEventListeners() {\n            if (!this.player || this.eventListenersAttached) {\n                console.log('Event listeners are already attached or video player is not initialized.')\n                return\n            }\n\n            this.player.on('timeupdate', this.handleTimeUpdate)\n            this.player.on('fullscreenchange', this.handleFullscreenChange)\n            this.player.on('play', this.handlePlay)\n            this.player.on('pause', this.handlePause)\n            this.player.on('error', this.handleError)\n\n            this.eventListenersAttached = true\n            console.log('Event listeners attached.')\n        },\n\n        // Detach event listeners from the player\n        detachEventListeners() {\n            if (!this.player || !this.eventListenersAttached) {\n                console.log('Event listeners are already detached or video player is not initialized.')\n                return\n            }\n\n            useAudioStore().stopAudioLevelMonitoring()\n            this.player.off('timeupdate', this.handleTimeUpdate)\n            this.player.off('fullscreenchange', this.handleFullscreenChange)\n            this.player.off('play', this.handlePlay)\n            this.player.off('pause', this.handlePause)\n            this.player.off('error', this.handleError)\n\n            this.eventListenersAttached = false\n            console.log('Event listeners detached.')\n        },\n\n        // Dispose of the player and perform cleanup\n        disposePlayer() {\n            if (!this.player) {\n                console.error('Video player is not initialized.')\n                return\n            }\n            this.detachEventListeners() // Detach event listeners if attached\n            this.player.dispose() // Dispose of the player instance\n            this.player = null // Reset the player state\n\n            // Optionally, stop audio level monitoring if linked to the player lifecycle\n            // const audioStore = useAudioStore();\n            // audioStore.stopAudioLevelMonitoring();\n\n            console.log('Video player disposed and cleaned up.')\n        },\n\n        // New method to prepare for a new video source\n        prepareForNewVideoSource(source) {\n            console.log('Preparing for new video source')\n\n            // Example: Clear any existing channel or video-specific state\n            // useChannelStore().clearChannel()\n\n            // Reset or cleanup any existing video playback, if necessary\n            // this.resetPlayback();\n\n            // Load and play the new video source\n            this.loadNewVideo(source)\n        },\n\n        resetPlayback() {\n            if (this.player) {\n                this.player.pause()\n                this.player.muted(true)\n                this.player.currentTime(0) // Optionally reset the time\n                // Further cleanup logic here, if necessary\n                this.detachEventListeners() // Detach event listeners if attached\n            }\n        },\n\n        // Event handlers\n        handleTimeUpdate() {\n            // console.log('Handling timeupdate...');\n            // Implement your logic\n            this.currentTime = this.player.currentTime()\n            this.duration = this.player.duration()\n            const progressPercentage = (this.currentTime / this.duration) * 100\n            this.formattedTime = `${this.formatDuration(this.currentTime)} / ${this.formatDuration(this.duration)}`\n\n            // Update UI elements or emit events as needed\n            // Note: Direct manipulation of the DOM or component refs from the store is not recommended\n\n        },\n        // for the handleTimeUpdate eventHandler\n        formatDuration(durationInSeconds) {\n            const hours = Math.floor(durationInSeconds / 3600)\n            const minutes = Math.floor((durationInSeconds % 3600) / 60)\n            const seconds = Math.floor(durationInSeconds % 60)\n\n            const parts = [hours, minutes, seconds].map(part => part.toString().padStart(2, '0'))\n            return parts.join(':')\n        },\n        handleFullscreenChange() {\n            console.log('Handling fullscreenchange...')\n            // Implement your logic\n            this.player?.on('fullscreenchange', () => {\n                if (this.player.isFullscreen()) {\n                    // Video is entering fullscreen mode\n                    // You can add custom behavior for entering fullscreen here if needed\n                } else {\n                    // Video is exiting fullscreen mode\n                    // Check if the video was playing before entering fullscreen\n                    if (this.player.paused() === false) {\n                        // Resume playback after exiting fullscreen\n                        this.player.play()\n                    }\n                }\n            })\n        },\n        handlePlay() {\n            console.log('Handling play...')\n            // Implement your logic\n            this.player?.on('play', () => {\n                this.paused = false\n            })\n        },\n        handlePause() {\n            console.log('Handling pause...')\n            // Implement your logic\n            this.player?.on('pause', () => {\n                this.paused = true\n            })\n        },\n        handleError() {\n            console.log('Handling error...')\n            // Implement your logic\n            this.player?.on('error', function () {\n                const error = this.player.error()\n                console.error('Video.js Error:', error.code, error.message)\n            })\n        },\n        makeBlue() {\n            // for testing. DO NOT REMOVE.\n            this.blue = true\n        },\n        // Apparently this loadFirstPlay isn't being used...\n        // loadFirstPlay() {\n        //     const {props} = usePage()\n        //     let videoJs = videojs('aux-player')\n        //     const type = props.firstPlayVideoSourceType\n        //     const src = props.firstPlayVideoSource\n        //     videoJs.ready(() => {\n        //         videoJs.src({src, type})\n        //         videoJs.play().then(() => {\n        //             console.log('Playback started successfully')\n        //         }).catch(error => {\n        //             console.error('Error trying to play the video:', error)\n        //             // Handle the error (e.g., showing a user-friendly message)\n        //         })\n        //     })\n        //     console.log(type)\n        //     console.log(src)\n        // },\n        // Toggle mute state\n        toggleMute() {\n            if (this.muted) {\n                this.unMute()\n            } else {\n                this.mute()\n            }\n        },\n        // Mute the video\n        mute() {\n            if (this.player) {\n                this.player.muted(true)\n                this.muted = true\n            }\n        },\n        // Unmute the video\n        unMute() {\n            // const audioStore = useAudioStore()\n\n            if (this.player) {\n                // Prepare audio setup for when it's unmuted\n                // audioStore.userInteractionForAudio()\n\n                // Optionally, if fadeInAudioFromMuted is a gradual process,\n                // ensure this.player.muted(false) is called within that function.\n                // audioStore.fadeInAudioFromMuted()\n\n                this.player.muted(false)\n                this.muted = false\n            }\n        },\n        togglePlay() {\n            let videoJs = videojs('aux-player')\n\n            if (this.paused) {\n                videoJs.play()\n            } else {\n                videoJs.pause()\n            }\n        },\n        load() {\n            let videoJs = videojs('aux-player')\n            videoJs.load()\n        },\n        loadNewLiveSource(source, sourceType) {\n            let videoJs = videojs('aux-player')\n            let fullSourceUrl = this.mistServerUri + '/hls/' + source + '/index.m3u8'\n            videoJs.src({'src': fullSourceUrl, 'type': sourceType});\n            videoJs.play()\n        },\n        pause() {\n            let videoJs = videojs('aux-player')\n            videoJs.controls(false)\n            videoJs.pause()\n            this.paused = true\n        },\n        play() {\n            let videoJs = videojs('aux-player')\n\n            videoJs.play()\n            videoJs.controls(false)\n            this.paused = false\n        },\n        // next not built yet\n        next() {\n            let videoJs = videojs('aux-player')\n            videoJs.controls(false)\n            videoJs.src(this.nextSource)\n        },\n        // back not built yet\n        back() {\n            let videoJs = videojs('aux-player')\n            videoJs.controls(false)\n            videoJs.src(this.previousSource)\n        },\n        fullscreen() {\n            let videoJs = videojs('aux-player')\n            videoJs.controls(false)\n            // videoJs.fullscreen(this.previousSource)\n            videoJs.requestFullscreen()\n        },\n        getVideoCurrentTime() {\n            let videoJs = videojs('aux-player')\n            videoJs.controls(false)\n            this.videoCurrentTime = videoJs.currentTime\n        },\n\n\n        // This playNewVideo was created to access the audioContext\n        // which our audio compressor uses. This is new as of 2/2/2024\n        // ~ tec21\n\n        // playNewVideo(source) {\n        //     useChannelStore().clearChannel() // Reset or clear channel store\n        //     const videoJs = videojs('aux-player')\n        //     let videoSrc, videoSourceType\n        //     // Determine the source type and construct the source URL if necessary\n        //     if (source.mediaType === 'externalVideo') {\n        //         videoSrc = source.video_url // Direct URL to the video\n        //         videoSourceType = source.type // MIME type, e.g., 'video/youtube', 'video/mp4'\n        //     } else {\n        //         // Construct file path for internal videos\n        //         videoSrc = `${source.cdn_endpoint}${source.cloud_folder}${source.folder}/${source.file_name}`\n        //         videoSourceType = source.type // MIME type, typically 'video/mp4' for file-based sources\n        //     }\n        //     this.resumeAudioContextIfNeeded()\n        //     videoJs.src({src: videoSrc, type: videoSourceType})\n        //     videoJs.muted(false)\n        // },\n\n        // getSourceDetails(source) {\n        //     let videoSrc = source.video_url; // Directly access the video URL\n        //\n        //     // Default to 'video/mp4' if type is falsy ('', null, undefined, etc.)\n        //     let videoSourceType = source.type || 'video/mp4'\n        //\n        //     // Determine the mediaType and construct the source URL if necessary\n        //     if (source.mediaType === 'externalVideo') {\n        //         videoSrc = source.video_url // Direct URL to the video\n        //     } else {\n        //         // Internal video: construct the path, ensuring the file name is encoded\n        //         let encodedFileName = encodeURIComponent(source.file_name);\n        //         console.log(encodedFileName)\n        //         videoSrc = `${source.cdn_endpoint}${source.cloud_folder}${source.folder}/${encodedFileName}`\n        //     }\n        //     // Logic to determine videoSrc and videoSourceType\n        //     console.log(`Video Source: ${videoSrc}, Type: ${videoSourceType}`);\n        //     return { videoSrc, videoSourceType } // Return as an object\n        // },\n\n\n        getSourceDetails(source) {\n            let videoSrc, videoSourceType\n\n            console.log('getSourceDetails called with source:', source);\n\n            // Default to 'video/mp4' if type is not specified or is empty\n            videoSourceType = source.type || 'video/mp4'\n            console.log(`Determined Video Source Type: ${videoSourceType}`);\n\n            if (source.mediaType === 'externalVideo') {\n                // For external videos, use the URL as provided without encoding\n                videoSrc = source.video_url\n                console.log('Using external video source:', videoSrc);\n            } else {\n                console.log('CDN Endpoint:', source.cdn_endpoint);\n                console.log('Cloud Folder:', source.cloud_folder);\n                console.log('Folder:', source.folder);\n                console.log('File Name:', source.file_name);\n                // For internal videos, construct the URL from its components\n                // Here, we assume the cdn_endpoint, cloud_folder, and folder are correctly formatted\n                // and do not require encoding. Only the file_name might need encoding.\n                const basePath = `${source.cdn_endpoint}${source.cloud_folder}${source.folder}/`\n                // const encodedFileName = encodeURIComponent(source.file_name);\n                const fileName = source.file_name\n                videoSrc = basePath + fileName\n                console.log('Constructed internal video source:', videoSrc);\n                // If your server or CDN is configured to handle spaces in URLs without %20 encoding\n                // or if the original working URLs did not use standard URL encoding,\n                // you might adjust the encoding strategy here.\n                // For example, to replace spaces with %20 but leave other characters as-is:\n                // const fileNameForUrl = source.file_name.replace(/ /g, '%20');\n                // videoSrc = basePath + fileNameForUrl;\n            }\n\n            console.log(`Final Constructed Video Source: ${videoSrc}, Type: ${videoSourceType}`);\n            return {videoSrc, videoSourceType}\n        },\n\n\n        loadNewVideo(source) {\n            try {\n                let videoJs = videojs('aux-player');\n                console.log('LOAD NEW VIDEO');\n                const audioStore = useAudioStore();\n                // Correctly destructure the returned object to get videoSrc and videoSourceType\n                const {videoSrc, videoSourceType} = this.getSourceDetails(source);\n\n                // Example: Stopping and cleaning up the current video and audio setup\n                if (videoJs) {\n                    videoJs.src({'src': videoSrc, 'type': videoSourceType});\n\n                    videoJs.ready(() => {\n                        // ensureAudioContextAndNodesReady does the following:\n                        // 1. Resumes AudioContext if suspended.\n                        // 2. (Re)connects MediaElementSource from the video element to AudioContext.\n                        audioStore.deferAudioSetup = false;\n                        audioStore.ensureAudioContextAndNodesReady(videoJs).then(() => {\n                            // Only attempt to play the video after ensuring the AudioContext is ready\n                            videoJs.play().catch(error => {\n                                useNotificationStore().setGeneralServiceNotification('Error', 'Playback initiation error: ' + error)\n                                console.error('Playback initiation error: ', error);\n                            });\n\n                            // Consider toggling mute based on the user's preference or previous state\n                            videoJs.muted(false);\n                            this.muted = false;\n                        });\n                    });\n                }\n            } catch (error) {\n                // Log the error or perform any other error handling\n                useNotificationStore().setGeneralServiceNotification('Error', 'Error loading new video: ' + error)\n                console.error('Error loading new video: ', error);\n            }\n        },\n\n        // loadNewVideo(source) {\n        //     console.log('LOAD NEW VIDEO TTTTTTTTTTTTTTTTTTTTTTTTTS');\n        //     console.log('LOAD NEW VIDEO initiated with source:', source);\n        //     const audioStore = useAudioStore();\n        //     this.unMute();\n        //     // Destructure the returned object to get videoSrc and videoSourceType\n        //     const { videoSrc, videoSourceType } = this.getSourceDetails(source);\n        //     console.log(`Video source details received: Src - ${videoSrc}, Type - ${videoSourceType}`);\n        //\n        //     // Ensure you're using the same player instance (`videoJs` in this context) for consistency\n        //     let videoJs = videojs('aux-player'); // Ensure this ID matches your video player element\n        //     console.log('Video.js player instance created or retrieved.');\n        //\n        //     // Stop and clean up the current video and audio setup if necessary\n        //     videoJs.ready(() => {\n        //         console.log('Video.js player is ready.');\n        //         videoJs.src({ 'src': videoSrc, 'type': videoSourceType });\n        //         console.log(`Video source set: ${videoSrc} of type ${videoSourceType}`);\n        //\n        //         // Ensure AudioContext and nodes are ready\n        //         audioStore.ensureAudioContextAndNodesReady(videoJs).then(() => {\n        //             console.log('Audio context and nodes are ready. Attempting to play video.');\n        //\n        //             videoJs.play().then(() => {\n        //                 console.log('Video playback started successfully.');\n        //             }).catch(error => {\n        //                 console.error('Playback initiation error:', error);\n        //             });\n        //             // Attempt to play the video after ensuring the AudioContext is ready\n        //             // videoJs.play().catch(error => {\n        //             //     console.error('Playback initiation error:', error);\n        //             // });\n        //\n        //             // Apply the unMute logic from loadMistStreamVideo to ensure audio is correctly configured\n        //             this.unMute();\n        //             console.log('Audio unmuted.');\n        //             this.paused = false;\n        //             console.log('Paused flag set to false.');\n        //         }).catch(error => {\n        //             console.error('Error ensuring audio context and nodes are ready:', error);\n        //         });\n        //     });\n        // },\n\n        playNewVideo() {\n            console.log('PLAY NEW VIDEO')\n            if (this.player) {\n                // Wait for the video to be ready before playing\n                this.player.ready(() => {\n                    this.player.play()\n                    // Assuming you want to unmute here; check if this aligns with user interaction policies\n                    this.player.muted(false)\n                    this.muted = false\n                })\n            }\n        },\n\n\n// load video from different types of sources:\n// Url\n// YouTube\n// EmbedCode\n// Mist\n// File\n        loadNewSourceFromYouTube(source) {\n            this.videoIsYoutube = true\n            useChannelStore().clearChannel()\n            let videoJs = videojs('aux-player')\n            this.videoSource = source\n            this.videoSourceType = 'video/youtube'\n            videoJs.src({'src': this.videoSource, 'type': this.videoSourceType})\n            videoJs.controls(false)\n            this.unMute()\n            this.paused = false\n        },\n        loadNewLiveSourceFromRumble(source) {\n            this.videoIsYoutube = true\n            useChannelStore().clearChannel()\n            let videoJs = videojs('aux-player')\n            this.videoSource = source\n            this.videoSourceType = 'application/x-mpegURL'\n            videoJs.src({'src': this.videoSource, 'type': this.videoSourceType})\n            videoJs.controls(false)\n            this.unMute()\n            this.paused = false\n        },\n        loadNewSourceFromUrl(source) {\n            try {\n                this.videoIsYoutube = false;\n                useChannelStore().clearChannel();\n                let videoJs = videojs('aux-player');\n\n                if (!source.video_url || !source.type) {\n                    useNotificationStore().setGeneralServiceNotification('Error', 'Invalid video source.')\n                    throw new Error(\"Invalid video source.\");\n                }\n\n                this.videoSource = source.video_url;\n                this.videoSourceType = source.type;\n                videoJs.src({'src': source.video_url, 'type': source.type});\n\n                this.unMute();\n                this.paused = false;\n            } catch (error) {\n                useNotificationStore().setGeneralServiceNotification('Error', 'Failed to load new source: ' + error)\n                console.error(\"Failed to load new source:\", error);\n                throw error; // Re-throw the error to be caught by the caller\n            }\n        },\n        loadNewSourceFromMist(source) {\n            this.videoIsYoutube = false\n            let videoJs = videojs('aux-player')\n            let filePath = 'https://mist.not.tv/hls/'\n            this.videoSource = filePath + source + '/index.m3u8'\n            this.videoSourceType = 'application/x-mpegURL'\n            videoJs.src({'src': this.videoSource, 'type': this.videoSourceType})\n            this.unMute()\n            this.paused = false\n        },\n        loadNewSourceFromFile(source) {\n            this.videoIsYoutube = false\n            useChannelStore().clearChannel()\n            let videoJs = videojs('aux-player')\n            let filePath = source.cdn_endpoint + source.cloud_folder + source.folder + '/'\n            this.videoSource = source.file_name\n            this.videoSourceType = source.type\n            videoJs.src({'src': filePath + this.videoSource, 'type': this.videoSourceType})\n            this.unMute()\n            this.paused = false\n        },\n\n        // The new load video functions (2024-02-09 tec21 and ChatGPT)\n        loadExternalSourceVideo() {\n\n        },\n        loadPlaylistVideos() {\n\n        },\n        async loadMistStreamVideo(mistStream, stayMuted) {\n            let shouldUnmute = true\n            if(stayMuted) {\n                shouldUnmute = false\n            };\n            // console.log('Loading Mist Stream Video for:', mistStream.name); // Log which Mist Stream is being loaded\n            // This mistServerUri comes from appSettings\n            if (!this.mistServerUri) {\n                console.log('Mist Server URI not set, fetching...') // Log fetching attempt\n                await this.getMistServerUri()\n            }\n            if (this.mistServerUri) {\n                // console.log('Mist Server URI:', this.mistServerUri); // Log the URI to confirm it's fetched\n                let basePath = this.mistServerUri\n                this.videoSource = basePath + 'hls/' + mistStream.name + '/index.m3u8'\n                // console.log('Video Source Set To:', this.videoSource); // Log the final video source\n\n                this.videoSourceType = 'application/vnd.apple.mpegURL'\n                // console.log('Setting player source to:', this.videoSource, 'of type:', this.videoSourceType); // Log the source setting\n                let videoJs = videojs('aux-player')\n                videoJs.src({'src': this.videoSource, 'type': this.videoSourceType})\n                if (shouldUnmute) {\n                    this.unMute()\n                }\n                this.paused = false\n            } else {\n                console.error('Mist Server URI is still not set after fetching.')\n            }\n            // let basePath = this.mistServerUri\n            // this.videoSource = basePath + 'hls/' + mistStream.name + '/index.m3u8'\n            // this.videoSourceType = \"application/vnd.apple.mpegURL\"\n            // this.player.src({'src': this.videoSource, 'type': this.videoSourceType})\n            // this.unMute()\n            // this.paused = false\n        },\n        async loadVideoFromFile(video) {\n            // console.log('Loading Mist Stream Video for:', mistStream.name); // Log which Mist Stream is being loaded\n            // This mistServerUri comes from appSettings\n            // if (!this.mistServerUri) {\n            //     console.log('Mist Server URI not set, fetching...') // Log fetching attempt\n            //     await this.getMistServerUri()\n            // }\n            // if (this.mistServerUri) {\n                // console.log('Mist Server URI:', this.mistServerUri); // Log the URI to confirm it's fetched\n                // let basePath = this.mistServerUri\n                // this.videoSource = basePath + 'hls/' + video.name + '/index.m3u8'\n                // console.log('Video Source Set To:', this.videoSource); // Log the final video source\n\n            // this.videoSourceType = 'video/mp4'\n            console.log('Video Source Type:', video.type);\n            console.log('Video URL:', video.video_url);\n            console.log('CDN Endpoint:', video.cdn_endpoint);\n            console.log('Cloud Folder:', video.cloud_folder);\n            console.log('Folder:', video.folder);\n            console.log('File Name:', video.file_name);\n\n            let videoSource = video.cdn_endpoint + video.cloud_folder + video.folder + '/' + video.file_name\n                // console.log('Setting player source to:', this.videoSource, 'of type:', this.videoSourceType); // Log the source setting\n                let videoJs = videojs('aux-player')\n                videoJs.src({'src': videoSource, 'type': video.type})\n                this.unMute()\n                this.paused = false\n            // } else {\n            //     console.error('Mist Server URI is still not set after fetching.')\n            // }\n            // let basePath = this.mistServerUri\n            // this.videoSource = basePath + 'hls/' + mistStream.name + '/index.m3u8'\n            // this.videoSourceType = \"application/vnd.apple.mpegURL\"\n            // this.player.src({'src': this.videoSource, 'type': this.videoSourceType})\n            // this.unMute()\n            // this.paused = false\n        },\n\n\n        setNowPlayingInfoVideoFile(source) {\n            this.nowPlayingType = 'Video File'\n            this.nowPlayingName = source.file_name\n            useStreamStore().currentChannel = 'On Demand'\n        },\n        setNowPlayingInfoShow(show, episode) {\n            this.clearNowPlayingInfo()\n            const showStore = useShowStore()\n\n            if (show.firstPlayVideo) {\n                showStore.setName(show.firstPlayVideo.name)\n                showStore.setEpisodeUrl(`/shows/${show.slug}/episode/${source.firstPlayVideo.slug}`)\n            } else if (episode) {\n                showStore.setName(show.name)\n                showStore.setUrl(`/shows/${show.slug}`)\n                showStore.setEpisodeName(episode.name)\n                showStore.setEpisodeUrl(`/shows/${show.slug}/episode/${episode.slug}`)\n            } else {\n                showStore.setName(show.name)\n                showStore.setUrl(`/shows/${show.slug}`)\n            }\n        },\n// change video size/position and page layout\n        makeVideoPiP() {\n            // const appSettingStore = useAppSettingStore();\n            // const userStore = useUserStore();\n            //\n            // if (userStore.isMobile) {\n            //     let videoJs = videojs('aux-player')\n            //     videoJs.controls(false)\n            //     if(this.fullPage) {\n            //         this.class = 'pipVideoClassFullPage'\n            //         this.videoContainerClass = 'pipVideoContainerFullPage'\n            //     } else {\n            //         this.class = 'pipVideoClassTopRight'\n            //         this.videoContainerClass = 'pipVideoContainerTopRight'\n            //     }\n            //     appSettingStore.togglePipChatMode()\n            // }\n        },\n        makeVideoFullPage() {\n            const appSettingStore = useAppSettingStore()\n            const userStore = useUserStore()\n\n            // this.fullPage = true; // to be deleted and replaced by appSettingStore.fullPage\n            appSettingStore.fullPage = true\n            // userStore.hidePage = true // to be deleted and replaced by appSettingStore.hidePage\n            appSettingStore.hidePage = true\n            appSettingStore.ott = 0\n\n            this.videoContainerClass = 'fullPageVideoContainer'\n            this.class = 'fullPageVideoClass'\n            this.controls = !userStore.isMobile\n        },\n        makeVideoTopRight() {\n            const appSettingStore = useAppSettingStore()\n\n            // this.fullPage = false // to be deleted and replaced by appSettingStore.fullPage\n            appSettingStore.fullPage = false\n            // userStore.hidePage = false // to be deleted and replaced by appSettingStore.hidePage\n            appSettingStore.hidePage = false\n            // this.currentPageIsStream = false // to be deleted and replaced by appSettingStore.currentPageIsStream\n            appSettingStore.currentPageIsStream = false\n\n            this.videoContainerClass = 'topRightVideoContainer'\n            this.class = 'topRightVideoClass'\n            this.controls = false\n        },\n        makeVideoWelcomePage() {\n            const appSettingStore = useAppSettingStore()\n            this.videoContainerClass = 'welcomeVideoContainer'\n            this.class = 'welcomeVideoClass'\n            appSettingStore.loggedIn = false\n            appSettingStore.fullPage = true\n            appSettingStore.hidePage = false\n        },\n        setMistServerUri(mistServerUri) {\n            this.mistServerUri = mistServerUri\n        }\n\n\n    },\n\n    getters: {},\n})\n"],"names":["_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","delegateYield","asyncGeneratorStep","_asyncToGenerator","arguments","apply","_next","_throw","initialState","displayEpisodeGoLiveComponent","isEpisode","episode","selectedEpisodeId","preSelectedShowId","selectedShowId","shows","streamKey","wildcardId","isLive","isRecording","streamInfo","rtmpUri","destinations","otherShowDestinations","loadingOtherDestinations","isLoadingDestinations","loadingDestinationId","processingRecordingChange","isProcessingDisableAllAutoPushes","playerIsReloading","pushDestinationFormSubmitProcessing","mistServerUri","previousStreamStatus","mistStreamPushDestinationFormModalMode","destinationDetails","useGoLiveStore","defineStore","state","actions","assign","this","fetchShows","_this","_callee","response","_context","axios","get","data","t0","generateStreamKey","_this2","_callee2","_context2","post","concat","stream_key","selectedShow","mist_stream_wildcard","mist_stream_wildcard_id","updateAndGetStreamKey","_show$mist_stream_wil","_this3","show","find","id","setSelectedShowId","showId","updateSelectedShow","_this4","goLive","stopLive","startRecording","_this5","_callee3","notificationStore","showSlug","_response$data","message","status","_context3","useNotificationStore","slug","stream_name","setToastNotification","stopRecording","_this6","_callee4","_response$data2","_context4","fetchStreamInfo","_this7","_callee5","_context5","fetchMistServerUri","streamName","error","success","fetchRtmpUri","_this8","_callee6","_context6","fetch","ok","text","clearStreamInfo","toggleDisplayEpisodeGoLiveComponent","_this$episode","show_id","updateEpisode","_this9","_callee7","videoAuxPlayerStore","uriResponse","_context7","useVideoAuxPlayerStore","setMistServerUri","reloadPlayer","_this10","_callee8","mistStream","_context8","loadMistStreamVideo","fetchOtherShowDestinations","_this11","_callee9","_context9","params","episodeId","console","copyDestinations","destinationIds","_this12","_callee10","payload","_context10","mistStreamWildcardId","log","fetchPushDestinations","_this13","_callee11","_response$data3","_context11","backgroundFetch","recording","backgroundFetchPushDestinations","_this14","_callee12","_context12","deleteDestination","destinationId","_this15","_callee13","_context13","confirm","filter","destination","setGeneralServiceNotification","startPush","fullPushUri","_this16","_callee14","_response$data4","index","_context14","destination_id","full_push_uri","findIndex","push_is_started","stopPush","_this17","_callee15","_response$data5","_context15","enableAutoPush","_this18","_callee16","_response$data6","_context16","has_auto_push","disableAutoPush","_this19","_callee17","_response$data7","_context17","disableAllAutoPushes","_this20","_callee18","_response$data8","_context18","getters","_show$mist_stream_wil2","_show$mist_stream_wil3","_show$mist_stream_wil4","is_recording","fullRtmpUri","fullUrl","activeDestinations","sourceName","_state$selectedShow","_state$episode","streamOffline","_state$streamInfo$err","_state$streamInfo","player","eventListenersAttached","videoPlayerLoaded","class","videoContainerClass","videoSourceIdSrc1","videoSourceIdSrc2","videoSourceIdSrc3","videoSourceTypeSrc1","videoSourceTypeSrc2","videoSourceTypeSrc3","firstPlayVideoSourceType","firstPlayVideoSource","key","videoName","videoSource","videoSourceType","videoPoster","nextSource","previousSource","currentView","currentChannelId","currentChannelName","currentShow","currentShowEpisode","currentVideo","hasVideo","controls","muted","paused","currentTime","duration","formattedTime","blue","videoIsYoutube","videoUploadComplete","getMistServerUri","setPlayer","playerInstance","initializePlayer","attachEventListeners","nextTick","useAudioStore","ensureAudioContextAndNodesReady","ready","play","on","handleTimeUpdate","handleFullscreenChange","handlePlay","handlePause","handleError","detachEventListeners","stopAudioLevelMonitoring","off","disposePlayer","dispose","prepareForNewVideoSource","source","loadNewVideo","resetPlayback","pause","formatDuration","durationInSeconds","Math","floor","map","part","toString","padStart","join","_this$player","isFullscreen","_this$player2","_this$player3","_this$player4","code","makeBlue","toggleMute","unMute","mute","togglePlay","videoJs","videojs","load","loadNewLiveSource","sourceType","fullSourceUrl","src","back","fullscreen","requestFullscreen","getVideoCurrentTime","videoCurrentTime","getSourceDetails","videoSrc","mediaType","video_url","cdn_endpoint","cloud_folder","folder","file_name","audioStore","_this$getSourceDetail","deferAudioSetup","playNewVideo","loadNewSourceFromYouTube","useChannelStore","clearChannel","loadNewLiveSourceFromRumble","loadNewSourceFromUrl","loadNewSourceFromMist","loadNewSourceFromFile","filePath","loadExternalSourceVideo","loadPlaylistVideos","stayMuted","shouldUnmute","basePath","loadVideoFromFile","video","setNowPlayingInfoVideoFile","nowPlayingType","nowPlayingName","useStreamStore","currentChannel","setNowPlayingInfoShow","clearNowPlayingInfo","showStore","useShowStore","firstPlayVideo","setName","setEpisodeUrl","setUrl","setEpisodeName","makeVideoPiP","makeVideoFullPage","appSettingStore","useAppSettingStore","userStore","useUserStore","fullPage","hidePage","ott","isMobile","makeVideoTopRight","currentPageIsStream","makeVideoWelcomePage","loggedIn"],"sourceRoot":""}