{"version":3,"file":"js/1688.js","mappings":"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","sources":["webpack://nottvbeta/./resources/js/Utilities/TimeUtils.js","webpack://nottvbeta/./resources/js/Stores/ScheduleStore.js"],"sourcesContent":["// utilities/timeUtils.js\nimport dayjs from 'dayjs';\nimport utc from 'dayjs/plugin/utc';\nimport timezone from 'dayjs/plugin/timezone';\n\ndayjs.extend(utc);\ndayjs.extend(timezone);\n\n/**\n * Creates an array of Date objects representing time slots.\n *\n * This function generates a sequence of time slots starting from a specified\n * start time, continuing for a given number of hours, and spaced apart\n * by a specified interval in minutes.\n *\n * @param {Date} start - The start time from which to generate slots, as a Date object.\n * @param {number} [durationHours=4] - The total duration for which to generate slots, in hours.\n * @param {number} [intervalMinutes=30] - The interval between each slot, in minutes.\n * @param {string} timezone - The timezone in which the time slots will be calculated.\n * @returns {Date[]} An array of Date objects, each representing a time slot.\n *\n * Example:\n * If start is `new Date('2024-01-01T08:00:00Z')`, durationHours is 2, and intervalMinutes is 30,\n * the output will be an array of Date objects representing the times:\n * `08:00`, `08:30`, `09:00`, and `09:30`.\n */\nexport function createTimeSlots(start, durationHours = 4, intervalMinutes = 30, timezone) {\n    // console.log(`Creating time slots starting from ${start}, for ${durationHours} hours, every ${intervalMinutes} minutes in timezone ${timezone}.`);\n    let slots = [];\n    let startTime = dayjs(start).tz(timezone);  // Convert start time to the correct time zone\n    for (let i = 0; i < (durationHours * 60) / intervalMinutes; i++) {\n        let slotTime = startTime.add(i * intervalMinutes, 'minute').toDate();  // Generate slots in the correct time zone\n        slots.push(slotTime);  // Keep as Date object\n    }\n    return slots;\n}\n// export function createTimeSlots(start, durationHours = 4, intervalMinutes = 30) {\n//     let slots = [];\n//     let startTime = dayjs(start).tz(userStore.timezone);  // Convert start time to the correct time zone\n//     for (let i = 0; i < (durationHours * 60) / intervalMinutes; i++) {\n//         let slotTime = new Date(start.getTime() + i * intervalMinutes * 60000);\n//         slots.push(slotTime);  // Keep as Date object\n//     }\n//     return slots;\n// }\n\n","import { defineStore } from 'pinia'\nimport { useUserStore } from '@/Stores/UserStore'\nimport { useAppSettingStore } from '@/Stores/AppSettingStore'\nimport { useNotificationStore } from '@/Stores/NotificationStore'\nimport { createTimeSlots } from '@/Utilities/TimeUtils'\n// import {\n//     format,\n//     isToday,\n//     isTomorrow,\n//     isYesterday,\n//     startOfDay,\n// } from 'date-fns'\n\n// Import dayjs and its plugins\nimport dayjs from 'dayjs'\nimport isSameOrAfter from 'dayjs/plugin/isSameOrAfter'\nimport isSameOrBefore from 'dayjs/plugin/isSameOrBefore' // To check if the day is the same\nimport isToday from 'dayjs/plugin/isToday';\nimport isYesterday from 'dayjs/plugin/isYesterday';\nimport isTomorrow from 'dayjs/plugin/isTomorrow';\nimport timezone from 'dayjs/plugin/timezone'\nimport utc from 'dayjs/plugin/utc'\nimport weekOfYear from 'dayjs/plugin/weekOfYear' // For week start and end calculations\nimport advancedFormat from 'dayjs/plugin/advancedFormat'\nimport { router } from '@inertiajs/vue3' // For more complex formatting options\n\n// Extend dayjs with the plugins\ndayjs.extend(timezone)\ndayjs.extend(weekOfYear)\ndayjs.extend(isToday);\ndayjs.extend(isYesterday);\ndayjs.extend(isTomorrow);\ndayjs.extend(advancedFormat)\ndayjs.extend(utc)\ndayjs.extend(isSameOrAfter)\ndayjs.extend(isSameOrBefore)\n\nfunction convertScheduleToTimezone(scheduleData) {\n    const userStore = useUserStore() // Access the UserStore\n\n    return scheduleData.data.map(item => {\n        // Convert top-level start_time and end_time using UserStore methods\n        // console.log(`Original startTime for ${item.id}: ${item.startTime}`)\n        const startTimeInUserTz = item.start_dateTime ? userStore.formatDateTimeFromUtcToUserTimezone(item.start_dateTime, 'YYYY-MM-DD HH:mm:ss') : null\n        const endTimeInUserTz = item.end_dateTime ? userStore.formatDateTimeFromUtcToUserTimezone(item.end_dateTime, 'YYYY-MM-DD HH:mm:ss') : null\n        // Add debug logging to help trace conversion issues or confirm correct conversions\n        // console.log(`Converted startTime for ${item.id}: ${startTimeInUserTz}`)\n\n        return {\n            ...item,\n            start_dateTime: startTimeInUserTz,\n            end_dateTime: endTimeInUserTz,\n            timezone: userStore.timezone,\n        }\n    })\n}\n\n// Helper function to get dates within the next 6 hours from viewingWindowStart\nfunction getUpcomingContentDates(viewingWindowStart) {\n    let dates = []\n    let start = dayjs(viewingWindowStart) // Ensure viewingWindowStart is a Day.js object\n\n    for (let i = 0; i < 6; i++) {\n        // Add i hours to the start time, each time creating a new Day.js object\n        dates.push(start.add(i, 'hour').toDate()) // Convert to Date if necessary; otherwise keep as Day.js object\n    }\n    // console.log(1)\n    return dates\n\n}\n\nconst getTimeZone = () => {\n    const userStore = useUserStore()\n    // This function should return the timezone of the user.\n    // This could be dynamic based on the user's settings or browser settings.\n    // return Intl.DateTimeFormat().resolvedOptions().timeZone;\n    // console.log(2)\n    return userStore.timezone\n}\n\nconst initialState = () => ({\n    baseTime: dayjs().tz(getTimeZone()),\n    currentHalfHour: dayjs().tz(getTimeZone()).startOf('hour').add(dayjs().minute() >= 30 ? 30 : 0, 'minute'),\n    fourHoursLater: dayjs().tz(getTimeZone()).startOf('hour').add(dayjs().minute() >= 30 ? 30 : 0, 'minute').add(4, 'hour'),\n    viewingWindowStart: dayjs().tz(getTimeZone()).startOf('hour'),\n    currentMonth: dayjs().tz(getTimeZone()).startOf('month'),\n    selectedDay: dayjs().tz(getTimeZone()),\n    currentWeekStart: dayjs().tz(getTimeZone()).startOf('week'),\n    currentWeekEnd: dayjs().tz(getTimeZone()).endOf('week'),\n    nextFourHoursOfContent: [],\n    nextFourHoursOfContentWithPlaceholders: [],\n    // nextFourHoursWithHalfHourIntervals: [],\n    // viewingMode: 'automatic', // or 'userSelected'\n    fiveDaySixHourSchedule: [], // Holds the schedule shows 5 day / 6 hour structured data\n    schedules: [], // this is our new schedules array, storing fetched schedule data\n    isLoading: true, // This flag indicates if data is currently being fetched\n    nextPage: 1, // This keeps track of the next page to fetch for pagination\n    hasMore: true, // This flag indicates if there are more schedules to fetch\n    todaysContent: [],\n    weeklyContent: [],\n    dataFetchLog: [],\n    savingToSchedule: false,\n    slotIntervalMinutes: 30,\n    mediumScreenSlotHours: 4, // 4 hours = 8 slots\n    smallScreenSlotHours: 2, // 2 hours = 4 slots\n    verySmallScreenSlotHours: 1, // 1 hour = 2 slots\n    timeSlots: [],\n    timeBanners: [\n        {id: 1, name: 'Early Morning', startTime: '04:00', duration: 2},\n        {id: 2, name: 'Morning', startTime: '06:00', duration: 6},\n        {id: 3, name: 'Afternoon', startTime: '12:00', duration: 5},\n        {id: 4, name: 'Prime Time', startTime: '17:00', duration: 3},\n        {id: 5, name: 'Late Prime Time', startTime: '20:00', duration: 3},\n        {id: 6, name: 'Late Night', startTime: '23:00', duration: 2}, // Spans midnight to 01:00\n        {id: 7, name: 'Overnight', startTime: '01:00', duration: 3}, // Spans from 01:00 to 04:00\n    ],\n})\n\nexport const useScheduleStore = defineStore('scheduleStore', {\n    state: initialState,\n    actions: {\n        resetAll() {\n            // Reset the store to its original state (clear all data)\n            Object.assign(this, initialState())\n            // console.log(3)\n        },\n        reset() {\n            this.baseTime = dayjs().tz(getTimeZone())\n            this.viewingWindowStart = dayjs().tz(getTimeZone()).startOf('hour')\n            this.currentMonth = dayjs().tz(getTimeZone()).startOf('month')\n            this.selectedDay = dayjs().tz(getTimeZone())\n            // console.log(4)\n        },\n        async setSelectedDay(day) {\n            // Ensure that 'day' is a Day.js object, convert if coming as a native Date or string\n            const selectedDay = dayjs(day)\n\n            // Set the selected day\n            this.selectedDay = selectedDay.toDate() // Convert back to Date if necessary; otherwise keep as Day.js object\n\n            // Explicitly set the viewingWindowStart to 4 AM for the selected day\n            this.viewingWindowStart = selectedDay.startOf('day').add(4, 'hours').toDate()\n\n            // Set the start and end of the week based on the selected day\n            this.currentWeekStart = selectedDay.startOf('week').toDate() // Consider week starting on Sunday\n            this.currentWeekEnd = selectedDay.endOf('week').toDate() // Consider week ending on Saturday\n\n            // Use the updated fetch logic\n            await this.fetchWeekDataIfNeeded()\n            // console.log(5)\n        },\n        setSelectedDayToToday(day) {\n            const now = dayjs()  // Create a Day.js object for the current date and time\n\n            // Set selectedDay to the current date and time\n            this.selectedDay = now.toDate() // Convert back to Date if necessary; otherwise keep as Day.js object\n\n            // Set viewingWindowStart to the start of the current hour using Day.js\n            this.viewingWindowStart = now.startOf('hour').toDate()\n            // console.log(6)\n        },\n        async changeDay(days) {\n            const currentTimeZone = getTimeZone() // or however you obtain the timezone\n            // Extract the time component from the current viewing window start\n            const currentTime = dayjs(this.viewingWindowStart).hour() * 60 + dayjs(this.viewingWindowStart).minute()\n\n            // Create a new day and set it to the start of that day\n            let newDay = dayjs(this.viewingWindowStart).tz(currentTimeZone).add(days, 'day').startOf('day')\n\n            // Set the time back to the original time\n            newDay = newDay.add(currentTime, 'minute')\n\n            // Depending on your application's needs, you may or may not need to convert it back to a JavaScript Date object\n            // If you need a Date object:\n            this.viewingWindowStart = newDay.toDate()\n\n            // If you can use dayjs objects directly (preferred if possible):\n            this.viewingWindowStart = newDay\n\n            // // Check if the week of the new day is already loaded\n            // const weekStart = startOfWeek(newDay, {weekStartsOn: 0});\n            // const weekEnd = endOfWeek(newDay, {weekStartsOn: 0});\n\n            // Use the updated centralized fetch logic without redundant checks\n            await this.fetchWeekDataIfNeeded()\n\n            // // Check for the need to load data for the new week\n            // if (this.needsDataForWeek(weekStart, weekEnd)) {\n            //     await this.loadWeekFromDate(newDay).catch(error => {\n            //         console.error(\"Failed to load data for the new week:\", error);\n            //     });\n            // }\n\n            // // Check for the need to load data for the new week\n            // if (!this.needsDataForWeek()) {\n            //     // Data for the current week has already been loaded; skip fetching\n            //     console.log(\"Data for the current week has already been loaded; skipping redundant fetch.\");\n            //     return;\n            // }\n            //\n            // // Proceed with data fetching if needed\n            // await this.checkAndFetchForUpcomingContent();\n            // console.log(7)\n        },\n        async shiftHours(hours) {\n            // Shift the viewing window by the specified number of hours\n            this.viewingWindowStart = dayjs(this.viewingWindowStart).add(hours, 'hour').toDate()\n\n            // Set the current week start and end based on the new viewing window start\n            this.currentWeekStart = dayjs(this.viewingWindowStart).startOf('week').toDate()\n            this.currentWeekEnd = dayjs(this.viewingWindowStart).endOf('week').toDate()\n\n            // If the day has changed, update selectedDay and the week's range\n            if (!dayjs(this.viewingWindowStart).isSame(dayjs(this.selectedDay), 'day')) {\n                this.selectedDay = dayjs(this.viewingWindowStart).startOf('day').toDate()\n            }\n\n            // Use the updated fetch logic\n            await this.fetchWeekDataIfNeeded()\n            // console.log(8)\n        },\n        isElevenPM(date) {\n            // Convert the date to a Day.js object if it's not already one\n            const time = dayjs(date)\n            // Check if the hour is 23 (11 PM)\n            // console.log(9)\n            return time.hour() === 23\n\n        },\n        // Actions to change the month\n        async subtractMonth() {\n            // Convert currentMonth to a Day.js object if it's not already and subtract one month\n            this.currentMonth = dayjs(this.currentMonth).subtract(1, 'month').toDate()\n\n            try {\n                // Pass the new currentMonth to setSelectedDay\n                await this.setSelectedDay(this.currentMonth)\n                // console.log('Set selected day based on current month:', this.currentMonth)\n            } catch (error) {\n                console.error(`Failed to set selected day based on current month ${this.currentMonth}:`, error)\n            }\n            // console.log(10)\n        },\n        async addMonth() {\n            // Convert currentMonth to a Day.js object if it's not already and add one month\n            this.currentMonth = dayjs(this.currentMonth).add(1, 'month').toDate()\n\n            try {\n                // Pass the new currentMonth to setSelectedDay\n                await this.setSelectedDay(this.currentMonth)\n                // console.log('Set selected day based on current month:', this.currentMonth)\n            } catch (error) {\n                console.error(`Failed to set selected day based on current month ${this.currentMonth}:`, error)\n            }\n            // console.log(11)\n        },\n        async fetchFiveDaySixHourSchedule() {\n            console.error('fetchFiveDaySixHourSchedule')\n            try {\n                const userStore = useUserStore()\n                const response = await axios.get('/api/schedule')\n\n                // Fallback to response timezone if userStore.timezone is not set\n                const timezone = userStore.timezone || response.data.userTimezone || 'UTC' // Additional fallback to 'UTC'\n\n                // Convert the entire schedule, including nested recurrenceDetails, to the user's timezone\n                this.fiveDaySixHourSchedule = convertScheduleToTimezone(response.data, timezone)\n                // console.error('fetchFiveDaySixHourSchedule', response.data)\n            } catch (error) {\n                console.error('Failed to load schedule shows:', error)\n                // Handle the error state as needed, e.g., setting an error state property\n            }\n            // console.log(12)\n        },\n        async fetchTodaysContent() {\n            try {\n                const userStore = useUserStore()\n                const response = await axios.get('/api/schedule/today')\n\n                // Fallback to response timezone if userStore.timezone is not set\n                const timezone = userStore.timezone || response.data.userTimezone || 'UTC' // Additional fallback to 'UTC'\n\n                this.todaysContent = convertScheduleToTimezone(response.data, timezone)\n            } catch (error) {\n                console.error('Failed to fetch today\\'s content:', error)\n            }\n            // console.log(13)\n        },\n        async preloadWeeklyContent() {\n            console.log('preloading weekly content...')\n            // Use the current date to preload content for the current week\n            const currentDate = dayjs(this.baseTime) // Creates a Day.js object representing the current date and time\n\n            try {\n                // Call loadWeekFromDate with the current Day.js date object\n                await this.loadWeekFromDate(currentDate) // loadWeekFromDate uses dayjs\n            } catch (error) {\n                console.error('Failed to preload weekly content:', error)\n            }\n            // console.log(14)\n        },\n        // this is our new fetch schedules method.\n        async fetchSchedules(startDate, endDate) {\n            this.isLoading = true\n            // console.log(`Loading schedule between: ${dayjs(startDate).format()} and ${dayjs(endDate).format()}`) // Log the date being requested\n            try {\n                const userStore = useUserStore()\n                const dayStartDate = dayjs(startDate)\n                const dayEndDate = dayjs(endDate)\n                const fullISOStartDate = dayStartDate.toISOString()\n                const fullISOEndDate = dayEndDate.toISOString()\n\n                const response = await axios.get(`/api/schedules/range?start=${fullISOStartDate}&end=${fullISOEndDate}`)\n                // console.log('fullISOStartDate: ' + fullISOStartDate)\n                // console.log('fullISOEndDate: ' + fullISOEndDate)\n                // const formattedStartDate = dayStartDate.format('YYYY-MM-DD') // For potential error messages and logging\n                // const formattedEndDate = dayEndDate.format('YYYY-MM-DD') // For potential error messages and logging\n                // console.log(`Loading schedule between: ${formattedStartDate} and ${formattedEndDate}`) // Log the date being requested\n                // console.log('Received response:', response.data) // Log the raw response data\n\n                // Fallback to response timezone if userStore.timezone is not set\n                const timezone = userStore.timezone || response.data.userTimezone\n\n                const newData = convertScheduleToTimezone(response.data, timezone) // Ensure you are accessing the correct data property from the response\n\n                // Merge newData into schedules, avoiding duplicates\n                // this.schedules = [...this.schedules, ...newData].filter((value, index, self) =>\n                //         index === self.findIndex((t) => (\n                //             t.id === value.id && t.startTime === value.startTime\n                //         )),\n                // )\n                // Merge newData into schedules, avoiding duplicates\n                this.schedules = [...new Set([...this.schedules, ...newData].map(item => JSON.stringify(item)))].map(item => JSON.parse(item));\n                // console.log('Updated schedules:', this.schedules); // Log the updated schedules\n\n                // Optionally update fetch logs or perform additional state updates\n                // this.updateFetchLogs(startDate) // this was designed to just log a week fetching at a time.\n\n            } catch (error) {\n                console.error('Failed to fetch schedules:', error)\n                this.isLoading = false\n                // console.log('012')\n            } finally {\n                this.isLoading = false\n                // console.log('Schedule loaded!')\n            }\n        },\n\n        async fetchMoreSchedules() {\n\n            // Prevent fetching if already loading or if there are no more schedules to fetch\n            if (this.isLoading || !this.hasMore) return;\n\n            this.isLoading = true;\n\n            try {\n                const lastSchedule = this.schedules[this.schedules.length - 1];\n                const startDate = lastSchedule ? dayjs(lastSchedule.start_dateTime).format('YYYY-MM-DD') : dayjs().format('YYYY-MM-DD');\n                const endDate = dayjs(startDate).add(7, 'day').format('YYYY-MM-DD'); // Fetch the next 7 days\n\n                await this.fetchSchedules(startDate, endDate);\n\n                // Check if new schedules were added\n                const newSchedules = this.schedules.slice(this.schedules.length - 1);\n                // If no new schedules are fetched, set hasMore to false\n                if (newSchedules.length === 0) {\n                    this.hasMore = false;\n                } else {\n                    // Increment the next page number for future fetches\n                    this.nextPage += 1;\n                }\n            } catch (error) {\n                console.error('Failed to fetch more schedules:', error);\n            } finally {\n                this.isLoading = false;\n            }\n        },\n\n        async loadWeekFromDate(date) {\n            let formattedDate = null // Declare formattedDate outside of the try block\n            this.isLoading = true\n            console.log('Loading week from date...')\n            try {\n                const userStore = useUserStore()\n                // Ensure the date is in UTC format for the request\n                // console.log('Date before formatted: ' + date)\n                // Convert date to Day.js object and format it in ISO string with UTC\n                const dayDate = dayjs(date)\n                const fullISODate = dayDate.toISOString()\n                // console.log(`Loading week data for date in UTC: ${fullISODate}`)\n\n                // Fetch the week's schedule data\n                // Send the dateTime and timezone as a JSON object in a POST request\n                const response = await axios.post(`/api/schedule/week/${fullISODate}`)\n\n                // const formattedDate = date.toISOString().split('T')[0];\n                // Log and error handling\n                const formattedDate = dayDate.format('YYYY-MM-DD') // For potential error messages and logging\n                // console.log(`Loading week data for date: ${formattedDate}`) // Log the date being requested\n                //\n                // const response = await axios.get(`/api/schedule/week/${formattedDate}`);\n                // console.log('Received response:', response.data) // Log the raw response data\n\n                // Fallback to response timezone if userStore.timezone is not set\n                const timezone = userStore.timezone || response.data.userTimezone\n                // console.log(`Using timezone: ${timezone}`) // Log the timezone being used\n\n                const newData = convertScheduleToTimezone(response.data, timezone) // Ensure you are accessing the correct data property from the response\n\n                // Merge newData into weeklyContent, avoiding duplicates\n                this.weeklyContent = [...this.weeklyContent, ...newData].filter((value, index, self) =>\n                        index === self.findIndex((t) => (\n                            t.id === value.id && t.start_dateTime === value.start_dateTime\n                        )),\n                )\n\n                // console.log('Updated weeklyContent:', this.weeklyContent) // Log the updated weekly content\n\n                // Optionally update fetch logs or perform additional state updates\n                this.updateFetchLogs(date)\n\n                this.isLoading = false\n                // console.log('Week from date loaded!')\n            } catch (error) {\n                console.error(`Failed to load content for week starting ${formattedDate}:`, error)\n                this.isLoading = false\n                // console.log('002')\n            }\n            // console.log(15)\n            // console.log('End of loadWeekFromDate function')\n        },\n        updateFetchLogs(date) {\n            // Convert date to a Day.js object if it's not already one\n            const dayDate = dayjs(date)\n\n            // Use Day.js to calculate the start and end of the week\n            const weekStart = dayDate.startOf('week').toISOString() // Assumes the week starts on Sunday\n            const weekEnd = dayDate.endOf('week').toISOString() // Assumes the week ends on Saturday\n            const fetchTime = dayjs().toISOString() // Current time in ISO format\n\n            // Find existing log entry for the week\n            const existingLogIndex = this.dataFetchLog.findIndex(log =>\n                log.weekStart === weekStart && log.weekEnd === weekEnd)\n\n            if (existingLogIndex !== -1) {\n                // Update the last fetch time if the log already exists\n                this.dataFetchLog[existingLogIndex].lastFetch = fetchTime\n            } else {\n                // Add a new log entry if it does not exist\n                this.dataFetchLog.push({weekStart, weekEnd, lastFetch: fetchTime})\n            }\n            // console.log(16)\n        },\n        needsDataForWeek() {\n            // Helper function to format dates to 'YYYY-MM-DD' for easier comparison\n            const formatISODate = (date) => dayjs(date).format('YYYY-MM-DD')\n\n            // Current week range in 'YYYY-MM-DD' format\n            const weekStartStr = formatISODate(this.currentWeekStart)\n            const weekEndStr = formatISODate(this.currentWeekEnd)\n\n            // Enhanced logging for debugging\n            // console.log(`Current week range: ${weekStartStr} to ${weekEndStr}`)\n            // console.log('Existing data fetch log entries:', this.dataFetchLog)\n\n            // Iterate through the fetch log to check if the current week has been fetched\n            const weekHasBeenFetched = this.dataFetchLog.some(log => {\n                // Convert log dates to 'YYYY-MM-DD' format for comparison\n                const logWeekStartStr = formatISODate(log.weekStart)\n                const logWeekEndStr = formatISODate(log.weekEnd)\n\n                // Log each comparison for insight\n                // console.log(`Comparing to fetched range: ${logWeekStartStr} to ${logWeekEndStr}`)\n\n                return logWeekStartStr <= weekStartStr && logWeekEndStr >= weekEndStr\n            })\n\n            // Log the final determination\n            // console.log(`Week from ${weekStartStr} to ${weekEndStr} has ${weekHasBeenFetched ? '' : 'not '}been fetched.`)\n            // console.log(17)\n            return !weekHasBeenFetched\n        },\n        calculateExtendedEndForUpcomingContent() {\n            // Convert viewingWindowStart to a Day.js object if it's not already one\n            const baseStartTime = dayjs(this.viewingWindowStart)\n\n            // Extend by 6 hours to cover the upcoming content span\n            // Day.js handles date and time addition cleanly, returning a new Day.js object\n            const extendedEndTime = baseStartTime.add(6, 'hour')\n\n            // console.log(18)\n            // Return the extended end time as a Date object, if needed elsewhere as a Date\n            return extendedEndTime.toDate()\n        },\n        // Function to check for and fetch missing upcoming content\n        async checkAndFetchForUpcomingContent() {\n            const upcomingDates = getUpcomingContentDates(this.viewingWindowStart) // Assuming this returns Day.js objects\n            const now = dayjs()\n            const fifteenMinutesAgo = now.subtract(15, 'minutes')\n\n            for (const date of upcomingDates) {\n                const dayjsDate = dayjs(date); // Ensure date is a dayjs object\n                const dateString = dayjsDate.format('YYYY-MM-DD');  // Day.js format for 'YYYY-MM-DD'\n\n                const contentCoverageAndFreshness = this.weeklyContent.some(content => {\n                    const contentDate = dayjs(content.start_dateTime).format('YYYY-MM-DD')  // Convert and compare as 'YYYY-MM-DD'\n                    const lastFetchedTime = this.dataFetchLog[dateString]\n                    const isFresh = lastFetchedTime && dayjs(lastFetchedTime) > fifteenMinutesAgo\n                    return dateString === contentDate && isFresh\n                })\n\n                if (!contentCoverageAndFreshness) {\n                    // This date needs data fetching\n                    await this.fetchDataAndUpdateLog(dateString, date.toDate()) // Pass as Date if needed, or adjust downstream functions to accept Day.js objects\n                    break // Assuming you fetch data for the week, so no need to check further dates within the same week\n                }\n            }\n            // console.log(19)\n        },\n        async fetchDataAndUpdateLog(dateString, date) {\n            try {\n                // Assuming 'date' is already a Day.js object; if not, convert it\n                const dayDate = dayjs(date)\n\n                await this.loadWeekFromDate(dayDate.toDate())  // Pass as a Date if needed, or adjust 'loadWeekFromDate' to accept Day.js objects\n                // Successfully fetched, so update the log\n                this.dataFetchLog[dateString] = dayjs().toISOString()  // Use Day.js to get the current time in ISO format\n                // console.log('Data fetched successfully for date:', dateString)\n            } catch (error) {\n                console.error(`Failed to fetch data for date ${dateString}:`, error)\n            }\n            // console.log(20)\n        },\n\n        // Updated to use this.currentWeekStart and this.currentWeekEnd directly\n        async fetchWeekDataIfNeeded() {\n            // Assumes this.currentWeekStart and this.currentWeekEnd are already set\n            if (this.needsDataForWeek()) {\n                await this.checkAndFetchForUpcomingContent().catch(error => {\n                    console.error('Failed to load data for the week:', error)\n                    return false // Indicates failure to fetch when an error occurs\n                })\n            } else {\n                console.log('Week data already loaded; no need to fetch.')\n            }\n            // console.log(21)\n        },\n\n        // Function to simply update baseTime with the given time (expected to be a Day.js object or compatible input)\n        updateBaseTime(time) {\n            // Ensure the time is a Day.js object when setting baseTime\n            this.baseTime = dayjs(time).toDate()  // Convert to Date if necessary; consider keeping it as Day.js object if possible\n            // console.log(22)\n        },\n\n        // Function to set baseTime based on a new time input (expected to be a string, Date, etc.)\n        setBaseTime(newTime) {\n            // Convert newTime to a Day.js object and then to Date if necessary\n            this.baseTime = dayjs(newTime).toDate()  // This handles various input formats and ensures consistency\n            // console.log(23)\n        },\n\n\n        /**\n         * This method orchestrates the update of show scheduling data for the next four hours.\n         * It is designed to be triggered when there are changes to the base time or when a manual refresh is needed.\n         * The method handles loading and organizing the scheduling data to be ready for display in the grid.\n         */\n        async updateNextFourHours() {\n            // Set the loading state to true to indicate that data processing is underway.\n            // This can be used to display a loading spinner or disable user interaction temporarily.\n            this.isLoading = true\n\n            // Update the time range for the scheduling grid. This adjusts `currentHalfHour` and `fourHoursLater`\n            // based on the current `baseTime`. These values define the range of time for which shows will be displayed.\n            this.updateTimeRange()\n\n            // Update the time slots\n            this.setTimeSlots()\n\n            // Prepares the shows for the grid display by filtering, calculating grid slots,\n            // resolving conflicts, and optionally filling empty grid slots with placeholders.\n            // This step involves several functions that ensure shows are positioned correctly according to their\n            // start time, duration, and conflicts with other shows.\n            this.prepareShowsForGrid()\n\n            // Reset the loading state to false indicates that the data processing is complete.\n            // This allows the user interface to be interactive again and shows the updated data in the grid.\n            this.isLoading = false\n            // console.log(24)\n        },\n\n\n        updateTimeRange() {\n            // Ensure the baseTime is interpreted correctly in the current user's timezone\n            const baseDate = dayjs(this.baseTime).tz(getTimeZone())\n\n            // Calculate the rounded minutes to either 0 or 30 based on the current time\n            const roundedMinutes = baseDate.minute() < 30 ? 0 : 30\n\n            // Set the current half hour, rounding down to the nearest half-hour mark\n            let currentHalfHour = baseDate.minute(roundedMinutes).second(0).millisecond(0).startOf('minute')\n\n            // Adjust currentHalfHour to start 30 minutes earlier\n            currentHalfHour = currentHalfHour.subtract(30, 'minutes');\n\n            // Calculate four hours later from the current half-hour mark\n            const fourHoursLater = currentHalfHour.add(4, 'hours')\n\n            // Update the store's currentHalfHour and fourHoursLater ensuring they are Date objects if required\n            this.currentHalfHour = currentHalfHour.toDate()\n            this.fourHoursLater = fourHoursLater.toDate()\n            // console.log(25)\n\n            // console.log('Fetching shows between:', currentHalfHour.format('YYYY-MM-DD HH:mm:ss'), 'and', fourHoursLater.format('YYYY-MM-DD HH:mm:ss'))\n        },\n\n        initializeTimeSlots() {\n            this.timeSlots = createTimeSlots()\n        },\n\n        setTimeSlots() {\n            const appSettingStore = useAppSettingStore()\n            let slotHours\n\n            // Determine the number of slot hours based on screen size\n            if (appSettingStore.isVerySmallScreen) {\n                slotHours = this.verySmallScreenSlotHours\n            } else if (appSettingStore.isSmallScreen) {\n                slotHours = this.smallScreenSlotHours\n            } else {\n                slotHours = this.mediumScreenSlotHours\n            }\n\n            const intervalMinutes = this.slotIntervalMinutes\n            const slots = []\n            const totalSlots = (slotHours * 60) / intervalMinutes\n\n            // Ensure state.currentHalfHour is a Day.js object\n            const currentHalfHour = dayjs(this.currentHalfHour)\n\n            // Calculate the time for each slot using Day.js\n            for (let i = 0; i < totalSlots; i++) {\n                let slotTime = currentHalfHour.add(i * intervalMinutes, 'minute')\n                slots.push(slotTime.toDate())  // Convert back to JavaScript Date if necessary\n            }\n            this.timeSlots = slots\n            // console.log(26)\n            return slots.length\n        },\n\n        prepareShowsForGrid() {\n\n            if (!this.timeSlots || !Array.isArray(this.timeSlots) || this.timeSlots.length === 0) {\n                console.error('timeSlots is not properly initialized.')\n                // console.log(27)\n                // Handle this scenario, e.g., by initializing timeSlots, or skipping the update\n                return\n            }\n\n\n            // Step 1: Filter shows within the desired time range\n            const shows = this.filterShowsForTimeRange()\n\n            // Step 2: Calculate initial grid slots for these shows\n            const processedShows = this.calculateGridSlots(shows, this.timeSlots)\n\n            // Step 3: Process shows to set nowPlaying and comingUpNext flags\n            const showsWithStatusFlags = this.processShows(processedShows)\n\n            // Step 4: Update column occupancy and find the maximum row used\n            const {colOccupancy, maxRowUsed} = this.updateColumnOccupancy(showsWithStatusFlags, this.timeSlots.length)\n\n            // Step 5: Fill gaps in the grid with placeholders\n            const gridItems = this.fillGapsAndCreatePlaceholders(colOccupancy, maxRowUsed, this.timeSlots.length)\n\n            // Step 6: Combine processed shows with the placeholders\n            const combinedShows = [...showsWithStatusFlags, ...gridItems]\n\n            // Step 7: Sort and group shows by rows\n            this.nextFourHoursOfContent = this.sortShowsByPosition(combinedShows)\n            // console.log(28)\n        },\n\n        filterShowsForTimeRange() {\n            return this.schedules.filter(show => {\n                // Validate show data integrity\n                if (typeof show.start_dateTime !== 'string' || typeof show.duration_minutes !== 'number') {\n                    console.warn('Invalid show data:', show.start_dateTime, show.duration_minutes)\n                    // console.log(29)\n                    return false // Skip this show if it doesn't meet data expectations\n                }\n\n                const showStart = dayjs(show.start_dateTime)\n                const showEnd = dayjs(show.end_dateTime)\n                const isInTimeRange = showStart.isBefore(this.fourHoursLater) && showEnd.isAfter(this.currentHalfHour)\n\n                // Detailed logging for debugging\n                if (isInTimeRange) {\n                    const hasStarted = showStart.isBefore(this.currentHalfHour) ? 'already started' : 'starts within range'\n                    // console.log(`Show: ${show.content.name}, ${hasStarted}, Start: ${showStart.format('HH:mm:ss')}, End: ${showEnd.format('HH:mm:ss')}, Duration: ${show.duration_minutes}`)\n                }\n                // console.log(30)\n                return isInTimeRange\n            })\n        },\n\n        calculateGridSlots(shows, timeSlots) {\n            // Validate the timeSlots array to prevent errors\n            if (!Array.isArray(timeSlots) || timeSlots.length === 0) {\n                console.error('Invalid or empty timeSlots array')\n                // console.log(31)\n                return [] // Exit if no valid time slots to work with\n            }\n\n            // Determine the range of timeSlots\n            const firstTimeSlot = dayjs(timeSlots[0])\n            const lastTimeSlot = dayjs(timeSlots[timeSlots.length - 1]).add(30, 'minutes')\n\n\n            return shows.filter(show => {\n                const showStart = dayjs(show.start_dateTime)\n                const showEnd = dayjs(show.end_dateTime)\n                return showStart.isBefore(lastTimeSlot) && showEnd.isAfter(firstTimeSlot)\n            }).map(show => {\n                const showStart = dayjs(show.start_dateTime)\n                const showEnd = dayjs(show.end_dateTime)\n                // console.log('************************************')\n                // console.log(`Processing show: ${show.content.name}, Start: ${show.startTime}, End: ${show.endTime}`)\n\n                // Find the index of the slot where the show should start\n                let slotIndex = timeSlots.findIndex(slot => showStart.isSameOrBefore(dayjs(slot)))\n\n                // Adjust if the show starts exactly at a slot time or just after the last checked slot time\n                if (slotIndex === -1 || showStart.isAfter(dayjs(timeSlots[slotIndex]))) {\n                    slotIndex = Math.max(0, slotIndex)\n                }\n\n                // console.log(`Comparing show start ${showStart.format()} to timeSlot index ${slotIndex} at ${dayjs(timeSlots[slotIndex]).format()}`)\n\n                // Calculate the end slot index\n                let endSlotIndex = timeSlots.findIndex(slot => showEnd.isSameOrBefore(dayjs(slot).add(30, 'minutes')))\n\n                // If the end slot index points to a slot that starts after the show ends, subtract one\n                if (endSlotIndex !== -1 && showEnd.isBefore(dayjs(timeSlots[endSlotIndex]))) {\n                    endSlotIndex--\n                }\n\n                // Handle cases where the show ends after the last slot\n                if (endSlotIndex === -1 || showEnd.isSame(dayjs(timeSlots[timeSlots.length - 1]).add(30, 'minutes'))) {\n                    endSlotIndex = timeSlots.length - 1\n                }\n\n                // console.log(`Comparing show end ${showEnd.format()} to timeSlot index ${endSlotIndex} at ${endSlotIndex !== -1 ? dayjs(timeSlots[endSlotIndex]).format() : 'out of range'}`)\n\n\n                // Calculate the number of slots the show should span\n                let span = endSlotIndex - slotIndex + 1\n\n                // console.log(`Calculated gridStart: ${slotIndex + 1}, gridSpan: ${span}`)\n                // console.log(32)\n                return {\n                    ...show,\n                    gridStart: slotIndex + 1, // Convert to 1-based index for grid positioning\n                    gridSpan: span,\n                }\n            })\n        },\n\n        processShows(shows) {\n            let comingUpNextSet = false\n\n            shows.forEach(show => {\n                const start = dayjs(show.start_dateTime)\n                const end = start.add(show.duration_minutes, 'minutes')\n                const now = dayjs(this.baseTime)\n\n                // Determine if the show is now playing\n                show.nowPlaying = !show.placeholder && now.isAfter(start) && now.isBefore(end) && show.gridRow === 1\n\n                // Find the first show that starts in gridRow 1 and does not start in the first grid column\n                if (!comingUpNextSet && !show.placeholder && show.gridRow === 1 && now.isBefore(start)) {\n                    show.comingUpNext = true\n                    comingUpNextSet = true  // Ensure only one show gets this flag\n                } else {\n                    show.comingUpNext = false\n                }\n            })\n\n            return shows\n        },\n\n        updateColumnOccupancy(processedShows, cols) {\n            let colOccupancy = new Array(cols).fill(null).map(() => new Set())\n            let maxRowUsed = 0\n            processedShows.forEach(show => {\n                for (let i = show.gridStart - 1; i < show.gridStart - 1 + show.gridSpan; i++) {\n                    if (i >= 0 && i < cols) {\n                        colOccupancy[i].add(show.gridRow)\n                        maxRowUsed = Math.max(maxRowUsed, show.gridRow)\n                    }\n                }\n            })\n            // console.log(34)\n            return {colOccupancy, maxRowUsed}\n        },\n\n        fillGapsAndCreatePlaceholders(colOccupancy, maxRowUsed, cols) {\n            let gridItems = []\n            // Ensure at least one row is processed even if no shows are present\n            maxRowUsed = Math.max(maxRowUsed, 1)\n            for (let row = 1; row <= maxRowUsed; row++) {\n                gridItems.push(...this.findAndFillGapsForSingleRow(colOccupancy, row, cols))\n            }\n            // console.log(35)\n            return gridItems\n        },\n\n        findAndFillGapsForSingleRow(colOccupancy, row, cols) {\n            let gridItems = []\n\n            // Skip processing for even-numbered rows\n            // if (row % 2 === 0) {\n            //     return gridItems;\n            // }\n\n            let gapStart = -1\n            for (let i = 0; i < cols; i++) {\n                if (!colOccupancy[i].has(row)) {\n                    gapStart = gapStart === -1 ? i : gapStart\n                } else if (gapStart !== -1) {\n                    // Use different placeholders based on the row number\n                    if (row === 1) {\n                        gridItems.push(this.createPlaceholder(gapStart + 1, i - gapStart, row))\n                    } else {\n                        gridItems.push(this.createBlankSpotPlaceholder(gapStart + 1, i - gapStart, row))\n                    }\n                    gapStart = -1\n                }\n            }\n            if (gapStart !== -1) {\n                // Again, differentiate between the first row and other rows\n                if (row === 1) {\n                    gridItems.push(this.createPlaceholder(gapStart + 1, cols - gapStart, row))\n                } else {\n                    gridItems.push(this.createBlankSpotPlaceholder(gapStart + 1, cols - gapStart, row))\n                }\n            }\n            // console.log(36)\n            return gridItems\n        },\n\n        sortShowsByPosition(combinedShows) {\n            if (!Array.isArray(combinedShows)) {\n                console.error('Expected an array of shows, received:', combinedShows)\n                return [] // Return an empty array if not an array to prevent errors\n            }\n\n            // console.log(37)\n            // Sort shows directly by row and then by start position within each row\n            return combinedShows.sort((a, b) => a.gridRow - b.gridRow || a.gridStart - b.gridStart)\n        },\n\n        createPlaceholder(start, span, row) {\n            // console.log(38)\n            return {\n                placeholder: true,\n                startTime: 'placeholder',\n                priority: 0,\n                gridStart: start,\n                gridSpan: span,\n                gridRow: row,\n                content: {name: 'Nothing scheduled.'},\n            }\n        },\n\n        createBlankSpotPlaceholder(start, span, row) {\n            // console.log(39)\n            return {\n                placeholder: true,\n                startTime: 'placeholder',\n                priority: 0,\n                gridStart: start,\n                gridSpan: span,\n                gridRow: row,\n                content: {name: 'Blank Spot'}, // Ensure it is differentiated from normal placeholders\n            }\n        },\n        async purgeAllCaches() {\n            const notificationStore = useNotificationStore()\n            const scheduleStore = useScheduleStore()\n            scheduleStore.resetAll()\n            try {\n                const response = await axios.post('/admin/schedule/admin-reset-cache')\n                notificationStore.setToastNotification(response.data.message, response.data.type)\n            } catch (error) {\n                notificationStore.setToastNotification('Error purging caches.', 'error')\n            }\n            router.reload()\n        },\n        async updateSchedule() {\n            const notificationStore = useNotificationStore()\n            const scheduleStore = useScheduleStore()\n            scheduleStore.resetAll()\n            try {\n                const response = await axios.post('/admin/schedule/admin-update-schedule')\n                notificationStore.setToastNotification(response.data.message, response.data.type)\n            } catch (error) {\n                notificationStore.setToastNotification('Error updating schedule.', 'error')\n            }\n            router.reload()\n        }\n    },\n\n    getters: {\n        currentTime: (state) => {\n            // console.log('getter', 40)\n            return dayjs(state.baseTime).format('h:mm A')\n        },\n        currentDate: (state) => {\n            // console.log('getter', 40)\n            return dayjs(state.baseTime).format('MMMM DD, YYYY')\n        },\n        // Prepare banners with grid positions based on current time slots\n        preparedTimeBanners: (state) => {\n            // console.log('getter', 41)\n            const timeZone = getTimeZone() // Ensure this is defined\n            let now = dayjs().tz(timeZone)\n            let todayStart = now.startOf('day')\n            let tomorrowStart = todayStart.add(1, 'day')\n            let yesterdayStart = todayStart.subtract(1, 'day');\n\n            // console.log('Current Time Slots:', state.timeSlots.map(slot => dayjs(slot).format('HH:mm')))\n\n            return state.timeBanners.flatMap(banner => {\n                // console.log('getter', 42)\n                // Create banner times for today and tomorrow to handle overnight spans\n                let bannerTodayStart = todayStart.hour(parseInt(banner.startTime.split(':')[0])).minute(parseInt(banner.startTime.split(':')[1]))\n                let bannerTodayEnd = bannerTodayStart.clone().add(banner.duration, 'hours')\n                let bannerTomorrowStart = tomorrowStart.hour(parseInt(banner.startTime.split(':')[0])).minute(parseInt(banner.startTime.split(':')[1]))\n                let bannerTomorrowEnd = bannerTomorrowStart.clone().add(banner.duration, 'hours')\n                let bannerYesterdayStart = yesterdayStart.hour(parseInt(banner.startTime.split(':')[0])).minute(parseInt(banner.startTime.split(':')[1]));\n                let bannerYesterdayEnd = bannerYesterdayStart.clone().add(banner.duration, 'hours');\n\n                // Create an array of potential banners for today and tomorrow\n                let potentialBanners = [\n                    {...banner, start: bannerYesterdayStart, end: bannerYesterdayEnd},\n                    {...banner, start: bannerTodayStart, end: bannerTodayEnd},\n                    {...banner, start: bannerTomorrowStart, end: bannerTomorrowEnd},\n                ]\n\n                return potentialBanners.map(banner => {\n                    // console.log('getter', 43)\n                    const startSlotIndex = state.timeSlots.findIndex(slot => banner.start.isSameOrBefore(dayjs(slot)) && banner.end.isAfter(dayjs(slot)))\n                    let endSlotIndex = state.timeSlots.findIndex(slot => banner.end.isSameOrBefore(dayjs(slot)))\n\n                    // Adjust the end index to be inclusive of the end time\n                    if (endSlotIndex === -1 || banner.end.isAfter(dayjs(state.timeSlots[state.timeSlots.length - 1]))) {\n                        endSlotIndex = state.timeSlots.length - 1\n                    } else {\n                        endSlotIndex -= 1\n                    }\n\n                    const gridStart = startSlotIndex + 1\n                    const gridSpan = endSlotIndex - startSlotIndex + 1\n\n                    // console.log(`Processing Banner: ${banner.name}`)\n                    // console.log(`StartTime: ${banner.start.format('HH:mm')}, EndTime: ${banner.end.format('HH:mm')}`)\n                    // console.log(`StartSlotIndex: ${startSlotIndex}, EndSlotIndex: ${endSlotIndex}`)\n                    // console.log(`Calculated gridStart: ${gridStart}, gridSpan: ${gridSpan}`)\n\n                    // Ensure the banner should be displayed within the current time slots\n                    if (gridStart && gridSpan > 0) {\n                        // console.log('getter', 44)\n                        return {...banner, gridStart, gridSpan}\n                    }\n                    // console.log('getter', 45)\n                    return null\n                })\n            }).filter(banner => banner != null) // Filter out banners that don't fit within the current time slots\n                .sort((a, b) => a.gridStart - b.gridStart) // Sort by gridStart, with the lowest number first\n        },\n\n\n        // setTimeSlots: (state) => {\n        //     const appSettingStore = useAppSettingStore()\n        //     let slotHours\n        //\n        //     // Determine the number of slot hours based on screen size\n        //     if (appSettingStore.isVerySmallScreen) {\n        //         slotHours = state.verySmallScreenSlotHours\n        //     } else if (appSettingStore.isSmallScreen) {\n        //         slotHours = state.smallScreenSlotHours\n        //     } else {\n        //         slotHours = state.mediumScreenSlotHours\n        //     }\n        //\n        //     const intervalMinutes = state.slotIntervalMinutes\n        //     const slots = []\n        //     const totalSlots = (slotHours * 60) / intervalMinutes\n        //\n        //     // Ensure state.currentHalfHour is a Day.js object\n        //     const currentHalfHour = dayjs(state.currentHalfHour)\n        //\n        //     // Calculate the time for each slot using Day.js\n        //     for (let i = 0; i < totalSlots; i++) {\n        //         let slotTime = currentHalfHour.add(i * intervalMinutes, 'minute')\n        //         slots.push(slotTime.toDate())  // Convert back to JavaScript Date if necessary\n        //     }\n        //     state.timeSlots = slots\n        //     return slots.length\n        // },\n\n        nextFourHoursWithHalfHourIntervals: (state) => {\n            // Check if timeSlots is not null, undefined, or empty before accessing length\n            if (!state.timeSlots || state.timeSlots.length === 0) {\n                console.log('timeSlots is null or has no elements')\n                // console.log('getter', 46)\n                // Handle this scenario appropriately, such as returning an empty array or a default value\n                return []\n            }\n\n            const userStore = useUserStore() // Access the user store\n            const appSettingStore = useAppSettingStore() // Access the settings store\n            const userTimezone = userStore.timezone // Get the user's timezone\n            const cols = state.timeSlots.length\n\n            const intervals = []\n            const now = dayjs(state.baseTime).tz(userTimezone) // Get the current time in the user's timezone\n\n            // Determine if the current minute is less than 30 to start at the top of the hour or at the half-hour\n            let current = now.minute() < 30 ? now.startOf('hour') : now.startOf('hour').add(30, 'minutes')\n\n            // Adjust current to start 30 minutes before the calculated time\n            current = current.subtract(30, 'minutes');\n\n            // Generate intervals for the next 4 hours, each 30 minutes apart\n            // Adjust the loop count based on the number of columns/ intervals needed\n            for (let i = 0; i < cols; i++) { // Adjust the number of intervals based on the screen size\n                intervals.push({\n                    formatted: current.format('hh:mm A'), // Formatted time for display\n                    dateTimeString: current.format('YYYY-MM-DD HH:mm:ss'), // Y-m-d H:m:s format for comparisons\n                })\n                current = current.add(30, 'minute') // Move to the next 30-minute interval\n            }\n            // console.log('getter', 47)\n            return intervals\n        },\n\n        upcomingContent: (state) => {\n            // Since viewingWindowStart is now a Day.js object, use Day.js methods directly\n            const start = dayjs(state.viewingWindowStart).subtract(1, 'hour') // 1 hour earlier\n            const end = start.add(7, 'hours') // 6 hours later from the start\n\n            // Group shows by start time using Day.js\n            const showsGroupedByStartTime = state.weeklyContent.reduce((acc, item) => {\n                const itemStart = dayjs(item.start_dateTime).valueOf() // Use .valueOf() to get the timestamp\n                if (!acc[itemStart]) {\n                    acc[itemStart] = []\n                }\n                acc[itemStart].push(item)\n                return acc\n            }, {})\n\n            // Select the show with the lowest priority for each start time\n            const selectedShows = Object.values(showsGroupedByStartTime).map(group => {\n                return group.reduce((selected, item) => {\n                    return !selected || item.priority < selected.priority ? item : selected\n                }, null)\n            })\n            // console.log('getter', 48)\n            // Filter shows that fall within the next 6-hour window and sort them\n            return selectedShows\n                .filter(item => {\n                    const itemStart = dayjs(item.start_dateTime)\n                    return itemStart.isSameOrAfter(start) && itemStart.isBefore(end)\n                })\n                .sort((a, b) => dayjs(a.start_dateTime).unix() - dayjs(b.start_dateTime).unix()) // Sorting by Unix timestamp\n        },\n\n\n        nextSixHours: (state) => {\n            // Assuming state.viewingWindowStart is already a Day.js object.\n            // If it's still a native Date, convert it first:\n            let adjustedStart = dayjs(state.viewingWindowStart)\n\n            // Add 6 hours to the adjusted start time\n            const end = adjustedStart.add(6, 'hours')\n\n            // Generate each hour of the interval between adjustedStart and end\n            const hours = []\n            let hour = adjustedStart\n\n            while (hour.isBefore(end)) {\n                hours.push(hour.toDate()) // Convert back to Date if necessary; otherwise, just use `hour` if you can use Day.js objects directly\n                hour = hour.add(1, 'hour')\n            }\n            // console.log('getter', 49)\n            return hours\n        },\n\n        dateMessage: (state) => {\n            const startDay = dayjs(state.viewingWindowStart).startOf('day');\n\n            // Check if startDay is a valid date\n            if (!startDay.isValid()) {\n                return 'Invalid date';\n            }\n\n            const formattedDate = startDay.format('dddd MMMM DD, YYYY');\n\n            if (startDay.isToday()) {\n                return `Today - ${formattedDate}`;\n            } else if (startDay.isYesterday()) {\n                return `Yesterday - ${formattedDate}`;\n            } else if (startDay.isTomorrow()) {\n                return `Tomorrow - ${formattedDate}`;\n            } else {\n                return formattedDate;\n            }\n        },\n\n        currentMonthIndex: (state) => {\n            // Ensure state.currentMonth is converted to a Day.js object\n            const month = dayjs(state.currentMonth)\n            // console.log('getter', 51)\n            // Day.js months are 0-indexed just like JavaScript Date, returns the month (0-11)\n            return month.month()\n        },\n\n        currentMonthName: (state) => {\n            // Ensure state.currentMonth is converted to a Day.js object\n            const month = dayjs(state.currentMonth)\n            // console.log('getter', 52)\n            // Returns the full name of the month, e.g., 'January', 'February', etc.\n            return month.format('MMMM')\n        },\n\n        currentYear: (state) => {\n            // Ensure state.currentMonth is converted to a Day.js object\n            const month = dayjs(state.currentMonth)\n            // console.log('getter', 53)\n            // Returns the year\n            return month.year()\n        },\n        isToday: (state) => {\n            const today = dayjs()  // Gets today's date as a Day.js object\n            const viewingStart = dayjs(state.viewingWindowStart)  // Convert to Day.js object if not already\n            // console.log('getter', 54)\n            // Compare if both dates are the same calendar day\n            return today.isSame(viewingStart, 'day')\n        },\n\n        daysInMonth: (state) => {\n            // Assuming state.currentMonth is a Day.js object; if it's a Date, convert it:\n            const currentMonth = dayjs(state.currentMonth)\n\n            const startOfCurrentMonth = currentMonth.startOf('month')\n            const endOfCurrentMonth = currentMonth.endOf('month')\n\n            // Adjust these to ensure the grid starts on Sunday and ends on Saturday\n            const startOfGrid = startOfCurrentMonth.startOf('week')  // Assumes the week starts on Sunday by default\n            const endOfGrid = endOfCurrentMonth.endOf('week')        // Assumes the week ends on Saturday by default\n\n            // Generate the days for the calendar grid\n            const days = []\n            let day = startOfGrid\n\n            while (day.isBefore(endOfGrid) || day.isSame(endOfGrid, 'day')) {\n                days.push(day.toDate()) // Collect days as Date objects; remove toDate() if you can use Day.js objects directly\n                day = day.add(1, 'day')\n            }\n            // console.log('getter', 55)\n            return days\n        },\n\n    },\n})\n"],"names":["dayjs","utc","timezone","_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","delegateYield","asyncGeneratorStep","_asyncToGenerator","arguments","apply","_next","_throw","ownKeys","getOwnPropertySymbols","filter","getOwnPropertyDescriptor","_objectSpread","_defineProperty","getOwnPropertyDescriptors","defineProperties","toPrimitive","String","Number","_toPrimitive","_toPropertyKey","convertScheduleToTimezone","scheduleData","userStore","useUserStore","data","map","item","startTimeInUserTz","start_dateTime","formatDateTimeFromUtcToUserTimezone","endTimeInUserTz","end_dateTime","getUpcomingContentDates","viewingWindowStart","dates","start","add","toDate","weekOfYear","isToday","isYesterday","isTomorrow","advancedFormat","isSameOrAfter","isSameOrBefore","getTimeZone","initialState","baseTime","tz","currentHalfHour","startOf","minute","fourHoursLater","currentMonth","selectedDay","currentWeekStart","currentWeekEnd","endOf","nextFourHoursOfContent","nextFourHoursOfContentWithPlaceholders","fiveDaySixHourSchedule","schedules","isLoading","nextPage","hasMore","todaysContent","weeklyContent","dataFetchLog","savingToSchedule","slotIntervalMinutes","mediumScreenSlotHours","smallScreenSlotHours","verySmallScreenSlotHours","timeSlots","timeBanners","id","startTime","duration","useScheduleStore","defineStore","state","actions","resetAll","assign","this","setSelectedDay","day","_this","_callee","_context","fetchWeekDataIfNeeded","setSelectedDayToToday","now","changeDay","days","_this2","_callee2","currentTimeZone","currentTime","newDay","_context2","hour","shiftHours","hours","_this3","_callee3","_context3","isSame","isElevenPM","date","subtractMonth","_this4","_callee4","_context4","subtract","t0","console","error","concat","addMonth","_this5","_callee5","_context5","fetchFiveDaySixHourSchedule","_this6","_callee6","response","_context6","axios","get","userTimezone","fetchTodaysContent","_this7","_callee7","_context7","preloadWeeklyContent","_this8","_callee8","currentDate","_context8","log","loadWeekFromDate","fetchSchedules","startDate","endDate","_this9","_callee9","dayStartDate","dayEndDate","fullISOStartDate","fullISOEndDate","newData","_context9","toISOString","_toConsumableArray","Set","JSON","stringify","parse","fetchMoreSchedules","_this10","_callee10","lastSchedule","_context10","format","_this11","_callee11","formattedDate","dayDate","fullISODate","_context11","post","index","self","findIndex","updateFetchLogs","weekStart","weekEnd","fetchTime","existingLogIndex","lastFetch","needsDataForWeek","formatISODate","weekStartStr","weekEndStr","some","logWeekStartStr","logWeekEndStr","calculateExtendedEndForUpcomingContent","checkAndFetchForUpcomingContent","_this12","_callee12","upcomingDates","fifteenMinutesAgo","_iterator","_step","_loop","_context13","_createForOfIteratorHelper","dayjsDate","dateString","_context12","content","contentDate","lastFetchedTime","isFresh","fetchDataAndUpdateLog","t1","_this13","_callee13","_context14","_this14","_callee14","_context15","updateBaseTime","time","setBaseTime","newTime","updateNextFourHours","_this15","_callee15","_context16","updateTimeRange","setTimeSlots","prepareShowsForGrid","baseDate","roundedMinutes","second","millisecond","initializeTimeSlots","durationHours","undefined","intervalMinutes","slots","slotTime","createTimeSlots","slotHours","appSettingStore","useAppSettingStore","isVerySmallScreen","isSmallScreen","totalSlots","Array","isArray","shows","filterShowsForTimeRange","processedShows","calculateGridSlots","showsWithStatusFlags","processShows","_this$updateColumnOcc","updateColumnOccupancy","colOccupancy","maxRowUsed","gridItems","fillGapsAndCreatePlaceholders","combinedShows","sortShowsByPosition","_this16","show","duration_minutes","warn","showStart","showEnd","isInTimeRange","isBefore","isAfter","firstTimeSlot","lastTimeSlot","slotIndex","slot","Math","max","endSlotIndex","span","gridStart","gridSpan","_this17","comingUpNextSet","end","nowPlaying","placeholder","gridRow","comingUpNext","cols","fill","row","findAndFillGapsForSingleRow","gapStart","has","createPlaceholder","createBlankSpotPlaceholder","sort","b","priority","purgeAllCaches","_callee16","notificationStore","_context17","useNotificationStore","setToastNotification","message","router","reload","updateSchedule","_callee17","_context18","getters","preparedTimeBanners","timeZone","todayStart","tomorrowStart","yesterdayStart","flatMap","banner","bannerTodayStart","parseInt","split","bannerTodayEnd","clone","bannerTomorrowStart","bannerTomorrowEnd","bannerYesterdayStart","bannerYesterdayEnd","startSlotIndex","nextFourHoursWithHalfHourIntervals","intervals","current","formatted","dateTimeString","upcomingContent","showsGroupedByStartTime","reduce","acc","itemStart","valueOf","group","selected","unix","nextSixHours","adjustedStart","dateMessage","startDay","isValid","currentMonthIndex","month","currentMonthName","currentYear","year","today","viewingStart","daysInMonth","startOfCurrentMonth","endOfCurrentMonth","startOfGrid","endOfGrid"],"sourceRoot":""}