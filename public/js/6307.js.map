{"version":3,"file":"js/6307.js","mappings":"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","sources":["webpack:///./resources/js/Pages/Profile/Partials/UpdateCreatorSettings.vue?ce04","webpack:///./resources/js/Jetstream/ActionMessage.vue","webpack:///./resources/js/Jetstream/FormSection.vue?2128","webpack:///./resources/js/Jetstream/FormSection.vue","webpack:///./resources/js/Jetstream/Input.vue?28c0","webpack:///./resources/js/Jetstream/Input.vue","webpack:///./resources/js/Jetstream/InputError.vue","webpack:///./resources/js/Jetstream/Label.vue","webpack:///./resources/js/Jetstream/SecondaryButton.vue","webpack:///./resources/js/Jetstream/SectionTitle.vue","webpack:///./resources/js/Jetstream/SectionTitle.vue?8590","webpack:///./resources/js/Pages/Profile/Partials/UpdateCreatorSettings.vue","webpack:///./resources/js/Pages/Profile/Partials/UpdateCreatorSettings.vue?7b1c","webpack:///./resources/js/Pages/Profile/Partials/UpdateCreatorSettings.vue?1a14"],"sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".fade-enter-active,.fade-leave-active{transition:opacity .5s}.fade-enter,.fade-leave-to{opacity:0}\", \"\",{\"version\":3,\"sources\":[\"webpack://./resources/js/Pages/Profile/Partials/UpdateCreatorSettings.vue\"],\"names\":[],\"mappings\":\"AAiJA,sCACE,sBACF,CACA,2BACE,SACF\",\"sourcesContent\":[\"<template>\\n  <JetFormSection @submitted=\\\"updateCreatorSettings\\\">\\n    <template #title>\\n      Creator Profile Settings<br><span class=\\\"text-green-500 tracking-wide\\\">(creators only)</span>\\n    </template>\\n\\n    <template #description>\\n      Here you can customize your creator profile settings. Adjust visibility preferences, manage notification settings, and update other personal options to tailor how you interact with the platform and how others see your profile.\\n    </template>\\n\\n    <template #form>\\n      <!-- Profile Visibility -->\\n      <div class=\\\"col-span-6 sm:col-span-4 bg-white dark:bg-gray-800 dark:text-white\\\">\\n        <JetLabel for=\\\"profile_is_public\\\" value=\\\"Profile Visibility:\\\"/>\\n        <!-- Update the v-model to bind with the form object -->\\n        Private <input type=\\\"checkbox\\\" id=\\\"profile_is_public\\\" class=\\\"toggle toggle-success bg-white dark:bg-gray-800 dark:text-white\\\"\\n               v-model=\\\"profileIsPublic\\\" ref=\\\"checkboxRef\\\" @click=\\\"handleCheckboxClick\\\"/> Public\\n        <!-- Display error message if there is an error related to profile_is_public -->\\n        <JetInputError :message=\\\"form.errors['settings.profile_is_public']\\\" class=\\\"mt-2\\\"/>\\n      </div>\\n    </template>\\n\\n    <template #actions>\\n      <JetActionMessage :on=\\\"savedMessage\\\" class=\\\"mr-3\\\">\\n        <span class=\\\"text-green-500\\\">Saved.</span>\\n      </JetActionMessage>\\n\\n      <JetButton :class=\\\"{ 'opacity-25': form.processing }\\\" :disabled=\\\"form.processing\\\">\\n        Save\\n      </JetButton>\\n    </template>\\n  </JetFormSection>\\n</template>\\n<script setup>\\nimport { computed, onMounted, reactive, ref, watch } from 'vue'\\nimport { Inertia } from '@inertiajs/inertia'\\nimport { usePage } from '@inertiajs/inertia-vue3'\\nimport { Link, useForm } from '@inertiajs/inertia-vue3'\\nimport JetButton from '@/Jetstream/Button.vue'\\nimport JetFormSection from '@/Jetstream/FormSection.vue'\\nimport JetInput from '@/Jetstream/Input.vue'\\nimport JetInputError from '@/Jetstream/InputError.vue'\\nimport JetLabel from '@/Jetstream/Label.vue'\\nimport JetActionMessage from '@/Jetstream/ActionMessage.vue'\\nimport JetSecondaryButton from '@/Jetstream/SecondaryButton.vue'\\n\\nconst props = usePage().props\\n\\n// Initialize the form with useForm, include initial settings possibly coming from props\\nconst form = useForm({\\n  settings: {\\n    profile_is_public: settings?.profile_is_public || false, // default to false if undefined\\n  },\\n})\\n\\nconst checkboxRef = ref(null);\\n\\nconst handleCheckboxClick = () => {\\n  // You may perform other actions here if needed before blurring the checkbox\\n  if (checkboxRef.value) {\\n    checkboxRef.value.blur();\\n  }\\n};\\n\\nconst settings = reactive({\\n  profile_is_public: null, // Default value until fetched from server\\n})\\n\\nconst savedMessage = ref(false)\\n\\nconst profileIsPublic = computed({\\n  get() {\\n    // You can add any additional logic here if necessary\\n    return settings.profile_is_public;\\n  },\\n  set(value) {\\n    settings.profile_is_public = value;\\n    // Any additional logic when setting the value can also be included here\\n    // For example, you might want to debounce an update request to the server\\n  }\\n})\\n\\nconst fetchCreatorSettings = async () => {\\n  const userId = props.value.user.id // Assuming props are passed directly without 'value'\\n\\n  try {\\n    console.log(`Fetching settings for user ID: ${userId}`) // Debug log\\n    const response = await axios.get(`/user/creator/get-settings/${userId}`)\\n\\n    // Update the entire settings object\\n    for (const key in response.data) {\\n      if (response.data.hasOwnProperty(key)) {\\n        settings[key] = response.data[key];\\n      }\\n    }\\n    // If settings are fetched later and need to sync with useForm\\n    form.settings.profile_is_public = settings.profile_is_public;\\n    console.log('Settings fetched successfully:', settings.profile_is_public);\\n\\n  } catch (error) {\\n    console.error('Failed to fetch creator settings:', error)\\n    // Handle loading state or display error message in UI as needed\\n  }\\n}\\n\\n// After fetching settings and updating the `settings` object\\nwatch(() => settings.profile_is_public, (newValue) => {\\n  form.settings.profile_is_public = newValue;\\n}, { immediate: true });\\n\\n// Fetch settings immediately when the component is created/mounted\\nonMounted(fetchCreatorSettings)\\n\\n\\n\\nconst updateCreatorSettings = () => {\\n  console.log('Submitting:', form.settings.profile_is_public);  // Log what is actually being submitted\\n  // Check if the profile_is_public property is undefined\\n  if (settings.profile_is_public === undefined) {\\n    console.error('Cannot update settings because they have not been fetched yet.');\\n    return;\\n  }\\n\\n  const userId = props.value.user.id  // Ensure userId is available\\n  form.patch(`/user/creator/update-settings/${userId}`, {\\n    onSuccess: (response) => {\\n      console.log('Settings updated successfully!', response.message)\\n      savedMessage.value = true; // Update local data to show message\\n      setTimeout(() => {\\n        savedMessage.value = false  // Optionally clear the message after a few seconds\\n      }, 3000)\\n    },\\n    onFinish: () => {\\n      form.reset('settings')  // Reset the settings field after successful update\\n      console.log('Form has been reset.')\\n    },\\n    onError: (errors) => console.error(\\\"Update errors:\\\", errors),\\n    preserveScroll: true,\\n    errorBag: 'updateCreatorSettings'\\n  })\\n}\\n\\n</script>\\n\\n<style>\\n.fade-enter-active, .fade-leave-active {\\n  transition: opacity 0.5s;\\n}\\n.fade-enter, .fade-leave-to /* .fade-leave-active in <2.1.8 */ {\\n  opacity: 0;\\n}\\n</style>\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","import script from \"./ActionMessage.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./ActionMessage.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","import script from \"./FormSection.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./FormSection.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<script setup>\nimport { computed, useSlots } from 'vue';\nimport JetSectionTitle from './SectionTitle.vue';\n\ndefineEmits(['submitted']);\n\nconst hasActions = computed(() => !! useSlots().actions);\n</script>\n\n<template>\n    <div class=\"md:grid md:grid-cols-3 md:gap-6\">\n        <JetSectionTitle>\n            <template #title>\n                <slot name=\"title\" />\n            </template>\n            <template #description>\n                <slot name=\"description\" />\n            </template>\n        </JetSectionTitle>\n\n        <div class=\"mt-5 md:mt-0 md:col-span-2\">\n            <form @submit.prevent=\"$emit('submitted')\">\n                <div\n                    class=\"px-4 py-5 bg-white sm:p-6 shadow\"\n                    :class=\"hasActions ? 'sm:rounded-tl-md sm:rounded-tr-md' : 'sm:rounded-md'\"\n                >\n                    <div class=\"grid grid-cols-6 gap-6\">\n                        <slot name=\"form\" />\n                    </div>\n                </div>\n\n                <div v-if=\"hasActions\" class=\"flex items-center justify-end px-4 py-3 bg-gray-50 text-right sm:px-6 shadow sm:rounded-bl-md sm:rounded-br-md\">\n                    <slot name=\"actions\" />\n                </div>\n            </form>\n        </div>\n    </div>\n</template>\n","import script from \"./Input.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Input.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<script setup>\nimport { onMounted, ref } from 'vue';\n\ndefineProps({\n    modelValue: String,\n});\n\ndefineEmits(['update:modelValue']);\n\nconst input = ref(null);\n\nonMounted(() => {\n    if (input.value.hasAttribute('autofocus')) {\n        input.value.focus();\n    }\n});\n\ndefineExpose({ focus: () => input.value.focus() });\n</script>\n\n<template>\n    <input\n        ref=\"input\"\n        class=\"border-2 border-gray-300 focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50 rounded-md shadow-sm text-black bg-white dark:bg-gray-800 dark:text-white\"\n        :value=\"modelValue\"\n        @input=\"$emit('update:modelValue', $event.target.value)\"\n    >\n</template>\n","import script from \"./InputError.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./InputError.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","import script from \"./Label.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Label.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","import script from \"./SecondaryButton.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./SecondaryButton.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n    <div class=\"md:col-span-1 flex justify-between\">\n        <div class=\"px-4 sm:px-0\">\n            <h3 class=\"text-lg font-medium text-gray-100\">\n                <slot name=\"title\" />\n            </h3>\n\n            <p class=\"mt-1 text-sm text-gray-300\">\n                <slot name=\"description\" />\n            </p>\n        </div>\n\n        <div class=\"px-4 sm:px-0\">\n            <slot name=\"aside\" />\n        </div>\n    </div>\n</template>\n","import { render } from \"./SectionTitle.vue?vue&type=template&id=80f22ac0\"\nconst script = {}\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n  <JetFormSection @submitted=\"updateCreatorSettings\">\n    <template #title>\n      Creator Profile Settings<br><span class=\"text-green-500 tracking-wide\">(creators only)</span>\n    </template>\n\n    <template #description>\n      Here you can customize your creator profile settings. Adjust visibility preferences, manage notification settings, and update other personal options to tailor how you interact with the platform and how others see your profile.\n    </template>\n\n    <template #form>\n      <!-- Profile Visibility -->\n      <div class=\"col-span-6 sm:col-span-4 bg-white dark:bg-gray-800 dark:text-white\">\n        <JetLabel for=\"profile_is_public\" value=\"Profile Visibility:\"/>\n        <!-- Update the v-model to bind with the form object -->\n        Private <input type=\"checkbox\" id=\"profile_is_public\" class=\"toggle toggle-success bg-white dark:bg-gray-800 dark:text-white\"\n               v-model=\"profileIsPublic\" ref=\"checkboxRef\" @click=\"handleCheckboxClick\"/> Public\n        <!-- Display error message if there is an error related to profile_is_public -->\n        <JetInputError :message=\"form.errors['settings.profile_is_public']\" class=\"mt-2\"/>\n      </div>\n    </template>\n\n    <template #actions>\n      <JetActionMessage :on=\"savedMessage\" class=\"mr-3\">\n        <span class=\"text-green-500\">Saved.</span>\n      </JetActionMessage>\n\n      <JetButton :class=\"{ 'opacity-25': form.processing }\" :disabled=\"form.processing\">\n        Save\n      </JetButton>\n    </template>\n  </JetFormSection>\n</template>\n<script setup>\nimport { computed, onMounted, reactive, ref, watch } from 'vue'\nimport { Inertia } from '@inertiajs/inertia'\nimport { usePage } from '@inertiajs/inertia-vue3'\nimport { Link, useForm } from '@inertiajs/inertia-vue3'\nimport JetButton from '@/Jetstream/Button.vue'\nimport JetFormSection from '@/Jetstream/FormSection.vue'\nimport JetInput from '@/Jetstream/Input.vue'\nimport JetInputError from '@/Jetstream/InputError.vue'\nimport JetLabel from '@/Jetstream/Label.vue'\nimport JetActionMessage from '@/Jetstream/ActionMessage.vue'\nimport JetSecondaryButton from '@/Jetstream/SecondaryButton.vue'\n\nconst props = usePage().props\n\n// Initialize the form with useForm, include initial settings possibly coming from props\nconst form = useForm({\n  settings: {\n    profile_is_public: settings?.profile_is_public || false, // default to false if undefined\n  },\n})\n\nconst checkboxRef = ref(null);\n\nconst handleCheckboxClick = () => {\n  // You may perform other actions here if needed before blurring the checkbox\n  if (checkboxRef.value) {\n    checkboxRef.value.blur();\n  }\n};\n\nconst settings = reactive({\n  profile_is_public: null, // Default value until fetched from server\n})\n\nconst savedMessage = ref(false)\n\nconst profileIsPublic = computed({\n  get() {\n    // You can add any additional logic here if necessary\n    return settings.profile_is_public;\n  },\n  set(value) {\n    settings.profile_is_public = value;\n    // Any additional logic when setting the value can also be included here\n    // For example, you might want to debounce an update request to the server\n  }\n})\n\nconst fetchCreatorSettings = async () => {\n  const userId = props.value.user.id // Assuming props are passed directly without 'value'\n\n  try {\n    console.log(`Fetching settings for user ID: ${userId}`) // Debug log\n    const response = await axios.get(`/user/creator/get-settings/${userId}`)\n\n    // Update the entire settings object\n    for (const key in response.data) {\n      if (response.data.hasOwnProperty(key)) {\n        settings[key] = response.data[key];\n      }\n    }\n    // If settings are fetched later and need to sync with useForm\n    form.settings.profile_is_public = settings.profile_is_public;\n    console.log('Settings fetched successfully:', settings.profile_is_public);\n\n  } catch (error) {\n    console.error('Failed to fetch creator settings:', error)\n    // Handle loading state or display error message in UI as needed\n  }\n}\n\n// After fetching settings and updating the `settings` object\nwatch(() => settings.profile_is_public, (newValue) => {\n  form.settings.profile_is_public = newValue;\n}, { immediate: true });\n\n// Fetch settings immediately when the component is created/mounted\nonMounted(fetchCreatorSettings)\n\n\n\nconst updateCreatorSettings = () => {\n  console.log('Submitting:', form.settings.profile_is_public);  // Log what is actually being submitted\n  // Check if the profile_is_public property is undefined\n  if (settings.profile_is_public === undefined) {\n    console.error('Cannot update settings because they have not been fetched yet.');\n    return;\n  }\n\n  const userId = props.value.user.id  // Ensure userId is available\n  form.patch(`/user/creator/update-settings/${userId}`, {\n    onSuccess: (response) => {\n      console.log('Settings updated successfully!', response.message)\n      savedMessage.value = true; // Update local data to show message\n      setTimeout(() => {\n        savedMessage.value = false  // Optionally clear the message after a few seconds\n      }, 3000)\n    },\n    onFinish: () => {\n      form.reset('settings')  // Reset the settings field after successful update\n      console.log('Form has been reset.')\n    },\n    onError: (errors) => console.error(\"Update errors:\", errors),\n    preserveScroll: true,\n    errorBag: 'updateCreatorSettings'\n  })\n}\n\n</script>\n\n<style>\n.fade-enter-active, .fade-leave-active {\n  transition: opacity 0.5s;\n}\n.fade-enter, .fade-leave-to /* .fade-leave-active in <2.1.8 */ {\n  opacity: 0;\n}\n</style>","import api from \"!../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../../../node_modules/css-loader/dist/cjs.js??clonedRuleSet-10.use[1]!../../../../../node_modules/vue-loader/dist/stylePostLoader.js!../../../../../node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-10.use[2]!../../../../../node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./UpdateCreatorSettings.vue?vue&type=style&index=0&id=81e10e12&lang=css\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","import script from \"./UpdateCreatorSettings.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./UpdateCreatorSettings.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./UpdateCreatorSettings.vue?vue&type=style&index=0&id=81e10e12&lang=css\"\n\nconst __exports__ = script;\n\nexport default __exports__"],"names":["___CSS_LOADER_EXPORT___","push","module","id","hasActions","computed","useSlots","actions","input","ref","onMounted","value","hasAttribute","focus","__expose","class","script","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_hoisted_3","_renderSlot","_ctx","$slots","_hoisted_4","_hoisted_5","props","usePage","form","useForm","settings","profile_is_public","checkboxRef","handleCheckboxClick","blur","reactive","savedMessage","profileIsPublic","get","set","fetchCreatorSettings","_ref","_regeneratorRuntime","mark","_callee","userId","response","key","wrap","_context","prev","next","user","console","log","concat","axios","sent","data","hasOwnProperty","t0","error","stop","apply","arguments","watch","newValue","immediate","updateCreatorSettings","undefined","patch","onSuccess","message","setTimeout","onFinish","reset","onError","errors","preserveScroll","errorBag","options","locals"],"sourceRoot":""}