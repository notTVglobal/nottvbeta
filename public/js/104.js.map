{"version":3,"file":"js/104.js","mappings":"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","sources":["webpack:///./resources/js/Utilities/PageSetup.js","webpack:///./resources/js/Pages/Movies/Upload.chunk.notWorking.vue?4fcc","webpack:///./resources/js/Components/Global/Modals/Messages.vue?dfe9","webpack:///./resources/js/Components/Global/Modals/Messages.vue","webpack:///./resources/js/Pages/Movies/Upload.chunk.notWorking.vue","webpack:///./resources/js/Pages/Movies/Upload.chunk.notWorking.vue?e8b3","webpack:///./resources/js/Pages/Movies/Upload.chunk.notWorking.vue?23c1"],"sourcesContent":["import { onBeforeMount, onMounted } from 'vue'\nimport { useUserStore } from \"@/Stores/UserStore\"\nimport { useAppSettingStore } from \"@/Stores/AppSettingStore\"\nimport { useVideoPlayerStore } from \"@/Stores/VideoPlayerStore\"\nimport { router } from '@inertiajs/vue3'\n\nexport function usePageSetup(pageName) {\n    const userStore = useUserStore()\n    const appSettingStore = useAppSettingStore()\n    const videoPlayerStore = useVideoPlayerStore()\n\n    appSettingStore.currentPage = pageName\n    appSettingStore.showFlashMessage = true\n    appSettingStore.pageIsHidden = false\n\n// PageSetup utility\n    if (userStore.isMobile || window.innerWidth < 1024) {\n        appSettingStore.ott = 0; // Close all panels on mobile devices\n    } else if (appSettingStore.fullPage) {\n        appSettingStore.ott = 0; // Default to closed in fullPage mode\n    } else {\n        if (appSettingStore.ott === 0) {\n            appSettingStore.ott = 4\n        }\n        // appSettingStore.ott = 4; // Open OttChat by default on larger screens\n        appSettingStore.showOttButtons = true;\n    }\n\n    videoPlayerStore.makeVideoTopRight()\n\n    if (appSettingStore.pageReload) {\n        appSettingStore.pageReload = false\n        appSettingStore.pageWasReloaded = true\n        window.location.reload();\n    }\n    // Check if the URL contains query strings\n\n\n    // Only scroll into view if there are no query strings\n\n        // const topDiv = document.getElementById(\"topDiv\")\n        // if (topDiv) {\n        //     topDiv.scrollIntoView()\n        // }\n        router.on('navigate', (event) => {\n            // Ensure OTT panels do not open automatically on mobile devices\n            if (userStore.isMobile || window.innerWidth < 1024 || appSettingStore.fullPage) {\n                appSettingStore.ott = 0; // Close all panels on mobile devices\n            } else {\n                if (appSettingStore.ott === 0) {\n                    appSettingStore.ott = 4\n                }\n                // appSettingStore.ott = 0; // Default to closed on larger screens\n            }\n            const hasQueryStrings = window.location.search !== '';\n            if (!hasQueryStrings || appSettingStore.shouldScrollToTop) {\n                requestAnimationFrame(() => {\n                    const topDiv = document.getElementById(\"topDiv\");\n                    if (topDiv) {\n                        topDiv.scrollIntoView({behavior: 'auto'});\n                    } else {\n                        window.scrollTo(0, 0);\n                    }\n                });\n            }\n            appSettingStore.shouldScrollToTop = false;\n        })\n    // Only update if we're not already on this page to avoid overwriting with the current URL\n    appSettingStore.setPrevUrl()\n    appSettingStore.showOttButtons = true\n    appSettingStore.noLayout = false\n\n    // router.reload()\n\n}\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".dropzone[data-v-360f9eaa]{align-items:center;border:2px dashed #6b7280;display:flex;flex-direction:column;height:200px;justify-content:center;row-gap:16px;transition:all .3s ease;width:400px}label[data-v-360f9eaa]{padding:8px 12px;transition:all .3s ease}.active-dropzone[data-v-360f9eaa],label[data-v-360f9eaa]{background-color:#4bb1b1;color:#fff}.active-dropzone[data-v-360f9eaa]{border-color:#fff}.active-dropzone label[data-v-360f9eaa]{background-color:#fff;color:#4bb1b1}\", \"\",{\"version\":3,\"sources\":[\"webpack://./resources/js/Pages/Movies/Upload.chunk.notWorking.vue\"],\"names\":[],\"mappings\":\"AAySA,2BAME,kBAAmB,CAEnB,yBAA0B,CAL1B,YAAa,CACb,qBAAsB,CAFtB,YAAa,CAGb,sBAAuB,CAEvB,YAAa,CAEb,uBAAyB,CARzB,WASF,CAEA,uBACE,gBAAiB,CAGjB,uBACF,CAEA,yDAJE,wBAAyB,CADzB,UASF,CAJA,kCAEE,iBAEF,CAEA,wCACE,qBAAsB,CACtB,aACF\",\"sourcesContent\":[\"<template>\\n\\n  <Head :title=\\\"`Upload Movie`\\\"/>\\n\\n  <header id=\\\"topDiv\\\" class=\\\"md:pageWidth pageWidthSmall\\\">\\n\\n    <Message v-if=\\\"appSettingStore.showFlashMessage\\\" :flash=\\\"$page.props.flash\\\"/>\\n\\n    <div\\n        class=\\\"flex justify-between p-4 m-4 text-sm text-red-700 bg-red-100 rounded-lg dark:bg-red-200 dark:text-red-800\\\"\\n        role=\\\"alert\\\"\\n        v-if=\\\"props.errors.video\\\">\\n                <span class=\\\"font-medium\\\">\\n                    {{ props.errors.video }}\\n                </span>\\n    </div>\\n\\n  </header>\\n\\n\\n  <div class=\\\"place-self-center flex flex-col gap-y-3\\\">\\n    <div class=\\\"bg-white text-black p-5 mb-10\\\">\\n\\n      <div class=\\\"flex justify-between mb-3\\\">\\n        <div class=\\\"mb-4\\\">\\n          <h1 class=\\\"text-3xl font-semibold\\\">Movie Upload</h1>\\n        </div>\\n        <div>\\n          <div class=\\\"flex flex-wrap-reverse justify-end gap-2\\\">\\n            <Link :href=\\\"`/dashboard`\\\">\\n              <button\\n                  class=\\\"px-4 py-2 text-white bg-blue-600 hover:bg-blue-500 rounded-lg\\\"\\n              >Dashboard\\n              </button>\\n            </Link>\\n          </div>\\n        </div>\\n      </div>\\n\\n      <div>\\n        <!--                <form @submit.prevent=\\\"submit\\\" enctype=\\\"multipart/form-data\\\">-->\\n        <!--                    <div class=\\\"bg-orange-800 text-white p-4 mb-6\\\"><span class=\\\"font-semibold\\\">Note:</span> File uploads are limited to 500 MB until we implement a chunk method.-->\\n        <!--                    This will require storing the uploaded file on the server in a temp directory, then we can process it and encrypt it using-->\\n        <!--                    FFMPEG and finally upload it to our destination(s), whether that is Digital Ocean Spaces, an attached volume, remote server,-->\\n        <!--                    or a Peer-to-peer distribution network. We also need to implement file validation and restrict the filetypes that can be uploaded.<br>-->\\n        <!--                    For more info about chunking go to:-->\\n        <!--                        <a href=\\\"https://github.com/pionl/laravel-chunk-upload\\\" class=\\\"text-blue-400 hover:text-blue-200\\\" target=\\\"_blank\\\">-->\\n        <!--                            https://github.com/pionl/laravel-chunk-upload</a>-->\\n        <!--                        <br><br>-->\\n        <!--                        Also look at: <a href=\\\"https://pineco.de/chunked-file-upload-with-laravel-and-vue/\\\" class=\\\"text-blue-400 hover:text-blue-200\\\" target=\\\"_blank\\\">-->\\n        <!--                            https://pineco.de/chunked-file-upload-with-laravel-and-vue/-->\\n        <!--                        </a>-->\\n        <!--                    </div>-->\\n        <!--                    <input-->\\n        <!--                        v-model=\\\"form.name\\\"-->\\n        <!--                        type=\\\"text\\\"-->\\n        <!--                        name=\\\"name\\\"-->\\n        <!--                        id=\\\"name\\\"-->\\n        <!--                        class=\\\"border border-gray-400 rounded w-full px-2 py-2 my-2\\\"-->\\n        <!--                        placeholder=\\\"Movie Title\\\"-->\\n        <!--                    />-->\\n        <!--                    <div v-if=\\\"form.errors.name\\\" v-text=\\\"form.errors.name\\\"-->\\n        <!--                         class=\\\"bg-red-600 p-2 w-full text-white font-semibold mt-1\\\"></div>-->\\n        <!--                    <textarea-->\\n        <!--                        v-model=\\\"form.description\\\"-->\\n        <!--                        type=\\\"text\\\"-->\\n        <!--                        name=\\\"description\\\"-->\\n        <!--                        id=\\\"description\\\"-->\\n        <!--                        cols=\\\"30\\\"-->\\n        <!--                        row=\\\"20\\\"-->\\n        <!--                        class=\\\"border border-gray-400 rounded w-full px-2 py-2 my-2\\\"-->\\n        <!--                        placeholder=\\\"Description\\\"-->\\n        <!--                    />-->\\n        <!--                    <div v-if=\\\"form.errors.description\\\" v-text=\\\"form.errors.description\\\"-->\\n        <!--                         class=\\\"bg-red-600 p-2 w-full text-white font-semibold mt-1\\\"></div>-->\\n        <!--                    <input-->\\n        <!--                        v-model=\\\"form.file_url\\\"-->\\n        <!--                        type=\\\"text\\\"-->\\n        <!--                        name=\\\"file_url\\\"-->\\n        <!--                        id=\\\"file_url\\\"-->\\n        <!--                        class=\\\"border border-gray-400 rounded w-full px-2 py-2 my-2\\\"-->\\n        <!--                        placeholder=\\\"Link to existing video file (optional)\\\"-->\\n        <!--                    />-->\\n        <!--                    <div v-if=\\\"form.errors.file_url\\\" v-text=\\\"form.errors.file_url\\\"-->\\n        <!--                         class=\\\"bg-red-600 p-2 w-full text-white font-semibold mt-1\\\"></div>-->\\n\\n        <!--                    <div-->\\n        <!--                        @dragenter.prevent=\\\"toggleActive\\\"-->\\n        <!--                        @dragleave.prevent=\\\"toggleActive\\\"-->\\n        <!--                        @dragover.prevent-->\\n        <!--                        @drop.prevent=\\\"drop\\\"-->\\n        <!--                        :class=\\\"{ 'active-dropzone': active }\\\"-->\\n        <!--                        class=\\\"dropzone mt-4\\\">-->\\n        <!--                        <span>Drag or Drop Video</span>-->\\n        <!--                        <span>OR</span>-->\\n        <!--                        <label for=\\\"dropzoneFile\\\" class=\\\"cursor-pointer hover:bg-gray-600\\\">Select Video</label>-->\\n        <!--                        <input-->\\n        <!--                            type=\\\"file\\\"-->\\n        <!--                            name=\\\"video\\\"-->\\n        <!--                            id=\\\"dropzoneFile\\\"-->\\n        <!--                            class=\\\"dropzoneFile border border-gray-400 rounded w-full px-2 py-2 my-2\\\"-->\\n        <!--                            @change=\\\"selectedFile\\\"-->\\n        <!--                            ref=\\\"fileInput\\\"-->\\n        <!--                            accept=\\\"video/*\\\"-->\\n        <!--                            @input=\\\"form.video = $event.target.files[0]\\\"-->\\n        <!--                            style=\\\"display: none\\\"/>-->\\n        <!--                    </div>-->\\n\\n        <!--                    <progress :value=\\\"progress\\\"></progress>-->\\n\\n        <!--                    <div class=\\\"mt-2\\\">File: {{ dropzoneFile.name }}</div>-->\\n\\n        <!--                    <div v-if=\\\"form.errors.video\\\" v-text=\\\"form.errors.video\\\"-->\\n        <!--                         class=\\\"bg-red-600 p-2 w-full text-white font-semibold mt-1\\\"></div>-->\\n\\n\\n        <!--                    <button-->\\n        <!--                        @click=\\\"submit\\\"-->\\n        <!--                        class=\\\"bg-green-600 hover:bg-green-500 text-white rounded py-2 px-4 mt-2\\\"-->\\n        <!--                        :disabled=\\\"form.processing\\\"-->\\n        <!--                    >-->\\n        <!--                        Upload-->\\n        <!--                    </button>-->\\n\\n        <!--                </form>-->\\n\\n        <div> New chunk uploader</div>\\n        <input\\n            type=\\\"file\\\"\\n            @change=\\\"select\\\"\\n            name=\\\"video\\\"\\n            class=\\\"dropzoneFile border border-gray-400 rounded w-full px-2 py-2 my-2\\\"\\n            ref=\\\"fileInputChunk\\\"\\n            accept=\\\"video/*\\\"\\n            @input=\\\"form.video = $event.target.files[0]\\\"\\n        />\\n        >\\n        <progress :value=\\\"progress\\\" class=\\\"w-full\\\"></progress>\\n\\n      </div>\\n\\n    </div>\\n  </div>\\n\\n</template>\\n\\n<script setup>\\nimport { ref } from 'vue'\\nimport { usePageSetup } from '@/Utilities/PageSetup'\\nimport { useAppSettingStore } from '@/Stores/AppSettingStore'\\n\\nconst appSettingStore = useAppSettingStore()\\n\\nimport Message from '@/Components/Global/Modals/Messages'\\n\\nusePageSetup('movies.uploadChunkNotWorking')\\n\\nappSettingStore.currentPage = 'movies'\\nappSettingStore.showFlashMessage = true\\n\\n// onBeforeMount(() => {\\n//     userStore.scrollToTopCounter = 0;\\n// })\\n\\nlet props = defineProps({\\n  errors: ref(''),\\n  isHidden: ref(false),\\n  // filters: Object,\\n})\\n\\n// let form = useForm({\\n//     name: '',\\n//     description: '',\\n//     video: '',\\n//     file_url: '',\\n// });\\n\\n// Dropzone tutorial: https://www.youtube.com/watch?v=wWKhKPN_Pmw\\n\\n// let dropzoneFile = ref([]);\\n// // let chunks = ref([]);\\n// //\\n// const active = ref(false);\\n// //\\n// const toggleActive = () => {\\n//     active.value = !active.value;\\n// }\\n// //\\n// //\\n// //\\n// const drop = (e) => {\\n//     dropzoneFile.value = e.dataTransfer.files[0];\\n//     active.value = !active.value;\\n// }\\n// //\\n// const selectedFile = () => {\\n//     dropzoneFile.value = document.querySelector('.dropzoneFile').files[0];\\n// }\\n//\\n// const createChunks = (e) => {\\n//     let size = 2048,\\n//         chunks = Math.ceil(e.file.size / size);\\n//\\n//     for ( let i = 0; i < chunks; i++ ) {\\n//         e.chunks.push(e.file.slice(\\n//             i * size, Math.min(i * size + size, e.file.size), e.file.type\\n//         ));\\n//     }\\n// }\\n//\\n// function upload() {\\n//     axios(this.config).then(response => {\\n//         this.chunks.shift();\\n//     }).catch(error => {});\\n// }\\n//\\n\\n//\\nlet submit = () => {\\n  // form.append('form', json);\\n  // axios.post(\\\"/movie/upload\\\", form.data);\\n  form.post(route('movies.store', form))\\n}\\n\\n\\n</script>\\n\\n<script>\\nexport default {\\n  watch: {\\n    chunks(n, o) {\\n      if (n.length > 0) {\\n        this.upload()\\n      }\\n    },\\n  },\\n\\n  data() {\\n    return {\\n      file: null,\\n      chunks: [],\\n      uploaded: 0,\\n    }\\n  },\\n\\n  computed: {\\n    progress() {\\n      return Math.floor((this.uploaded * 100) / this.file.size)\\n    },\\n    formData() {\\n      let formData = new FormData\\n\\n      formData.set('is_last', this.chunks.length === 1)\\n      formData.set('file', this.chunks[0], `${this.file.name}.part`)\\n\\n      return formData\\n    },\\n    config() {\\n      return {\\n        method: 'POST',\\n        data: this.formData,\\n        url: 'movies/upload',\\n        headers: {\\n          'Content-Type': 'application/octet-stream',\\n        },\\n        onUploadProgress: event => {\\n          this.uploaded += event.loaded\\n        },\\n      }\\n    },\\n  },\\n\\n  methods: {\\n    select(event) {\\n      this.file = event.target.files.item(0)\\n      this.createChunks()\\n    },\\n    upload() {\\n      axios(this.config).then(response => {\\n        this.chunks.shift()\\n      }).catch(error => {\\n      })\\n    },\\n    createChunks() {\\n      let size = 2048, chunks = Math.ceil(this.file.size / size)\\n\\n      for (let i = 0; i < chunks; i++) {\\n        this.chunks.push(this.file.slice(\\n            i * size, Math.min(i * size + size, this.file.size), this.file.type,\\n        ))\\n      }\\n    },\\n  },\\n}\\n</script>\\n\\n<style scoped>\\n.dropzone {\\n  width: 400px;\\n  height: 200px;\\n  display: flex;\\n  flex-direction: column;\\n  justify-content: center;\\n  align-items: center;\\n  row-gap: 16px;\\n  border: 2px dashed #6b7280;\\n  transition: 0.3s ease all;\\n}\\n\\nlabel {\\n  padding: 8px 12px;\\n  color: #fff;\\n  background-color: #4bb1b1;\\n  transition: 0.3s ease all;\\n}\\n\\n.active-dropzone {\\n  color: #fff;\\n  border-color: #fff;\\n  background-color: #4bb1b1;\\n}\\n\\n.active-dropzone label {\\n  background-color: #fff;\\n  color: #4bb1b1;\\n}\\n\\n\\n</style>\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","import script from \"./Messages.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Messages.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n  <div class=\"mx-4 my-4\">\n    <div class=\"alert alert-info mt-4\"\n         v-if=\"props.flash.message\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" class=\"stroke-current shrink-0 w-6 h-6\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n              d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"></path>\n      </svg>\n      <span>{{ props.flash.message }}</span>\n      <button class=\"text-xs ml-12\" @click=\"clearFlashMessage\"> Close</button>\n    </div>\n    <div class=\"alert alert-success mt-4 mx-3\"\n         v-if=\"props.flash.success\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"stroke-current shrink-0 h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n              d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"/>\n      </svg>\n      <span>{{ props.flash.success }}</span>\n      <button class=\"text-xs ml-12\" @click=\"clearFlashMessage\"> Close</button>\n    </div>\n    <div class=\"alert alert-warning mt-4 mx-3\"\n         v-if=\"props.flash.warning\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"stroke-current shrink-0 h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n              d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z\"/>\n      </svg>\n      <span>{{ props.flash.warning }}</span>\n      <button class=\"text-xs ml-12\" @click=\"clearFlashMessage\"> Close</button>\n    </div>\n    <div class=\"alert alert-error mt-4 mx-3\"\n         v-if=\"props.flash.error\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"stroke-current shrink-0 h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n              d=\"M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z\"/>\n      </svg>\n      <span>{{ props.flash.error }}</span>\n      <button class=\"text-xs ml-12\" @click=\"clearFlashMessage\"> Close</button>\n    </div>\n  </div>\n\n</template>\n\n<script setup>\nimport { router } from '@inertiajs/vue3'\nimport { computed } from \"vue\"\nimport { useAppSettingStore } from \"@/Stores/AppSettingStore\"\n\nconst appSettingStore = useAppSettingStore()\n\nappSettingStore.showFlashMessage = true\n\nlet props = defineProps({\n  flash: Object,\n\n})\n\nconst messageType = computed(() => ({\n  'text-green-700 bg-green-100 dark:bg-green-200 dark:text-green-800': props.flash.success,\n  'text-blue-700 bg-blue-100 dark:bg-blue-200 dark:text-blue-800': props.flash.message,\n  'text-orange-700 bg-orange-100 dark:bg-orange-200 dark:text-orange-800': props.flash.warning,\n  'text-red-700 bg-red-100 dark:bg-red-200 dark:text-red-800': props.flash.error,\n}))\n\nconst clearFlashMessage = async () => {\n  await router.post(route('flash.clear'));\n  router.reload();\n};\n</script>\n","<template>\n\n  <Head :title=\"`Upload Movie`\"/>\n\n  <header id=\"topDiv\" class=\"md:pageWidth pageWidthSmall\">\n\n    <Message v-if=\"appSettingStore.showFlashMessage\" :flash=\"$page.props.flash\"/>\n\n    <div\n        class=\"flex justify-between p-4 m-4 text-sm text-red-700 bg-red-100 rounded-lg dark:bg-red-200 dark:text-red-800\"\n        role=\"alert\"\n        v-if=\"props.errors.video\">\n                <span class=\"font-medium\">\n                    {{ props.errors.video }}\n                </span>\n    </div>\n\n  </header>\n\n\n  <div class=\"place-self-center flex flex-col gap-y-3\">\n    <div class=\"bg-white text-black p-5 mb-10\">\n\n      <div class=\"flex justify-between mb-3\">\n        <div class=\"mb-4\">\n          <h1 class=\"text-3xl font-semibold\">Movie Upload</h1>\n        </div>\n        <div>\n          <div class=\"flex flex-wrap-reverse justify-end gap-2\">\n            <Link :href=\"`/dashboard`\">\n              <button\n                  class=\"px-4 py-2 text-white bg-blue-600 hover:bg-blue-500 rounded-lg\"\n              >Dashboard\n              </button>\n            </Link>\n          </div>\n        </div>\n      </div>\n\n      <div>\n        <!--                <form @submit.prevent=\"submit\" enctype=\"multipart/form-data\">-->\n        <!--                    <div class=\"bg-orange-800 text-white p-4 mb-6\"><span class=\"font-semibold\">Note:</span> File uploads are limited to 500 MB until we implement a chunk method.-->\n        <!--                    This will require storing the uploaded file on the server in a temp directory, then we can process it and encrypt it using-->\n        <!--                    FFMPEG and finally upload it to our destination(s), whether that is Digital Ocean Spaces, an attached volume, remote server,-->\n        <!--                    or a Peer-to-peer distribution network. We also need to implement file validation and restrict the filetypes that can be uploaded.<br>-->\n        <!--                    For more info about chunking go to:-->\n        <!--                        <a href=\"https://github.com/pionl/laravel-chunk-upload\" class=\"text-blue-400 hover:text-blue-200\" target=\"_blank\">-->\n        <!--                            https://github.com/pionl/laravel-chunk-upload</a>-->\n        <!--                        <br><br>-->\n        <!--                        Also look at: <a href=\"https://pineco.de/chunked-file-upload-with-laravel-and-vue/\" class=\"text-blue-400 hover:text-blue-200\" target=\"_blank\">-->\n        <!--                            https://pineco.de/chunked-file-upload-with-laravel-and-vue/-->\n        <!--                        </a>-->\n        <!--                    </div>-->\n        <!--                    <input-->\n        <!--                        v-model=\"form.name\"-->\n        <!--                        type=\"text\"-->\n        <!--                        name=\"name\"-->\n        <!--                        id=\"name\"-->\n        <!--                        class=\"border border-gray-400 rounded w-full px-2 py-2 my-2\"-->\n        <!--                        placeholder=\"Movie Title\"-->\n        <!--                    />-->\n        <!--                    <div v-if=\"form.errors.name\" v-text=\"form.errors.name\"-->\n        <!--                         class=\"bg-red-600 p-2 w-full text-white font-semibold mt-1\"></div>-->\n        <!--                    <textarea-->\n        <!--                        v-model=\"form.description\"-->\n        <!--                        type=\"text\"-->\n        <!--                        name=\"description\"-->\n        <!--                        id=\"description\"-->\n        <!--                        cols=\"30\"-->\n        <!--                        row=\"20\"-->\n        <!--                        class=\"border border-gray-400 rounded w-full px-2 py-2 my-2\"-->\n        <!--                        placeholder=\"Description\"-->\n        <!--                    />-->\n        <!--                    <div v-if=\"form.errors.description\" v-text=\"form.errors.description\"-->\n        <!--                         class=\"bg-red-600 p-2 w-full text-white font-semibold mt-1\"></div>-->\n        <!--                    <input-->\n        <!--                        v-model=\"form.file_url\"-->\n        <!--                        type=\"text\"-->\n        <!--                        name=\"file_url\"-->\n        <!--                        id=\"file_url\"-->\n        <!--                        class=\"border border-gray-400 rounded w-full px-2 py-2 my-2\"-->\n        <!--                        placeholder=\"Link to existing video file (optional)\"-->\n        <!--                    />-->\n        <!--                    <div v-if=\"form.errors.file_url\" v-text=\"form.errors.file_url\"-->\n        <!--                         class=\"bg-red-600 p-2 w-full text-white font-semibold mt-1\"></div>-->\n\n        <!--                    <div-->\n        <!--                        @dragenter.prevent=\"toggleActive\"-->\n        <!--                        @dragleave.prevent=\"toggleActive\"-->\n        <!--                        @dragover.prevent-->\n        <!--                        @drop.prevent=\"drop\"-->\n        <!--                        :class=\"{ 'active-dropzone': active }\"-->\n        <!--                        class=\"dropzone mt-4\">-->\n        <!--                        <span>Drag or Drop Video</span>-->\n        <!--                        <span>OR</span>-->\n        <!--                        <label for=\"dropzoneFile\" class=\"cursor-pointer hover:bg-gray-600\">Select Video</label>-->\n        <!--                        <input-->\n        <!--                            type=\"file\"-->\n        <!--                            name=\"video\"-->\n        <!--                            id=\"dropzoneFile\"-->\n        <!--                            class=\"dropzoneFile border border-gray-400 rounded w-full px-2 py-2 my-2\"-->\n        <!--                            @change=\"selectedFile\"-->\n        <!--                            ref=\"fileInput\"-->\n        <!--                            accept=\"video/*\"-->\n        <!--                            @input=\"form.video = $event.target.files[0]\"-->\n        <!--                            style=\"display: none\"/>-->\n        <!--                    </div>-->\n\n        <!--                    <progress :value=\"progress\"></progress>-->\n\n        <!--                    <div class=\"mt-2\">File: {{ dropzoneFile.name }}</div>-->\n\n        <!--                    <div v-if=\"form.errors.video\" v-text=\"form.errors.video\"-->\n        <!--                         class=\"bg-red-600 p-2 w-full text-white font-semibold mt-1\"></div>-->\n\n\n        <!--                    <button-->\n        <!--                        @click=\"submit\"-->\n        <!--                        class=\"bg-green-600 hover:bg-green-500 text-white rounded py-2 px-4 mt-2\"-->\n        <!--                        :disabled=\"form.processing\"-->\n        <!--                    >-->\n        <!--                        Upload-->\n        <!--                    </button>-->\n\n        <!--                </form>-->\n\n        <div> New chunk uploader</div>\n        <input\n            type=\"file\"\n            @change=\"select\"\n            name=\"video\"\n            class=\"dropzoneFile border border-gray-400 rounded w-full px-2 py-2 my-2\"\n            ref=\"fileInputChunk\"\n            accept=\"video/*\"\n            @input=\"form.video = $event.target.files[0]\"\n        />\n        >\n        <progress :value=\"progress\" class=\"w-full\"></progress>\n\n      </div>\n\n    </div>\n  </div>\n\n</template>\n\n<script setup>\nimport { ref } from 'vue'\nimport { usePageSetup } from '@/Utilities/PageSetup'\nimport { useAppSettingStore } from '@/Stores/AppSettingStore'\n\nconst appSettingStore = useAppSettingStore()\n\nimport Message from '@/Components/Global/Modals/Messages'\n\nusePageSetup('movies.uploadChunkNotWorking')\n\nappSettingStore.currentPage = 'movies'\nappSettingStore.showFlashMessage = true\n\n// onBeforeMount(() => {\n//     userStore.scrollToTopCounter = 0;\n// })\n\nlet props = defineProps({\n  errors: ref(''),\n  isHidden: ref(false),\n  // filters: Object,\n})\n\n// let form = useForm({\n//     name: '',\n//     description: '',\n//     video: '',\n//     file_url: '',\n// });\n\n// Dropzone tutorial: https://www.youtube.com/watch?v=wWKhKPN_Pmw\n\n// let dropzoneFile = ref([]);\n// // let chunks = ref([]);\n// //\n// const active = ref(false);\n// //\n// const toggleActive = () => {\n//     active.value = !active.value;\n// }\n// //\n// //\n// //\n// const drop = (e) => {\n//     dropzoneFile.value = e.dataTransfer.files[0];\n//     active.value = !active.value;\n// }\n// //\n// const selectedFile = () => {\n//     dropzoneFile.value = document.querySelector('.dropzoneFile').files[0];\n// }\n//\n// const createChunks = (e) => {\n//     let size = 2048,\n//         chunks = Math.ceil(e.file.size / size);\n//\n//     for ( let i = 0; i < chunks; i++ ) {\n//         e.chunks.push(e.file.slice(\n//             i * size, Math.min(i * size + size, e.file.size), e.file.type\n//         ));\n//     }\n// }\n//\n// function upload() {\n//     axios(this.config).then(response => {\n//         this.chunks.shift();\n//     }).catch(error => {});\n// }\n//\n\n//\nlet submit = () => {\n  // form.append('form', json);\n  // axios.post(\"/movie/upload\", form.data);\n  form.post(route('movies.store', form))\n}\n\n\n</script>\n\n<script>\nexport default {\n  watch: {\n    chunks(n, o) {\n      if (n.length > 0) {\n        this.upload()\n      }\n    },\n  },\n\n  data() {\n    return {\n      file: null,\n      chunks: [],\n      uploaded: 0,\n    }\n  },\n\n  computed: {\n    progress() {\n      return Math.floor((this.uploaded * 100) / this.file.size)\n    },\n    formData() {\n      let formData = new FormData\n\n      formData.set('is_last', this.chunks.length === 1)\n      formData.set('file', this.chunks[0], `${this.file.name}.part`)\n\n      return formData\n    },\n    config() {\n      return {\n        method: 'POST',\n        data: this.formData,\n        url: 'movies/upload',\n        headers: {\n          'Content-Type': 'application/octet-stream',\n        },\n        onUploadProgress: event => {\n          this.uploaded += event.loaded\n        },\n      }\n    },\n  },\n\n  methods: {\n    select(event) {\n      this.file = event.target.files.item(0)\n      this.createChunks()\n    },\n    upload() {\n      axios(this.config).then(response => {\n        this.chunks.shift()\n      }).catch(error => {\n      })\n    },\n    createChunks() {\n      let size = 2048, chunks = Math.ceil(this.file.size / size)\n\n      for (let i = 0; i < chunks; i++) {\n        this.chunks.push(this.file.slice(\n            i * size, Math.min(i * size + size, this.file.size), this.file.type,\n        ))\n      }\n    },\n  },\n}\n</script>\n\n<style scoped>\n.dropzone {\n  width: 400px;\n  height: 200px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  row-gap: 16px;\n  border: 2px dashed #6b7280;\n  transition: 0.3s ease all;\n}\n\nlabel {\n  padding: 8px 12px;\n  color: #fff;\n  background-color: #4bb1b1;\n  transition: 0.3s ease all;\n}\n\n.active-dropzone {\n  color: #fff;\n  border-color: #fff;\n  background-color: #4bb1b1;\n}\n\n.active-dropzone label {\n  background-color: #fff;\n  color: #4bb1b1;\n}\n\n\n</style>\n","import api from \"!../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../../node_modules/css-loader/dist/cjs.js??clonedRuleSet-10.use[1]!../../../../node_modules/vue-loader/dist/stylePostLoader.js!../../../../node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-10.use[2]!../../../../node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./Upload.chunk.notWorking.vue?vue&type=style&index=0&id=360f9eaa&scoped=true&lang=css\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","import script from \"./Upload.chunk.notWorking.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Upload.chunk.notWorking.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./Upload.chunk.notWorking.vue?vue&type=style&index=0&id=360f9eaa&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-360f9eaa\"]])\n\nexport default __exports__"],"names":["usePageSetup","pageName","userStore","useUserStore","appSettingStore","useAppSettingStore","videoPlayerStore","useVideoPlayerStore","currentPage","showFlashMessage","pageIsHidden","isMobile","window","innerWidth","fullPage","ott","showOttButtons","makeVideoTopRight","pageReload","pageWasReloaded","location","reload","router","on","event","search","shouldScrollToTop","requestAnimationFrame","topDiv","document","getElementById","scrollIntoView","behavior","scrollTo","setPrevUrl","noLayout","___CSS_LOADER_EXPORT___","push","module","id","props","__props","clearFlashMessage","computed","flash","success","message","warning","error","_ref","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","post","route","stop","apply","arguments","__default__","watch","chunks","n","o","length","this","upload","data","file","uploaded","progress","Math","floor","size","formData","FormData","set","concat","name","config","_this","method","url","headers","onUploadProgress","loaded","methods","select","target","files","item","createChunks","_this2","axios","then","response","shift","ceil","i","slice","min","type","options","locals"],"sourceRoot":""}