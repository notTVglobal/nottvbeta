{"version":3,"file":"js/2655.js","mappings":"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","sources":["webpack:///./resources/js/Stores/TeamStore.js","webpack:///./resources/js/Utilities/PageSetup.js","webpack:///./resources/js/Pages/Shows/Create.vue?ae20","webpack:///./resources/js/Components/Global/Buttons/CancelButton.vue?b7c6","webpack:///./resources/js/Components/Global/Buttons/CancelButton.vue","webpack:///./resources/js/Components/Global/Modals/Messages.vue?dfe9","webpack:///./resources/js/Components/Global/Modals/Messages.vue","webpack:///./resources/js/Jetstream/ValidationErrors.vue?5fdc","webpack:///./resources/js/Jetstream/ValidationErrors.vue","webpack:///./resources/js/Components/Global/Modals/CheckboxNotification.vue?6fd1","webpack:///./resources/js/Components/Global/Modals/CheckboxNotification.vue","webpack:///./resources/js/Pages/Shows/Create.vue","webpack:///./resources/js/Pages/Shows/Create.vue?559b","webpack:///./resources/js/Pages/Shows/Create.vue?091d"],"sourcesContent":["import {defineStore} from \"pinia\";\nimport {Inertia} from \"@inertiajs/inertia\";\n\nconst initialState = () => ({\n    id: 0,\n    name: '',\n    description: '',\n    slug: '',\n    totalSpots: '',\n    memberSpots: '',\n    teamCreator: [],\n    teamLeader: [],\n    members: [],\n    managers: [],\n    activeShow: [],\n    activeEpisode: [],\n    creators: [],\n    showModal: Boolean,\n    confirmDialog: false,\n    confirmManagerDialog: false,\n    selectedManagerName: '',\n    selectedManagerId: 0,\n    addManager: false,\n    removeManager: false,\n    deleteMemberName: '',\n    deleteMemberId: 0,\n    noteEdit: 0,\n    note: '',\n    saveNoteProcessing: Boolean,\n    // on the show episode manage page\n    // turn on the go live div\n    goLiveDisplay: false,\n    can: [],\n    openComponent: 'teamShows',\n})\n\nexport const useTeamStore = defineStore('teamStore', {\n    state: initialState,\n    actions: {\n        reset() {\n            // Reset the store to its original state (clear all data)\n            Object.assign(this, initialState());\n        },\n        // async fill() {\n        //     let r = await import('@/Json/team.json');\n        //     this.$state = r.default;\n        // },\n        setActiveTeam(team) {\n            this.id = team.id;\n            this.name = team.name;\n            this.description = team.description;\n            this.slug = team.slug;\n            this.totalSpots = team.totalSpots;\n            this.memberSpots = team.memberSpots;\n        },\n        setActiveShow(show) {\n            this.activeShow = show;\n        },\n        setActiveEpisode(episode) {\n            this.activeShow = episode;\n        },\n        // getCreators() {\n        //     Inertia.reload({ only: ['creators'] })\n        // },\n        deleteTeamMemberCancel() {\n            this.confirmDialog = false;\n        },\n        confirmTeamManagerCancel() {\n            this.confirmManagerDialog = false;\n        },\n        // loadTeamMembers(members){\n        //     this.members = members;\n        // }\n        deleteTeamMember() {\n            Inertia.visit(route('teams.removeTeamMember'), {\n                method: 'post',\n                data: {\n                    user_id: this.deleteMemberId,\n                    team_id: this.id,\n                    team_slug: this.slug\n                },\n            })\n        },\n        addTeamManager() {\n            Inertia.visit(route('teams.addTeamManager'), {\n                method: 'post',\n                data: {\n                    user_id: this.selectedManagerId,\n                    team_id: this.id,\n                    team_slug: this.slug\n                },\n            })\n            this.confirmManagerDialog = false;\n        },\n        removeTeamManager() {\n            Inertia.visit(route('teams.removeTeamManager'), {\n                method: 'post',\n                data: {\n                    user_id: this.selectedManagerId,\n                    team_id: this.id,\n                    team_slug: this.slug\n                },\n            })\n            this.confirmManagerDialog = false;\n        },\n        toggleGoLiveDisplay() {\n            this.goLiveDisplay = ! this.goLiveDisplay;\n        }\n    },\n\n    getters: {\n        spotsRemaining() {\n            if (this.totalSpots - this.memberSpots < 1){\n                return 0\n            }\n            return this.totalSpots - this.memberSpots;\n        },\n    }\n});\n\n\n// Another option for declaring specific data to return:\n// let data = r.default;\n//\n// import('@/Json/team.json').then(r => {\n// this.$patch({\n//     name: data.name,\n//     spots: data.spots,\n//     members: data.members\n// });\n// });\n","import { onBeforeMount, onMounted } from 'vue'\nimport { useUserStore } from \"@/Stores/UserStore\"\nimport { useAppSettingStore } from \"@/Stores/AppSettingStore\"\nimport { useVideoPlayerStore } from \"@/Stores/VideoPlayerStore\"\nimport { Inertia } from \"@inertiajs/inertia\"\n\nexport function usePageSetup(pageName) {\n    const userStore = useUserStore()\n    const appSettingStore = useAppSettingStore()\n    const videoPlayerStore = useVideoPlayerStore()\n\n    appSettingStore.currentPage = pageName\n    appSettingStore.showFlashMessage = true\n    appSettingStore.pageIsHidden = false\n\n    if (userStore.isMobile) {\n        appSettingStore.ott = 0\n    }\n\n    videoPlayerStore.makeVideoTopRight()\n\n    let reloadPage = () => {\n        if (appSettingStore.pageReload) {\n            appSettingStore.pageReload = false\n            window.location.reload(true);\n        }\n    };\n\n    onBeforeMount(() => {\n        reloadPage()\n    });\n\n    onMounted(() => {\n        // Check if the URL contains query strings\n        const hasQueryStrings = window.location.search !== '';\n\n        // Only scroll into view if there are no query strings\n        if (!hasQueryStrings) {\n            const topDiv = document.getElementById(\"topDiv\")\n            if (topDiv) {\n                topDiv.scrollIntoView()\n            }\n        }\n        // Only update if we're not already on this page to avoid overwriting with the current URL\n        appSettingStore.setPrevUrl()\n        appSettingStore.noLayout = false\n        Inertia.reload()\n\n    });\n}\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".status-1[data-v-695f6729]{color:green}.status-2[data-v-695f6729]{color:blue}.status-3[data-v-695f6729]{color:purple}.status-4[data-v-695f6729]{color:orange}.status-5[data-v-695f6729]{color:red}.status-6[data-v-695f6729]{color:#a9a9a9;font-style:italic}.status-7[data-v-695f6729],.status-8[data-v-695f6729]{color:#000;font-style:italic}.status-10[data-v-695f6729],.status-9[data-v-695f6729]{color:red;font-style:italic}.status-11[data-v-695f6729]{color:#a9a9a9}\", \"\",{\"version\":3,\"sources\":[\"webpack://./resources/js/Pages/Shows/Create.vue\"],\"names\":[],\"mappings\":\"AAoTA,2BACE,WACF,CAEA,2BACE,UACF,CAEA,2BACE,YACF,CAEA,2BACE,YACF,CAEA,2BACE,SACF,CAEA,2BACE,aAAe,CACf,iBACF,CAOA,sDAJE,UAAY,CACZ,iBAMF,CAOA,uDAJE,SAAU,CACV,iBAMF,CAEA,4BACE,aACF\",\"sourcesContent\":[\"<template>\\n  <Head title=\\\"Create Show\\\"/>\\n\\n  <div class=\\\"place-self-center flex flex-col gap-y-3\\\">\\n    <div id=\\\"topDiv\\\" class=\\\"bg-white text-black dark:bg-gray-800 dark:text-gray-50 p-5 mb-10\\\">\\n\\n      <Message v-if=\\\"appSettingStore.showFlashMessage\\\" :flash=\\\"$page.props.flash\\\"/>\\n\\n      <div class=\\\"flex justify-between mt-3 mb-6\\\">\\n        <div class=\\\"text-3xl\\\">Create Show</div>\\n        <div>\\n          <CancelButton/>\\n        </div>\\n      </div>\\n\\n      <div class=\\\"bg-orange-700 text-white w-full p-6\\\"><span class=\\\"font-bold\\\">NOTE: </span>\\n        We are working on an episode poster and video uploader for this page. For the time being, please\\n        go to the show <span class=\\\"font-bold\\\">EDIT</span> page after you create the show to add a video and a poster.\\n      </div>\\n\\n      <form @submit.prevent=\\\"submit\\\" class=\\\"max-w-md mx-auto mt-8\\\">\\n        <div class=\\\"mb-6\\\">\\n          <label class=\\\"block mb-2 uppercase font-bold text-xs dark:text-gray-200\\\"\\n                 for=\\\"name\\\"\\n          >\\n            Team\\n          </label>\\n          <select\\n              class=\\\"border border-gray-400 p-2 w-full rounded-lg block mb-2 uppercase font-bold text-xs text-gray-800\\\"\\n              v-model=\\\"form.team_id\\\"\\n              required\\n          >\\n            <option\\n                v-for=\\\"team in props.teams\\\"\\n                :key=\\\"team.id\\\"\\n                :value=\\\"team.id\\\"\\n                class=\\\"bg-white text-black border-b dark:text-gray-50 dark:bg-gray-800 dark:border-gray-600\\\"\\n                :class=\\\"'status-' + team.status.id\\\"\\n            >\\n              {{ team.name }} ({{ team.status.status }})\\n            </option>\\n\\n          </select>\\n\\n\\n          <div v-if=\\\"form.errors.team_id\\\" v-text=\\\"form.errors.team_id\\\" class=\\\"text-xs text-red-600 mt-1\\\"></div>\\n        </div>\\n        <div class=\\\"mb-6\\\">\\n          <label class=\\\"block mb-2 uppercase font-bold text-xs dark:text-gray-200\\\"\\n                 for=\\\"name\\\"\\n          >\\n            Show Name\\n          </label>\\n\\n          <input v-model=\\\"form.name\\\"\\n                 class=\\\"bg-gray-50 border border-gray-400 text-gray-900 text-sm p-2 w-full rounded-lg focus:ring-blue-500 focus:border-blue-500\\\"\\n                 type=\\\"text\\\"\\n                 name=\\\"name\\\"\\n                 id=\\\"name\\\"\\n                 required\\n          >\\n          <div v-if=\\\"form.errors.name\\\" v-text=\\\"form.errors.name\\\" class=\\\"text-xs text-red-600 mt-1\\\"></div>\\n        </div>\\n\\n        <div class=\\\"mb-6\\\">\\n          <label class=\\\"block mb-2 uppercase font-bold text-xs dark:text-gray-200\\\"\\n                 for=\\\"category\\\"\\n          >\\n            Category\\n          </label>\\n\\n\\n          <select\\n              class=\\\"border border-gray-400 text-gray-800 p-2 w-full rounded-lg block mb-2 uppercase font-bold text-xs \\\"\\n              v-model=\\\"form.category\\\" @change=\\\"chooseCategory($event)\\\"\\n          >\\n            <option v-for=\\\"category in props.categories\\\"\\n                    :key=\\\"category.id\\\" :value=\\\"category.id\\\">{{ category.name }}\\n            </option>\\n\\n\\n          </select>\\n          <div v-if=\\\"form.errors.category\\\" v-text=\\\"form.errors.category\\\"\\n               class=\\\"text-xs text-red-600 mt-1\\\"></div>\\n\\n          {{ showCategoryDescription }}\\n        </div>\\n\\n        <div class=\\\"mb-6\\\">\\n          <label class=\\\"block mb-1 uppercase font-bold text-xs dark:text-gray-200\\\"\\n                 for=\\\"sub_category\\\"\\n          >\\n            Sub-category\\n          </label>\\n          <div class=\\\"mb-2 text-sm text-orange-600\\\">Sub-categories are coming soon!</div>\\n\\n\\n          <select disabled\\n                  class=\\\"border border-gray-400 text-gray-800 disabled:bg-gray-300 dark:disabled:bg-gray-600 disabled:cursor-not-allowed p-2 w-full rounded-lg block mb-2 uppercase font-bold text-xs\\\"\\n                  v-model=\\\"form.sub_category\\\"\\n          >\\n            <option value=\\\"1\\\">Option</option>\\n          </select>\\n          <div v-if=\\\"form.errors.sub_category\\\" v-text=\\\"form.errors.sub_category\\\"\\n               class=\\\"text-xs text-red-600 mt-1\\\"></div>\\n        </div>\\n\\n        <div class=\\\"mb-6\\\">\\n          <label class=\\\"block mb-2 uppercase font-bold text-xs dark:text-gray-200\\\"\\n                 for=\\\"description\\\"\\n          >\\n            Description\\n          </label>\\n          <textarea v-model=\\\"form.description\\\"\\n                    class=\\\"bg-gray-50 border border-gray-400 text-gray-900 text-sm p-2 w-full rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5\\\"\\n                    type=\\\"text\\\"\\n                    name=\\\"description\\\"\\n                    id=\\\"description\\\"\\n                    required\\n          ></textarea>\\n          <div v-if=\\\"form.errors.description\\\" v-text=\\\"form.errors.description\\\" class=\\\"text-xs text-red-600 mt-1\\\"></div>\\n        </div>\\n\\n        <div class=\\\"mb-6\\\">\\n          <label class=\\\"block mb-2 uppercase font-bold text-xs dark:text-gray-200\\\"\\n                 for=\\\"name\\\"\\n          >\\n            Website URL\\n          </label>\\n\\n          <input v-model=\\\"form.www_url\\\"\\n                 class=\\\"border border-gray-400 p-2 w-full rounded-lg text-black\\\"\\n                 type=\\\"text\\\"\\n                 name=\\\"www_url\\\"\\n                 id=\\\"www_url\\\"\\n          >\\n          <div v-if=\\\"form.errors.www_url\\\" v-text=\\\"form.errors.www_url\\\"\\n               class=\\\"text-xs text-red-600 mt-1\\\"></div>\\n        </div>\\n\\n        <div class=\\\"mb-6\\\">\\n          <label class=\\\"block mb-2 uppercase font-bold text-xs dark:text-gray-200\\\"\\n                 for=\\\"name\\\"\\n          >\\n            Instagram Handle\\n          </label>\\n\\n          <input v-model=\\\"form.instagram_name\\\"\\n                 class=\\\"border border-gray-400 p-2 w-full rounded-lg text-black\\\"\\n                 type=\\\"text\\\"\\n                 name=\\\"instagram_name handle\\\"\\n                 id=\\\"instagram_name\\\"\\n          >\\n          <div v-if=\\\"form.errors.instagram_name\\\" v-text=\\\"form.errors.instagram_name\\\"\\n               class=\\\"text-xs text-red-600 mt-1\\\"></div>\\n        </div>\\n\\n        <div class=\\\"mb-6\\\">\\n          <label class=\\\"block mb-2 uppercase font-bold text-xs dark:text-gray-200\\\"\\n                 for=\\\"name\\\"\\n          >\\n            Telegram URL\\n          </label>\\n\\n          <input v-model=\\\"form.telegram_url\\\"\\n                 class=\\\"border border-gray-400 p-2 w-full rounded-lg text-black\\\"\\n                 type=\\\"text\\\"\\n                 name=\\\"telegram_url\\\"\\n                 id=\\\"telegram_url\\\"\\n          >\\n          <div v-if=\\\"form.errors.telegram_url\\\" v-text=\\\"form.errors.telegram_url\\\"\\n               class=\\\"text-xs text-red-600 mt-1\\\"></div>\\n        </div>\\n\\n        <div class=\\\"mb-6\\\">\\n          <label class=\\\"block mb-2 uppercase font-bold text-xs dark:text-gray-200\\\"\\n                 for=\\\"name\\\"\\n          >\\n            Twitter @\\n          </label>\\n\\n          <input v-model=\\\"form.twitter_handle\\\"\\n                 class=\\\"border border-gray-400 p-2 w-full rounded-lg text-black\\\"\\n                 type=\\\"text\\\"\\n                 name=\\\"twitter_handle\\\"\\n                 id=\\\"twitter_handle\\\"\\n          >\\n          <div v-if=\\\"form.errors.twitter_handle\\\" v-text=\\\"form.errors.twitter_handle\\\"\\n               class=\\\"text-xs text-red-600 mt-1\\\"></div>\\n        </div>\\n\\n        <div class=\\\"mb-6\\\">\\n          <label class=\\\"block mb-2 uppercase font-bold text-xs dark:text-gray-200\\\"\\n                 for=\\\"notes\\\"\\n          >\\n            Notes (Only your team members see these notes, they are not public)\\n          </label>\\n          <textarea v-model=\\\"form.notes\\\"\\n                    class=\\\"bg-gray-50 border border-gray-400 text-gray-900 text-sm p-2 w-full rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5\\\"\\n                    type=\\\"text\\\"\\n                    name=\\\"notes\\\"\\n                    id=\\\"notes\\\"\\n          ></textarea>\\n          <div v-if=\\\"form.errors.notes\\\" v-text=\\\"form.errors.notes\\\" class=\\\"text-xs text-red-600 mt-1\\\"></div>\\n        </div>\\n\\n        <input v-model=\\\"form.user_id\\\" hidden>\\n        <div class=\\\"flex justify-between mb-6\\\">\\n          <JetValidationErrors class=\\\"mr-4\\\"/>\\n          <button\\n              type=\\\"submit\\\"\\n              class=\\\"h-fit bg-blue-600 hover:bg-blue-500 text-white rounded py-2 px-4\\\"\\n              :disabled=\\\"form.processing\\\"\\n          >\\n            Submit\\n          </button>\\n        </div>\\n\\n      </form>\\n\\n      <CheckboxNotification/>\\n\\n    </div>\\n  </div>\\n</template>\\n\\n<script setup>\\nimport { computed, onMounted, ref } from 'vue'\\nimport { useForm } from '@inertiajs/inertia-vue3'\\nimport { usePageSetup } from '@/Utilities/PageSetup'\\nimport { useAppSettingStore } from \\\"@/Stores/AppSettingStore\\\"\\nimport { useNotificationStore } from '@/Stores/NotificationStore'\\nimport { useTeamStore } from '@/Stores/TeamStore'\\nimport JetValidationErrors from '@/Jetstream/ValidationErrors'\\nimport CheckboxNotification from '@/Components/Global/Modals/CheckboxNotification'\\nimport CancelButton from '@/Components/Global/Buttons/CancelButton'\\nimport Message from '@/Components/Global/Modals/Messages'\\n\\nusePageSetup('showsCreate')\\n\\nconst appSettingStore = useAppSettingStore()\\nconst teamStore = useTeamStore()\\nconst notificationStore = useNotificationStore()\\n\\nlet props = defineProps({\\n  teams: Object,\\n  userId: Number,\\n  categories: Object,\\n  subCategories: Object,\\n})\\n\\nconst defaultTeamId = computed(() => {\\n  return teamStore.id || (props.teams.length > 0 ? props.teams[0].id : null)\\n})\\n\\nlet form = useForm({\\n  name: '',\\n  description: '',\\n  user_id: props.userId,\\n  team_id: defaultTeamId.value,\\n  category: '',\\n  sub_category: '',\\n  www_url: '',\\n  instagram_name: '',\\n  telegram_url: '',\\n  twitter_handle: '',\\n  notes: '',\\n})\\n\\nlet showCategoryDescription = ref(null)\\n\\nconst checkForTeams = () => {\\n  if (props.teams.length === 0) {\\n    // Perform some actions if data array is empty\\n    console.log('No teams available.')\\n    notificationStore.active = true\\n    notificationStore.title = 'No teams available.'\\n    notificationStore.body = 'Please create a team before you create a show.'\\n    notificationStore.buttonLabel = 'OKAY'\\n    notificationStore.onClickAction = 'redirect'\\n    notificationStore.uri = '/shows/create'\\n    notificationStore.redirectPageUri = '/teams/create'\\n    // Additional logic for empty array\\n  } else {\\n    // Do nothing if data array is not empty\\n    console.log('Teams are available.')\\n  }\\n}\\n\\nonMounted(() => {\\n  checkForTeams()\\n})\\n\\nlet submit = () => {\\n  form.post('/shows')\\n}\\n\\nfunction chooseCategory(event) {\\n  showCategoryDescription = props.categories[event.target.selectedIndex].description\\n}\\n\\nfunction reset() {\\n  form.reset()\\n}\\n\\n</script>\\n\\n<style scoped>\\n.status-1 {\\n  color: green; /* Example color for status ID 1 */\\n}\\n\\n.status-2 {\\n  color: blue; /* Example color for status ID 2 */\\n}\\n\\n.status-3 {\\n  color: purple; /* Example color for status ID 3 */\\n}\\n\\n.status-4 {\\n  color: orange; /* Example color for status ID 4 */\\n}\\n\\n.status-5 {\\n  color: red; /* Example color for status ID 4 */\\n}\\n\\n.status-6 {\\n  color: darkgray; /* Example color for status ID 4 */\\n  font-style: italic;\\n}\\n\\n.status-7 {\\n  color: black; /* Example color for status ID 4 */\\n  font-style: italic;\\n}\\n\\n.status-8 {\\n  color: black; /* Example color for status ID 4 */\\n  font-style: italic;\\n}\\n\\n.status-9 {\\n  color: red; /* Example color for status ID 4 */\\n  font-style: italic;\\n}\\n\\n.status-10 {\\n  color: red; /* Example color for status ID 4 */\\n  font-style: italic;\\n}\\n\\n.status-11 {\\n  color: darkgray; /* Example color for status ID 4 */\\n}\\n</style>\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","import script from \"./CancelButton.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./CancelButton.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n  <div>\n    <button\n        @click.prevent=\"cancel\"\n        class=\"ml-2 px-4 py-2 text-white bg-orange-600 hover:bg-orange-500 rounded-lg\"\n    >Cancel\n    </button>\n  </div>\n</template>\n\n<script setup>\nimport { Inertia } from \"@inertiajs/inertia\"\nimport { useAppSettingStore } from \"@/Stores/AppSettingStore\"\nimport { useUserStore } from '@/Stores/UserStore'\n\nconst appSettingStore = useAppSettingStore()\nconst userStore = useUserStore()\n\nfunction cancel() {\n  if (appSettingStore.prevUrl) {\n    Inertia.visit(appSettingStore.prevUrl)\n  } else {\n    // Fallback if prevUrl is not available\n    let prevUrl = userStore.isCreator ? '/dashboard' : '/';\n    Inertia.visit(prevUrl);\n  }\n}\n</script>\n","import script from \"./Messages.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Messages.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n  <div class=\"mx-4 my-4\">\n    <div class=\"alert alert-info mt-4\"\n         v-if=\"props.flash.message\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" class=\"stroke-current shrink-0 w-6 h-6\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n              d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"></path>\n      </svg>\n      <span>{{ props.flash.message }}</span>\n      <button class=\"text-xs ml-12\" @click=\"clearFlashMessage\"> Close</button>\n    </div>\n    <div class=\"alert alert-success mt-4 mx-3\"\n         v-if=\"props.flash.success\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"stroke-current shrink-0 h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n              d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"/>\n      </svg>\n      <span>{{ props.flash.success }}</span>\n      <button class=\"text-xs ml-12\" @click=\"clearFlashMessage\"> Close</button>\n    </div>\n    <div class=\"alert alert-warning mt-4 mx-3\"\n         v-if=\"props.flash.warning\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"stroke-current shrink-0 h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n              d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z\"/>\n      </svg>\n      <span>{{ props.flash.warning }}</span>\n      <button class=\"text-xs ml-12\" @click=\"clearFlashMessage\"> Close</button>\n    </div>\n    <div class=\"alert alert-error mt-4 mx-3\"\n         v-if=\"props.flash.error\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"stroke-current shrink-0 h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n              d=\"M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z\"/>\n      </svg>\n      <span>{{ props.flash.error }}</span>\n      <button class=\"text-xs ml-12\" @click=\"clearFlashMessage\"> Close</button>\n    </div>\n  </div>\n\n</template>\n\n<script setup>\nimport { Inertia } from \"@inertiajs/inertia\"\nimport { computed } from \"vue\"\nimport { useAppSettingStore } from \"@/Stores/AppSettingStore\"\n\nconst appSettingStore = useAppSettingStore()\n\nappSettingStore.showFlashMessage = true\n\nlet props = defineProps({\n  flash: Object,\n\n})\n\nconst messageType = computed(() => ({\n  'text-green-700 bg-green-100 dark:bg-green-200 dark:text-green-800': props.flash.success,\n  'text-blue-700 bg-blue-100 dark:bg-blue-200 dark:text-blue-800': props.flash.message,\n  'text-orange-700 bg-orange-100 dark:bg-orange-200 dark:text-orange-800': props.flash.warning,\n  'text-red-700 bg-red-100 dark:bg-red-200 dark:text-red-800': props.flash.error,\n}))\n\nconst clearFlashMessage = async () => {\n  await Inertia.post(route('flash.clear'));\n  Inertia.reload();\n};\n</script>\n","import script from \"./ValidationErrors.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./ValidationErrors.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<script setup>\nimport { computed } from 'vue';\nimport { usePage } from '@inertiajs/inertia-vue3';\n\nconst errors = computed(() => usePage().props.value.errors);\nconst hasErrors = computed(() => Object.keys(errors.value).length > 0);\n</script>\n\n<template>\n    <div v-if=\"hasErrors\">\n        <div class=\"font-medium text-red-600\">\n            Whoops! Something went wrong.\n        </div>\n\n        <ul class=\"mt-3 list-disc list-inside text-sm text-red-600\">\n            <li v-for=\"(error, key) in errors\" :key=\"key\">\n                {{ error }}\n            </li>\n        </ul>\n    </div>\n</template>\n","import script from \"./CheckboxNotification.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./CheckboxNotification.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n  <input type=\"checkbox\" id=\"my_modal_6\" class=\"modal-toggle\" v-model=\"notificationStore.active\"/>\n  <div class=\"modal\" role=\"dialog\" v-if=\"notificationStore.active\">\n    <div class=\"modal-box\">\n      <h3 class=\"font-bold text-lg\">{{ notificationStore.title }}</h3>\n      <p class=\"py-4\">{{ notificationStore.body }}</p>\n      <div class=\"modal-action\">\n        <label for=\"my_modal_6\" class=\"btn\" @click=\"modalButtonAction\">{{ notificationStore.buttonLabel }}</label>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { ref } from 'vue'\nimport { useNotificationStore } from \"@/Stores/NotificationStore\"\n\nconst notificationStore = useNotificationStore()\n\nfunction modalButtonAction() {\n  if (notificationStore.onClickAction === 'redirect') {\n    notificationStore.redirectAndClear()\n  } else if (notificationStore.onClickAction === 'close') {\n    notificationStore.closeAndClear()\n  }\n}\n\n</script>\n","<template>\n  <Head title=\"Create Show\"/>\n\n  <div class=\"place-self-center flex flex-col gap-y-3\">\n    <div id=\"topDiv\" class=\"bg-white text-black dark:bg-gray-800 dark:text-gray-50 p-5 mb-10\">\n\n      <Message v-if=\"appSettingStore.showFlashMessage\" :flash=\"$page.props.flash\"/>\n\n      <div class=\"flex justify-between mt-3 mb-6\">\n        <div class=\"text-3xl\">Create Show</div>\n        <div>\n          <CancelButton/>\n        </div>\n      </div>\n\n      <div class=\"bg-orange-700 text-white w-full p-6\"><span class=\"font-bold\">NOTE: </span>\n        We are working on an episode poster and video uploader for this page. For the time being, please\n        go to the show <span class=\"font-bold\">EDIT</span> page after you create the show to add a video and a poster.\n      </div>\n\n      <form @submit.prevent=\"submit\" class=\"max-w-md mx-auto mt-8\">\n        <div class=\"mb-6\">\n          <label class=\"block mb-2 uppercase font-bold text-xs dark:text-gray-200\"\n                 for=\"name\"\n          >\n            Team\n          </label>\n          <select\n              class=\"border border-gray-400 p-2 w-full rounded-lg block mb-2 uppercase font-bold text-xs text-gray-800\"\n              v-model=\"form.team_id\"\n              required\n          >\n            <option\n                v-for=\"team in props.teams\"\n                :key=\"team.id\"\n                :value=\"team.id\"\n                class=\"bg-white text-black border-b dark:text-gray-50 dark:bg-gray-800 dark:border-gray-600\"\n                :class=\"'status-' + team.status.id\"\n            >\n              {{ team.name }} ({{ team.status.status }})\n            </option>\n\n          </select>\n\n\n          <div v-if=\"form.errors.team_id\" v-text=\"form.errors.team_id\" class=\"text-xs text-red-600 mt-1\"></div>\n        </div>\n        <div class=\"mb-6\">\n          <label class=\"block mb-2 uppercase font-bold text-xs dark:text-gray-200\"\n                 for=\"name\"\n          >\n            Show Name\n          </label>\n\n          <input v-model=\"form.name\"\n                 class=\"bg-gray-50 border border-gray-400 text-gray-900 text-sm p-2 w-full rounded-lg focus:ring-blue-500 focus:border-blue-500\"\n                 type=\"text\"\n                 name=\"name\"\n                 id=\"name\"\n                 required\n          >\n          <div v-if=\"form.errors.name\" v-text=\"form.errors.name\" class=\"text-xs text-red-600 mt-1\"></div>\n        </div>\n\n        <div class=\"mb-6\">\n          <label class=\"block mb-2 uppercase font-bold text-xs dark:text-gray-200\"\n                 for=\"category\"\n          >\n            Category\n          </label>\n\n\n          <select\n              class=\"border border-gray-400 text-gray-800 p-2 w-full rounded-lg block mb-2 uppercase font-bold text-xs \"\n              v-model=\"form.category\" @change=\"chooseCategory($event)\"\n          >\n            <option v-for=\"category in props.categories\"\n                    :key=\"category.id\" :value=\"category.id\">{{ category.name }}\n            </option>\n\n\n          </select>\n          <div v-if=\"form.errors.category\" v-text=\"form.errors.category\"\n               class=\"text-xs text-red-600 mt-1\"></div>\n\n          {{ showCategoryDescription }}\n        </div>\n\n        <div class=\"mb-6\">\n          <label class=\"block mb-1 uppercase font-bold text-xs dark:text-gray-200\"\n                 for=\"sub_category\"\n          >\n            Sub-category\n          </label>\n          <div class=\"mb-2 text-sm text-orange-600\">Sub-categories are coming soon!</div>\n\n\n          <select disabled\n                  class=\"border border-gray-400 text-gray-800 disabled:bg-gray-300 dark:disabled:bg-gray-600 disabled:cursor-not-allowed p-2 w-full rounded-lg block mb-2 uppercase font-bold text-xs\"\n                  v-model=\"form.sub_category\"\n          >\n            <option value=\"1\">Option</option>\n          </select>\n          <div v-if=\"form.errors.sub_category\" v-text=\"form.errors.sub_category\"\n               class=\"text-xs text-red-600 mt-1\"></div>\n        </div>\n\n        <div class=\"mb-6\">\n          <label class=\"block mb-2 uppercase font-bold text-xs dark:text-gray-200\"\n                 for=\"description\"\n          >\n            Description\n          </label>\n          <textarea v-model=\"form.description\"\n                    class=\"bg-gray-50 border border-gray-400 text-gray-900 text-sm p-2 w-full rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5\"\n                    type=\"text\"\n                    name=\"description\"\n                    id=\"description\"\n                    required\n          ></textarea>\n          <div v-if=\"form.errors.description\" v-text=\"form.errors.description\" class=\"text-xs text-red-600 mt-1\"></div>\n        </div>\n\n        <div class=\"mb-6\">\n          <label class=\"block mb-2 uppercase font-bold text-xs dark:text-gray-200\"\n                 for=\"name\"\n          >\n            Website URL\n          </label>\n\n          <input v-model=\"form.www_url\"\n                 class=\"border border-gray-400 p-2 w-full rounded-lg text-black\"\n                 type=\"text\"\n                 name=\"www_url\"\n                 id=\"www_url\"\n          >\n          <div v-if=\"form.errors.www_url\" v-text=\"form.errors.www_url\"\n               class=\"text-xs text-red-600 mt-1\"></div>\n        </div>\n\n        <div class=\"mb-6\">\n          <label class=\"block mb-2 uppercase font-bold text-xs dark:text-gray-200\"\n                 for=\"name\"\n          >\n            Instagram Handle\n          </label>\n\n          <input v-model=\"form.instagram_name\"\n                 class=\"border border-gray-400 p-2 w-full rounded-lg text-black\"\n                 type=\"text\"\n                 name=\"instagram_name handle\"\n                 id=\"instagram_name\"\n          >\n          <div v-if=\"form.errors.instagram_name\" v-text=\"form.errors.instagram_name\"\n               class=\"text-xs text-red-600 mt-1\"></div>\n        </div>\n\n        <div class=\"mb-6\">\n          <label class=\"block mb-2 uppercase font-bold text-xs dark:text-gray-200\"\n                 for=\"name\"\n          >\n            Telegram URL\n          </label>\n\n          <input v-model=\"form.telegram_url\"\n                 class=\"border border-gray-400 p-2 w-full rounded-lg text-black\"\n                 type=\"text\"\n                 name=\"telegram_url\"\n                 id=\"telegram_url\"\n          >\n          <div v-if=\"form.errors.telegram_url\" v-text=\"form.errors.telegram_url\"\n               class=\"text-xs text-red-600 mt-1\"></div>\n        </div>\n\n        <div class=\"mb-6\">\n          <label class=\"block mb-2 uppercase font-bold text-xs dark:text-gray-200\"\n                 for=\"name\"\n          >\n            Twitter @\n          </label>\n\n          <input v-model=\"form.twitter_handle\"\n                 class=\"border border-gray-400 p-2 w-full rounded-lg text-black\"\n                 type=\"text\"\n                 name=\"twitter_handle\"\n                 id=\"twitter_handle\"\n          >\n          <div v-if=\"form.errors.twitter_handle\" v-text=\"form.errors.twitter_handle\"\n               class=\"text-xs text-red-600 mt-1\"></div>\n        </div>\n\n        <div class=\"mb-6\">\n          <label class=\"block mb-2 uppercase font-bold text-xs dark:text-gray-200\"\n                 for=\"notes\"\n          >\n            Notes (Only your team members see these notes, they are not public)\n          </label>\n          <textarea v-model=\"form.notes\"\n                    class=\"bg-gray-50 border border-gray-400 text-gray-900 text-sm p-2 w-full rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5\"\n                    type=\"text\"\n                    name=\"notes\"\n                    id=\"notes\"\n          ></textarea>\n          <div v-if=\"form.errors.notes\" v-text=\"form.errors.notes\" class=\"text-xs text-red-600 mt-1\"></div>\n        </div>\n\n        <input v-model=\"form.user_id\" hidden>\n        <div class=\"flex justify-between mb-6\">\n          <JetValidationErrors class=\"mr-4\"/>\n          <button\n              type=\"submit\"\n              class=\"h-fit bg-blue-600 hover:bg-blue-500 text-white rounded py-2 px-4\"\n              :disabled=\"form.processing\"\n          >\n            Submit\n          </button>\n        </div>\n\n      </form>\n\n      <CheckboxNotification/>\n\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { computed, onMounted, ref } from 'vue'\nimport { useForm } from '@inertiajs/inertia-vue3'\nimport { usePageSetup } from '@/Utilities/PageSetup'\nimport { useAppSettingStore } from \"@/Stores/AppSettingStore\"\nimport { useNotificationStore } from '@/Stores/NotificationStore'\nimport { useTeamStore } from '@/Stores/TeamStore'\nimport JetValidationErrors from '@/Jetstream/ValidationErrors'\nimport CheckboxNotification from '@/Components/Global/Modals/CheckboxNotification'\nimport CancelButton from '@/Components/Global/Buttons/CancelButton'\nimport Message from '@/Components/Global/Modals/Messages'\n\nusePageSetup('showsCreate')\n\nconst appSettingStore = useAppSettingStore()\nconst teamStore = useTeamStore()\nconst notificationStore = useNotificationStore()\n\nlet props = defineProps({\n  teams: Object,\n  userId: Number,\n  categories: Object,\n  subCategories: Object,\n})\n\nconst defaultTeamId = computed(() => {\n  return teamStore.id || (props.teams.length > 0 ? props.teams[0].id : null)\n})\n\nlet form = useForm({\n  name: '',\n  description: '',\n  user_id: props.userId,\n  team_id: defaultTeamId.value,\n  category: '',\n  sub_category: '',\n  www_url: '',\n  instagram_name: '',\n  telegram_url: '',\n  twitter_handle: '',\n  notes: '',\n})\n\nlet showCategoryDescription = ref(null)\n\nconst checkForTeams = () => {\n  if (props.teams.length === 0) {\n    // Perform some actions if data array is empty\n    console.log('No teams available.')\n    notificationStore.active = true\n    notificationStore.title = 'No teams available.'\n    notificationStore.body = 'Please create a team before you create a show.'\n    notificationStore.buttonLabel = 'OKAY'\n    notificationStore.onClickAction = 'redirect'\n    notificationStore.uri = '/shows/create'\n    notificationStore.redirectPageUri = '/teams/create'\n    // Additional logic for empty array\n  } else {\n    // Do nothing if data array is not empty\n    console.log('Teams are available.')\n  }\n}\n\nonMounted(() => {\n  checkForTeams()\n})\n\nlet submit = () => {\n  form.post('/shows')\n}\n\nfunction chooseCategory(event) {\n  showCategoryDescription = props.categories[event.target.selectedIndex].description\n}\n\nfunction reset() {\n  form.reset()\n}\n\n</script>\n\n<style scoped>\n.status-1 {\n  color: green; /* Example color for status ID 1 */\n}\n\n.status-2 {\n  color: blue; /* Example color for status ID 2 */\n}\n\n.status-3 {\n  color: purple; /* Example color for status ID 3 */\n}\n\n.status-4 {\n  color: orange; /* Example color for status ID 4 */\n}\n\n.status-5 {\n  color: red; /* Example color for status ID 4 */\n}\n\n.status-6 {\n  color: darkgray; /* Example color for status ID 4 */\n  font-style: italic;\n}\n\n.status-7 {\n  color: black; /* Example color for status ID 4 */\n  font-style: italic;\n}\n\n.status-8 {\n  color: black; /* Example color for status ID 4 */\n  font-style: italic;\n}\n\n.status-9 {\n  color: red; /* Example color for status ID 4 */\n  font-style: italic;\n}\n\n.status-10 {\n  color: red; /* Example color for status ID 4 */\n  font-style: italic;\n}\n\n.status-11 {\n  color: darkgray; /* Example color for status ID 4 */\n}\n</style>\n","import api from \"!../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../../node_modules/css-loader/dist/cjs.js??clonedRuleSet-9.use[1]!../../../../node_modules/vue-loader/dist/stylePostLoader.js!../../../../node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-9.use[2]!../../../../node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./Create.vue?vue&type=style&index=0&id=695f6729&scoped=true&lang=css\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","import script from \"./Create.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Create.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./Create.vue?vue&type=style&index=0&id=695f6729&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-695f6729\"]])\n\nexport default __exports__"],"names":["initialState","id","name","description","slug","totalSpots","memberSpots","teamCreator","teamLeader","members","managers","activeShow","activeEpisode","creators","showModal","Boolean","confirmDialog","confirmManagerDialog","selectedManagerName","selectedManagerId","addManager","removeManager","deleteMemberName","deleteMemberId","noteEdit","note","saveNoteProcessing","goLiveDisplay","can","openComponent","useTeamStore","defineStore","state","actions","reset","Object","assign","this","setActiveTeam","team","setActiveShow","show","setActiveEpisode","episode","deleteTeamMemberCancel","confirmTeamManagerCancel","deleteTeamMember","Inertia","visit","route","method","data","user_id","team_id","team_slug","addTeamManager","removeTeamManager","toggleGoLiveDisplay","getters","spotsRemaining","usePageSetup","pageName","userStore","useUserStore","appSettingStore","useAppSettingStore","videoPlayerStore","useVideoPlayerStore","currentPage","showFlashMessage","pageIsHidden","isMobile","ott","makeVideoTopRight","onBeforeMount","pageReload","window","location","reload","onMounted","search","topDiv","document","getElementById","scrollIntoView","setPrevUrl","noLayout","___CSS_LOADER_EXPORT___","push","module","cancel","prevUrl","isCreator","props","__props","clearFlashMessage","computed","flash","success","message","warning","error","_ref","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","post","stop","apply","arguments","errors","usePage","value","hasErrors","keys","length","notificationStore","useNotificationStore","modalButtonAction","onClickAction","redirectAndClear","closeAndClear","teamStore","defaultTeamId","teams","form","useForm","userId","category","sub_category","www_url","instagram_name","telegram_url","twitter_handle","notes","showCategoryDescription","ref","console","log","active","title","body","buttonLabel","uri","redirectPageUri","submit","event","categories","target","selectedIndex","options","locals"],"sourceRoot":""}