{"version":3,"file":"js/1760.js","mappings":"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","sources":["webpack:///./resources/js/Utilities/PageSetup.js","webpack:///./resources/js/Pages/Invite.vue?faaa","webpack:///./resources/js/Components/Global/Modals/Messages.vue?dfe9","webpack:///./resources/js/Components/Global/Modals/Messages.vue","webpack:///./resources/js/Pages/Invite.vue","webpack:///./resources/js/Pages/Invite.vue?3a73","webpack:///./resources/js/Pages/Invite.vue?219b"],"sourcesContent":["import { onBeforeMount, onMounted } from 'vue'\nimport { useUserStore } from \"@/Stores/UserStore\"\nimport { useAppSettingStore } from \"@/Stores/AppSettingStore\"\nimport { useVideoPlayerStore } from \"@/Stores/VideoPlayerStore\"\nimport { router } from '@inertiajs/vue3'\n\nexport function usePageSetup(pageName) {\n    const userStore = useUserStore()\n    const appSettingStore = useAppSettingStore()\n    const videoPlayerStore = useVideoPlayerStore()\n\n    appSettingStore.currentPage = pageName\n    appSettingStore.showFlashMessage = true\n    appSettingStore.pageIsHidden = false\n\n// PageSetup utility\n    if (userStore.isMobile || window.innerWidth < 1024) {\n        appSettingStore.ott = 0; // Close all panels on mobile devices\n    } else if (appSettingStore.fullPage) {\n        appSettingStore.ott = 0; // Default to closed in fullPage mode\n    } else {\n        if (appSettingStore.ott === 0) {\n            appSettingStore.ott = 4\n        }\n        // appSettingStore.ott = 4; // Open OttChat by default on larger screens\n        appSettingStore.showOttButtons = true;\n    }\n\n    videoPlayerStore.makeVideoTopRight()\n\n    if (appSettingStore.pageReload) {\n        appSettingStore.pageReload = false\n        appSettingStore.pageWasReloaded = true\n        window.location.reload();\n    }\n    // Check if the URL contains query strings\n\n\n    // Only scroll into view if there are no query strings\n\n        // const topDiv = document.getElementById(\"topDiv\")\n        // if (topDiv) {\n        //     topDiv.scrollIntoView()\n        // }\n        router.on('navigate', (event) => {\n            // Ensure OTT panels do not open automatically on mobile devices\n            if (userStore.isMobile || window.innerWidth < 1024 || appSettingStore.fullPage) {\n                appSettingStore.ott = 0; // Close all panels on mobile devices\n            } else {\n                if (appSettingStore.ott === 0) {\n                    appSettingStore.ott = 4\n                }\n                // appSettingStore.ott = 0; // Default to closed on larger screens\n            }\n            const hasQueryStrings = window.location.search !== '';\n            if (!hasQueryStrings || appSettingStore.shouldScrollToTop) {\n                requestAnimationFrame(() => {\n                    const topDiv = document.getElementById(\"topDiv\");\n                    if (topDiv) {\n                        topDiv.scrollIntoView({behavior: 'auto'});\n                    } else {\n                        window.scrollTo(0, 0);\n                    }\n                });\n            }\n            appSettingStore.shouldScrollToTop = false;\n        })\n    // Only update if we're not already on this page to avoid overwriting with the current URL\n    appSettingStore.setPrevUrl()\n    appSettingStore.showOttButtons = true\n    appSettingStore.noLayout = false\n\n    // router.reload()\n\n}\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"@keyframes fadeSlideUp-69455ead{0%{opacity:0;transform:translateY(20px)}10%{opacity:1;transform:translateY(0)}90%{opacity:1;transform:translateY(0)}to{opacity:0;transform:translateY(-20px)}}.copied-animation[data-v-69455ead]{animation:fadeSlideUp-69455ead 3s ease-in-out forwards;background:#fff;border:1px solid #ccc;border-radius:4px;box-shadow:0 2px 4px #0003;left:0;padding:4px 8px;position:absolute;top:-30px;transform:translateX(-50%);white-space:nowrap;z-index:10}\", \"\",{\"version\":3,\"sources\":[\"webpack://./resources/js/Pages/Invite.vue\"],\"names\":[],\"mappings\":\"AAmYA,gCACE,GACE,SAAU,CACV,0BACF,CACA,IACE,SAAU,CACV,uBACF,CACA,IACE,SAAU,CACV,uBACF,CACA,GACE,SAAU,CACV,2BACF,CACF,CAEA,mCACE,sDAA8C,CAG9C,eAAkC,CAClC,qBAAsB,CAGtB,iBAAkB,CAFlB,0BAA0C,CAI1C,MAAO,CAHP,eAAgB,CALhB,iBAAkB,CAOlB,SAAU,CAEV,0BAA2B,CAC3B,kBAAmB,CATnB,UAUF\",\"sourcesContent\":[\"<template>\\n  <Head title=\\\"Invite Creators and Audience Members\\\"/>\\n\\n  <div class=\\\"place-self-center flex flex-col gap-y-3\\\">\\n    <div id=\\\"topDiv\\\" class=\\\"bg-white text-black p-5 min-h-screen\\\">\\n\\n      <Message v-if=\\\"appSettingStore.showFlashMessage\\\" :flash=\\\"$page.props.flash\\\"/>\\n\\n      <div class=\\\"flex justify-between\\\">\\n        <div class=\\\"grid grid-cols-1 grid-rows-2 pt-4\\\">\\n          <h1 class=\\\"text-3xl font-semibold\\\">Invite Creators and Audience Members</h1>\\n        </div>\\n        <div class=\\\"grid grid-cols-1 grid-rows-2\\\">\\n          <div>\\n            <button\\n                @click=\\\"appSettingStore.btnRedirect('/dashboard')\\\"\\n                class=\\\"bg-black hover:bg-gray-800 text-white font-semibold ml-2 mt-2 px-4 py-2 rounded disabled:bg-gray-400 h-max w-max\\\"\\n            >Dashboard\\n            </button>\\n          </div>\\n        </div>\\n      </div>\\n\\n      <section class=\\\"flex flex-row- flex-wrap justify-center gap-4\\\">\\n        <div class=\\\"card w-96 bg-primary/30 text-accent-content text-center\\\">\\n          <div class=\\\"card-body\\\">\\n            <h2 class=\\\"\\\">Creator Invites</h2>\\n            <p>You currently have</p>\\n            <span class=\\\"text-4xl\\\">{{ totalAvailableCreatorInvites }}</span>\\n            <p>{{ creatorInvitationsText }}</p>\\n          </div>\\n        </div>\\n        <div class=\\\"card w-96 bg-accent/20 text-accent-content text-center\\\">\\n          <div class=\\\"card-body\\\">\\n            <h2 class=\\\"\\\">Audience Invites</h2>\\n            <p>You currently have</p>\\n            <span class=\\\"text-4xl\\\">{{ totalAvailableAudiencePlusVipInvites }}</span>\\n            <p>{{ audienceInvitationsText }}</p>\\n          </div>\\n        </div>\\n      </section>\\n\\n      <section v-if=\\\"filteredInviteCodes.length === 0\\\" class=\\\"mt-8 max-w-4xl mx-auto\\\">\\n        <h2 class=\\\"text-2xl font-bold my-4\\\">No Creator Invites Available</h2>\\n        <p class=\\\"text-lg mb-2\\\">\\n          We appreciate your eagerness to grow the community! Rest assured, you'll be the first to know when new invites\\n          are ready.\\n        </p>\\n      </section>\\n\\n      <form v-if=\\\"filteredInviteCodes.length > 0 && !$page.props.flash.success && !$page.props.flash.error\\\"\\n            @submit.prevent=\\\"submit\\\" class=\\\"max-w-4xl mx-auto\\\">\\n        <h2 class=\\\"text-2xl font-bold my-4\\\">How to Invite a Fellow Creator</h2>\\n        <p class=\\\"text-lg mb-2\\\">\\n          📧 <strong>Option 1:</strong> Direct Email Invitation\\n        </p>\\n        <p>\\n          Simply fill out our handy form, and we'll whisk off an email invite to your chosen creator. It's quick, easy,\\n          and perfect for sending personalized invites directly from notTV.\\n        </p>\\n        <div class=\\\"mt-5 space-y-3\\\">\\n          <div>\\n            <!-- Conditionally render the select if more than one invite -->\\n            <select v-if=\\\"filteredInviteCodes.length > 1\\\" class=\\\"select select-bordered w-full max-w-xs bg-white dark:bg-gray-800 dark:text-white\\\"\\n                    v-model=\\\"selectedInvite\\\" required>\\n              <option disabled :value=\\\"''\\\">Select an invite</option>\\n              <option v-for=\\\"invite in filteredInviteCodes\\\" :key=\\\"invite.ulid\\\" :value=\\\"invite.ulid\\\">\\n                {{ invite.code }} <!-- Assuming each invite has a unique code or some identifier -->\\n              </option>\\n            </select>\\n\\n            <!-- If only one invite, you could display it directly or use it as the default model value -->\\n            <p v-else>{{\\n                filteredInviteCodes.length === 1 ? `Invite code: ${filteredInviteCodes[0].code}` : 'No invites available'\\n              }}</p>\\n          </div>\\n          <label class=\\\"input input-bordered flex items-center gap-2 bg-white dark:bg-gray-800 dark:text-white\\\">\\n            Name\\n            <input type=\\\"text\\\"\\n                   name=\\\"name\\\"\\n                   id=\\\"name\\\"\\n                   v-model=\\\"form.name\\\"\\n                   class=\\\"grow border-none bg-white dark:bg-gray-800 dark:text-white\\\"\\n                   placeholder=\\\"Daisy\\\"\\n                   required/>\\n          </label>\\n          <div v-if=\\\"form.errors.name\\\" v-text=\\\"form.errors.name\\\"\\n               class=\\\"text-xs text-red-600 mt-1\\\"></div>\\n          <label class=\\\"input input-bordered flex items-center gap-2 bg-white dark:bg-gray-800 dark:text-white\\\">\\n            Email\\n            <input type=\\\"email\\\"\\n                   name=\\\"email\\\"\\n                   id=\\\"email\\\"\\n                   v-model=\\\"form.email\\\"\\n                   class=\\\"grow border-none bg-white dark:bg-gray-800 dark:text-white\\\"\\n                   placeholder=\\\"daisy@site.com\\\"\\n                   required/>\\n          </label>\\n          <div v-if=\\\"form.errors.email\\\" v-text=\\\"form.errors.email\\\"\\n               class=\\\"text-xs text-red-600 mt-1\\\"></div>\\n          <label class=\\\"flex items-center gap-2 bg-white dark:bg-gray-800 dark:text-white\\\">\\n            <textarea id=\\\"message\\\"\\n                      v-model=\\\"form.message\\\"\\n                      class=\\\"textarea textarea-bordered grow bg-white dark:bg-gray-800 dark:text-white\\\"\\n                      placeholder=\\\"Message...\\\"\\n                      required></textarea>\\n          </label>\\n          <div v-if=\\\"form.errors.message\\\" v-text=\\\"form.errors.message\\\"\\n               class=\\\"text-xs text-red-600 mt-1\\\"></div>\\n\\n          <button type=\\\"submit\\\"\\n                  class=\\\"btn btn-primary\\\"\\n                  :disabled=\\\"form.processing\\\">\\n            Send\\n          </button>\\n        </div>\\n\\n        <p class=\\\"text-lg my-8\\\">- OR -</p>\\n\\n        <p class=\\\"text-lg mb-2\\\">\\n          📋 <strong>Option 2:</strong> Share an Invite Link & Code\\n        </p>\\n        <p>\\n          Prefer a more personal touch? Grab an invite link and code from below and share it through your favorite\\n          messaging platform, social media, or even a good old-fashioned carrier pigeon. The choice is yours!\\n        </p>\\n      </form>\\n\\n      <div class=\\\"mt-4 max-w-4xl mx-auto space-y-6\\\">\\n        <!-- Creator Invite Codes Table -->\\n        <section v-if=\\\"filteredInviteCodes.length > 0\\\"\\n                 class=\\\"card bg-primary-content/30 w-full px-6 py-4 shadow-xl\\\">\\n          <h2 class=\\\"card-title\\\">Creator Invites</h2>\\n          <p>Expand the notTV community by inviting more creators to share and create with us.</p>\\n          <table class=\\\"min-w-full divide-y divide-gray-200 mt-4\\\">\\n            <thead>\\n            <tr class=\\\"text-left\\\">\\n              <th>Invite Link <span class=\\\"text-xs\\\">click to copy</span></th>\\n              <th>Code <span class=\\\"text-xs\\\">click to copy</span></th>\\n              <th>Uses Remaining</th>\\n              <th>Expires On</th>\\n            </tr>\\n            </thead>\\n            <tbody>\\n            <tr v-for=\\\"code in filteredInviteCodes\\\" :key=\\\"code.id\\\">\\n              <td>\\n                <div class=\\\"relative\\\">\\n                  <button @click=\\\"copyToClipboard(`${$page.props.appUrl}/invite/${code.ulid}`, code.id, 'link')\\\">\\n                    {{ `${$page.props.appUrl}/invite/${code.ulid}` }}\\n                  </button>\\n                  <transition name=\\\"fade-slide-up\\\">\\n                    <div v-if=\\\"lastCopied.id === code.id && lastCopied.type === 'link'\\\"\\n                         class=\\\"copied-animation text-green-500 absolute\\\">\\n                      Copied to clipboard!\\n                    </div>\\n                  </transition>\\n                </div>\\n              </td>\\n              <td>\\n                <div class=\\\"relative\\\">\\n                  <button class=\\\"\\\" @click=\\\"copyToClipboard(code.code, code.id, 'code')\\\">\\n                    {{ code.code }}\\n                  </button>\\n                  <transition name=\\\"fade-slide-up\\\">\\n                    <div v-if=\\\"lastCopied.id === code.id && lastCopied.type === 'code'\\\"\\n                         class=\\\"copied-animation text-green-500 absolute\\\">\\n                      Copied to clipboard!\\n                    </div>\\n                  </transition>\\n                </div>\\n              </td>\\n              <td>{{ code.volume - code.used_count }}</td>\\n              <td>{{ userStore.formatDateInUserTimezone(code.expiry_date) || 'no expiry' }}</td>\\n            </tr>\\n            </tbody>\\n          </table>\\n        </section>\\n      </div>\\n\\n      <section v-if=\\\"inviteCodes.audienceInviteCodes.length === 0 && inviteCodes.vipInviteCodes.length === 0\\\"\\n               class=\\\"mt-8 max-w-4xl mx-auto\\\">\\n        <h2 class=\\\"text-2xl font-bold my-4\\\">No Audience Invites Currently Available</h2>\\n        <p class=\\\"text-lg mb-2\\\">\\n          Your enthusiasm for expanding our community is truly inspiring! We'll make sure you're among the first to know\\n          as soon as more audience invites become available. Together, let's continue to shape a vibrant and inclusive\\n          media ecosystem.\\n        </p>\\n      </section>\\n\\n\\n      <div v-if=\\\"inviteCodes.audienceInviteCodes.length > 0 || inviteCodes.vipInviteCodes.length > 0\\\"\\n           class=\\\"mt-20 mb-10 divider divider-accent text-accent font-semibold\\\">And if you want to grow your\\n        audience...\\n      </div>\\n\\n      <div class=\\\"mb-24 max-w-4xl mx-auto space-y-6\\\">\\n\\n        <!-- Audience Invite Codes Table -->\\n        <section v-if=\\\"inviteCodes.audienceInviteCodes.length > 0\\\"\\n                 class=\\\"card w-full px-6 py-4 bg-accent/10 shadow-xl\\\">\\n          <h2 class=\\\"card-title\\\">Audience Invites</h2>\\n          <p>To grow your audience and invite new viewers.</p>\\n          <table class=\\\"min-w-full divide-y divide-gray-200 mt-4\\\">\\n            <thead>\\n            <tr class=\\\"text-left\\\">\\n              <th>Invite Code <span class=\\\"text-xs\\\">click to copy</span></th>\\n              <th>Uses Remaining</th>\\n              <th>Expires On</th>\\n            </tr>\\n            </thead>\\n            <tbody>\\n            <tr v-for=\\\"code in inviteCodes.audienceInviteCodes\\\" :key=\\\"code.id\\\">\\n              <td>\\n                <div class=\\\"relative\\\">\\n                  <button class=\\\"\\\" @click=\\\"copyToClipboard(code.code, code.id, 'code')\\\">\\n                    {{ code.code }}\\n                  </button>\\n                  <transition name=\\\"fade-slide-up\\\">\\n                    <div v-if=\\\"lastCopied.id === code.id && lastCopied.type === 'code'\\\"\\n                         class=\\\"copied-animation text-green-500 absolute\\\">\\n                      Copied to clipboard!\\n                    </div>\\n                  </transition>\\n                </div>\\n              </td>\\n              <td>{{ code.volume - code.used_count }}</td>\\n              <td>{{ userStore.formatDateInUserTimezone(code.expiry_date) || 'no expiry' }}</td>\\n            </tr>\\n            </tbody>\\n          </table>\\n        </section>\\n        <!-- VIP Invite Codes Table -->\\n        <section v-if=\\\"inviteCodes.vipInviteCodes.length > 0\\\" class=\\\"card w-full px-6 py-4 bg-yellow-100 shadow-xl\\\">\\n          <h2 class=\\\"card-title\\\">VIP Invites</h2>\\n          <p>Grant special contributors and viewers exclusive access to new features and events.</p>\\n          <table class=\\\"min-w-full divide-y divide-gray-200 mt-4\\\">\\n            <thead>\\n            <tr class=\\\"text-left\\\">\\n              <th>Invite Code <span class=\\\"text-xs\\\">click to copy</span></th>\\n              <th>Uses Remaining</th>\\n              <th>Expires On</th>\\n            </tr>\\n            </thead>\\n            <tbody>\\n            <tr v-for=\\\"code in inviteCodes.vipInviteCodes\\\" :key=\\\"code.id\\\">\\n              <td>\\n                <div class=\\\"relative\\\">\\n                  <button class=\\\"\\\" @click=\\\"copyToClipboard(code.code, code.id, 'code')\\\">\\n                    {{ code.code }}\\n                  </button>\\n                  <transition name=\\\"fade-slide-up\\\">\\n                    <div v-if=\\\"lastCopied.id === code.id && lastCopied.type === 'code'\\\"\\n                         class=\\\"copied-animation text-green-500 absolute\\\">\\n                      Copied to clipboard!\\n                    </div>\\n                  </transition>\\n                </div>\\n              </td>\\n              <td>{{ code.volume - code.used_count }}</td>\\n              <td>{{ userStore.formatDateInUserTimezone(code.expiry_date) || 'no expiry' }}</td>\\n            </tr>\\n            </tbody>\\n          </table>\\n        </section>\\n      </div>\\n\\n\\n    </div>\\n  </div>\\n  <!--                </div>-->\\n  <!--            </div>-->\\n  <!--        </div>-->\\n</template>\\n\\n<script setup>\\nimport { usePageSetup } from '@/Utilities/PageSetup'\\nimport { useAppSettingStore } from '@/Stores/AppSettingStore'\\nimport { useUserStore } from '@/Stores/UserStore'\\nimport Message from '@/Components/Global/Modals/Messages'\\nimport { computed, onMounted, ref, watch } from 'vue'\\nimport { useClipboard } from '@vueuse/core'\\nimport { useForm } from '@inertiajs/vue3'\\n\\nusePageSetup('invite')\\n\\nconst appSettingStore = useAppSettingStore()\\nconst userStore = useUserStore()\\n\\nconst props = defineProps({\\n  inviteCodes: Object,\\n})\\n\\nlet form = useForm({\\n  name: '',\\n  email: '',\\n  message: '',\\n})\\n\\n// Computed property to filter invite codes\\nconst filteredInviteCodes = computed(() => {\\n  return props.inviteCodes.creatorInviteCodes.filter(code => !code.team_id && !code.claimed);\\n});\\n\\n// Model for the selected invite\\nconst selectedInvite = ref(filteredInviteCodes.value.length === 1 ? filteredInviteCodes.value[0].ulid : '');\\n\\n// Computed property to default to the first invite if more than one\\nconst defaultSelectedInvite = computed(() => {\\n  return filteredInviteCodes.value.length > 0 ? filteredInviteCodes.value[0].ulid : '';\\n});\\n\\n// Dynamically set source for the clipboard\\nconst sourceToCopy = ref('')\\nconst {copy, copied} = useClipboard()\\nconst lastCopied = ref({id: null, type: null})\\n\\n// Watch for changes in the inviteCodes and set the default selected invite if only one invite code is available\\nwatch(() => props.inviteCodes, (newInviteCodes) => {\\n  const newFilteredInviteCodes = newInviteCodes.creatorInviteCodes.filter(code => !code.team_id && !code.claimed);\\n  if (newFilteredInviteCodes.length === 1) {\\n    selectedInvite.value = newFilteredInviteCodes[0].ulid;\\n  } else if (newFilteredInviteCodes.length > 1) {\\n    selectedInvite.value = defaultSelectedInvite.value;\\n  } else {\\n    selectedInvite.value = '';\\n  }\\n}, { immediate: true });\\n\\n\\nlet submit = () => {\\n  console.log('form submitted, ulid: ' + selectedInvite.value)\\n  if (!selectedInvite.value) {\\n    // Handle the case when no invite is selected\\n    userStore.setGeneralServiceNotification('Invite Code Not Selected', 'You must select a valid invite code to invite a creator.')\\n    return\\n  }\\n\\n  const inviteCodeUlid = selectedInvite.value\\n\\n  form.post(`/invite/${inviteCodeUlid}/send-creator-email-invitation`, {\\n    ...form.data, // Include form data\\n  })\\n  form.name = ''\\n  form.email = ''\\n  form.message = ''\\n}\\n\\nfunction copyToClipboard(text, id, type) {\\n  sourceToCopy.value = text\\n  copy(text)\\n  lastCopied.value = {id, type}\\n\\n  setTimeout(() => {\\n    lastCopied.value = {id: null, type: null} // Reset after the animation\\n  }, 3000) // Ensure this matches your animation duration\\n}\\n\\nconst totalAvailableAudienceInvites = computed(() => {\\n  return props.inviteCodes.audienceInviteCodes.reduce((total, code) => total + (code.volume - code.used_count), 0)\\n})\\n\\nconst totalAvailableVIPInvites = computed(() => {\\n  return props.inviteCodes.vipInviteCodes.reduce((total, code) => total + (code.volume - code.used_count), 0)\\n})\\n\\nconst totalAvailableCreatorInvites = computed(() => {\\n  return props.inviteCodes.creatorInviteCodes.reduce((total, code) => total + (code.volume - code.used_count), 0)\\n})\\n\\nconst totalAvailableAudiencePlusVipInvites = computed(() => {\\n  return totalAvailableAudienceInvites.value + totalAvailableVIPInvites.value\\n})\\n\\nconst creatorInvitationsText = computed(() => {\\n  const count = totalAvailableCreatorInvites.value // Assuming this is your computed property for counting available creator invites\\n  return `creator invitation${count === 1 ? '' : 's'} available`\\n})\\n\\nconst audienceInvitationsText = computed(() => {\\n  const count = totalAvailableAudiencePlusVipInvites.value // Assuming this is your computed property for counting available creator invites\\n  return `audience invitation${count === 1 ? '' : 's'} available`\\n})\\n\\n\\n</script>\\n\\n<style scoped>\\n@keyframes fadeSlideUp {\\n  0% {\\n    opacity: 0;\\n    transform: translateY(20px);\\n  }\\n  10% {\\n    opacity: 1;\\n    transform: translateY(0);\\n  }\\n  90% {\\n    opacity: 1;\\n    transform: translateY(0);\\n  }\\n  100% {\\n    opacity: 0;\\n    transform: translateY(-20px);\\n  }\\n}\\n\\n.copied-animation {\\n  animation: fadeSlideUp 3s ease-in-out forwards;\\n  position: absolute;\\n  z-index: 10; /* Ensure it's above other content */\\n  background: rgba(255, 255, 255, 1); /* Semi-transparent white background */\\n  border: 1px solid #ccc; /* Optional: adds a subtle border */\\n  box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.2); /* Optional: adds a slight shadow for depth */\\n  padding: 4px 8px;\\n  border-radius: 4px; /* Soften the edges */\\n  top: -30px; /* Adjust this value to position it closer or further */\\n  left: 0; /* Center horizontally relative to the button */\\n  transform: translateX(-50%); /* Center it */\\n  white-space: nowrap; /* Keep the message on one line */\\n}\\n</style>\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","import script from \"./Messages.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Messages.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n  <div class=\"mx-4 my-4\">\n    <div class=\"alert alert-info mt-4\"\n         v-if=\"props.flash.message\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" class=\"stroke-current shrink-0 w-6 h-6\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n              d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"></path>\n      </svg>\n      <span>{{ props.flash.message }}</span>\n      <button class=\"text-xs ml-12\" @click=\"clearFlashMessage\"> Close</button>\n    </div>\n    <div class=\"alert alert-success mt-4 mx-3\"\n         v-if=\"props.flash.success\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"stroke-current shrink-0 h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n              d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"/>\n      </svg>\n      <span>{{ props.flash.success }}</span>\n      <button class=\"text-xs ml-12\" @click=\"clearFlashMessage\"> Close</button>\n    </div>\n    <div class=\"alert alert-warning mt-4 mx-3\"\n         v-if=\"props.flash.warning\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"stroke-current shrink-0 h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n              d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z\"/>\n      </svg>\n      <span>{{ props.flash.warning }}</span>\n      <button class=\"text-xs ml-12\" @click=\"clearFlashMessage\"> Close</button>\n    </div>\n    <div class=\"alert alert-error mt-4 mx-3\"\n         v-if=\"props.flash.error\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"stroke-current shrink-0 h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n              d=\"M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z\"/>\n      </svg>\n      <span>{{ props.flash.error }}</span>\n      <button class=\"text-xs ml-12\" @click=\"clearFlashMessage\"> Close</button>\n    </div>\n  </div>\n\n</template>\n\n<script setup>\nimport { router } from '@inertiajs/vue3'\nimport { computed } from \"vue\"\nimport { useAppSettingStore } from \"@/Stores/AppSettingStore\"\n\nconst appSettingStore = useAppSettingStore()\n\nappSettingStore.showFlashMessage = true\n\nlet props = defineProps({\n  flash: Object,\n\n})\n\nconst messageType = computed(() => ({\n  'text-green-700 bg-green-100 dark:bg-green-200 dark:text-green-800': props.flash.success,\n  'text-blue-700 bg-blue-100 dark:bg-blue-200 dark:text-blue-800': props.flash.message,\n  'text-orange-700 bg-orange-100 dark:bg-orange-200 dark:text-orange-800': props.flash.warning,\n  'text-red-700 bg-red-100 dark:bg-red-200 dark:text-red-800': props.flash.error,\n}))\n\nconst clearFlashMessage = async () => {\n  await router.post(route('flash.clear'));\n  router.reload();\n};\n</script>\n","<template>\n  <Head title=\"Invite Creators and Audience Members\"/>\n\n  <div class=\"place-self-center flex flex-col gap-y-3\">\n    <div id=\"topDiv\" class=\"bg-white text-black p-5 min-h-screen\">\n\n      <Message v-if=\"appSettingStore.showFlashMessage\" :flash=\"$page.props.flash\"/>\n\n      <div class=\"flex justify-between\">\n        <div class=\"grid grid-cols-1 grid-rows-2 pt-4\">\n          <h1 class=\"text-3xl font-semibold\">Invite Creators and Audience Members</h1>\n        </div>\n        <div class=\"grid grid-cols-1 grid-rows-2\">\n          <div>\n            <button\n                @click=\"appSettingStore.btnRedirect('/dashboard')\"\n                class=\"bg-black hover:bg-gray-800 text-white font-semibold ml-2 mt-2 px-4 py-2 rounded disabled:bg-gray-400 h-max w-max\"\n            >Dashboard\n            </button>\n          </div>\n        </div>\n      </div>\n\n      <section class=\"flex flex-row- flex-wrap justify-center gap-4\">\n        <div class=\"card w-96 bg-primary/30 text-accent-content text-center\">\n          <div class=\"card-body\">\n            <h2 class=\"\">Creator Invites</h2>\n            <p>You currently have</p>\n            <span class=\"text-4xl\">{{ totalAvailableCreatorInvites }}</span>\n            <p>{{ creatorInvitationsText }}</p>\n          </div>\n        </div>\n        <div class=\"card w-96 bg-accent/20 text-accent-content text-center\">\n          <div class=\"card-body\">\n            <h2 class=\"\">Audience Invites</h2>\n            <p>You currently have</p>\n            <span class=\"text-4xl\">{{ totalAvailableAudiencePlusVipInvites }}</span>\n            <p>{{ audienceInvitationsText }}</p>\n          </div>\n        </div>\n      </section>\n\n      <section v-if=\"filteredInviteCodes.length === 0\" class=\"mt-8 max-w-4xl mx-auto\">\n        <h2 class=\"text-2xl font-bold my-4\">No Creator Invites Available</h2>\n        <p class=\"text-lg mb-2\">\n          We appreciate your eagerness to grow the community! Rest assured, you'll be the first to know when new invites\n          are ready.\n        </p>\n      </section>\n\n      <form v-if=\"filteredInviteCodes.length > 0 && !$page.props.flash.success && !$page.props.flash.error\"\n            @submit.prevent=\"submit\" class=\"max-w-4xl mx-auto\">\n        <h2 class=\"text-2xl font-bold my-4\">How to Invite a Fellow Creator</h2>\n        <p class=\"text-lg mb-2\">\n          📧 <strong>Option 1:</strong> Direct Email Invitation\n        </p>\n        <p>\n          Simply fill out our handy form, and we'll whisk off an email invite to your chosen creator. It's quick, easy,\n          and perfect for sending personalized invites directly from notTV.\n        </p>\n        <div class=\"mt-5 space-y-3\">\n          <div>\n            <!-- Conditionally render the select if more than one invite -->\n            <select v-if=\"filteredInviteCodes.length > 1\" class=\"select select-bordered w-full max-w-xs bg-white dark:bg-gray-800 dark:text-white\"\n                    v-model=\"selectedInvite\" required>\n              <option disabled :value=\"''\">Select an invite</option>\n              <option v-for=\"invite in filteredInviteCodes\" :key=\"invite.ulid\" :value=\"invite.ulid\">\n                {{ invite.code }} <!-- Assuming each invite has a unique code or some identifier -->\n              </option>\n            </select>\n\n            <!-- If only one invite, you could display it directly or use it as the default model value -->\n            <p v-else>{{\n                filteredInviteCodes.length === 1 ? `Invite code: ${filteredInviteCodes[0].code}` : 'No invites available'\n              }}</p>\n          </div>\n          <label class=\"input input-bordered flex items-center gap-2 bg-white dark:bg-gray-800 dark:text-white\">\n            Name\n            <input type=\"text\"\n                   name=\"name\"\n                   id=\"name\"\n                   v-model=\"form.name\"\n                   class=\"grow border-none bg-white dark:bg-gray-800 dark:text-white\"\n                   placeholder=\"Daisy\"\n                   required/>\n          </label>\n          <div v-if=\"form.errors.name\" v-text=\"form.errors.name\"\n               class=\"text-xs text-red-600 mt-1\"></div>\n          <label class=\"input input-bordered flex items-center gap-2 bg-white dark:bg-gray-800 dark:text-white\">\n            Email\n            <input type=\"email\"\n                   name=\"email\"\n                   id=\"email\"\n                   v-model=\"form.email\"\n                   class=\"grow border-none bg-white dark:bg-gray-800 dark:text-white\"\n                   placeholder=\"daisy@site.com\"\n                   required/>\n          </label>\n          <div v-if=\"form.errors.email\" v-text=\"form.errors.email\"\n               class=\"text-xs text-red-600 mt-1\"></div>\n          <label class=\"flex items-center gap-2 bg-white dark:bg-gray-800 dark:text-white\">\n            <textarea id=\"message\"\n                      v-model=\"form.message\"\n                      class=\"textarea textarea-bordered grow bg-white dark:bg-gray-800 dark:text-white\"\n                      placeholder=\"Message...\"\n                      required></textarea>\n          </label>\n          <div v-if=\"form.errors.message\" v-text=\"form.errors.message\"\n               class=\"text-xs text-red-600 mt-1\"></div>\n\n          <button type=\"submit\"\n                  class=\"btn btn-primary\"\n                  :disabled=\"form.processing\">\n            Send\n          </button>\n        </div>\n\n        <p class=\"text-lg my-8\">- OR -</p>\n\n        <p class=\"text-lg mb-2\">\n          📋 <strong>Option 2:</strong> Share an Invite Link & Code\n        </p>\n        <p>\n          Prefer a more personal touch? Grab an invite link and code from below and share it through your favorite\n          messaging platform, social media, or even a good old-fashioned carrier pigeon. The choice is yours!\n        </p>\n      </form>\n\n      <div class=\"mt-4 max-w-4xl mx-auto space-y-6\">\n        <!-- Creator Invite Codes Table -->\n        <section v-if=\"filteredInviteCodes.length > 0\"\n                 class=\"card bg-primary-content/30 w-full px-6 py-4 shadow-xl\">\n          <h2 class=\"card-title\">Creator Invites</h2>\n          <p>Expand the notTV community by inviting more creators to share and create with us.</p>\n          <table class=\"min-w-full divide-y divide-gray-200 mt-4\">\n            <thead>\n            <tr class=\"text-left\">\n              <th>Invite Link <span class=\"text-xs\">click to copy</span></th>\n              <th>Code <span class=\"text-xs\">click to copy</span></th>\n              <th>Uses Remaining</th>\n              <th>Expires On</th>\n            </tr>\n            </thead>\n            <tbody>\n            <tr v-for=\"code in filteredInviteCodes\" :key=\"code.id\">\n              <td>\n                <div class=\"relative\">\n                  <button @click=\"copyToClipboard(`${$page.props.appUrl}/invite/${code.ulid}`, code.id, 'link')\">\n                    {{ `${$page.props.appUrl}/invite/${code.ulid}` }}\n                  </button>\n                  <transition name=\"fade-slide-up\">\n                    <div v-if=\"lastCopied.id === code.id && lastCopied.type === 'link'\"\n                         class=\"copied-animation text-green-500 absolute\">\n                      Copied to clipboard!\n                    </div>\n                  </transition>\n                </div>\n              </td>\n              <td>\n                <div class=\"relative\">\n                  <button class=\"\" @click=\"copyToClipboard(code.code, code.id, 'code')\">\n                    {{ code.code }}\n                  </button>\n                  <transition name=\"fade-slide-up\">\n                    <div v-if=\"lastCopied.id === code.id && lastCopied.type === 'code'\"\n                         class=\"copied-animation text-green-500 absolute\">\n                      Copied to clipboard!\n                    </div>\n                  </transition>\n                </div>\n              </td>\n              <td>{{ code.volume - code.used_count }}</td>\n              <td>{{ userStore.formatDateInUserTimezone(code.expiry_date) || 'no expiry' }}</td>\n            </tr>\n            </tbody>\n          </table>\n        </section>\n      </div>\n\n      <section v-if=\"inviteCodes.audienceInviteCodes.length === 0 && inviteCodes.vipInviteCodes.length === 0\"\n               class=\"mt-8 max-w-4xl mx-auto\">\n        <h2 class=\"text-2xl font-bold my-4\">No Audience Invites Currently Available</h2>\n        <p class=\"text-lg mb-2\">\n          Your enthusiasm for expanding our community is truly inspiring! We'll make sure you're among the first to know\n          as soon as more audience invites become available. Together, let's continue to shape a vibrant and inclusive\n          media ecosystem.\n        </p>\n      </section>\n\n\n      <div v-if=\"inviteCodes.audienceInviteCodes.length > 0 || inviteCodes.vipInviteCodes.length > 0\"\n           class=\"mt-20 mb-10 divider divider-accent text-accent font-semibold\">And if you want to grow your\n        audience...\n      </div>\n\n      <div class=\"mb-24 max-w-4xl mx-auto space-y-6\">\n\n        <!-- Audience Invite Codes Table -->\n        <section v-if=\"inviteCodes.audienceInviteCodes.length > 0\"\n                 class=\"card w-full px-6 py-4 bg-accent/10 shadow-xl\">\n          <h2 class=\"card-title\">Audience Invites</h2>\n          <p>To grow your audience and invite new viewers.</p>\n          <table class=\"min-w-full divide-y divide-gray-200 mt-4\">\n            <thead>\n            <tr class=\"text-left\">\n              <th>Invite Code <span class=\"text-xs\">click to copy</span></th>\n              <th>Uses Remaining</th>\n              <th>Expires On</th>\n            </tr>\n            </thead>\n            <tbody>\n            <tr v-for=\"code in inviteCodes.audienceInviteCodes\" :key=\"code.id\">\n              <td>\n                <div class=\"relative\">\n                  <button class=\"\" @click=\"copyToClipboard(code.code, code.id, 'code')\">\n                    {{ code.code }}\n                  </button>\n                  <transition name=\"fade-slide-up\">\n                    <div v-if=\"lastCopied.id === code.id && lastCopied.type === 'code'\"\n                         class=\"copied-animation text-green-500 absolute\">\n                      Copied to clipboard!\n                    </div>\n                  </transition>\n                </div>\n              </td>\n              <td>{{ code.volume - code.used_count }}</td>\n              <td>{{ userStore.formatDateInUserTimezone(code.expiry_date) || 'no expiry' }}</td>\n            </tr>\n            </tbody>\n          </table>\n        </section>\n        <!-- VIP Invite Codes Table -->\n        <section v-if=\"inviteCodes.vipInviteCodes.length > 0\" class=\"card w-full px-6 py-4 bg-yellow-100 shadow-xl\">\n          <h2 class=\"card-title\">VIP Invites</h2>\n          <p>Grant special contributors and viewers exclusive access to new features and events.</p>\n          <table class=\"min-w-full divide-y divide-gray-200 mt-4\">\n            <thead>\n            <tr class=\"text-left\">\n              <th>Invite Code <span class=\"text-xs\">click to copy</span></th>\n              <th>Uses Remaining</th>\n              <th>Expires On</th>\n            </tr>\n            </thead>\n            <tbody>\n            <tr v-for=\"code in inviteCodes.vipInviteCodes\" :key=\"code.id\">\n              <td>\n                <div class=\"relative\">\n                  <button class=\"\" @click=\"copyToClipboard(code.code, code.id, 'code')\">\n                    {{ code.code }}\n                  </button>\n                  <transition name=\"fade-slide-up\">\n                    <div v-if=\"lastCopied.id === code.id && lastCopied.type === 'code'\"\n                         class=\"copied-animation text-green-500 absolute\">\n                      Copied to clipboard!\n                    </div>\n                  </transition>\n                </div>\n              </td>\n              <td>{{ code.volume - code.used_count }}</td>\n              <td>{{ userStore.formatDateInUserTimezone(code.expiry_date) || 'no expiry' }}</td>\n            </tr>\n            </tbody>\n          </table>\n        </section>\n      </div>\n\n\n    </div>\n  </div>\n  <!--                </div>-->\n  <!--            </div>-->\n  <!--        </div>-->\n</template>\n\n<script setup>\nimport { usePageSetup } from '@/Utilities/PageSetup'\nimport { useAppSettingStore } from '@/Stores/AppSettingStore'\nimport { useUserStore } from '@/Stores/UserStore'\nimport Message from '@/Components/Global/Modals/Messages'\nimport { computed, onMounted, ref, watch } from 'vue'\nimport { useClipboard } from '@vueuse/core'\nimport { useForm } from '@inertiajs/vue3'\n\nusePageSetup('invite')\n\nconst appSettingStore = useAppSettingStore()\nconst userStore = useUserStore()\n\nconst props = defineProps({\n  inviteCodes: Object,\n})\n\nlet form = useForm({\n  name: '',\n  email: '',\n  message: '',\n})\n\n// Computed property to filter invite codes\nconst filteredInviteCodes = computed(() => {\n  return props.inviteCodes.creatorInviteCodes.filter(code => !code.team_id && !code.claimed);\n});\n\n// Model for the selected invite\nconst selectedInvite = ref(filteredInviteCodes.value.length === 1 ? filteredInviteCodes.value[0].ulid : '');\n\n// Computed property to default to the first invite if more than one\nconst defaultSelectedInvite = computed(() => {\n  return filteredInviteCodes.value.length > 0 ? filteredInviteCodes.value[0].ulid : '';\n});\n\n// Dynamically set source for the clipboard\nconst sourceToCopy = ref('')\nconst {copy, copied} = useClipboard()\nconst lastCopied = ref({id: null, type: null})\n\n// Watch for changes in the inviteCodes and set the default selected invite if only one invite code is available\nwatch(() => props.inviteCodes, (newInviteCodes) => {\n  const newFilteredInviteCodes = newInviteCodes.creatorInviteCodes.filter(code => !code.team_id && !code.claimed);\n  if (newFilteredInviteCodes.length === 1) {\n    selectedInvite.value = newFilteredInviteCodes[0].ulid;\n  } else if (newFilteredInviteCodes.length > 1) {\n    selectedInvite.value = defaultSelectedInvite.value;\n  } else {\n    selectedInvite.value = '';\n  }\n}, { immediate: true });\n\n\nlet submit = () => {\n  console.log('form submitted, ulid: ' + selectedInvite.value)\n  if (!selectedInvite.value) {\n    // Handle the case when no invite is selected\n    userStore.setGeneralServiceNotification('Invite Code Not Selected', 'You must select a valid invite code to invite a creator.')\n    return\n  }\n\n  const inviteCodeUlid = selectedInvite.value\n\n  form.post(`/invite/${inviteCodeUlid}/send-creator-email-invitation`, {\n    ...form.data, // Include form data\n  })\n  form.name = ''\n  form.email = ''\n  form.message = ''\n}\n\nfunction copyToClipboard(text, id, type) {\n  sourceToCopy.value = text\n  copy(text)\n  lastCopied.value = {id, type}\n\n  setTimeout(() => {\n    lastCopied.value = {id: null, type: null} // Reset after the animation\n  }, 3000) // Ensure this matches your animation duration\n}\n\nconst totalAvailableAudienceInvites = computed(() => {\n  return props.inviteCodes.audienceInviteCodes.reduce((total, code) => total + (code.volume - code.used_count), 0)\n})\n\nconst totalAvailableVIPInvites = computed(() => {\n  return props.inviteCodes.vipInviteCodes.reduce((total, code) => total + (code.volume - code.used_count), 0)\n})\n\nconst totalAvailableCreatorInvites = computed(() => {\n  return props.inviteCodes.creatorInviteCodes.reduce((total, code) => total + (code.volume - code.used_count), 0)\n})\n\nconst totalAvailableAudiencePlusVipInvites = computed(() => {\n  return totalAvailableAudienceInvites.value + totalAvailableVIPInvites.value\n})\n\nconst creatorInvitationsText = computed(() => {\n  const count = totalAvailableCreatorInvites.value // Assuming this is your computed property for counting available creator invites\n  return `creator invitation${count === 1 ? '' : 's'} available`\n})\n\nconst audienceInvitationsText = computed(() => {\n  const count = totalAvailableAudiencePlusVipInvites.value // Assuming this is your computed property for counting available creator invites\n  return `audience invitation${count === 1 ? '' : 's'} available`\n})\n\n\n</script>\n\n<style scoped>\n@keyframes fadeSlideUp {\n  0% {\n    opacity: 0;\n    transform: translateY(20px);\n  }\n  10% {\n    opacity: 1;\n    transform: translateY(0);\n  }\n  90% {\n    opacity: 1;\n    transform: translateY(0);\n  }\n  100% {\n    opacity: 0;\n    transform: translateY(-20px);\n  }\n}\n\n.copied-animation {\n  animation: fadeSlideUp 3s ease-in-out forwards;\n  position: absolute;\n  z-index: 10; /* Ensure it's above other content */\n  background: rgba(255, 255, 255, 1); /* Semi-transparent white background */\n  border: 1px solid #ccc; /* Optional: adds a subtle border */\n  box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.2); /* Optional: adds a slight shadow for depth */\n  padding: 4px 8px;\n  border-radius: 4px; /* Soften the edges */\n  top: -30px; /* Adjust this value to position it closer or further */\n  left: 0; /* Center horizontally relative to the button */\n  transform: translateX(-50%); /* Center it */\n  white-space: nowrap; /* Keep the message on one line */\n}\n</style>\n","import api from \"!../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../node_modules/css-loader/dist/cjs.js??clonedRuleSet-10.use[1]!../../../node_modules/vue-loader/dist/stylePostLoader.js!../../../node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-10.use[2]!../../../node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./Invite.vue?vue&type=style&index=0&id=69455ead&scoped=true&lang=css\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","import script from \"./Invite.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Invite.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./Invite.vue?vue&type=style&index=0&id=69455ead&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-69455ead\"]])\n\nexport default __exports__"],"names":["usePageSetup","pageName","userStore","useUserStore","appSettingStore","useAppSettingStore","videoPlayerStore","useVideoPlayerStore","currentPage","showFlashMessage","pageIsHidden","isMobile","window","innerWidth","fullPage","ott","showOttButtons","makeVideoTopRight","pageReload","pageWasReloaded","location","reload","router","on","event","search","shouldScrollToTop","requestAnimationFrame","topDiv","document","getElementById","scrollIntoView","behavior","scrollTo","setPrevUrl","noLayout","___CSS_LOADER_EXPORT___","push","module","id","props","__props","clearFlashMessage","computed","flash","success","message","warning","error","_ref","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","post","route","stop","apply","arguments","form","useForm","name","email","filteredInviteCodes","inviteCodes","creatorInviteCodes","filter","code","team_id","claimed","selectedInvite","ref","value","length","ulid","defaultSelectedInvite","sourceToCopy","_useClipboard","useClipboard","copy","lastCopied","copied","type","watch","newInviteCodes","newFilteredInviteCodes","immediate","submit","console","log","inviteCodeUlid","concat","_objectSpread","data","setGeneralServiceNotification","copyToClipboard","text","setTimeout","totalAvailableAudienceInvites","audienceInviteCodes","reduce","total","volume","used_count","totalAvailableVIPInvites","vipInviteCodes","totalAvailableCreatorInvites","totalAvailableAudiencePlusVipInvites","creatorInvitationsText","count","audienceInvitationsText","options","locals"],"sourceRoot":""}