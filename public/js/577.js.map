{"version":3,"file":"js/577.js","mappings":"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","sources":["webpack:///./resources/js/Pages/Stream.vue?d9e7","webpack:///./resources/js/Pages/Stream.vue"],"sourcesContent":["import script from \"./Stream.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Stream.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n    <Head title=\"Stream\" />\n\n\n</template>\n\n\n<script setup>\nimport { inject, onBeforeMount, onBeforeUnmount, onMounted, onUnmounted, ref } from \"vue\"\nimport { useVideoPlayerStore } from \"@/Stores/VideoPlayerStore\"\nimport { useUserStore } from \"@/Stores/UserStore\"\nimport { useStreamStore } from \"@/Stores/StreamStore\"\nimport { useChatStore } from \"@/Stores/ChatStore\"\nimport { useChannelStore } from \"@/Stores/ChannelStore\"\nimport { Inertia } from \"@inertiajs/inertia\";\nimport { usePage } from \"@inertiajs/inertia-vue3\"\nimport videojs from \"video.js\";\n\nlet videoPlayerStore = useVideoPlayerStore()\nlet userStore = useUserStore()\nlet streamStore = useStreamStore()\nlet chatStore = useChatStore()\nlet channelStore = useChannelStore()\n\nconst getUserData = inject('getUserData', null)\nlet urlPrev = usePage().props.value.urlPrev\n\nonBeforeMount(() => {\n    // getUserTimezone()\n    videoPlayerStore.currentPageIsStream = true;\n    videoPlayerStore.currentView = 'stream'\n    userStore.currentPage = 'stream'\n})\n\nconst channel = [\n    {\n        id: 2,\n        name: 'Stream',\n        stream: 'thirdeyespies',\n        channel_source: null,\n        isLive: null\n    }\n]\n\nonMounted(async () => {\n    // console.log(window.location.href)\n    //\n    // console.log(window.history)\n    // userStore.prevUrl = window.history.length > 1 && window.history.state\n    //     ? window.history.state.url : null;\n\n    // async function changeChannel() {\n    //     await channelStore.getChannels()\n    //     await channelStore.disconnectViewerFromChannel()\n    //     await channelStore.changeChannel(channelStore.channel_list[1])\n    //     Inertia.reload()\n    // }\n    //\n    // await changeChannel()\n\n    if (!getUserData) {\n        updateUserStore()\n    }\n\n    videoPlayerStore.makeVideoFullPage()\n    videoPlayerStore.showOsdAndControlsAndNav()\n    videoPlayerStore.loggedIn = true\n    videoPlayerStore.ott = 0\n    videoPlayerStore.osd = true\n    videoPlayerStore.ottButtons = true\n    videoPlayerStore.ottChannels = false\n    videoPlayerStore.ottChat = false\n    videoPlayerStore.ottPlaylist = false\n    videoPlayerStore.ottFilters = false\n    videoPlayerStore.fullPage = true\n\n    // for testing purposes, channel 2 on my local machine is my test channel\n    // need to add to the if statement, on firstPlay when the user loads the app\n    // channel is undefined.... so don't run this function if the viewer loads the\n    // app on the stream page or refreshes the page on the stream page.\n\n\n    if (videoPlayerStore.videoPlayerLoaded) {\n        if (channelStore.currentChannelId !== 2 && urlPrev !== 'empty' && urlPrev !== 'stream') {\n            await (async () => {\n                // await channelStore.getChannels();\n                await channelStore.disconnectViewerFromChannel();\n                await channelStore.changeChannel(channel[0]);\n                // Inertia.reload();\n            })();\n        }\n    }\n})\n\nonBeforeUnmount(() => {\n    videoPlayerStore.controls = false\n    videoPlayerStore.makeVideoTopRight()\n    videoPlayerStore.currentPageIsStream = false\n    videoPlayerStore.fullPage = false\n})\n\nonUnmounted(() => {\n    // videoPlayerStore.ott = 0\n    // videoPlayerStore.osd = true\n    // videoPlayerStore.ottButtons = true\n    // videoPlayerStore.ottChannels = false\n    // videoPlayerStore.ottChat = false\n    // videoPlayerStore.ottPlaylist = false\n    // videoPlayerStore.ottFilters = false\n})\n\nlet props = defineProps({\n    getUserData: Boolean,\n    video: Object,\n    user: Object,\n})\n\nfunction updateUserStore() {\n    axios.post('/getUserStoreData')\n        .then(response => {\n            userStore.id = response.data.id\n            userStore.isAdmin = response.data.isAdmin\n            userStore.isCreator = response.data.isCreator\n            userStore.isNewsPerson = response.data.isNewsPerson\n            userStore.isVip = response.data.isVip\n            userStore.isSubscriber = response.data.isSubscriber\n            userStore.hasAccount = response.data.hasAccount\n            userStore.getUserDataCompleted = true\n            userStore.timezone = userTimezone\n            console.log('get user data on Stream')\n            if (userStore.isCreator) {\n                userStore.prevUrl = '/dashboard'\n            } else {\n                userStore.prevUrl = '/stream'\n            }\n        })\n        .catch(error => {\n            console.log(error);\n        })\n    // save user Timezone\n    updateUserTimezone()\n}\n\nconst userTimezone = ref('');\n\nconst getUserTimezone = () => {\n    // Use the Intl object to get the user's timezone\n    userTimezone.value = Intl.DateTimeFormat().resolvedOptions().timeZone;\n};\n\nconst updateUserTimezone = async () => {\n    try {\n        const response = await axios.post('/users/update-timezone', {timezone: userTimezone.value});\n\n        // Handle success response as needed\n        console.log(response.data.message);\n    } catch (error) {\n        // Handle error response or network error\n        console.error(error);\n\n        if (error.response) {\n            // Handle specific error responses if needed\n            console.error(error.response.data);\n        }\n    }\n}\n</script>\n\n"],"names":["videoPlayerStore","useVideoPlayerStore","userStore","useUserStore","channelStore","useStreamStore","useChatStore","useChannelStore","getUserData","inject","urlPrev","usePage","props","value","onBeforeMount","currentPageIsStream","currentView","currentPage","channel","id","name","stream","channel_source","isLive","onMounted","_asyncToGenerator","_regeneratorRuntime","mark","_callee2","wrap","_context2","prev","next","updateUserStore","makeVideoFullPage","showOsdAndControlsAndNav","loggedIn","ott","osd","ottButtons","ottChannels","ottChat","ottPlaylist","ottFilters","fullPage","videoPlayerLoaded","currentChannelId","_callee","_context","disconnectViewerFromChannel","changeChannel","stop","onBeforeUnmount","controls","makeVideoTopRight","onUnmounted","axios","post","then","response","data","isAdmin","isCreator","isNewsPerson","isVip","isSubscriber","hasAccount","getUserDataCompleted","timezone","userTimezone","console","log","prevUrl","error","updateUserTimezone","ref","_ref3","_callee3","_context3","sent","message","t0","apply","arguments"],"sourceRoot":""}