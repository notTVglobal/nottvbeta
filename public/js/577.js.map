{"version":3,"file":"js/577.js","mappings":";uJAMO,SAASA,EAAaC,GACzB,IAAMC,GAAYC,EAAAA,EAAAA,gBACZC,GAAkBC,EAAAA,EAAAA,sBAClBC,GAAmBC,EAAAA,EAAAA,uBAEzBH,EAAgBI,YAAcP,EAC9BG,EAAgBK,kBAAmB,EACnCL,EAAgBM,cAAe,EAE3BR,EAAUS,WACVP,EAAgBQ,IAAM,GAG1BN,EAAiBO,qBAEjBC,EAAAA,EAAAA,YAAU,WAKN,KAHmD,KAA3BC,OAAOC,SAASC,QAGlB,CAClB,IAAMC,EAASC,SAASC,eAAe,UACnCF,GACAA,EAAOG,gBAEf,CAEAjB,EAAgBkB,aAChBC,EAAAA,QAAQC,QAEZ,GACJ,o/NChCA,2FCMAxB,EAAAA,EAAAA,GAAa,UAEb,IAAMI,GAAkBC,EAAAA,EAAAA,sBAClBH,GAAYC,EAAAA,EAAAA,gBACZG,GAAmBC,EAAAA,EAAAA,uBAEnBkB,GAAcC,EAAAA,EAAAA,QAAO,cAAe,MAE1CtB,EAAgBuB,KAAM,EACtBrB,EAAiBsB,qBAEjBd,EAAAA,EAAAA,WAASe,EAAAC,IAAAC,MAAC,SAAAC,IAAA,OAAAF,IAAAG,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACHX,GACHY,IACD,wBAAAH,EAAAI,OAAA,GAAAN,EAAA,MASH,SAASK,IACPE,MAAMC,KAAK,qBACNC,MAAK,SAAAC,GACJxC,EAAUyC,GAAKD,EAASE,KAAKD,GAC7BzC,EAAU2C,UAAW,EACrB3C,EAAU4C,QAAUJ,EAASE,KAAKE,QAClC5C,EAAU6C,UAAYL,EAASE,KAAKG,UACpC7C,EAAU8C,aAAeN,EAASE,KAAKI,aACvC9C,EAAU+C,MAAQP,EAASE,KAAKK,MAChC/C,EAAUgD,aAAeR,EAASE,KAAKM,aACvChD,EAAUiD,WAAaT,EAASE,KAAKO,WACrCjD,EAAUkD,sBAAuB,EACjClD,EAAUmD,SAAWC,EACrBC,QAAQC,IAAI,2BACRtD,EAAU6C,UACZ7C,EAAUuD,QAAU,aAEpBvD,EAAUuD,QAAU,SAExB,IAAE,OACK,SAAAC,GACLH,QAAQC,IAAIE,EACd,IAEJC,GACF,CAEA,IAAML,GAAeM,EAAAA,EAAAA,KAAI,IAOnBD,EAAkB,eAAAE,EAAAhC,EAAAC,IAAAC,MAAG,SAAA+B,IAAA,IAAApB,EAAA,OAAAZ,IAAAG,MAAA,SAAA8B,GAAA,cAAAA,EAAA5B,KAAA4B,EAAA3B,MAAA,cAAA2B,EAAA5B,KAAA,EAAA4B,EAAA3B,KAAA,EAEAG,MAAMC,KAAK,yBAA0B,CAACa,SAAUC,EAAaU,QAAO,OAArFtB,EAAQqB,EAAAE,KAGdV,QAAQC,IAAId,EAASE,KAAKsB,SAAQH,EAAA3B,KAAA,gBAAA2B,EAAA5B,KAAA,EAAA4B,EAAAI,GAAAJ,EAAA,SAGlCR,QAAQG,MAAKK,EAAAI,IAETJ,EAAAI,GAAMzB,UAERa,QAAQG,MAAMK,EAAAI,GAAMzB,SAASE,MAC9B,yBAAAmB,EAAAzB,OAAA,GAAAwB,EAAA,kBAEJ,kBAfuB,OAAAD,EAAAO,MAAA,KAAAC,UAAA","sources":["webpack:///./resources/js/Utilities/PageSetup.js","webpack:///./resources/js/Pages/Stream.vue?d9e7","webpack:///./resources/js/Pages/Stream.vue"],"sourcesContent":["import { onMounted } from 'vue'\nimport { useUserStore } from \"@/Stores/UserStore\"\nimport { useAppSettingStore } from \"@/Stores/AppSettingStore\"\nimport { useVideoPlayerStore } from \"@/Stores/VideoPlayerStore\"\nimport { Inertia } from \"@inertiajs/inertia\"\n\nexport function usePageSetup(pageName) {\n    const userStore = useUserStore()\n    const appSettingStore = useAppSettingStore()\n    const videoPlayerStore = useVideoPlayerStore()\n\n    appSettingStore.currentPage = pageName\n    appSettingStore.showFlashMessage = true\n    appSettingStore.pageIsHidden = false\n\n    if (userStore.isMobile) {\n        appSettingStore.ott = 0\n    }\n\n    videoPlayerStore.makeVideoTopRight()\n\n    onMounted(() => {\n        // Check if the URL contains query strings\n        const hasQueryStrings = window.location.search !== '';\n\n        // Only scroll into view if there are no query strings\n        if (!hasQueryStrings) {\n            const topDiv = document.getElementById(\"topDiv\")\n            if (topDiv) {\n                topDiv.scrollIntoView()\n            }\n        }\n        // Only update if we're not already on this page to avoid overwriting with the current URL\n        appSettingStore.setPrevUrl()\n        Inertia.reload()\n\n    });\n}\n","import script from \"./Stream.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Stream.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n  <Head title=\"Stream\"/>\n</template>\n\n<script setup>\nimport { inject, onMounted, ref } from 'vue'\nimport { usePageSetup } from '@/Utilities/PageSetup'\nimport { useAppSettingStore } from '@/Stores/AppSettingStore'\nimport { useUserStore } from '@/Stores/UserStore'\nimport { useVideoPlayerStore } from '@/Stores/VideoPlayerStore'\n\nusePageSetup('stream')\n\nconst appSettingStore = useAppSettingStore()\nconst userStore = useUserStore()\nconst videoPlayerStore = useVideoPlayerStore()\n\nconst getUserData = inject('getUserData', null)\n\nappSettingStore.osd = true\nvideoPlayerStore.makeVideoFullPage()\n\nonMounted(async () => {\n  if (!getUserData) {\n    updateUserStore()\n  }\n})\n\nlet props = defineProps({\n  getUserData: Boolean,\n  video: Object,\n  user: Object,\n})\n\nfunction updateUserStore() {\n  axios.post('/getUserStoreData')\n      .then(response => {\n        userStore.id = response.data.id\n        userStore.loggedIn = true\n        userStore.isAdmin = response.data.isAdmin\n        userStore.isCreator = response.data.isCreator\n        userStore.isNewsPerson = response.data.isNewsPerson\n        userStore.isVip = response.data.isVip\n        userStore.isSubscriber = response.data.isSubscriber\n        userStore.hasAccount = response.data.hasAccount\n        userStore.getUserDataCompleted = true\n        userStore.timezone = userTimezone\n        console.log('get user data on Stream')\n        if (userStore.isCreator) {\n          userStore.prevUrl = '/dashboard'\n        } else {\n          userStore.prevUrl = '/stream'\n        }\n      })\n      .catch(error => {\n        console.log(error)\n      })\n  // save user Timezone\n  updateUserTimezone()\n}\n\nconst userTimezone = ref('')\n\nconst getUserTimezone = () => {\n  // Use the Intl object to get the user's timezone\n  userTimezone.value = Intl.DateTimeFormat().resolvedOptions().timeZone\n}\n\nconst updateUserTimezone = async () => {\n  try {\n    const response = await axios.post('/users/update-timezone', {timezone: userTimezone.value})\n\n    // Handle success response as needed\n    console.log(response.data.message)\n  } catch (error) {\n    // Handle error response or network error\n    console.error(error)\n\n    if (error.response) {\n      // Handle specific error responses if needed\n      console.error(error.response.data)\n    }\n  }\n}\n</script>\n\n"],"names":["usePageSetup","pageName","userStore","useUserStore","appSettingStore","useAppSettingStore","videoPlayerStore","useVideoPlayerStore","currentPage","showFlashMessage","pageIsHidden","isMobile","ott","makeVideoTopRight","onMounted","window","location","search","topDiv","document","getElementById","scrollIntoView","setPrevUrl","Inertia","reload","getUserData","inject","osd","makeVideoFullPage","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","updateUserStore","stop","axios","post","then","response","id","data","loggedIn","isAdmin","isCreator","isNewsPerson","isVip","isSubscriber","hasAccount","getUserDataCompleted","timezone","userTimezone","console","log","prevUrl","error","updateUserTimezone","ref","_ref2","_callee2","_context2","value","sent","message","t0","apply","arguments"],"sourceRoot":""}