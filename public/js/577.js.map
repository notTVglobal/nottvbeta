{"version":3,"file":"js/577.js","mappings":"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","sources":["webpack:///./resources/js/Pages/Stream.vue?d9e7","webpack:///./resources/js/Pages/Stream.vue"],"sourcesContent":["import script from \"./Stream.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Stream.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n    <Head title=\"Stream\" />\n\n\n</template>\n\n\n<script setup>\nimport { inject, onBeforeMount, onBeforeUnmount, onMounted, onUnmounted, ref } from \"vue\"\nimport { useVideoPlayerStore } from \"@/Stores/VideoPlayerStore\"\nimport { useUserStore } from \"@/Stores/UserStore\"\nimport { useStreamStore } from \"@/Stores/StreamStore\"\nimport { useChatStore } from \"@/Stores/ChatStore\"\nimport { useChannelStore } from \"@/Stores/ChannelStore\"\nimport { Inertia } from \"@inertiajs/inertia\";\nimport { usePage } from \"@inertiajs/inertia-vue3\"\nimport videojs from \"video.js\";\n\nlet videoPlayerStore = useVideoPlayerStore()\nlet userStore = useUserStore()\nlet streamStore = useStreamStore()\nlet chatStore = useChatStore()\nlet channelStore = useChannelStore()\n\nconst getUserData = inject('getUserData', null)\nlet urlPrev = usePage().props.value.urlPrev\n\nonBeforeMount(() => {\n    // getUserTimezone()\n    videoPlayerStore.currentPageIsStream = true;\n    videoPlayerStore.currentView = 'stream'\n    userStore.currentPage = 'stream'\n})\n\nconst channel = [\n    {\n        id: 2,\n        name: 'Stream',\n        stream: 'thirdeyespies',\n        channel_source: null,\n        isLive: null\n    }\n]\n\nonMounted(async () => {\n    // console.log(window.location.href)\n    //\n    // console.log(window.history)\n    // userStore.prevUrl = window.history.length > 1 && window.history.state\n    //     ? window.history.state.url : null;\n\n    // async function changeChannel() {\n    //     await channelStore.getChannels()\n    //     await channelStore.disconnectViewerFromChannel()\n    //     await channelStore.changeChannel(channelStore.channel_list[1])\n    //     Inertia.reload()\n    // }\n    //\n    // await changeChannel()\n\n    if (!getUserData) {\n        updateUserStore()\n    }\n\n    videoPlayerStore.makeVideoFullPage()\n    videoPlayerStore.showOsdAndControlsAndNav()\n    videoPlayerStore.loggedIn = true\n    videoPlayerStore.ott = 0\n    videoPlayerStore.osd = true\n    videoPlayerStore.ottButtons = true\n    videoPlayerStore.ottChannels = false\n    videoPlayerStore.ottChat = false\n    videoPlayerStore.ottPlaylist = false\n    videoPlayerStore.ottFilters = false\n    videoPlayerStore.fullPage = true\n\n    // for testing purposes, channel 2 on my local machine is my test channel\n    // need to add to the if statement, on firstPlay when the user loads the app\n    // channel is undefined.... so don't run this function if the viewer loads the\n    // app on the stream page or refreshes the page on the stream page.\n\n\n    if (videoPlayerStore.videoPlayerLoaded) {\n        if (channelStore.currentChannelId !== 2 && urlPrev !== 'empty' && urlPrev !== 'stream') {\n            await (async () => {\n                // await channelStore.getChannels();\n                await channelStore.disconnectViewerFromChannel();\n                await channelStore.changeChannel(channel[0]);\n                // Inertia.reload();\n            })();\n        }\n    }\n})\n\nonBeforeUnmount(() => {\n    videoPlayerStore.controls = false\n    videoPlayerStore.makeVideoTopRight()\n    videoPlayerStore.currentPageIsStream = false\n    videoPlayerStore.fullPage = false\n})\n\nonUnmounted(() => {\n    // videoPlayerStore.ott = 0\n    // videoPlayerStore.osd = true\n    // videoPlayerStore.ottButtons = true\n    // videoPlayerStore.ottChannels = false\n    // videoPlayerStore.ottChat = false\n    // videoPlayerStore.ottPlaylist = false\n    // videoPlayerStore.ottFilters = false\n})\n\nlet props = defineProps({\n    getUserData: Boolean,\n    video: Object,\n    user: Object,\n})\n\nfunction updateUserStore() {\n    axios.post('/getUserStoreData')\n        .then(response => {\n            userStore.id = response.data.id\n            userStore.isAdmin = response.data.isAdmin\n            userStore.isCreator = response.data.isCreator\n            userStore.isNewsPerson = response.data.isNewsPerson\n            userStore.isVip = response.data.isVip\n            userStore.isSubscriber = response.data.isSubscriber\n            userStore.hasAccount = response.data.hasAccount\n            userStore.getUserDataCompleted = true\n            userStore.timezone = userTimezone\n            console.log('get user data on Stream')\n        })\n        .catch(error => {\n            console.log(error);\n        })\n    // save user Timezone\n    updateUserTimezone()\n}\n\nconst userTimezone = ref('');\n\nconst getUserTimezone = () => {\n    // Use the Intl object to get the user's timezone\n    userTimezone.value = Intl.DateTimeFormat().resolvedOptions().timeZone;\n};\n\nconst updateUserTimezone = async () => {\n    try {\n        const response = await axios.post('/users/update-timezone', {timezone: userTimezone.value});\n\n        // Handle success response as needed\n        console.log(response.data.message);\n    } catch (error) {\n        // Handle error response or network error\n        console.error(error);\n\n        if (error.response) {\n            // Handle specific error responses if needed\n            console.error(error.response.data);\n        }\n    }\n}\n</script>\n\n"],"names":["videoPlayerStore","useVideoPlayerStore","userStore","useUserStore","channelStore","useStreamStore","useChatStore","useChannelStore","getUserData","inject","urlPrev","usePage","props","value","onBeforeMount","currentPageIsStream","currentView","currentPage","channel","id","name","stream","channel_source","isLive","updateUserStore","axios","post","then","response","data","isAdmin","isCreator","isNewsPerson","isVip","isSubscriber","hasAccount","getUserDataCompleted","timezone","userTimezone","console","log","error","updateUserTimezone","onMounted","_asyncToGenerator","_regeneratorRuntime","mark","_callee2","wrap","_context2","prev","next","makeVideoFullPage","showOsdAndControlsAndNav","loggedIn","ott","osd","ottButtons","ottChannels","ottChat","ottPlaylist","ottFilters","fullPage","videoPlayerLoaded","currentChannelId","_callee","_context","disconnectViewerFromChannel","changeChannel","stop","onBeforeUnmount","controls","makeVideoTopRight","onUnmounted","ref","_ref3","_callee3","_context3","sent","message","t0","apply","arguments"],"sourceRoot":""}