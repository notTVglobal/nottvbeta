{"version":3,"file":"js/577.js","mappings":";2lOAKA,0FCaA,IAAIA,GAAmBC,EAAAA,EAAAA,KACnBC,GAAYC,EAAAA,EAAAA,KAKVC,IAJYC,EAAAA,EAAAA,MACFC,EAAAA,EAAAA,MACGC,EAAAA,EAAAA,MAECC,EAAAA,EAAAA,QAAO,cAAe,QAC5BC,EAAAA,EAAAA,MAAUC,MAAMC,MAAMC,SAEpCC,EAAAA,EAAAA,gBAAc,WAEVb,EAAiBc,qBAAsB,EACvCd,EAAiBe,YAAc,SAC/Bb,EAAUc,YAAc,QAC5B,KAYAC,EAAAA,EAAAA,WAASC,EAAAC,IAAAC,MAAC,SAAAC,IAAA,OAAAF,IAAAG,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAgBDrB,GACDsB,IAGJ1B,EAAiB2B,oBACbzB,EAAU0B,SACV5B,EAAiB6B,UAEjB7B,EAAiB8B,2BAGrB9B,EAAiB+B,UAAW,EAC5B/B,EAAiBgC,IAAM,EACvBhC,EAAiBiC,KAAM,EACvBjC,EAAiBkC,YAAa,EAC9BlC,EAAiBmC,aAAc,EAC/BnC,EAAiBoC,SAAU,EAC3BpC,EAAiBqC,aAAc,EAC/BrC,EAAiBsC,YAAa,EAC9BtC,EAAiBuC,UAAW,EAiB5B,yBAAAhB,EAAAiB,OAAA,GAAAnB,EAAA,OAGJoB,EAAAA,EAAAA,kBAAgB,WACZzC,EAAiB0C,UAAW,EAC5B1C,EAAiB2C,oBACjB3C,EAAiBc,qBAAsB,EACvCd,EAAiBuC,UAAW,CAChC,KAEAK,EAAAA,EAAAA,cAAY,WAOR,IASJ,SAASlB,IACLmB,MAAMC,KAAK,qBACNC,MAAK,SAAAC,GACF9C,EAAU+C,GAAKD,EAASE,KAAKD,GAC7B/C,EAAUiD,QAAUH,EAASE,KAAKC,QAClCjD,EAAUkD,UAAYJ,EAASE,KAAKE,UACpClD,EAAUmD,aAAeL,EAASE,KAAKG,aACvCnD,EAAUoD,MAAQN,EAASE,KAAKI,MAChCpD,EAAUqD,aAAeP,EAASE,KAAKK,aACvCrD,EAAUsD,WAAaR,EAASE,KAAKM,WACrCtD,EAAUuD,sBAAuB,EACjCvD,EAAUwD,SAAWC,EACrBC,QAAQC,IAAI,2BACR3D,EAAUkD,UACVlD,EAAU4D,QAAU,aAEpB5D,EAAU4D,QAAU,SAE5B,IAAE,OACK,SAAAC,GACHH,QAAQC,IAAIE,EAChB,IAEJC,GACJ,CAEA,IAAML,GAAeM,EAAAA,EAAAA,KAAI,IAOnBD,EAAkB,eAAAE,EAAAhD,EAAAC,IAAAC,MAAG,SAAA+C,IAAA,IAAAnB,EAAA,OAAA7B,IAAAG,MAAA,SAAA8C,GAAA,cAAAA,EAAA5C,KAAA4C,EAAA3C,MAAA,cAAA2C,EAAA5C,KAAA,EAAA4C,EAAA3C,KAAA,EAEIoB,MAAMC,KAAK,yBAA0B,CAACY,SAAUC,EAAahD,QAAO,OAArFqC,EAAQoB,EAAAC,KAGdT,QAAQC,IAAIb,EAASE,KAAKoB,SAASF,EAAA3C,KAAA,gBAAA2C,EAAA5C,KAAA,EAAA4C,EAAAG,GAAAH,EAAA,SAGnCR,QAAQG,MAAKK,EAAAG,IAETH,EAAAG,GAAMvB,UAENY,QAAQG,MAAMK,EAAAG,GAAMvB,SAASE,MAChC,yBAAAkB,EAAA5B,OAAA,GAAA2B,EAAA,kBAER,kBAfuB,OAAAD,EAAAM,MAAA,KAAAC,UAAA","sources":["webpack:///./resources/js/Pages/Stream.vue?d9e7","webpack:///./resources/js/Pages/Stream.vue"],"sourcesContent":["import script from \"./Stream.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Stream.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n    <Head title=\"Stream\" />\n\n\n</template>\n\n\n<script setup>\nimport { inject, onBeforeMount, onBeforeUnmount, onMounted, onUnmounted, ref } from \"vue\"\nimport { useVideoPlayerStore } from \"@/Stores/VideoPlayerStore\"\nimport { useUserStore } from \"@/Stores/UserStore\"\nimport { useStreamStore } from \"@/Stores/StreamStore\"\nimport { useChatStore } from \"@/Stores/ChatStore\"\nimport { useChannelStore } from \"@/Stores/ChannelStore\"\nimport { Inertia } from \"@inertiajs/inertia\";\nimport { usePage } from \"@inertiajs/inertia-vue3\"\nimport videojs from \"video.js\";\n\nlet videoPlayerStore = useVideoPlayerStore()\nlet userStore = useUserStore()\nlet streamStore = useStreamStore()\nlet chatStore = useChatStore()\nlet channelStore = useChannelStore()\n\nconst getUserData = inject('getUserData', null)\nlet urlPrev = usePage().props.value.urlPrev\n\nonBeforeMount(() => {\n    // getUserTimezone()\n    videoPlayerStore.currentPageIsStream = true;\n    videoPlayerStore.currentView = 'stream'\n    userStore.currentPage = 'stream'\n})\n\n// const channel = [\n//     {\n//         id: 2,\n//         name: 'Stream',\n//         stream: 'thirdeyespies',\n//         channel_source: null,\n//         isLive: null\n//     }\n// ]\n\nonMounted(async () => {\n    // console.log(window.location.href)\n    //\n    // console.log(window.history)\n    // userStore.prevUrl = window.history.length > 1 && window.history.state\n    //     ? window.history.state.url : null;\n\n    // async function changeChannel() {\n    //     await channelStore.getChannels()\n    //     await channelStore.disconnectViewerFromChannel()\n    //     await channelStore.changeChannel(channelStore.channel_list[1])\n    //     Inertia.reload()\n    // }\n    //\n    // await changeChannel()\n\n    if (!getUserData) {\n        updateUserStore()\n    }\n\n    videoPlayerStore.makeVideoFullPage()\n    if (userStore.isMobile) {\n        videoPlayerStore.showOsd()\n    } else {\n        videoPlayerStore.showOsdAndControlsAndNav()\n    }\n\n    videoPlayerStore.loggedIn = true\n    videoPlayerStore.ott = 0\n    videoPlayerStore.osd = true\n    videoPlayerStore.ottButtons = true\n    videoPlayerStore.ottChannels = false\n    videoPlayerStore.ottChat = false\n    videoPlayerStore.ottPlaylist = false\n    videoPlayerStore.ottFilters = false\n    videoPlayerStore.fullPage = true\n\n    // for testing purposes, channel 2 on my local machine is my test channel\n    // need to add to the if statement, on firstPlay when the user loads the app\n    // channel is undefined.... so don't run this function if the viewer loads the\n    // app on the stream page or refreshes the page on the stream page.\n\n\n    // if (videoPlayerStore.videoPlayerLoaded) {\n    //     if (channelStore.currentChannelId !== 2 && urlPrev !== 'empty' && urlPrev !== 'stream') {\n    //         await (async () => {\n    //             // await channelStore.getChannels();\n    //             await channelStore.disconnectViewerFromChannel();\n    //             await channelStore.changeChannel(channel[0]);\n    //             // Inertia.reload();\n    //         })();\n    //     }\n    // }\n})\n\nonBeforeUnmount(() => {\n    videoPlayerStore.controls = false\n    videoPlayerStore.makeVideoTopRight()\n    videoPlayerStore.currentPageIsStream = false\n    videoPlayerStore.fullPage = false\n})\n\nonUnmounted(() => {\n    // videoPlayerStore.ott = 0\n    // videoPlayerStore.osd = true\n    // videoPlayerStore.ottButtons = true\n    // videoPlayerStore.ottChannels = false\n    // videoPlayerStore.ottChat = false\n    // videoPlayerStore.ottPlaylist = false\n    // videoPlayerStore.ottFilters = false\n})\n\nlet props = defineProps({\n    getUserData: Boolean,\n    video: Object,\n    user: Object,\n})\n\nfunction updateUserStore() {\n    axios.post('/getUserStoreData')\n        .then(response => {\n            userStore.id = response.data.id\n            userStore.isAdmin = response.data.isAdmin\n            userStore.isCreator = response.data.isCreator\n            userStore.isNewsPerson = response.data.isNewsPerson\n            userStore.isVip = response.data.isVip\n            userStore.isSubscriber = response.data.isSubscriber\n            userStore.hasAccount = response.data.hasAccount\n            userStore.getUserDataCompleted = true\n            userStore.timezone = userTimezone\n            console.log('get user data on Stream')\n            if (userStore.isCreator) {\n                userStore.prevUrl = '/dashboard'\n            } else {\n                userStore.prevUrl = '/stream'\n            }\n        })\n        .catch(error => {\n            console.log(error);\n        })\n    // save user Timezone\n    updateUserTimezone()\n}\n\nconst userTimezone = ref('');\n\nconst getUserTimezone = () => {\n    // Use the Intl object to get the user's timezone\n    userTimezone.value = Intl.DateTimeFormat().resolvedOptions().timeZone;\n};\n\nconst updateUserTimezone = async () => {\n    try {\n        const response = await axios.post('/users/update-timezone', {timezone: userTimezone.value});\n\n        // Handle success response as needed\n        console.log(response.data.message);\n    } catch (error) {\n        // Handle error response or network error\n        console.error(error);\n\n        if (error.response) {\n            // Handle specific error responses if needed\n            console.error(error.response.data);\n        }\n    }\n}\n</script>\n\n"],"names":["videoPlayerStore","useVideoPlayerStore","userStore","useUserStore","getUserData","useStreamStore","useChatStore","useChannelStore","inject","usePage","props","value","urlPrev","onBeforeMount","currentPageIsStream","currentView","currentPage","onMounted","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","updateUserStore","makeVideoFullPage","isMobile","showOsd","showOsdAndControlsAndNav","loggedIn","ott","osd","ottButtons","ottChannels","ottChat","ottPlaylist","ottFilters","fullPage","stop","onBeforeUnmount","controls","makeVideoTopRight","onUnmounted","axios","post","then","response","id","data","isAdmin","isCreator","isNewsPerson","isVip","isSubscriber","hasAccount","getUserDataCompleted","timezone","userTimezone","console","log","prevUrl","error","updateUserTimezone","ref","_ref2","_callee2","_context2","sent","message","t0","apply","arguments"],"sourceRoot":""}