{"version":3,"file":"js/577.js","mappings":"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","sources":["webpack:///./resources/js/Utilities/PageSetup.js","webpack:///./resources/js/Pages/Stream.vue?d9e7","webpack:///./resources/js/Pages/Stream.vue"],"sourcesContent":["import { onBeforeMount, onMounted } from 'vue'\nimport { useUserStore } from \"@/Stores/UserStore\"\nimport { useAppSettingStore } from \"@/Stores/AppSettingStore\"\nimport { useVideoPlayerStore } from \"@/Stores/VideoPlayerStore\"\nimport { Inertia } from \"@inertiajs/inertia\"\n\nexport function usePageSetup(pageName) {\n    const userStore = useUserStore()\n    const appSettingStore = useAppSettingStore()\n    const videoPlayerStore = useVideoPlayerStore()\n\n    appSettingStore.currentPage = pageName\n    appSettingStore.showFlashMessage = true\n    appSettingStore.pageIsHidden = false\n\n    if (userStore.isMobile) {\n        appSettingStore.ott = 0\n    }\n\n    videoPlayerStore.makeVideoTopRight()\n\n    let reloadPage = () => {\n        if (appSettingStore.pageReload) {\n            appSettingStore.pageReload = false\n            window.location.reload(true);\n        }\n    };\n\n    onBeforeMount(() => {\n        reloadPage()\n    });\n\n    onMounted(() => {\n        // Check if the URL contains query strings\n        const hasQueryStrings = window.location.search !== '';\n\n        // Only scroll into view if there are no query strings\n        if (!hasQueryStrings) {\n            const topDiv = document.getElementById(\"topDiv\")\n            if (topDiv) {\n                topDiv.scrollIntoView()\n            }\n        }\n        // Only update if we're not already on this page to avoid overwriting with the current URL\n        appSettingStore.setPrevUrl()\n        appSettingStore.noLayout = false\n        Inertia.reload()\n\n    });\n}\n","import script from \"./Stream.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Stream.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n  <Head title=\"Stream\"/>\n</template>\n\n<script setup>\nimport { Inertia } from '@inertiajs/inertia'\nimport { inject, onBeforeMount, onMounted, ref } from 'vue'\nimport { usePageSetup } from '@/Utilities/PageSetup'\nimport { useAppSettingStore } from '@/Stores/AppSettingStore'\nimport { useUserStore } from '@/Stores/UserStore'\nimport { useVideoPlayerStore } from '@/Stores/VideoPlayerStore'\n\nusePageSetup('stream')\n\nconst appSettingStore = useAppSettingStore()\nconst userStore = useUserStore()\nconst videoPlayerStore = useVideoPlayerStore()\n\nconst getUserData = inject('getUserData', null)\n\nappSettingStore.osd = true\nvideoPlayerStore.makeVideoFullPage()\n\nlet reloadPage = () => {\n  if (appSettingStore.pageReload) {\n    appSettingStore.pageReload = false\n    window.location.reload(true);\n  }\n};\n\nlet props = defineProps({\n  getUserData: Boolean,\n  video: Object,\n  user: Object,\n})\n\nonBeforeMount(() => {\n  reloadPage()\n})\n\nconst userTimezone = ref('');\n\n// This should be called as soon as the component mounts\nconst getUserTimezone = () => {\n  userTimezone.value = Intl.DateTimeFormat().resolvedOptions().timeZone;\n};\n\n// Call getUserTimezone early, possibly in onMounted\nonMounted(async () => {\n  getUserTimezone();\n  if (props.getUserData) {\n    await updateUserStore();\n  } else if (!getUserData) {\n    await updateUserStore()\n  }\n  Inertia.reload()\n})\n\nasync function updateUserStore() {\n  // Ensure the timezone is set\n  if (!userTimezone.value) {\n    getUserTimezone();\n  }\n\n  try {\n    const response = await axios.post('/getUserStoreData');\n    // Update the store with the response data\n    userStore.id = response.data.id;\n    userStore.loggedIn = true\n    userStore.isAdmin = response.data.isAdmin\n    userStore.isCreator = response.data.isCreator\n    userStore.isNewsPerson = response.data.isNewsPerson\n    userStore.isVip = response.data.isVip\n    userStore.isSubscriber = response.data.isSubscriber\n    userStore.hasAccount = response.data.hasAccount\n    userStore.getUserDataCompleted = true\n    userStore.timezone = userTimezone.value;\n    console.log('get user data on Stream')\n    // Further logic\n    if (userStore.isCreator) {\n      userStore.prevUrl = '/dashboard';\n    } else {\n      userStore.prevUrl = '/stream';\n    }\n\n    // Now update the user timezone on the server\n    await updateUserTimezone();\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nconst updateUserTimezone = async () => {\n  if (!userTimezone.value) return;\n\n  try {\n    const response = await axios.post('/users/update-timezone', { timezone: userTimezone.value });\n    console.log(response.data.message);\n  } catch (error) {\n    console.error(error.response ? error.response.data : error);\n  }\n};\n</script>\n\n"],"names":["usePageSetup","pageName","userStore","useUserStore","appSettingStore","useAppSettingStore","videoPlayerStore","useVideoPlayerStore","currentPage","showFlashMessage","pageIsHidden","isMobile","ott","makeVideoTopRight","onBeforeMount","pageReload","window","location","reload","onMounted","search","topDiv","document","getElementById","scrollIntoView","setPrevUrl","noLayout","Inertia","getUserData","inject","osd","makeVideoFullPage","props","__props","userTimezone","ref","getUserTimezone","value","Intl","DateTimeFormat","resolvedOptions","timeZone","updateUserStore","_updateUserStore","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee3","response","wrap","_context3","prev","next","axios","post","sent","id","data","loggedIn","isAdmin","isCreator","isNewsPerson","isVip","isSubscriber","hasAccount","getUserDataCompleted","timezone","console","log","prevUrl","updateUserTimezone","t0","error","stop","_callee","_context","_ref2","_callee2","_context2","abrupt","message"],"sourceRoot":""}