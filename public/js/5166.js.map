{"version":3,"file":"js/5166.js","mappings":";8JAMO,SAASA,EAAaC,GACzB,IAAMC,GAAYC,EAAAA,EAAAA,gBACZC,GAAkBC,EAAAA,EAAAA,sBAClBC,GAAmBC,EAAAA,EAAAA,uBAEzBH,EAAgBI,YAAcP,EAC9BG,EAAgBK,kBAAmB,EACnCL,EAAgBM,cAAe,EAE3BR,EAAUS,UAAYC,OAAOC,WAAa,MAAQT,EAAgBU,SAClEV,EAAgBW,IAAM,GAEtBX,EAAgBW,IAAM,EACtBX,EAAgBY,gBAAiB,GAGrCV,EAAiBW,oBAEbb,EAAgBc,aAChBd,EAAgBc,YAAa,EAC7Bd,EAAgBe,iBAAkB,EAClCP,OAAOQ,SAASC,UAWhBC,EAAAA,QAAQC,GAAG,YAAY,SAACC,GAChBtB,EAAUS,UAAYC,OAAOC,WAAa,MAAQT,EAAgBU,SAClEV,EAAgBW,IAAM,EAEtBX,EAAgBW,IAAM,EAEyB,KAA3BH,OAAOQ,SAASK,SAChBrB,EAAgBsB,mBACpCC,uBAAsB,WAClB,IAAMC,EAASC,SAASC,eAAe,UACnCF,EACAA,EAAOG,eAAe,CAACC,SAAU,SAEjCpB,OAAOqB,SAAS,EAAG,EAE3B,IAEJ7B,EAAgBsB,mBAAoB,CACxC,IAEJtB,EAAgB8B,aAChB9B,EAAgBY,gBAAiB,EACjCZ,EAAgB+B,UAAW,CAI/B,wgOC3DA,sECOAnC,EAAAA,EAAAA,GAAa,UAEb,IAAMI,GAAkBC,EAAAA,EAAAA,sBAElBC,IADYH,EAAAA,EAAAA,iBACOI,EAAAA,EAAAA,wBAIzBH,EAAgBgC,KAAM,EACtBhC,EAAgBiC,QAAQC,GAAI,EAC5BlC,EAAgBiC,QAAQE,GAAI,EAC5BnC,EAAgBiC,QAAQG,GAAI,EAC5BpC,EAAgBiC,QAAQI,GAAI,EAC5BnC,EAAiBoC,2BAejBC,EAAAA,EAAAA,gBAAc,WACZ,KAWFC,EAAAA,EAAAA,WAASC,EAAAC,IAAAC,MAAC,SAAAC,IAAA,OAAAF,IAAAG,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,wBAAAF,EAAAG,OAAA,GAAAL,EAAA","sources":["webpack:///./resources/js/Utilities/PageSetup.js","webpack:///./resources/js/Pages/Stream/Index.vue?409c","webpack:///./resources/js/Pages/Stream/Index.vue"],"sourcesContent":["import { onBeforeMount, onMounted } from 'vue'\nimport { useUserStore } from \"@/Stores/UserStore\"\nimport { useAppSettingStore } from \"@/Stores/AppSettingStore\"\nimport { useVideoPlayerStore } from \"@/Stores/VideoPlayerStore\"\nimport { Inertia } from '@inertiajs/inertia'\n\nexport function usePageSetup(pageName) {\n    const userStore = useUserStore()\n    const appSettingStore = useAppSettingStore()\n    const videoPlayerStore = useVideoPlayerStore()\n\n    appSettingStore.currentPage = pageName\n    appSettingStore.showFlashMessage = true\n    appSettingStore.pageIsHidden = false\n\n    if (userStore.isMobile || window.innerWidth < 1024 || appSettingStore.fullPage) {\n        appSettingStore.ott = 0;\n    } else {\n        appSettingStore.ott = 1;\n        appSettingStore.showOttButtons = true;\n    }\n\n    videoPlayerStore.makeVideoTopRight()\n\n    if (appSettingStore.pageReload) {\n        appSettingStore.pageReload = false\n        appSettingStore.pageWasReloaded = true\n        window.location.reload();\n    }\n    // Check if the URL contains query strings\n\n\n    // Only scroll into view if there are no query strings\n\n        // const topDiv = document.getElementById(\"topDiv\")\n        // if (topDiv) {\n        //     topDiv.scrollIntoView()\n        // }\n        Inertia.on('navigate', (event) => {\n            if (userStore.isMobile || window.innerWidth < 1024 || appSettingStore.fullPage) {\n                appSettingStore.ott = 0;\n            } else {\n                appSettingStore.ott = 1;\n            }\n            const hasQueryStrings = window.location.search !== '';\n            if (!hasQueryStrings || appSettingStore.shouldScrollToTop) {\n                requestAnimationFrame(() => {\n                    const topDiv = document.getElementById(\"topDiv\");\n                    if (topDiv) {\n                        topDiv.scrollIntoView({behavior: 'auto'});\n                    } else {\n                        window.scrollTo(0, 0);\n                    }\n                });\n            }\n            appSettingStore.shouldScrollToTop = false;\n        })\n    // Only update if we're not already on this page to avoid overwriting with the current URL\n    appSettingStore.setPrevUrl()\n    appSettingStore.showOttButtons = true\n    appSettingStore.noLayout = false\n\n    // Inertia.reload()\n\n}\n","import script from \"./Index.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Index.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n  <Head title=\"Stream\"/>\n</template>\n\n<script setup>\nimport { Inertia } from '@inertiajs/inertia'\nimport { inject, onBeforeMount, onMounted, ref } from 'vue'\nimport { usePageSetup } from '@/Utilities/PageSetup'\nimport { useAppSettingStore } from '@/Stores/AppSettingStore'\nimport { useUserStore } from '@/Stores/UserStore'\nimport { useVideoPlayerStore } from '@/Stores/VideoPlayerStore'\n\nusePageSetup('stream')\n\nconst appSettingStore = useAppSettingStore()\nconst userStore = useUserStore()\nconst videoPlayerStore = useVideoPlayerStore()\n\n// const getUserData = inject('getUserData', null)\n\nappSettingStore.osd = true\nappSettingStore.osdSlot.a = true\nappSettingStore.osdSlot.b = true\nappSettingStore.osdSlot.c = true\nappSettingStore.osdSlot.d = true\nvideoPlayerStore.makeVideoFullPage()\n\n// let reloadPage = () => {\n//   if (appSettingStore.pageReload) {\n//     appSettingStore.pageReload = false\n//     window.location.reload(true);\n//   }\n// };\n\nlet props = defineProps({\n  // getUserData: Boolean,\n  video: Object,\n  user: Object,\n})\n\nonBeforeMount(() => {\n  // reloadPage()\n})\n\n// const userTimezone = ref('');\n\n// This should be called as soon as the component mounts\n// const getUserTimezone = () => {\n//   userTimezone.value = Intl.DateTimeFormat().resolvedOptions().timeZone;\n// };\n\n// Call getUserTimezone early, possibly in onMounted\nonMounted(async () => {\n  // getUserTimezone();\n  // if (props.getUserData) {\n  //   await updateUserStore();\n  // } else if (!getUserData) {\n  //   await updateUserStore()\n  // }\n  // Inertia.reload()\n})\n//\n// async function updateUserStore() {\n//   // Ensure the timezone is set\n//   // if (!userTimezone.value) {\n//   //   getUserTimezone();\n//   // }\n//\n//   try {\n//     const response = await axios.post('/getUserStoreData');\n//     // Update the store with the response data\n//     userStore.id = response.data.id;\n//     appSettingStore.loggedIn = true\n//     userStore.isAdmin = response.data.isAdmin\n//     userStore.isCreator = response.data.isCreator\n//     userStore.isNewsPerson = response.data.isNewsPerson\n//     userStore.isVip = response.data.isVip\n//     userStore.isSubscriber = response.data.isSubscriber\n//     userStore.hasAccount = response.data.hasAccount\n//     userStore.getUserDataCompleted = true\n//     userStore.timezone = userTimezone.value;\n//     console.log('get user data on Stream')\n//     // Further logic\n//     if (userStore.isCreator) {\n//       userStore.prevUrl = '/dashboard';\n//     } else {\n//       userStore.prevUrl = '/stream';\n//     }\n//\n//     // Now update the user timezone on the server\n//     // await updateUserTimezone();\n//   } catch (error) {\n//     console.error(error);\n//   }\n// }\n//\n// const updateUserTimezone = async () => {\n//   if (!userTimezone.value) return;\n//\n//   try {\n//     const response = await axios.post('/users/update-timezone', { timezone: userTimezone.value });\n//     console.log(response.data.message);\n//   } catch (error) {\n//     console.error(error.response ? error.response.data : error);\n//   }\n// };\n</script>\n\n"],"names":["usePageSetup","pageName","userStore","useUserStore","appSettingStore","useAppSettingStore","videoPlayerStore","useVideoPlayerStore","currentPage","showFlashMessage","pageIsHidden","isMobile","window","innerWidth","fullPage","ott","showOttButtons","makeVideoTopRight","pageReload","pageWasReloaded","location","reload","Inertia","on","event","search","shouldScrollToTop","requestAnimationFrame","topDiv","document","getElementById","scrollIntoView","behavior","scrollTo","setPrevUrl","noLayout","osd","osdSlot","a","b","c","d","makeVideoFullPage","onBeforeMount","onMounted","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","stop"],"sourceRoot":""}