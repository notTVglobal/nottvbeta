{"version":3,"file":"js/3241.js","mappings":"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","sources":["webpack:///./resources/js/Stores/ScheduleStore.js","webpack:///./resources/js/Utilities/TimeUtils.js","webpack:///./resources/js/Utilities/PageSetup.js","webpack:///./resources/js/Components/Global/Calendar/TodayView.vue?3e8f","webpack:///./resources/js/Pages/Schedule.vue?c89c","webpack:///./resources/js/Components/Global/Calendar/TodayView.vue","webpack:///./resources/js/Components/Global/Calendar/TodayView.vue?5a28","webpack:///./resources/js/Components/Global/Calendar/TodayView.vue?ee4f","webpack:///./resources/js/Components/Global/Modals/Messages.vue?dfe9","webpack:///./resources/js/Components/Global/Modals/Messages.vue","webpack:///./resources/js/Components/Global/Modals/PopUpModal.vue?0d51","webpack:///./resources/js/Components/Global/Modals/PopUpModal.vue","webpack:///./resources/js/Pages/Schedule.vue","webpack:///./resources/js/Pages/Schedule.vue?86e6","webpack:///./resources/js/Pages/Schedule.vue?77d5"],"sourcesContent":["import { defineStore } from 'pinia'\nimport { useUserStore } from '@/Stores/UserStore'\nimport { createTimeSlots } from '@/Utilities/TimeUtils';\nimport {\n    addDays,\n    addHours,\n    addMinutes,\n    addMonths,\n    eachDayOfInterval,\n    eachHourOfInterval,\n    endOfMonth,\n    endOfWeek,\n    format,\n    getHours,\n    getMonth,\n    getYear,\n    isSameDay,\n    isToday,\n    isTomorrow,\n    isYesterday,\n    startOfDay,\n    startOfHour,\n    startOfMonth,\n    startOfWeek,\n    subMonths,\n} from 'date-fns'\n\n// Import dayjs and its plugins\nimport dayjs from 'dayjs'\nimport relativeTime from 'dayjs/plugin/relativeTime'\nimport timezone from 'dayjs/plugin/timezone'\nimport utc from 'dayjs/plugin/utc'\n\n// Extend dayjs with the plugins\ndayjs.extend(relativeTime)\ndayjs.extend(timezone)\ndayjs.extend(utc)\n\nfunction convertScheduleToTimezone(scheduleData) {\n    const userStore = useUserStore(); // Access the UserStore\n\n    return scheduleData.data.map(item => {\n        // Convert top-level start_time and end_time using UserStore methods\n        const startTimeInUserTz = item.start_time ? userStore.formatDateTimeFromUtcToUserTimezone(item.start_time, 'YYYY-MM-DD HH:mm:ss') : null;\n        const endTimeInUserTz = item.end_time ? userStore.formatDateTimeFromUtcToUserTimezone(item.end_time, 'YYYY-MM-DD HH:mm:ss') : null;\n\n        // Check and convert recurrenceDetails if present\n        let recurrenceDetailsInUserTz = null;\n        if (item.recurrenceDetails) {\n            const { start_time, start_date, end_date } = item.recurrenceDetails;\n            recurrenceDetailsInUserTz = {\n                ...item.recurrenceDetails,\n                start_time: start_time ? userStore.formatTimeInUserTimezone(start_time, 'HH:mm:ss') : null,\n                start_date: start_date ? userStore.formatDateTimeFromUtcToUserTimezone(start_date, 'YYYY-MM-DD') : null,\n                end_date: end_date ? userStore.formatDateTimeFromUtcToUserTimezone(end_date, 'YYYY-MM-DD') : null,\n            };\n        }\n\n        return {\n            ...item,\n            start_time: startTimeInUserTz,\n            end_time: endTimeInUserTz,\n            recurrenceDetails: recurrenceDetailsInUserTz,\n        };\n    });\n}\n\n// Helper function to get dates within the next 6 hours from viewingWindowStart\nfunction getUpcomingContentDates(viewingWindowStart) {\n    let dates = [];\n    let start = new Date(viewingWindowStart);\n    for (let i = 0; i < 6; i++) {\n        dates.push(new Date(start.setHours(start.getHours() + i)));\n    }\n    return dates;\n}\n\nconst initialState = () => ({\n    viewingWindowStart: new Date(),\n    currentMonth: new Date(),\n    selectedDay: new Date(),\n    currentWeekStart: null,\n    currentWeekEnd: null,\n    // viewingMode: 'automatic', // or 'userSelected'\n    fiveDaySixHourSchedule: [], // Holds the schedule shows 5 day / 6 hour structured data\n    todaysContent: [],\n    weeklyContent: [],\n    dataFetchLog: [],\n})\n\nexport const useScheduleStore = defineStore('scheduleStore', {\n    state: initialState,\n    actions: {\n        resetAll() {\n            // Reset the store to its original state (clear all data)\n            Object.assign(this, initialState())\n        },\n        reset() {\n            const now = new Date()\n            this.viewingWindowStart = now\n            this.currentMonth = now\n            this.selectedDay = now\n        },\n        async setSelectedDay(day) {\n            this.selectedDay = day\n            // Explicitly set the viewingWindowStart to 4 AM for the selected day\n            this.viewingWindowStart = addHours(startOfDay(day), 4)\n            this.currentWeekStart = startOfWeek(day, { weekStartsOn: 0 });\n            this.currentWeekEnd = endOfWeek(day, { weekStartsOn: 0 });\n\n            // // Check if the week of the selected day is already loaded\n            // this.currentWeekStart = startOfWeek(day, {weekStartsOn: 0});\n            // this.currentWeekEnd = endOfWeek(day, {weekStartsOn: 0});\n\n            // Use the updated fetch logic\n            await this.fetchWeekDataIfNeeded();\n\n            // // First, check if we need to load data for the new week\n            // if (this.needsDataForWeek(weekStart, weekEnd)) {\n            //     // If new data is needed for the week, load it\n            //     await this.loadWeekFromDate(day).catch(error => {\n            //         console.error(\"Failed to load data for the new week:\", error);\n            //     });\n            // }\n\n            // Then, check and fetch for any missing upcoming content\n            // This is necessary in case the week data is present but specific upcoming content within the week is missing\n            // await this.checkAndFetchForUpcomingContent();\n        },\n        setSelectedDayToToday(day) {\n            const now = new Date()\n            this.selectedDay = now\n            this.viewingWindowStart = startOfHour(now)\n        },\n        async changeDay(days) {\n            const currentTime = this.viewingWindowStart.getHours() * 60 + this.viewingWindowStart.getMinutes()\n            let newDay = addDays(startOfDay(this.viewingWindowStart), days)\n            newDay = new Date(newDay.setMinutes(currentTime)) // Preserve time of day\n\n            this.selectedDay = newDay\n            this.viewingWindowStart = newDay\n\n            // Update the week's range based on the new day\n            this.currentWeekStart = startOfWeek(newDay, { weekStartsOn: 0 });\n            this.currentWeekEnd = endOfWeek(newDay, { weekStartsOn: 0 });\n\n            // // Check if the week of the new day is already loaded\n            // const weekStart = startOfWeek(newDay, {weekStartsOn: 0});\n            // const weekEnd = endOfWeek(newDay, {weekStartsOn: 0});\n\n            // Use the updated centralized fetch logic without redundant checks\n            await this.fetchWeekDataIfNeeded();\n\n            // // Check for the need to load data for the new week\n            // if (this.needsDataForWeek(weekStart, weekEnd)) {\n            //     await this.loadWeekFromDate(newDay).catch(error => {\n            //         console.error(\"Failed to load data for the new week:\", error);\n            //     });\n            // }\n\n            // // Check for the need to load data for the new week\n            // if (!this.needsDataForWeek()) {\n            //     // Data for the current week has already been loaded; skip fetching\n            //     console.log(\"Data for the current week has already been loaded; skipping redundant fetch.\");\n            //     return;\n            // }\n            //\n            // // Proceed with data fetching if needed\n            // await this.checkAndFetchForUpcomingContent();\n        },\n        async shiftHours(hours) {\n            // Shift the viewing window\n            this.viewingWindowStart = addHours(this.viewingWindowStart, hours);\n            this.currentWeekStart = startOfWeek(this.viewingWindowStart, { weekStartsOn: 0 });\n            this.currentWeekEnd = endOfWeek(this.viewingWindowStart, { weekStartsOn: 0 });\n\n            // // Update selectedDay if the day has changed\n            // if (!isSameDay(this.viewingWindowStart, this.selectedDay)) {\n            //     this.selectedDay = startOfDay(this.viewingWindowStart);\n            // }\n\n            // If the day has changed, update selectedDay and the week's range\n            if (!isSameDay(this.viewingWindowStart, this.selectedDay)) {\n                this.selectedDay = startOfDay(this.viewingWindowStart);\n            }\n\n            // // Check if the week of the new viewing window is already loaded\n            // this.currentWeekStart = startOfWeek(this.viewingWindowStart, { weekStartsOn: 0 });\n            // this.currentWeekEnd = endOfWeek(this.viewingWindowStart, { weekStartsOn: 0 });\n\n            // Use the updated fetch logic\n            await this.fetchWeekDataIfNeeded();\n\n            // // Check for the need to load data for the new week\n            // if (!this.needsDataForWeek()) {\n            //     // Data for the current week has already been loaded; skip fetching\n            //     console.log(\"Data for the current week has already been loaded; skipping redundant fetch.\");\n            //     return;\n            // }\n\n            //\n            // await this.loadWeekFromDate(this.viewingWindowStart).catch(error => {\n            //     console.error(\"Failed to load data for the new week:\", error);\n            // });\n\n            // Proceed with data fetching if needed\n            // await this.checkAndFetchForUpcomingContent();\n        },\n        isElevenPM(date) {\n            return getHours(date) === 23 // Checks if the hour is 23 (11 PM)\n        },\n        // Actions to change the month\n        async subtractMonth() {\n            // Subtract one month from the currentMonth\n            this.currentMonth = subMonths(this.currentMonth, 1)\n\n            try {\n                await this.setSelectedDay(this.currentMonth)\n                console.log(\"Set selected day based on current month:\", this.currentMonth);\n            } catch (error) {\n                console.error(`Failed to set selected day based on current month ${this.currentMonth}:`, error);\n            }\n        },\n        async addMonth() {\n            this.currentMonth = addMonths(this.currentMonth, 1)\n            try {\n                await this.setSelectedDay(this.currentMonth)\n                console.log(\"Set selected day based on current month:\", this.currentMonth);\n            } catch (error) {\n                console.error(`Failed to set selected day based on current month ${this.currentMonth}:`, error);\n            }\n        },\n        async fetchFiveDaySixHourSchedule() {\n            console.error('fetchFiveDaySixHourSchedule')\n            try {\n                const userStore = useUserStore()\n                const response = await axios.get('/api/schedule')\n\n                // Fallback to response timezone if userStore.timezone is not set\n                const timezone = userStore.timezone || response.data.userTimezone || 'UTC'; // Additional fallback to 'UTC'\n\n                // Convert the entire schedule, including nested recurrenceDetails, to the user's timezone\n                this.fiveDaySixHourSchedule = convertScheduleToTimezone(response.data, timezone)\n                console.error('fetchFiveDaySixHourSchedule', response.data)\n            } catch (error) {\n                console.error('Failed to load schedule shows:', error)\n                // Handle the error state as needed, e.g., setting an error state property\n            }\n        },\n        async fetchTodaysContent() {\n            try {\n                const userStore = useUserStore()\n                const response = await axios.get('/api/schedule/today')\n\n                // Fallback to response timezone if userStore.timezone is not set\n                const timezone = userStore.timezone || response.data.userTimezone || 'UTC'; // Additional fallback to 'UTC'\n\n                this.todaysContent = convertScheduleToTimezone(response.data, timezone)\n            } catch (error) {\n                console.error('Failed to fetch today\\'s content:', error)\n            }\n        },\n        async preloadWeeklyContent() {\n            // Use the current date to preload content for the current week\n            const currentDate = new Date();\n\n            try {\n                // Call loadWeekFromDate with the current date\n                await this.loadWeekFromDate(currentDate);\n            } catch (error) {\n                console.error('Failed to preload weekly content:', error);\n            }\n        },\n        async loadWeekFromDate(date) {\n            let formattedDate; // Declare formattedDate outside of the try block\n            try {\n                const userStore = useUserStore();\n                // Ensure the date is in UTC format for the request\n                console.log('Date before formatted: ' + date)\n                const fullISODate = date.toISOString();\n\n                console.log(`Loading week data for date in UTC: ${fullISODate}`);\n\n                // Send the dateTime and timezone as a JSON object in a POST request\n                const response = await axios.post(`/api/schedule/week/${fullISODate}`);\n\n                // const formattedDate = date.toISOString().split('T')[0];\n                // console.log(`Loading week data for date: ${formattedDate}`); // Log the date being requested\n                //\n                // const response = await axios.get(`/api/schedule/week/${formattedDate}`);\n                console.log('Received response:', response.data); // Log the raw response data\n\n                // Fallback to response timezone if userStore.timezone is not set\n                const timezone = userStore.timezone || response.data.userTimezone || 'UTC'; // Additional fallback to 'UTC'\n                console.log(`Using timezone: ${timezone}`); // Log the timezone being used\n\n                const newData = convertScheduleToTimezone(response.data, timezone); // Ensure you are accessing the correct data property from the response\n\n                // Update the fetch log with the current fetch\n                const weekStart = startOfWeek(new Date(date), { weekStartsOn: 0 }).toISOString();\n                const weekEnd = endOfWeek(new Date(date), { weekStartsOn: 0 }).toISOString();\n                const fetchTime = new Date().toISOString();\n\n                const existingLogIndex = this.dataFetchLog.findIndex(log => log.weekStart === weekStart && log.weekEnd === weekEnd);\n                if (existingLogIndex !== -1) {\n                    this.dataFetchLog[existingLogIndex].lastFetch = fetchTime;\n                } else {\n                    this.dataFetchLog.push({ weekStart, weekEnd, lastFetch: fetchTime });\n                }\n\n                // Merge newData into weeklyContent, avoiding duplicates\n                this.weeklyContent = [...this.weeklyContent, ...newData].filter((value, index, self) =>\n                        index === self.findIndex((t) => (\n                            t.id === value.id && t.start_time === value.start_time\n                        ))\n                );\n            } catch (error) {\n                console.error(`Failed to load content for week starting ${formattedDate}:`, error);\n            }\n        },\n\n        needsDataForWeek() {\n            // Helper function to format ISO date strings for easier comparison\n            const formatISODate = date => date.toISOString().split('T')[0];\n\n            // Current week range in ISO date string format\n            const weekStartStr = formatISODate(this.currentWeekStart);\n            const weekEndStr = formatISODate(this.currentWeekEnd);\n\n            // Enhanced logging for debugging\n            console.log(`Current week range: ${weekStartStr} to ${weekEndStr}`);\n            console.log('Existing data fetch log entries:', this.dataFetchLog);\n\n            // Iterate through the fetch log to check if the current week has been fetched\n            const weekHasBeenFetched = this.dataFetchLog.some(log => {\n                // Convert log dates to ISO string format for comparison\n                const logWeekStartStr = formatISODate(new Date(log.weekStart));\n                const logWeekEndStr = formatISODate(new Date(log.weekEnd));\n\n                // Log each comparison for insight\n                console.log(`Comparing to fetched range: ${logWeekStartStr} to ${logWeekEndStr}`);\n\n                return logWeekStartStr <= weekStartStr && logWeekEndStr >= weekEndStr;\n            });\n\n            // Log the final determination\n            console.log(`Week from ${weekStartStr} to ${weekEndStr} has ${weekHasBeenFetched ? '' : 'not '}been fetched.`);\n\n            return !weekHasBeenFetched;\n            // // Extend weekEnd to cover the span of upcoming content from viewingWindowStart\n            // const extendedEnd = this.calculateExtendedEndForUpcomingContent();\n            // let checkWeekEnd = new Date(this.currentWeekEnd); // Work with a copy to avoid side effects\n            //\n            // if (extendedEnd > checkWeekEnd) {\n            //     checkWeekEnd = extendedEnd;\n            // }\n            //\n            // // Now weekEnd includes any additional day(s) that might be displayed\n            // // Adjust the checkWeekEnd to include the entire day\n            // checkWeekEnd.setHours(23, 59, 59, 999);\n            //\n            // const hasDataForExtendedWeek = this.weeklyContent.some(content => {\n            //     const contentDate = new Date(content.start_time);\n            //     return contentDate >= this.currentWeekStart && contentDate <= checkWeekEnd;\n            // });\n            //\n            // console.log('Has data for extended week range:', hasDataForExtendedWeek);\n            // return !hasDataForExtendedWeek;\n        },\n        calculateExtendedEndForUpcomingContent() {\n            // Assuming viewingWindowStart is the reference start time for upcoming content\n            const baseStartTime = new Date(this.viewingWindowStart);\n            // Extend by 6 hours to cover the upcoming content span\n            // Return the extended end time, potentially adjusting into the next day\n            return new Date(baseStartTime.getTime() + (6 * 60 * 60 * 1000));\n        },\n        // Function to check for and fetch missing upcoming content\n        async checkAndFetchForUpcomingContent() {\n            const upcomingDates = getUpcomingContentDates(this.viewingWindowStart);\n            const now = new Date();\n            const fifteenMinutesAgo = new Date(now.getTime() - 15 * 60000);\n\n            for (const date of upcomingDates) {\n                const dateString = date.toISOString().split('T')[0];\n                const contentCoverageAndFreshness = this.weeklyContent.some(content => {\n                    const contentDate = new Date(content.start_time).toDateString();\n                    const lastFetchedTime = this.dataFetchLog[dateString];\n                    const isFresh = lastFetchedTime && new Date(lastFetchedTime) > fifteenMinutesAgo;\n                    return date.toDateString() === contentDate && isFresh;\n                });\n\n                if (!contentCoverageAndFreshness) {\n                    // This date needs data fetching\n                    await this.fetchDataAndUpdateLog(dateString, date);\n                    break; // Assuming you fetch data for the week, so no need to check further dates within the same week\n                }\n            }\n        },\n        async fetchDataAndUpdateLog(dateString, date) {\n            try {\n                await this.loadWeekFromDate(date);\n                // Successfully fetched, so update the log\n                this.dataFetchLog[dateString] = new Date().toISOString();\n                console.log(\"Data fetched successfully for date:\", dateString);\n            } catch (error) {\n                console.error(`Failed to fetch data for date ${dateString}:`, error);\n            }\n        },\n\n        // Updated to use this.currentWeekStart and this.currentWeekEnd directly\n        async fetchWeekDataIfNeeded() {\n            // Assumes this.currentWeekStart and this.currentWeekEnd are already set\n            if (this.needsDataForWeek()) {\n                await this.checkAndFetchForUpcomingContent().catch(error => {\n                    console.error(\"Failed to load data for the week:\", error);\n                    return false; // Indicates failure to fetch when an error occurs\n                });\n                // await this.loadWeekFromDate(this.currentWeekStart).catch(error => {\n                //     console.error(\"Failed to load data for the week:\", error);\n                //     return false; // Indicates failure to fetch when an error occurs\n                // });\n            } else {\n                console.log(\"Week data already loaded; no need to fetch.\");\n            }\n\n            // Conditionally check for missing upcoming content within the current week\n            // only if new week data hasn't been fetched.\n            // if (!dataFetched) {\n            //     await this.checkAndFetchForUpcomingContent();\n            // }\n        },\n        // createTimeSlots(start, durationHours = 4, intervalMinutes = 30) {\n        //     let slots = [];\n        //     for (let i = 0; i < (durationHours * 60) / intervalMinutes; i++) {\n        //         let slotTime = new Date(start.getTime() + i * intervalMinutes * 60000);\n        //         slots.push(slotTime);\n        //     }\n        //     return slots;\n        // },\n\n    },\n\n    getters: {\n        nextFourHoursOfContent: (state) => {\n            const userStore = useUserStore();\n            const now = new Date(); // Current time\n            const startOfCurrentHour = new Date(now.getFullYear(), now.getMonth(), now.getDate(), now.getHours());\n            const fourHoursLater = new Date(startOfCurrentHour.getTime() + 4 * 60 * 60 * 1000);\n\n            // Create time slots for the next four hours, at 30-minute intervals, in UTC\n            const utcTimeSlots = createTimeSlots(startOfCurrentHour, 4, 30);\n            // Convert each UTC time slot to the user's local timezone\n            const timeSlots = utcTimeSlots.map(slot =>\n                new Date(userStore.convertUtcToUserTimezone(slot))\n            );\n\n\n            // Filter, sort, and adjust shows based on start time, duration, and priority\n            let sortedShows = state.weeklyContent\n                .filter(item => {\n                    const itemStart = new Date(item.start_time);\n                    return itemStart >= startOfCurrentHour && itemStart < fourHoursLater;\n                })\n                .sort((a, b) => {\n                    // Sort by start time; if equal, then by priority\n                    const startDiff = new Date(a.start_time) - new Date(b.start_time);\n                    return startDiff !== 0 ? startDiff : a.priority - b.priority;\n                })\n                .map((item, index, array) => {\n                    // Convert back to string format matching start_time format\n                    const formattedItemStartTime = dayjs(item.start_time).format('YYYY-MM-DD HH:mm:ss');\n\n                    console.log('itemStartTimeInUserTZ: ' + formattedItemStartTime)\n                    // Calculate grid placement for each show\n                    const itemStart = new Date(item.start_time);\n                    const itemEnd = new Date(item.start_time);\n                    itemEnd.setMinutes(itemEnd.getMinutes() + item.durationMinutes);\n\n                    // Find the index of the slot that the item starts in\n                    // const slotIndex = timeSlots.findIndex(slot => itemStart >= slot && itemStart < new Date(slot.getTime() + 30 * 60000));\n\n                    // Find the index of the slot that the item starts in\n                    const slotIndex = timeSlots.findIndex(slot => {\n                        return formattedItemStartTime >= slot && formattedItemStartTime < new Date(slot.getTime() + 30 * 60000);\n                    });\n\n                    let durationSlots = Math.ceil(item.durationMinutes / 30);\n                    // Adjust for overlaps with subsequent shows\n                    if (index < array.length - 1) {\n                        const nextItemStart = new Date(array[index + 1].start_time);\n                        if (itemEnd > nextItemStart) {\n                            // If overlap, reduce durationSlots\n                            const overlap = Math.ceil((itemEnd - nextItemStart) / (30 * 60000));\n                            durationSlots -= overlap;\n                        }\n                    }\n\n                    // Ensure the span doesn't exceed the grid or become negative\n                    const adjustedSpan = Math.max(1, Math.min(durationSlots, timeSlots.length - slotIndex));\n\n                    // Return the adjusted show with grid placement information\n                    return {\n                        ...item,\n                        gridStart: slotIndex + 1, // Grid is 1-indexed\n                        gridSpan: adjustedSpan\n                    };\n                });\n\n            return sortedShows;\n        },\n        // nextFourHoursOfContent: (state) => {\n        //     const now = new Date(); // Get the current date and time\n        //     const start = new Date(now.getFullYear(), now.getMonth(), now.getDate(), now.getHours()); // Set to the top of the current hour\n        //     const end = new Date(start.getTime() + 4 * 60 * 60 * 1000); // 4 hours later from the start\n        //\n        //     // Filter weeklyContent for the next 6 hours window\n        //     return state.weeklyContent.filter(item => {\n        //         const itemStart = new Date(item.start_time);\n        //         return itemStart >= start && itemStart < end;\n        //     }).sort((a, b) => new Date(a.start_time) - new Date(b.start_time));\n        // },\n        nextFourHoursWithHalfHourIntervals: (state) => {\n            const userStore = useUserStore(); // Access the user store\n            const userTimezone = userStore.timezone; // Get the user's timezone\n\n            const intervals = [];\n            const now = dayjs().tz(userTimezone); // Get the current time in the user's timezone\n            // Use dayjs to handle time correctly in the specified timezone\n            let current = now.startOf('hour'); // Set to the top of the current hour\n\n            // Generate intervals for the next 4 hours, each 30 minutes apart\n            for (let i = 0; i < 8; i++) { // 4 hours / 30 minutes = 8 intervals\n                // Push an object with both the formatted time for display and the actual DateTime object\n                intervals.push({\n                    formatted: current.format('hh:mm A'), // Formatted time for display\n                    dateTimeString: current.format('YYYY-MM-DD HH:mm:ss') // Y-m-d H:m:s format for comparisons\n                });\n                current = current.add(30, 'minute'); // Move to the next 30-minute interval\n            }\n\n            return intervals;\n        },\n        upcomingContent: (state) => {\n            const start = new Date(state.viewingWindowStart.getTime() - 60 * 60 * 1000); // 1 hour earlier\n            const end = new Date(start.getTime() + 7 * 60 * 60 * 1000); // 6 hours later\n\n            // Filter weeklyContent for the next 6 hours window\n            return state.weeklyContent.filter(item => {\n                const itemStart = new Date(item.start_time);\n                return itemStart >= start && itemStart < end;\n            }).sort((a, b) => new Date(a.start_time) - new Date(b.start_time));\n        },\n        nextSixHours: (state) => {\n            let adjustedStart = state.viewingWindowStart\n            const end = addHours(adjustedStart, 5)\n            return eachHourOfInterval({start: adjustedStart, end})\n        },\n        dateMessage: (state) => {\n            const startDay = startOfDay(state.viewingWindowStart)\n            const formattedDate = format(startDay, 'EEEE MMMM do, yyyy')\n            if (isToday(startDay)) {\n                return `Today - ${formattedDate}`\n            } else if (isYesterday(startDay)) {\n                return `Yesterday - ${formattedDate}`\n            } else if (isTomorrow(startDay)) {\n                return `Tomorrow - ${formattedDate}`\n            } else {\n                return formattedDate\n            }\n        },\n        currentMonthIndex: (state) => getMonth(state.currentMonth), // Adds a getter to get the current month's index\n        currentMonthName: (state) => format(state.currentMonth, 'MMMM'),\n        currentYear: (state) => getYear(state.currentMonth),\n        daysInMonth: (state) => {\n            const startOfCurrentMonth = startOfMonth(state.currentMonth);\n            const endOfCurrentMonth = endOfMonth(state.currentMonth);\n\n            // Adjust these to ensure the grid starts on Sunday and ends on Saturday\n            const startOfGrid = startOfWeek(startOfCurrentMonth, { weekStartsOn: 0 });\n            const endOfGrid = endOfWeek(endOfCurrentMonth, { weekStartsOn: 0 });\n\n            // Generate the days for the calendar grid\n            return eachDayOfInterval({ start: startOfGrid, end: endOfGrid });\n        },\n        isToday: (state) => {\n            const today = new Date()\n            const viewingStart = new Date(state.viewingWindowStart)\n\n            return today.toDateString() === viewingStart.toDateString()\n        },\n    },\n})\n","// utilities/timeUtils.js\nexport function createTimeSlots(start, durationHours = 4, intervalMinutes = 30) {\n    let slots = [];\n    for (let i = 0; i < (durationHours * 60) / intervalMinutes; i++) {\n        let slotTime = new Date(start.getTime() + i * intervalMinutes * 60000);\n        slots.push(slotTime.toISOString());\n    }\n    return slots;\n}","import { onBeforeMount, onMounted } from 'vue'\nimport { useUserStore } from \"@/Stores/UserStore\"\nimport { useAppSettingStore } from \"@/Stores/AppSettingStore\"\nimport { useVideoPlayerStore } from \"@/Stores/VideoPlayerStore\"\nimport { Inertia } from '@inertiajs/inertia'\n\nexport function usePageSetup(pageName) {\n    const userStore = useUserStore()\n    const appSettingStore = useAppSettingStore()\n    const videoPlayerStore = useVideoPlayerStore()\n\n    appSettingStore.currentPage = pageName\n    appSettingStore.showFlashMessage = true\n    appSettingStore.pageIsHidden = false\n\n    if (userStore.isMobile || window.innerWidth < 1024 || appSettingStore.fullPage) {\n        appSettingStore.ott = 0;\n    } else {\n        appSettingStore.ott = 1;\n        appSettingStore.showOttButtons = true;\n    }\n\n    videoPlayerStore.makeVideoTopRight()\n\n    if (appSettingStore.pageReload) {\n        appSettingStore.pageReload = false\n        window.location.reload(true);\n    }\n    // Check if the URL contains query strings\n\n\n    // Only scroll into view if there are no query strings\n\n        // const topDiv = document.getElementById(\"topDiv\")\n        // if (topDiv) {\n        //     topDiv.scrollIntoView()\n        // }\n        Inertia.on('navigate', (event) => {\n            if (userStore.isMobile || window.innerWidth < 1024 || appSettingStore.fullPage) {\n                appSettingStore.ott = 0;\n            } else {\n                appSettingStore.ott = 1;\n            }\n            const hasQueryStrings = window.location.search !== '';\n            if (!hasQueryStrings || appSettingStore.shouldScrollToTop) {\n                requestAnimationFrame(() => {\n                    const topDiv = document.getElementById(\"topDiv\");\n                    if (topDiv) {\n                        topDiv.scrollIntoView({behavior: 'auto'});\n                    } else {\n                        window.scrollTo(0, 0);\n                    }\n                });\n            }\n            appSettingStore.shouldScrollToTop = false;\n        })\n    // Only update if we're not already on this page to avoid overwriting with the current URL\n    appSettingStore.setPrevUrl()\n    appSettingStore.showOttButtons = true\n    appSettingStore.noLayout = false\n\n    // Inertia.reload()\n\n}\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"\", \"\",{\"version\":3,\"sources\":[],\"names\":[],\"mappings\":\"\",\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".bg-gradient-show[data-v-39f6224a]{background:linear-gradient(90deg,#1f4037,#99f2c8)}.bg-gradient-show-hover[data-v-39f6224a]:hover{background:linear-gradient(90deg,#66d3fa,#6e45e2)}.bg-gradient-new-release[data-v-39f6224a]{background:linear-gradient(90deg,#654ea3,#eaafc8)}.bg-gradient-new-release-hover[data-v-39f6224a]:hover{background:linear-gradient(90deg,#c2e59c,#64b3f4)}.column-width[data-v-39f6224a]{@apply w-16}.schedule-item[data-v-39f6224a]{align-items:center;background:#f0f0f0;color:#000;display:flex;flex-direction:column;gap:10px;padding:10px}.time-slot[data-v-39f6224a]{border-bottom:1px solid #fff;grid-row:1;padding:10px 0;text-align:center}.time-cell[data-v-39f6224a]{border:1px solid #fff}.content[data-v-39f6224a]{background:#f0f0f0;border:1px solid #ddd;padding:8px}.placeholder[data-v-39f6224a]{background:#ccc;height:60px;width:100%}.schedule-grid[data-v-39f6224a]{display:grid;grid-template-columns:repeat(8,1fr)}.content-row[data-v-39f6224a],.header-row[data-v-39f6224a]{display:contents;width:100%}.schedule-cell[data-v-39f6224a]{background:#333;color:#fff;padding:8px;text-align:center}.item-content[data-v-39f6224a]{background:linear-gradient(90deg,#444444e6,#444444b3);padding:8px}.content-image[data-v-39f6224a]{height:auto;object-fit:cover;width:100%}@media (min-width:1280px){.xl\\\\:hidden[data-v-39f6224a]{display:none}}@media (min-width:1024px){.lg\\\\:hidden[data-v-39f6224a]{display:none}}\", \"\",{\"version\":3,\"sources\":[\"webpack://./resources/js/Pages/Schedule.vue\"],\"names\":[],\"mappings\":\"AAoeA,mCACE,iDACF,CAEA,+CACE,iDACF,CAEA,0CACE,iDACF,CAEA,sDACE,iDACF,CAGA,+BACE,WACF,CAGA,gCAOE,kBAAmB,CANnB,kBAAmB,CACnB,UAAW,CAEX,YAAa,CACb,qBAAsB,CACtB,QAAS,CAHT,YAKF,CAEA,4BAGE,4BAA6B,CAC7B,UAAW,CAFX,cAAe,CADf,iBAIF,CAEA,4BACE,qBACF,CAEA,0BACE,kBAAmB,CAEnB,qBAAsB,CADtB,WAEF,CAEA,8BACE,eAAgB,CAEhB,WAAY,CADZ,UAEF,CAGA,gCACE,YAAa,CACb,mCAEF,CAEA,2DACE,gBAAiB,CACjB,UACF,CAEA,gCACE,eAAgB,CAChB,UAAW,CAEX,WAAY,CADZ,iBAEF,CAEA,+BAEE,qDAAmF,CADnF,WAEF,CAEA,gCAEE,WAAY,CACZ,gBAAiB,CAFjB,UAGF,CAGA,0BAEE,6BACE,YACF,CACF,CAEA,0BAEE,6BACE,YACF,CACF\",\"sourcesContent\":[\"<script>\\n\\n// DELETE THIS SCRIPT TAG\\n// This is only for notes about building this page.\\n\\n// The schedule page will allow free users to look back 72 hours and look ahead 72 hours.\\n// On a mobile device it's easy enough to create a forever scroll for looking forward.\\n// The easter egg will be scrolling UP to look back at the past 72 hours.\\n// Free users can watch any of the content in the past 72 hours for free.\\n// Users are given credits each month to watch premium notTV content.\\n// They may purchase more credits, or subscribe for unlimited access.\\n// They may also use credits to purchase licenses to content from creators.\\n// Credits may also be spent in the shop.\\n\\n</script>\\n\\n<template>\\n  <Head title=\\\"Schedule\\\"/>\\n\\n  <div class=\\\"place-self-center flex flex-col gap-y-3 w-full overscroll-x-none pb-64\\\">\\n    <div id=\\\"topDiv\\\" class=\\\"flex justify-end px-5\\\">\\n      <div class=\\\"text-3xl font-semibold pt-4\\\">Schedule</div>\\n    </div>\\n    <Message v-if=\\\"appSettingStore.showFlashMessage\\\" :flash=\\\"$page.props.flash\\\"/>\\n    <!--    <div class=\\\"mx-6\\\">-->\\n    <!--      <div class=\\\"alert alert-info\\\">-->\\n    <!--        <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"none\\\" viewBox=\\\"0 0 24 24\\\" class=\\\"stroke-current shrink-0 w-6 h-6\\\">-->\\n    <!--          <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" stroke-width=\\\"2\\\"-->\\n    <!--                d=\\\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\\\"></path>-->\\n    <!--        </svg>-->\\n    <!--        <span></span>-->\\n    <!--      </div>-->\\n    <!--    </div>-->\\n    <!--    <ul class=\\\"w-64 ml-12 my-8\\\">-->\\n    <!--      <li class=\\\"p-2 bg-green-800\\\">Scheduled Shows</li>-->\\n    <!--      <li class=\\\"p-2 bg-purple-800\\\">New Releases</li>-->\\n    <!--      <li class=\\\"p-2 bg-blue-800\\\">Live Events</li>-->\\n    <!--      <li class=\\\"p-2 bg-yellow-800\\\">News</li>-->\\n    <!--      &lt;!&ndash;            <li class=\\\"p-2\\\"><font-awesome-icon icon=\\\"fa-leaf\\\" class=\\\"text-red-600 text-3xl pr-2\\\"/> Canadian Content</li>&ndash;&gt;-->\\n    <!--      &lt;!&ndash;            <li class=\\\"p-2\\\"><font-awesome-icon icon=\\\"fa-flag-usa\\\" class=\\\"text-red-600 text-3xl pr-2\\\"/> American Content</li>&ndash;&gt;-->\\n\\n    <!--    </ul>-->\\n\\n    <div class=\\\"ml-5 px-2\\\">\\n      <span class=\\\"text-sm uppercase text-purple-500\\\">All times are listed in your timezone.</span>\\n    </div>\\n\\n    <!--    <div class=\\\"schedule-grid\\\">-->\\n    <!--      &lt;!&ndash; Header Row for Times &ndash;&gt;-->\\n    <!--      <div class=\\\"header-row\\\">-->\\n    <!--        <template v-for=\\\"(time, index) in nextFourHours\\\" :key=\\\"`header-${index}`\\\">-->\\n    <!--          <div class=\\\"schedule-cell\\\" :style=\\\"{ 'grid-column': index + 1 }\\\">{{ time.formatted }}</div>-->\\n    <!--        </template>-->\\n    <!--      </div>-->\\n\\n    <div class=\\\"schedule-grid\\\">\\n      <div class=\\\"header-row\\\">\\n        <!-- Time slots header -->\\n        <div class=\\\"time-cell bg-gray-900 px-3 py-2 text-center font-bold\\\" v-for=\\\"interval in nextFourHoursWithHalfHourIntervals\\\" :key=\\\"interval.dateTime\\\">\\n          {{ interval.formatted }}\\n        </div>\\n      </div>\\n\\n      <div class=\\\"content-row\\\">\\n        <!-- Scheduled shows -->\\n        <template v-for=\\\"item in nextFourHoursOfContent\\\" :key=\\\"item.id\\\">\\n          <div\\n              class=\\\"show-cell\\\"\\n              :class=\\\"getCellClasses(item.type)\\\"\\n              :style=\\\"gridPlacement(item.start_time, item.durationMinutes)\\\"\\n              @click=\\\"openModal(`goToNowPlayingModal`)\\\"\\n          >\\n            <div  class=\\\"item-content flex flex-col items-center justify-center gap-y-2\\\">\\n              <h3>{{ item.content.show?.name || 'No Show Name' }}</h3>\\n              <!-- Display the image if available -->\\n              <SingleImage v-if=\\\"item.content.show?.image\\\"\\n                           :image=\\\"item.content.show?.image\\\"\\n                           :alt=\\\"item.content.show?.name\\\"\\n                           class=\\\"content-image\\\"/>\\n              <!-- Fallback placeholder if no image -->\\n              <div v-else class=\\\"placeholder\\\"></div>\\n            </div>\\n          </div>\\n        </template>\\n      </div>\\n\\n      <!--      &lt;!&ndash; Content Row &ndash;&gt;-->\\n      <!--      <div class=\\\"content-row\\\">-->\\n      <!--        <div-->\\n      <!--            v-for=\\\"(item, index) in nextFourHoursOfContent\\\"-->\\n      <!--            :key=\\\"`content-${index}`\\\"-->\\n      <!--            :style=\\\"{ 'grid-column': item.gridColumn }\\\"-->\\n      <!--            class=\\\"item-cell\\\"-->\\n      <!--        >-->\\n      <!--          &lt;!&ndash; Calculate where the item should start and how many columns it should span &ndash;&gt;-->\\n      <!--          <div :style=\\\"{-->\\n      <!--                'grid-column': `${calculateStartColumn(item.start_time, timeSlots)} / span ${calculateSpan(item.start_time, item.durationMinutes, timeSlots)}`,-->\\n      <!--                }\\\">-->\\n      <!--            &lt;!&ndash; Content Here &ndash;&gt;-->\\n      <!--            &lt;!&ndash; Content Display Logic &ndash;&gt;-->\\n      <!--            <div class=\\\"item-content\\\">-->\\n      <!--              <h3>{{ item.content.show?.name || 'No Show Name' }}</h3>-->\\n      <!--              &lt;!&ndash; Display the image if available &ndash;&gt;-->\\n      <!--              <SingleImage v-if=\\\"item.content.show?.image\\\"-->\\n      <!--                           :image=\\\"item.content.show?.image\\\"-->\\n      <!--                           :alt=\\\"item.content.show?.name\\\"-->\\n      <!--                           class=\\\"content-image\\\" />-->\\n      <!--              &lt;!&ndash; Fallback placeholder if no image &ndash;&gt;-->\\n      <!--              <div v-else class=\\\"placeholder\\\"></div>-->\\n      <!--            </div>-->\\n      <!--          </div>-->\\n\\n      <!--        </div>-->\\n      <!--      </div>-->\\n\\n    </div>\\n\\n\\n<!--    <table class=\\\"table-fixed mx-5\\\">-->\\n<!--      <thead class=\\\"bg-gray-900\\\">-->\\n<!--      <tr class=\\\"border-b border-0.5 border-white\\\">-->\\n<!--        &lt;!&ndash; Loop for each hour, including its half-hour mark &ndash;&gt;-->\\n<!--        <template v-for=\\\"(time, index) in nextFourHours\\\" :key=\\\"index\\\">-->\\n<!--          &lt;!&ndash; Hour mark &ndash;&gt;-->\\n<!--          <th :class=\\\"getColumnVisibilityClass(index * 2)\\\">-->\\n<!--            {{ formatTime(new Date(time)) }}-->\\n<!--          </th>-->\\n<!--          &lt;!&ndash; Half-hour mark &ndash;&gt;-->\\n<!--          <th :class=\\\"getColumnVisibilityClass(index * 2 + 1)\\\">-->\\n<!--            {{ formatHalfHour(new Date(time)) }}-->\\n<!--          </th>-->\\n<!--        </template>-->\\n<!--      </tr>-->\\n<!--      </thead>-->\\n<!--      <tbody>-->\\n<!--      &lt;!&ndash; Loop through each content item &ndash;&gt;-->\\n<!--      <tr v-for=\\\"(item, index) in nextFourHoursOfContent\\\" :key=\\\"index\\\" class=\\\"border-b border-0.5 border-white\\\">-->\\n<!--        &lt;!&ndash; Calculate the colspan based on durationMinutes &ndash;&gt;-->\\n<!--        <td :colspan=\\\"calculateColspan(item.durationMinutes)\\\" @click=\\\"openModal(`goToNowPlayingModal`)\\\"-->\\n<!--            :class=\\\"getCellClasses(item.type)\\\">-->\\n<!--          <div class=\\\"flex flex-col\\\">-->\\n<!--            <span class=\\\"text-center pb-2\\\">{{ item.content.show?.name || 'No Show Name' }}</span>-->\\n<!--            &lt;!&ndash; Optionally display an image if available &ndash;&gt;-->\\n<!--            &lt;!&ndash;            <div v-if=\\\"content.show?.image\\\" class=\\\"w-full h-64\\\" :style=\\\"{ backgroundImage: `url(${content.show.image.cdn_endpoint}${content.show.image.folder}/${content.show.image.name})`, backgroundSize: 'cover' }\\\"></div>&ndash;&gt;-->\\n<!--            <SingleImage v-if=\\\"item.type === 'show'\\\" :image=\\\"item?.content?.show?.image\\\"-->\\n<!--                         :alt=\\\"item?.content?.show?.name\\\" :class=\\\"`max-w-full h-auto object-cover`\\\"/>-->\\n<!--            <SingleImage v-else :image=\\\"item?.content?.image\\\" :alt=\\\"item?.content?.name\\\"-->\\n<!--                         :class=\\\"`max-w-xs h-auto object-cover`\\\"/>-->\\n<!--            &lt;!&ndash; Placeholder if no image is available &ndash;&gt;-->\\n<!--            <div v-else class=\\\"w-full h-64 bg-gray-400\\\"></div>-->\\n<!--          </div>-->\\n<!--        </td>-->\\n<!--      </tr>-->\\n<!--      </tbody>-->\\n\\n<!--    </table>-->\\n\\n    <PopUpModal :id=\\\"`goToNowPlayingModal`\\\">\\n      <template v-slot:header>Now Playing</template>\\n      <template v-slot:main><span class=\\\"text-orange-500\\\">This modal is temporary. This will take you to the now playing show or episode page.</span>\\n      </template>\\n    </PopUpModal>\\n    <PopUpModal :id=\\\"`getReminderModal`\\\">\\n      <template v-slot:header>Set Reminder</template>\\n      <template v-slot:main><span class=\\\"text-orange-500\\\">This modal is temporary. Set a reminder when this show starts and/or subscribe to the show to get all notifications when new episodes are released or the show goes live.</span>\\n      </template>\\n    </PopUpModal>\\n\\n    <div class=\\\"bg-gray-600 rounded-lg shadow m-10 p-4\\\">\\n\\n\\n      <TodayView/>\\n    </div>\\n\\n\\n  </div>\\n</template>\\n\\n<script setup>\\nimport { usePageSetup } from '@/Utilities/PageSetup'\\nimport { useAppSettingStore } from '@/Stores/AppSettingStore'\\nimport { useScheduleStore } from '@/Stores/ScheduleStore'\\nimport Message from '@/Components/Global/Modals/Messages'\\nimport PopUpModal from '@/Components/Global/Modals/PopUpModal'\\nimport TodayView from '@/Components/Global/Calendar/TodayView.vue'\\nimport { computed } from 'vue'\\nimport SingleImage from '@/Components/Global/Multimedia/SingleImage.vue'\\nimport dayjs from 'dayjs'\\n\\nusePageSetup('schedule')\\n\\nconst appSettingStore = useAppSettingStore()\\nconst scheduleStore = useScheduleStore()\\n\\nlet props = defineProps({\\n  can: Object,\\n})\\n\\n// Computed property to ensure reactivity\\nconst nextFourHours = computed(() => scheduleStore.nextFourHoursWithHalfHourIntervals)\\nconst nextFourHoursOfContent = computed(() => scheduleStore.nextFourHoursOfContent)\\nconst nextFourHoursWithHalfHourIntervals = computed(() => scheduleStore.nextFourHoursWithHalfHourIntervals)\\nconst timeIntervals = computed(() => scheduleStore.nextFourHoursWithHalfHourIntervals)\\nconst shows = computed(() => scheduleStore.nextFourHoursOfContent)\\n\\nconst gridPlacement = (startTime, durationMinutes) => {\\n  // Convert startTime to a comparable format if necessary\\n  const startDateTime = new Date(startTime)\\n  const timeSlots = nextFourHoursWithHalfHourIntervals.value.map(interval => new Date(interval.dateTimeString))\\n\\n  // Find the index of the time slot that matches the item's start time\\n  let startColumn = timeSlots.findIndex(slot => startDateTime >= slot && startDateTime < new Date(slot.getTime() + 30 * 60000))\\n  if (startColumn === -1) {\\n    console.error('Start time does not match any interval:', startTime)\\n    return {} // Fallback or error handling\\n  }\\n\\n  // Adjust startColumn for 1-based indexing in CSS Grid\\n  startColumn += 1\\n\\n  // Calculate span based on duration\\n  const span = Math.ceil(durationMinutes / 30)\\n\\n  // Return CSS style object for grid placement\\n  return {\\n    'gridColumn': `${startColumn} / span ${span}`,\\n  }\\n}\\n\\n\\n// const nextFourHoursOfContent = computed(() => {\\n//   return scheduleStore.nextFourHoursOfContent.map(item => {\\n//     const { startColumn, span } = calculateGridPlacement(item.start_time, item.durationMinutes, nextFourHours.value);\\n//     // Adjust startColumn for CSS Grid (1-indexed)\\n//     const gridColumnStart = startColumn + 1;\\n//     item.gridColumn = `${gridColumnStart} / span ${span}`;\\n//     return item;\\n//   });\\n// });\\n\\n// console.log(nextFourHoursOfContent.value);\\nconst timeSlots = computed(() => {\\n  // Assuming nextFourHoursWithHalfHourIntervals is a reactive source\\n  return nextFourHoursOfContent.value.map(slot => new Date(slot))\\n})\\n//\\n// console.log(timeSlots.value);\\n\\nfunction calculateStartColumn(startTime, timeSlots) {\\n  // Convert startTime to a Date object for comparison\\n  const startDateTime = new Date(startTime)\\n  // Find the first time slot that matches or exceeds the startDateTime\\n  const columnIndex = timeSlots.findIndex(timeSlot => {\\n    const timeSlotDate = new Date(timeSlot)\\n    return startDateTime.getTime() <= timeSlotDate.getTime()\\n  })\\n  // Return the column index + 1 (CSS grid lines start at 1, not 0)\\n  return columnIndex + 1\\n}\\n\\nfunction calculateSpan(startTime, durationMinutes, timeSlots) {\\n  const startDateTime = new Date(startTime)\\n  const endDateTime = new Date(startDateTime.getTime() + durationMinutes * 60000) // Convert duration to milliseconds and add\\n\\n  let startIndex = -1\\n  let endIndex = -1\\n\\n  // Loop through timeSlots to find start and end indexes\\n  for (let i = 0; i < timeSlots.length; i++) {\\n    const slot = new Date(timeSlots[i])\\n    if (startIndex === -1 && startDateTime <= slot) {\\n      startIndex = i\\n    }\\n    if (endDateTime <= slot) {\\n      endIndex = i\\n      break\\n    }\\n  }\\n\\n  // If the end index was not found, it means the event lasts beyond the last time slot\\n  if (endIndex === -1) {\\n    endIndex = timeSlots.length\\n  }\\n\\n  // The span is the difference between the end and start indexes\\n  return endIndex - startIndex\\n}\\n\\nconst timeStringToMinutes = (timeStr) => {\\n  const [hour, minute] = timeStr.match(/\\\\d+/g)\\n  return parseInt(hour) * 60 + parseInt(minute)\\n}\\n\\n// const calculateGridPlacement = (showStartTime, showDuration, timeIntervals) => {\\n//   // Convert the show start time and intervals to minutes for comparison\\n//   const showStartMinutes = timeStringToMinutes(showStartTime);\\n//   const intervalStartMinutes = timeIntervals.map(interval => timeStringToMinutes(interval));\\n//\\n//   // Find the starting column by finding the closest interval start time\\n//   let startColumn = intervalStartMinutes.findIndex(time => time >= showStartMinutes);\\n//   startColumn = startColumn === -1 ? timeIntervals.length - 1 : startColumn; // Fallback to the last column if not found\\n//\\n//   // Calculate span based on duration (rounded up to cover partial intervals)\\n//   const span = Math.ceil(showDuration / 30);\\n//\\n//   return { startColumn, span };\\n// };\\n\\n// Sample usage\\n// const timeIntervals = [\\\"05:00 PM\\\", \\\"05:30 PM\\\", \\\"06:00 PM\\\", \\\"06:30 PM\\\", \\\"07:00 PM\\\", \\\"07:30 PM\\\", \\\"08:00 PM\\\", \\\"08:30 PM\\\"];\\n// const showStartTime = \\\"17:00\\\"; // \\\"05:00 PM\\\"\\n// const showDuration = 60; // 60 minutes\\n\\n// const { startColumn, span } = calculateGridPlacement(showStartTime, showDuration, timeIntervals);\\n\\n// shows.value.forEach(show => {\\n//   const { startColumn, span } = calculateGridPlacement(show.start_time, show.durationMinutes, timeIntervals.value);\\n//   // Apply the calculated start column and span to your grid layout logic\\n// });\\n//\\n// function calculateGridPlacement(showStartTime, showDuration, timeIntervals) {\\n//   // Convert showStartTime to the user's timezone and format for comparison\\n//   const showStartInUserTZ = userStore.convertUtcToUserTimezone(showStartTime);\\n//\\n//   // Find the index of the interval that matches the show's start time\\n//   const startColumn = timeIntervals.findIndex(interval => showStartInUserTZ === interval.dateTimeString);\\n//\\n//   // Calculate how many 30-minute intervals the show spans\\n//   const intervals = Math.ceil(showDuration / 30);\\n//\\n//   if (startColumn === -1) {\\n//     console.error('Start time does not match any interval:', showStartInUserTZ);\\n//     // Handle the error case appropriately\\n//     return { startColumn: 1, span: intervals }; // Default or error handling\\n//   }\\n//\\n//   const span = startColumn + intervals > timeIntervals.length ? timeIntervals.length - startColumn : intervals;\\n//\\n//   return { startColumn: startColumn + 1, span }; // +1 for CSS grid's 1-based indexing\\n// }\\n\\n\\n// This function assumes that `showStartTime` is already in the same format as your time intervals.\\n// If not, you may need to implement a conversion function to align the time formats.\\n\\nfunction convertTo24HourFormat(time) {\\n  // Assume input is \\\"HH:MM PM/AM\\\" and convert to 24-hour format \\\"HH:MM\\\"\\n  // This is a placeholder for actual conversion logic\\n  return time\\n}\\n\\n\\n// function calculateGridColumn(startTime, durationMinutes, timeSlots) {\\n//   // Find the index of the slot that matches the item's start time\\n//   const startSlotIndex = timeSlots.value.findIndex(timeSlot =>\\n//       new Date(startTime) >= new Date(timeSlot) &&\\n//       new Date(startTime) < new Date(new Date(timeSlot).getTime() + 30 * 60000)\\n//   ) + 1; // Grid lines start at 1\\n// }\\n//   function calculateSpan(startTime, durationMinutes) {\\n//     if (!timeSlots.value || timeSlots.value.length === 0) {\\n//       console.error('timeSlots is not defined or empty');\\n//       return 0; // or some fallback value\\n//     }\\n//\\n//     // Now safe to use timeSlots.value.findIndex\\n//     const startIndex = timeSlots.value.findIndex(/* your logic here */);\\n//     // Further logic...\\n//   }\\n\\n\\n// Example processing of schedule into grid items\\n// const processedSchedule = computed(() => {\\n//   return shows.map(show => {\\n//     const startCol = calculateStartColumn(show.startTime);\\n//     const span = calculateSpan(show.duration, show.startTime);\\n//\\n//     return {\\n//       ...show,\\n//       startCol,\\n//       span,\\n//     };\\n//   }).sort((a, b) => a.priority - b.priority); // Ensure sorting by priority\\n// });\\n\\n// const calculateStartColumn = (startTime) => {\\n//   const showStart = new Date(startTime);\\n//   const gridStart = new Date(nextFourHours.value[0]);\\n//\\n//   // Calculate start column based on half-hour increments from gridStart\\n//   const diffHours = (showStart - gridStart) / (1000 * 60 * 60);\\n//   return Math.ceil(diffHours * 2) + 1; // +1 because CSS Grid lines start at 1\\n// };\\n//\\n// const calculateSpan = (durationMinutes) => {\\n//   return Math.ceil(durationMinutes / 30); // Span based on 30-minute intervals\\n// };\\n\\n// const calculateStartColumn = (startTime) => {\\n//   const showStart = new Date(startTime);\\n//   const gridStart = nextFourHours[0];\\n//\\n//   // Find the index of the time slot that matches or immediately precedes the show's start time\\n//   const columnIndex = nextFourHours.findIndex(time => showStart < time) - 1;\\n//   console.log('BAHH ' + columnIndex);\\n//\\n//   return columnIndex >= 0 ? columnIndex + 1 : 1; // Ensure it falls within the grid columns\\n// };\\n//\\n// const calculateSpan = (startTime, durationMinutes) => {\\n//   const startColumn = calculateStartColumn(startTime);\\n//   const span = Math.ceil(durationMinutes / 30); // Determine span based on duration\\n//\\n//   // Adjust the span to ensure it doesn't extend beyond the grid\\n//   return startColumn + span - 1 <= 8 ? span : 8 - startColumn + 1;\\n// };\\n\\nconst getItemStyle = (item) => {\\n  const startColumn = calculateStartColumn(item.start_time)\\n  const span = calculateSpan(item.durationMinutes)\\n\\n  return {\\n    gridColumnStart: startColumn,\\n    gridColumnEnd: `span ${span}`,\\n    gridRowStart: 2, // All items start in the second row\\n  }\\n}\\n\\n// Method to format the full hour\\nfunction formatTime(date) {\\n  return date.toLocaleTimeString('en-US', {hour: 'numeric', minute: '2-digit', hour12: true})\\n}\\n\\n// Method to add 30 minutes to the given date and format it\\nfunction formatHalfHour(date) {\\n  const halfHourLater = new Date(date.getTime() + 30 * 60 * 1000)\\n  return halfHourLater.toLocaleTimeString('en-US', {hour: 'numeric', minute: '2-digit', hour12: true})\\n}\\n\\n// Determine visibility classes based on column index and if it's a half-hour\\nfunction getColumnVisibilityClass(index, isHalfHour) {\\n  // Adjust index for half-hour columns\\n  const adjustedIndex = isHalfHour ? index * 2 + 1 : index * 2\\n\\n  if (adjustedIndex >= 6) { // Last two columns visible only on 2xl screens\\n    return 'hidden 2xl:table-cell'\\n  } else if (adjustedIndex >= 3) { // Columns 4, 5, 6 visible on xl screens and above\\n    return 'hidden xl:table-cell'\\n  } else { // Columns 1, 2, 3 are always visible\\n    return ''\\n  }\\n}\\n\\nfunction calculateColspan(durationMinutes) {\\n  // Assuming each hour (and its half-hour mark) is represented by two columns\\n  // and that each content item's duration in minutes can determine its span\\n  return Math.ceil(durationMinutes / 30)\\n}\\n\\nfunction getCellClasses(type) {\\n  const baseClass = 'column-width text-sm 2xl:text-md border border-0.5 border-green-300 hover:border-blue-500 cursor-pointer'\\n  switch (type) {\\n    case 'show':\\n      return `${baseClass} bg-gradient-show hover:bg-gradient-show-hover`\\n    case 'new_release':\\n      return `${baseClass} bg-gradient-new-release hover:bg-gradient-new-release-hover`\\n      // Add more cases as needed\\n    default:\\n      return baseClass\\n  }\\n}\\n\\nfunction openModal(modalName) {\\n  document.getElementById(modalName).showModal()\\n}\\n\\n// Example test call\\n// console.log(calculateGridColumn('2024-04-09 13:00:00', 90, nextFourHours.value));\\n\\n\\n</script>\\n\\n<style scoped>\\n\\n.bg-gradient-show {\\n  background: linear-gradient(to right, #1f4037, #99f2c8); /* Example green gradient */\\n}\\n\\n.bg-gradient-show-hover:hover {\\n  background: linear-gradient(to right, #66D3FA, #6E45E2); /* Example green gradient on hover */\\n}\\n\\n.bg-gradient-new-release {\\n  background: linear-gradient(to right, #654ea3, #eaafc8); /* Example purple gradient */\\n}\\n\\n.bg-gradient-new-release-hover:hover {\\n  background: linear-gradient(to right, #c2e59c, #64b3f4); /* Example purple gradient on hover */\\n}\\n\\n\\n.column-width {\\n  @apply w-16\\n}\\n\\n\\n.schedule-item {\\n  background: #f0f0f0;\\n  color: #000;\\n  padding: 10px;\\n  display: flex;\\n  flex-direction: column;\\n  gap: 10px;\\n  align-items: center;\\n}\\n\\n.time-slot {\\n  text-align: center;\\n  padding: 10px 0;\\n  border-bottom: 1px solid #fff;\\n  grid-row: 1; /* Ensures all time slots are in the first row */\\n}\\n\\n.time-cell {\\n  border: 1px solid #fff;\\n}\\n\\n.content {\\n  background: #f0f0f0;\\n  padding: 8px;\\n  border: 1px solid #ddd;\\n}\\n\\n.placeholder {\\n  background: #ccc;\\n  width: 100%;\\n  height: 60px;\\n}\\n\\n\\n.schedule-grid {\\n  display: grid;\\n  grid-template-columns: repeat(8, 1fr); /* Adjust based on your actual time slots */\\n\\n}\\n\\n.header-row, .content-row {\\n  display: contents; /* Make these divs act as part of the grid layout without creating extra rows */\\n  width: 100%; /* Ensure they span the full width of the grid */\\n}\\n\\n.schedule-cell {\\n  background: #333;\\n  color: #fff;\\n  text-align: center;\\n  padding: 8px;\\n}\\n\\n.item-content {\\n  padding: 8px;\\n  background: linear-gradient(to right, rgba(68, 68, 68, 0.9), rgba(68, 68, 68, 0.7));\\n}\\n\\n.content-image {\\n  width: 100%;\\n  height: auto;\\n  object-fit: cover;\\n}\\n\\n/* Responsive visibility */\\n@media (min-width: 1280px) {\\n  /* 2xl */\\n  .xl\\\\:hidden {\\n    display: none;\\n  }\\n}\\n\\n@media (min-width: 1024px) {\\n  /* xl */\\n  .lg\\\\:hidden {\\n    display: none;\\n  }\\n}\\n\\n</style>\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","<template>\n  <!-- Today view layout -->\n  <div class=\"today-view container mx-auto px-4 py-8 flex flex-col\">\n    <div id=\"topDivForTodayView\"></div>\n    <button  v-if=\"!scheduleStore.isToday\"\n             @click=\"scheduleStore.setSelectedDayToToday(new Date());\"\n             class=\"py-1 px-2 text-white rounded-lg w-fit\"\n             :class=\"{'bg-blue-300': scheduleStore.isToday, 'bg-green-600 hover:bg-green-700': !scheduleStore.isToday}\">\n      Go To Now</button>\n    <div class=\"flex justify-center text-center mb-4\">\n      <h2 class=\"text-3xl font-bold mb-2\">{{ dateMessage }}</h2>\n    </div>\n    <div class=\"flex justify-between items-center mb-4\">\n      <button\n          @click=\"scheduleStore.changeDay(-1)\"\n          class=\"bg-gray-100 hover:bg-gray-200 text-black p-2 rounded shadow\"\n      >\n        &lt; Previous Day\n      </button>\n      <div class=\"flex flex-col text-center\">\n\n        <h3>{{ userStore.canadianTimezoneDescription }} Time</h3>\n      </div>\n      <button\n          @click=\"scheduleStore.changeDay(1)\"\n          class=\"bg-gray-100 hover:bg-gray-200 text-black p-2 rounded shadow\"\n      >\n        Next Day &gt;\n      </button>\n    </div>\n    <button\n        @click=\"scheduleStore.shiftHours(-6)\"\n        class=\"mb-4 bg-gray-100 hover:bg-gray-200 text-black py-2 rounded shadow\"\n    >\n      &#8593; Back 6 Hours\n    </button>\n\n    <div class=\"flex flex-col flex-grow\">\n      <div v-for=\"(hour, index) in scheduleStore.nextSixHours\" :key=\"hour.toString()\">\n\n        <!-- Time Segment Label -->\n        <div\n            v-if=\"index === 0 || getTimeSegment(hour).segment !== getTimeSegment(scheduleStore.nextSixHours[index - 1]).segment\"\n            :class=\"getTimeSegment(hour).color\"\n            class=\"mb-4 p-2 text-black text-center font-bold text-2xl rounded shadow\">\n          {{ getTimeSegment(hour).segment }}\n        </div>\n\n        <!-- Content for the current hour -->\n        <template v-for=\"item in upcomingContent\">\n          <div v-if=\"isWithinCurrentHour(item, hour)\" :key=\"item.id\"\n               :class=\"['p-4 rounded-lg shadow', getTimeSegment(new Date(item.start_time)).color, 'mb-4']\">\n            <div class=\"flex flex-row flex-wrap gap-x-4 gap-y-2\">\n              <div class=\"flex flex-col w-28 max-w-28 text-gray-500\">\n                <div class=\"font-bold text-black break-words\">{{\n                    formatHour(new Date(item.start_time))\n                  }}&nbsp;{{ userStore.timezoneAbbreviation }}\n                </div>\n                <div class=\"break-words\">{{ formatDuration(item.durationMinutes) }}</div>\n              </div>\n              <div class=\"flex flex-col\">\n                <button @click.prevent=\"goToContentPage(item)\">\n                  <SingleImage v-if=\"item.type === 'show'\" :image=\"item?.content?.show?.image\"\n                               :alt=\"item?.content?.show?.name\" class=\"w-20 h-20\"/>\n                  <SingleImage v-else :image=\"item?.content?.image\" :alt=\"item?.content?.name\" class=\"w-20 h-20\"/>\n                </button>\n              </div>\n              <div class=\"flex flex-col items-start h-full\">\n                <div class=\"text-gray-800 text-2xl tracking-wider\">\n                  <button @click.prevent=\"goToContentPage(item)\" class=\"text-left\">\n                    <span v-if=\"item.type === 'show'\">{{ item?.content?.show?.name }}</span>\n                    <span v-if=\"item.type === 'movie'\">{{ item?.content?.name }}</span>\n                  </button>\n                </div>\n                <div class=\"mt-2 text-gray-700 flex flex-wrap gap-1\">\n                    <div class=\"w-fit text-xs font-semibold uppercase tracking-wide bg-gray-900 px-2 py-1 rounded\">\n                      <span v-if=\"item.type === 'show'\" class=\"text-green-500\">show</span>\n                      <span v-if=\"item.type === 'movie'\"\n                            class=\"text-pink-500 bg-gray-900 px-2 py-1\">movie</span>\n                    </div>\n                    <div v-if=\"item?.content?.show?.category?.name || item?.content?.category?.name\"\n                         class=\"w-fit text-xs font-semibold uppercase tracking-wider text-yellow-600 bg-gray-900 px-2 py-1 rounded\">\n                    <span v-if=\"item.type === 'show' && item?.content?.show?.category?.name\"\n                          class=\"\">{{ item?.content?.show?.category?.name }}</span>\n                      <span v-if=\"item.type === 'movie' && item?.content?.subCategory?.name\"\n                            class=\"\">{{ item?.content?.category?.name }}</span>\n                    </div>\n                    <div v-if=\"item?.content?.show?.subCategory?.name || item?.content?.subCategory?.name\"\n                         class=\"w-fit text-xs font-semibold tracking-wide text-yellow-500 bg-gray-900 px-2 py-1 rounded\">\n                      <span v-if=\"item.type === 'show'\" class=\"\">{{ item?.content?.show?.subCategory?.name }}</span>\n                      <span v-if=\"item.type === 'movie'\" class=\"\">{{ item?.content?.subCategory?.name }}</span>\n                    </div>\n                  </div>\n              </div>\n            </div>\n          </div>\n        </template>\n\n\n        <!-- Fallback if no content is found for the current hour -->\n        <div v-if=\"!isContentAvailableForHour(hour)\" :class=\"getTimeSegment(hour).color\"\n             class=\"mb-4 p-4 rounded-lg shadow text-gray-500\">\n          <div class=\"font-semibold\">{{ formatHour(hour) }}&nbsp;{{ userStore.timezoneAbbreviation }}</div>\n          <div>Nothing scheduled.</div>\n        </div>\n\n        <!-- Dynamically insert the dateMessage for the next day if the hour is 11 PM -->\n        <div v-if=\"scheduleStore.isElevenPM(hour) && scheduleStore.nextSixHours[index + 1]\"\n             class=\"my-4 p-2 bg-blue-800 text-white rounded shadow\">\n          {{ generateDateMessage(addHours(hour, 1)) }}\n        </div>\n      </div>\n    </div>\n\n    <button\n        @click=\"shiftHours(6)\"\n        class=\"bg-gray-100 hover:bg-gray-200 text-black py-2 rounded shadow\"\n    >\n      &#8595; Forward 6 Hours\n    </button>\n  </div>\n</template>\n\n<script setup>\n// Today view logic\n// import { ref, computed } from 'vue'\nimport { useScheduleStore } from '@/Stores/ScheduleStore'\nimport { useUserStore } from '@/Stores/UserStore'\nimport {\n  format,\n  startOfHour,\n  addHours,\n  isToday,\n  isYesterday,\n  isTomorrow,\n  startOfDay,\n  isWithinInterval,\n  isSameDay,\n} from 'date-fns'\nimport { storeToRefs } from 'pinia'\nimport { computed, onMounted, ref, watch, watchEffect } from 'vue'\nimport SingleImage from '@/Components/Global/Multimedia/SingleImage.vue'\nimport { Inertia } from '@inertiajs/inertia'\n\nconst scheduleStore = useScheduleStore()\nconst userStore = useUserStore()\nconst {upcomingContent, dateMessage} = storeToRefs(scheduleStore)\n\nconst selectedDay = ref(scheduleStore.selectedDay)\nconst weeklyContent = computed(() => scheduleStore.weeklyContent)\n\nconst shiftHours = async(hours) => {\n  const topDiv = document.getElementById(\"topDivForTodayView\");\n  topDiv.scrollIntoView({behavior: 'smooth'});\n  await scheduleStore.shiftHours(hours)\n}\n\nwatch(selectedDay, (newValue) => {\n  scheduleStore.setSelectedDay(newValue)\n  // If necessary, trigger other actions when selectedDay changes\n})\n\nfunction isWithinCurrentHour(item, hour) {\n  const startOfCurrentHour = startOfHour(hour)\n  const endOfCurrentHour = addHours(startOfCurrentHour, 1)\n  const contentStartTime = new Date(item.start_time)\n  return contentStartTime >= startOfCurrentHour && contentStartTime < endOfCurrentHour\n}\n\n// Assuming `upcomingContent` is a computed property that already filters\n// content within a 6-hour window from `scheduleStore.viewingWindowStart`\nfunction isContentAvailableForHour(hour) {\n  // Convert the given hour to the start and end of that hour block\n  const startOfCurrentHour = startOfHour(hour)\n  const endOfCurrentHour = addHours(startOfCurrentHour, 1)\n\n  // Check if any item in `upcomingContent` starts within this hour block\n  return upcomingContent.value.some(item => {\n    const contentStartTime = new Date(item.start_time)\n    return contentStartTime >= startOfCurrentHour && contentStartTime < endOfCurrentHour\n  })\n}\n\nfunction formatHour(date) {\n  return format(date, 'h:mm aaaa')\n}\n\nfunction getTimeSegment(hour) {\n  const hourOfDay = hour.getHours()\n  if (hourOfDay >= 4 && hourOfDay < 6) return {segment: 'Early Morning', color: 'bg-gray-200'}\n  if (hourOfDay >= 6 && hourOfDay < 12) return {segment: 'Morning', color: 'bg-yellow-200'}\n  if (hourOfDay >= 12 && hourOfDay < 17) return {segment: 'Afternoon', color: 'bg-green-200'}\n  if (hourOfDay >= 17 && hourOfDay < 20) return {segment: 'Prime Time', color: 'bg-red-200'}\n  if (hourOfDay >= 20 && hourOfDay < 23) return {segment: 'Late Prime Time', color: 'bg-purple-200'}\n  if (hourOfDay >= 23 || hourOfDay < 1) return {segment: 'Late Night', color: 'bg-blue-200'}\n  if (hourOfDay >= 1 && hourOfDay < 4) return {segment: 'Overnight', color: 'bg-indigo-200'}\n  return {segment: '', color: ''} // Default case\n}\n\n// A computed property to determine the starting segment for the displayed hours\nconst startingSegment = computed(() => scheduleStore.nextSixHours.value.length > 0 ? getTimeSegment(scheduleStore.nextSixHours.value[0]) : null)\n\nfunction generateDateMessage(date) {\n  // This method mirrors the logic in the store's getter but accepts any date.\n  const startDay = startOfDay(date)\n  const formattedDate = format(startDay, 'EEEE, MMMM do')\n  if (isToday(startDay)) {\n    return `Today - ${formattedDate}`\n  } else if (isYesterday(startDay)) {\n    return `Yesterday - ${formattedDate}`\n  } else if (isTomorrow(startDay)) {\n    return `Tomorrow - ${formattedDate}`\n  } else {\n    return formattedDate\n  }\n}\n\nconst goToContentPage = (item) => {\n  if (item.type === 'show') {\n    Inertia.visit(`/shows/${item.content.show.slug}`)\n  } else if (item.type === 'movie') {\n    Inertia.visit(`/movies/${item.content.slug}`)\n  }\n}\n\nconst formatDuration = (minutes) => {\n  if (minutes < 60) {\n    return `${minutes} minutes`\n  } else if (minutes === 60) {\n    return `1 hour`\n  } else {\n    const hours = Math.floor(minutes / 60)\n    const remainingMinutes = minutes % 60\n    if (remainingMinutes === 0) {\n      return `${hours} hours`\n    } else {\n      return `${hours} hour${hours > 1 ? 's' : ''} and ${remainingMinutes} minutes`\n    }\n  }\n}\n\n\n// Define a reactive watcher on the timezone\n// This watcher will call preloadWeeklyContent whenever the timezone changes and is not null\nwatch(\n    () => userStore.timezone,\n    async (newTimezone, oldTimezone) => {\n      // Ensure the timezone is set before calling preloadWeeklyContent\n      if (newTimezone) {\n        await scheduleStore.preloadWeeklyContent()\n      }\n    },\n    {immediate: true}, // This option ensures the watcher is triggered immediately on mount\n)\n\n// Optionally, keep the onMounted if there are other initialization tasks\n// onMounted(async () => {\n//   // Check if timezone is already available on mount and preload content if it hasn't been done by the watcher\n//   if (userStore.timezone) {\n//     await scheduleStore.preloadWeeklyContent()\n//   }\n// })\n</script>\n\n<style scoped>\n/* Styles specific to today view */\n</style>","import api from \"!../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../../../node_modules/css-loader/dist/cjs.js??clonedRuleSet-9.use[1]!../../../../../node_modules/vue-loader/dist/stylePostLoader.js!../../../../../node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-9.use[2]!../../../../../node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./TodayView.vue?vue&type=style&index=0&id=9274275c&scoped=true&lang=css\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","import script from \"./TodayView.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./TodayView.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./TodayView.vue?vue&type=style&index=0&id=9274275c&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-9274275c\"]])\n\nexport default __exports__","import script from \"./Messages.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Messages.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n  <div class=\"mx-4 my-4\">\n    <div class=\"alert alert-info mt-4\"\n         v-if=\"props.flash.message\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" class=\"stroke-current shrink-0 w-6 h-6\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n              d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"></path>\n      </svg>\n      <span>{{ props.flash.message }}</span>\n      <button class=\"text-xs ml-12\" @click=\"clearFlashMessage\"> Close</button>\n    </div>\n    <div class=\"alert alert-success mt-4 mx-3\"\n         v-if=\"props.flash.success\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"stroke-current shrink-0 h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n              d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"/>\n      </svg>\n      <span>{{ props.flash.success }}</span>\n      <button class=\"text-xs ml-12\" @click=\"clearFlashMessage\"> Close</button>\n    </div>\n    <div class=\"alert alert-warning mt-4 mx-3\"\n         v-if=\"props.flash.warning\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"stroke-current shrink-0 h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n              d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z\"/>\n      </svg>\n      <span>{{ props.flash.warning }}</span>\n      <button class=\"text-xs ml-12\" @click=\"clearFlashMessage\"> Close</button>\n    </div>\n    <div class=\"alert alert-error mt-4 mx-3\"\n         v-if=\"props.flash.error\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"stroke-current shrink-0 h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n              d=\"M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z\"/>\n      </svg>\n      <span>{{ props.flash.error }}</span>\n      <button class=\"text-xs ml-12\" @click=\"clearFlashMessage\"> Close</button>\n    </div>\n  </div>\n\n</template>\n\n<script setup>\nimport { Inertia } from \"@inertiajs/inertia\"\nimport { computed } from \"vue\"\nimport { useAppSettingStore } from \"@/Stores/AppSettingStore\"\n\nconst appSettingStore = useAppSettingStore()\n\nappSettingStore.showFlashMessage = true\n\nlet props = defineProps({\n  flash: Object,\n\n})\n\nconst messageType = computed(() => ({\n  'text-green-700 bg-green-100 dark:bg-green-200 dark:text-green-800': props.flash.success,\n  'text-blue-700 bg-blue-100 dark:bg-blue-200 dark:text-blue-800': props.flash.message,\n  'text-orange-700 bg-orange-100 dark:bg-orange-200 dark:text-orange-800': props.flash.warning,\n  'text-red-700 bg-red-100 dark:bg-red-200 dark:text-red-800': props.flash.error,\n}))\n\nconst clearFlashMessage = async () => {\n  await Inertia.post(route('flash.clear'));\n  Inertia.reload();\n};\n</script>\n","import script from \"./PopUpModal.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./PopUpModal.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n  <div>\n    <dialog :id=\"id\" class=\"modal\">\n      <div class=\"modal-box text-center my-auto border-2 border-secondary\" data-theme=\"dark\">\n        <h2 class=\"font-bold text-3xl text-secondary\">\n          <slot name=\"header\"></slot>\n        </h2>\n        <p class=\"py-4 text-xl\">\n          <slot name=\"main\"></slot>\n        </p>\n        <div class=\"modal-action justify-center w-full\">\n          <form method=\"dialog\">\n            <!-- if there is a button in form, it will close the modal -->\n            <button @click=\"notificationStore.showPopUpModal = false\" class=\"btn btn-secondary\">Okay</button>\n          </form>\n        </div>\n      </div>\n    </dialog>\n  </div>\n</template>\n<script setup>\nimport { useNotificationStore } from \"@/Stores/NotificationStore\"\n\nconst notificationStore = useNotificationStore()\n\ndefineProps({\n  id: String,\n})\n</script>\n","<script>\n\n// DELETE THIS SCRIPT TAG\n// This is only for notes about building this page.\n\n// The schedule page will allow free users to look back 72 hours and look ahead 72 hours.\n// On a mobile device it's easy enough to create a forever scroll for looking forward.\n// The easter egg will be scrolling UP to look back at the past 72 hours.\n// Free users can watch any of the content in the past 72 hours for free.\n// Users are given credits each month to watch premium notTV content.\n// They may purchase more credits, or subscribe for unlimited access.\n// They may also use credits to purchase licenses to content from creators.\n// Credits may also be spent in the shop.\n\n</script>\n\n<template>\n  <Head title=\"Schedule\"/>\n\n  <div class=\"place-self-center flex flex-col gap-y-3 w-full overscroll-x-none pb-64\">\n    <div id=\"topDiv\" class=\"flex justify-end px-5\">\n      <div class=\"text-3xl font-semibold pt-4\">Schedule</div>\n    </div>\n    <Message v-if=\"appSettingStore.showFlashMessage\" :flash=\"$page.props.flash\"/>\n    <!--    <div class=\"mx-6\">-->\n    <!--      <div class=\"alert alert-info\">-->\n    <!--        <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" class=\"stroke-current shrink-0 w-6 h-6\">-->\n    <!--          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"-->\n    <!--                d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"></path>-->\n    <!--        </svg>-->\n    <!--        <span></span>-->\n    <!--      </div>-->\n    <!--    </div>-->\n    <!--    <ul class=\"w-64 ml-12 my-8\">-->\n    <!--      <li class=\"p-2 bg-green-800\">Scheduled Shows</li>-->\n    <!--      <li class=\"p-2 bg-purple-800\">New Releases</li>-->\n    <!--      <li class=\"p-2 bg-blue-800\">Live Events</li>-->\n    <!--      <li class=\"p-2 bg-yellow-800\">News</li>-->\n    <!--      &lt;!&ndash;            <li class=\"p-2\"><font-awesome-icon icon=\"fa-leaf\" class=\"text-red-600 text-3xl pr-2\"/> Canadian Content</li>&ndash;&gt;-->\n    <!--      &lt;!&ndash;            <li class=\"p-2\"><font-awesome-icon icon=\"fa-flag-usa\" class=\"text-red-600 text-3xl pr-2\"/> American Content</li>&ndash;&gt;-->\n\n    <!--    </ul>-->\n\n    <div class=\"ml-5 px-2\">\n      <span class=\"text-sm uppercase text-purple-500\">All times are listed in your timezone.</span>\n    </div>\n\n    <!--    <div class=\"schedule-grid\">-->\n    <!--      &lt;!&ndash; Header Row for Times &ndash;&gt;-->\n    <!--      <div class=\"header-row\">-->\n    <!--        <template v-for=\"(time, index) in nextFourHours\" :key=\"`header-${index}`\">-->\n    <!--          <div class=\"schedule-cell\" :style=\"{ 'grid-column': index + 1 }\">{{ time.formatted }}</div>-->\n    <!--        </template>-->\n    <!--      </div>-->\n\n    <div class=\"schedule-grid\">\n      <div class=\"header-row\">\n        <!-- Time slots header -->\n        <div class=\"time-cell bg-gray-900 px-3 py-2 text-center font-bold\" v-for=\"interval in nextFourHoursWithHalfHourIntervals\" :key=\"interval.dateTime\">\n          {{ interval.formatted }}\n        </div>\n      </div>\n\n      <div class=\"content-row\">\n        <!-- Scheduled shows -->\n        <template v-for=\"item in nextFourHoursOfContent\" :key=\"item.id\">\n          <div\n              class=\"show-cell\"\n              :class=\"getCellClasses(item.type)\"\n              :style=\"gridPlacement(item.start_time, item.durationMinutes)\"\n              @click=\"openModal(`goToNowPlayingModal`)\"\n          >\n            <div  class=\"item-content flex flex-col items-center justify-center gap-y-2\">\n              <h3>{{ item.content.show?.name || 'No Show Name' }}</h3>\n              <!-- Display the image if available -->\n              <SingleImage v-if=\"item.content.show?.image\"\n                           :image=\"item.content.show?.image\"\n                           :alt=\"item.content.show?.name\"\n                           class=\"content-image\"/>\n              <!-- Fallback placeholder if no image -->\n              <div v-else class=\"placeholder\"></div>\n            </div>\n          </div>\n        </template>\n      </div>\n\n      <!--      &lt;!&ndash; Content Row &ndash;&gt;-->\n      <!--      <div class=\"content-row\">-->\n      <!--        <div-->\n      <!--            v-for=\"(item, index) in nextFourHoursOfContent\"-->\n      <!--            :key=\"`content-${index}`\"-->\n      <!--            :style=\"{ 'grid-column': item.gridColumn }\"-->\n      <!--            class=\"item-cell\"-->\n      <!--        >-->\n      <!--          &lt;!&ndash; Calculate where the item should start and how many columns it should span &ndash;&gt;-->\n      <!--          <div :style=\"{-->\n      <!--                'grid-column': `${calculateStartColumn(item.start_time, timeSlots)} / span ${calculateSpan(item.start_time, item.durationMinutes, timeSlots)}`,-->\n      <!--                }\">-->\n      <!--            &lt;!&ndash; Content Here &ndash;&gt;-->\n      <!--            &lt;!&ndash; Content Display Logic &ndash;&gt;-->\n      <!--            <div class=\"item-content\">-->\n      <!--              <h3>{{ item.content.show?.name || 'No Show Name' }}</h3>-->\n      <!--              &lt;!&ndash; Display the image if available &ndash;&gt;-->\n      <!--              <SingleImage v-if=\"item.content.show?.image\"-->\n      <!--                           :image=\"item.content.show?.image\"-->\n      <!--                           :alt=\"item.content.show?.name\"-->\n      <!--                           class=\"content-image\" />-->\n      <!--              &lt;!&ndash; Fallback placeholder if no image &ndash;&gt;-->\n      <!--              <div v-else class=\"placeholder\"></div>-->\n      <!--            </div>-->\n      <!--          </div>-->\n\n      <!--        </div>-->\n      <!--      </div>-->\n\n    </div>\n\n\n<!--    <table class=\"table-fixed mx-5\">-->\n<!--      <thead class=\"bg-gray-900\">-->\n<!--      <tr class=\"border-b border-0.5 border-white\">-->\n<!--        &lt;!&ndash; Loop for each hour, including its half-hour mark &ndash;&gt;-->\n<!--        <template v-for=\"(time, index) in nextFourHours\" :key=\"index\">-->\n<!--          &lt;!&ndash; Hour mark &ndash;&gt;-->\n<!--          <th :class=\"getColumnVisibilityClass(index * 2)\">-->\n<!--            {{ formatTime(new Date(time)) }}-->\n<!--          </th>-->\n<!--          &lt;!&ndash; Half-hour mark &ndash;&gt;-->\n<!--          <th :class=\"getColumnVisibilityClass(index * 2 + 1)\">-->\n<!--            {{ formatHalfHour(new Date(time)) }}-->\n<!--          </th>-->\n<!--        </template>-->\n<!--      </tr>-->\n<!--      </thead>-->\n<!--      <tbody>-->\n<!--      &lt;!&ndash; Loop through each content item &ndash;&gt;-->\n<!--      <tr v-for=\"(item, index) in nextFourHoursOfContent\" :key=\"index\" class=\"border-b border-0.5 border-white\">-->\n<!--        &lt;!&ndash; Calculate the colspan based on durationMinutes &ndash;&gt;-->\n<!--        <td :colspan=\"calculateColspan(item.durationMinutes)\" @click=\"openModal(`goToNowPlayingModal`)\"-->\n<!--            :class=\"getCellClasses(item.type)\">-->\n<!--          <div class=\"flex flex-col\">-->\n<!--            <span class=\"text-center pb-2\">{{ item.content.show?.name || 'No Show Name' }}</span>-->\n<!--            &lt;!&ndash; Optionally display an image if available &ndash;&gt;-->\n<!--            &lt;!&ndash;            <div v-if=\"content.show?.image\" class=\"w-full h-64\" :style=\"{ backgroundImage: `url(${content.show.image.cdn_endpoint}${content.show.image.folder}/${content.show.image.name})`, backgroundSize: 'cover' }\"></div>&ndash;&gt;-->\n<!--            <SingleImage v-if=\"item.type === 'show'\" :image=\"item?.content?.show?.image\"-->\n<!--                         :alt=\"item?.content?.show?.name\" :class=\"`max-w-full h-auto object-cover`\"/>-->\n<!--            <SingleImage v-else :image=\"item?.content?.image\" :alt=\"item?.content?.name\"-->\n<!--                         :class=\"`max-w-xs h-auto object-cover`\"/>-->\n<!--            &lt;!&ndash; Placeholder if no image is available &ndash;&gt;-->\n<!--            <div v-else class=\"w-full h-64 bg-gray-400\"></div>-->\n<!--          </div>-->\n<!--        </td>-->\n<!--      </tr>-->\n<!--      </tbody>-->\n\n<!--    </table>-->\n\n    <PopUpModal :id=\"`goToNowPlayingModal`\">\n      <template v-slot:header>Now Playing</template>\n      <template v-slot:main><span class=\"text-orange-500\">This modal is temporary. This will take you to the now playing show or episode page.</span>\n      </template>\n    </PopUpModal>\n    <PopUpModal :id=\"`getReminderModal`\">\n      <template v-slot:header>Set Reminder</template>\n      <template v-slot:main><span class=\"text-orange-500\">This modal is temporary. Set a reminder when this show starts and/or subscribe to the show to get all notifications when new episodes are released or the show goes live.</span>\n      </template>\n    </PopUpModal>\n\n    <div class=\"bg-gray-600 rounded-lg shadow m-10 p-4\">\n\n\n      <TodayView/>\n    </div>\n\n\n  </div>\n</template>\n\n<script setup>\nimport { usePageSetup } from '@/Utilities/PageSetup'\nimport { useAppSettingStore } from '@/Stores/AppSettingStore'\nimport { useScheduleStore } from '@/Stores/ScheduleStore'\nimport Message from '@/Components/Global/Modals/Messages'\nimport PopUpModal from '@/Components/Global/Modals/PopUpModal'\nimport TodayView from '@/Components/Global/Calendar/TodayView.vue'\nimport { computed } from 'vue'\nimport SingleImage from '@/Components/Global/Multimedia/SingleImage.vue'\nimport dayjs from 'dayjs'\n\nusePageSetup('schedule')\n\nconst appSettingStore = useAppSettingStore()\nconst scheduleStore = useScheduleStore()\n\nlet props = defineProps({\n  can: Object,\n})\n\n// Computed property to ensure reactivity\nconst nextFourHours = computed(() => scheduleStore.nextFourHoursWithHalfHourIntervals)\nconst nextFourHoursOfContent = computed(() => scheduleStore.nextFourHoursOfContent)\nconst nextFourHoursWithHalfHourIntervals = computed(() => scheduleStore.nextFourHoursWithHalfHourIntervals)\nconst timeIntervals = computed(() => scheduleStore.nextFourHoursWithHalfHourIntervals)\nconst shows = computed(() => scheduleStore.nextFourHoursOfContent)\n\nconst gridPlacement = (startTime, durationMinutes) => {\n  // Convert startTime to a comparable format if necessary\n  const startDateTime = new Date(startTime)\n  const timeSlots = nextFourHoursWithHalfHourIntervals.value.map(interval => new Date(interval.dateTimeString))\n\n  // Find the index of the time slot that matches the item's start time\n  let startColumn = timeSlots.findIndex(slot => startDateTime >= slot && startDateTime < new Date(slot.getTime() + 30 * 60000))\n  if (startColumn === -1) {\n    console.error('Start time does not match any interval:', startTime)\n    return {} // Fallback or error handling\n  }\n\n  // Adjust startColumn for 1-based indexing in CSS Grid\n  startColumn += 1\n\n  // Calculate span based on duration\n  const span = Math.ceil(durationMinutes / 30)\n\n  // Return CSS style object for grid placement\n  return {\n    'gridColumn': `${startColumn} / span ${span}`,\n  }\n}\n\n\n// const nextFourHoursOfContent = computed(() => {\n//   return scheduleStore.nextFourHoursOfContent.map(item => {\n//     const { startColumn, span } = calculateGridPlacement(item.start_time, item.durationMinutes, nextFourHours.value);\n//     // Adjust startColumn for CSS Grid (1-indexed)\n//     const gridColumnStart = startColumn + 1;\n//     item.gridColumn = `${gridColumnStart} / span ${span}`;\n//     return item;\n//   });\n// });\n\n// console.log(nextFourHoursOfContent.value);\nconst timeSlots = computed(() => {\n  // Assuming nextFourHoursWithHalfHourIntervals is a reactive source\n  return nextFourHoursOfContent.value.map(slot => new Date(slot))\n})\n//\n// console.log(timeSlots.value);\n\nfunction calculateStartColumn(startTime, timeSlots) {\n  // Convert startTime to a Date object for comparison\n  const startDateTime = new Date(startTime)\n  // Find the first time slot that matches or exceeds the startDateTime\n  const columnIndex = timeSlots.findIndex(timeSlot => {\n    const timeSlotDate = new Date(timeSlot)\n    return startDateTime.getTime() <= timeSlotDate.getTime()\n  })\n  // Return the column index + 1 (CSS grid lines start at 1, not 0)\n  return columnIndex + 1\n}\n\nfunction calculateSpan(startTime, durationMinutes, timeSlots) {\n  const startDateTime = new Date(startTime)\n  const endDateTime = new Date(startDateTime.getTime() + durationMinutes * 60000) // Convert duration to milliseconds and add\n\n  let startIndex = -1\n  let endIndex = -1\n\n  // Loop through timeSlots to find start and end indexes\n  for (let i = 0; i < timeSlots.length; i++) {\n    const slot = new Date(timeSlots[i])\n    if (startIndex === -1 && startDateTime <= slot) {\n      startIndex = i\n    }\n    if (endDateTime <= slot) {\n      endIndex = i\n      break\n    }\n  }\n\n  // If the end index was not found, it means the event lasts beyond the last time slot\n  if (endIndex === -1) {\n    endIndex = timeSlots.length\n  }\n\n  // The span is the difference between the end and start indexes\n  return endIndex - startIndex\n}\n\nconst timeStringToMinutes = (timeStr) => {\n  const [hour, minute] = timeStr.match(/\\d+/g)\n  return parseInt(hour) * 60 + parseInt(minute)\n}\n\n// const calculateGridPlacement = (showStartTime, showDuration, timeIntervals) => {\n//   // Convert the show start time and intervals to minutes for comparison\n//   const showStartMinutes = timeStringToMinutes(showStartTime);\n//   const intervalStartMinutes = timeIntervals.map(interval => timeStringToMinutes(interval));\n//\n//   // Find the starting column by finding the closest interval start time\n//   let startColumn = intervalStartMinutes.findIndex(time => time >= showStartMinutes);\n//   startColumn = startColumn === -1 ? timeIntervals.length - 1 : startColumn; // Fallback to the last column if not found\n//\n//   // Calculate span based on duration (rounded up to cover partial intervals)\n//   const span = Math.ceil(showDuration / 30);\n//\n//   return { startColumn, span };\n// };\n\n// Sample usage\n// const timeIntervals = [\"05:00 PM\", \"05:30 PM\", \"06:00 PM\", \"06:30 PM\", \"07:00 PM\", \"07:30 PM\", \"08:00 PM\", \"08:30 PM\"];\n// const showStartTime = \"17:00\"; // \"05:00 PM\"\n// const showDuration = 60; // 60 minutes\n\n// const { startColumn, span } = calculateGridPlacement(showStartTime, showDuration, timeIntervals);\n\n// shows.value.forEach(show => {\n//   const { startColumn, span } = calculateGridPlacement(show.start_time, show.durationMinutes, timeIntervals.value);\n//   // Apply the calculated start column and span to your grid layout logic\n// });\n//\n// function calculateGridPlacement(showStartTime, showDuration, timeIntervals) {\n//   // Convert showStartTime to the user's timezone and format for comparison\n//   const showStartInUserTZ = userStore.convertUtcToUserTimezone(showStartTime);\n//\n//   // Find the index of the interval that matches the show's start time\n//   const startColumn = timeIntervals.findIndex(interval => showStartInUserTZ === interval.dateTimeString);\n//\n//   // Calculate how many 30-minute intervals the show spans\n//   const intervals = Math.ceil(showDuration / 30);\n//\n//   if (startColumn === -1) {\n//     console.error('Start time does not match any interval:', showStartInUserTZ);\n//     // Handle the error case appropriately\n//     return { startColumn: 1, span: intervals }; // Default or error handling\n//   }\n//\n//   const span = startColumn + intervals > timeIntervals.length ? timeIntervals.length - startColumn : intervals;\n//\n//   return { startColumn: startColumn + 1, span }; // +1 for CSS grid's 1-based indexing\n// }\n\n\n// This function assumes that `showStartTime` is already in the same format as your time intervals.\n// If not, you may need to implement a conversion function to align the time formats.\n\nfunction convertTo24HourFormat(time) {\n  // Assume input is \"HH:MM PM/AM\" and convert to 24-hour format \"HH:MM\"\n  // This is a placeholder for actual conversion logic\n  return time\n}\n\n\n// function calculateGridColumn(startTime, durationMinutes, timeSlots) {\n//   // Find the index of the slot that matches the item's start time\n//   const startSlotIndex = timeSlots.value.findIndex(timeSlot =>\n//       new Date(startTime) >= new Date(timeSlot) &&\n//       new Date(startTime) < new Date(new Date(timeSlot).getTime() + 30 * 60000)\n//   ) + 1; // Grid lines start at 1\n// }\n//   function calculateSpan(startTime, durationMinutes) {\n//     if (!timeSlots.value || timeSlots.value.length === 0) {\n//       console.error('timeSlots is not defined or empty');\n//       return 0; // or some fallback value\n//     }\n//\n//     // Now safe to use timeSlots.value.findIndex\n//     const startIndex = timeSlots.value.findIndex(/* your logic here */);\n//     // Further logic...\n//   }\n\n\n// Example processing of schedule into grid items\n// const processedSchedule = computed(() => {\n//   return shows.map(show => {\n//     const startCol = calculateStartColumn(show.startTime);\n//     const span = calculateSpan(show.duration, show.startTime);\n//\n//     return {\n//       ...show,\n//       startCol,\n//       span,\n//     };\n//   }).sort((a, b) => a.priority - b.priority); // Ensure sorting by priority\n// });\n\n// const calculateStartColumn = (startTime) => {\n//   const showStart = new Date(startTime);\n//   const gridStart = new Date(nextFourHours.value[0]);\n//\n//   // Calculate start column based on half-hour increments from gridStart\n//   const diffHours = (showStart - gridStart) / (1000 * 60 * 60);\n//   return Math.ceil(diffHours * 2) + 1; // +1 because CSS Grid lines start at 1\n// };\n//\n// const calculateSpan = (durationMinutes) => {\n//   return Math.ceil(durationMinutes / 30); // Span based on 30-minute intervals\n// };\n\n// const calculateStartColumn = (startTime) => {\n//   const showStart = new Date(startTime);\n//   const gridStart = nextFourHours[0];\n//\n//   // Find the index of the time slot that matches or immediately precedes the show's start time\n//   const columnIndex = nextFourHours.findIndex(time => showStart < time) - 1;\n//   console.log('BAHH ' + columnIndex);\n//\n//   return columnIndex >= 0 ? columnIndex + 1 : 1; // Ensure it falls within the grid columns\n// };\n//\n// const calculateSpan = (startTime, durationMinutes) => {\n//   const startColumn = calculateStartColumn(startTime);\n//   const span = Math.ceil(durationMinutes / 30); // Determine span based on duration\n//\n//   // Adjust the span to ensure it doesn't extend beyond the grid\n//   return startColumn + span - 1 <= 8 ? span : 8 - startColumn + 1;\n// };\n\nconst getItemStyle = (item) => {\n  const startColumn = calculateStartColumn(item.start_time)\n  const span = calculateSpan(item.durationMinutes)\n\n  return {\n    gridColumnStart: startColumn,\n    gridColumnEnd: `span ${span}`,\n    gridRowStart: 2, // All items start in the second row\n  }\n}\n\n// Method to format the full hour\nfunction formatTime(date) {\n  return date.toLocaleTimeString('en-US', {hour: 'numeric', minute: '2-digit', hour12: true})\n}\n\n// Method to add 30 minutes to the given date and format it\nfunction formatHalfHour(date) {\n  const halfHourLater = new Date(date.getTime() + 30 * 60 * 1000)\n  return halfHourLater.toLocaleTimeString('en-US', {hour: 'numeric', minute: '2-digit', hour12: true})\n}\n\n// Determine visibility classes based on column index and if it's a half-hour\nfunction getColumnVisibilityClass(index, isHalfHour) {\n  // Adjust index for half-hour columns\n  const adjustedIndex = isHalfHour ? index * 2 + 1 : index * 2\n\n  if (adjustedIndex >= 6) { // Last two columns visible only on 2xl screens\n    return 'hidden 2xl:table-cell'\n  } else if (adjustedIndex >= 3) { // Columns 4, 5, 6 visible on xl screens and above\n    return 'hidden xl:table-cell'\n  } else { // Columns 1, 2, 3 are always visible\n    return ''\n  }\n}\n\nfunction calculateColspan(durationMinutes) {\n  // Assuming each hour (and its half-hour mark) is represented by two columns\n  // and that each content item's duration in minutes can determine its span\n  return Math.ceil(durationMinutes / 30)\n}\n\nfunction getCellClasses(type) {\n  const baseClass = 'column-width text-sm 2xl:text-md border border-0.5 border-green-300 hover:border-blue-500 cursor-pointer'\n  switch (type) {\n    case 'show':\n      return `${baseClass} bg-gradient-show hover:bg-gradient-show-hover`\n    case 'new_release':\n      return `${baseClass} bg-gradient-new-release hover:bg-gradient-new-release-hover`\n      // Add more cases as needed\n    default:\n      return baseClass\n  }\n}\n\nfunction openModal(modalName) {\n  document.getElementById(modalName).showModal()\n}\n\n// Example test call\n// console.log(calculateGridColumn('2024-04-09 13:00:00', 90, nextFourHours.value));\n\n\n</script>\n\n<style scoped>\n\n.bg-gradient-show {\n  background: linear-gradient(to right, #1f4037, #99f2c8); /* Example green gradient */\n}\n\n.bg-gradient-show-hover:hover {\n  background: linear-gradient(to right, #66D3FA, #6E45E2); /* Example green gradient on hover */\n}\n\n.bg-gradient-new-release {\n  background: linear-gradient(to right, #654ea3, #eaafc8); /* Example purple gradient */\n}\n\n.bg-gradient-new-release-hover:hover {\n  background: linear-gradient(to right, #c2e59c, #64b3f4); /* Example purple gradient on hover */\n}\n\n\n.column-width {\n  @apply w-16\n}\n\n\n.schedule-item {\n  background: #f0f0f0;\n  color: #000;\n  padding: 10px;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  align-items: center;\n}\n\n.time-slot {\n  text-align: center;\n  padding: 10px 0;\n  border-bottom: 1px solid #fff;\n  grid-row: 1; /* Ensures all time slots are in the first row */\n}\n\n.time-cell {\n  border: 1px solid #fff;\n}\n\n.content {\n  background: #f0f0f0;\n  padding: 8px;\n  border: 1px solid #ddd;\n}\n\n.placeholder {\n  background: #ccc;\n  width: 100%;\n  height: 60px;\n}\n\n\n.schedule-grid {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr); /* Adjust based on your actual time slots */\n\n}\n\n.header-row, .content-row {\n  display: contents; /* Make these divs act as part of the grid layout without creating extra rows */\n  width: 100%; /* Ensure they span the full width of the grid */\n}\n\n.schedule-cell {\n  background: #333;\n  color: #fff;\n  text-align: center;\n  padding: 8px;\n}\n\n.item-content {\n  padding: 8px;\n  background: linear-gradient(to right, rgba(68, 68, 68, 0.9), rgba(68, 68, 68, 0.7));\n}\n\n.content-image {\n  width: 100%;\n  height: auto;\n  object-fit: cover;\n}\n\n/* Responsive visibility */\n@media (min-width: 1280px) {\n  /* 2xl */\n  .xl\\:hidden {\n    display: none;\n  }\n}\n\n@media (min-width: 1024px) {\n  /* xl */\n  .lg\\:hidden {\n    display: none;\n  }\n}\n\n</style>\n","import api from \"!../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../node_modules/css-loader/dist/cjs.js??clonedRuleSet-9.use[1]!../../../node_modules/vue-loader/dist/stylePostLoader.js!../../../node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-9.use[2]!../../../node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./Schedule.vue?vue&type=style&index=0&id=39f6224a&scoped=true&lang=css\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","import script from \"./Schedule.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Schedule.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./Schedule.vue?vue&type=style&index=0&id=39f6224a&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-39f6224a\"]])\n\nexport default __exports__"],"names":["_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","delegateYield","asyncGeneratorStep","gen","reject","_next","_throw","key","info","error","_asyncToGenerator","fn","self","args","arguments","apply","err","undefined","ownKeys","getOwnPropertySymbols","filter","getOwnPropertyDescriptor","_objectSpread","_defineProperty","getOwnPropertyDescriptors","defineProperties","obj","toPrimitive","String","Number","_toPrimitive","convertScheduleToTimezone","scheduleData","userStore","useUserStore","data","map","item","startTimeInUserTz","start_time","formatDateTimeFromUtcToUserTimezone","endTimeInUserTz","end_time","recurrenceDetailsInUserTz","recurrenceDetails","_item$recurrenceDetai","start_date","end_date","formatTimeInUserTimezone","getUpcomingContentDates","viewingWindowStart","dates","start","Date","setHours","getHours","dayjs","relativeTime","timezone","utc","initialState","currentMonth","selectedDay","currentWeekStart","currentWeekEnd","fiveDaySixHourSchedule","todaysContent","weeklyContent","dataFetchLog","useScheduleStore","defineStore","state","actions","resetAll","assign","this","now","setSelectedDay","day","_this","_callee","_context","addHours","startOfDay","startOfWeek","weekStartsOn","endOfWeek","fetchWeekDataIfNeeded","setSelectedDayToToday","startOfHour","changeDay","days","_this2","_callee2","currentTime","newDay","_context2","getMinutes","addDays","setMinutes","shiftHours","hours","_this3","_callee3","_context3","isSameDay","isElevenPM","date","subtractMonth","_this4","_callee4","_context4","subMonths","console","log","t0","concat","addMonth","_this5","_callee5","_context5","addMonths","fetchFiveDaySixHourSchedule","_this6","_callee6","response","_context6","axios","get","userTimezone","fetchTodaysContent","_this7","_callee7","_context7","preloadWeeklyContent","_this8","_callee8","currentDate","_context8","loadWeekFromDate","_this9","_callee9","fullISODate","_timezone3","newData","weekStart","weekEnd","fetchTime","existingLogIndex","_context9","toISOString","post","findIndex","lastFetch","_toConsumableArray","index","id","formattedDate","needsDataForWeek","formatISODate","split","weekStartStr","weekEndStr","weekHasBeenFetched","some","logWeekStartStr","logWeekEndStr","calculateExtendedEndForUpcomingContent","baseStartTime","getTime","checkAndFetchForUpcomingContent","_this10","_callee10","upcomingDates","fifteenMinutesAgo","_iterator","_step","_loop","_context11","_createForOfIteratorHelper","dateString","_context10","content","contentDate","toDateString","lastFetchedTime","isFresh","fetchDataAndUpdateLog","t1","_this11","_callee11","_context12","_this12","_callee12","_context13","getters","nextFourHoursOfContent","startOfCurrentHour","getFullYear","getMonth","getDate","fourHoursLater","utcTimeSlots","durationHours","intervalMinutes","slots","slotTime","createTimeSlots","timeSlots","slot","convertUtcToUserTimezone","itemStart","sort","b","startDiff","priority","array","formattedItemStartTime","format","itemEnd","durationMinutes","slotIndex","durationSlots","Math","ceil","nextItemStart","adjustedSpan","max","min","gridStart","gridSpan","nextFourHoursWithHalfHourIntervals","intervals","current","tz","startOf","formatted","dateTimeString","add","upcomingContent","end","nextSixHours","adjustedStart","eachHourOfInterval","dateMessage","startDay","isToday","isYesterday","isTomorrow","currentMonthIndex","currentMonthName","currentYear","getYear","daysInMonth","startOfCurrentMonth","startOfMonth","endOfCurrentMonth","endOfMonth","startOfGrid","endOfGrid","eachDayOfInterval","today","viewingStart","usePageSetup","pageName","appSettingStore","useAppSettingStore","videoPlayerStore","useVideoPlayerStore","currentPage","showFlashMessage","pageIsHidden","isMobile","window","innerWidth","fullPage","ott","showOttButtons","makeVideoTopRight","pageReload","location","reload","Inertia","on","event","search","shouldScrollToTop","requestAnimationFrame","topDiv","document","getElementById","scrollIntoView","behavior","scrollTo","setPrevUrl","noLayout","___CSS_LOADER_EXPORT___","module","scheduleStore","_storeToRefs","storeToRefs","ref","computed","_ref","_x","isWithinCurrentHour","hour","endOfCurrentHour","contentStartTime","isContentAvailableForHour","formatHour","getTimeSegment","hourOfDay","segment","color","watch","newValue","goToContentPage","visit","show","slug","formatDuration","minutes","floor","remainingMinutes","_ref2","newTimezone","oldTimezone","_x2","_x3","immediate","options","locals","props","__props","clearFlashMessage","flash","success","message","warning","route","notificationStore","useNotificationStore","gridPlacement","startTime","startDateTime","startColumn","interval","span","getCellClasses","baseClass","modalName","showModal"],"sourceRoot":""}