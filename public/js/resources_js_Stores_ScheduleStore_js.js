"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk"] = self["webpackChunk"] || []).push([["resources_js_Stores_ScheduleStore_js"],{

/***/ "./resources/js/Stores/ScheduleStore.js":
/*!**********************************************!*\
  !*** ./resources/js/Stores/ScheduleStore.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useScheduleStore: () => (/* binding */ useScheduleStore)\n/* harmony export */ });\n/* harmony import */ var pinia__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! pinia */ \"./node_modules/pinia/dist/pinia.mjs\");\n/* harmony import */ var _Stores_UserStore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/Stores/UserStore */ \"./resources/js/Stores/UserStore.js\");\n/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! date-fns */ \"./node_modules/date-fns/addHours.mjs\");\n/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! date-fns */ \"./node_modules/date-fns/startOfDay.mjs\");\n/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! date-fns */ \"./node_modules/date-fns/startOfWeek.mjs\");\n/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! date-fns */ \"./node_modules/date-fns/endOfWeek.mjs\");\n/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! date-fns */ \"./node_modules/date-fns/startOfHour.mjs\");\n/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! date-fns */ \"./node_modules/date-fns/addDays.mjs\");\n/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! date-fns */ \"./node_modules/date-fns/isSameDay.mjs\");\n/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! date-fns */ \"./node_modules/date-fns/getHours.mjs\");\n/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! date-fns */ \"./node_modules/date-fns/subMonths.mjs\");\n/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! date-fns */ \"./node_modules/date-fns/addMonths.mjs\");\n/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! date-fns */ \"./node_modules/date-fns/addMinutes.mjs\");\n/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! date-fns */ \"./node_modules/date-fns/format.mjs\");\n/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! date-fns */ \"./node_modules/date-fns/eachHourOfInterval.mjs\");\n/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! date-fns */ \"./node_modules/date-fns/isToday.mjs\");\n/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! date-fns */ \"./node_modules/date-fns/isYesterday.mjs\");\n/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! date-fns */ \"./node_modules/date-fns/isTomorrow.mjs\");\n/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! date-fns */ \"./node_modules/date-fns/getMonth.mjs\");\n/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! date-fns */ \"./node_modules/date-fns/getYear.mjs\");\n/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! date-fns */ \"./node_modules/date-fns/startOfMonth.mjs\");\n/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! date-fns */ \"./node_modules/date-fns/endOfMonth.mjs\");\n/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! date-fns */ \"./node_modules/date-fns/eachDayOfInterval.mjs\");\n/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! dayjs */ \"./node_modules/dayjs/dayjs.min.js\");\n/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(dayjs__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var dayjs_plugin_relativeTime__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! dayjs/plugin/relativeTime */ \"./node_modules/dayjs/plugin/relativeTime.js\");\n/* harmony import */ var dayjs_plugin_relativeTime__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(dayjs_plugin_relativeTime__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var dayjs_plugin_timezone__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! dayjs/plugin/timezone */ \"./node_modules/dayjs/plugin/timezone.js\");\n/* harmony import */ var dayjs_plugin_timezone__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(dayjs_plugin_timezone__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var dayjs_plugin_utc__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! dayjs/plugin/utc */ \"./node_modules/dayjs/plugin/utc.js\");\n/* harmony import */ var dayjs_plugin_utc__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(dayjs_plugin_utc__WEBPACK_IMPORTED_MODULE_4__);\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, \"catch\": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : String(i); }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n\n\n\n\n// Import dayjs and its plugins\n\n\n\n\n\n// Extend dayjs with the plugins\ndayjs__WEBPACK_IMPORTED_MODULE_1___default().extend((dayjs_plugin_relativeTime__WEBPACK_IMPORTED_MODULE_2___default()));\ndayjs__WEBPACK_IMPORTED_MODULE_1___default().extend((dayjs_plugin_timezone__WEBPACK_IMPORTED_MODULE_3___default()));\ndayjs__WEBPACK_IMPORTED_MODULE_1___default().extend((dayjs_plugin_utc__WEBPACK_IMPORTED_MODULE_4___default()));\nfunction convertScheduleToTimezone(scheduleData) {\n  var userStore = (0,_Stores_UserStore__WEBPACK_IMPORTED_MODULE_0__.useUserStore)(); // Access the UserStore\n\n  return scheduleData.data.map(function (item) {\n    // Convert top-level start_time and end_time using UserStore methods\n    var startTimeInUserTz = item.start_time ? userStore.formatDateTimeFromUtcToUserTimezone(item.start_time, 'YYYY-MM-DD HH:mm:ss') : null;\n    var endTimeInUserTz = item.end_time ? userStore.formatDateTimeFromUtcToUserTimezone(item.end_time, 'YYYY-MM-DD HH:mm:ss') : null;\n\n    // Check and convert recurrenceDetails if present\n    var recurrenceDetailsInUserTz = null;\n    if (item.recurrenceDetails) {\n      var _item$recurrenceDetai = item.recurrenceDetails,\n        start_time = _item$recurrenceDetai.start_time,\n        start_date = _item$recurrenceDetai.start_date,\n        end_date = _item$recurrenceDetai.end_date;\n      recurrenceDetailsInUserTz = _objectSpread(_objectSpread({}, item.recurrenceDetails), {}, {\n        start_time: start_time ? userStore.formatTimeInUserTimezone(start_time, 'HH:mm:ss') : null,\n        start_date: start_date ? userStore.formatDateTimeFromUtcToUserTimezone(start_date, 'YYYY-MM-DD') : null,\n        end_date: end_date ? userStore.formatDateTimeFromUtcToUserTimezone(end_date, 'YYYY-MM-DD') : null\n      });\n    }\n    return _objectSpread(_objectSpread({}, item), {}, {\n      start_time: startTimeInUserTz,\n      end_time: endTimeInUserTz,\n      recurrenceDetails: recurrenceDetailsInUserTz\n    });\n  });\n}\n\n// Helper function to get dates within the next 6 hours from viewingWindowStart\nfunction getUpcomingContentDates(viewingWindowStart) {\n  var dates = [];\n  var start = new Date(viewingWindowStart);\n  for (var i = 0; i < 6; i++) {\n    dates.push(new Date(start.setHours(start.getHours() + i)));\n  }\n  return dates;\n}\nvar initialState = function initialState() {\n  return {\n    viewingWindowStart: new Date(),\n    currentMonth: new Date(),\n    selectedDay: new Date(),\n    currentWeekStart: null,\n    currentWeekEnd: null,\n    // viewingMode: 'automatic', // or 'userSelected'\n    fiveDaySixHourSchedule: [],\n    // Holds the schedule shows 5 day / 6 hour structured data\n    todaysContent: [],\n    weeklyContent: [],\n    dataFetchLog: []\n  };\n};\nvar useScheduleStore = (0,pinia__WEBPACK_IMPORTED_MODULE_5__.defineStore)('scheduleStore', {\n  state: initialState,\n  actions: {\n    resetAll: function resetAll() {\n      // Reset the store to its original state (clear all data)\n      Object.assign(this, initialState());\n    },\n    reset: function reset() {\n      var now = new Date();\n      this.viewingWindowStart = now;\n      this.currentMonth = now;\n      this.selectedDay = now;\n    },\n    setSelectedDay: function setSelectedDay(day) {\n      var _this = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _this.selectedDay = day;\n              // Explicitly set the viewingWindowStart to 4 AM for the selected day\n              _this.viewingWindowStart = (0,date_fns__WEBPACK_IMPORTED_MODULE_6__.addHours)((0,date_fns__WEBPACK_IMPORTED_MODULE_7__.startOfDay)(day), 4);\n              _this.currentWeekStart = (0,date_fns__WEBPACK_IMPORTED_MODULE_8__.startOfWeek)(day, {\n                weekStartsOn: 0\n              });\n              _this.currentWeekEnd = (0,date_fns__WEBPACK_IMPORTED_MODULE_9__.endOfWeek)(day, {\n                weekStartsOn: 0\n              });\n\n              // // Check if the week of the selected day is already loaded\n              // this.currentWeekStart = startOfWeek(day, {weekStartsOn: 0});\n              // this.currentWeekEnd = endOfWeek(day, {weekStartsOn: 0});\n\n              // Use the updated fetch logic\n              _context.next = 6;\n              return _this.fetchWeekDataIfNeeded();\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }))();\n    },\n    setSelectedDayToToday: function setSelectedDayToToday(day) {\n      var now = new Date();\n      this.selectedDay = now;\n      this.viewingWindowStart = (0,date_fns__WEBPACK_IMPORTED_MODULE_10__.startOfHour)(now);\n    },\n    changeDay: function changeDay(days) {\n      var _this2 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var currentTime, newDay;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              currentTime = _this2.viewingWindowStart.getHours() * 60 + _this2.viewingWindowStart.getMinutes();\n              newDay = (0,date_fns__WEBPACK_IMPORTED_MODULE_11__.addDays)((0,date_fns__WEBPACK_IMPORTED_MODULE_7__.startOfDay)(_this2.viewingWindowStart), days);\n              newDay = new Date(newDay.setMinutes(currentTime)); // Preserve time of day\n\n              _this2.selectedDay = newDay;\n              _this2.viewingWindowStart = newDay;\n\n              // Update the week's range based on the new day\n              _this2.currentWeekStart = (0,date_fns__WEBPACK_IMPORTED_MODULE_8__.startOfWeek)(newDay, {\n                weekStartsOn: 0\n              });\n              _this2.currentWeekEnd = (0,date_fns__WEBPACK_IMPORTED_MODULE_9__.endOfWeek)(newDay, {\n                weekStartsOn: 0\n              });\n\n              // // Check if the week of the new day is already loaded\n              // const weekStart = startOfWeek(newDay, {weekStartsOn: 0});\n              // const weekEnd = endOfWeek(newDay, {weekStartsOn: 0});\n\n              // Use the updated centralized fetch logic without redundant checks\n              _context2.next = 9;\n              return _this2.fetchWeekDataIfNeeded();\n            case 9:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2);\n      }))();\n    },\n    shiftHours: function shiftHours(hours) {\n      var _this3 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              // Shift the viewing window\n              _this3.viewingWindowStart = (0,date_fns__WEBPACK_IMPORTED_MODULE_6__.addHours)(_this3.viewingWindowStart, hours);\n              _this3.currentWeekStart = (0,date_fns__WEBPACK_IMPORTED_MODULE_8__.startOfWeek)(_this3.viewingWindowStart, {\n                weekStartsOn: 0\n              });\n              _this3.currentWeekEnd = (0,date_fns__WEBPACK_IMPORTED_MODULE_9__.endOfWeek)(_this3.viewingWindowStart, {\n                weekStartsOn: 0\n              });\n\n              // // Update selectedDay if the day has changed\n              // if (!isSameDay(this.viewingWindowStart, this.selectedDay)) {\n              //     this.selectedDay = startOfDay(this.viewingWindowStart);\n              // }\n\n              // If the day has changed, update selectedDay and the week's range\n              if (!(0,date_fns__WEBPACK_IMPORTED_MODULE_12__.isSameDay)(_this3.viewingWindowStart, _this3.selectedDay)) {\n                _this3.selectedDay = (0,date_fns__WEBPACK_IMPORTED_MODULE_7__.startOfDay)(_this3.viewingWindowStart);\n              }\n\n              // // Check if the week of the new viewing window is already loaded\n              // this.currentWeekStart = startOfWeek(this.viewingWindowStart, { weekStartsOn: 0 });\n              // this.currentWeekEnd = endOfWeek(this.viewingWindowStart, { weekStartsOn: 0 });\n\n              // Use the updated fetch logic\n              _context3.next = 6;\n              return _this3.fetchWeekDataIfNeeded();\n            case 6:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3);\n      }))();\n    },\n    isElevenPM: function isElevenPM(date) {\n      return (0,date_fns__WEBPACK_IMPORTED_MODULE_13__.getHours)(date) === 23; // Checks if the hour is 23 (11 PM)\n    },\n    // Actions to change the month\n    subtractMonth: function subtractMonth() {\n      var _this4 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              // Subtract one month from the currentMonth\n              _this4.currentMonth = (0,date_fns__WEBPACK_IMPORTED_MODULE_14__.subMonths)(_this4.currentMonth, 1);\n              _context4.prev = 1;\n              _context4.next = 4;\n              return _this4.setSelectedDay(_this4.currentMonth);\n            case 4:\n              console.log(\"Set selected day based on current month:\", _this4.currentMonth);\n              _context4.next = 10;\n              break;\n            case 7:\n              _context4.prev = 7;\n              _context4.t0 = _context4[\"catch\"](1);\n              console.error(\"Failed to set selected day based on current month \".concat(_this4.currentMonth, \":\"), _context4.t0);\n            case 10:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, null, [[1, 7]]);\n      }))();\n    },\n    addMonth: function addMonth() {\n      var _this5 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              _this5.currentMonth = (0,date_fns__WEBPACK_IMPORTED_MODULE_15__.addMonths)(_this5.currentMonth, 1);\n              _context5.prev = 1;\n              _context5.next = 4;\n              return _this5.setSelectedDay(_this5.currentMonth);\n            case 4:\n              console.log(\"Set selected day based on current month:\", _this5.currentMonth);\n              _context5.next = 10;\n              break;\n            case 7:\n              _context5.prev = 7;\n              _context5.t0 = _context5[\"catch\"](1);\n              console.error(\"Failed to set selected day based on current month \".concat(_this5.currentMonth, \":\"), _context5.t0);\n            case 10:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5, null, [[1, 7]]);\n      }))();\n    },\n    fetchFiveDaySixHourSchedule: function fetchFiveDaySixHourSchedule() {\n      var _this6 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n        var userStore, response, _timezone;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              console.error('fetchFiveDaySixHourSchedule');\n              _context6.prev = 1;\n              userStore = (0,_Stores_UserStore__WEBPACK_IMPORTED_MODULE_0__.useUserStore)();\n              _context6.next = 5;\n              return axios.get('/api/schedule');\n            case 5:\n              response = _context6.sent;\n              // Fallback to response timezone if userStore.timezone is not set\n              _timezone = userStore.timezone || response.data.userTimezone || 'UTC'; // Additional fallback to 'UTC'\n              // Convert the entire schedule, including nested recurrenceDetails, to the user's timezone\n              _this6.fiveDaySixHourSchedule = convertScheduleToTimezone(response.data, _timezone);\n              console.error('fetchFiveDaySixHourSchedule', response.data);\n              _context6.next = 14;\n              break;\n            case 11:\n              _context6.prev = 11;\n              _context6.t0 = _context6[\"catch\"](1);\n              console.error('Failed to load schedule shows:', _context6.t0);\n              // Handle the error state as needed, e.g., setting an error state property\n            case 14:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee6, null, [[1, 11]]);\n      }))();\n    },\n    fetchTodaysContent: function fetchTodaysContent() {\n      var _this7 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n        var userStore, response, _timezone2;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.prev = 0;\n              userStore = (0,_Stores_UserStore__WEBPACK_IMPORTED_MODULE_0__.useUserStore)();\n              _context7.next = 4;\n              return axios.get('/api/schedule/today');\n            case 4:\n              response = _context7.sent;\n              // Fallback to response timezone if userStore.timezone is not set\n              _timezone2 = userStore.timezone || response.data.userTimezone || 'UTC'; // Additional fallback to 'UTC'\n              _this7.todaysContent = convertScheduleToTimezone(response.data, _timezone2);\n              _context7.next = 12;\n              break;\n            case 9:\n              _context7.prev = 9;\n              _context7.t0 = _context7[\"catch\"](0);\n              console.error('Failed to fetch today\\'s content:', _context7.t0);\n            case 12:\n            case \"end\":\n              return _context7.stop();\n          }\n        }, _callee7, null, [[0, 9]]);\n      }))();\n    },\n    preloadWeeklyContent: function preloadWeeklyContent() {\n      var _this8 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {\n        var currentDate;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) switch (_context8.prev = _context8.next) {\n            case 0:\n              // Use the current date to preload content for the current week\n              currentDate = new Date();\n              _context8.prev = 1;\n              _context8.next = 4;\n              return _this8.loadWeekFromDate(currentDate);\n            case 4:\n              _context8.next = 9;\n              break;\n            case 6:\n              _context8.prev = 6;\n              _context8.t0 = _context8[\"catch\"](1);\n              console.error('Failed to preload weekly content:', _context8.t0);\n            case 9:\n            case \"end\":\n              return _context8.stop();\n          }\n        }, _callee8, null, [[1, 6]]);\n      }))();\n    },\n    loadWeekFromDate: function loadWeekFromDate(date) {\n      var _this9 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {\n        var formattedDate, userStore, fullISODate, response, _timezone3, newData, weekStart, weekEnd, fetchTime, existingLogIndex;\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) switch (_context9.prev = _context9.next) {\n            case 0:\n              _context9.prev = 0;\n              userStore = (0,_Stores_UserStore__WEBPACK_IMPORTED_MODULE_0__.useUserStore)(); // Ensure the date is in UTC format for the request\n              console.log('Date before formatted: ' + date);\n              fullISODate = date.toISOString();\n              console.log(\"Loading week data for date in UTC: \".concat(fullISODate));\n\n              // Send the dateTime and timezone as a JSON object in a POST request\n              _context9.next = 7;\n              return axios.post(\"/api/schedule/week/\".concat(fullISODate));\n            case 7:\n              response = _context9.sent;\n              // const formattedDate = date.toISOString().split('T')[0];\n              // console.log(`Loading week data for date: ${formattedDate}`); // Log the date being requested\n              //\n              // const response = await axios.get(`/api/schedule/week/${formattedDate}`);\n              console.log('Received response:', response.data); // Log the raw response data\n\n              // Fallback to response timezone if userStore.timezone is not set\n              _timezone3 = userStore.timezone || response.data.userTimezone || 'UTC'; // Additional fallback to 'UTC'\n              console.log(\"Using timezone: \".concat(_timezone3)); // Log the timezone being used\n              newData = convertScheduleToTimezone(response.data, _timezone3); // Ensure you are accessing the correct data property from the response\n              // Update the fetch log with the current fetch\n              weekStart = (0,date_fns__WEBPACK_IMPORTED_MODULE_8__.startOfWeek)(new Date(date), {\n                weekStartsOn: 0\n              }).toISOString();\n              weekEnd = (0,date_fns__WEBPACK_IMPORTED_MODULE_9__.endOfWeek)(new Date(date), {\n                weekStartsOn: 0\n              }).toISOString();\n              fetchTime = new Date().toISOString();\n              existingLogIndex = _this9.dataFetchLog.findIndex(function (log) {\n                return log.weekStart === weekStart && log.weekEnd === weekEnd;\n              });\n              if (existingLogIndex !== -1) {\n                _this9.dataFetchLog[existingLogIndex].lastFetch = fetchTime;\n              } else {\n                _this9.dataFetchLog.push({\n                  weekStart: weekStart,\n                  weekEnd: weekEnd,\n                  lastFetch: fetchTime\n                });\n              }\n\n              // Merge newData into weeklyContent, avoiding duplicates\n              _this9.weeklyContent = [].concat(_toConsumableArray(_this9.weeklyContent), _toConsumableArray(newData)).filter(function (value, index, self) {\n                return index === self.findIndex(function (t) {\n                  return t.id === value.id && t.start_time === value.start_time;\n                });\n              });\n              _context9.next = 23;\n              break;\n            case 20:\n              _context9.prev = 20;\n              _context9.t0 = _context9[\"catch\"](0);\n              console.error(\"Failed to load content for week starting \".concat(formattedDate, \":\"), _context9.t0);\n            case 23:\n            case \"end\":\n              return _context9.stop();\n          }\n        }, _callee9, null, [[0, 20]]);\n      }))();\n    },\n    needsDataForWeek: function needsDataForWeek() {\n      // Helper function to format ISO date strings for easier comparison\n      var formatISODate = function formatISODate(date) {\n        return date.toISOString().split('T')[0];\n      };\n\n      // Current week range in ISO date string format\n      var weekStartStr = formatISODate(this.currentWeekStart);\n      var weekEndStr = formatISODate(this.currentWeekEnd);\n\n      // Enhanced logging for debugging\n      console.log(\"Current week range: \".concat(weekStartStr, \" to \").concat(weekEndStr));\n      console.log('Existing data fetch log entries:', this.dataFetchLog);\n\n      // Iterate through the fetch log to check if the current week has been fetched\n      var weekHasBeenFetched = this.dataFetchLog.some(function (log) {\n        // Convert log dates to ISO string format for comparison\n        var logWeekStartStr = formatISODate(new Date(log.weekStart));\n        var logWeekEndStr = formatISODate(new Date(log.weekEnd));\n\n        // Log each comparison for insight\n        console.log(\"Comparing to fetched range: \".concat(logWeekStartStr, \" to \").concat(logWeekEndStr));\n        return logWeekStartStr <= weekStartStr && logWeekEndStr >= weekEndStr;\n      });\n\n      // Log the final determination\n      console.log(\"Week from \".concat(weekStartStr, \" to \").concat(weekEndStr, \" has \").concat(weekHasBeenFetched ? '' : 'not ', \"been fetched.\"));\n      return !weekHasBeenFetched;\n      // // Extend weekEnd to cover the span of upcoming content from viewingWindowStart\n      // const extendedEnd = this.calculateExtendedEndForUpcomingContent();\n      // let checkWeekEnd = new Date(this.currentWeekEnd); // Work with a copy to avoid side effects\n      //\n      // if (extendedEnd > checkWeekEnd) {\n      //     checkWeekEnd = extendedEnd;\n      // }\n      //\n      // // Now weekEnd includes any additional day(s) that might be displayed\n      // // Adjust the checkWeekEnd to include the entire day\n      // checkWeekEnd.setHours(23, 59, 59, 999);\n      //\n      // const hasDataForExtendedWeek = this.weeklyContent.some(content => {\n      //     const contentDate = new Date(content.start_time);\n      //     return contentDate >= this.currentWeekStart && contentDate <= checkWeekEnd;\n      // });\n      //\n      // console.log('Has data for extended week range:', hasDataForExtendedWeek);\n      // return !hasDataForExtendedWeek;\n    },\n    calculateExtendedEndForUpcomingContent: function calculateExtendedEndForUpcomingContent() {\n      // Assuming viewingWindowStart is the reference start time for upcoming content\n      var baseStartTime = new Date(this.viewingWindowStart);\n      // Extend by 6 hours to cover the upcoming content span\n      // Return the extended end time, potentially adjusting into the next day\n      return new Date(baseStartTime.getTime() + 6 * 60 * 60 * 1000);\n    },\n    // Function to check for and fetch missing upcoming content\n    checkAndFetchForUpcomingContent: function checkAndFetchForUpcomingContent() {\n      var _this10 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {\n        var upcomingDates, now, fifteenMinutesAgo, _iterator, _step, _loop;\n        return _regeneratorRuntime().wrap(function _callee10$(_context11) {\n          while (1) switch (_context11.prev = _context11.next) {\n            case 0:\n              upcomingDates = getUpcomingContentDates(_this10.viewingWindowStart);\n              now = new Date();\n              fifteenMinutesAgo = new Date(now.getTime() - 15 * 60000);\n              _iterator = _createForOfIteratorHelper(upcomingDates);\n              _context11.prev = 4;\n              _loop = /*#__PURE__*/_regeneratorRuntime().mark(function _loop() {\n                var date, dateString, contentCoverageAndFreshness;\n                return _regeneratorRuntime().wrap(function _loop$(_context10) {\n                  while (1) switch (_context10.prev = _context10.next) {\n                    case 0:\n                      date = _step.value;\n                      dateString = date.toISOString().split('T')[0];\n                      contentCoverageAndFreshness = _this10.weeklyContent.some(function (content) {\n                        var contentDate = new Date(content.start_time).toDateString();\n                        var lastFetchedTime = _this10.dataFetchLog[dateString];\n                        var isFresh = lastFetchedTime && new Date(lastFetchedTime) > fifteenMinutesAgo;\n                        return date.toDateString() === contentDate && isFresh;\n                      });\n                      if (contentCoverageAndFreshness) {\n                        _context10.next = 7;\n                        break;\n                      }\n                      _context10.next = 6;\n                      return _this10.fetchDataAndUpdateLog(dateString, date);\n                    case 6:\n                      return _context10.abrupt(\"return\", 1);\n                    case 7:\n                    case \"end\":\n                      return _context10.stop();\n                  }\n                }, _loop);\n              });\n              _iterator.s();\n            case 7:\n              if ((_step = _iterator.n()).done) {\n                _context11.next = 13;\n                break;\n              }\n              return _context11.delegateYield(_loop(), \"t0\", 9);\n            case 9:\n              if (!_context11.t0) {\n                _context11.next = 11;\n                break;\n              }\n              return _context11.abrupt(\"break\", 13);\n            case 11:\n              _context11.next = 7;\n              break;\n            case 13:\n              _context11.next = 18;\n              break;\n            case 15:\n              _context11.prev = 15;\n              _context11.t1 = _context11[\"catch\"](4);\n              _iterator.e(_context11.t1);\n            case 18:\n              _context11.prev = 18;\n              _iterator.f();\n              return _context11.finish(18);\n            case 21:\n            case \"end\":\n              return _context11.stop();\n          }\n        }, _callee10, null, [[4, 15, 18, 21]]);\n      }))();\n    },\n    fetchDataAndUpdateLog: function fetchDataAndUpdateLog(dateString, date) {\n      var _this11 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11() {\n        return _regeneratorRuntime().wrap(function _callee11$(_context12) {\n          while (1) switch (_context12.prev = _context12.next) {\n            case 0:\n              _context12.prev = 0;\n              _context12.next = 3;\n              return _this11.loadWeekFromDate(date);\n            case 3:\n              // Successfully fetched, so update the log\n              _this11.dataFetchLog[dateString] = new Date().toISOString();\n              console.log(\"Data fetched successfully for date:\", dateString);\n              _context12.next = 10;\n              break;\n            case 7:\n              _context12.prev = 7;\n              _context12.t0 = _context12[\"catch\"](0);\n              console.error(\"Failed to fetch data for date \".concat(dateString, \":\"), _context12.t0);\n            case 10:\n            case \"end\":\n              return _context12.stop();\n          }\n        }, _callee11, null, [[0, 7]]);\n      }))();\n    },\n    // Updated to use this.currentWeekStart and this.currentWeekEnd directly\n    fetchWeekDataIfNeeded: function fetchWeekDataIfNeeded() {\n      var _this12 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12() {\n        return _regeneratorRuntime().wrap(function _callee12$(_context13) {\n          while (1) switch (_context13.prev = _context13.next) {\n            case 0:\n              if (!_this12.needsDataForWeek()) {\n                _context13.next = 5;\n                break;\n              }\n              _context13.next = 3;\n              return _this12.checkAndFetchForUpcomingContent()[\"catch\"](function (error) {\n                console.error(\"Failed to load data for the week:\", error);\n                return false; // Indicates failure to fetch when an error occurs\n              });\n            case 3:\n              _context13.next = 6;\n              break;\n            case 5:\n              console.log(\"Week data already loaded; no need to fetch.\");\n            case 6:\n            case \"end\":\n              return _context13.stop();\n          }\n        }, _callee12);\n      }))();\n    }\n  },\n  getters: {\n    nextFourHoursOfContent: function nextFourHoursOfContent(state) {\n      var now = new Date(); // Get the current date and time\n      var start = new Date(now.getFullYear(), now.getMonth(), now.getDate(), now.getHours()); // Set to the top of the current hour\n      var end = new Date(start.getTime() + 4 * 60 * 60 * 1000); // 4 hours later from the start\n\n      // Filter weeklyContent for the next 6 hours window\n      return state.weeklyContent.filter(function (item) {\n        var itemStart = new Date(item.start_time);\n        return itemStart >= start && itemStart < end;\n      }).sort(function (a, b) {\n        return new Date(a.start_time) - new Date(b.start_time);\n      });\n    },\n    nextFourHoursWithHalfHourIntervals: function nextFourHoursWithHalfHourIntervals(state) {\n      var intervals = [];\n      var now = new Date(); // Get the current date and time\n      var current = new Date(now.getFullYear(), now.getMonth(), now.getDate(), now.getHours()); // Set to the top of the current hour\n\n      // Create intervals for the next 4 hours, each 30 minutes apart\n      for (var i = 0; i < 8; i++) {\n        // 4 hours / 30 minutes = 8 intervals\n        intervals.push(current);\n        current = (0,date_fns__WEBPACK_IMPORTED_MODULE_16__.addMinutes)(current, 30); // Move to the next 30-minute interval\n      }\n\n      // Optionally format each time slot for display in your component's header row\n      return intervals.map(function (interval) {\n        return (0,date_fns__WEBPACK_IMPORTED_MODULE_17__.format)(interval, 'hh:mm a');\n      });\n    },\n    upcomingContent: function upcomingContent(state) {\n      var start = new Date(state.viewingWindowStart.getTime() - 60 * 60 * 1000); // 1 hour earlier\n      var end = new Date(start.getTime() + 7 * 60 * 60 * 1000); // 6 hours later\n\n      // Filter weeklyContent for the next 6 hours window\n      return state.weeklyContent.filter(function (item) {\n        var itemStart = new Date(item.start_time);\n        return itemStart >= start && itemStart < end;\n      }).sort(function (a, b) {\n        return new Date(a.start_time) - new Date(b.start_time);\n      });\n    },\n    nextSixHours: function nextSixHours(state) {\n      var adjustedStart = state.viewingWindowStart;\n      var end = (0,date_fns__WEBPACK_IMPORTED_MODULE_6__.addHours)(adjustedStart, 5);\n      return (0,date_fns__WEBPACK_IMPORTED_MODULE_18__.eachHourOfInterval)({\n        start: adjustedStart,\n        end: end\n      });\n    },\n    dateMessage: function dateMessage(state) {\n      var startDay = (0,date_fns__WEBPACK_IMPORTED_MODULE_7__.startOfDay)(state.viewingWindowStart);\n      var formattedDate = (0,date_fns__WEBPACK_IMPORTED_MODULE_17__.format)(startDay, 'EEEE MMMM do, yyyy');\n      if ((0,date_fns__WEBPACK_IMPORTED_MODULE_19__.isToday)(startDay)) {\n        return \"Today - \".concat(formattedDate);\n      } else if ((0,date_fns__WEBPACK_IMPORTED_MODULE_20__.isYesterday)(startDay)) {\n        return \"Yesterday - \".concat(formattedDate);\n      } else if ((0,date_fns__WEBPACK_IMPORTED_MODULE_21__.isTomorrow)(startDay)) {\n        return \"Tomorrow - \".concat(formattedDate);\n      } else {\n        return formattedDate;\n      }\n    },\n    currentMonthIndex: function currentMonthIndex(state) {\n      return (0,date_fns__WEBPACK_IMPORTED_MODULE_22__.getMonth)(state.currentMonth);\n    },\n    // Adds a getter to get the current month's index\n    currentMonthName: function currentMonthName(state) {\n      return (0,date_fns__WEBPACK_IMPORTED_MODULE_17__.format)(state.currentMonth, 'MMMM');\n    },\n    currentYear: function currentYear(state) {\n      return (0,date_fns__WEBPACK_IMPORTED_MODULE_23__.getYear)(state.currentMonth);\n    },\n    daysInMonth: function daysInMonth(state) {\n      var startOfCurrentMonth = (0,date_fns__WEBPACK_IMPORTED_MODULE_24__.startOfMonth)(state.currentMonth);\n      var endOfCurrentMonth = (0,date_fns__WEBPACK_IMPORTED_MODULE_25__.endOfMonth)(state.currentMonth);\n\n      // Adjust these to ensure the grid starts on Sunday and ends on Saturday\n      var startOfGrid = (0,date_fns__WEBPACK_IMPORTED_MODULE_8__.startOfWeek)(startOfCurrentMonth, {\n        weekStartsOn: 0\n      });\n      var endOfGrid = (0,date_fns__WEBPACK_IMPORTED_MODULE_9__.endOfWeek)(endOfCurrentMonth, {\n        weekStartsOn: 0\n      });\n\n      // Generate the days for the calendar grid\n      return (0,date_fns__WEBPACK_IMPORTED_MODULE_26__.eachDayOfInterval)({\n        start: startOfGrid,\n        end: endOfGrid\n      });\n    },\n    isToday: function isToday(state) {\n      var today = new Date();\n      var viewingStart = new Date(state.viewingWindowStart);\n      return today.toDateString() === viewingStart.toDateString();\n    }\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/Stores/ScheduleStore.js\n");

/***/ })

}]);