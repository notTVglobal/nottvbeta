"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk"] = self["webpackChunk"] || []).push([["resources_js_Stores_ScheduleStore_js"],{

/***/ "./resources/js/Stores/ScheduleStore.js":
/*!**********************************************!*\
  !*** ./resources/js/Stores/ScheduleStore.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useScheduleStore: () => (/* binding */ useScheduleStore)\n/* harmony export */ });\n/* harmony import */ var pinia__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! pinia */ \"./node_modules/pinia/dist/pinia.mjs\");\n/* harmony import */ var _Stores_UserStore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/Stores/UserStore */ \"./resources/js/Stores/UserStore.js\");\n/* harmony import */ var _Utilities_TimeUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/Utilities/TimeUtils */ \"./resources/js/Utilities/TimeUtils.js\");\n/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! date-fns */ \"./node_modules/date-fns/addHours.mjs\");\n/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! date-fns */ \"./node_modules/date-fns/startOfDay.mjs\");\n/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! date-fns */ \"./node_modules/date-fns/startOfWeek.mjs\");\n/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! date-fns */ \"./node_modules/date-fns/endOfWeek.mjs\");\n/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! date-fns */ \"./node_modules/date-fns/startOfHour.mjs\");\n/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! date-fns */ \"./node_modules/date-fns/addDays.mjs\");\n/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! date-fns */ \"./node_modules/date-fns/isSameDay.mjs\");\n/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! date-fns */ \"./node_modules/date-fns/getHours.mjs\");\n/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! date-fns */ \"./node_modules/date-fns/subMonths.mjs\");\n/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! date-fns */ \"./node_modules/date-fns/addMonths.mjs\");\n/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! date-fns */ \"./node_modules/date-fns/eachHourOfInterval.mjs\");\n/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! date-fns */ \"./node_modules/date-fns/format.mjs\");\n/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! date-fns */ \"./node_modules/date-fns/isToday.mjs\");\n/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! date-fns */ \"./node_modules/date-fns/isYesterday.mjs\");\n/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! date-fns */ \"./node_modules/date-fns/isTomorrow.mjs\");\n/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! date-fns */ \"./node_modules/date-fns/getMonth.mjs\");\n/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! date-fns */ \"./node_modules/date-fns/getYear.mjs\");\n/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! date-fns */ \"./node_modules/date-fns/startOfMonth.mjs\");\n/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! date-fns */ \"./node_modules/date-fns/endOfMonth.mjs\");\n/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! date-fns */ \"./node_modules/date-fns/eachDayOfInterval.mjs\");\n/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! dayjs */ \"./node_modules/dayjs/dayjs.min.js\");\n/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(dayjs__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var dayjs_plugin_relativeTime__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! dayjs/plugin/relativeTime */ \"./node_modules/dayjs/plugin/relativeTime.js\");\n/* harmony import */ var dayjs_plugin_relativeTime__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(dayjs_plugin_relativeTime__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var dayjs_plugin_timezone__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! dayjs/plugin/timezone */ \"./node_modules/dayjs/plugin/timezone.js\");\n/* harmony import */ var dayjs_plugin_timezone__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(dayjs_plugin_timezone__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var dayjs_plugin_utc__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! dayjs/plugin/utc */ \"./node_modules/dayjs/plugin/utc.js\");\n/* harmony import */ var dayjs_plugin_utc__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(dayjs_plugin_utc__WEBPACK_IMPORTED_MODULE_5__);\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, \"catch\": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : String(i); }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n\n\n\n\n\n// Import dayjs and its plugins\n\n\n\n\n\n// Extend dayjs with the plugins\ndayjs__WEBPACK_IMPORTED_MODULE_2___default().extend((dayjs_plugin_relativeTime__WEBPACK_IMPORTED_MODULE_3___default()));\ndayjs__WEBPACK_IMPORTED_MODULE_2___default().extend((dayjs_plugin_timezone__WEBPACK_IMPORTED_MODULE_4___default()));\ndayjs__WEBPACK_IMPORTED_MODULE_2___default().extend((dayjs_plugin_utc__WEBPACK_IMPORTED_MODULE_5___default()));\nfunction convertScheduleToTimezone(scheduleData) {\n  var userStore = (0,_Stores_UserStore__WEBPACK_IMPORTED_MODULE_0__.useUserStore)(); // Access the UserStore\n\n  return scheduleData.data.map(function (item) {\n    // Convert top-level start_time and end_time using UserStore methods\n    var startTimeInUserTz = item.start_time ? userStore.formatDateTimeFromUtcToUserTimezone(item.start_time, 'YYYY-MM-DD HH:mm:ss') : null;\n    var endTimeInUserTz = item.end_time ? userStore.formatDateTimeFromUtcToUserTimezone(item.end_time, 'YYYY-MM-DD HH:mm:ss') : null;\n\n    // Check and convert recurrenceDetails if present\n    var recurrenceDetailsInUserTz = null;\n    if (item.recurrenceDetails) {\n      var _item$recurrenceDetai = item.recurrenceDetails,\n        start_time = _item$recurrenceDetai.start_time,\n        start_date = _item$recurrenceDetai.start_date,\n        end_date = _item$recurrenceDetai.end_date;\n      recurrenceDetailsInUserTz = _objectSpread(_objectSpread({}, item.recurrenceDetails), {}, {\n        start_time: start_time ? userStore.formatTimeInUserTimezone(start_time, 'HH:mm:ss') : null,\n        start_date: start_date ? userStore.formatDateTimeFromUtcToUserTimezone(start_date, 'YYYY-MM-DD') : null,\n        end_date: end_date ? userStore.formatDateTimeFromUtcToUserTimezone(end_date, 'YYYY-MM-DD') : null\n      });\n    }\n    return _objectSpread(_objectSpread({}, item), {}, {\n      start_time: startTimeInUserTz,\n      end_time: endTimeInUserTz,\n      recurrenceDetails: recurrenceDetailsInUserTz\n    });\n  });\n}\n\n// Helper function to get dates within the next 6 hours from viewingWindowStart\nfunction getUpcomingContentDates(viewingWindowStart) {\n  var dates = [];\n  var start = new Date(viewingWindowStart);\n  for (var i = 0; i < 6; i++) {\n    dates.push(new Date(start.setHours(start.getHours() + i)));\n  }\n  return dates;\n}\nfunction fetchShowsScheduledBetween(state, startDateTime, endDateTime) {\n  // Convert start and end DateTime to the user's timezone for accurate comparison\n  var userStore = (0,_Stores_UserStore__WEBPACK_IMPORTED_MODULE_0__.useUserStore)();\n  var startInUserTZ = userStore.convertUtcToUserTimezone(startDateTime.toISOString());\n  var endInUserTZ = userStore.convertUtcToUserTimezone(endDateTime.toISOString());\n  return state.weeklyContent.filter(function (show) {\n    // Convert show's start time to the same timezone before comparison\n    var showStartTimeInUserTZ = userStore.convertUtcToUserTimezone(show.start_time);\n    return showStartTimeInUserTZ >= startInUserTZ && showStartTimeInUserTZ < endInUserTZ;\n  });\n}\nvar initialState = function initialState() {\n  return {\n    viewingWindowStart: new Date(),\n    currentMonth: new Date(),\n    selectedDay: new Date(),\n    currentWeekStart: null,\n    currentWeekEnd: null,\n    // viewingMode: 'automatic', // or 'userSelected'\n    fiveDaySixHourSchedule: [],\n    // Holds the schedule shows 5 day / 6 hour structured data\n    todaysContent: [],\n    weeklyContent: [],\n    dataFetchLog: [],\n    scheduleIsLoading: false\n  };\n};\nvar useScheduleStore = (0,pinia__WEBPACK_IMPORTED_MODULE_6__.defineStore)('scheduleStore', {\n  state: initialState,\n  actions: {\n    resetAll: function resetAll() {\n      // Reset the store to its original state (clear all data)\n      Object.assign(this, initialState());\n    },\n    reset: function reset() {\n      var now = new Date();\n      this.viewingWindowStart = now;\n      this.currentMonth = now;\n      this.selectedDay = now;\n    },\n    setSelectedDay: function setSelectedDay(day) {\n      var _this = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _this.selectedDay = day;\n              // Explicitly set the viewingWindowStart to 4 AM for the selected day\n              _this.viewingWindowStart = (0,date_fns__WEBPACK_IMPORTED_MODULE_7__.addHours)((0,date_fns__WEBPACK_IMPORTED_MODULE_8__.startOfDay)(day), 4);\n              _this.currentWeekStart = (0,date_fns__WEBPACK_IMPORTED_MODULE_9__.startOfWeek)(day, {\n                weekStartsOn: 0\n              });\n              _this.currentWeekEnd = (0,date_fns__WEBPACK_IMPORTED_MODULE_10__.endOfWeek)(day, {\n                weekStartsOn: 0\n              });\n\n              // // Check if the week of the selected day is already loaded\n              // this.currentWeekStart = startOfWeek(day, {weekStartsOn: 0});\n              // this.currentWeekEnd = endOfWeek(day, {weekStartsOn: 0});\n\n              // Use the updated fetch logic\n              _context.next = 6;\n              return _this.fetchWeekDataIfNeeded();\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }))();\n    },\n    setSelectedDayToToday: function setSelectedDayToToday(day) {\n      var now = new Date();\n      this.selectedDay = now;\n      this.viewingWindowStart = (0,date_fns__WEBPACK_IMPORTED_MODULE_11__.startOfHour)(now);\n    },\n    changeDay: function changeDay(days) {\n      var _this2 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var currentTime, newDay;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              currentTime = _this2.viewingWindowStart.getHours() * 60 + _this2.viewingWindowStart.getMinutes();\n              newDay = (0,date_fns__WEBPACK_IMPORTED_MODULE_12__.addDays)((0,date_fns__WEBPACK_IMPORTED_MODULE_8__.startOfDay)(_this2.viewingWindowStart), days);\n              newDay = new Date(newDay.setMinutes(currentTime)); // Preserve time of day\n\n              _this2.selectedDay = newDay;\n              _this2.viewingWindowStart = newDay;\n\n              // Update the week's range based on the new day\n              _this2.currentWeekStart = (0,date_fns__WEBPACK_IMPORTED_MODULE_9__.startOfWeek)(newDay, {\n                weekStartsOn: 0\n              });\n              _this2.currentWeekEnd = (0,date_fns__WEBPACK_IMPORTED_MODULE_10__.endOfWeek)(newDay, {\n                weekStartsOn: 0\n              });\n\n              // // Check if the week of the new day is already loaded\n              // const weekStart = startOfWeek(newDay, {weekStartsOn: 0});\n              // const weekEnd = endOfWeek(newDay, {weekStartsOn: 0});\n\n              // Use the updated centralized fetch logic without redundant checks\n              _context2.next = 9;\n              return _this2.fetchWeekDataIfNeeded();\n            case 9:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2);\n      }))();\n    },\n    shiftHours: function shiftHours(hours) {\n      var _this3 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              // Shift the viewing window\n              _this3.viewingWindowStart = (0,date_fns__WEBPACK_IMPORTED_MODULE_7__.addHours)(_this3.viewingWindowStart, hours);\n              _this3.currentWeekStart = (0,date_fns__WEBPACK_IMPORTED_MODULE_9__.startOfWeek)(_this3.viewingWindowStart, {\n                weekStartsOn: 0\n              });\n              _this3.currentWeekEnd = (0,date_fns__WEBPACK_IMPORTED_MODULE_10__.endOfWeek)(_this3.viewingWindowStart, {\n                weekStartsOn: 0\n              });\n\n              // // Update selectedDay if the day has changed\n              // if (!isSameDay(this.viewingWindowStart, this.selectedDay)) {\n              //     this.selectedDay = startOfDay(this.viewingWindowStart);\n              // }\n\n              // If the day has changed, update selectedDay and the week's range\n              if (!(0,date_fns__WEBPACK_IMPORTED_MODULE_13__.isSameDay)(_this3.viewingWindowStart, _this3.selectedDay)) {\n                _this3.selectedDay = (0,date_fns__WEBPACK_IMPORTED_MODULE_8__.startOfDay)(_this3.viewingWindowStart);\n              }\n\n              // // Check if the week of the new viewing window is already loaded\n              // this.currentWeekStart = startOfWeek(this.viewingWindowStart, { weekStartsOn: 0 });\n              // this.currentWeekEnd = endOfWeek(this.viewingWindowStart, { weekStartsOn: 0 });\n\n              // Use the updated fetch logic\n              _context3.next = 6;\n              return _this3.fetchWeekDataIfNeeded();\n            case 6:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3);\n      }))();\n    },\n    isElevenPM: function isElevenPM(date) {\n      return (0,date_fns__WEBPACK_IMPORTED_MODULE_14__.getHours)(date) === 23; // Checks if the hour is 23 (11 PM)\n    },\n    // Actions to change the month\n    subtractMonth: function subtractMonth() {\n      var _this4 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              // Subtract one month from the currentMonth\n              _this4.currentMonth = (0,date_fns__WEBPACK_IMPORTED_MODULE_15__.subMonths)(_this4.currentMonth, 1);\n              _context4.prev = 1;\n              _context4.next = 4;\n              return _this4.setSelectedDay(_this4.currentMonth);\n            case 4:\n              console.log('Set selected day based on current month:', _this4.currentMonth);\n              _context4.next = 10;\n              break;\n            case 7:\n              _context4.prev = 7;\n              _context4.t0 = _context4[\"catch\"](1);\n              console.error(\"Failed to set selected day based on current month \".concat(_this4.currentMonth, \":\"), _context4.t0);\n            case 10:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, null, [[1, 7]]);\n      }))();\n    },\n    addMonth: function addMonth() {\n      var _this5 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              _this5.currentMonth = (0,date_fns__WEBPACK_IMPORTED_MODULE_16__.addMonths)(_this5.currentMonth, 1);\n              _context5.prev = 1;\n              _context5.next = 4;\n              return _this5.setSelectedDay(_this5.currentMonth);\n            case 4:\n              console.log('Set selected day based on current month:', _this5.currentMonth);\n              _context5.next = 10;\n              break;\n            case 7:\n              _context5.prev = 7;\n              _context5.t0 = _context5[\"catch\"](1);\n              console.error(\"Failed to set selected day based on current month \".concat(_this5.currentMonth, \":\"), _context5.t0);\n            case 10:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5, null, [[1, 7]]);\n      }))();\n    },\n    fetchFiveDaySixHourSchedule: function fetchFiveDaySixHourSchedule() {\n      var _this6 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n        var userStore, response, _timezone;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              console.error('fetchFiveDaySixHourSchedule');\n              _context6.prev = 1;\n              userStore = (0,_Stores_UserStore__WEBPACK_IMPORTED_MODULE_0__.useUserStore)();\n              _context6.next = 5;\n              return axios.get('/api/schedule');\n            case 5:\n              response = _context6.sent;\n              // Fallback to response timezone if userStore.timezone is not set\n              _timezone = userStore.timezone || response.data.userTimezone || 'UTC'; // Additional fallback to 'UTC'\n              // Convert the entire schedule, including nested recurrenceDetails, to the user's timezone\n              _this6.fiveDaySixHourSchedule = convertScheduleToTimezone(response.data, _timezone);\n              console.error('fetchFiveDaySixHourSchedule', response.data);\n              _context6.next = 14;\n              break;\n            case 11:\n              _context6.prev = 11;\n              _context6.t0 = _context6[\"catch\"](1);\n              console.error('Failed to load schedule shows:', _context6.t0);\n              // Handle the error state as needed, e.g., setting an error state property\n            case 14:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee6, null, [[1, 11]]);\n      }))();\n    },\n    fetchTodaysContent: function fetchTodaysContent() {\n      var _this7 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n        var userStore, response, _timezone2;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.prev = 0;\n              userStore = (0,_Stores_UserStore__WEBPACK_IMPORTED_MODULE_0__.useUserStore)();\n              _context7.next = 4;\n              return axios.get('/api/schedule/today');\n            case 4:\n              response = _context7.sent;\n              // Fallback to response timezone if userStore.timezone is not set\n              _timezone2 = userStore.timezone || response.data.userTimezone || 'UTC'; // Additional fallback to 'UTC'\n              _this7.todaysContent = convertScheduleToTimezone(response.data, _timezone2);\n              _context7.next = 12;\n              break;\n            case 9:\n              _context7.prev = 9;\n              _context7.t0 = _context7[\"catch\"](0);\n              console.error('Failed to fetch today\\'s content:', _context7.t0);\n            case 12:\n            case \"end\":\n              return _context7.stop();\n          }\n        }, _callee7, null, [[0, 9]]);\n      }))();\n    },\n    preloadWeeklyContent: function preloadWeeklyContent() {\n      var _this8 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {\n        var currentDate;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) switch (_context8.prev = _context8.next) {\n            case 0:\n              // Use the current date to preload content for the current week\n              currentDate = new Date();\n              _context8.prev = 1;\n              _context8.next = 4;\n              return _this8.loadWeekFromDate(currentDate);\n            case 4:\n              _context8.next = 9;\n              break;\n            case 6:\n              _context8.prev = 6;\n              _context8.t0 = _context8[\"catch\"](1);\n              console.error('Failed to preload weekly content:', _context8.t0);\n            case 9:\n            case \"end\":\n              return _context8.stop();\n          }\n        }, _callee8, null, [[1, 6]]);\n      }))();\n    },\n    loadWeekFromDate: function loadWeekFromDate(date) {\n      var _this9 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {\n        var formattedDate, userStore, fullISODate, response, _timezone3, newData, weekStart, weekEnd, fetchTime, existingLogIndex;\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) switch (_context9.prev = _context9.next) {\n            case 0:\n              // Declare formattedDate outside of the try block\n              _this9.scheduleIsLoading = true;\n              _context9.prev = 1;\n              userStore = (0,_Stores_UserStore__WEBPACK_IMPORTED_MODULE_0__.useUserStore)(); // Ensure the date is in UTC format for the request\n              console.log('Date before formatted: ' + date);\n              fullISODate = date.toISOString();\n              console.log(\"Loading week data for date in UTC: \".concat(fullISODate));\n\n              // Send the dateTime and timezone as a JSON object in a POST request\n              _context9.next = 8;\n              return axios.post(\"/api/schedule/week/\".concat(fullISODate));\n            case 8:\n              response = _context9.sent;\n              // const formattedDate = date.toISOString().split('T')[0];\n              // console.log(`Loading week data for date: ${formattedDate}`); // Log the date being requested\n              //\n              // const response = await axios.get(`/api/schedule/week/${formattedDate}`);\n              console.log('Received response:', response.data); // Log the raw response data\n\n              // Fallback to response timezone if userStore.timezone is not set\n              _timezone3 = userStore.timezone || response.data.userTimezone || 'UTC'; // Additional fallback to 'UTC'\n              console.log(\"Using timezone: \".concat(_timezone3)); // Log the timezone being used\n              newData = convertScheduleToTimezone(response.data, _timezone3); // Ensure you are accessing the correct data property from the response\n              // Update the fetch log with the current fetch\n              weekStart = (0,date_fns__WEBPACK_IMPORTED_MODULE_9__.startOfWeek)(new Date(date), {\n                weekStartsOn: 0\n              }).toISOString();\n              weekEnd = (0,date_fns__WEBPACK_IMPORTED_MODULE_10__.endOfWeek)(new Date(date), {\n                weekStartsOn: 0\n              }).toISOString();\n              fetchTime = new Date().toISOString();\n              existingLogIndex = _this9.dataFetchLog.findIndex(function (log) {\n                return log.weekStart === weekStart && log.weekEnd === weekEnd;\n              });\n              if (existingLogIndex !== -1) {\n                _this9.dataFetchLog[existingLogIndex].lastFetch = fetchTime;\n              } else {\n                _this9.dataFetchLog.push({\n                  weekStart: weekStart,\n                  weekEnd: weekEnd,\n                  lastFetch: fetchTime\n                });\n              }\n\n              // Merge newData into weeklyContent, avoiding duplicates\n              _this9.weeklyContent = [].concat(_toConsumableArray(_this9.weeklyContent), _toConsumableArray(newData)).filter(function (value, index, self) {\n                return index === self.findIndex(function (t) {\n                  return t.id === value.id && t.start_time === value.start_time;\n                });\n              });\n              _this9.scheduleIsLoading = false;\n              _context9.next = 26;\n              break;\n            case 22:\n              _context9.prev = 22;\n              _context9.t0 = _context9[\"catch\"](1);\n              console.error(\"Failed to load content for week starting \".concat(formattedDate, \":\"), _context9.t0);\n              _this9.scheduleIsLoading = false;\n            case 26:\n            case \"end\":\n              return _context9.stop();\n          }\n        }, _callee9, null, [[1, 22]]);\n      }))();\n    },\n    needsDataForWeek: function needsDataForWeek() {\n      // Helper function to format ISO date strings for easier comparison\n      var formatISODate = function formatISODate(date) {\n        return date.toISOString().split('T')[0];\n      };\n\n      // Current week range in ISO date string format\n      var weekStartStr = formatISODate(this.currentWeekStart);\n      var weekEndStr = formatISODate(this.currentWeekEnd);\n\n      // Enhanced logging for debugging\n      console.log(\"Current week range: \".concat(weekStartStr, \" to \").concat(weekEndStr));\n      console.log('Existing data fetch log entries:', this.dataFetchLog);\n\n      // Iterate through the fetch log to check if the current week has been fetched\n      var weekHasBeenFetched = this.dataFetchLog.some(function (log) {\n        // Convert log dates to ISO string format for comparison\n        var logWeekStartStr = formatISODate(new Date(log.weekStart));\n        var logWeekEndStr = formatISODate(new Date(log.weekEnd));\n\n        // Log each comparison for insight\n        console.log(\"Comparing to fetched range: \".concat(logWeekStartStr, \" to \").concat(logWeekEndStr));\n        return logWeekStartStr <= weekStartStr && logWeekEndStr >= weekEndStr;\n      });\n\n      // Log the final determination\n      console.log(\"Week from \".concat(weekStartStr, \" to \").concat(weekEndStr, \" has \").concat(weekHasBeenFetched ? '' : 'not ', \"been fetched.\"));\n      return !weekHasBeenFetched;\n      // // Extend weekEnd to cover the span of upcoming content from viewingWindowStart\n      // const extendedEnd = this.calculateExtendedEndForUpcomingContent();\n      // let checkWeekEnd = new Date(this.currentWeekEnd); // Work with a copy to avoid side effects\n      //\n      // if (extendedEnd > checkWeekEnd) {\n      //     checkWeekEnd = extendedEnd;\n      // }\n      //\n      // // Now weekEnd includes any additional day(s) that might be displayed\n      // // Adjust the checkWeekEnd to include the entire day\n      // checkWeekEnd.setHours(23, 59, 59, 999);\n      //\n      // const hasDataForExtendedWeek = this.weeklyContent.some(content => {\n      //     const contentDate = new Date(content.start_time);\n      //     return contentDate >= this.currentWeekStart && contentDate <= checkWeekEnd;\n      // });\n      //\n      // console.log('Has data for extended week range:', hasDataForExtendedWeek);\n      // return !hasDataForExtendedWeek;\n    },\n    calculateExtendedEndForUpcomingContent: function calculateExtendedEndForUpcomingContent() {\n      // Assuming viewingWindowStart is the reference start time for upcoming content\n      var baseStartTime = new Date(this.viewingWindowStart);\n      // Extend by 6 hours to cover the upcoming content span\n      // Return the extended end time, potentially adjusting into the next day\n      return new Date(baseStartTime.getTime() + 6 * 60 * 60 * 1000);\n    },\n    // Function to check for and fetch missing upcoming content\n    checkAndFetchForUpcomingContent: function checkAndFetchForUpcomingContent() {\n      var _this10 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {\n        var upcomingDates, now, fifteenMinutesAgo, _iterator, _step, _loop;\n        return _regeneratorRuntime().wrap(function _callee10$(_context11) {\n          while (1) switch (_context11.prev = _context11.next) {\n            case 0:\n              upcomingDates = getUpcomingContentDates(_this10.viewingWindowStart);\n              now = new Date();\n              fifteenMinutesAgo = new Date(now.getTime() - 15 * 60000);\n              _iterator = _createForOfIteratorHelper(upcomingDates);\n              _context11.prev = 4;\n              _loop = /*#__PURE__*/_regeneratorRuntime().mark(function _loop() {\n                var date, dateString, contentCoverageAndFreshness;\n                return _regeneratorRuntime().wrap(function _loop$(_context10) {\n                  while (1) switch (_context10.prev = _context10.next) {\n                    case 0:\n                      date = _step.value;\n                      dateString = date.toISOString().split('T')[0];\n                      contentCoverageAndFreshness = _this10.weeklyContent.some(function (content) {\n                        var contentDate = new Date(content.start_time).toDateString();\n                        var lastFetchedTime = _this10.dataFetchLog[dateString];\n                        var isFresh = lastFetchedTime && new Date(lastFetchedTime) > fifteenMinutesAgo;\n                        return date.toDateString() === contentDate && isFresh;\n                      });\n                      if (contentCoverageAndFreshness) {\n                        _context10.next = 7;\n                        break;\n                      }\n                      _context10.next = 6;\n                      return _this10.fetchDataAndUpdateLog(dateString, date);\n                    case 6:\n                      return _context10.abrupt(\"return\", 1);\n                    case 7:\n                    case \"end\":\n                      return _context10.stop();\n                  }\n                }, _loop);\n              });\n              _iterator.s();\n            case 7:\n              if ((_step = _iterator.n()).done) {\n                _context11.next = 13;\n                break;\n              }\n              return _context11.delegateYield(_loop(), \"t0\", 9);\n            case 9:\n              if (!_context11.t0) {\n                _context11.next = 11;\n                break;\n              }\n              return _context11.abrupt(\"break\", 13);\n            case 11:\n              _context11.next = 7;\n              break;\n            case 13:\n              _context11.next = 18;\n              break;\n            case 15:\n              _context11.prev = 15;\n              _context11.t1 = _context11[\"catch\"](4);\n              _iterator.e(_context11.t1);\n            case 18:\n              _context11.prev = 18;\n              _iterator.f();\n              return _context11.finish(18);\n            case 21:\n            case \"end\":\n              return _context11.stop();\n          }\n        }, _callee10, null, [[4, 15, 18, 21]]);\n      }))();\n    },\n    fetchDataAndUpdateLog: function fetchDataAndUpdateLog(dateString, date) {\n      var _this11 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11() {\n        return _regeneratorRuntime().wrap(function _callee11$(_context12) {\n          while (1) switch (_context12.prev = _context12.next) {\n            case 0:\n              _context12.prev = 0;\n              _context12.next = 3;\n              return _this11.loadWeekFromDate(date);\n            case 3:\n              // Successfully fetched, so update the log\n              _this11.dataFetchLog[dateString] = new Date().toISOString();\n              console.log('Data fetched successfully for date:', dateString);\n              _context12.next = 10;\n              break;\n            case 7:\n              _context12.prev = 7;\n              _context12.t0 = _context12[\"catch\"](0);\n              console.error(\"Failed to fetch data for date \".concat(dateString, \":\"), _context12.t0);\n            case 10:\n            case \"end\":\n              return _context12.stop();\n          }\n        }, _callee11, null, [[0, 7]]);\n      }))();\n    },\n    // Updated to use this.currentWeekStart and this.currentWeekEnd directly\n    fetchWeekDataIfNeeded: function fetchWeekDataIfNeeded() {\n      var _this12 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12() {\n        return _regeneratorRuntime().wrap(function _callee12$(_context13) {\n          while (1) switch (_context13.prev = _context13.next) {\n            case 0:\n              if (!_this12.needsDataForWeek()) {\n                _context13.next = 5;\n                break;\n              }\n              _context13.next = 3;\n              return _this12.checkAndFetchForUpcomingContent()[\"catch\"](function (error) {\n                console.error('Failed to load data for the week:', error);\n                return false; // Indicates failure to fetch when an error occurs\n              });\n            case 3:\n              _context13.next = 6;\n              break;\n            case 5:\n              console.log('Week data already loaded; no need to fetch.');\n            case 6:\n            case \"end\":\n              return _context13.stop();\n          }\n        }, _callee12);\n      }))();\n    },\n    // createTimeSlots(start, durationHours = 4, intervalMinutes = 30) {\n    //     let slots = [];\n    //     for (let i = 0; i < (durationHours * 60) / intervalMinutes; i++) {\n    //         let slotTime = new Date(start.getTime() + i * intervalMinutes * 60000);\n    //         slots.push(slotTime);\n    //     }\n    //     return slots;\n    // },\n    resolveSchedulingConflicts: function resolveSchedulingConflicts(shows) {\n      // Sort shows by start time, then by priority for shows with the same start time\n      var sortedShows = shows.sort(function (a, b) {\n        var startTimeComparison = new Date(a.start_time) - new Date(b.start_time);\n        if (startTimeComparison === 0) {\n          // If start times are the same\n          return a.priority - b.priority; // Compare by priority\n        }\n        return startTimeComparison;\n      });\n      var resolvedShows = [];\n      var showsByStartTime = {};\n\n      // Group shows by their start time\n      sortedShows.forEach(function (show) {\n        var startTime = new Date(show.start_time).toISOString();\n        if (!showsByStartTime[startTime]) {\n          showsByStartTime[startTime] = [];\n        }\n        showsByStartTime[startTime].push(show);\n      });\n\n      // For each start time, select the show with the highest priority (lowest priority number)\n      Object.values(showsByStartTime).forEach(function (group) {\n        if (group.length > 1) {\n          // If there are conflicts, push only the show with the highest priority\n          resolvedShows.push(group[0]); // Assuming the group is already sorted by priority\n        } else {\n          // No conflict, push the single show\n          resolvedShows.push(group[0]);\n        }\n      });\n      return resolvedShows;\n    },\n    adjustShowsForGrid: function adjustShowsForGrid(shows, timeSlots) {\n      return shows.map(function (show) {\n        // Your existing logic for calculating show placement\n        var showStart = new Date(show.start_time);\n        var showEnd = new Date(show.start_time);\n        showEnd.setMinutes(showEnd.getMinutes() + show.durationMinutes);\n        var slotIndex = timeSlots.findIndex(function (slot) {\n          return showStart >= slot && showStart < new Date(slot.getTime() + 30 * 60000);\n        });\n        var span = Math.ceil(show.durationMinutes / 30);\n        if (slotIndex + span > timeSlots.length) {\n          span = timeSlots.length - slotIndex;\n        }\n        return _objectSpread(_objectSpread({}, show), {}, {\n          gridStart: slotIndex + 1,\n          gridSpan: span\n        });\n      });\n    },\n    mapShowsToTimeSlots: function mapShowsToTimeSlots(shows, timeSlots) {\n      var showsWithAdjustedSpans = shows.map(function (show) {\n        var showStart = new Date(show.start_time);\n        var showEnd = new Date(show.start_time);\n        showEnd.setMinutes(showEnd.getMinutes() + show.durationMinutes);\n        var slotIndex = timeSlots.findIndex(function (slot) {\n          return showStart >= slot && showStart < new Date(slot.getTime() + 30 * 60000);\n        });\n\n        // Initially set the span based on the show's duration\n        var span = Math.ceil(show.durationMinutes / 30);\n\n        // Adjust the span if there's an overlap with the next show's start time\n        if (slotIndex + span > timeSlots.length) {\n          span = timeSlots.length - slotIndex; // Adjust to not exceed the grid\n        }\n\n        // Return the show with adjusted span and calculated start index\n        return _objectSpread(_objectSpread({}, show), {}, {\n          gridStart: slotIndex + 1,\n          gridSpan: span\n        });\n      });\n\n      // Now handle placing the shows with adjusted spans in the grid, including placeholders for empty slots\n      var gridItems = timeSlots.map(function (slot, index) {\n        var showForSlot = showsWithAdjustedSpans.find(function (show) {\n          return show.gridStart === index + 1;\n        });\n        if (showForSlot) {\n          return showForSlot;\n        } else {\n          // If no show for this slot, return a placeholder\n          return {\n            placeholder: true,\n            gridStart: index + 1,\n            gridSpan: 1,\n            content: {\n              show: {\n                name: 'Nothing scheduled.'\n              }\n            }\n          };\n        }\n      });\n      return gridItems;\n    },\n    fillEmptySlotsWithPlaceholders: function fillEmptySlotsWithPlaceholders(showsWithPlacement, timeSlots) {\n      var gridItems = [];\n      timeSlots.forEach(function (slot, index) {\n        var slotStart = slot;\n        var showExistsInSlot = showsWithPlacement.some(function (show) {\n          return slotStart >= new Date(show.start_time) && slotStart < new Date(new Date(show.start_time).getTime() + show.durationMinutes * 60000);\n        });\n        if (!showExistsInSlot) {\n          // Insert a placeholder show for this slot\n          gridItems.push({\n            placeholder: true,\n            start_time: slot.toISOString(),\n            gridStart: index + 1,\n            gridSpan: 1,\n            content: {\n              show: {\n                name: 'Nothing scheduled.'\n              }\n            }\n          });\n        }\n      });\n\n      // Merge and sort the grid items by their start time/gridStart to maintain chronological order\n      return [].concat(_toConsumableArray(showsWithPlacement), gridItems).sort(function (a, b) {\n        return a.gridStart - b.gridStart;\n      });\n    }\n  },\n  getters: {\n    nextFourHoursOfContent: function nextFourHoursOfContent(state) {\n      var now = new Date();\n      var startOfCurrentHour = new Date(now.setMinutes(0, 0, 0));\n      var fourHoursLater = new Date(startOfCurrentHour.getTime() + 4 * 60 * 60 * 1000);\n      var timeSlots = (0,_Utilities_TimeUtils__WEBPACK_IMPORTED_MODULE_1__.createTimeSlots)(startOfCurrentHour, 4, 30);\n      var shows = fetchShowsScheduledBetween(state, startOfCurrentHour, fourHoursLater);\n      shows = resolveSchedulingConflicts(shows);\n      var adjustedShows = adjustShowsForGrid(shows, timeSlots);\n      adjustedShows = fillEmptySlotsWithPlaceholders(adjustedShows, timeSlots);\n      return adjustedShows;\n    },\n    // nextFourHoursOfContent: (state) => {\n    //     const userStore = useUserStore()\n    //     const now = new Date() // Current time\n    //     // const startOfCurrentHour = new Date(now.getFullYear(), now.getMonth(), now.getDate(), now.getHours());\n    //     const startOfCurrentHour = new Date(now.setMinutes(0, 0, 0))\n    //     const fourHoursLater = new Date(startOfCurrentHour.getTime() + 4 * 60 * 60 * 1000)\n    //\n    //\n    //     // Create time slots for the next four hours, at 30-minute intervals, in UTC\n    //     const utcTimeSlots = createTimeSlots(startOfCurrentHour, 4, 30)\n    //     // Convert each UTC time slot to the user's local timezone\n    //     const timeSlots = utcTimeSlots.map(slot =>\n    //         new Date(userStore.convertUtcToUserTimezone(slot)),\n    //     )\n    //\n    //     // Iterate over each time slot to either find a show that matches or insert a placeholder\n    //     const filledShows = timeSlots.map((slot, index) => {\n    //         const slotStart = dayjs(slot).format('YYYY-MM-DD HH:mm:ss')\n    //         const matchingShow = state.weeklyContent.find(show => {\n    //             const showStart = dayjs(show.start_time).format('YYYY-MM-DD HH:mm:ss')\n    //             return showStart === slotStart\n    //         })\n    //\n    //         if (matchingShow) {\n    //             // Calculate grid placement based on the show's start time and duration\n    //             return {\n    //                 ...matchingShow,\n    //                 gridStart: index + 1,\n    //                 gridSpan: Math.ceil(matchingShow.durationMinutes / 30),\n    //             }\n    //         } else {\n    //             // Create a placeholder for empty time slots\n    //             return {\n    //                 placeholder: true,\n    //                 start_time: slot.toISOString(),\n    //                 durationMinutes: 30,\n    //                 gridStart: index + 1,\n    //                 gridSpan: 1,\n    //                 content: {show: {name: 'Nothing scheduled.'}},\n    //             }\n    //         }\n    //     })\n    //\n    //     return filledShows\n    // },\n\n    // // Group shows by start time\n    // const showsGroupedByStartTime = state.weeklyContent.reduce((acc, item) => {\n    //     const itemStart = dayjs(item.start_time).format('YYYY-MM-DD HH:mm:ss');\n    //     if (!acc[itemStart]) {\n    //         acc[itemStart] = [];\n    //     }\n    //     acc[itemStart].push(item);\n    //     return acc;\n    // }, {});\n    //\n    // // Select the show with the lowest priority for each start time\n    // const selectedShows = Object.values(showsGroupedByStartTime).map(group => {\n    //     return group.reduce((selected, item) => {\n    //         return !selected || item.priority < selected.priority ? item : selected;\n    //     }, null);\n    // });\n    //\n    // // Sort, adjust for overlaps, and calculate grid placement as before\n    // let sortedShows = selectedShows\n    //     .filter(item => {\n    //         const itemStart = new Date(item.start_time);\n    //         return itemStart >= startOfCurrentHour && itemStart < fourHoursLater;\n    //     })\n    //     .sort((a, b) => {\n    //         const startDiff = new Date(a.start_time) - new Date(b.start_time);\n    //         return startDiff !== 0 ? startDiff : a.priority - b.priority;\n    //     })\n    //     .map((item, index, array) => {\n    //         // Grid placement logic remains the same as before\n    //         // Ensure the span doesn't exceed the grid or become negative\n    //         const itemStart = new Date(item.start_time);\n    //         const slotIndex = timeSlots.findIndex(slot => new Date(item.start_time) >= slot && new Date(item.start_time) < new Date(slot.getTime() + 30 * 60000));\n    //         let durationSlots = Math.ceil(item.durationMinutes / 30);\n    //         if (index < array.length - 1) {\n    //             // Adjust for overlaps with subsequent shows\n    //         }\n    //         const adjustedSpan = Math.max(1, Math.min(durationSlots, timeSlots.length - slotIndex));\n    //         return {\n    //             ...item,\n    //             gridStart: slotIndex + 1,\n    //             gridSpan: adjustedSpan\n    //         };\n    //     });\n\n    // Filter, sort, and adjust shows based on start time, duration, and priority\n    // let sortedShows = state.weeklyContent\n    //     .filter(item => {\n    //         const itemStart = new Date(item.start_time);\n    //         return itemStart >= startOfCurrentHour && itemStart < fourHoursLater;\n    //     })\n    //     .sort((a, b) => {\n    //         // Sort by start time; if equal, then by priority\n    //         const startDiff = new Date(a.start_time) - new Date(b.start_time);\n    //         return startDiff !== 0 ? startDiff : a.priority - b.priority;\n    //     })\n    //     .map((item, index, array) => {\n    //         // Convert back to string format matching start_time format\n    //         const formattedItemStartTime = dayjs(item.start_time).format('YYYY-MM-DD HH:mm:ss');\n    //\n    //         console.log('itemStartTimeInUserTZ: ' + formattedItemStartTime)\n    //         // Calculate grid placement for each show\n    //         const itemStart = new Date(item.start_time);\n    //         const itemEnd = new Date(item.start_time);\n    //         itemEnd.setMinutes(itemEnd.getMinutes() + item.durationMinutes);\n    //\n    //         // Find the index of the slot that the item starts in\n    //         // const slotIndex = timeSlots.findIndex(slot => itemStart >= slot && itemStart < new Date(slot.getTime() + 30 * 60000));\n    //\n    //         // Find the index of the slot that the item starts in\n    //         const slotIndex = timeSlots.findIndex(slot => {\n    //             return formattedItemStartTime >= slot && formattedItemStartTime < new Date(slot.getTime() + 30 * 60000);\n    //         });\n    //\n    //         let durationSlots = Math.ceil(item.durationMinutes / 30);\n    //         // Adjust for overlaps with subsequent shows\n    //         if (index < array.length - 1) {\n    //             const nextItemStart = new Date(array[index + 1].start_time);\n    //             if (itemEnd > nextItemStart) {\n    //                 // If overlap, reduce durationSlots\n    //                 const overlap = Math.ceil((itemEnd - nextItemStart) / (30 * 60000));\n    //                 durationSlots -= overlap;\n    //             }\n    //         }\n    //\n    //         // Ensure the span doesn't exceed the grid or become negative\n    //         const adjustedSpan = Math.max(1, Math.min(durationSlots, timeSlots.length - slotIndex));\n    //\n    //         // Return the adjusted show with grid placement information\n    //         return {\n    //             ...item,\n    //             gridStart: slotIndex + 1, // Grid is 1-indexed\n    //             gridSpan: adjustedSpan\n    //         };\n    //     });\n\n    // Create placeholders for each time slot if there's no show scheduled\n    // const filledShows = timeSlots.map(slot => {\n    //     const formattedSlot = dayjs(slot).format('YYYY-MM-DD HH:mm:ss');\n    //     const showForSlot = sortedShows.find(show => dayjs(show.start_time).format('YYYY-MM-DD HH:mm:ss') === formattedSlot);\n    //\n    //     if (showForSlot) {\n    //         return showForSlot; // Return the actual show if it exists\n    //     } else {\n    //         // Return a placeholder show for empty slots\n    //         return {\n    //             placeholder: true, // Indicate this is a placeholder\n    //             start_time: slot.toISOString(),\n    //             durationMinutes: 30, // Assuming a standard 30-minute slot\n    //             gridStart: timeSlots.indexOf(slot) + 1,\n    //             gridSpan: 1,\n    //             content: {\n    //                 show: {\n    //                     name: \"Nothing scheduled.\"\n    //                 }\n    //             }\n    //         };\n    //     }\n    // });\n\n    // Return the filled array of shows and placeholders\n    // return filledShows;\n    // return sortedShows;\n    // },\n    // nextFourHoursOfContent: (state) => {\n    //     const now = new Date(); // Get the current date and time\n    //     const start = new Date(now.getFullYear(), now.getMonth(), now.getDate(), now.getHours()); // Set to the top of the current hour\n    //     const end = new Date(start.getTime() + 4 * 60 * 60 * 1000); // 4 hours later from the start\n    //\n    //     // Filter weeklyContent for the next 6 hours window\n    //     return state.weeklyContent.filter(item => {\n    //         const itemStart = new Date(item.start_time);\n    //         return itemStart >= start && itemStart < end;\n    //     }).sort((a, b) => new Date(a.start_time) - new Date(b.start_time));\n    // },\n    nextFourHoursWithHalfHourIntervals: function nextFourHoursWithHalfHourIntervals(state) {\n      var userStore = (0,_Stores_UserStore__WEBPACK_IMPORTED_MODULE_0__.useUserStore)(); // Access the user store\n      var userTimezone = userStore.timezone; // Get the user's timezone\n\n      var intervals = [];\n      var now = dayjs__WEBPACK_IMPORTED_MODULE_2___default()().tz(userTimezone); // Get the current time in the user's timezone\n      // Use dayjs to handle time correctly in the specified timezone\n      var current = now.startOf('hour'); // Set to the top of the current hour\n\n      // Generate intervals for the next 4 hours, each 30 minutes apart\n      for (var i = 0; i < 8; i++) {\n        // 4 hours / 30 minutes = 8 intervals\n        // Push an object with both the formatted time for display and the actual DateTime object\n        intervals.push({\n          formatted: current.format('hh:mm A'),\n          // Formatted time for display\n          dateTimeString: current.format('YYYY-MM-DD HH:mm:ss') // Y-m-d H:m:s format for comparisons\n        });\n        current = current.add(30, 'minute'); // Move to the next 30-minute interval\n      }\n      return intervals;\n    },\n    upcomingContent: function upcomingContent(state) {\n      var start = new Date(state.viewingWindowStart.getTime() - 60 * 60 * 1000); // 1 hour earlier\n      var end = new Date(start.getTime() + 7 * 60 * 60 * 1000); // 6 hours later\n\n      // Group shows by start time\n      var showsGroupedByStartTime = state.weeklyContent.reduce(function (acc, item) {\n        var itemStart = new Date(item.start_time).getTime();\n        if (!acc[itemStart]) {\n          acc[itemStart] = [];\n        }\n        acc[itemStart].push(item);\n        return acc;\n      }, {});\n\n      // Select the show with the lowest priority for each start time\n      var selectedShows = Object.values(showsGroupedByStartTime).map(function (group) {\n        return group.reduce(function (selected, item) {\n          return !selected || item.priority < selected.priority ? item : selected;\n        }, null);\n      });\n\n      // Filter, ensuring they fall within the next 6-hour window, and sort\n      return selectedShows.filter(function (item) {\n        var itemStart = new Date(item.start_time);\n        return itemStart >= start && itemStart < end;\n      }).sort(function (a, b) {\n        return new Date(a.start_time) - new Date(b.start_time);\n      });\n\n      // // Filter weeklyContent for the next 6 hours window\n      // return state.weeklyContent.filter(item => {\n      //     const itemStart = new Date(item.start_time);\n      //     return itemStart >= start && itemStart < end;\n      // }).sort((a, b) => new Date(a.start_time) - new Date(b.start_time));\n    },\n    nextSixHours: function nextSixHours(state) {\n      var adjustedStart = state.viewingWindowStart;\n      var end = (0,date_fns__WEBPACK_IMPORTED_MODULE_7__.addHours)(adjustedStart, 5);\n      return (0,date_fns__WEBPACK_IMPORTED_MODULE_17__.eachHourOfInterval)({\n        start: adjustedStart,\n        end: end\n      });\n    },\n    dateMessage: function dateMessage(state) {\n      var startDay = (0,date_fns__WEBPACK_IMPORTED_MODULE_8__.startOfDay)(state.viewingWindowStart);\n      var formattedDate = (0,date_fns__WEBPACK_IMPORTED_MODULE_18__.format)(startDay, 'EEEE MMMM do, yyyy');\n      if ((0,date_fns__WEBPACK_IMPORTED_MODULE_19__.isToday)(startDay)) {\n        return \"Today - \".concat(formattedDate);\n      } else if ((0,date_fns__WEBPACK_IMPORTED_MODULE_20__.isYesterday)(startDay)) {\n        return \"Yesterday - \".concat(formattedDate);\n      } else if ((0,date_fns__WEBPACK_IMPORTED_MODULE_21__.isTomorrow)(startDay)) {\n        return \"Tomorrow - \".concat(formattedDate);\n      } else {\n        return formattedDate;\n      }\n    },\n    currentMonthIndex: function currentMonthIndex(state) {\n      return (0,date_fns__WEBPACK_IMPORTED_MODULE_22__.getMonth)(state.currentMonth);\n    },\n    // Adds a getter to get the current month's index\n    currentMonthName: function currentMonthName(state) {\n      return (0,date_fns__WEBPACK_IMPORTED_MODULE_18__.format)(state.currentMonth, 'MMMM');\n    },\n    currentYear: function currentYear(state) {\n      return (0,date_fns__WEBPACK_IMPORTED_MODULE_23__.getYear)(state.currentMonth);\n    },\n    daysInMonth: function daysInMonth(state) {\n      var startOfCurrentMonth = (0,date_fns__WEBPACK_IMPORTED_MODULE_24__.startOfMonth)(state.currentMonth);\n      var endOfCurrentMonth = (0,date_fns__WEBPACK_IMPORTED_MODULE_25__.endOfMonth)(state.currentMonth);\n\n      // Adjust these to ensure the grid starts on Sunday and ends on Saturday\n      var startOfGrid = (0,date_fns__WEBPACK_IMPORTED_MODULE_9__.startOfWeek)(startOfCurrentMonth, {\n        weekStartsOn: 0\n      });\n      var endOfGrid = (0,date_fns__WEBPACK_IMPORTED_MODULE_10__.endOfWeek)(endOfCurrentMonth, {\n        weekStartsOn: 0\n      });\n\n      // Generate the days for the calendar grid\n      return (0,date_fns__WEBPACK_IMPORTED_MODULE_26__.eachDayOfInterval)({\n        start: startOfGrid,\n        end: endOfGrid\n      });\n    },\n    isToday: function isToday(state) {\n      var today = new Date();\n      var viewingStart = new Date(state.viewingWindowStart);\n      return today.toDateString() === viewingStart.toDateString();\n    }\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvU3RvcmVzL1NjaGVkdWxlU3RvcmUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsrQ0FDQSxxSkFBQUEsbUJBQUEsWUFBQUEsb0JBQUEsV0FBQUMsQ0FBQSxTQUFBQyxDQUFBLEVBQUFELENBQUEsT0FBQUUsQ0FBQSxHQUFBQyxNQUFBLENBQUFDLFNBQUEsRUFBQUMsQ0FBQSxHQUFBSCxDQUFBLENBQUFJLGNBQUEsRUFBQUMsQ0FBQSxHQUFBSixNQUFBLENBQUFLLGNBQUEsY0FBQVAsQ0FBQSxFQUFBRCxDQUFBLEVBQUFFLENBQUEsSUFBQUQsQ0FBQSxDQUFBRCxDQUFBLElBQUFFLENBQUEsQ0FBQU8sS0FBQSxLQUFBQyxDQUFBLHdCQUFBQyxNQUFBLEdBQUFBLE1BQUEsT0FBQUMsQ0FBQSxHQUFBRixDQUFBLENBQUFHLFFBQUEsa0JBQUFDLENBQUEsR0FBQUosQ0FBQSxDQUFBSyxhQUFBLHVCQUFBQyxDQUFBLEdBQUFOLENBQUEsQ0FBQU8sV0FBQSw4QkFBQUMsT0FBQWpCLENBQUEsRUFBQUQsQ0FBQSxFQUFBRSxDQUFBLFdBQUFDLE1BQUEsQ0FBQUssY0FBQSxDQUFBUCxDQUFBLEVBQUFELENBQUEsSUFBQVMsS0FBQSxFQUFBUCxDQUFBLEVBQUFpQixVQUFBLE1BQUFDLFlBQUEsTUFBQUMsUUFBQSxTQUFBcEIsQ0FBQSxDQUFBRCxDQUFBLFdBQUFrQixNQUFBLG1CQUFBakIsQ0FBQSxJQUFBaUIsTUFBQSxZQUFBQSxPQUFBakIsQ0FBQSxFQUFBRCxDQUFBLEVBQUFFLENBQUEsV0FBQUQsQ0FBQSxDQUFBRCxDQUFBLElBQUFFLENBQUEsZ0JBQUFvQixLQUFBckIsQ0FBQSxFQUFBRCxDQUFBLEVBQUFFLENBQUEsRUFBQUcsQ0FBQSxRQUFBSyxDQUFBLEdBQUFWLENBQUEsSUFBQUEsQ0FBQSxDQUFBSSxTQUFBLFlBQUFtQixTQUFBLEdBQUF2QixDQUFBLEdBQUF1QixTQUFBLEVB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SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBOztJQUVBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBOztJQUVBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7O0lBRUE7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTs7SUFFQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQUMsa0NBQWtDLEVBQUUsU0FBQUEsbUNBQUMxTCxLQUFLLEVBQUs7TUFDM0MsSUFBTXRCLFNBQVMsR0FBRzlCLCtEQUFZLENBQUMsQ0FBQyxFQUFDO01BQ2pDLElBQU04SCxZQUFZLEdBQUdoRyxTQUFTLENBQUNMLFFBQVEsRUFBQzs7TUFFeEMsSUFBTXNOLFNBQVMsR0FBRyxFQUFFO01BQ3BCLElBQU1wSyxHQUFHLEdBQUdwRCw0Q0FBSyxDQUFDLENBQUMsQ0FBQ3lOLEVBQUUsQ0FBQ2xILFlBQVksQ0FBQyxFQUFDO01BQ3JDO01BQ0EsSUFBSW1ILE9BQU8sR0FBR3RLLEdBQUcsQ0FBQ3VLLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBQzs7TUFFbEM7TUFDQSxLQUFLLElBQUk3VyxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEVBQUUsRUFBRTtRQUFFO1FBQzFCO1FBQ0EwVyxTQUFTLENBQUMzUyxJQUFJLENBQUM7VUFDWCtTLFNBQVMsRUFBRUYsT0FBTyxDQUFDdk8sTUFBTSxDQUFDLFNBQVMsQ0FBQztVQUFFO1VBQ3RDME8sY0FBYyxFQUFFSCxPQUFPLENBQUN2TyxNQUFNLENBQUMscUJBQXFCLENBQUMsQ0FBRTtRQUMzRCxDQUFDLENBQUM7UUFDRnVPLE9BQU8sR0FBR0EsT0FBTyxDQUFDSSxHQUFHLENBQUMsRUFBRSxFQUFFLFFBQVEsQ0FBQyxFQUFDO01BQ3hDO01BRUEsT0FBT04sU0FBUztJQUNwQixDQUFDO0lBQ0RPLGVBQWUsRUFBRSxTQUFBQSxnQkFBQ2xNLEtBQUssRUFBSztNQUN4QixJQUFNSixLQUFLLEdBQUcsSUFBSUMsSUFBSSxDQUFDRyxLQUFLLENBQUNOLGtCQUFrQixDQUFDMkgsT0FBTyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQyxFQUFDO01BQzVFLElBQU04RSxHQUFHLEdBQUcsSUFBSXRNLElBQUksQ0FBQ0QsS0FBSyxDQUFDeUgsT0FBTyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUMsRUFBQzs7TUFFM0Q7TUFDQSxJQUFNK0UsdUJBQXVCLEdBQUdwTSxLQUFLLENBQUNPLGFBQWEsQ0FBQzhMLE1BQU0sQ0FBQyxVQUFDQyxHQUFHLEVBQUV6TixJQUFJLEVBQUs7UUFDdEUsSUFBTTBOLFNBQVMsR0FBRyxJQUFJMU0sSUFBSSxDQUFDaEIsSUFBSSxDQUFDRSxVQUFVLENBQUMsQ0FBQ3NJLE9BQU8sQ0FBQyxDQUFDO1FBQ3JELElBQUksQ0FBQ2lGLEdBQUcsQ0FBQ0MsU0FBUyxDQUFDLEVBQUU7VUFDakJELEdBQUcsQ0FBQ0MsU0FBUyxDQUFDLEdBQUcsRUFBRTtRQUN2QjtRQUNBRCxHQUFHLENBQUNDLFNBQVMsQ0FBQyxDQUFDdlQsSUFBSSxDQUFDNkYsSUFBSSxDQUFDO1FBQ3pCLE9BQU95TixHQUFHO01BQ2QsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDOztNQUVOO01BQ0EsSUFBTUUsYUFBYSxHQUFHOVgsTUFBTSxDQUFDdUMsTUFBTSxDQUFDbVYsdUJBQXVCLENBQUMsQ0FBQ3hOLEdBQUcsQ0FBQyxVQUFBa0wsS0FBSyxFQUFJO1FBQ3RFLE9BQU9BLEtBQUssQ0FBQ3VDLE1BQU0sQ0FBQyxVQUFDSSxRQUFRLEVBQUU1TixJQUFJLEVBQUs7VUFDcEMsT0FBTyxDQUFDNE4sUUFBUSxJQUFJNU4sSUFBSSxDQUFDNkssUUFBUSxHQUFHK0MsUUFBUSxDQUFDL0MsUUFBUSxHQUFHN0ssSUFBSSxHQUFHNE4sUUFBUTtRQUMzRSxDQUFDLEVBQUUsSUFBSSxDQUFDO01BQ1osQ0FBQyxDQUFDOztNQUVGO01BQ0EsT0FBT0QsYUFBYSxDQUNmelEsTUFBTSxDQUFDLFVBQUE4QyxJQUFJLEVBQUk7UUFDWixJQUFNME4sU0FBUyxHQUFHLElBQUkxTSxJQUFJLENBQUNoQixJQUFJLENBQUNFLFVBQVUsQ0FBQztRQUMzQyxPQUFPd04sU0FBUyxJQUFJM00sS0FBSyxJQUFJMk0sU0FBUyxHQUFHSixHQUFHO01BQ2hELENBQUMsQ0FBQyxDQUNENUMsSUFBSSxDQUFDLFVBQUNwVSxDQUFDLEVBQUVxVSxDQUFDO1FBQUEsT0FBSyxJQUFJM0osSUFBSSxDQUFDMUssQ0FBQyxDQUFDNEosVUFBVSxDQUFDLEdBQUcsSUFBSWMsSUFBSSxDQUFDMkosQ0FBQyxDQUFDekssVUFBVSxDQUFDO01BQUEsRUFBQzs7TUFFcEU7TUFDQTtNQUNBO01BQ0E7TUFDQTtJQUNKLENBQUM7SUFDRDJOLFlBQVksRUFBRSxTQUFBQSxhQUFDMU0sS0FBSyxFQUFLO01BQ3JCLElBQUkyTSxhQUFhLEdBQUczTSxLQUFLLENBQUNOLGtCQUFrQjtNQUM1QyxJQUFNeU0sR0FBRyxHQUFHcFAsa0RBQVEsQ0FBQzRQLGFBQWEsRUFBRSxDQUFDLENBQUM7TUFDdEMsT0FBT3hQLDZEQUFrQixDQUFDO1FBQUN5QyxLQUFLLEVBQUUrTSxhQUFhO1FBQUVSLEdBQUcsRUFBSEE7TUFBRyxDQUFDLENBQUM7SUFDMUQsQ0FBQztJQUNEUyxXQUFXLEVBQUUsU0FBQUEsWUFBQzVNLEtBQUssRUFBSztNQUNwQixJQUFNNk0sUUFBUSxHQUFHL08sb0RBQVUsQ0FBQ2tDLEtBQUssQ0FBQ04sa0JBQWtCLENBQUM7TUFDckQsSUFBTWdHLGFBQWEsR0FBR3BJLGlEQUFNLENBQUN1UCxRQUFRLEVBQUUsb0JBQW9CLENBQUM7TUFDNUQsSUFBSWxQLGtEQUFPLENBQUNrUCxRQUFRLENBQUMsRUFBRTtRQUNuQixrQkFBQWxKLE1BQUEsQ0FBa0IrQixhQUFhO01BQ25DLENBQUMsTUFBTSxJQUFJN0gsc0RBQVcsQ0FBQ2dQLFFBQVEsQ0FBQyxFQUFFO1FBQzlCLHNCQUFBbEosTUFBQSxDQUFzQitCLGFBQWE7TUFDdkMsQ0FBQyxNQUFNLElBQUk5SCxxREFBVSxDQUFDaVAsUUFBUSxDQUFDLEVBQUU7UUFDN0IscUJBQUFsSixNQUFBLENBQXFCK0IsYUFBYTtNQUN0QyxDQUFDLE1BQU07UUFDSCxPQUFPQSxhQUFhO01BQ3hCO0lBQ0osQ0FBQztJQUNEb0gsaUJBQWlCLEVBQUUsU0FBQUEsa0JBQUM5TSxLQUFLO01BQUEsT0FBS3hDLG1EQUFRLENBQUN3QyxLQUFLLENBQUNXLFlBQVksQ0FBQztJQUFBO0lBQUU7SUFDNURvTSxnQkFBZ0IsRUFBRSxTQUFBQSxpQkFBQy9NLEtBQUs7TUFBQSxPQUFLMUMsaURBQU0sQ0FBQzBDLEtBQUssQ0FBQ1csWUFBWSxFQUFFLE1BQU0sQ0FBQztJQUFBO0lBQy9EcU0sV0FBVyxFQUFFLFNBQUFBLFlBQUNoTixLQUFLO01BQUEsT0FBS3ZDLGtEQUFPLENBQUN1QyxLQUFLLENBQUNXLFlBQVksQ0FBQztJQUFBO0lBQ25Ec00sV0FBVyxFQUFFLFNBQUFBLFlBQUNqTixLQUFLLEVBQUs7TUFDcEIsSUFBTWtOLG1CQUFtQixHQUFHbFAsdURBQVksQ0FBQ2dDLEtBQUssQ0FBQ1csWUFBWSxDQUFDO01BQzVELElBQU13TSxpQkFBaUIsR0FBRy9QLHFEQUFVLENBQUM0QyxLQUFLLENBQUNXLFlBQVksQ0FBQzs7TUFFeEQ7TUFDQSxJQUFNeU0sV0FBVyxHQUFHblAscURBQVcsQ0FBQ2lQLG1CQUFtQixFQUFFO1FBQUNwTCxZQUFZLEVBQUU7TUFBQyxDQUFDLENBQUM7TUFDdkUsSUFBTXVMLFNBQVMsR0FBR2hRLG9EQUFTLENBQUM4UCxpQkFBaUIsRUFBRTtRQUFDckwsWUFBWSxFQUFFO01BQUMsQ0FBQyxDQUFDOztNQUVqRTtNQUNBLE9BQU81RSw0REFBaUIsQ0FBQztRQUFDMEMsS0FBSyxFQUFFd04sV0FBVztRQUFFakIsR0FBRyxFQUFFa0I7TUFBUyxDQUFDLENBQUM7SUFDbEUsQ0FBQztJQUNEMVAsT0FBTyxFQUFFLFNBQUFBLFFBQUNxQyxLQUFLLEVBQUs7TUFDaEIsSUFBTXNOLEtBQUssR0FBRyxJQUFJek4sSUFBSSxDQUFDLENBQUM7TUFDeEIsSUFBTTBOLFlBQVksR0FBRyxJQUFJMU4sSUFBSSxDQUFDRyxLQUFLLENBQUNOLGtCQUFrQixDQUFDO01BRXZELE9BQU80TixLQUFLLENBQUMvRSxZQUFZLENBQUMsQ0FBQyxLQUFLZ0YsWUFBWSxDQUFDaEYsWUFBWSxDQUFDLENBQUM7SUFDL0Q7RUFDSjtBQUNKLENBQUMsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3Jlc291cmNlcy9qcy9TdG9yZXMvU2NoZWR1bGVTdG9yZS5qcz83ODI3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGRlZmluZVN0b3JlIH0gZnJvbSAncGluaWEnXG5pbXBvcnQgeyB1c2VVc2VyU3RvcmUgfSBmcm9tICdAL1N0b3Jlcy9Vc2VyU3RvcmUnXG5pbXBvcnQgeyBjcmVhdGVUaW1lU2xvdHMgfSBmcm9tICdAL1V0aWxpdGllcy9UaW1lVXRpbHMnXG5pbXBvcnQge1xuICAgIGFkZERheXMsXG4gICAgYWRkSG91cnMsIGFkZE1pbnV0ZXMsXG4gICAgYWRkTW9udGhzLFxuICAgIGVhY2hEYXlPZkludGVydmFsLFxuICAgIGVhY2hIb3VyT2ZJbnRlcnZhbCxcbiAgICBlbmRPZk1vbnRoLFxuICAgIGVuZE9mV2VlayxcbiAgICBmb3JtYXQsXG4gICAgZ2V0SG91cnMsXG4gICAgZ2V0TW9udGgsXG4gICAgZ2V0WWVhcixcbiAgICBpc1NhbWVEYXksXG4gICAgaXNUb2RheSxcbiAgICBpc1RvbW9ycm93LFxuICAgIGlzWWVzdGVyZGF5LFxuICAgIHN0YXJ0T2ZEYXksXG4gICAgc3RhcnRPZkhvdXIsXG4gICAgc3RhcnRPZk1vbnRoLFxuICAgIHN0YXJ0T2ZXZWVrLFxuICAgIHN1Yk1vbnRocyxcbn0gZnJvbSAnZGF0ZS1mbnMnXG5cbi8vIEltcG9ydCBkYXlqcyBhbmQgaXRzIHBsdWdpbnNcbmltcG9ydCBkYXlqcyBmcm9tICdkYXlqcydcbmltcG9ydCByZWxhdGl2ZVRpbWUgZnJvbSAnZGF5anMvcGx1Z2luL3JlbGF0aXZlVGltZSdcbmltcG9ydCB0aW1lem9uZSBmcm9tICdkYXlqcy9wbHVnaW4vdGltZXpvbmUnXG5pbXBvcnQgdXRjIGZyb20gJ2RheWpzL3BsdWdpbi91dGMnXG5cbi8vIEV4dGVuZCBkYXlqcyB3aXRoIHRoZSBwbHVnaW5zXG5kYXlqcy5leHRlbmQocmVsYXRpdmVUaW1lKVxuZGF5anMuZXh0ZW5kKHRpbWV6b25lKVxuZGF5anMuZXh0ZW5kKHV0YylcblxuZnVuY3Rpb24gY29udmVydFNjaGVkdWxlVG9UaW1lem9uZShzY2hlZHVsZURhdGEpIHtcbiAgICBjb25zdCB1c2VyU3RvcmUgPSB1c2VVc2VyU3RvcmUoKSAvLyBBY2Nlc3MgdGhlIFVzZXJTdG9yZVxuXG4gICAgcmV0dXJuIHNjaGVkdWxlRGF0YS5kYXRhLm1hcChpdGVtID0+IHtcbiAgICAgICAgLy8gQ29udmVydCB0b3AtbGV2ZWwgc3RhcnRfdGltZSBhbmQgZW5kX3RpbWUgdXNpbmcgVXNlclN0b3JlIG1ldGhvZHNcbiAgICAgICAgY29uc3Qgc3RhcnRUaW1lSW5Vc2VyVHogPSBpdGVtLnN0YXJ0X3RpbWUgPyB1c2VyU3RvcmUuZm9ybWF0RGF0ZVRpbWVGcm9tVXRjVG9Vc2VyVGltZXpvbmUoaXRlbS5zdGFydF90aW1lLCAnWVlZWS1NTS1ERCBISDptbTpzcycpIDogbnVsbFxuICAgICAgICBjb25zdCBlbmRUaW1lSW5Vc2VyVHogPSBpdGVtLmVuZF90aW1lID8gdXNlclN0b3JlLmZvcm1hdERhdGVUaW1lRnJvbVV0Y1RvVXNlclRpbWV6b25lKGl0ZW0uZW5kX3RpbWUsICdZWVlZLU1NLUREIEhIOm1tOnNzJykgOiBudWxsXG5cbiAgICAgICAgLy8gQ2hlY2sgYW5kIGNvbnZlcnQgcmVjdXJyZW5jZURldGFpbHMgaWYgcHJlc2VudFxuICAgICAgICBsZXQgcmVjdXJyZW5jZURldGFpbHNJblVzZXJUeiA9IG51bGxcbiAgICAgICAgaWYgKGl0ZW0ucmVjdXJyZW5jZURldGFpbHMpIHtcbiAgICAgICAgICAgIGNvbnN0IHtzdGFydF90aW1lLCBzdGFydF9kYXRlLCBlbmRfZGF0ZX0gPSBpdGVtLnJlY3VycmVuY2VEZXRhaWxzXG4gICAgICAgICAgICByZWN1cnJlbmNlRGV0YWlsc0luVXNlclR6ID0ge1xuICAgICAgICAgICAgICAgIC4uLml0ZW0ucmVjdXJyZW5jZURldGFpbHMsXG4gICAgICAgICAgICAgICAgc3RhcnRfdGltZTogc3RhcnRfdGltZSA/IHVzZXJTdG9yZS5mb3JtYXRUaW1lSW5Vc2VyVGltZXpvbmUoc3RhcnRfdGltZSwgJ0hIOm1tOnNzJykgOiBudWxsLFxuICAgICAgICAgICAgICAgIHN0YXJ0X2RhdGU6IHN0YXJ0X2RhdGUgPyB1c2VyU3RvcmUuZm9ybWF0RGF0ZVRpbWVGcm9tVXRjVG9Vc2VyVGltZXpvbmUoc3RhcnRfZGF0ZSwgJ1lZWVktTU0tREQnKSA6IG51bGwsXG4gICAgICAgICAgICAgICAgZW5kX2RhdGU6IGVuZF9kYXRlID8gdXNlclN0b3JlLmZvcm1hdERhdGVUaW1lRnJvbVV0Y1RvVXNlclRpbWV6b25lKGVuZF9kYXRlLCAnWVlZWS1NTS1ERCcpIDogbnVsbCxcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAuLi5pdGVtLFxuICAgICAgICAgICAgc3RhcnRfdGltZTogc3RhcnRUaW1lSW5Vc2VyVHosXG4gICAgICAgICAgICBlbmRfdGltZTogZW5kVGltZUluVXNlclR6LFxuICAgICAgICAgICAgcmVjdXJyZW5jZURldGFpbHM6IHJlY3VycmVuY2VEZXRhaWxzSW5Vc2VyVHosXG4gICAgICAgIH1cbiAgICB9KVxufVxuXG4vLyBIZWxwZXIgZnVuY3Rpb24gdG8gZ2V0IGRhdGVzIHdpdGhpbiB0aGUgbmV4dCA2IGhvdXJzIGZyb20gdmlld2luZ1dpbmRvd1N0YXJ0XG5mdW5jdGlvbiBnZXRVcGNvbWluZ0NvbnRlbnREYXRlcyh2aWV3aW5nV2luZG93U3RhcnQpIHtcbiAgICBsZXQgZGF0ZXMgPSBbXVxuICAgIGxldCBzdGFydCA9IG5ldyBEYXRlKHZpZXdpbmdXaW5kb3dTdGFydClcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDY7IGkrKykge1xuICAgICAgICBkYXRlcy5wdXNoKG5ldyBEYXRlKHN0YXJ0LnNldEhvdXJzKHN0YXJ0LmdldEhvdXJzKCkgKyBpKSkpXG4gICAgfVxuICAgIHJldHVybiBkYXRlc1xufVxuXG5mdW5jdGlvbiBmZXRjaFNob3dzU2NoZWR1bGVkQmV0d2VlbihzdGF0ZSwgc3RhcnREYXRlVGltZSwgZW5kRGF0ZVRpbWUpIHtcbiAgICAvLyBDb252ZXJ0IHN0YXJ0IGFuZCBlbmQgRGF0ZVRpbWUgdG8gdGhlIHVzZXIncyB0aW1lem9uZSBmb3IgYWNjdXJhdGUgY29tcGFyaXNvblxuICAgIGNvbnN0IHVzZXJTdG9yZSA9IHVzZVVzZXJTdG9yZSgpXG4gICAgY29uc3Qgc3RhcnRJblVzZXJUWiA9IHVzZXJTdG9yZS5jb252ZXJ0VXRjVG9Vc2VyVGltZXpvbmUoc3RhcnREYXRlVGltZS50b0lTT1N0cmluZygpKVxuICAgIGNvbnN0IGVuZEluVXNlclRaID0gdXNlclN0b3JlLmNvbnZlcnRVdGNUb1VzZXJUaW1lem9uZShlbmREYXRlVGltZS50b0lTT1N0cmluZygpKVxuXG4gICAgcmV0dXJuIHN0YXRlLndlZWtseUNvbnRlbnQuZmlsdGVyKHNob3cgPT4ge1xuICAgICAgICAvLyBDb252ZXJ0IHNob3cncyBzdGFydCB0aW1lIHRvIHRoZSBzYW1lIHRpbWV6b25lIGJlZm9yZSBjb21wYXJpc29uXG4gICAgICAgIGNvbnN0IHNob3dTdGFydFRpbWVJblVzZXJUWiA9IHVzZXJTdG9yZS5jb252ZXJ0VXRjVG9Vc2VyVGltZXpvbmUoc2hvdy5zdGFydF90aW1lKVxuICAgICAgICByZXR1cm4gc2hvd1N0YXJ0VGltZUluVXNlclRaID49IHN0YXJ0SW5Vc2VyVFogJiYgc2hvd1N0YXJ0VGltZUluVXNlclRaIDwgZW5kSW5Vc2VyVFpcbiAgICB9KVxufVxuXG5jb25zdCBpbml0aWFsU3RhdGUgPSAoKSA9PiAoe1xuICAgIHZpZXdpbmdXaW5kb3dTdGFydDogbmV3IERhdGUoKSxcbiAgICBjdXJyZW50TW9udGg6IG5ldyBEYXRlKCksXG4gICAgc2VsZWN0ZWREYXk6IG5ldyBEYXRlKCksXG4gICAgY3VycmVudFdlZWtTdGFydDogbnVsbCxcbiAgICBjdXJyZW50V2Vla0VuZDogbnVsbCxcbiAgICAvLyB2aWV3aW5nTW9kZTogJ2F1dG9tYXRpYycsIC8vIG9yICd1c2VyU2VsZWN0ZWQnXG4gICAgZml2ZURheVNpeEhvdXJTY2hlZHVsZTogW10sIC8vIEhvbGRzIHRoZSBzY2hlZHVsZSBzaG93cyA1IGRheSAvIDYgaG91ciBzdHJ1Y3R1cmVkIGRhdGFcbiAgICB0b2RheXNDb250ZW50OiBbXSxcbiAgICB3ZWVrbHlDb250ZW50OiBbXSxcbiAgICBkYXRhRmV0Y2hMb2c6IFtdLFxuICAgIHNjaGVkdWxlSXNMb2FkaW5nOiBmYWxzZSxcbn0pXG5cbmV4cG9ydCBjb25zdCB1c2VTY2hlZHVsZVN0b3JlID0gZGVmaW5lU3RvcmUoJ3NjaGVkdWxlU3RvcmUnLCB7XG4gICAgc3RhdGU6IGluaXRpYWxTdGF0ZSxcbiAgICBhY3Rpb25zOiB7XG4gICAgICAgIHJlc2V0QWxsKCkge1xuICAgICAgICAgICAgLy8gUmVzZXQgdGhlIHN0b3JlIHRvIGl0cyBvcmlnaW5hbCBzdGF0ZSAoY2xlYXIgYWxsIGRhdGEpXG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMsIGluaXRpYWxTdGF0ZSgpKVxuICAgICAgICB9LFxuICAgICAgICByZXNldCgpIHtcbiAgICAgICAgICAgIGNvbnN0IG5vdyA9IG5ldyBEYXRlKClcbiAgICAgICAgICAgIHRoaXMudmlld2luZ1dpbmRvd1N0YXJ0ID0gbm93XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRNb250aCA9IG5vd1xuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZERheSA9IG5vd1xuICAgICAgICB9LFxuICAgICAgICBhc3luYyBzZXRTZWxlY3RlZERheShkYXkpIHtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWREYXkgPSBkYXlcbiAgICAgICAgICAgIC8vIEV4cGxpY2l0bHkgc2V0IHRoZSB2aWV3aW5nV2luZG93U3RhcnQgdG8gNCBBTSBmb3IgdGhlIHNlbGVjdGVkIGRheVxuICAgICAgICAgICAgdGhpcy52aWV3aW5nV2luZG93U3RhcnQgPSBhZGRIb3VycyhzdGFydE9mRGF5KGRheSksIDQpXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRXZWVrU3RhcnQgPSBzdGFydE9mV2VlayhkYXksIHt3ZWVrU3RhcnRzT246IDB9KVxuICAgICAgICAgICAgdGhpcy5jdXJyZW50V2Vla0VuZCA9IGVuZE9mV2VlayhkYXksIHt3ZWVrU3RhcnRzT246IDB9KVxuXG4gICAgICAgICAgICAvLyAvLyBDaGVjayBpZiB0aGUgd2VlayBvZiB0aGUgc2VsZWN0ZWQgZGF5IGlzIGFscmVhZHkgbG9hZGVkXG4gICAgICAgICAgICAvLyB0aGlzLmN1cnJlbnRXZWVrU3RhcnQgPSBzdGFydE9mV2VlayhkYXksIHt3ZWVrU3RhcnRzT246IDB9KTtcbiAgICAgICAgICAgIC8vIHRoaXMuY3VycmVudFdlZWtFbmQgPSBlbmRPZldlZWsoZGF5LCB7d2Vla1N0YXJ0c09uOiAwfSk7XG5cbiAgICAgICAgICAgIC8vIFVzZSB0aGUgdXBkYXRlZCBmZXRjaCBsb2dpY1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5mZXRjaFdlZWtEYXRhSWZOZWVkZWQoKVxuXG4gICAgICAgICAgICAvLyAvLyBGaXJzdCwgY2hlY2sgaWYgd2UgbmVlZCB0byBsb2FkIGRhdGEgZm9yIHRoZSBuZXcgd2Vla1xuICAgICAgICAgICAgLy8gaWYgKHRoaXMubmVlZHNEYXRhRm9yV2Vlayh3ZWVrU3RhcnQsIHdlZWtFbmQpKSB7XG4gICAgICAgICAgICAvLyAgICAgLy8gSWYgbmV3IGRhdGEgaXMgbmVlZGVkIGZvciB0aGUgd2VlaywgbG9hZCBpdFxuICAgICAgICAgICAgLy8gICAgIGF3YWl0IHRoaXMubG9hZFdlZWtGcm9tRGF0ZShkYXkpLmNhdGNoKGVycm9yID0+IHtcbiAgICAgICAgICAgIC8vICAgICAgICAgY29uc29sZS5lcnJvcihcIkZhaWxlZCB0byBsb2FkIGRhdGEgZm9yIHRoZSBuZXcgd2VlazpcIiwgZXJyb3IpO1xuICAgICAgICAgICAgLy8gICAgIH0pO1xuICAgICAgICAgICAgLy8gfVxuXG4gICAgICAgICAgICAvLyBUaGVuLCBjaGVjayBhbmQgZmV0Y2ggZm9yIGFueSBtaXNzaW5nIHVwY29taW5nIGNvbnRlbnRcbiAgICAgICAgICAgIC8vIFRoaXMgaXMgbmVjZXNzYXJ5IGluIGNhc2UgdGhlIHdlZWsgZGF0YSBpcyBwcmVzZW50IGJ1dCBzcGVjaWZpYyB1cGNvbWluZyBjb250ZW50IHdpdGhpbiB0aGUgd2VlayBpcyBtaXNzaW5nXG4gICAgICAgICAgICAvLyBhd2FpdCB0aGlzLmNoZWNrQW5kRmV0Y2hGb3JVcGNvbWluZ0NvbnRlbnQoKTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0U2VsZWN0ZWREYXlUb1RvZGF5KGRheSkge1xuICAgICAgICAgICAgY29uc3Qgbm93ID0gbmV3IERhdGUoKVxuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZERheSA9IG5vd1xuICAgICAgICAgICAgdGhpcy52aWV3aW5nV2luZG93U3RhcnQgPSBzdGFydE9mSG91cihub3cpXG4gICAgICAgIH0sXG4gICAgICAgIGFzeW5jIGNoYW5nZURheShkYXlzKSB7XG4gICAgICAgICAgICBjb25zdCBjdXJyZW50VGltZSA9IHRoaXMudmlld2luZ1dpbmRvd1N0YXJ0LmdldEhvdXJzKCkgKiA2MCArIHRoaXMudmlld2luZ1dpbmRvd1N0YXJ0LmdldE1pbnV0ZXMoKVxuICAgICAgICAgICAgbGV0IG5ld0RheSA9IGFkZERheXMoc3RhcnRPZkRheSh0aGlzLnZpZXdpbmdXaW5kb3dTdGFydCksIGRheXMpXG4gICAgICAgICAgICBuZXdEYXkgPSBuZXcgRGF0ZShuZXdEYXkuc2V0TWludXRlcyhjdXJyZW50VGltZSkpIC8vIFByZXNlcnZlIHRpbWUgb2YgZGF5XG5cbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWREYXkgPSBuZXdEYXlcbiAgICAgICAgICAgIHRoaXMudmlld2luZ1dpbmRvd1N0YXJ0ID0gbmV3RGF5XG5cbiAgICAgICAgICAgIC8vIFVwZGF0ZSB0aGUgd2VlaydzIHJhbmdlIGJhc2VkIG9uIHRoZSBuZXcgZGF5XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRXZWVrU3RhcnQgPSBzdGFydE9mV2VlayhuZXdEYXksIHt3ZWVrU3RhcnRzT246IDB9KVxuICAgICAgICAgICAgdGhpcy5jdXJyZW50V2Vla0VuZCA9IGVuZE9mV2VlayhuZXdEYXksIHt3ZWVrU3RhcnRzT246IDB9KVxuXG4gICAgICAgICAgICAvLyAvLyBDaGVjayBpZiB0aGUgd2VlayBvZiB0aGUgbmV3IGRheSBpcyBhbHJlYWR5IGxvYWRlZFxuICAgICAgICAgICAgLy8gY29uc3Qgd2Vla1N0YXJ0ID0gc3RhcnRPZldlZWsobmV3RGF5LCB7d2Vla1N0YXJ0c09uOiAwfSk7XG4gICAgICAgICAgICAvLyBjb25zdCB3ZWVrRW5kID0gZW5kT2ZXZWVrKG5ld0RheSwge3dlZWtTdGFydHNPbjogMH0pO1xuXG4gICAgICAgICAgICAvLyBVc2UgdGhlIHVwZGF0ZWQgY2VudHJhbGl6ZWQgZmV0Y2ggbG9naWMgd2l0aG91dCByZWR1bmRhbnQgY2hlY2tzXG4gICAgICAgICAgICBhd2FpdCB0aGlzLmZldGNoV2Vla0RhdGFJZk5lZWRlZCgpXG5cbiAgICAgICAgICAgIC8vIC8vIENoZWNrIGZvciB0aGUgbmVlZCB0byBsb2FkIGRhdGEgZm9yIHRoZSBuZXcgd2Vla1xuICAgICAgICAgICAgLy8gaWYgKHRoaXMubmVlZHNEYXRhRm9yV2Vlayh3ZWVrU3RhcnQsIHdlZWtFbmQpKSB7XG4gICAgICAgICAgICAvLyAgICAgYXdhaXQgdGhpcy5sb2FkV2Vla0Zyb21EYXRlKG5ld0RheSkuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgICAgICAgLy8gICAgICAgICBjb25zb2xlLmVycm9yKFwiRmFpbGVkIHRvIGxvYWQgZGF0YSBmb3IgdGhlIG5ldyB3ZWVrOlwiLCBlcnJvcik7XG4gICAgICAgICAgICAvLyAgICAgfSk7XG4gICAgICAgICAgICAvLyB9XG5cbiAgICAgICAgICAgIC8vIC8vIENoZWNrIGZvciB0aGUgbmVlZCB0byBsb2FkIGRhdGEgZm9yIHRoZSBuZXcgd2Vla1xuICAgICAgICAgICAgLy8gaWYgKCF0aGlzLm5lZWRzRGF0YUZvcldlZWsoKSkge1xuICAgICAgICAgICAgLy8gICAgIC8vIERhdGEgZm9yIHRoZSBjdXJyZW50IHdlZWsgaGFzIGFscmVhZHkgYmVlbiBsb2FkZWQ7IHNraXAgZmV0Y2hpbmdcbiAgICAgICAgICAgIC8vICAgICBjb25zb2xlLmxvZyhcIkRhdGEgZm9yIHRoZSBjdXJyZW50IHdlZWsgaGFzIGFscmVhZHkgYmVlbiBsb2FkZWQ7IHNraXBwaW5nIHJlZHVuZGFudCBmZXRjaC5cIik7XG4gICAgICAgICAgICAvLyAgICAgcmV0dXJuO1xuICAgICAgICAgICAgLy8gfVxuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vIC8vIFByb2NlZWQgd2l0aCBkYXRhIGZldGNoaW5nIGlmIG5lZWRlZFxuICAgICAgICAgICAgLy8gYXdhaXQgdGhpcy5jaGVja0FuZEZldGNoRm9yVXBjb21pbmdDb250ZW50KCk7XG4gICAgICAgIH0sXG4gICAgICAgIGFzeW5jIHNoaWZ0SG91cnMoaG91cnMpIHtcbiAgICAgICAgICAgIC8vIFNoaWZ0IHRoZSB2aWV3aW5nIHdpbmRvd1xuICAgICAgICAgICAgdGhpcy52aWV3aW5nV2luZG93U3RhcnQgPSBhZGRIb3Vycyh0aGlzLnZpZXdpbmdXaW5kb3dTdGFydCwgaG91cnMpXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRXZWVrU3RhcnQgPSBzdGFydE9mV2Vlayh0aGlzLnZpZXdpbmdXaW5kb3dTdGFydCwge3dlZWtTdGFydHNPbjogMH0pXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRXZWVrRW5kID0gZW5kT2ZXZWVrKHRoaXMudmlld2luZ1dpbmRvd1N0YXJ0LCB7d2Vla1N0YXJ0c09uOiAwfSlcblxuICAgICAgICAgICAgLy8gLy8gVXBkYXRlIHNlbGVjdGVkRGF5IGlmIHRoZSBkYXkgaGFzIGNoYW5nZWRcbiAgICAgICAgICAgIC8vIGlmICghaXNTYW1lRGF5KHRoaXMudmlld2luZ1dpbmRvd1N0YXJ0LCB0aGlzLnNlbGVjdGVkRGF5KSkge1xuICAgICAgICAgICAgLy8gICAgIHRoaXMuc2VsZWN0ZWREYXkgPSBzdGFydE9mRGF5KHRoaXMudmlld2luZ1dpbmRvd1N0YXJ0KTtcbiAgICAgICAgICAgIC8vIH1cblxuICAgICAgICAgICAgLy8gSWYgdGhlIGRheSBoYXMgY2hhbmdlZCwgdXBkYXRlIHNlbGVjdGVkRGF5IGFuZCB0aGUgd2VlaydzIHJhbmdlXG4gICAgICAgICAgICBpZiAoIWlzU2FtZURheSh0aGlzLnZpZXdpbmdXaW5kb3dTdGFydCwgdGhpcy5zZWxlY3RlZERheSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkRGF5ID0gc3RhcnRPZkRheSh0aGlzLnZpZXdpbmdXaW5kb3dTdGFydClcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gLy8gQ2hlY2sgaWYgdGhlIHdlZWsgb2YgdGhlIG5ldyB2aWV3aW5nIHdpbmRvdyBpcyBhbHJlYWR5IGxvYWRlZFxuICAgICAgICAgICAgLy8gdGhpcy5jdXJyZW50V2Vla1N0YXJ0ID0gc3RhcnRPZldlZWsodGhpcy52aWV3aW5nV2luZG93U3RhcnQsIHsgd2Vla1N0YXJ0c09uOiAwIH0pO1xuICAgICAgICAgICAgLy8gdGhpcy5jdXJyZW50V2Vla0VuZCA9IGVuZE9mV2Vlayh0aGlzLnZpZXdpbmdXaW5kb3dTdGFydCwgeyB3ZWVrU3RhcnRzT246IDAgfSk7XG5cbiAgICAgICAgICAgIC8vIFVzZSB0aGUgdXBkYXRlZCBmZXRjaCBsb2dpY1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5mZXRjaFdlZWtEYXRhSWZOZWVkZWQoKVxuXG4gICAgICAgICAgICAvLyAvLyBDaGVjayBmb3IgdGhlIG5lZWQgdG8gbG9hZCBkYXRhIGZvciB0aGUgbmV3IHdlZWtcbiAgICAgICAgICAgIC8vIGlmICghdGhpcy5uZWVkc0RhdGFGb3JXZWVrKCkpIHtcbiAgICAgICAgICAgIC8vICAgICAvLyBEYXRhIGZvciB0aGUgY3VycmVudCB3ZWVrIGhhcyBhbHJlYWR5IGJlZW4gbG9hZGVkOyBza2lwIGZldGNoaW5nXG4gICAgICAgICAgICAvLyAgICAgY29uc29sZS5sb2coXCJEYXRhIGZvciB0aGUgY3VycmVudCB3ZWVrIGhhcyBhbHJlYWR5IGJlZW4gbG9hZGVkOyBza2lwcGluZyByZWR1bmRhbnQgZmV0Y2guXCIpO1xuICAgICAgICAgICAgLy8gICAgIHJldHVybjtcbiAgICAgICAgICAgIC8vIH1cblxuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vIGF3YWl0IHRoaXMubG9hZFdlZWtGcm9tRGF0ZSh0aGlzLnZpZXdpbmdXaW5kb3dTdGFydCkuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgICAgICAgLy8gICAgIGNvbnNvbGUuZXJyb3IoXCJGYWlsZWQgdG8gbG9hZCBkYXRhIGZvciB0aGUgbmV3IHdlZWs6XCIsIGVycm9yKTtcbiAgICAgICAgICAgIC8vIH0pO1xuXG4gICAgICAgICAgICAvLyBQcm9jZWVkIHdpdGggZGF0YSBmZXRjaGluZyBpZiBuZWVkZWRcbiAgICAgICAgICAgIC8vIGF3YWl0IHRoaXMuY2hlY2tBbmRGZXRjaEZvclVwY29taW5nQ29udGVudCgpO1xuICAgICAgICB9LFxuICAgICAgICBpc0VsZXZlblBNKGRhdGUpIHtcbiAgICAgICAgICAgIHJldHVybiBnZXRIb3VycyhkYXRlKSA9PT0gMjMgLy8gQ2hlY2tzIGlmIHRoZSBob3VyIGlzIDIzICgxMSBQTSlcbiAgICAgICAgfSxcbiAgICAgICAgLy8gQWN0aW9ucyB0byBjaGFuZ2UgdGhlIG1vbnRoXG4gICAgICAgIGFzeW5jIHN1YnRyYWN0TW9udGgoKSB7XG4gICAgICAgICAgICAvLyBTdWJ0cmFjdCBvbmUgbW9udGggZnJvbSB0aGUgY3VycmVudE1vbnRoXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRNb250aCA9IHN1Yk1vbnRocyh0aGlzLmN1cnJlbnRNb250aCwgMSlcblxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnNldFNlbGVjdGVkRGF5KHRoaXMuY3VycmVudE1vbnRoKVxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdTZXQgc2VsZWN0ZWQgZGF5IGJhc2VkIG9uIGN1cnJlbnQgbW9udGg6JywgdGhpcy5jdXJyZW50TW9udGgpXG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYEZhaWxlZCB0byBzZXQgc2VsZWN0ZWQgZGF5IGJhc2VkIG9uIGN1cnJlbnQgbW9udGggJHt0aGlzLmN1cnJlbnRNb250aH06YCwgZXJyb3IpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGFzeW5jIGFkZE1vbnRoKCkge1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50TW9udGggPSBhZGRNb250aHModGhpcy5jdXJyZW50TW9udGgsIDEpXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuc2V0U2VsZWN0ZWREYXkodGhpcy5jdXJyZW50TW9udGgpXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1NldCBzZWxlY3RlZCBkYXkgYmFzZWQgb24gY3VycmVudCBtb250aDonLCB0aGlzLmN1cnJlbnRNb250aClcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihgRmFpbGVkIHRvIHNldCBzZWxlY3RlZCBkYXkgYmFzZWQgb24gY3VycmVudCBtb250aCAke3RoaXMuY3VycmVudE1vbnRofTpgLCBlcnJvcilcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgYXN5bmMgZmV0Y2hGaXZlRGF5U2l4SG91clNjaGVkdWxlKCkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignZmV0Y2hGaXZlRGF5U2l4SG91clNjaGVkdWxlJylcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdXNlclN0b3JlID0gdXNlVXNlclN0b3JlKClcbiAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGF4aW9zLmdldCgnL2FwaS9zY2hlZHVsZScpXG5cbiAgICAgICAgICAgICAgICAvLyBGYWxsYmFjayB0byByZXNwb25zZSB0aW1lem9uZSBpZiB1c2VyU3RvcmUudGltZXpvbmUgaXMgbm90IHNldFxuICAgICAgICAgICAgICAgIGNvbnN0IHRpbWV6b25lID0gdXNlclN0b3JlLnRpbWV6b25lIHx8IHJlc3BvbnNlLmRhdGEudXNlclRpbWV6b25lIHx8ICdVVEMnIC8vIEFkZGl0aW9uYWwgZmFsbGJhY2sgdG8gJ1VUQydcblxuICAgICAgICAgICAgICAgIC8vIENvbnZlcnQgdGhlIGVudGlyZSBzY2hlZHVsZSwgaW5jbHVkaW5nIG5lc3RlZCByZWN1cnJlbmNlRGV0YWlscywgdG8gdGhlIHVzZXIncyB0aW1lem9uZVxuICAgICAgICAgICAgICAgIHRoaXMuZml2ZURheVNpeEhvdXJTY2hlZHVsZSA9IGNvbnZlcnRTY2hlZHVsZVRvVGltZXpvbmUocmVzcG9uc2UuZGF0YSwgdGltZXpvbmUpXG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignZmV0Y2hGaXZlRGF5U2l4SG91clNjaGVkdWxlJywgcmVzcG9uc2UuZGF0YSlcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIGxvYWQgc2NoZWR1bGUgc2hvd3M6JywgZXJyb3IpXG4gICAgICAgICAgICAgICAgLy8gSGFuZGxlIHRoZSBlcnJvciBzdGF0ZSBhcyBuZWVkZWQsIGUuZy4sIHNldHRpbmcgYW4gZXJyb3Igc3RhdGUgcHJvcGVydHlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgYXN5bmMgZmV0Y2hUb2RheXNDb250ZW50KCkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCB1c2VyU3RvcmUgPSB1c2VVc2VyU3RvcmUoKVxuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXhpb3MuZ2V0KCcvYXBpL3NjaGVkdWxlL3RvZGF5JylcblxuICAgICAgICAgICAgICAgIC8vIEZhbGxiYWNrIHRvIHJlc3BvbnNlIHRpbWV6b25lIGlmIHVzZXJTdG9yZS50aW1lem9uZSBpcyBub3Qgc2V0XG4gICAgICAgICAgICAgICAgY29uc3QgdGltZXpvbmUgPSB1c2VyU3RvcmUudGltZXpvbmUgfHwgcmVzcG9uc2UuZGF0YS51c2VyVGltZXpvbmUgfHwgJ1VUQycgLy8gQWRkaXRpb25hbCBmYWxsYmFjayB0byAnVVRDJ1xuXG4gICAgICAgICAgICAgICAgdGhpcy50b2RheXNDb250ZW50ID0gY29udmVydFNjaGVkdWxlVG9UaW1lem9uZShyZXNwb25zZS5kYXRhLCB0aW1lem9uZSlcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIGZldGNoIHRvZGF5XFwncyBjb250ZW50OicsIGVycm9yKVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBhc3luYyBwcmVsb2FkV2Vla2x5Q29udGVudCgpIHtcbiAgICAgICAgICAgIC8vIFVzZSB0aGUgY3VycmVudCBkYXRlIHRvIHByZWxvYWQgY29udGVudCBmb3IgdGhlIGN1cnJlbnQgd2Vla1xuICAgICAgICAgICAgY29uc3QgY3VycmVudERhdGUgPSBuZXcgRGF0ZSgpXG5cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgLy8gQ2FsbCBsb2FkV2Vla0Zyb21EYXRlIHdpdGggdGhlIGN1cnJlbnQgZGF0ZVxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMubG9hZFdlZWtGcm9tRGF0ZShjdXJyZW50RGF0ZSlcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIHByZWxvYWQgd2Vla2x5IGNvbnRlbnQ6JywgZXJyb3IpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGFzeW5jIGxvYWRXZWVrRnJvbURhdGUoZGF0ZSkge1xuICAgICAgICAgICAgbGV0IGZvcm1hdHRlZERhdGUgLy8gRGVjbGFyZSBmb3JtYXR0ZWREYXRlIG91dHNpZGUgb2YgdGhlIHRyeSBibG9ja1xuICAgICAgICAgICAgdGhpcy5zY2hlZHVsZUlzTG9hZGluZyA9IHRydWVcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdXNlclN0b3JlID0gdXNlVXNlclN0b3JlKClcbiAgICAgICAgICAgICAgICAvLyBFbnN1cmUgdGhlIGRhdGUgaXMgaW4gVVRDIGZvcm1hdCBmb3IgdGhlIHJlcXVlc3RcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnRGF0ZSBiZWZvcmUgZm9ybWF0dGVkOiAnICsgZGF0ZSlcbiAgICAgICAgICAgICAgICBjb25zdCBmdWxsSVNPRGF0ZSA9IGRhdGUudG9JU09TdHJpbmcoKVxuXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coYExvYWRpbmcgd2VlayBkYXRhIGZvciBkYXRlIGluIFVUQzogJHtmdWxsSVNPRGF0ZX1gKVxuXG4gICAgICAgICAgICAgICAgLy8gU2VuZCB0aGUgZGF0ZVRpbWUgYW5kIHRpbWV6b25lIGFzIGEgSlNPTiBvYmplY3QgaW4gYSBQT1NUIHJlcXVlc3RcbiAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGF4aW9zLnBvc3QoYC9hcGkvc2NoZWR1bGUvd2Vlay8ke2Z1bGxJU09EYXRlfWApXG5cbiAgICAgICAgICAgICAgICAvLyBjb25zdCBmb3JtYXR0ZWREYXRlID0gZGF0ZS50b0lTT1N0cmluZygpLnNwbGl0KCdUJylbMF07XG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coYExvYWRpbmcgd2VlayBkYXRhIGZvciBkYXRlOiAke2Zvcm1hdHRlZERhdGV9YCk7IC8vIExvZyB0aGUgZGF0ZSBiZWluZyByZXF1ZXN0ZWRcbiAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgIC8vIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXhpb3MuZ2V0KGAvYXBpL3NjaGVkdWxlL3dlZWsvJHtmb3JtYXR0ZWREYXRlfWApO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdSZWNlaXZlZCByZXNwb25zZTonLCByZXNwb25zZS5kYXRhKSAvLyBMb2cgdGhlIHJhdyByZXNwb25zZSBkYXRhXG5cbiAgICAgICAgICAgICAgICAvLyBGYWxsYmFjayB0byByZXNwb25zZSB0aW1lem9uZSBpZiB1c2VyU3RvcmUudGltZXpvbmUgaXMgbm90IHNldFxuICAgICAgICAgICAgICAgIGNvbnN0IHRpbWV6b25lID0gdXNlclN0b3JlLnRpbWV6b25lIHx8IHJlc3BvbnNlLmRhdGEudXNlclRpbWV6b25lIHx8ICdVVEMnIC8vIEFkZGl0aW9uYWwgZmFsbGJhY2sgdG8gJ1VUQydcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgVXNpbmcgdGltZXpvbmU6ICR7dGltZXpvbmV9YCkgLy8gTG9nIHRoZSB0aW1lem9uZSBiZWluZyB1c2VkXG5cbiAgICAgICAgICAgICAgICBjb25zdCBuZXdEYXRhID0gY29udmVydFNjaGVkdWxlVG9UaW1lem9uZShyZXNwb25zZS5kYXRhLCB0aW1lem9uZSkgLy8gRW5zdXJlIHlvdSBhcmUgYWNjZXNzaW5nIHRoZSBjb3JyZWN0IGRhdGEgcHJvcGVydHkgZnJvbSB0aGUgcmVzcG9uc2VcblxuICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSB0aGUgZmV0Y2ggbG9nIHdpdGggdGhlIGN1cnJlbnQgZmV0Y2hcbiAgICAgICAgICAgICAgICBjb25zdCB3ZWVrU3RhcnQgPSBzdGFydE9mV2VlayhuZXcgRGF0ZShkYXRlKSwge3dlZWtTdGFydHNPbjogMH0pLnRvSVNPU3RyaW5nKClcbiAgICAgICAgICAgICAgICBjb25zdCB3ZWVrRW5kID0gZW5kT2ZXZWVrKG5ldyBEYXRlKGRhdGUpLCB7d2Vla1N0YXJ0c09uOiAwfSkudG9JU09TdHJpbmcoKVxuICAgICAgICAgICAgICAgIGNvbnN0IGZldGNoVGltZSA9IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKVxuXG4gICAgICAgICAgICAgICAgY29uc3QgZXhpc3RpbmdMb2dJbmRleCA9IHRoaXMuZGF0YUZldGNoTG9nLmZpbmRJbmRleChsb2cgPT4gbG9nLndlZWtTdGFydCA9PT0gd2Vla1N0YXJ0ICYmIGxvZy53ZWVrRW5kID09PSB3ZWVrRW5kKVxuICAgICAgICAgICAgICAgIGlmIChleGlzdGluZ0xvZ0luZGV4ICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGFGZXRjaExvZ1tleGlzdGluZ0xvZ0luZGV4XS5sYXN0RmV0Y2ggPSBmZXRjaFRpbWVcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGFGZXRjaExvZy5wdXNoKHt3ZWVrU3RhcnQsIHdlZWtFbmQsIGxhc3RGZXRjaDogZmV0Y2hUaW1lfSlcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBNZXJnZSBuZXdEYXRhIGludG8gd2Vla2x5Q29udGVudCwgYXZvaWRpbmcgZHVwbGljYXRlc1xuICAgICAgICAgICAgICAgIHRoaXMud2Vla2x5Q29udGVudCA9IFsuLi50aGlzLndlZWtseUNvbnRlbnQsIC4uLm5ld0RhdGFdLmZpbHRlcigodmFsdWUsIGluZGV4LCBzZWxmKSA9PlxuICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXggPT09IHNlbGYuZmluZEluZGV4KCh0KSA9PiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5pZCA9PT0gdmFsdWUuaWQgJiYgdC5zdGFydF90aW1lID09PSB2YWx1ZS5zdGFydF90aW1lXG4gICAgICAgICAgICAgICAgICAgICAgICApKSxcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgdGhpcy5zY2hlZHVsZUlzTG9hZGluZyA9IGZhbHNlXG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYEZhaWxlZCB0byBsb2FkIGNvbnRlbnQgZm9yIHdlZWsgc3RhcnRpbmcgJHtmb3JtYXR0ZWREYXRlfTpgLCBlcnJvcilcbiAgICAgICAgICAgICAgICB0aGlzLnNjaGVkdWxlSXNMb2FkaW5nID0gZmFsc2VcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbmVlZHNEYXRhRm9yV2VlaygpIHtcbiAgICAgICAgICAgIC8vIEhlbHBlciBmdW5jdGlvbiB0byBmb3JtYXQgSVNPIGRhdGUgc3RyaW5ncyBmb3IgZWFzaWVyIGNvbXBhcmlzb25cbiAgICAgICAgICAgIGNvbnN0IGZvcm1hdElTT0RhdGUgPSBkYXRlID0+IGRhdGUudG9JU09TdHJpbmcoKS5zcGxpdCgnVCcpWzBdXG5cbiAgICAgICAgICAgIC8vIEN1cnJlbnQgd2VlayByYW5nZSBpbiBJU08gZGF0ZSBzdHJpbmcgZm9ybWF0XG4gICAgICAgICAgICBjb25zdCB3ZWVrU3RhcnRTdHIgPSBmb3JtYXRJU09EYXRlKHRoaXMuY3VycmVudFdlZWtTdGFydClcbiAgICAgICAgICAgIGNvbnN0IHdlZWtFbmRTdHIgPSBmb3JtYXRJU09EYXRlKHRoaXMuY3VycmVudFdlZWtFbmQpXG5cbiAgICAgICAgICAgIC8vIEVuaGFuY2VkIGxvZ2dpbmcgZm9yIGRlYnVnZ2luZ1xuICAgICAgICAgICAgY29uc29sZS5sb2coYEN1cnJlbnQgd2VlayByYW5nZTogJHt3ZWVrU3RhcnRTdHJ9IHRvICR7d2Vla0VuZFN0cn1gKVxuICAgICAgICAgICAgY29uc29sZS5sb2coJ0V4aXN0aW5nIGRhdGEgZmV0Y2ggbG9nIGVudHJpZXM6JywgdGhpcy5kYXRhRmV0Y2hMb2cpXG5cbiAgICAgICAgICAgIC8vIEl0ZXJhdGUgdGhyb3VnaCB0aGUgZmV0Y2ggbG9nIHRvIGNoZWNrIGlmIHRoZSBjdXJyZW50IHdlZWsgaGFzIGJlZW4gZmV0Y2hlZFxuICAgICAgICAgICAgY29uc3Qgd2Vla0hhc0JlZW5GZXRjaGVkID0gdGhpcy5kYXRhRmV0Y2hMb2cuc29tZShsb2cgPT4ge1xuICAgICAgICAgICAgICAgIC8vIENvbnZlcnQgbG9nIGRhdGVzIHRvIElTTyBzdHJpbmcgZm9ybWF0IGZvciBjb21wYXJpc29uXG4gICAgICAgICAgICAgICAgY29uc3QgbG9nV2Vla1N0YXJ0U3RyID0gZm9ybWF0SVNPRGF0ZShuZXcgRGF0ZShsb2cud2Vla1N0YXJ0KSlcbiAgICAgICAgICAgICAgICBjb25zdCBsb2dXZWVrRW5kU3RyID0gZm9ybWF0SVNPRGF0ZShuZXcgRGF0ZShsb2cud2Vla0VuZCkpXG5cbiAgICAgICAgICAgICAgICAvLyBMb2cgZWFjaCBjb21wYXJpc29uIGZvciBpbnNpZ2h0XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coYENvbXBhcmluZyB0byBmZXRjaGVkIHJhbmdlOiAke2xvZ1dlZWtTdGFydFN0cn0gdG8gJHtsb2dXZWVrRW5kU3RyfWApXG5cbiAgICAgICAgICAgICAgICByZXR1cm4gbG9nV2Vla1N0YXJ0U3RyIDw9IHdlZWtTdGFydFN0ciAmJiBsb2dXZWVrRW5kU3RyID49IHdlZWtFbmRTdHJcbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgIC8vIExvZyB0aGUgZmluYWwgZGV0ZXJtaW5hdGlvblxuICAgICAgICAgICAgY29uc29sZS5sb2coYFdlZWsgZnJvbSAke3dlZWtTdGFydFN0cn0gdG8gJHt3ZWVrRW5kU3RyfSBoYXMgJHt3ZWVrSGFzQmVlbkZldGNoZWQgPyAnJyA6ICdub3QgJ31iZWVuIGZldGNoZWQuYClcblxuICAgICAgICAgICAgcmV0dXJuICF3ZWVrSGFzQmVlbkZldGNoZWRcbiAgICAgICAgICAgIC8vIC8vIEV4dGVuZCB3ZWVrRW5kIHRvIGNvdmVyIHRoZSBzcGFuIG9mIHVwY29taW5nIGNvbnRlbnQgZnJvbSB2aWV3aW5nV2luZG93U3RhcnRcbiAgICAgICAgICAgIC8vIGNvbnN0IGV4dGVuZGVkRW5kID0gdGhpcy5jYWxjdWxhdGVFeHRlbmRlZEVuZEZvclVwY29taW5nQ29udGVudCgpO1xuICAgICAgICAgICAgLy8gbGV0IGNoZWNrV2Vla0VuZCA9IG5ldyBEYXRlKHRoaXMuY3VycmVudFdlZWtFbmQpOyAvLyBXb3JrIHdpdGggYSBjb3B5IHRvIGF2b2lkIHNpZGUgZWZmZWN0c1xuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vIGlmIChleHRlbmRlZEVuZCA+IGNoZWNrV2Vla0VuZCkge1xuICAgICAgICAgICAgLy8gICAgIGNoZWNrV2Vla0VuZCA9IGV4dGVuZGVkRW5kO1xuICAgICAgICAgICAgLy8gfVxuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vIC8vIE5vdyB3ZWVrRW5kIGluY2x1ZGVzIGFueSBhZGRpdGlvbmFsIGRheShzKSB0aGF0IG1pZ2h0IGJlIGRpc3BsYXllZFxuICAgICAgICAgICAgLy8gLy8gQWRqdXN0IHRoZSBjaGVja1dlZWtFbmQgdG8gaW5jbHVkZSB0aGUgZW50aXJlIGRheVxuICAgICAgICAgICAgLy8gY2hlY2tXZWVrRW5kLnNldEhvdXJzKDIzLCA1OSwgNTksIDk5OSk7XG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgLy8gY29uc3QgaGFzRGF0YUZvckV4dGVuZGVkV2VlayA9IHRoaXMud2Vla2x5Q29udGVudC5zb21lKGNvbnRlbnQgPT4ge1xuICAgICAgICAgICAgLy8gICAgIGNvbnN0IGNvbnRlbnREYXRlID0gbmV3IERhdGUoY29udGVudC5zdGFydF90aW1lKTtcbiAgICAgICAgICAgIC8vICAgICByZXR1cm4gY29udGVudERhdGUgPj0gdGhpcy5jdXJyZW50V2Vla1N0YXJ0ICYmIGNvbnRlbnREYXRlIDw9IGNoZWNrV2Vla0VuZDtcbiAgICAgICAgICAgIC8vIH0pO1xuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdIYXMgZGF0YSBmb3IgZXh0ZW5kZWQgd2VlayByYW5nZTonLCBoYXNEYXRhRm9yRXh0ZW5kZWRXZWVrKTtcbiAgICAgICAgICAgIC8vIHJldHVybiAhaGFzRGF0YUZvckV4dGVuZGVkV2VlaztcbiAgICAgICAgfSxcbiAgICAgICAgY2FsY3VsYXRlRXh0ZW5kZWRFbmRGb3JVcGNvbWluZ0NvbnRlbnQoKSB7XG4gICAgICAgICAgICAvLyBBc3N1bWluZyB2aWV3aW5nV2luZG93U3RhcnQgaXMgdGhlIHJlZmVyZW5jZSBzdGFydCB0aW1lIGZvciB1cGNvbWluZyBjb250ZW50XG4gICAgICAgICAgICBjb25zdCBiYXNlU3RhcnRUaW1lID0gbmV3IERhdGUodGhpcy52aWV3aW5nV2luZG93U3RhcnQpXG4gICAgICAgICAgICAvLyBFeHRlbmQgYnkgNiBob3VycyB0byBjb3ZlciB0aGUgdXBjb21pbmcgY29udGVudCBzcGFuXG4gICAgICAgICAgICAvLyBSZXR1cm4gdGhlIGV4dGVuZGVkIGVuZCB0aW1lLCBwb3RlbnRpYWxseSBhZGp1c3RpbmcgaW50byB0aGUgbmV4dCBkYXlcbiAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZShiYXNlU3RhcnRUaW1lLmdldFRpbWUoKSArICg2ICogNjAgKiA2MCAqIDEwMDApKVxuICAgICAgICB9LFxuICAgICAgICAvLyBGdW5jdGlvbiB0byBjaGVjayBmb3IgYW5kIGZldGNoIG1pc3NpbmcgdXBjb21pbmcgY29udGVudFxuICAgICAgICBhc3luYyBjaGVja0FuZEZldGNoRm9yVXBjb21pbmdDb250ZW50KCkge1xuICAgICAgICAgICAgY29uc3QgdXBjb21pbmdEYXRlcyA9IGdldFVwY29taW5nQ29udGVudERhdGVzKHRoaXMudmlld2luZ1dpbmRvd1N0YXJ0KVxuICAgICAgICAgICAgY29uc3Qgbm93ID0gbmV3IERhdGUoKVxuICAgICAgICAgICAgY29uc3QgZmlmdGVlbk1pbnV0ZXNBZ28gPSBuZXcgRGF0ZShub3cuZ2V0VGltZSgpIC0gMTUgKiA2MDAwMClcblxuICAgICAgICAgICAgZm9yIChjb25zdCBkYXRlIG9mIHVwY29taW5nRGF0ZXMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRlU3RyaW5nID0gZGF0ZS50b0lTT1N0cmluZygpLnNwbGl0KCdUJylbMF1cbiAgICAgICAgICAgICAgICBjb25zdCBjb250ZW50Q292ZXJhZ2VBbmRGcmVzaG5lc3MgPSB0aGlzLndlZWtseUNvbnRlbnQuc29tZShjb250ZW50ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29udGVudERhdGUgPSBuZXcgRGF0ZShjb250ZW50LnN0YXJ0X3RpbWUpLnRvRGF0ZVN0cmluZygpXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxhc3RGZXRjaGVkVGltZSA9IHRoaXMuZGF0YUZldGNoTG9nW2RhdGVTdHJpbmddXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGlzRnJlc2ggPSBsYXN0RmV0Y2hlZFRpbWUgJiYgbmV3IERhdGUobGFzdEZldGNoZWRUaW1lKSA+IGZpZnRlZW5NaW51dGVzQWdvXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXRlLnRvRGF0ZVN0cmluZygpID09PSBjb250ZW50RGF0ZSAmJiBpc0ZyZXNoXG4gICAgICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgICAgIGlmICghY29udGVudENvdmVyYWdlQW5kRnJlc2huZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFRoaXMgZGF0ZSBuZWVkcyBkYXRhIGZldGNoaW5nXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuZmV0Y2hEYXRhQW5kVXBkYXRlTG9nKGRhdGVTdHJpbmcsIGRhdGUpXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrIC8vIEFzc3VtaW5nIHlvdSBmZXRjaCBkYXRhIGZvciB0aGUgd2Vlaywgc28gbm8gbmVlZCB0byBjaGVjayBmdXJ0aGVyIGRhdGVzIHdpdGhpbiB0aGUgc2FtZSB3ZWVrXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBhc3luYyBmZXRjaERhdGFBbmRVcGRhdGVMb2coZGF0ZVN0cmluZywgZGF0ZSkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmxvYWRXZWVrRnJvbURhdGUoZGF0ZSlcbiAgICAgICAgICAgICAgICAvLyBTdWNjZXNzZnVsbHkgZmV0Y2hlZCwgc28gdXBkYXRlIHRoZSBsb2dcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGFGZXRjaExvZ1tkYXRlU3RyaW5nXSA9IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKVxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdEYXRhIGZldGNoZWQgc3VjY2Vzc2Z1bGx5IGZvciBkYXRlOicsIGRhdGVTdHJpbmcpXG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYEZhaWxlZCB0byBmZXRjaCBkYXRhIGZvciBkYXRlICR7ZGF0ZVN0cmluZ306YCwgZXJyb3IpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgLy8gVXBkYXRlZCB0byB1c2UgdGhpcy5jdXJyZW50V2Vla1N0YXJ0IGFuZCB0aGlzLmN1cnJlbnRXZWVrRW5kIGRpcmVjdGx5XG4gICAgICAgIGFzeW5jIGZldGNoV2Vla0RhdGFJZk5lZWRlZCgpIHtcbiAgICAgICAgICAgIC8vIEFzc3VtZXMgdGhpcy5jdXJyZW50V2Vla1N0YXJ0IGFuZCB0aGlzLmN1cnJlbnRXZWVrRW5kIGFyZSBhbHJlYWR5IHNldFxuICAgICAgICAgICAgaWYgKHRoaXMubmVlZHNEYXRhRm9yV2VlaygpKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5jaGVja0FuZEZldGNoRm9yVXBjb21pbmdDb250ZW50KCkuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gbG9hZCBkYXRhIGZvciB0aGUgd2VlazonLCBlcnJvcilcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlIC8vIEluZGljYXRlcyBmYWlsdXJlIHRvIGZldGNoIHdoZW4gYW4gZXJyb3Igb2NjdXJzXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAvLyBhd2FpdCB0aGlzLmxvYWRXZWVrRnJvbURhdGUodGhpcy5jdXJyZW50V2Vla1N0YXJ0KS5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgICAgICAgICAgLy8gICAgIGNvbnNvbGUuZXJyb3IoXCJGYWlsZWQgdG8gbG9hZCBkYXRhIGZvciB0aGUgd2VlazpcIiwgZXJyb3IpO1xuICAgICAgICAgICAgICAgIC8vICAgICByZXR1cm4gZmFsc2U7IC8vIEluZGljYXRlcyBmYWlsdXJlIHRvIGZldGNoIHdoZW4gYW4gZXJyb3Igb2NjdXJzXG4gICAgICAgICAgICAgICAgLy8gfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdXZWVrIGRhdGEgYWxyZWFkeSBsb2FkZWQ7IG5vIG5lZWQgdG8gZmV0Y2guJylcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQ29uZGl0aW9uYWxseSBjaGVjayBmb3IgbWlzc2luZyB1cGNvbWluZyBjb250ZW50IHdpdGhpbiB0aGUgY3VycmVudCB3ZWVrXG4gICAgICAgICAgICAvLyBvbmx5IGlmIG5ldyB3ZWVrIGRhdGEgaGFzbid0IGJlZW4gZmV0Y2hlZC5cbiAgICAgICAgICAgIC8vIGlmICghZGF0YUZldGNoZWQpIHtcbiAgICAgICAgICAgIC8vICAgICBhd2FpdCB0aGlzLmNoZWNrQW5kRmV0Y2hGb3JVcGNvbWluZ0NvbnRlbnQoKTtcbiAgICAgICAgICAgIC8vIH1cbiAgICAgICAgfSxcbiAgICAgICAgLy8gY3JlYXRlVGltZVNsb3RzKHN0YXJ0LCBkdXJhdGlvbkhvdXJzID0gNCwgaW50ZXJ2YWxNaW51dGVzID0gMzApIHtcbiAgICAgICAgLy8gICAgIGxldCBzbG90cyA9IFtdO1xuICAgICAgICAvLyAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAoZHVyYXRpb25Ib3VycyAqIDYwKSAvIGludGVydmFsTWludXRlczsgaSsrKSB7XG4gICAgICAgIC8vICAgICAgICAgbGV0IHNsb3RUaW1lID0gbmV3IERhdGUoc3RhcnQuZ2V0VGltZSgpICsgaSAqIGludGVydmFsTWludXRlcyAqIDYwMDAwKTtcbiAgICAgICAgLy8gICAgICAgICBzbG90cy5wdXNoKHNsb3RUaW1lKTtcbiAgICAgICAgLy8gICAgIH1cbiAgICAgICAgLy8gICAgIHJldHVybiBzbG90cztcbiAgICAgICAgLy8gfSxcblxuICAgICAgICByZXNvbHZlU2NoZWR1bGluZ0NvbmZsaWN0cyhzaG93cykge1xuICAgICAgICAgICAgLy8gU29ydCBzaG93cyBieSBzdGFydCB0aW1lLCB0aGVuIGJ5IHByaW9yaXR5IGZvciBzaG93cyB3aXRoIHRoZSBzYW1lIHN0YXJ0IHRpbWVcbiAgICAgICAgICAgIGNvbnN0IHNvcnRlZFNob3dzID0gc2hvd3Muc29ydCgoYSwgYikgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHN0YXJ0VGltZUNvbXBhcmlzb24gPSBuZXcgRGF0ZShhLnN0YXJ0X3RpbWUpIC0gbmV3IERhdGUoYi5zdGFydF90aW1lKVxuICAgICAgICAgICAgICAgIGlmIChzdGFydFRpbWVDb21wYXJpc29uID09PSAwKSB7IC8vIElmIHN0YXJ0IHRpbWVzIGFyZSB0aGUgc2FtZVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYS5wcmlvcml0eSAtIGIucHJpb3JpdHkgLy8gQ29tcGFyZSBieSBwcmlvcml0eVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gc3RhcnRUaW1lQ29tcGFyaXNvblxuICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgY29uc3QgcmVzb2x2ZWRTaG93cyA9IFtdXG4gICAgICAgICAgICBjb25zdCBzaG93c0J5U3RhcnRUaW1lID0ge31cblxuICAgICAgICAgICAgLy8gR3JvdXAgc2hvd3MgYnkgdGhlaXIgc3RhcnQgdGltZVxuICAgICAgICAgICAgc29ydGVkU2hvd3MuZm9yRWFjaChzaG93ID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBzdGFydFRpbWUgPSBuZXcgRGF0ZShzaG93LnN0YXJ0X3RpbWUpLnRvSVNPU3RyaW5nKClcbiAgICAgICAgICAgICAgICBpZiAoIXNob3dzQnlTdGFydFRpbWVbc3RhcnRUaW1lXSkge1xuICAgICAgICAgICAgICAgICAgICBzaG93c0J5U3RhcnRUaW1lW3N0YXJ0VGltZV0gPSBbXVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzaG93c0J5U3RhcnRUaW1lW3N0YXJ0VGltZV0ucHVzaChzaG93KVxuICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgLy8gRm9yIGVhY2ggc3RhcnQgdGltZSwgc2VsZWN0IHRoZSBzaG93IHdpdGggdGhlIGhpZ2hlc3QgcHJpb3JpdHkgKGxvd2VzdCBwcmlvcml0eSBudW1iZXIpXG4gICAgICAgICAgICBPYmplY3QudmFsdWVzKHNob3dzQnlTdGFydFRpbWUpLmZvckVhY2goZ3JvdXAgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChncm91cC5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIElmIHRoZXJlIGFyZSBjb25mbGljdHMsIHB1c2ggb25seSB0aGUgc2hvdyB3aXRoIHRoZSBoaWdoZXN0IHByaW9yaXR5XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmVkU2hvd3MucHVzaChncm91cFswXSkgLy8gQXNzdW1pbmcgdGhlIGdyb3VwIGlzIGFscmVhZHkgc29ydGVkIGJ5IHByaW9yaXR5XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gTm8gY29uZmxpY3QsIHB1c2ggdGhlIHNpbmdsZSBzaG93XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmVkU2hvd3MucHVzaChncm91cFswXSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICByZXR1cm4gcmVzb2x2ZWRTaG93c1xuICAgICAgICB9LFxuICAgICAgICBhZGp1c3RTaG93c0ZvckdyaWQoc2hvd3MsIHRpbWVTbG90cykge1xuICAgICAgICAgICAgcmV0dXJuIHNob3dzLm1hcChzaG93ID0+IHtcbiAgICAgICAgICAgICAgICAvLyBZb3VyIGV4aXN0aW5nIGxvZ2ljIGZvciBjYWxjdWxhdGluZyBzaG93IHBsYWNlbWVudFxuICAgICAgICAgICAgICAgIGNvbnN0IHNob3dTdGFydCA9IG5ldyBEYXRlKHNob3cuc3RhcnRfdGltZSlcbiAgICAgICAgICAgICAgICBjb25zdCBzaG93RW5kID0gbmV3IERhdGUoc2hvdy5zdGFydF90aW1lKVxuICAgICAgICAgICAgICAgIHNob3dFbmQuc2V0TWludXRlcyhzaG93RW5kLmdldE1pbnV0ZXMoKSArIHNob3cuZHVyYXRpb25NaW51dGVzKVxuICAgICAgICAgICAgICAgIGNvbnN0IHNsb3RJbmRleCA9IHRpbWVTbG90cy5maW5kSW5kZXgoc2xvdCA9PiBzaG93U3RhcnQgPj0gc2xvdCAmJiBzaG93U3RhcnQgPCBuZXcgRGF0ZShzbG90LmdldFRpbWUoKSArIDMwICogNjAwMDApKVxuICAgICAgICAgICAgICAgIGxldCBzcGFuID0gTWF0aC5jZWlsKHNob3cuZHVyYXRpb25NaW51dGVzIC8gMzApXG4gICAgICAgICAgICAgICAgaWYgKHNsb3RJbmRleCArIHNwYW4gPiB0aW1lU2xvdHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIHNwYW4gPSB0aW1lU2xvdHMubGVuZ3RoIC0gc2xvdEluZGV4XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgLi4uc2hvdyxcbiAgICAgICAgICAgICAgICAgICAgZ3JpZFN0YXJ0OiBzbG90SW5kZXggKyAxLFxuICAgICAgICAgICAgICAgICAgICBncmlkU3Bhbjogc3BhbixcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICB9LFxuICAgICAgICBtYXBTaG93c1RvVGltZVNsb3RzKHNob3dzLCB0aW1lU2xvdHMpIHtcbiAgICAgICAgICAgIGNvbnN0IHNob3dzV2l0aEFkanVzdGVkU3BhbnMgPSBzaG93cy5tYXAoc2hvdyA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2hvd1N0YXJ0ID0gbmV3IERhdGUoc2hvdy5zdGFydF90aW1lKVxuICAgICAgICAgICAgICAgIGNvbnN0IHNob3dFbmQgPSBuZXcgRGF0ZShzaG93LnN0YXJ0X3RpbWUpXG4gICAgICAgICAgICAgICAgc2hvd0VuZC5zZXRNaW51dGVzKHNob3dFbmQuZ2V0TWludXRlcygpICsgc2hvdy5kdXJhdGlvbk1pbnV0ZXMpXG4gICAgICAgICAgICAgICAgY29uc3Qgc2xvdEluZGV4ID0gdGltZVNsb3RzLmZpbmRJbmRleChzbG90ID0+IHNob3dTdGFydCA+PSBzbG90ICYmIHNob3dTdGFydCA8IG5ldyBEYXRlKHNsb3QuZ2V0VGltZSgpICsgMzAgKiA2MDAwMCkpXG5cbiAgICAgICAgICAgICAgICAvLyBJbml0aWFsbHkgc2V0IHRoZSBzcGFuIGJhc2VkIG9uIHRoZSBzaG93J3MgZHVyYXRpb25cbiAgICAgICAgICAgICAgICBsZXQgc3BhbiA9IE1hdGguY2VpbChzaG93LmR1cmF0aW9uTWludXRlcyAvIDMwKVxuXG4gICAgICAgICAgICAgICAgLy8gQWRqdXN0IHRoZSBzcGFuIGlmIHRoZXJlJ3MgYW4gb3ZlcmxhcCB3aXRoIHRoZSBuZXh0IHNob3cncyBzdGFydCB0aW1lXG4gICAgICAgICAgICAgICAgaWYgKHNsb3RJbmRleCArIHNwYW4gPiB0aW1lU2xvdHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIHNwYW4gPSB0aW1lU2xvdHMubGVuZ3RoIC0gc2xvdEluZGV4IC8vIEFkanVzdCB0byBub3QgZXhjZWVkIHRoZSBncmlkXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gUmV0dXJuIHRoZSBzaG93IHdpdGggYWRqdXN0ZWQgc3BhbiBhbmQgY2FsY3VsYXRlZCBzdGFydCBpbmRleFxuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIC4uLnNob3csXG4gICAgICAgICAgICAgICAgICAgIGdyaWRTdGFydDogc2xvdEluZGV4ICsgMSxcbiAgICAgICAgICAgICAgICAgICAgZ3JpZFNwYW46IHNwYW4sXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgLy8gTm93IGhhbmRsZSBwbGFjaW5nIHRoZSBzaG93cyB3aXRoIGFkanVzdGVkIHNwYW5zIGluIHRoZSBncmlkLCBpbmNsdWRpbmcgcGxhY2Vob2xkZXJzIGZvciBlbXB0eSBzbG90c1xuICAgICAgICAgICAgY29uc3QgZ3JpZEl0ZW1zID0gdGltZVNsb3RzLm1hcCgoc2xvdCwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBzaG93Rm9yU2xvdCA9IHNob3dzV2l0aEFkanVzdGVkU3BhbnMuZmluZChzaG93ID0+IHNob3cuZ3JpZFN0YXJ0ID09PSBpbmRleCArIDEpXG4gICAgICAgICAgICAgICAgaWYgKHNob3dGb3JTbG90KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzaG93Rm9yU2xvdFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIElmIG5vIHNob3cgZm9yIHRoaXMgc2xvdCwgcmV0dXJuIGEgcGxhY2Vob2xkZXJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgZ3JpZFN0YXJ0OiBpbmRleCArIDEsXG4gICAgICAgICAgICAgICAgICAgICAgICBncmlkU3BhbjogMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IHtzaG93OiB7bmFtZTogJ05vdGhpbmcgc2NoZWR1bGVkLid9fSxcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgIHJldHVybiBncmlkSXRlbXNcbiAgICAgICAgfSxcbiAgICAgICAgZmlsbEVtcHR5U2xvdHNXaXRoUGxhY2Vob2xkZXJzKHNob3dzV2l0aFBsYWNlbWVudCwgdGltZVNsb3RzKSB7XG4gICAgICAgICAgICBjb25zdCBncmlkSXRlbXMgPSBbXVxuXG4gICAgICAgICAgICB0aW1lU2xvdHMuZm9yRWFjaCgoc2xvdCwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBzbG90U3RhcnQgPSBzbG90XG4gICAgICAgICAgICAgICAgY29uc3Qgc2hvd0V4aXN0c0luU2xvdCA9IHNob3dzV2l0aFBsYWNlbWVudC5zb21lKHNob3cgPT5cbiAgICAgICAgICAgICAgICAgICAgc2xvdFN0YXJ0ID49IG5ldyBEYXRlKHNob3cuc3RhcnRfdGltZSkgJiZcbiAgICAgICAgICAgICAgICAgICAgc2xvdFN0YXJ0IDwgbmV3IERhdGUobmV3IERhdGUoc2hvdy5zdGFydF90aW1lKS5nZXRUaW1lKCkgKyBzaG93LmR1cmF0aW9uTWludXRlcyAqIDYwMDAwKSxcbiAgICAgICAgICAgICAgICApXG5cbiAgICAgICAgICAgICAgICBpZiAoIXNob3dFeGlzdHNJblNsb3QpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gSW5zZXJ0IGEgcGxhY2Vob2xkZXIgc2hvdyBmb3IgdGhpcyBzbG90XG4gICAgICAgICAgICAgICAgICAgIGdyaWRJdGVtcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRfdGltZTogc2xvdC50b0lTT1N0cmluZygpLFxuICAgICAgICAgICAgICAgICAgICAgICAgZ3JpZFN0YXJ0OiBpbmRleCArIDEsXG4gICAgICAgICAgICAgICAgICAgICAgICBncmlkU3BhbjogMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IHtzaG93OiB7bmFtZTogJ05vdGhpbmcgc2NoZWR1bGVkLid9fSxcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICAvLyBNZXJnZSBhbmQgc29ydCB0aGUgZ3JpZCBpdGVtcyBieSB0aGVpciBzdGFydCB0aW1lL2dyaWRTdGFydCB0byBtYWludGFpbiBjaHJvbm9sb2dpY2FsIG9yZGVyXG4gICAgICAgICAgICByZXR1cm4gWy4uLnNob3dzV2l0aFBsYWNlbWVudCwgLi4uZ3JpZEl0ZW1zXS5zb3J0KChhLCBiKSA9PiBhLmdyaWRTdGFydCAtIGIuZ3JpZFN0YXJ0KVxuICAgICAgICB9LFxuXG5cbiAgICB9LFxuXG4gICAgZ2V0dGVyczoge1xuICAgICAgICBuZXh0Rm91ckhvdXJzT2ZDb250ZW50OiAoc3RhdGUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG5vdyA9IG5ldyBEYXRlKClcbiAgICAgICAgICAgIGNvbnN0IHN0YXJ0T2ZDdXJyZW50SG91ciA9IG5ldyBEYXRlKG5vdy5zZXRNaW51dGVzKDAsIDAsIDApKVxuICAgICAgICAgICAgY29uc3QgZm91ckhvdXJzTGF0ZXIgPSBuZXcgRGF0ZShzdGFydE9mQ3VycmVudEhvdXIuZ2V0VGltZSgpICsgNCAqIDYwICogNjAgKiAxMDAwKVxuXG4gICAgICAgICAgICBjb25zdCB0aW1lU2xvdHMgPSBjcmVhdGVUaW1lU2xvdHMoc3RhcnRPZkN1cnJlbnRIb3VyLCA0LCAzMClcbiAgICAgICAgICAgIGxldCBzaG93cyA9IGZldGNoU2hvd3NTY2hlZHVsZWRCZXR3ZWVuKHN0YXRlLCBzdGFydE9mQ3VycmVudEhvdXIsIGZvdXJIb3Vyc0xhdGVyKVxuICAgICAgICAgICAgc2hvd3MgPSByZXNvbHZlU2NoZWR1bGluZ0NvbmZsaWN0cyhzaG93cylcbiAgICAgICAgICAgIGxldCBhZGp1c3RlZFNob3dzID0gYWRqdXN0U2hvd3NGb3JHcmlkKHNob3dzLCB0aW1lU2xvdHMpXG4gICAgICAgICAgICBhZGp1c3RlZFNob3dzID0gZmlsbEVtcHR5U2xvdHNXaXRoUGxhY2Vob2xkZXJzKGFkanVzdGVkU2hvd3MsIHRpbWVTbG90cylcblxuICAgICAgICAgICAgcmV0dXJuIGFkanVzdGVkU2hvd3NcbiAgICAgICAgfSxcbiAgICAgICAgLy8gbmV4dEZvdXJIb3Vyc09mQ29udGVudDogKHN0YXRlKSA9PiB7XG4gICAgICAgIC8vICAgICBjb25zdCB1c2VyU3RvcmUgPSB1c2VVc2VyU3RvcmUoKVxuICAgICAgICAvLyAgICAgY29uc3Qgbm93ID0gbmV3IERhdGUoKSAvLyBDdXJyZW50IHRpbWVcbiAgICAgICAgLy8gICAgIC8vIGNvbnN0IHN0YXJ0T2ZDdXJyZW50SG91ciA9IG5ldyBEYXRlKG5vdy5nZXRGdWxsWWVhcigpLCBub3cuZ2V0TW9udGgoKSwgbm93LmdldERhdGUoKSwgbm93LmdldEhvdXJzKCkpO1xuICAgICAgICAvLyAgICAgY29uc3Qgc3RhcnRPZkN1cnJlbnRIb3VyID0gbmV3IERhdGUobm93LnNldE1pbnV0ZXMoMCwgMCwgMCkpXG4gICAgICAgIC8vICAgICBjb25zdCBmb3VySG91cnNMYXRlciA9IG5ldyBEYXRlKHN0YXJ0T2ZDdXJyZW50SG91ci5nZXRUaW1lKCkgKyA0ICogNjAgKiA2MCAqIDEwMDApXG4gICAgICAgIC8vXG4gICAgICAgIC8vXG4gICAgICAgIC8vICAgICAvLyBDcmVhdGUgdGltZSBzbG90cyBmb3IgdGhlIG5leHQgZm91ciBob3VycywgYXQgMzAtbWludXRlIGludGVydmFscywgaW4gVVRDXG4gICAgICAgIC8vICAgICBjb25zdCB1dGNUaW1lU2xvdHMgPSBjcmVhdGVUaW1lU2xvdHMoc3RhcnRPZkN1cnJlbnRIb3VyLCA0LCAzMClcbiAgICAgICAgLy8gICAgIC8vIENvbnZlcnQgZWFjaCBVVEMgdGltZSBzbG90IHRvIHRoZSB1c2VyJ3MgbG9jYWwgdGltZXpvbmVcbiAgICAgICAgLy8gICAgIGNvbnN0IHRpbWVTbG90cyA9IHV0Y1RpbWVTbG90cy5tYXAoc2xvdCA9PlxuICAgICAgICAvLyAgICAgICAgIG5ldyBEYXRlKHVzZXJTdG9yZS5jb252ZXJ0VXRjVG9Vc2VyVGltZXpvbmUoc2xvdCkpLFxuICAgICAgICAvLyAgICAgKVxuICAgICAgICAvL1xuICAgICAgICAvLyAgICAgLy8gSXRlcmF0ZSBvdmVyIGVhY2ggdGltZSBzbG90IHRvIGVpdGhlciBmaW5kIGEgc2hvdyB0aGF0IG1hdGNoZXMgb3IgaW5zZXJ0IGEgcGxhY2Vob2xkZXJcbiAgICAgICAgLy8gICAgIGNvbnN0IGZpbGxlZFNob3dzID0gdGltZVNsb3RzLm1hcCgoc2xvdCwgaW5kZXgpID0+IHtcbiAgICAgICAgLy8gICAgICAgICBjb25zdCBzbG90U3RhcnQgPSBkYXlqcyhzbG90KS5mb3JtYXQoJ1lZWVktTU0tREQgSEg6bW06c3MnKVxuICAgICAgICAvLyAgICAgICAgIGNvbnN0IG1hdGNoaW5nU2hvdyA9IHN0YXRlLndlZWtseUNvbnRlbnQuZmluZChzaG93ID0+IHtcbiAgICAgICAgLy8gICAgICAgICAgICAgY29uc3Qgc2hvd1N0YXJ0ID0gZGF5anMoc2hvdy5zdGFydF90aW1lKS5mb3JtYXQoJ1lZWVktTU0tREQgSEg6bW06c3MnKVxuICAgICAgICAvLyAgICAgICAgICAgICByZXR1cm4gc2hvd1N0YXJ0ID09PSBzbG90U3RhcnRcbiAgICAgICAgLy8gICAgICAgICB9KVxuICAgICAgICAvL1xuICAgICAgICAvLyAgICAgICAgIGlmIChtYXRjaGluZ1Nob3cpIHtcbiAgICAgICAgLy8gICAgICAgICAgICAgLy8gQ2FsY3VsYXRlIGdyaWQgcGxhY2VtZW50IGJhc2VkIG9uIHRoZSBzaG93J3Mgc3RhcnQgdGltZSBhbmQgZHVyYXRpb25cbiAgICAgICAgLy8gICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgIC4uLm1hdGNoaW5nU2hvdyxcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgIGdyaWRTdGFydDogaW5kZXggKyAxLFxuICAgICAgICAvLyAgICAgICAgICAgICAgICAgZ3JpZFNwYW46IE1hdGguY2VpbChtYXRjaGluZ1Nob3cuZHVyYXRpb25NaW51dGVzIC8gMzApLFxuICAgICAgICAvLyAgICAgICAgICAgICB9XG4gICAgICAgIC8vICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gICAgICAgICAgICAgLy8gQ3JlYXRlIGEgcGxhY2Vob2xkZXIgZm9yIGVtcHR5IHRpbWUgc2xvdHNcbiAgICAgICAgLy8gICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiB0cnVlLFxuICAgICAgICAvLyAgICAgICAgICAgICAgICAgc3RhcnRfdGltZTogc2xvdC50b0lTT1N0cmluZygpLFxuICAgICAgICAvLyAgICAgICAgICAgICAgICAgZHVyYXRpb25NaW51dGVzOiAzMCxcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgIGdyaWRTdGFydDogaW5kZXggKyAxLFxuICAgICAgICAvLyAgICAgICAgICAgICAgICAgZ3JpZFNwYW46IDEsXG4gICAgICAgIC8vICAgICAgICAgICAgICAgICBjb250ZW50OiB7c2hvdzoge25hbWU6ICdOb3RoaW5nIHNjaGVkdWxlZC4nfX0sXG4gICAgICAgIC8vICAgICAgICAgICAgIH1cbiAgICAgICAgLy8gICAgICAgICB9XG4gICAgICAgIC8vICAgICB9KVxuICAgICAgICAvL1xuICAgICAgICAvLyAgICAgcmV0dXJuIGZpbGxlZFNob3dzXG4gICAgICAgIC8vIH0sXG5cbiAgICAgICAgLy8gLy8gR3JvdXAgc2hvd3MgYnkgc3RhcnQgdGltZVxuICAgICAgICAvLyBjb25zdCBzaG93c0dyb3VwZWRCeVN0YXJ0VGltZSA9IHN0YXRlLndlZWtseUNvbnRlbnQucmVkdWNlKChhY2MsIGl0ZW0pID0+IHtcbiAgICAgICAgLy8gICAgIGNvbnN0IGl0ZW1TdGFydCA9IGRheWpzKGl0ZW0uc3RhcnRfdGltZSkuZm9ybWF0KCdZWVlZLU1NLUREIEhIOm1tOnNzJyk7XG4gICAgICAgIC8vICAgICBpZiAoIWFjY1tpdGVtU3RhcnRdKSB7XG4gICAgICAgIC8vICAgICAgICAgYWNjW2l0ZW1TdGFydF0gPSBbXTtcbiAgICAgICAgLy8gICAgIH1cbiAgICAgICAgLy8gICAgIGFjY1tpdGVtU3RhcnRdLnB1c2goaXRlbSk7XG4gICAgICAgIC8vICAgICByZXR1cm4gYWNjO1xuICAgICAgICAvLyB9LCB7fSk7XG4gICAgICAgIC8vXG4gICAgICAgIC8vIC8vIFNlbGVjdCB0aGUgc2hvdyB3aXRoIHRoZSBsb3dlc3QgcHJpb3JpdHkgZm9yIGVhY2ggc3RhcnQgdGltZVxuICAgICAgICAvLyBjb25zdCBzZWxlY3RlZFNob3dzID0gT2JqZWN0LnZhbHVlcyhzaG93c0dyb3VwZWRCeVN0YXJ0VGltZSkubWFwKGdyb3VwID0+IHtcbiAgICAgICAgLy8gICAgIHJldHVybiBncm91cC5yZWR1Y2UoKHNlbGVjdGVkLCBpdGVtKSA9PiB7XG4gICAgICAgIC8vICAgICAgICAgcmV0dXJuICFzZWxlY3RlZCB8fCBpdGVtLnByaW9yaXR5IDwgc2VsZWN0ZWQucHJpb3JpdHkgPyBpdGVtIDogc2VsZWN0ZWQ7XG4gICAgICAgIC8vICAgICB9LCBudWxsKTtcbiAgICAgICAgLy8gfSk7XG4gICAgICAgIC8vXG4gICAgICAgIC8vIC8vIFNvcnQsIGFkanVzdCBmb3Igb3ZlcmxhcHMsIGFuZCBjYWxjdWxhdGUgZ3JpZCBwbGFjZW1lbnQgYXMgYmVmb3JlXG4gICAgICAgIC8vIGxldCBzb3J0ZWRTaG93cyA9IHNlbGVjdGVkU2hvd3NcbiAgICAgICAgLy8gICAgIC5maWx0ZXIoaXRlbSA9PiB7XG4gICAgICAgIC8vICAgICAgICAgY29uc3QgaXRlbVN0YXJ0ID0gbmV3IERhdGUoaXRlbS5zdGFydF90aW1lKTtcbiAgICAgICAgLy8gICAgICAgICByZXR1cm4gaXRlbVN0YXJ0ID49IHN0YXJ0T2ZDdXJyZW50SG91ciAmJiBpdGVtU3RhcnQgPCBmb3VySG91cnNMYXRlcjtcbiAgICAgICAgLy8gICAgIH0pXG4gICAgICAgIC8vICAgICAuc29ydCgoYSwgYikgPT4ge1xuICAgICAgICAvLyAgICAgICAgIGNvbnN0IHN0YXJ0RGlmZiA9IG5ldyBEYXRlKGEuc3RhcnRfdGltZSkgLSBuZXcgRGF0ZShiLnN0YXJ0X3RpbWUpO1xuICAgICAgICAvLyAgICAgICAgIHJldHVybiBzdGFydERpZmYgIT09IDAgPyBzdGFydERpZmYgOiBhLnByaW9yaXR5IC0gYi5wcmlvcml0eTtcbiAgICAgICAgLy8gICAgIH0pXG4gICAgICAgIC8vICAgICAubWFwKChpdGVtLCBpbmRleCwgYXJyYXkpID0+IHtcbiAgICAgICAgLy8gICAgICAgICAvLyBHcmlkIHBsYWNlbWVudCBsb2dpYyByZW1haW5zIHRoZSBzYW1lIGFzIGJlZm9yZVxuICAgICAgICAvLyAgICAgICAgIC8vIEVuc3VyZSB0aGUgc3BhbiBkb2Vzbid0IGV4Y2VlZCB0aGUgZ3JpZCBvciBiZWNvbWUgbmVnYXRpdmVcbiAgICAgICAgLy8gICAgICAgICBjb25zdCBpdGVtU3RhcnQgPSBuZXcgRGF0ZShpdGVtLnN0YXJ0X3RpbWUpO1xuICAgICAgICAvLyAgICAgICAgIGNvbnN0IHNsb3RJbmRleCA9IHRpbWVTbG90cy5maW5kSW5kZXgoc2xvdCA9PiBuZXcgRGF0ZShpdGVtLnN0YXJ0X3RpbWUpID49IHNsb3QgJiYgbmV3IERhdGUoaXRlbS5zdGFydF90aW1lKSA8IG5ldyBEYXRlKHNsb3QuZ2V0VGltZSgpICsgMzAgKiA2MDAwMCkpO1xuICAgICAgICAvLyAgICAgICAgIGxldCBkdXJhdGlvblNsb3RzID0gTWF0aC5jZWlsKGl0ZW0uZHVyYXRpb25NaW51dGVzIC8gMzApO1xuICAgICAgICAvLyAgICAgICAgIGlmIChpbmRleCA8IGFycmF5Lmxlbmd0aCAtIDEpIHtcbiAgICAgICAgLy8gICAgICAgICAgICAgLy8gQWRqdXN0IGZvciBvdmVybGFwcyB3aXRoIHN1YnNlcXVlbnQgc2hvd3NcbiAgICAgICAgLy8gICAgICAgICB9XG4gICAgICAgIC8vICAgICAgICAgY29uc3QgYWRqdXN0ZWRTcGFuID0gTWF0aC5tYXgoMSwgTWF0aC5taW4oZHVyYXRpb25TbG90cywgdGltZVNsb3RzLmxlbmd0aCAtIHNsb3RJbmRleCkpO1xuICAgICAgICAvLyAgICAgICAgIHJldHVybiB7XG4gICAgICAgIC8vICAgICAgICAgICAgIC4uLml0ZW0sXG4gICAgICAgIC8vICAgICAgICAgICAgIGdyaWRTdGFydDogc2xvdEluZGV4ICsgMSxcbiAgICAgICAgLy8gICAgICAgICAgICAgZ3JpZFNwYW46IGFkanVzdGVkU3BhblxuICAgICAgICAvLyAgICAgICAgIH07XG4gICAgICAgIC8vICAgICB9KTtcblxuICAgICAgICAvLyBGaWx0ZXIsIHNvcnQsIGFuZCBhZGp1c3Qgc2hvd3MgYmFzZWQgb24gc3RhcnQgdGltZSwgZHVyYXRpb24sIGFuZCBwcmlvcml0eVxuICAgICAgICAvLyBsZXQgc29ydGVkU2hvd3MgPSBzdGF0ZS53ZWVrbHlDb250ZW50XG4gICAgICAgIC8vICAgICAuZmlsdGVyKGl0ZW0gPT4ge1xuICAgICAgICAvLyAgICAgICAgIGNvbnN0IGl0ZW1TdGFydCA9IG5ldyBEYXRlKGl0ZW0uc3RhcnRfdGltZSk7XG4gICAgICAgIC8vICAgICAgICAgcmV0dXJuIGl0ZW1TdGFydCA+PSBzdGFydE9mQ3VycmVudEhvdXIgJiYgaXRlbVN0YXJ0IDwgZm91ckhvdXJzTGF0ZXI7XG4gICAgICAgIC8vICAgICB9KVxuICAgICAgICAvLyAgICAgLnNvcnQoKGEsIGIpID0+IHtcbiAgICAgICAgLy8gICAgICAgICAvLyBTb3J0IGJ5IHN0YXJ0IHRpbWU7IGlmIGVxdWFsLCB0aGVuIGJ5IHByaW9yaXR5XG4gICAgICAgIC8vICAgICAgICAgY29uc3Qgc3RhcnREaWZmID0gbmV3IERhdGUoYS5zdGFydF90aW1lKSAtIG5ldyBEYXRlKGIuc3RhcnRfdGltZSk7XG4gICAgICAgIC8vICAgICAgICAgcmV0dXJuIHN0YXJ0RGlmZiAhPT0gMCA/IHN0YXJ0RGlmZiA6IGEucHJpb3JpdHkgLSBiLnByaW9yaXR5O1xuICAgICAgICAvLyAgICAgfSlcbiAgICAgICAgLy8gICAgIC5tYXAoKGl0ZW0sIGluZGV4LCBhcnJheSkgPT4ge1xuICAgICAgICAvLyAgICAgICAgIC8vIENvbnZlcnQgYmFjayB0byBzdHJpbmcgZm9ybWF0IG1hdGNoaW5nIHN0YXJ0X3RpbWUgZm9ybWF0XG4gICAgICAgIC8vICAgICAgICAgY29uc3QgZm9ybWF0dGVkSXRlbVN0YXJ0VGltZSA9IGRheWpzKGl0ZW0uc3RhcnRfdGltZSkuZm9ybWF0KCdZWVlZLU1NLUREIEhIOm1tOnNzJyk7XG4gICAgICAgIC8vXG4gICAgICAgIC8vICAgICAgICAgY29uc29sZS5sb2coJ2l0ZW1TdGFydFRpbWVJblVzZXJUWjogJyArIGZvcm1hdHRlZEl0ZW1TdGFydFRpbWUpXG4gICAgICAgIC8vICAgICAgICAgLy8gQ2FsY3VsYXRlIGdyaWQgcGxhY2VtZW50IGZvciBlYWNoIHNob3dcbiAgICAgICAgLy8gICAgICAgICBjb25zdCBpdGVtU3RhcnQgPSBuZXcgRGF0ZShpdGVtLnN0YXJ0X3RpbWUpO1xuICAgICAgICAvLyAgICAgICAgIGNvbnN0IGl0ZW1FbmQgPSBuZXcgRGF0ZShpdGVtLnN0YXJ0X3RpbWUpO1xuICAgICAgICAvLyAgICAgICAgIGl0ZW1FbmQuc2V0TWludXRlcyhpdGVtRW5kLmdldE1pbnV0ZXMoKSArIGl0ZW0uZHVyYXRpb25NaW51dGVzKTtcbiAgICAgICAgLy9cbiAgICAgICAgLy8gICAgICAgICAvLyBGaW5kIHRoZSBpbmRleCBvZiB0aGUgc2xvdCB0aGF0IHRoZSBpdGVtIHN0YXJ0cyBpblxuICAgICAgICAvLyAgICAgICAgIC8vIGNvbnN0IHNsb3RJbmRleCA9IHRpbWVTbG90cy5maW5kSW5kZXgoc2xvdCA9PiBpdGVtU3RhcnQgPj0gc2xvdCAmJiBpdGVtU3RhcnQgPCBuZXcgRGF0ZShzbG90LmdldFRpbWUoKSArIDMwICogNjAwMDApKTtcbiAgICAgICAgLy9cbiAgICAgICAgLy8gICAgICAgICAvLyBGaW5kIHRoZSBpbmRleCBvZiB0aGUgc2xvdCB0aGF0IHRoZSBpdGVtIHN0YXJ0cyBpblxuICAgICAgICAvLyAgICAgICAgIGNvbnN0IHNsb3RJbmRleCA9IHRpbWVTbG90cy5maW5kSW5kZXgoc2xvdCA9PiB7XG4gICAgICAgIC8vICAgICAgICAgICAgIHJldHVybiBmb3JtYXR0ZWRJdGVtU3RhcnRUaW1lID49IHNsb3QgJiYgZm9ybWF0dGVkSXRlbVN0YXJ0VGltZSA8IG5ldyBEYXRlKHNsb3QuZ2V0VGltZSgpICsgMzAgKiA2MDAwMCk7XG4gICAgICAgIC8vICAgICAgICAgfSk7XG4gICAgICAgIC8vXG4gICAgICAgIC8vICAgICAgICAgbGV0IGR1cmF0aW9uU2xvdHMgPSBNYXRoLmNlaWwoaXRlbS5kdXJhdGlvbk1pbnV0ZXMgLyAzMCk7XG4gICAgICAgIC8vICAgICAgICAgLy8gQWRqdXN0IGZvciBvdmVybGFwcyB3aXRoIHN1YnNlcXVlbnQgc2hvd3NcbiAgICAgICAgLy8gICAgICAgICBpZiAoaW5kZXggPCBhcnJheS5sZW5ndGggLSAxKSB7XG4gICAgICAgIC8vICAgICAgICAgICAgIGNvbnN0IG5leHRJdGVtU3RhcnQgPSBuZXcgRGF0ZShhcnJheVtpbmRleCArIDFdLnN0YXJ0X3RpbWUpO1xuICAgICAgICAvLyAgICAgICAgICAgICBpZiAoaXRlbUVuZCA+IG5leHRJdGVtU3RhcnQpIHtcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgIC8vIElmIG92ZXJsYXAsIHJlZHVjZSBkdXJhdGlvblNsb3RzXG4gICAgICAgIC8vICAgICAgICAgICAgICAgICBjb25zdCBvdmVybGFwID0gTWF0aC5jZWlsKChpdGVtRW5kIC0gbmV4dEl0ZW1TdGFydCkgLyAoMzAgKiA2MDAwMCkpO1xuICAgICAgICAvLyAgICAgICAgICAgICAgICAgZHVyYXRpb25TbG90cyAtPSBvdmVybGFwO1xuICAgICAgICAvLyAgICAgICAgICAgICB9XG4gICAgICAgIC8vICAgICAgICAgfVxuICAgICAgICAvL1xuICAgICAgICAvLyAgICAgICAgIC8vIEVuc3VyZSB0aGUgc3BhbiBkb2Vzbid0IGV4Y2VlZCB0aGUgZ3JpZCBvciBiZWNvbWUgbmVnYXRpdmVcbiAgICAgICAgLy8gICAgICAgICBjb25zdCBhZGp1c3RlZFNwYW4gPSBNYXRoLm1heCgxLCBNYXRoLm1pbihkdXJhdGlvblNsb3RzLCB0aW1lU2xvdHMubGVuZ3RoIC0gc2xvdEluZGV4KSk7XG4gICAgICAgIC8vXG4gICAgICAgIC8vICAgICAgICAgLy8gUmV0dXJuIHRoZSBhZGp1c3RlZCBzaG93IHdpdGggZ3JpZCBwbGFjZW1lbnQgaW5mb3JtYXRpb25cbiAgICAgICAgLy8gICAgICAgICByZXR1cm4ge1xuICAgICAgICAvLyAgICAgICAgICAgICAuLi5pdGVtLFxuICAgICAgICAvLyAgICAgICAgICAgICBncmlkU3RhcnQ6IHNsb3RJbmRleCArIDEsIC8vIEdyaWQgaXMgMS1pbmRleGVkXG4gICAgICAgIC8vICAgICAgICAgICAgIGdyaWRTcGFuOiBhZGp1c3RlZFNwYW5cbiAgICAgICAgLy8gICAgICAgICB9O1xuICAgICAgICAvLyAgICAgfSk7XG5cbiAgICAgICAgLy8gQ3JlYXRlIHBsYWNlaG9sZGVycyBmb3IgZWFjaCB0aW1lIHNsb3QgaWYgdGhlcmUncyBubyBzaG93IHNjaGVkdWxlZFxuICAgICAgICAvLyBjb25zdCBmaWxsZWRTaG93cyA9IHRpbWVTbG90cy5tYXAoc2xvdCA9PiB7XG4gICAgICAgIC8vICAgICBjb25zdCBmb3JtYXR0ZWRTbG90ID0gZGF5anMoc2xvdCkuZm9ybWF0KCdZWVlZLU1NLUREIEhIOm1tOnNzJyk7XG4gICAgICAgIC8vICAgICBjb25zdCBzaG93Rm9yU2xvdCA9IHNvcnRlZFNob3dzLmZpbmQoc2hvdyA9PiBkYXlqcyhzaG93LnN0YXJ0X3RpbWUpLmZvcm1hdCgnWVlZWS1NTS1ERCBISDptbTpzcycpID09PSBmb3JtYXR0ZWRTbG90KTtcbiAgICAgICAgLy9cbiAgICAgICAgLy8gICAgIGlmIChzaG93Rm9yU2xvdCkge1xuICAgICAgICAvLyAgICAgICAgIHJldHVybiBzaG93Rm9yU2xvdDsgLy8gUmV0dXJuIHRoZSBhY3R1YWwgc2hvdyBpZiBpdCBleGlzdHNcbiAgICAgICAgLy8gICAgIH0gZWxzZSB7XG4gICAgICAgIC8vICAgICAgICAgLy8gUmV0dXJuIGEgcGxhY2Vob2xkZXIgc2hvdyBmb3IgZW1wdHkgc2xvdHNcbiAgICAgICAgLy8gICAgICAgICByZXR1cm4ge1xuICAgICAgICAvLyAgICAgICAgICAgICBwbGFjZWhvbGRlcjogdHJ1ZSwgLy8gSW5kaWNhdGUgdGhpcyBpcyBhIHBsYWNlaG9sZGVyXG4gICAgICAgIC8vICAgICAgICAgICAgIHN0YXJ0X3RpbWU6IHNsb3QudG9JU09TdHJpbmcoKSxcbiAgICAgICAgLy8gICAgICAgICAgICAgZHVyYXRpb25NaW51dGVzOiAzMCwgLy8gQXNzdW1pbmcgYSBzdGFuZGFyZCAzMC1taW51dGUgc2xvdFxuICAgICAgICAvLyAgICAgICAgICAgICBncmlkU3RhcnQ6IHRpbWVTbG90cy5pbmRleE9mKHNsb3QpICsgMSxcbiAgICAgICAgLy8gICAgICAgICAgICAgZ3JpZFNwYW46IDEsXG4gICAgICAgIC8vICAgICAgICAgICAgIGNvbnRlbnQ6IHtcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgIHNob3c6IHtcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIk5vdGhpbmcgc2NoZWR1bGVkLlwiXG4gICAgICAgIC8vICAgICAgICAgICAgICAgICB9XG4gICAgICAgIC8vICAgICAgICAgICAgIH1cbiAgICAgICAgLy8gICAgICAgICB9O1xuICAgICAgICAvLyAgICAgfVxuICAgICAgICAvLyB9KTtcblxuICAgICAgICAvLyBSZXR1cm4gdGhlIGZpbGxlZCBhcnJheSBvZiBzaG93cyBhbmQgcGxhY2Vob2xkZXJzXG4gICAgICAgIC8vIHJldHVybiBmaWxsZWRTaG93cztcbiAgICAgICAgLy8gcmV0dXJuIHNvcnRlZFNob3dzO1xuICAgICAgICAvLyB9LFxuICAgICAgICAvLyBuZXh0Rm91ckhvdXJzT2ZDb250ZW50OiAoc3RhdGUpID0+IHtcbiAgICAgICAgLy8gICAgIGNvbnN0IG5vdyA9IG5ldyBEYXRlKCk7IC8vIEdldCB0aGUgY3VycmVudCBkYXRlIGFuZCB0aW1lXG4gICAgICAgIC8vICAgICBjb25zdCBzdGFydCA9IG5ldyBEYXRlKG5vdy5nZXRGdWxsWWVhcigpLCBub3cuZ2V0TW9udGgoKSwgbm93LmdldERhdGUoKSwgbm93LmdldEhvdXJzKCkpOyAvLyBTZXQgdG8gdGhlIHRvcCBvZiB0aGUgY3VycmVudCBob3VyXG4gICAgICAgIC8vICAgICBjb25zdCBlbmQgPSBuZXcgRGF0ZShzdGFydC5nZXRUaW1lKCkgKyA0ICogNjAgKiA2MCAqIDEwMDApOyAvLyA0IGhvdXJzIGxhdGVyIGZyb20gdGhlIHN0YXJ0XG4gICAgICAgIC8vXG4gICAgICAgIC8vICAgICAvLyBGaWx0ZXIgd2Vla2x5Q29udGVudCBmb3IgdGhlIG5leHQgNiBob3VycyB3aW5kb3dcbiAgICAgICAgLy8gICAgIHJldHVybiBzdGF0ZS53ZWVrbHlDb250ZW50LmZpbHRlcihpdGVtID0+IHtcbiAgICAgICAgLy8gICAgICAgICBjb25zdCBpdGVtU3RhcnQgPSBuZXcgRGF0ZShpdGVtLnN0YXJ0X3RpbWUpO1xuICAgICAgICAvLyAgICAgICAgIHJldHVybiBpdGVtU3RhcnQgPj0gc3RhcnQgJiYgaXRlbVN0YXJ0IDwgZW5kO1xuICAgICAgICAvLyAgICAgfSkuc29ydCgoYSwgYikgPT4gbmV3IERhdGUoYS5zdGFydF90aW1lKSAtIG5ldyBEYXRlKGIuc3RhcnRfdGltZSkpO1xuICAgICAgICAvLyB9LFxuICAgICAgICBuZXh0Rm91ckhvdXJzV2l0aEhhbGZIb3VySW50ZXJ2YWxzOiAoc3RhdGUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHVzZXJTdG9yZSA9IHVzZVVzZXJTdG9yZSgpIC8vIEFjY2VzcyB0aGUgdXNlciBzdG9yZVxuICAgICAgICAgICAgY29uc3QgdXNlclRpbWV6b25lID0gdXNlclN0b3JlLnRpbWV6b25lIC8vIEdldCB0aGUgdXNlcidzIHRpbWV6b25lXG5cbiAgICAgICAgICAgIGNvbnN0IGludGVydmFscyA9IFtdXG4gICAgICAgICAgICBjb25zdCBub3cgPSBkYXlqcygpLnR6KHVzZXJUaW1lem9uZSkgLy8gR2V0IHRoZSBjdXJyZW50IHRpbWUgaW4gdGhlIHVzZXIncyB0aW1lem9uZVxuICAgICAgICAgICAgLy8gVXNlIGRheWpzIHRvIGhhbmRsZSB0aW1lIGNvcnJlY3RseSBpbiB0aGUgc3BlY2lmaWVkIHRpbWV6b25lXG4gICAgICAgICAgICBsZXQgY3VycmVudCA9IG5vdy5zdGFydE9mKCdob3VyJykgLy8gU2V0IHRvIHRoZSB0b3Agb2YgdGhlIGN1cnJlbnQgaG91clxuXG4gICAgICAgICAgICAvLyBHZW5lcmF0ZSBpbnRlcnZhbHMgZm9yIHRoZSBuZXh0IDQgaG91cnMsIGVhY2ggMzAgbWludXRlcyBhcGFydFxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCA4OyBpKyspIHsgLy8gNCBob3VycyAvIDMwIG1pbnV0ZXMgPSA4IGludGVydmFsc1xuICAgICAgICAgICAgICAgIC8vIFB1c2ggYW4gb2JqZWN0IHdpdGggYm90aCB0aGUgZm9ybWF0dGVkIHRpbWUgZm9yIGRpc3BsYXkgYW5kIHRoZSBhY3R1YWwgRGF0ZVRpbWUgb2JqZWN0XG4gICAgICAgICAgICAgICAgaW50ZXJ2YWxzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBmb3JtYXR0ZWQ6IGN1cnJlbnQuZm9ybWF0KCdoaDptbSBBJyksIC8vIEZvcm1hdHRlZCB0aW1lIGZvciBkaXNwbGF5XG4gICAgICAgICAgICAgICAgICAgIGRhdGVUaW1lU3RyaW5nOiBjdXJyZW50LmZvcm1hdCgnWVlZWS1NTS1ERCBISDptbTpzcycpLCAvLyBZLW0tZCBIOm06cyBmb3JtYXQgZm9yIGNvbXBhcmlzb25zXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICBjdXJyZW50ID0gY3VycmVudC5hZGQoMzAsICdtaW51dGUnKSAvLyBNb3ZlIHRvIHRoZSBuZXh0IDMwLW1pbnV0ZSBpbnRlcnZhbFxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gaW50ZXJ2YWxzXG4gICAgICAgIH0sXG4gICAgICAgIHVwY29taW5nQ29udGVudDogKHN0YXRlKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBzdGFydCA9IG5ldyBEYXRlKHN0YXRlLnZpZXdpbmdXaW5kb3dTdGFydC5nZXRUaW1lKCkgLSA2MCAqIDYwICogMTAwMCkgLy8gMSBob3VyIGVhcmxpZXJcbiAgICAgICAgICAgIGNvbnN0IGVuZCA9IG5ldyBEYXRlKHN0YXJ0LmdldFRpbWUoKSArIDcgKiA2MCAqIDYwICogMTAwMCkgLy8gNiBob3VycyBsYXRlclxuXG4gICAgICAgICAgICAvLyBHcm91cCBzaG93cyBieSBzdGFydCB0aW1lXG4gICAgICAgICAgICBjb25zdCBzaG93c0dyb3VwZWRCeVN0YXJ0VGltZSA9IHN0YXRlLndlZWtseUNvbnRlbnQucmVkdWNlKChhY2MsIGl0ZW0pID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBpdGVtU3RhcnQgPSBuZXcgRGF0ZShpdGVtLnN0YXJ0X3RpbWUpLmdldFRpbWUoKVxuICAgICAgICAgICAgICAgIGlmICghYWNjW2l0ZW1TdGFydF0pIHtcbiAgICAgICAgICAgICAgICAgICAgYWNjW2l0ZW1TdGFydF0gPSBbXVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBhY2NbaXRlbVN0YXJ0XS5wdXNoKGl0ZW0pXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFjY1xuICAgICAgICAgICAgfSwge30pXG5cbiAgICAgICAgICAgIC8vIFNlbGVjdCB0aGUgc2hvdyB3aXRoIHRoZSBsb3dlc3QgcHJpb3JpdHkgZm9yIGVhY2ggc3RhcnQgdGltZVxuICAgICAgICAgICAgY29uc3Qgc2VsZWN0ZWRTaG93cyA9IE9iamVjdC52YWx1ZXMoc2hvd3NHcm91cGVkQnlTdGFydFRpbWUpLm1hcChncm91cCA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGdyb3VwLnJlZHVjZSgoc2VsZWN0ZWQsIGl0ZW0pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICFzZWxlY3RlZCB8fCBpdGVtLnByaW9yaXR5IDwgc2VsZWN0ZWQucHJpb3JpdHkgPyBpdGVtIDogc2VsZWN0ZWRcbiAgICAgICAgICAgICAgICB9LCBudWxsKVxuICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgLy8gRmlsdGVyLCBlbnN1cmluZyB0aGV5IGZhbGwgd2l0aGluIHRoZSBuZXh0IDYtaG91ciB3aW5kb3csIGFuZCBzb3J0XG4gICAgICAgICAgICByZXR1cm4gc2VsZWN0ZWRTaG93c1xuICAgICAgICAgICAgICAgIC5maWx0ZXIoaXRlbSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGl0ZW1TdGFydCA9IG5ldyBEYXRlKGl0ZW0uc3RhcnRfdGltZSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW1TdGFydCA+PSBzdGFydCAmJiBpdGVtU3RhcnQgPCBlbmRcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5zb3J0KChhLCBiKSA9PiBuZXcgRGF0ZShhLnN0YXJ0X3RpbWUpIC0gbmV3IERhdGUoYi5zdGFydF90aW1lKSlcblxuICAgICAgICAgICAgLy8gLy8gRmlsdGVyIHdlZWtseUNvbnRlbnQgZm9yIHRoZSBuZXh0IDYgaG91cnMgd2luZG93XG4gICAgICAgICAgICAvLyByZXR1cm4gc3RhdGUud2Vla2x5Q29udGVudC5maWx0ZXIoaXRlbSA9PiB7XG4gICAgICAgICAgICAvLyAgICAgY29uc3QgaXRlbVN0YXJ0ID0gbmV3IERhdGUoaXRlbS5zdGFydF90aW1lKTtcbiAgICAgICAgICAgIC8vICAgICByZXR1cm4gaXRlbVN0YXJ0ID49IHN0YXJ0ICYmIGl0ZW1TdGFydCA8IGVuZDtcbiAgICAgICAgICAgIC8vIH0pLnNvcnQoKGEsIGIpID0+IG5ldyBEYXRlKGEuc3RhcnRfdGltZSkgLSBuZXcgRGF0ZShiLnN0YXJ0X3RpbWUpKTtcbiAgICAgICAgfSxcbiAgICAgICAgbmV4dFNpeEhvdXJzOiAoc3RhdGUpID0+IHtcbiAgICAgICAgICAgIGxldCBhZGp1c3RlZFN0YXJ0ID0gc3RhdGUudmlld2luZ1dpbmRvd1N0YXJ0XG4gICAgICAgICAgICBjb25zdCBlbmQgPSBhZGRIb3VycyhhZGp1c3RlZFN0YXJ0LCA1KVxuICAgICAgICAgICAgcmV0dXJuIGVhY2hIb3VyT2ZJbnRlcnZhbCh7c3RhcnQ6IGFkanVzdGVkU3RhcnQsIGVuZH0pXG4gICAgICAgIH0sXG4gICAgICAgIGRhdGVNZXNzYWdlOiAoc3RhdGUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHN0YXJ0RGF5ID0gc3RhcnRPZkRheShzdGF0ZS52aWV3aW5nV2luZG93U3RhcnQpXG4gICAgICAgICAgICBjb25zdCBmb3JtYXR0ZWREYXRlID0gZm9ybWF0KHN0YXJ0RGF5LCAnRUVFRSBNTU1NIGRvLCB5eXl5JylcbiAgICAgICAgICAgIGlmIChpc1RvZGF5KHN0YXJ0RGF5KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBgVG9kYXkgLSAke2Zvcm1hdHRlZERhdGV9YFxuICAgICAgICAgICAgfSBlbHNlIGlmIChpc1llc3RlcmRheShzdGFydERheSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYFllc3RlcmRheSAtICR7Zm9ybWF0dGVkRGF0ZX1gXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlzVG9tb3Jyb3coc3RhcnREYXkpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGBUb21vcnJvdyAtICR7Zm9ybWF0dGVkRGF0ZX1gXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBmb3JtYXR0ZWREYXRlXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGN1cnJlbnRNb250aEluZGV4OiAoc3RhdGUpID0+IGdldE1vbnRoKHN0YXRlLmN1cnJlbnRNb250aCksIC8vIEFkZHMgYSBnZXR0ZXIgdG8gZ2V0IHRoZSBjdXJyZW50IG1vbnRoJ3MgaW5kZXhcbiAgICAgICAgY3VycmVudE1vbnRoTmFtZTogKHN0YXRlKSA9PiBmb3JtYXQoc3RhdGUuY3VycmVudE1vbnRoLCAnTU1NTScpLFxuICAgICAgICBjdXJyZW50WWVhcjogKHN0YXRlKSA9PiBnZXRZZWFyKHN0YXRlLmN1cnJlbnRNb250aCksXG4gICAgICAgIGRheXNJbk1vbnRoOiAoc3RhdGUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHN0YXJ0T2ZDdXJyZW50TW9udGggPSBzdGFydE9mTW9udGgoc3RhdGUuY3VycmVudE1vbnRoKVxuICAgICAgICAgICAgY29uc3QgZW5kT2ZDdXJyZW50TW9udGggPSBlbmRPZk1vbnRoKHN0YXRlLmN1cnJlbnRNb250aClcblxuICAgICAgICAgICAgLy8gQWRqdXN0IHRoZXNlIHRvIGVuc3VyZSB0aGUgZ3JpZCBzdGFydHMgb24gU3VuZGF5IGFuZCBlbmRzIG9uIFNhdHVyZGF5XG4gICAgICAgICAgICBjb25zdCBzdGFydE9mR3JpZCA9IHN0YXJ0T2ZXZWVrKHN0YXJ0T2ZDdXJyZW50TW9udGgsIHt3ZWVrU3RhcnRzT246IDB9KVxuICAgICAgICAgICAgY29uc3QgZW5kT2ZHcmlkID0gZW5kT2ZXZWVrKGVuZE9mQ3VycmVudE1vbnRoLCB7d2Vla1N0YXJ0c09uOiAwfSlcblxuICAgICAgICAgICAgLy8gR2VuZXJhdGUgdGhlIGRheXMgZm9yIHRoZSBjYWxlbmRhciBncmlkXG4gICAgICAgICAgICByZXR1cm4gZWFjaERheU9mSW50ZXJ2YWwoe3N0YXJ0OiBzdGFydE9mR3JpZCwgZW5kOiBlbmRPZkdyaWR9KVxuICAgICAgICB9LFxuICAgICAgICBpc1RvZGF5OiAoc3RhdGUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHRvZGF5ID0gbmV3IERhdGUoKVxuICAgICAgICAgICAgY29uc3Qgdmlld2luZ1N0YXJ0ID0gbmV3IERhdGUoc3RhdGUudmlld2luZ1dpbmRvd1N0YXJ0KVxuXG4gICAgICAgICAgICByZXR1cm4gdG9kYXkudG9EYXRlU3RyaW5nKCkgPT09IHZpZXdpbmdTdGFydC50b0RhdGVTdHJpbmcoKVxuICAgICAgICB9LFxuICAgIH0sXG59KVxuIl0sIm5hbWVzIjpbIl9yZWdlbmVyYXRvclJ1bnRpbWUiLCJlIiwidCIsInIiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJuIiwiaGFzT3duUHJvcGVydHkiLCJvIiwiZGVmaW5lUHJvcGVydHkiLCJ2YWx1ZSIsImkiLCJTeW1ib2wiLCJhIiwiaXRlcmF0b3IiLCJjIiwiYXN5bmNJdGVyYXRvciIsInUiLCJ0b1N0cmluZ1RhZyIsImRlZmluZSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIndyYXAiLCJHZW5lcmF0b3IiLCJjcmVhdGUiLCJDb250ZXh0IiwibWFrZUludm9rZU1ldGhvZCIsInRyeUNhdGNoIiwidHlwZSIsImFyZyIsImNhbGwiLCJoIiwibCIsImYiLCJzIiwieSIsIkdlbmVyYXRvckZ1bmN0aW9uIiwiR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUiLCJwIiwiZCIsImdldFByb3RvdHlwZU9mIiwidiIsInZhbHVlcyIsImciLCJkZWZpbmVJdGVyYXRvck1ldGhvZHMiLCJmb3JFYWNoIiwiX2ludm9rZSIsIkFzeW5jSXRlcmF0b3IiLCJpbnZva2UiLCJfdHlwZW9mIiwicmVzb2x2ZSIsIl9fYXdhaXQiLCJ0aGVuIiwiY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmciLCJFcnJvciIsImRvbmUiLCJtZXRob2QiLCJkZWxlZ2F0ZSIsIm1heWJlSW52b2tlRGVsZWdhdGUiLCJzZW50IiwiX3NlbnQiLCJkaXNwYXRjaEV4Y2VwdGlvbiIsImFicnVwdCIsIlR5cGVFcnJvciIsInJlc3VsdE5hbWUiLCJuZXh0IiwibmV4dExvYyIsInB1c2hUcnlFbnRyeSIsInRyeUxvYyIsImNhdGNoTG9jIiwiZmluYWxseUxvYyIsImFmdGVyTG9jIiwidHJ5RW50cmllcyIsInB1c2giLCJyZXNldFRyeUVudHJ5IiwiY29tcGxldGlvbiIsInJlc2V0IiwiaXNOYU4iLCJsZW5ndGgiLCJkaXNwbGF5TmFtZSIsImlzR2VuZXJhdG9yRnVuY3Rpb24iLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJtYXJrIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJhd3JhcCIsImFzeW5jIiwiUHJvbWlzZSIsImtleXMiLCJyZXZlcnNlIiwicG9wIiwicHJldiIsImNoYXJBdCIsInNsaWNlIiwic3RvcCIsInJ2YWwiLCJoYW5kbGUiLCJjb21wbGV0ZSIsImZpbmlzaCIsIl9jYXRjaCIsImRlbGVnYXRlWWllbGQiLCJhc3luY0dlbmVyYXRvclN0ZXAiLCJnZW4iLCJyZWplY3QiLCJfbmV4dCIsIl90aHJvdyIsImtleSIsImluZm8iLCJlcnJvciIsIl9hc3luY1RvR2VuZXJhdG9yIiwiZm4iLCJzZWxmIiwiYXJncyIsImFyZ3VtZW50cyIsImFwcGx5IiwiZXJyIiwidW5kZWZpbmVkIiwib3duS2V5cyIsImdldE93blByb3BlcnR5U3ltYm9scyIsImZpbHRlciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIl9vYmplY3RTcHJlYWQiLCJfZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwiZGVmaW5lUHJvcGVydGllcyIsIm9iaiIsIl90b1Byb3BlcnR5S2V5IiwiX3RvUHJpbWl0aXZlIiwiU3RyaW5nIiwidG9QcmltaXRpdmUiLCJOdW1iZXIiLCJkZWZpbmVTdG9yZSIsInVzZVVzZXJTdG9yZSIsImNyZWF0ZVRpbWVTbG90cyIsImFkZERheXMiLCJhZGRIb3VycyIsImFkZE1pbnV0ZXMiLCJhZGRNb250aHMiLCJlYWNoRGF5T2ZJbnRlcnZhbCIsImVhY2hIb3VyT2ZJbnRlcnZhbCIsImVuZE9mTW9udGgiLCJlbmRPZldlZWsiLCJmb3JtYXQiLCJnZXRIb3VycyIsImdldE1vbnRoIiwiZ2V0WWVhciIsImlzU2FtZURheSIsImlzVG9kYXkiLCJpc1RvbW9ycm93IiwiaXNZZXN0ZXJkYXkiLCJzdGFydE9mRGF5Iiwic3RhcnRPZkhvdXIiLCJzdGFydE9mTW9udGgiLCJzdGFydE9mV2VlayIsInN1Yk1vbnRocyIsImRheWpzIiwicmVsYXRpdmVUaW1lIiwidGltZXpvbmUiLCJ1dGMiLCJleHRlbmQiLCJjb252ZXJ0U2NoZWR1bGVUb1RpbWV6b25lIiwic2NoZWR1bGVEYXRhIiwidXNlclN0b3JlIiwiZGF0YSIsIm1hcCIsIml0ZW0iLCJzdGFydFRpbWVJblVzZXJUeiIsInN0YXJ0X3RpbWUiLCJmb3JtYXREYXRlVGltZUZyb21VdGNUb1VzZXJUaW1lem9uZSIsImVuZFRpbWVJblVzZXJUeiIsImVuZF90aW1lIiwicmVjdXJyZW5jZURldGFpbHNJblVzZXJUeiIsInJlY3VycmVuY2VEZXRhaWxzIiwiX2l0ZW0kcmVjdXJyZW5jZURldGFpIiwic3RhcnRfZGF0ZSIsImVuZF9kYXRlIiwiZm9ybWF0VGltZUluVXNlclRpbWV6b25lIiwiZ2V0VXBjb21pbmdDb250ZW50RGF0ZXMiLCJ2aWV3aW5nV2luZG93U3RhcnQiLCJkYXRlcyIsInN0YXJ0IiwiRGF0ZSIsInNldEhvdXJzIiwiZmV0Y2hTaG93c1NjaGVkdWxlZEJldHdlZW4iLCJzdGF0ZSIsInN0YXJ0RGF0ZVRpbWUiLCJlbmREYXRlVGltZSIsInN0YXJ0SW5Vc2VyVFoiLCJjb252ZXJ0VXRjVG9Vc2VyVGltZXpvbmUiLCJ0b0lTT1N0cmluZyIsImVuZEluVXNlclRaIiwid2Vla2x5Q29udGVudCIsInNob3ciLCJzaG93U3RhcnRUaW1lSW5Vc2VyVFoiLCJpbml0aWFsU3RhdGUiLCJjdXJyZW50TW9udGgiLCJzZWxlY3RlZERheSIsImN1cnJlbnRXZWVrU3RhcnQiLCJjdXJyZW50V2Vla0VuZCIsImZpdmVEYXlTaXhIb3VyU2NoZWR1bGUiLCJ0b2RheXNDb250ZW50IiwiZGF0YUZldGNoTG9nIiwic2NoZWR1bGVJc0xvYWRpbmciLCJ1c2VTY2hlZHVsZVN0b3JlIiwiYWN0aW9ucyIsInJlc2V0QWxsIiwiYXNzaWduIiwibm93Iiwic2V0U2VsZWN0ZWREYXkiLCJkYXkiLCJfdGhpcyIsIl9jYWxsZWUiLCJfY2FsbGVlJCIsIl9jb250ZXh0Iiwid2Vla1N0YXJ0c09uIiwiZmV0Y2hXZWVrRGF0YUlmTmVlZGVkIiwic2V0U2VsZWN0ZWREYXlUb1RvZGF5IiwiY2hhbmdlRGF5IiwiZGF5cyIsIl90aGlzMiIsIl9jYWxsZWUyIiwiY3VycmVudFRpbWUiLCJuZXdEYXkiLCJfY2FsbGVlMiQiLCJfY29udGV4dDIiLCJnZXRNaW51dGVzIiwic2V0TWludXRlcyIsInNoaWZ0SG91cnMiLCJob3VycyIsIl90aGlzMyIsIl9jYWxsZWUzIiwiX2NhbGxlZTMkIiwiX2NvbnRleHQzIiwiaXNFbGV2ZW5QTSIsImRhdGUiLCJzdWJ0cmFjdE1vbnRoIiwiX3RoaXM0IiwiX2NhbGxlZTQiLCJfY2FsbGVlNCQiLCJfY29udGV4dDQiLCJjb25zb2xlIiwibG9nIiwidDAiLCJjb25jYXQiLCJhZGRNb250aCIsIl90aGlzNSIsIl9jYWxsZWU1IiwiX2NhbGxlZTUkIiwiX2NvbnRleHQ1IiwiZmV0Y2hGaXZlRGF5U2l4SG91clNjaGVkdWxlIiwiX3RoaXM2IiwiX2NhbGxlZTYiLCJyZXNwb25zZSIsIl90aW1lem9uZSIsIl9jYWxsZWU2JCIsIl9jb250ZXh0NiIsImF4aW9zIiwiZ2V0IiwidXNlclRpbWV6b25lIiwiZmV0Y2hUb2RheXNDb250ZW50IiwiX3RoaXM3IiwiX2NhbGxlZTciLCJfdGltZXpvbmUyIiwiX2NhbGxlZTckIiwiX2NvbnRleHQ3IiwicHJlbG9hZFdlZWtseUNvbnRlbnQiLCJfdGhpczgiLCJfY2FsbGVlOCIsImN1cnJlbnREYXRlIiwiX2NhbGxlZTgkIiwiX2NvbnRleHQ4IiwibG9hZFdlZWtGcm9tRGF0ZSIsIl90aGlzOSIsIl9jYWxsZWU5IiwiZm9ybWF0dGVkRGF0ZSIsImZ1bGxJU09EYXRlIiwiX3RpbWV6b25lMyIsIm5ld0RhdGEiLCJ3ZWVrU3RhcnQiLCJ3ZWVrRW5kIiwiZmV0Y2hUaW1lIiwiZXhpc3RpbmdMb2dJbmRleCIsIl9jYWxsZWU5JCIsIl9jb250ZXh0OSIsInBvc3QiLCJmaW5kSW5kZXgiLCJsYXN0RmV0Y2giLCJfdG9Db25zdW1hYmxlQXJyYXkiLCJpbmRleCIsImlkIiwibmVlZHNEYXRhRm9yV2VlayIsImZvcm1hdElTT0RhdGUiLCJzcGxpdCIsIndlZWtTdGFydFN0ciIsIndlZWtFbmRTdHIiLCJ3ZWVrSGFzQmVlbkZldGNoZWQiLCJzb21lIiwibG9nV2Vla1N0YXJ0U3RyIiwibG9nV2Vla0VuZFN0ciIsImNhbGN1bGF0ZUV4dGVuZGVkRW5kRm9yVXBjb21pbmdDb250ZW50IiwiYmFzZVN0YXJ0VGltZSIsImdldFRpbWUiLCJjaGVja0FuZEZldGNoRm9yVXBjb21pbmdDb250ZW50IiwiX3RoaXMxMCIsIl9jYWxsZWUxMCIsInVwY29taW5nRGF0ZXMiLCJmaWZ0ZWVuTWludXRlc0FnbyIsIl9pdGVyYXRvciIsIl9zdGVwIiwiX2xvb3AiLCJfY2FsbGVlMTAkIiwiX2NvbnRleHQxMSIsIl9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyIiwiZGF0ZVN0cmluZyIsImNvbnRlbnRDb3ZlcmFnZUFuZEZyZXNobmVzcyIsIl9sb29wJCIsIl9jb250ZXh0MTAiLCJjb250ZW50IiwiY29udGVudERhdGUiLCJ0b0RhdGVTdHJpbmciLCJsYXN0RmV0Y2hlZFRpbWUiLCJpc0ZyZXNoIiwiZmV0Y2hEYXRhQW5kVXBkYXRlTG9nIiwidDEiLCJfdGhpczExIiwiX2NhbGxlZTExIiwiX2NhbGxlZTExJCIsIl9jb250ZXh0MTIiLCJfdGhpczEyIiwiX2NhbGxlZTEyIiwiX2NhbGxlZTEyJCIsIl9jb250ZXh0MTMiLCJyZXNvbHZlU2NoZWR1bGluZ0NvbmZsaWN0cyIsInNob3dzIiwic29ydGVkU2hvd3MiLCJzb3J0IiwiYiIsInN0YXJ0VGltZUNvbXBhcmlzb24iLCJwcmlvcml0eSIsInJlc29sdmVkU2hvd3MiLCJzaG93c0J5U3RhcnRUaW1lIiwic3RhcnRUaW1lIiwiZ3JvdXAiLCJhZGp1c3RTaG93c0ZvckdyaWQiLCJ0aW1lU2xvdHMiLCJzaG93U3RhcnQiLCJzaG93RW5kIiwiZHVyYXRpb25NaW51dGVzIiwic2xvdEluZGV4Iiwic2xvdCIsInNwYW4iLCJNYXRoIiwiY2VpbCIsImdyaWRTdGFydCIsImdyaWRTcGFuIiwibWFwU2hvd3NUb1RpbWVTbG90cyIsInNob3dzV2l0aEFkanVzdGVkU3BhbnMiLCJncmlkSXRlbXMiLCJzaG93Rm9yU2xvdCIsImZpbmQiLCJwbGFjZWhvbGRlciIsImZpbGxFbXB0eVNsb3RzV2l0aFBsYWNlaG9sZGVycyIsInNob3dzV2l0aFBsYWNlbWVudCIsInNsb3RTdGFydCIsInNob3dFeGlzdHNJblNsb3QiLCJnZXR0ZXJzIiwibmV4dEZvdXJIb3Vyc09mQ29udGVudCIsInN0YXJ0T2ZDdXJyZW50SG91ciIsImZvdXJIb3Vyc0xhdGVyIiwiYWRqdXN0ZWRTaG93cyIsIm5leHRGb3VySG91cnNXaXRoSGFsZkhvdXJJbnRlcnZhbHMiLCJpbnRlcnZhbHMiLCJ0eiIsImN1cnJlbnQiLCJzdGFydE9mIiwiZm9ybWF0dGVkIiwiZGF0ZVRpbWVTdHJpbmciLCJhZGQiLCJ1cGNvbWluZ0NvbnRlbnQiLCJlbmQiLCJzaG93c0dyb3VwZWRCeVN0YXJ0VGltZSIsInJlZHVjZSIsImFjYyIsIml0ZW1TdGFydCIsInNlbGVjdGVkU2hvd3MiLCJzZWxlY3RlZCIsIm5leHRTaXhIb3VycyIsImFkanVzdGVkU3RhcnQiLCJkYXRlTWVzc2FnZSIsInN0YXJ0RGF5IiwiY3VycmVudE1vbnRoSW5kZXgiLCJjdXJyZW50TW9udGhOYW1lIiwiY3VycmVudFllYXIiLCJkYXlzSW5Nb250aCIsInN0YXJ0T2ZDdXJyZW50TW9udGgiLCJlbmRPZkN1cnJlbnRNb250aCIsInN0YXJ0T2ZHcmlkIiwiZW5kT2ZHcmlkIiwidG9kYXkiLCJ2aWV3aW5nU3RhcnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/js/Stores/ScheduleStore.js\n");

/***/ }),

/***/ "./resources/js/Utilities/TimeUtils.js":
/*!*********************************************!*\
  !*** ./resources/js/Utilities/TimeUtils.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createTimeSlots: () => (/* binding */ createTimeSlots)\n/* harmony export */ });\n// utilities/timeUtils.js\nfunction createTimeSlots(start) {\n  var durationHours = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 4;\n  var intervalMinutes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 30;\n  var slots = [];\n  for (var i = 0; i < durationHours * 60 / intervalMinutes; i++) {\n    var slotTime = new Date(start.getTime() + i * intervalMinutes * 60000);\n    slots.push(slotTime.toISOString());\n  }\n  return slots;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvVXRpbGl0aWVzL1RpbWVVdGlscy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDTyxTQUFTQSxlQUFlQSxDQUFDQyxLQUFLLEVBQTJDO0VBQUEsSUFBekNDLGFBQWEsR0FBQUMsU0FBQSxDQUFBQyxNQUFBLFFBQUFELFNBQUEsUUFBQUUsU0FBQSxHQUFBRixTQUFBLE1BQUcsQ0FBQztFQUFBLElBQUVHLGVBQWUsR0FBQUgsU0FBQSxDQUFBQyxNQUFBLFFBQUFELFNBQUEsUUFBQUUsU0FBQSxHQUFBRixTQUFBLE1BQUcsRUFBRTtFQUMxRSxJQUFJSSxLQUFLLEdBQUcsRUFBRTtFQUNkLEtBQUssSUFBSUMsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFJTixhQUFhLEdBQUcsRUFBRSxHQUFJSSxlQUFlLEVBQUVFLENBQUMsRUFBRSxFQUFFO0lBQzdELElBQUlDLFFBQVEsR0FBRyxJQUFJQyxJQUFJLENBQUNULEtBQUssQ0FBQ1UsT0FBTyxDQUFDLENBQUMsR0FBR0gsQ0FBQyxHQUFHRixlQUFlLEdBQUcsS0FBSyxDQUFDO0lBQ3RFQyxLQUFLLENBQUNLLElBQUksQ0FBQ0gsUUFBUSxDQUFDSSxXQUFXLENBQUMsQ0FBQyxDQUFDO0VBQ3RDO0VBQ0EsT0FBT04sS0FBSztBQUNoQiIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3Jlc291cmNlcy9qcy9VdGlsaXRpZXMvVGltZVV0aWxzLmpzP2JiNDMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gdXRpbGl0aWVzL3RpbWVVdGlscy5qc1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVRpbWVTbG90cyhzdGFydCwgZHVyYXRpb25Ib3VycyA9IDQsIGludGVydmFsTWludXRlcyA9IDMwKSB7XG4gICAgbGV0IHNsb3RzID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAoZHVyYXRpb25Ib3VycyAqIDYwKSAvIGludGVydmFsTWludXRlczsgaSsrKSB7XG4gICAgICAgIGxldCBzbG90VGltZSA9IG5ldyBEYXRlKHN0YXJ0LmdldFRpbWUoKSArIGkgKiBpbnRlcnZhbE1pbnV0ZXMgKiA2MDAwMCk7XG4gICAgICAgIHNsb3RzLnB1c2goc2xvdFRpbWUudG9JU09TdHJpbmcoKSk7XG4gICAgfVxuICAgIHJldHVybiBzbG90cztcbn0iXSwibmFtZXMiOlsiY3JlYXRlVGltZVNsb3RzIiwic3RhcnQiLCJkdXJhdGlvbkhvdXJzIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwiaW50ZXJ2YWxNaW51dGVzIiwic2xvdHMiLCJpIiwic2xvdFRpbWUiLCJEYXRlIiwiZ2V0VGltZSIsInB1c2giLCJ0b0lTT1N0cmluZyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/js/Utilities/TimeUtils.js\n");

/***/ })

}]);