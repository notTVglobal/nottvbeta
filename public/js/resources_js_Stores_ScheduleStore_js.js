"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk"] = self["webpackChunk"] || []).push([["resources_js_Stores_ScheduleStore_js"],{

/***/ "./resources/js/Stores/ScheduleStore.js":
/*!**********************************************!*\
  !*** ./resources/js/Stores/ScheduleStore.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useScheduleStore: () => (/* binding */ useScheduleStore)\n/* harmony export */ });\n/* harmony import */ var pinia__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! pinia */ \"./node_modules/pinia/dist/pinia.mjs\");\n/* harmony import */ var _Stores_UserStore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/Stores/UserStore */ \"./resources/js/Stores/UserStore.js\");\n/* harmony import */ var _Stores_AppSettingStore__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/Stores/AppSettingStore */ \"./resources/js/Stores/AppSettingStore.js\");\n/* harmony import */ var _Utilities_TimeUtils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/Utilities/TimeUtils */ \"./resources/js/Utilities/TimeUtils.js\");\n/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! date-fns */ \"./node_modules/date-fns/startOfDay.mjs\");\n/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! date-fns */ \"./node_modules/date-fns/format.mjs\");\n/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! date-fns */ \"./node_modules/date-fns/isToday.mjs\");\n/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! date-fns */ \"./node_modules/date-fns/isYesterday.mjs\");\n/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! date-fns */ \"./node_modules/date-fns/isTomorrow.mjs\");\n/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! dayjs */ \"./node_modules/dayjs/dayjs.min.js\");\n/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(dayjs__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var dayjs_plugin_isSameOrAfter__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! dayjs/plugin/isSameOrAfter */ \"./node_modules/dayjs/plugin/isSameOrAfter.js\");\n/* harmony import */ var dayjs_plugin_isSameOrAfter__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(dayjs_plugin_isSameOrAfter__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var dayjs_plugin_isSameOrBefore__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! dayjs/plugin/isSameOrBefore */ \"./node_modules/dayjs/plugin/isSameOrBefore.js\");\n/* harmony import */ var dayjs_plugin_isSameOrBefore__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(dayjs_plugin_isSameOrBefore__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var dayjs_plugin_relativeTime__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! dayjs/plugin/relativeTime */ \"./node_modules/dayjs/plugin/relativeTime.js\");\n/* harmony import */ var dayjs_plugin_relativeTime__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(dayjs_plugin_relativeTime__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var dayjs_plugin_duration__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! dayjs/plugin/duration */ \"./node_modules/dayjs/plugin/duration.js\");\n/* harmony import */ var dayjs_plugin_duration__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(dayjs_plugin_duration__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var dayjs_plugin_timezone__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! dayjs/plugin/timezone */ \"./node_modules/dayjs/plugin/timezone.js\");\n/* harmony import */ var dayjs_plugin_timezone__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(dayjs_plugin_timezone__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var dayjs_plugin_utc__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! dayjs/plugin/utc */ \"./node_modules/dayjs/plugin/utc.js\");\n/* harmony import */ var dayjs_plugin_utc__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(dayjs_plugin_utc__WEBPACK_IMPORTED_MODULE_9__);\n/* harmony import */ var dayjs_plugin_weekOfYear__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! dayjs/plugin/weekOfYear */ \"./node_modules/dayjs/plugin/weekOfYear.js\");\n/* harmony import */ var dayjs_plugin_weekOfYear__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(dayjs_plugin_weekOfYear__WEBPACK_IMPORTED_MODULE_10__);\n/* harmony import */ var dayjs_plugin_advancedFormat__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! dayjs/plugin/advancedFormat */ \"./node_modules/dayjs/plugin/advancedFormat.js\");\n/* harmony import */ var dayjs_plugin_advancedFormat__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(dayjs_plugin_advancedFormat__WEBPACK_IMPORTED_MODULE_11__);\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, \"catch\": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : String(i); }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n\n\n\n\n\n\n// Import dayjs and its plugins\n\n\n // To check if the day is the same\n\n\n\n\n // For week start and end calculations\n // For more complex formatting options\n\n// Extend dayjs with the plugins\ndayjs__WEBPACK_IMPORTED_MODULE_3___default().extend((dayjs_plugin_relativeTime__WEBPACK_IMPORTED_MODULE_6___default()));\ndayjs__WEBPACK_IMPORTED_MODULE_3___default().extend((dayjs_plugin_duration__WEBPACK_IMPORTED_MODULE_7___default()));\ndayjs__WEBPACK_IMPORTED_MODULE_3___default().extend((dayjs_plugin_timezone__WEBPACK_IMPORTED_MODULE_8___default()));\ndayjs__WEBPACK_IMPORTED_MODULE_3___default().extend((dayjs_plugin_weekOfYear__WEBPACK_IMPORTED_MODULE_10___default()));\ndayjs__WEBPACK_IMPORTED_MODULE_3___default().extend((dayjs_plugin_advancedFormat__WEBPACK_IMPORTED_MODULE_11___default()));\ndayjs__WEBPACK_IMPORTED_MODULE_3___default().extend((dayjs_plugin_utc__WEBPACK_IMPORTED_MODULE_9___default()));\ndayjs__WEBPACK_IMPORTED_MODULE_3___default().extend((dayjs_plugin_isSameOrAfter__WEBPACK_IMPORTED_MODULE_4___default()));\ndayjs__WEBPACK_IMPORTED_MODULE_3___default().extend((dayjs_plugin_isSameOrBefore__WEBPACK_IMPORTED_MODULE_5___default()));\nfunction convertScheduleToTimezone(scheduleData) {\n  var userStore = (0,_Stores_UserStore__WEBPACK_IMPORTED_MODULE_0__.useUserStore)(); // Access the UserStore\n\n  return scheduleData.data.map(function (item) {\n    // Convert top-level start_time and end_time using UserStore methods\n    // console.log(`Original startTime for ${item.id}: ${item.startTime}`)\n    var startTimeInUserTz = item.startTime ? userStore.formatDateTimeFromUtcToUserTimezone(item.startTime, 'YYYY-MM-DD HH:mm:ss') : null;\n    var endTimeInUserTz = item.endTime ? userStore.formatDateTimeFromUtcToUserTimezone(item.endTime, 'YYYY-MM-DD HH:mm:ss') : null;\n    // Add debug logging to help trace conversion issues or confirm correct conversions\n    // console.log(`Converted startTime for ${item.id}: ${startTimeInUserTz}`)\n\n    return _objectSpread(_objectSpread({}, item), {}, {\n      startTime: startTimeInUserTz,\n      endTime: endTimeInUserTz,\n      timezone: userStore.timezone\n    });\n  });\n}\n\n// Helper function to get dates within the next 6 hours from viewingWindowStart\nfunction getUpcomingContentDates(viewingWindowStart) {\n  var dates = [];\n  var start = dayjs__WEBPACK_IMPORTED_MODULE_3___default()(viewingWindowStart); // Ensure viewingWindowStart is a Day.js object\n\n  for (var i = 0; i < 6; i++) {\n    // Add i hours to the start time, each time creating a new Day.js object\n    dates.push(start.add(i, 'hour').toDate()); // Convert to Date if necessary; otherwise keep as Day.js object\n  }\n  console.log(1);\n  return dates;\n}\nvar getTimeZone = function getTimeZone() {\n  var userStore = (0,_Stores_UserStore__WEBPACK_IMPORTED_MODULE_0__.useUserStore)();\n  // This function should return the timezone of the user.\n  // This could be dynamic based on the user's settings or browser settings.\n  // return Intl.DateTimeFormat().resolvedOptions().timeZone;\n  console.log(2);\n  return userStore.timezone;\n};\nvar initialState = function initialState() {\n  return {\n    baseTime: dayjs__WEBPACK_IMPORTED_MODULE_3___default()().tz(getTimeZone()).toDate(),\n    currentHalfHour: dayjs__WEBPACK_IMPORTED_MODULE_3___default()().tz(getTimeZone()).startOf('hour').add(dayjs__WEBPACK_IMPORTED_MODULE_3___default()().minute() >= 30 ? 30 : 0, 'minute').toDate(),\n    fourHoursLater: dayjs__WEBPACK_IMPORTED_MODULE_3___default()().tz(getTimeZone()).startOf('hour').add(dayjs__WEBPACK_IMPORTED_MODULE_3___default()().minute() >= 30 ? 30 : 0, 'minute').add(4, 'hour').toDate(),\n    viewingWindowStart: dayjs__WEBPACK_IMPORTED_MODULE_3___default()().tz(getTimeZone()).startOf('hour').toDate(),\n    currentMonth: dayjs__WEBPACK_IMPORTED_MODULE_3___default()().tz(getTimeZone()).startOf('month').toDate(),\n    selectedDay: dayjs__WEBPACK_IMPORTED_MODULE_3___default()().tz(getTimeZone()).toDate(),\n    currentWeekStart: dayjs__WEBPACK_IMPORTED_MODULE_3___default()().tz(getTimeZone()).startOf('week').toDate(),\n    currentWeekEnd: dayjs__WEBPACK_IMPORTED_MODULE_3___default()().tz(getTimeZone()).endOf('week').toDate(),\n    nextFourHoursOfContent: [],\n    nextFourHoursOfContentWithPlaceholders: [],\n    // nextFourHoursWithHalfHourIntervals: [],\n    // viewingMode: 'automatic', // or 'userSelected'\n    fiveDaySixHourSchedule: [],\n    // Holds the schedule shows 5 day / 6 hour structured data\n    schedules: [],\n    // this is our new schedules array, storing fetched schedule data\n    isLoading: true,\n    // This flag indicates if data is currently being fetched\n    nextPage: 1,\n    // This keeps track of the next page to fetch for pagination\n    hasMore: true,\n    // This flag indicates if there are more schedules to fetch\n    todaysContent: [],\n    weeklyContent: [],\n    dataFetchLog: [],\n    savingToSchedule: false,\n    slotIntervalMinutes: 30,\n    mediumScreenSlotHours: 4,\n    // 4 hours = 8 slots\n    smallScreenSlotHours: 2,\n    // 2 hours = 4 slots\n    verySmallScreenSlotHours: 1,\n    // 1 hour = 2 slots\n    timeSlots: [],\n    timeBanners: [{\n      id: 1,\n      name: 'Early Morning',\n      startTime: '04:00',\n      duration: 2\n    }, {\n      id: 2,\n      name: 'Morning',\n      startTime: '06:00',\n      duration: 6\n    }, {\n      id: 3,\n      name: 'Afternoon',\n      startTime: '12:00',\n      duration: 5\n    }, {\n      id: 4,\n      name: 'Prime Time',\n      startTime: '17:00',\n      duration: 3\n    }, {\n      id: 5,\n      name: 'Late Prime Time',\n      startTime: '20:00',\n      duration: 3\n    }, {\n      id: 6,\n      name: 'Late Night',\n      startTime: '23:00',\n      duration: 2\n    },\n    // Spans midnight to 01:00\n    {\n      id: 7,\n      name: 'Overnight',\n      startTime: '01:00',\n      duration: 3\n    } // Spans from 01:00 to 04:00\n    ]\n  };\n};\nvar useScheduleStore = (0,pinia__WEBPACK_IMPORTED_MODULE_12__.defineStore)('scheduleStore', {\n  state: initialState,\n  actions: {\n    resetAll: function resetAll() {\n      // Reset the store to its original state (clear all data)\n      Object.assign(this, initialState());\n      console.log(3);\n    },\n    reset: function reset() {\n      this.viewingWindowStart = dayjs__WEBPACK_IMPORTED_MODULE_3___default()().tz(getTimeZone()).startOf('hour').toDate();\n      this.currentMonth = dayjs__WEBPACK_IMPORTED_MODULE_3___default()().tz(getTimeZone()).startOf('month').toDate();\n      this.selectedDay = dayjs__WEBPACK_IMPORTED_MODULE_3___default()().tz(getTimeZone()).toDate();\n      console.log(4);\n    },\n    setSelectedDay: function setSelectedDay(day) {\n      var _this = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var selectedDay;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              // Ensure that 'day' is a Day.js object, convert if coming as a native Date or string\n              selectedDay = dayjs__WEBPACK_IMPORTED_MODULE_3___default()(day); // Set the selected day\n              _this.selectedDay = selectedDay.toDate(); // Convert back to Date if necessary; otherwise keep as Day.js object\n\n              // Explicitly set the viewingWindowStart to 4 AM for the selected day\n              _this.viewingWindowStart = selectedDay.startOf('day').add(4, 'hours').toDate();\n\n              // Set the start and end of the week based on the selected day\n              _this.currentWeekStart = selectedDay.startOf('week').toDate(); // Consider week starting on Sunday\n              _this.currentWeekEnd = selectedDay.endOf('week').toDate(); // Consider week ending on Saturday\n\n              // Use the updated fetch logic\n              _context.next = 7;\n              return _this.fetchWeekDataIfNeeded();\n            case 7:\n              console.log(5);\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }))();\n    },\n    setSelectedDayToToday: function setSelectedDayToToday(day) {\n      var now = dayjs__WEBPACK_IMPORTED_MODULE_3___default()(); // Create a Day.js object for the current date and time\n\n      // Set selectedDay to the current date and time\n      this.selectedDay = now.toDate(); // Convert back to Date if necessary; otherwise keep as Day.js object\n\n      // Set viewingWindowStart to the start of the current hour using Day.js\n      this.viewingWindowStart = now.startOf('hour').toDate();\n      console.log(6);\n    },\n    changeDay: function changeDay(days) {\n      var _this2 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var currentTimeZone, currentTime, newDay;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              currentTimeZone = getTimeZone(); // or however you obtain the timezone\n              // Extract the time component from the current viewing window start\n              currentTime = dayjs__WEBPACK_IMPORTED_MODULE_3___default()(_this2.viewingWindowStart).hour() * 60 + dayjs__WEBPACK_IMPORTED_MODULE_3___default()(_this2.viewingWindowStart).minute(); // Create a new day and set it to the start of that day\n              newDay = dayjs__WEBPACK_IMPORTED_MODULE_3___default()(_this2.viewingWindowStart).tz(currentTimeZone).add(days, 'day').startOf('day'); // Set the time back to the original time\n              newDay = newDay.add(currentTime, 'minute');\n\n              // Depending on your application's needs, you may or may not need to convert it back to a JavaScript Date object\n              // If you need a Date object:\n              _this2.viewingWindowStart = newDay.toDate();\n\n              // If you can use dayjs objects directly (preferred if possible):\n              _this2.viewingWindowStart = newDay;\n\n              // // Check if the week of the new day is already loaded\n              // const weekStart = startOfWeek(newDay, {weekStartsOn: 0});\n              // const weekEnd = endOfWeek(newDay, {weekStartsOn: 0});\n\n              // Use the updated centralized fetch logic without redundant checks\n              _context2.next = 8;\n              return _this2.fetchWeekDataIfNeeded();\n            case 8:\n              // // Check for the need to load data for the new week\n              // if (this.needsDataForWeek(weekStart, weekEnd)) {\n              //     await this.loadWeekFromDate(newDay).catch(error => {\n              //         console.error(\"Failed to load data for the new week:\", error);\n              //     });\n              // }\n\n              // // Check for the need to load data for the new week\n              // if (!this.needsDataForWeek()) {\n              //     // Data for the current week has already been loaded; skip fetching\n              //     console.log(\"Data for the current week has already been loaded; skipping redundant fetch.\");\n              //     return;\n              // }\n              //\n              // // Proceed with data fetching if needed\n              // await this.checkAndFetchForUpcomingContent();\n              console.log(7);\n            case 9:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2);\n      }))();\n    },\n    shiftHours: function shiftHours(hours) {\n      var _this3 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              // Shift the viewing window by the specified number of hours\n              _this3.viewingWindowStart = dayjs__WEBPACK_IMPORTED_MODULE_3___default()(_this3.viewingWindowStart).add(hours, 'hour').toDate();\n\n              // Set the current week start and end based on the new viewing window start\n              _this3.currentWeekStart = dayjs__WEBPACK_IMPORTED_MODULE_3___default()(_this3.viewingWindowStart).startOf('week').toDate();\n              _this3.currentWeekEnd = dayjs__WEBPACK_IMPORTED_MODULE_3___default()(_this3.viewingWindowStart).endOf('week').toDate();\n\n              // If the day has changed, update selectedDay and the week's range\n              if (!dayjs__WEBPACK_IMPORTED_MODULE_3___default()(_this3.viewingWindowStart).isSame(dayjs__WEBPACK_IMPORTED_MODULE_3___default()(_this3.selectedDay), 'day')) {\n                _this3.selectedDay = dayjs__WEBPACK_IMPORTED_MODULE_3___default()(_this3.viewingWindowStart).startOf('day').toDate();\n              }\n\n              // Use the updated fetch logic\n              _context3.next = 6;\n              return _this3.fetchWeekDataIfNeeded();\n            case 6:\n              console.log(8);\n            case 7:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3);\n      }))();\n    },\n    isElevenPM: function isElevenPM(date) {\n      // Convert the date to a Day.js object if it's not already one\n      var time = dayjs__WEBPACK_IMPORTED_MODULE_3___default()(date);\n      // Check if the hour is 23 (11 PM)\n      console.log(9);\n      return time.hour() === 23;\n    },\n    // Actions to change the month\n    subtractMonth: function subtractMonth() {\n      var _this4 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              // Convert currentMonth to a Day.js object if it's not already and subtract one month\n              _this4.currentMonth = dayjs__WEBPACK_IMPORTED_MODULE_3___default()(_this4.currentMonth).subtract(1, 'month').toDate();\n              _context4.prev = 1;\n              _context4.next = 4;\n              return _this4.setSelectedDay(_this4.currentMonth);\n            case 4:\n              console.log('Set selected day based on current month:', _this4.currentMonth);\n              _context4.next = 10;\n              break;\n            case 7:\n              _context4.prev = 7;\n              _context4.t0 = _context4[\"catch\"](1);\n              console.error(\"Failed to set selected day based on current month \".concat(_this4.currentMonth, \":\"), _context4.t0);\n            case 10:\n              console.log(10);\n            case 11:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, null, [[1, 7]]);\n      }))();\n    },\n    addMonth: function addMonth() {\n      var _this5 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              // Convert currentMonth to a Day.js object if it's not already and add one month\n              _this5.currentMonth = dayjs__WEBPACK_IMPORTED_MODULE_3___default()(_this5.currentMonth).add(1, 'month').toDate();\n              _context5.prev = 1;\n              _context5.next = 4;\n              return _this5.setSelectedDay(_this5.currentMonth);\n            case 4:\n              console.log('Set selected day based on current month:', _this5.currentMonth);\n              _context5.next = 10;\n              break;\n            case 7:\n              _context5.prev = 7;\n              _context5.t0 = _context5[\"catch\"](1);\n              console.error(\"Failed to set selected day based on current month \".concat(_this5.currentMonth, \":\"), _context5.t0);\n            case 10:\n              console.log(11);\n            case 11:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5, null, [[1, 7]]);\n      }))();\n    },\n    fetchFiveDaySixHourSchedule: function fetchFiveDaySixHourSchedule() {\n      var _this6 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n        var userStore, response, _timezone;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              console.error('fetchFiveDaySixHourSchedule');\n              _context6.prev = 1;\n              userStore = (0,_Stores_UserStore__WEBPACK_IMPORTED_MODULE_0__.useUserStore)();\n              _context6.next = 5;\n              return axios.get('/api/schedule');\n            case 5:\n              response = _context6.sent;\n              // Fallback to response timezone if userStore.timezone is not set\n              _timezone = userStore.timezone || response.data.userTimezone || 'UTC'; // Additional fallback to 'UTC'\n              // Convert the entire schedule, including nested recurrenceDetails, to the user's timezone\n              _this6.fiveDaySixHourSchedule = convertScheduleToTimezone(response.data, _timezone);\n              console.error('fetchFiveDaySixHourSchedule', response.data);\n              _context6.next = 14;\n              break;\n            case 11:\n              _context6.prev = 11;\n              _context6.t0 = _context6[\"catch\"](1);\n              console.error('Failed to load schedule shows:', _context6.t0);\n              // Handle the error state as needed, e.g., setting an error state property\n            case 14:\n              console.log(12);\n            case 15:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee6, null, [[1, 11]]);\n      }))();\n    },\n    fetchTodaysContent: function fetchTodaysContent() {\n      var _this7 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n        var userStore, response, _timezone2;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.prev = 0;\n              userStore = (0,_Stores_UserStore__WEBPACK_IMPORTED_MODULE_0__.useUserStore)();\n              _context7.next = 4;\n              return axios.get('/api/schedule/today');\n            case 4:\n              response = _context7.sent;\n              // Fallback to response timezone if userStore.timezone is not set\n              _timezone2 = userStore.timezone || response.data.userTimezone || 'UTC'; // Additional fallback to 'UTC'\n              _this7.todaysContent = convertScheduleToTimezone(response.data, _timezone2);\n              _context7.next = 12;\n              break;\n            case 9:\n              _context7.prev = 9;\n              _context7.t0 = _context7[\"catch\"](0);\n              console.error('Failed to fetch today\\'s content:', _context7.t0);\n            case 12:\n              console.log(13);\n            case 13:\n            case \"end\":\n              return _context7.stop();\n          }\n        }, _callee7, null, [[0, 9]]);\n      }))();\n    },\n    preloadWeeklyContent: function preloadWeeklyContent() {\n      var _this8 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {\n        var currentDate;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) switch (_context8.prev = _context8.next) {\n            case 0:\n              console.log('preloading weekly content...');\n              // Use the current date to preload content for the current week\n              currentDate = dayjs__WEBPACK_IMPORTED_MODULE_3___default()(_this8.baseTime); // Creates a Day.js object representing the current date and time\n              _context8.prev = 2;\n              _context8.next = 5;\n              return _this8.loadWeekFromDate(currentDate);\n            case 5:\n              _context8.next = 10;\n              break;\n            case 7:\n              _context8.prev = 7;\n              _context8.t0 = _context8[\"catch\"](2);\n              console.error('Failed to preload weekly content:', _context8.t0);\n            case 10:\n              console.log(14);\n            case 11:\n            case \"end\":\n              return _context8.stop();\n          }\n        }, _callee8, null, [[2, 7]]);\n      }))();\n    },\n    // this is our new fetch schedules method.\n    fetchSchedules: function fetchSchedules(startDate, endDate) {\n      var _this9 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {\n        var userStore, dayStartDate, dayEndDate, fullISOStartDate, fullISOEndDate, response, formattedStartDate, formattedEndDate, _timezone3, newData;\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) switch (_context9.prev = _context9.next) {\n            case 0:\n              _this9.isLoading = true;\n              _this9.loading = true;\n              console.log('Loading schedule...');\n              console.log(\"Loading schedule between: \".concat(startDate, \" and \").concat(endDate)); // Log the date being requested\n              _context9.prev = 4;\n              userStore = (0,_Stores_UserStore__WEBPACK_IMPORTED_MODULE_0__.useUserStore)();\n              dayStartDate = dayjs__WEBPACK_IMPORTED_MODULE_3___default()(startDate);\n              dayEndDate = dayjs__WEBPACK_IMPORTED_MODULE_3___default()(endDate);\n              fullISOStartDate = dayStartDate.toISOString();\n              fullISOEndDate = dayEndDate.toISOString();\n              _context9.next = 12;\n              return axios.get(\"/api/schedules/range?start=\".concat(fullISOStartDate, \"&end=\").concat(fullISOEndDate));\n            case 12:\n              response = _context9.sent;\n              formattedStartDate = dayStartDate.format('YYYY-MM-DD'); // For potential error messages and logging\n              formattedEndDate = dayEndDate.format('YYYY-MM-DD'); // For potential error messages and logging\n              console.log(\"Loading schedule between: \".concat(formattedStartDate, \" and \").concat(formattedEndDate)); // Log the date being requested\n              console.log('Received response:', response.data); // Log the raw response data\n\n              // Fallback to response timezone if userStore.timezone is not set\n              _timezone3 = userStore.timezone || response.data.userTimezone;\n              newData = convertScheduleToTimezone(response.data, _timezone3); // Ensure you are accessing the correct data property from the response\n              // Merge newData into schedules, avoiding duplicates\n              _this9.schedules = [].concat(_toConsumableArray(_this9.schedules), _toConsumableArray(newData)).filter(function (value, index, self) {\n                return index === self.findIndex(function (t) {\n                  return t.id === value.id && t.startTime === value.startTime;\n                });\n              });\n              console.log('Updated schedules:', _this9.schedules); // Log the updated weekly content\n\n              // Optionally update fetch logs or perform additional state updates\n              // this.updateFetchLogs(startDate) // this was designed to just log a week fetching at a time.\n              _context9.next = 28;\n              break;\n            case 23:\n              _context9.prev = 23;\n              _context9.t0 = _context9[\"catch\"](4);\n              console.error('Failed to fetch schedules:', _context9.t0);\n              _this9.isLoading = false;\n              console.log('012');\n            case 28:\n              _context9.prev = 28;\n              _this9.isLoading = false;\n              console.log('Week from date loaded!');\n              return _context9.finish(28);\n            case 32:\n            case \"end\":\n              return _context9.stop();\n          }\n        }, _callee9, null, [[4, 23, 28, 32]]);\n      }))();\n    },\n    fetchMoreSchedules: function fetchMoreSchedules() {\n      var _this10 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {\n        var lastSchedule, startDate, endDate, newSchedules;\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) switch (_context10.prev = _context10.next) {\n            case 0:\n              if (!(_this10.isLoading || !_this10.hasMore)) {\n                _context10.next = 2;\n                break;\n              }\n              return _context10.abrupt(\"return\");\n            case 2:\n              _this10.isLoading = true;\n              console.log('Fetching more schedules...');\n              _context10.prev = 4;\n              lastSchedule = _this10.schedules[_this10.schedules.length - 1];\n              startDate = lastSchedule ? dayjs__WEBPACK_IMPORTED_MODULE_3___default()(lastSchedule.startTime).format('YYYY-MM-DD') : dayjs__WEBPACK_IMPORTED_MODULE_3___default()().format('YYYY-MM-DD');\n              endDate = dayjs__WEBPACK_IMPORTED_MODULE_3___default()(startDate).add(7, 'day').format('YYYY-MM-DD'); // Fetch the next 7 days\n              _context10.next = 10;\n              return _this10.fetchSchedules(startDate, endDate);\n            case 10:\n              // Check if new schedules were added\n              newSchedules = _this10.schedules.slice(_this10.schedules.length - 1); // If no new schedules are fetched, set hasMore to false\n              if (newSchedules.length === 0) {\n                _this10.hasMore = false;\n              } else {\n                // Increment the next page number for future fetches\n                _this10.nextPage += 1;\n              }\n              _context10.next = 17;\n              break;\n            case 14:\n              _context10.prev = 14;\n              _context10.t0 = _context10[\"catch\"](4);\n              console.error('Failed to fetch more schedules:', _context10.t0);\n            case 17:\n              _context10.prev = 17;\n              _this10.isLoading = false;\n              return _context10.finish(17);\n            case 20:\n            case \"end\":\n              return _context10.stop();\n          }\n        }, _callee10, null, [[4, 14, 17, 20]]);\n      }))();\n    },\n    loadWeekFromDate: function loadWeekFromDate(date) {\n      var _this11 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11() {\n        var formattedDate, userStore, dayDate, fullISODate, response, _formattedDate, _timezone4, newData;\n        return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n          while (1) switch (_context11.prev = _context11.next) {\n            case 0:\n              formattedDate = null; // Declare formattedDate outside of the try block\n              _this11.isLoading = true;\n              console.log('Loading week from date...');\n              _context11.prev = 3;\n              userStore = (0,_Stores_UserStore__WEBPACK_IMPORTED_MODULE_0__.useUserStore)(); // Ensure the date is in UTC format for the request\n              // console.log('Date before formatted: ' + date)\n              // Convert date to Day.js object and format it in ISO string with UTC\n              dayDate = dayjs__WEBPACK_IMPORTED_MODULE_3___default()(date);\n              fullISODate = dayDate.toISOString(); // console.log(`Loading week data for date in UTC: ${fullISODate}`)\n              // Fetch the week's schedule data\n              // Send the dateTime and timezone as a JSON object in a POST request\n              _context11.next = 9;\n              return axios.post(\"/api/schedule/week/\".concat(fullISODate));\n            case 9:\n              response = _context11.sent;\n              // const formattedDate = date.toISOString().split('T')[0];\n              // Log and error handling\n              _formattedDate = dayDate.format('YYYY-MM-DD'); // For potential error messages and logging\n              console.log(\"Loading week data for date: \".concat(_formattedDate)); // Log the date being requested\n              //\n              // const response = await axios.get(`/api/schedule/week/${formattedDate}`);\n              console.log('Received response:', response.data); // Log the raw response data\n\n              // Fallback to response timezone if userStore.timezone is not set\n              _timezone4 = userStore.timezone || response.data.userTimezone; // console.log(`Using timezone: ${timezone}`) // Log the timezone being used\n              newData = convertScheduleToTimezone(response.data, _timezone4); // Ensure you are accessing the correct data property from the response\n              // Merge newData into weeklyContent, avoiding duplicates\n              _this11.weeklyContent = [].concat(_toConsumableArray(_this11.weeklyContent), _toConsumableArray(newData)).filter(function (value, index, self) {\n                return index === self.findIndex(function (t) {\n                  return t.id === value.id && t.startTime === value.startTime;\n                });\n              });\n              console.log('Updated weeklyContent:', _this11.weeklyContent); // Log the updated weekly content\n\n              // Optionally update fetch logs or perform additional state updates\n              _this11.updateFetchLogs(date);\n              _this11.isLoading = false;\n              console.log('Week from date loaded!');\n              _context11.next = 27;\n              break;\n            case 22:\n              _context11.prev = 22;\n              _context11.t0 = _context11[\"catch\"](3);\n              console.error(\"Failed to load content for week starting \".concat(formattedDate, \":\"), _context11.t0);\n              _this11.isLoading = false;\n              console.log('002');\n            case 27:\n              console.log(15);\n              console.log('End of loadWeekFromDate function');\n            case 29:\n            case \"end\":\n              return _context11.stop();\n          }\n        }, _callee11, null, [[3, 22]]);\n      }))();\n    },\n    updateFetchLogs: function updateFetchLogs(date) {\n      // Convert date to a Day.js object if it's not already one\n      var dayDate = dayjs__WEBPACK_IMPORTED_MODULE_3___default()(date);\n\n      // Use Day.js to calculate the start and end of the week\n      var weekStart = dayDate.startOf('week').toISOString(); // Assumes the week starts on Sunday\n      var weekEnd = dayDate.endOf('week').toISOString(); // Assumes the week ends on Saturday\n      var fetchTime = dayjs__WEBPACK_IMPORTED_MODULE_3___default()().toISOString(); // Current time in ISO format\n\n      // Find existing log entry for the week\n      var existingLogIndex = this.dataFetchLog.findIndex(function (log) {\n        return log.weekStart === weekStart && log.weekEnd === weekEnd;\n      });\n      if (existingLogIndex !== -1) {\n        // Update the last fetch time if the log already exists\n        this.dataFetchLog[existingLogIndex].lastFetch = fetchTime;\n      } else {\n        // Add a new log entry if it does not exist\n        this.dataFetchLog.push({\n          weekStart: weekStart,\n          weekEnd: weekEnd,\n          lastFetch: fetchTime\n        });\n      }\n      console.log(16);\n    },\n    needsDataForWeek: function needsDataForWeek() {\n      // Helper function to format dates to 'YYYY-MM-DD' for easier comparison\n      var formatISODate = function formatISODate(date) {\n        return dayjs__WEBPACK_IMPORTED_MODULE_3___default()(date).format('YYYY-MM-DD');\n      };\n\n      // Current week range in 'YYYY-MM-DD' format\n      var weekStartStr = formatISODate(this.currentWeekStart);\n      var weekEndStr = formatISODate(this.currentWeekEnd);\n\n      // Enhanced logging for debugging\n      // console.log(`Current week range: ${weekStartStr} to ${weekEndStr}`)\n      // console.log('Existing data fetch log entries:', this.dataFetchLog)\n\n      // Iterate through the fetch log to check if the current week has been fetched\n      var weekHasBeenFetched = this.dataFetchLog.some(function (log) {\n        // Convert log dates to 'YYYY-MM-DD' format for comparison\n        var logWeekStartStr = formatISODate(log.weekStart);\n        var logWeekEndStr = formatISODate(log.weekEnd);\n\n        // Log each comparison for insight\n        // console.log(`Comparing to fetched range: ${logWeekStartStr} to ${logWeekEndStr}`)\n\n        return logWeekStartStr <= weekStartStr && logWeekEndStr >= weekEndStr;\n      });\n\n      // Log the final determination\n      // console.log(`Week from ${weekStartStr} to ${weekEndStr} has ${weekHasBeenFetched ? '' : 'not '}been fetched.`)\n      console.log(17);\n      return !weekHasBeenFetched;\n    },\n    calculateExtendedEndForUpcomingContent: function calculateExtendedEndForUpcomingContent() {\n      // Convert viewingWindowStart to a Day.js object if it's not already one\n      var baseStartTime = dayjs__WEBPACK_IMPORTED_MODULE_3___default()(this.viewingWindowStart);\n\n      // Extend by 6 hours to cover the upcoming content span\n      // Day.js handles date and time addition cleanly, returning a new Day.js object\n      var extendedEndTime = baseStartTime.add(6, 'hour');\n      console.log(18);\n      // Return the extended end time as a Date object, if needed elsewhere as a Date\n      return extendedEndTime.toDate();\n    },\n    // Function to check for and fetch missing upcoming content\n    checkAndFetchForUpcomingContent: function checkAndFetchForUpcomingContent() {\n      var _this12 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12() {\n        var upcomingDates, now, fifteenMinutesAgo, _iterator, _step, _loop;\n        return _regeneratorRuntime().wrap(function _callee12$(_context13) {\n          while (1) switch (_context13.prev = _context13.next) {\n            case 0:\n              upcomingDates = getUpcomingContentDates(_this12.viewingWindowStart); // Assuming this returns Day.js objects\n              now = dayjs__WEBPACK_IMPORTED_MODULE_3___default()();\n              fifteenMinutesAgo = now.subtract(15, 'minutes');\n              _iterator = _createForOfIteratorHelper(upcomingDates);\n              _context13.prev = 4;\n              _loop = /*#__PURE__*/_regeneratorRuntime().mark(function _loop() {\n                var date, dateString, contentCoverageAndFreshness;\n                return _regeneratorRuntime().wrap(function _loop$(_context12) {\n                  while (1) switch (_context12.prev = _context12.next) {\n                    case 0:\n                      date = _step.value;\n                      dateString = date.format('YYYY-MM-DD'); // Day.js format for 'YYYY-MM-DD'\n                      contentCoverageAndFreshness = _this12.weeklyContent.some(function (content) {\n                        var contentDate = dayjs__WEBPACK_IMPORTED_MODULE_3___default()(content.startTime).format('YYYY-MM-DD'); // Convert and compare as 'YYYY-MM-DD'\n                        var lastFetchedTime = _this12.dataFetchLog[dateString];\n                        var isFresh = lastFetchedTime && dayjs__WEBPACK_IMPORTED_MODULE_3___default()(lastFetchedTime) > fifteenMinutesAgo;\n                        return dateString === contentDate && isFresh;\n                      });\n                      if (contentCoverageAndFreshness) {\n                        _context12.next = 7;\n                        break;\n                      }\n                      _context12.next = 6;\n                      return _this12.fetchDataAndUpdateLog(dateString, date.toDate());\n                    case 6:\n                      return _context12.abrupt(\"return\", 1);\n                    case 7:\n                    case \"end\":\n                      return _context12.stop();\n                  }\n                }, _loop);\n              });\n              _iterator.s();\n            case 7:\n              if ((_step = _iterator.n()).done) {\n                _context13.next = 13;\n                break;\n              }\n              return _context13.delegateYield(_loop(), \"t0\", 9);\n            case 9:\n              if (!_context13.t0) {\n                _context13.next = 11;\n                break;\n              }\n              return _context13.abrupt(\"break\", 13);\n            case 11:\n              _context13.next = 7;\n              break;\n            case 13:\n              _context13.next = 18;\n              break;\n            case 15:\n              _context13.prev = 15;\n              _context13.t1 = _context13[\"catch\"](4);\n              _iterator.e(_context13.t1);\n            case 18:\n              _context13.prev = 18;\n              _iterator.f();\n              return _context13.finish(18);\n            case 21:\n              console.log(19);\n            case 22:\n            case \"end\":\n              return _context13.stop();\n          }\n        }, _callee12, null, [[4, 15, 18, 21]]);\n      }))();\n    },\n    fetchDataAndUpdateLog: function fetchDataAndUpdateLog(dateString, date) {\n      var _this13 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13() {\n        var dayDate;\n        return _regeneratorRuntime().wrap(function _callee13$(_context14) {\n          while (1) switch (_context14.prev = _context14.next) {\n            case 0:\n              _context14.prev = 0;\n              // Assuming 'date' is already a Day.js object; if not, convert it\n              dayDate = dayjs__WEBPACK_IMPORTED_MODULE_3___default()(date);\n              _context14.next = 4;\n              return _this13.loadWeekFromDate(dayDate.toDate());\n            case 4:\n              // Pass as a Date if needed, or adjust 'loadWeekFromDate' to accept Day.js objects\n              // Successfully fetched, so update the log\n              _this13.dataFetchLog[dateString] = dayjs__WEBPACK_IMPORTED_MODULE_3___default()().toISOString(); // Use Day.js to get the current time in ISO format\n              // console.log('Data fetched successfully for date:', dateString)\n              _context14.next = 10;\n              break;\n            case 7:\n              _context14.prev = 7;\n              _context14.t0 = _context14[\"catch\"](0);\n              console.error(\"Failed to fetch data for date \".concat(dateString, \":\"), _context14.t0);\n            case 10:\n              console.log(20);\n            case 11:\n            case \"end\":\n              return _context14.stop();\n          }\n        }, _callee13, null, [[0, 7]]);\n      }))();\n    },\n    // Updated to use this.currentWeekStart and this.currentWeekEnd directly\n    fetchWeekDataIfNeeded: function fetchWeekDataIfNeeded() {\n      var _this14 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14() {\n        return _regeneratorRuntime().wrap(function _callee14$(_context15) {\n          while (1) switch (_context15.prev = _context15.next) {\n            case 0:\n              if (!_this14.needsDataForWeek()) {\n                _context15.next = 5;\n                break;\n              }\n              _context15.next = 3;\n              return _this14.checkAndFetchForUpcomingContent()[\"catch\"](function (error) {\n                console.error('Failed to load data for the week:', error);\n                return false; // Indicates failure to fetch when an error occurs\n              });\n            case 3:\n              _context15.next = 6;\n              break;\n            case 5:\n              console.log('Week data already loaded; no need to fetch.');\n            case 6:\n              console.log(21);\n            case 7:\n            case \"end\":\n              return _context15.stop();\n          }\n        }, _callee14);\n      }))();\n    },\n    // Function to simply update baseTime with the given time (expected to be a Day.js object or compatible input)\n    updateBaseTime: function updateBaseTime(time) {\n      // Ensure the time is a Day.js object when setting baseTime\n      this.baseTime = dayjs__WEBPACK_IMPORTED_MODULE_3___default()(time).toDate(); // Convert to Date if necessary; consider keeping it as Day.js object if possible\n      console.log(22);\n    },\n    // Function to set baseTime based on a new time input (expected to be a string, Date, etc.)\n    setBaseTime: function setBaseTime(newTime) {\n      // Convert newTime to a Day.js object and then to Date if necessary\n      this.baseTime = dayjs__WEBPACK_IMPORTED_MODULE_3___default()(newTime).toDate(); // This handles various input formats and ensures consistency\n      console.log(23);\n    },\n    /**\n     * This method orchestrates the update of show scheduling data for the next four hours.\n     * It is designed to be triggered when there are changes to the base time or when a manual refresh is needed.\n     * The method handles loading and organizing the scheduling data to be ready for display in the grid.\n     */\n    updateNextFourHours: function updateNextFourHours() {\n      var _this15 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15() {\n        return _regeneratorRuntime().wrap(function _callee15$(_context16) {\n          while (1) switch (_context16.prev = _context16.next) {\n            case 0:\n              // Set the loading state to true to indicate that data processing is underway.\n              // This can be used to display a loading spinner or disable user interaction temporarily.\n              _this15.isLoading = true;\n\n              // Update the time range for the scheduling grid. This adjusts `currentHalfHour` and `fourHoursLater`\n              // based on the current `baseTime`. These values define the range of time for which shows will be displayed.\n              _this15.updateTimeRange();\n\n              // Update the time slots\n              _this15.setTimeSlots();\n\n              // Prepares the shows for the grid display by filtering, calculating grid slots,\n              // resolving conflicts, and optionally filling empty grid slots with placeholders.\n              // This step involves several functions that ensure shows are positioned correctly according to their\n              // start time, duration, and conflicts with other shows.\n              _this15.prepareShowsForGrid();\n\n              // Reset the loading state to false indicates that the data processing is complete.\n              // This allows the user interface to be interactive again and shows the updated data in the grid.\n              _this15.isLoading = false;\n              console.log(24);\n            case 6:\n            case \"end\":\n              return _context16.stop();\n          }\n        }, _callee15);\n      }))();\n    },\n    updateTimeRange: function updateTimeRange() {\n      // Ensure the baseTime is interpreted correctly in the current user's timezone\n      var baseDate = dayjs__WEBPACK_IMPORTED_MODULE_3___default()(this.baseTime).tz(getTimeZone());\n\n      // Calculate the rounded minutes to either 0 or 30 based on the current time\n      var roundedMinutes = baseDate.minute() < 30 ? 0 : 30;\n\n      // Set the current half hour, rounding down to the nearest half-hour mark\n      var currentHalfHour = baseDate.minute(roundedMinutes).second(0).millisecond(0).startOf('minute');\n\n      // Calculate four hours later from the current half-hour mark\n      var fourHoursLater = currentHalfHour.add(4, 'hours');\n\n      // Update the store's currentHalfHour and fourHoursLater ensuring they are Date objects if required\n      this.currentHalfHour = currentHalfHour.toDate();\n      this.fourHoursLater = fourHoursLater.toDate();\n      console.log(25);\n\n      // console.log('Fetching shows between:', currentHalfHour.format('YYYY-MM-DD HH:mm:ss'), 'and', fourHoursLater.format('YYYY-MM-DD HH:mm:ss'))\n    },\n    initializeTimeSlots: function initializeTimeSlots() {\n      this.timeSlots = (0,_Utilities_TimeUtils__WEBPACK_IMPORTED_MODULE_2__.createTimeSlots)();\n    },\n    setTimeSlots: function setTimeSlots() {\n      var appSettingStore = (0,_Stores_AppSettingStore__WEBPACK_IMPORTED_MODULE_1__.useAppSettingStore)();\n      var slotHours;\n\n      // Determine the number of slot hours based on screen size\n      if (appSettingStore.isVerySmallScreen) {\n        slotHours = this.verySmallScreenSlotHours;\n      } else if (appSettingStore.isSmallScreen) {\n        slotHours = this.smallScreenSlotHours;\n      } else {\n        slotHours = this.mediumScreenSlotHours;\n      }\n      var intervalMinutes = this.slotIntervalMinutes;\n      var slots = [];\n      var totalSlots = slotHours * 60 / intervalMinutes;\n\n      // Ensure state.currentHalfHour is a Day.js object\n      var currentHalfHour = dayjs__WEBPACK_IMPORTED_MODULE_3___default()(this.currentHalfHour);\n\n      // Calculate the time for each slot using Day.js\n      for (var i = 0; i < totalSlots; i++) {\n        var slotTime = currentHalfHour.add(i * intervalMinutes, 'minute');\n        slots.push(slotTime.toDate()); // Convert back to JavaScript Date if necessary\n      }\n      this.timeSlots = slots;\n      console.log(26);\n      return slots.length;\n    },\n    prepareShowsForGrid: function prepareShowsForGrid() {\n      if (!this.timeSlots || !Array.isArray(this.timeSlots) || this.timeSlots.length === 0) {\n        console.error('timeSlots is not properly initialized.');\n        console.log(27);\n        // Handle this scenario, e.g., by initializing timeSlots, or skipping the update\n        return;\n      }\n\n      // Step 1: Filter shows within the desired time range\n      var shows = this.filterShowsForTimeRange();\n\n      // Step 2: Calculate initial grid slots for these shows\n      var processedShows = this.calculateGridSlots(shows, this.timeSlots);\n\n      // Step 3: Process shows to set nowPlaying and comingUpNext flags\n      var showsWithStatusFlags = this.processShows(processedShows);\n\n      // Step 4: Update column occupancy and find the maximum row used\n      var _this$updateColumnOcc = this.updateColumnOccupancy(showsWithStatusFlags, this.timeSlots.length),\n        colOccupancy = _this$updateColumnOcc.colOccupancy,\n        maxRowUsed = _this$updateColumnOcc.maxRowUsed;\n\n      // Step 5: Fill gaps in the grid with placeholders\n      var gridItems = this.fillGapsAndCreatePlaceholders(colOccupancy, maxRowUsed, this.timeSlots.length);\n\n      // Step 6: Combine processed shows with the placeholders\n      var combinedShows = [].concat(_toConsumableArray(showsWithStatusFlags), _toConsumableArray(gridItems));\n\n      // Step 7: Sort and group shows by rows\n      this.nextFourHoursOfContent = this.sortShowsByPosition(combinedShows);\n      console.log(28);\n    },\n    filterShowsForTimeRange: function filterShowsForTimeRange() {\n      var _this16 = this;\n      return this.schedules.filter(function (show) {\n        // Validate show data integrity\n        if (typeof show.startTime !== 'string' || typeof show.durationMinutes !== 'number') {\n          console.warn('Invalid show data:', show.startTime, show.durationMinutes);\n          console.log(29);\n          return false; // Skip this show if it doesn't meet data expectations\n        }\n        var showStart = dayjs__WEBPACK_IMPORTED_MODULE_3___default()(show.startTime);\n        var showEnd = dayjs__WEBPACK_IMPORTED_MODULE_3___default()(show.endTime);\n        var isInTimeRange = showStart.isBefore(_this16.fourHoursLater) && showEnd.isAfter(_this16.currentHalfHour);\n\n        // Detailed logging for debugging\n        if (isInTimeRange) {\n          var hasStarted = showStart.isBefore(_this16.currentHalfHour) ? 'already started' : 'starts within range';\n          console.log(\"Show: \".concat(show.content.name, \", \").concat(hasStarted, \", Start: \").concat(showStart.format('HH:mm:ss'), \", End: \").concat(showEnd.format('HH:mm:ss'), \", Duration: \").concat(show.durationMinutes));\n        }\n        console.log(30);\n        return isInTimeRange;\n      });\n    },\n    calculateGridSlots: function calculateGridSlots(shows, timeSlots) {\n      // Validate the timeSlots array to prevent errors\n      if (!Array.isArray(timeSlots) || timeSlots.length === 0) {\n        console.error('Invalid or empty timeSlots array');\n        console.log(31);\n        return []; // Exit if no valid time slots to work with\n      }\n\n      // Determine the range of timeSlots\n      var firstTimeSlot = dayjs__WEBPACK_IMPORTED_MODULE_3___default()(timeSlots[0]);\n      var lastTimeSlot = dayjs__WEBPACK_IMPORTED_MODULE_3___default()(timeSlots[timeSlots.length - 1]).add(30, 'minutes');\n      return shows.filter(function (show) {\n        var showStart = dayjs__WEBPACK_IMPORTED_MODULE_3___default()(show.startTime);\n        var showEnd = dayjs__WEBPACK_IMPORTED_MODULE_3___default()(show.endTime);\n        return showStart.isBefore(lastTimeSlot) && showEnd.isAfter(firstTimeSlot);\n      }).map(function (show) {\n        var showStart = dayjs__WEBPACK_IMPORTED_MODULE_3___default()(show.startTime);\n        var showEnd = dayjs__WEBPACK_IMPORTED_MODULE_3___default()(show.endTime);\n        console.log('************************************');\n        console.log(\"Processing show: \".concat(show.content.name, \", Start: \").concat(show.startTime, \", End: \").concat(show.endTime));\n\n        // Find the index of the slot where the show should start\n        var slotIndex = timeSlots.findIndex(function (slot) {\n          return showStart.isSameOrBefore(dayjs__WEBPACK_IMPORTED_MODULE_3___default()(slot));\n        });\n\n        // Adjust if the show starts exactly at a slot time or just after the last checked slot time\n        if (slotIndex === -1 || showStart.isAfter(dayjs__WEBPACK_IMPORTED_MODULE_3___default()(timeSlots[slotIndex]))) {\n          slotIndex = Math.max(0, slotIndex);\n        }\n        console.log(\"Comparing show start \".concat(showStart.format(), \" to timeSlot index \").concat(slotIndex, \" at \").concat(dayjs__WEBPACK_IMPORTED_MODULE_3___default()(timeSlots[slotIndex]).format()));\n\n        // Calculate the end slot index\n        var endSlotIndex = timeSlots.findIndex(function (slot) {\n          return showEnd.isSameOrBefore(dayjs__WEBPACK_IMPORTED_MODULE_3___default()(slot).add(30, 'minutes'));\n        });\n\n        // If the end slot index points to a slot that starts after the show ends, subtract one\n        if (endSlotIndex !== -1 && showEnd.isBefore(dayjs__WEBPACK_IMPORTED_MODULE_3___default()(timeSlots[endSlotIndex]))) {\n          endSlotIndex--;\n        }\n\n        // Handle cases where the show ends after the last slot\n        if (endSlotIndex === -1 || showEnd.isSame(dayjs__WEBPACK_IMPORTED_MODULE_3___default()(timeSlots[timeSlots.length - 1]).add(30, 'minutes'))) {\n          endSlotIndex = timeSlots.length - 1;\n        }\n        console.log(\"Comparing show end \".concat(showEnd.format(), \" to timeSlot index \").concat(endSlotIndex, \" at \").concat(endSlotIndex !== -1 ? dayjs__WEBPACK_IMPORTED_MODULE_3___default()(timeSlots[endSlotIndex]).format() : 'out of range'));\n\n        // Calculate the number of slots the show should span\n        var span = endSlotIndex - slotIndex + 1;\n        console.log(\"Calculated gridStart: \".concat(slotIndex + 1, \", gridSpan: \").concat(span));\n        console.log(32);\n        return _objectSpread(_objectSpread({}, show), {}, {\n          gridStart: slotIndex + 1,\n          // Convert to 1-based index for grid positioning\n          gridSpan: span\n        });\n      });\n    },\n    processShows: function processShows(shows) {\n      var _this17 = this;\n      var comingUpNextSet = false;\n      shows.forEach(function (show) {\n        var start = dayjs__WEBPACK_IMPORTED_MODULE_3___default()(show.startTime);\n        var end = start.add(show.durationMinutes, 'minutes');\n        var now = dayjs__WEBPACK_IMPORTED_MODULE_3___default()(_this17.baseTime);\n\n        // Determine if the show is now playing\n        show.nowPlaying = !show.placeholder && now.isAfter(start) && now.isBefore(end) && show.gridStart === 1;\n\n        // Find the first show that does not start in the first grid column\n        if (!comingUpNextSet && !show.placeholder && show.gridStart > 1) {\n          show.comingUpNext = true;\n          comingUpNextSet = true; // Ensure only one show gets this flag\n        }\n      });\n      console.log(33);\n      return shows;\n    },\n    updateColumnOccupancy: function updateColumnOccupancy(processedShows, cols) {\n      var colOccupancy = new Array(cols).fill(null).map(function () {\n        return new Set();\n      });\n      var maxRowUsed = 0;\n      processedShows.forEach(function (show) {\n        for (var i = show.gridStart - 1; i < show.gridStart - 1 + show.gridSpan; i++) {\n          if (i >= 0 && i < cols) {\n            colOccupancy[i].add(show.gridRow);\n            maxRowUsed = Math.max(maxRowUsed, show.gridRow);\n          }\n        }\n      });\n      console.log(34);\n      return {\n        colOccupancy: colOccupancy,\n        maxRowUsed: maxRowUsed\n      };\n    },\n    fillGapsAndCreatePlaceholders: function fillGapsAndCreatePlaceholders(colOccupancy, maxRowUsed, cols) {\n      var gridItems = [];\n      // Ensure at least one row is processed even if no shows are present\n      maxRowUsed = Math.max(maxRowUsed, 1);\n      for (var row = 1; row <= maxRowUsed; row++) {\n        gridItems.push.apply(gridItems, _toConsumableArray(this.findAndFillGapsForSingleRow(colOccupancy, row, cols)));\n      }\n      console.log(35);\n      return gridItems;\n    },\n    findAndFillGapsForSingleRow: function findAndFillGapsForSingleRow(colOccupancy, row, cols) {\n      var gridItems = [];\n      var gapStart = -1;\n      for (var i = 0; i < cols; i++) {\n        if (!colOccupancy[i].has(row)) {\n          gapStart = gapStart === -1 ? i : gapStart;\n        } else if (gapStart !== -1) {\n          // Use different placeholders based on the row number\n          if (row === 1) {\n            gridItems.push(this.createPlaceholder(gapStart + 1, i - gapStart, row));\n          } else {\n            gridItems.push(this.createBlankSpotPlaceholder(gapStart + 1, i - gapStart, row));\n          }\n          gapStart = -1;\n        }\n      }\n      if (gapStart !== -1) {\n        // Again, differentiate between the first row and other rows\n        if (row === 1) {\n          gridItems.push(this.createPlaceholder(gapStart + 1, cols - gapStart, row));\n        } else {\n          gridItems.push(this.createBlankSpotPlaceholder(gapStart + 1, cols - gapStart, row));\n        }\n      }\n      console.log(36);\n      return gridItems;\n    },\n    sortShowsByPosition: function sortShowsByPosition(combinedShows) {\n      if (!Array.isArray(combinedShows)) {\n        console.error('Expected an array of shows, received:', combinedShows);\n        return []; // Return an empty array if not an array to prevent errors\n      }\n      console.log(37);\n      // Sort shows directly by row and then by start position within each row\n      return combinedShows.sort(function (a, b) {\n        return a.gridRow - b.gridRow || a.gridStart - b.gridStart;\n      });\n    },\n    createPlaceholder: function createPlaceholder(start, span, row) {\n      console.log(38);\n      return {\n        placeholder: true,\n        startTime: 'placeholder',\n        priority: 0,\n        gridStart: start,\n        gridSpan: span,\n        gridRow: row,\n        content: {\n          name: 'Nothing scheduled.'\n        }\n      };\n    },\n    createBlankSpotPlaceholder: function createBlankSpotPlaceholder(start, span, row) {\n      console.log(39);\n      return {\n        placeholder: true,\n        startTime: 'placeholder',\n        priority: 0,\n        gridStart: start,\n        gridSpan: span,\n        gridRow: row,\n        content: {\n          name: 'Blank Spot'\n        } // Ensure it is differentiated from normal placeholders\n      };\n    }\n  },\n  getters: {\n    currentTime: function currentTime(state) {\n      console.log('getter', 40);\n      return dayjs__WEBPACK_IMPORTED_MODULE_3___default()(state.baseTime).format('h:mm A');\n    },\n    // Prepare banners with grid positions based on current time slots\n    preparedTimeBanners: function preparedTimeBanners(state) {\n      console.log('getter', 41);\n      var timeZone = getTimeZone(); // Ensure this is defined\n      var now = dayjs__WEBPACK_IMPORTED_MODULE_3___default()().tz(timeZone);\n      var todayStart = now.startOf('day');\n      var tomorrowStart = todayStart.add(1, 'day');\n\n      // console.log('Current Time Slots:', state.timeSlots.map(slot => dayjs(slot).format('HH:mm')))\n\n      return state.timeBanners.flatMap(function (banner) {\n        console.log('getter', 42);\n        // Create banner times for today and tomorrow to handle overnight spans\n        var bannerTodayStart = todayStart.hour(parseInt(banner.startTime.split(':')[0])).minute(parseInt(banner.startTime.split(':')[1]));\n        var bannerTodayEnd = bannerTodayStart.clone().add(banner.duration, 'hours');\n        var bannerTomorrowStart = tomorrowStart.hour(parseInt(banner.startTime.split(':')[0])).minute(parseInt(banner.startTime.split(':')[1]));\n        var bannerTomorrowEnd = bannerTomorrowStart.clone().add(banner.duration, 'hours');\n\n        // Create an array of potential banners for today and tomorrow\n        var potentialBanners = [_objectSpread(_objectSpread({}, banner), {}, {\n          start: bannerTodayStart,\n          end: bannerTodayEnd\n        }), _objectSpread(_objectSpread({}, banner), {}, {\n          start: bannerTomorrowStart,\n          end: bannerTomorrowEnd\n        })];\n        return potentialBanners.map(function (banner) {\n          console.log('getter', 43);\n          var startSlotIndex = state.timeSlots.findIndex(function (slot) {\n            return banner.start.isSameOrBefore(dayjs__WEBPACK_IMPORTED_MODULE_3___default()(slot)) && banner.end.isAfter(dayjs__WEBPACK_IMPORTED_MODULE_3___default()(slot));\n          });\n          var endSlotIndex = state.timeSlots.findIndex(function (slot) {\n            return banner.end.isSameOrBefore(dayjs__WEBPACK_IMPORTED_MODULE_3___default()(slot));\n          });\n\n          // Adjust the end index to be inclusive of the end time\n          if (endSlotIndex === -1 || banner.end.isAfter(dayjs__WEBPACK_IMPORTED_MODULE_3___default()(state.timeSlots[state.timeSlots.length - 1]))) {\n            endSlotIndex = state.timeSlots.length - 1;\n          } else {\n            endSlotIndex -= 1;\n          }\n          var gridStart = startSlotIndex + 1;\n          var gridSpan = endSlotIndex - startSlotIndex + 1;\n\n          // console.log(`Processing Banner: ${banner.name}`)\n          // console.log(`StartTime: ${banner.start.format('HH:mm')}, EndTime: ${banner.end.format('HH:mm')}`)\n          // console.log(`StartSlotIndex: ${startSlotIndex}, EndSlotIndex: ${endSlotIndex}`)\n          // console.log(`Calculated gridStart: ${gridStart}, gridSpan: ${gridSpan}`)\n\n          // Ensure the banner should be displayed within the current time slots\n          if (gridStart && gridSpan > 0) {\n            console.log('getter', 44);\n            return _objectSpread(_objectSpread({}, banner), {}, {\n              gridStart: gridStart,\n              gridSpan: gridSpan\n            });\n          }\n          console.log('getter', 45);\n          return null;\n        });\n      }).filter(function (banner) {\n        return banner != null;\n      }) // Filter out banners that don't fit within the current time slots\n      .sort(function (a, b) {\n        return a.gridStart - b.gridStart;\n      }); // Sort by gridStart, with the lowest number first\n    },\n    // setTimeSlots: (state) => {\n    //     const appSettingStore = useAppSettingStore()\n    //     let slotHours\n    //\n    //     // Determine the number of slot hours based on screen size\n    //     if (appSettingStore.isVerySmallScreen) {\n    //         slotHours = state.verySmallScreenSlotHours\n    //     } else if (appSettingStore.isSmallScreen) {\n    //         slotHours = state.smallScreenSlotHours\n    //     } else {\n    //         slotHours = state.mediumScreenSlotHours\n    //     }\n    //\n    //     const intervalMinutes = state.slotIntervalMinutes\n    //     const slots = []\n    //     const totalSlots = (slotHours * 60) / intervalMinutes\n    //\n    //     // Ensure state.currentHalfHour is a Day.js object\n    //     const currentHalfHour = dayjs(state.currentHalfHour)\n    //\n    //     // Calculate the time for each slot using Day.js\n    //     for (let i = 0; i < totalSlots; i++) {\n    //         let slotTime = currentHalfHour.add(i * intervalMinutes, 'minute')\n    //         slots.push(slotTime.toDate())  // Convert back to JavaScript Date if necessary\n    //     }\n    //     state.timeSlots = slots\n    //     return slots.length\n    // },\n\n    nextFourHoursWithHalfHourIntervals: function nextFourHoursWithHalfHourIntervals(state) {\n      // Check if timeSlots is not null, undefined, or empty before accessing length\n      if (!state.timeSlots || state.timeSlots.length === 0) {\n        console.log('timeSlots is null or has no elements');\n        console.log('getter', 46);\n        // Handle this scenario appropriately, such as returning an empty array or a default value\n        return [];\n      }\n      var userStore = (0,_Stores_UserStore__WEBPACK_IMPORTED_MODULE_0__.useUserStore)(); // Access the user store\n      var appSettingStore = (0,_Stores_AppSettingStore__WEBPACK_IMPORTED_MODULE_1__.useAppSettingStore)(); // Access the settings store\n      var userTimezone = userStore.timezone; // Get the user's timezone\n      var cols = state.timeSlots.length;\n      var intervals = [];\n      var now = dayjs__WEBPACK_IMPORTED_MODULE_3___default()(state.baseTime).tz(userTimezone); // Get the current time in the user's timezone\n\n      // Determine if the current minute is less than 30 to start at the top of the hour or at the half-hour\n      var current = now.minute() < 30 ? now.startOf('hour') : now.startOf('hour').add(30, 'minutes');\n\n      // Generate intervals for the next 4 hours, each 30 minutes apart\n      // Adjust the loop count based on the number of columns/ intervals needed\n      for (var i = 0; i < cols; i++) {\n        // Adjust the number of intervals based on the screen size\n        intervals.push({\n          formatted: current.format('hh:mm A'),\n          // Formatted time for display\n          dateTimeString: current.format('YYYY-MM-DD HH:mm:ss') // Y-m-d H:m:s format for comparisons\n        });\n        current = current.add(30, 'minute'); // Move to the next 30-minute interval\n      }\n      console.log('getter', 47);\n      return intervals;\n    },\n    upcomingContent: function upcomingContent(state) {\n      // Since viewingWindowStart is now a Day.js object, use Day.js methods directly\n      var start = dayjs__WEBPACK_IMPORTED_MODULE_3___default()(state.viewingWindowStart).subtract(1, 'hour'); // 1 hour earlier\n      var end = start.add(7, 'hours'); // 6 hours later from the start\n\n      // Group shows by start time using Day.js\n      var showsGroupedByStartTime = state.weeklyContent.reduce(function (acc, item) {\n        var itemStart = dayjs__WEBPACK_IMPORTED_MODULE_3___default()(item.startTime).valueOf(); // Use .valueOf() to get the timestamp\n        if (!acc[itemStart]) {\n          acc[itemStart] = [];\n        }\n        acc[itemStart].push(item);\n        return acc;\n      }, {});\n\n      // Select the show with the lowest priority for each start time\n      var selectedShows = Object.values(showsGroupedByStartTime).map(function (group) {\n        return group.reduce(function (selected, item) {\n          return !selected || item.priority < selected.priority ? item : selected;\n        }, null);\n      });\n      console.log('getter', 48);\n      // Filter shows that fall within the next 6-hour window and sort them\n      return selectedShows.filter(function (item) {\n        var itemStart = dayjs__WEBPACK_IMPORTED_MODULE_3___default()(item.startTime);\n        return itemStart.isSameOrAfter(start) && itemStart.isBefore(end);\n      }).sort(function (a, b) {\n        return dayjs__WEBPACK_IMPORTED_MODULE_3___default()(a.startTime).unix() - dayjs__WEBPACK_IMPORTED_MODULE_3___default()(b.startTime).unix();\n      }); // Sorting by Unix timestamp\n    },\n    nextSixHours: function nextSixHours(state) {\n      // Assuming state.viewingWindowStart is already a Day.js object.\n      // If it's still a native Date, convert it first:\n      var adjustedStart = dayjs__WEBPACK_IMPORTED_MODULE_3___default()(state.viewingWindowStart);\n\n      // Add 6 hours to the adjusted start time\n      var end = adjustedStart.add(6, 'hours');\n\n      // Generate each hour of the interval between adjustedStart and end\n      var hours = [];\n      var hour = adjustedStart;\n      while (hour.isBefore(end)) {\n        hours.push(hour.toDate()); // Convert back to Date if necessary; otherwise, just use `hour` if you can use Day.js objects directly\n        hour = hour.add(1, 'hour');\n      }\n      console.log('getter', 49);\n      return hours;\n    },\n    dateMessage: function dateMessage(state) {\n      var startDay = (0,date_fns__WEBPACK_IMPORTED_MODULE_13__.startOfDay)(state.viewingWindowStart);\n      var formattedDate = (0,date_fns__WEBPACK_IMPORTED_MODULE_14__.format)(startDay, 'EEEE MMMM do, yyyy');\n      console.log('getter', 50);\n      if ((0,date_fns__WEBPACK_IMPORTED_MODULE_15__.isToday)(startDay)) {\n        return \"Today - \".concat(formattedDate);\n      } else if ((0,date_fns__WEBPACK_IMPORTED_MODULE_16__.isYesterday)(startDay)) {\n        return \"Yesterday - \".concat(formattedDate);\n      } else if ((0,date_fns__WEBPACK_IMPORTED_MODULE_17__.isTomorrow)(startDay)) {\n        return \"Tomorrow - \".concat(formattedDate);\n      } else {\n        return formattedDate;\n      }\n    },\n    currentMonthIndex: function currentMonthIndex(state) {\n      // Ensure state.currentMonth is converted to a Day.js object\n      var month = dayjs__WEBPACK_IMPORTED_MODULE_3___default()(state.currentMonth);\n      console.log('getter', 51);\n      // Day.js months are 0-indexed just like JavaScript Date, returns the month (0-11)\n      return month.month();\n    },\n    currentMonthName: function currentMonthName(state) {\n      // Ensure state.currentMonth is converted to a Day.js object\n      var month = dayjs__WEBPACK_IMPORTED_MODULE_3___default()(state.currentMonth);\n      console.log('getter', 52);\n      // Returns the full name of the month, e.g., 'January', 'February', etc.\n      return month.format('MMMM');\n    },\n    currentYear: function currentYear(state) {\n      // Ensure state.currentMonth is converted to a Day.js object\n      var month = dayjs__WEBPACK_IMPORTED_MODULE_3___default()(state.currentMonth);\n      console.log('getter', 53);\n      // Returns the year\n      return month.year();\n    },\n    isToday: function isToday(state) {\n      var today = dayjs__WEBPACK_IMPORTED_MODULE_3___default()(); // Gets today's date as a Day.js object\n      var viewingStart = dayjs__WEBPACK_IMPORTED_MODULE_3___default()(state.viewingWindowStart); // Convert to Day.js object if not already\n      console.log('getter', 54);\n      // Compare if both dates are the same calendar day\n      return today.isSame(viewingStart, 'day');\n    },\n    daysInMonth: function daysInMonth(state) {\n      // Assuming state.currentMonth is a Day.js object; if it's a Date, convert it:\n      var currentMonth = dayjs__WEBPACK_IMPORTED_MODULE_3___default()(state.currentMonth);\n      var startOfCurrentMonth = currentMonth.startOf('month');\n      var endOfCurrentMonth = currentMonth.endOf('month');\n\n      // Adjust these to ensure the grid starts on Sunday and ends on Saturday\n      var startOfGrid = startOfCurrentMonth.startOf('week'); // Assumes the week starts on Sunday by default\n      var endOfGrid = endOfCurrentMonth.endOf('week'); // Assumes the week ends on Saturday by default\n\n      // Generate the days for the calendar grid\n      var days = [];\n      var day = startOfGrid;\n      while (day.isBefore(endOfGrid) || day.isSame(endOfGrid, 'day')) {\n        days.push(day.toDate()); // Collect days as Date objects; remove toDate() if you can use Day.js objects directly\n        day = day.add(1, 'day');\n      }\n      console.log('getter', 55);\n      return days;\n    }\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/Stores/ScheduleStore.js\n");

/***/ }),

/***/ "./resources/js/Utilities/TimeUtils.js":
/*!*********************************************!*\
  !*** ./resources/js/Utilities/TimeUtils.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createTimeSlots: () => (/* binding */ createTimeSlots)\n/* harmony export */ });\n/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dayjs */ \"./node_modules/dayjs/dayjs.min.js\");\n/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(dayjs__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var dayjs_plugin_utc__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! dayjs/plugin/utc */ \"./node_modules/dayjs/plugin/utc.js\");\n/* harmony import */ var dayjs_plugin_utc__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(dayjs_plugin_utc__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var dayjs_plugin_timezone__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! dayjs/plugin/timezone */ \"./node_modules/dayjs/plugin/timezone.js\");\n/* harmony import */ var dayjs_plugin_timezone__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(dayjs_plugin_timezone__WEBPACK_IMPORTED_MODULE_2__);\n// utilities/timeUtils.js\n\n\n\ndayjs__WEBPACK_IMPORTED_MODULE_0___default().extend((dayjs_plugin_utc__WEBPACK_IMPORTED_MODULE_1___default()));\ndayjs__WEBPACK_IMPORTED_MODULE_0___default().extend((dayjs_plugin_timezone__WEBPACK_IMPORTED_MODULE_2___default()));\n\n/**\n * Creates an array of Date objects representing time slots.\n *\n * This function generates a sequence of time slots starting from a specified\n * start time, continuing for a given number of hours, and spaced apart\n * by a specified interval in minutes.\n *\n * @param {Date} start - The start time from which to generate slots, as a Date object.\n * @param {number} [durationHours=4] - The total duration for which to generate slots, in hours.\n * @param {number} [intervalMinutes=30] - The interval between each slot, in minutes.\n * @param {string} timezone - The timezone in which the time slots will be calculated.\n * @returns {Date[]} An array of Date objects, each representing a time slot.\n *\n * Example:\n * If start is `new Date('2024-01-01T08:00:00Z')`, durationHours is 2, and intervalMinutes is 30,\n * the output will be an array of Date objects representing the times:\n * `08:00`, `08:30`, `09:00`, and `09:30`.\n */\nfunction createTimeSlots(start) {\n  var durationHours = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 4;\n  var intervalMinutes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 30;\n  var timezone = arguments.length > 3 ? arguments[3] : undefined;\n  // console.log(`Creating time slots starting from ${start}, for ${durationHours} hours, every ${intervalMinutes} minutes in timezone ${timezone}.`);\n  var slots = [];\n  var startTime = dayjs__WEBPACK_IMPORTED_MODULE_0___default()(start).tz(timezone); // Convert start time to the correct time zone\n  for (var i = 0; i < durationHours * 60 / intervalMinutes; i++) {\n    var slotTime = startTime.add(i * intervalMinutes, 'minute').toDate(); // Generate slots in the correct time zone\n    slots.push(slotTime); // Keep as Date object\n  }\n  return slots;\n}\n// export function createTimeSlots(start, durationHours = 4, intervalMinutes = 30) {\n//     let slots = [];\n//     let startTime = dayjs(start).tz(userStore.timezone);  // Convert start time to the correct time zone\n//     for (let i = 0; i < (durationHours * 60) / intervalMinutes; i++) {\n//         let slotTime = new Date(start.getTime() + i * intervalMinutes * 60000);\n//         slots.push(slotTime);  // Keep as Date object\n//     }\n//     return slots;\n// }//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvVXRpbGl0aWVzL1RpbWVVdGlscy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7QUFDMEI7QUFDUztBQUNVO0FBRTdDQSxtREFBWSxDQUFDQyx5REFBRyxDQUFDO0FBQ2pCRCxtREFBWSxDQUFDRSw4REFBUSxDQUFDOztBQUV0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxTQUFTRSxlQUFlQSxDQUFDQyxLQUFLLEVBQXFEO0VBQUEsSUFBbkRDLGFBQWEsR0FBQUMsU0FBQSxDQUFBQyxNQUFBLFFBQUFELFNBQUEsUUFBQUUsU0FBQSxHQUFBRixTQUFBLE1BQUcsQ0FBQztFQUFBLElBQUVHLGVBQWUsR0FBQUgsU0FBQSxDQUFBQyxNQUFBLFFBQUFELFNBQUEsUUFBQUUsU0FBQSxHQUFBRixTQUFBLE1BQUcsRUFBRTtFQUFBLElBQUVMLFFBQVEsR0FBQUssU0FBQSxDQUFBQyxNQUFBLE9BQUFELFNBQUEsTUFBQUUsU0FBQTtFQUNwRjtFQUNBLElBQUlFLEtBQUssR0FBRyxFQUFFO0VBQ2QsSUFBSUMsU0FBUyxHQUFHWiw0Q0FBSyxDQUFDSyxLQUFLLENBQUMsQ0FBQ1EsRUFBRSxDQUFDWCxRQUFRLENBQUMsQ0FBQyxDQUFFO0VBQzVDLEtBQUssSUFBSVksQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFJUixhQUFhLEdBQUcsRUFBRSxHQUFJSSxlQUFlLEVBQUVJLENBQUMsRUFBRSxFQUFFO0lBQzdELElBQUlDLFFBQVEsR0FBR0gsU0FBUyxDQUFDSSxHQUFHLENBQUNGLENBQUMsR0FBR0osZUFBZSxFQUFFLFFBQVEsQ0FBQyxDQUFDTyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUU7SUFDdkVOLEtBQUssQ0FBQ08sSUFBSSxDQUFDSCxRQUFRLENBQUMsQ0FBQyxDQUFFO0VBQzNCO0VBQ0EsT0FBT0osS0FBSztBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3Jlc291cmNlcy9qcy9VdGlsaXRpZXMvVGltZVV0aWxzLmpzP2JiNDMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gdXRpbGl0aWVzL3RpbWVVdGlscy5qc1xuaW1wb3J0IGRheWpzIGZyb20gJ2RheWpzJztcbmltcG9ydCB1dGMgZnJvbSAnZGF5anMvcGx1Z2luL3V0Yyc7XG5pbXBvcnQgdGltZXpvbmUgZnJvbSAnZGF5anMvcGx1Z2luL3RpbWV6b25lJztcblxuZGF5anMuZXh0ZW5kKHV0Yyk7XG5kYXlqcy5leHRlbmQodGltZXpvbmUpO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgRGF0ZSBvYmplY3RzIHJlcHJlc2VudGluZyB0aW1lIHNsb3RzLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gZ2VuZXJhdGVzIGEgc2VxdWVuY2Ugb2YgdGltZSBzbG90cyBzdGFydGluZyBmcm9tIGEgc3BlY2lmaWVkXG4gKiBzdGFydCB0aW1lLCBjb250aW51aW5nIGZvciBhIGdpdmVuIG51bWJlciBvZiBob3VycywgYW5kIHNwYWNlZCBhcGFydFxuICogYnkgYSBzcGVjaWZpZWQgaW50ZXJ2YWwgaW4gbWludXRlcy5cbiAqXG4gKiBAcGFyYW0ge0RhdGV9IHN0YXJ0IC0gVGhlIHN0YXJ0IHRpbWUgZnJvbSB3aGljaCB0byBnZW5lcmF0ZSBzbG90cywgYXMgYSBEYXRlIG9iamVjdC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbZHVyYXRpb25Ib3Vycz00XSAtIFRoZSB0b3RhbCBkdXJhdGlvbiBmb3Igd2hpY2ggdG8gZ2VuZXJhdGUgc2xvdHMsIGluIGhvdXJzLlxuICogQHBhcmFtIHtudW1iZXJ9IFtpbnRlcnZhbE1pbnV0ZXM9MzBdIC0gVGhlIGludGVydmFsIGJldHdlZW4gZWFjaCBzbG90LCBpbiBtaW51dGVzLlxuICogQHBhcmFtIHtzdHJpbmd9IHRpbWV6b25lIC0gVGhlIHRpbWV6b25lIGluIHdoaWNoIHRoZSB0aW1lIHNsb3RzIHdpbGwgYmUgY2FsY3VsYXRlZC5cbiAqIEByZXR1cm5zIHtEYXRlW119IEFuIGFycmF5IG9mIERhdGUgb2JqZWN0cywgZWFjaCByZXByZXNlbnRpbmcgYSB0aW1lIHNsb3QuXG4gKlxuICogRXhhbXBsZTpcbiAqIElmIHN0YXJ0IGlzIGBuZXcgRGF0ZSgnMjAyNC0wMS0wMVQwODowMDowMFonKWAsIGR1cmF0aW9uSG91cnMgaXMgMiwgYW5kIGludGVydmFsTWludXRlcyBpcyAzMCxcbiAqIHRoZSBvdXRwdXQgd2lsbCBiZSBhbiBhcnJheSBvZiBEYXRlIG9iamVjdHMgcmVwcmVzZW50aW5nIHRoZSB0aW1lczpcbiAqIGAwODowMGAsIGAwODozMGAsIGAwOTowMGAsIGFuZCBgMDk6MzBgLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlVGltZVNsb3RzKHN0YXJ0LCBkdXJhdGlvbkhvdXJzID0gNCwgaW50ZXJ2YWxNaW51dGVzID0gMzAsIHRpbWV6b25lKSB7XG4gICAgLy8gY29uc29sZS5sb2coYENyZWF0aW5nIHRpbWUgc2xvdHMgc3RhcnRpbmcgZnJvbSAke3N0YXJ0fSwgZm9yICR7ZHVyYXRpb25Ib3Vyc30gaG91cnMsIGV2ZXJ5ICR7aW50ZXJ2YWxNaW51dGVzfSBtaW51dGVzIGluIHRpbWV6b25lICR7dGltZXpvbmV9LmApO1xuICAgIGxldCBzbG90cyA9IFtdO1xuICAgIGxldCBzdGFydFRpbWUgPSBkYXlqcyhzdGFydCkudHoodGltZXpvbmUpOyAgLy8gQ29udmVydCBzdGFydCB0aW1lIHRvIHRoZSBjb3JyZWN0IHRpbWUgem9uZVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgKGR1cmF0aW9uSG91cnMgKiA2MCkgLyBpbnRlcnZhbE1pbnV0ZXM7IGkrKykge1xuICAgICAgICBsZXQgc2xvdFRpbWUgPSBzdGFydFRpbWUuYWRkKGkgKiBpbnRlcnZhbE1pbnV0ZXMsICdtaW51dGUnKS50b0RhdGUoKTsgIC8vIEdlbmVyYXRlIHNsb3RzIGluIHRoZSBjb3JyZWN0IHRpbWUgem9uZVxuICAgICAgICBzbG90cy5wdXNoKHNsb3RUaW1lKTsgIC8vIEtlZXAgYXMgRGF0ZSBvYmplY3RcbiAgICB9XG4gICAgcmV0dXJuIHNsb3RzO1xufVxuLy8gZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVRpbWVTbG90cyhzdGFydCwgZHVyYXRpb25Ib3VycyA9IDQsIGludGVydmFsTWludXRlcyA9IDMwKSB7XG4vLyAgICAgbGV0IHNsb3RzID0gW107XG4vLyAgICAgbGV0IHN0YXJ0VGltZSA9IGRheWpzKHN0YXJ0KS50eih1c2VyU3RvcmUudGltZXpvbmUpOyAgLy8gQ29udmVydCBzdGFydCB0aW1lIHRvIHRoZSBjb3JyZWN0IHRpbWUgem9uZVxuLy8gICAgIGZvciAobGV0IGkgPSAwOyBpIDwgKGR1cmF0aW9uSG91cnMgKiA2MCkgLyBpbnRlcnZhbE1pbnV0ZXM7IGkrKykge1xuLy8gICAgICAgICBsZXQgc2xvdFRpbWUgPSBuZXcgRGF0ZShzdGFydC5nZXRUaW1lKCkgKyBpICogaW50ZXJ2YWxNaW51dGVzICogNjAwMDApO1xuLy8gICAgICAgICBzbG90cy5wdXNoKHNsb3RUaW1lKTsgIC8vIEtlZXAgYXMgRGF0ZSBvYmplY3Rcbi8vICAgICB9XG4vLyAgICAgcmV0dXJuIHNsb3RzO1xuLy8gfSJdLCJuYW1lcyI6WyJkYXlqcyIsInV0YyIsInRpbWV6b25lIiwiZXh0ZW5kIiwiY3JlYXRlVGltZVNsb3RzIiwic3RhcnQiLCJkdXJhdGlvbkhvdXJzIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwiaW50ZXJ2YWxNaW51dGVzIiwic2xvdHMiLCJzdGFydFRpbWUiLCJ0eiIsImkiLCJzbG90VGltZSIsImFkZCIsInRvRGF0ZSIsInB1c2giXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/js/Utilities/TimeUtils.js\n");

/***/ })

}]);