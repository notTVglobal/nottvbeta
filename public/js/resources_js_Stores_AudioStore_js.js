"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk"] = self["webpackChunk"] || []).push([["resources_js_Stores_AudioStore_js"],{

/***/ "./resources/js/Stores/AudioStore.js":
/*!*******************************************!*\
  !*** ./resources/js/Stores/AudioStore.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useAudioStore: () => (/* binding */ useAudioStore)\n/* harmony export */ });\n/* harmony import */ var pinia__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! pinia */ \"./node_modules/pinia/dist/pinia.mjs\");\n/* harmony import */ var video_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! video.js */ \"./node_modules/video.js/dist/video.es.js\");\n\n\nvar initialState = function initialState() {\n  return {\n    showVolumeIndicator: true,\n    audioSetupCompleted: false,\n    audioAnimationFrameId: null,\n    audioLevel: 0,\n    // Initial audio level\n    volume: 100 // Initial volume level\n  };\n};\nvar useAudioStore = (0,pinia__WEBPACK_IMPORTED_MODULE_1__.defineStore)('audioStore', {\n  state: initialState,\n  actions: {\n    reset: function reset() {\n      // Reset the store to its original state (clear all data)\n      Object.assign(this, initialState());\n    },\n    ////////////////////////////////// AUDIO DYNAMICS SETUP\n    ///////////////////////////////////////////////////////\n    // tec21: 2024-02-02 this is good... keep this here. It is loaded when the videoPlayer is Ready\n    // currently we are only using the VideoPlayerMain... so check VideoPlayerMain to see the starting\n    // of this process. And note, audioContext is available globally as we set it up in our app.js.\n    // Since a MediaElementSourceNode can only be created once per media element, and we're managing\n    // dynamic video source changes, ensure that this node is not being recreated unnecessarily.\n    // This could disrupt the audio processing chain.\n    // When initializing or changing the video source, call a central function from VideoPlayerStore\n    // to set up or reconfigure the audio context and its nodes: this.resumeAudioContextIfNeeded()\n    // Assuming this setup is done once when the player is initially ready\n    // initialAudioSetup() {\n    //     if (!this.audioSetupCompleted) {\n    //         if (!window.audioContext) {\n    //             window.audioContext = new (window.AudioContext || window.webkitAudioContext)()\n    //         }\n    //\n    //         const videoJs = videojs('main-player')\n    //         // const videoElement = document.querySelector('video#main-player'); // Adjust selector as needed\n    //         if (!window.sourceNode) {\n    //             window.sourceNode = window.audioContext.createMediaElementSource(videoJs)\n    //             // Connect to destination or further processing nodes here\n    //             window.sourceNode.connect(window.audioContext.destination)\n    //         }\n    //         // Additional audio processing setup...\n    //     }\n    //     // Mark setup as completed to prevent re-initialization\n    //     this.audioSetupCompleted = true;\n    // },\n    ensureAudioContextAndNodesReady: function ensureAudioContextAndNodesReady(videoJs) {\n      var _this = this;\n      // Initialize Video.js player\n\n      var videoElement = videoJs.tech().el();\n      console.log('Ensuring AudioContext and nodes are ready for video element', videoElement);\n      this.audioLevel = 0;\n\n      // Resume AudioContext if suspended\n      if (window.audioContext.state === 'suspended') {\n        window.audioContext.resume().then(function () {\n          console.log('AudioContext resumed successfully');\n          _this.configureAudioProcessingChain(videoElement);\n        })[\"catch\"](function (error) {\n          console.error('Error resuming AudioContext:', error);\n        });\n      }\n      // Check if MediaElementSourceNode needs reconnection or initialization\n      if (!videoElement.__sourceConnected) {\n        console.log('MediaElementSourceNode not connected or needs reconnection. Reconnecting...');\n        this.configureAudioProcessingChain(videoElement);\n        videoElement.__sourceConnected = true; // Mark as connected\n        console.log('MediaElementSourceNode reconnected successfully.');\n      } else {\n        console.log('MediaElementSourceNode already connected.');\n      }\n    },\n    configureAudioProcessingChain: function configureAudioProcessingChain(videoElement) {\n      console.log('Setting up audio nodes for:', videoElement);\n      // Check and create MediaElementSourceNode, GainNode, etc., as discussed previously\n      // Ensure connections between nodes are correctly set up\n      // This includes checking if nodes already exist to avoid re-initialization\n\n      // Ensure the AudioContext is globally initialized\n      if (!window.audioContext) {\n        window.audioContext = new (window.AudioContext || window.webkitAudioContext)();\n      }\n\n      // Create or ensure MediaElementSourceNode is configured for the video element\n      // if (!videoElement.__mediaElementSourceConnected) {\n      //     videoElement.__mediaElementSource = window.audioContext.createMediaElementSource(videoElement);\n      //     videoElement.__mediaElementSourceConnected = true; // Mark as connected\n      // }\n\n      // Create or reuse the MediaElementSourceNode for the video element\n      if (!videoElement.__sourceNode) {\n        console.log('Creating or reconnecting MediaElementSourceNode...');\n        videoElement.__sourceNode = window.audioContext.createMediaElementSource(videoElement);\n        videoElement.__sourceNodeNeedsReconnect = false; // Reset flag after reconnection\n        console.log('MediaElementSourceNode created or reconnected.');\n      }\n\n      // Setup or ensure gain node is configured\n      if (!window.gainNode) {\n        console.log('Connecting MediaElementSourceNode to gainNode...');\n        window.gainNode = window.audioContext.createGain();\n        console.log('gainNode connected.');\n        // Additional gain node configuration here, e.g., setting initial gain value\n        window.gainNode.gain.setValueAtTime(1, window.audioContext.currentTime);\n        console.log('gainNode value set.');\n      }\n\n      // Setup or ensure DynamicsCompressorNode is configured with broadcast settings\n      if (!window.compressorNode) {\n        console.log('Connecting gainNode to compressorNode...');\n        window.compressorNode = window.audioContext.createDynamicsCompressor();\n        console.log('compressorNode connected.');\n        // Apply broadcast-optimized settings\n        window.compressorNode.threshold.setValueAtTime(-50, window.audioContext.currentTime);\n        window.compressorNode.knee.setValueAtTime(40, window.audioContext.currentTime);\n        window.compressorNode.ratio.setValueAtTime(12, window.audioContext.currentTime);\n        window.compressorNode.attack.setValueAtTime(0.003, window.audioContext.currentTime);\n        window.compressorNode.release.setValueAtTime(0.25, window.audioContext.currentTime);\n        console.log('compressor settings applied.');\n      }\n\n      // Setup or ensure AnalyserNode is configured\n      if (!window.analyserNode) {\n        window.analyserNode = window.audioContext.createAnalyser();\n        console.log('Analyser node configured.');\n        window.analyserNode.fftSize = 256; // Example size, adjust based on needs\n        // Further configuration for the analyserNode can be added here\n        // Start the audio level monitoring process\n        // this.updateAudioLevel(window.analyserNode);\n        // this.startAudioLevelMonitoring(window.analyserNode)\n        // Start the audio level monitoring process\n      } else {\n        console.log('Audio nodes already set up and connected.');\n      }\n\n      // Connect the audio nodes in the correct order\n      console.log('Connecting sourceNode to gainNode.');\n      videoElement.__sourceNode.connect(window.gainNode); // Source to Gain\n      console.log('Connecting gainNode to compressorNode.');\n      window.gainNode.connect(window.compressorNode); // Gain to Compressor\n      console.log('Connecting compressorNode to analyserNode.');\n      window.compressorNode.connect(window.analyserNode); // Analyze post-compression\n      console.log('Connecting analyserNode to AudioContext destination.');\n      window.analyserNode.connect(window.audioContext.destination); // Output the analyzed audio\n      console.log('Audio output connected to destination.');\n      this.startAudioLevelMonitoring(window.analyserNode); // Use the global analyserNode\n\n      // Optionally adjust gain based on analysis or other criteria\n      // This could be dynamic based on your application's needs\n      console.log('Adjust gain based on analysis.');\n      this.adjustGainBasedOnAnalysis(window.gainNode);\n    },\n    adjustGainBasedOnAnalysis: function adjustGainBasedOnAnalysis(gainNode) {\n      // Example function to dynamically adjust gain - adjust as necessary\n      // This can be called here directly or in response to specific application events\n      gainNode.gain.setValueAtTime(1.5, window.audioContext.currentTime); // Example adjustment\n      console.log('Gain adjusted.');\n    },\n    setAudioLevel: function setAudioLevel(level) {\n      this.audioLevel = level;\n    },\n    // resumeAudioContextIfNeeded() {\n    //     // Assuming `audioContext` is accessible globally or injected into the store\n    //     if (window.audioContext && window.audioContext.state === 'suspended') {\n    //         window.audioContext.resume().then(() => {\n    //             console.log('AudioContext resumed successfully');\n    //             // Any additional actions after resuming can go here\n    //         }).catch(error => {\n    //             console.error('Error resuming AudioContext:', error);\n    //         });\n    //     }\n    // },\n    // setupAudioAnalyser(videoElement) {\n    //     if (!window.audioContext) {\n    //         console.error(\"AudioContext not initialized.\");\n    //         return;\n    //     }\n    //\n    //     // Check if the sourceNode has already been created to avoid re-creation\n    //     if (!videoElement.__sourceNode) {\n    //         videoElement.__sourceNode = window.audioContext.createMediaElementSource(videoElement);\n    //     }\n    //\n    //     // Create and configure AnalyserNode\n    //     if (!videoElement.__analyserNode) {\n    //         videoElement.__analyserNode = window.audioContext.createAnalyser();\n    //         videoElement.__analyserNode.fftSize = 256; // Example size, adjust based on needs\n    //     }\n    //\n    //     // Connect the nodes\n    //     videoElement.__sourceNode.connect(videoElement.__analyserNode);\n    //     videoElement.__analyserNode.connect(window.audioContext.destination);\n    //\n    //     // Start the audio level monitoring process\n    //     this.updateAudioLevel(videoElement.__analyserNode);\n    // },\n    startAudioLevelMonitoring: function startAudioLevelMonitoring(analyserNode) {\n      var _this2 = this;\n      console.log('Audio level monitoring started.');\n      var bufferLength = analyserNode.frequencyBinCount;\n      var dataArray = new Uint8Array(bufferLength);\n      var updateAudioLevel = function updateAudioLevel() {\n        analyserNode.getByteFrequencyData(dataArray);\n        var sum = 0;\n        for (var i = 0; i < bufferLength; i++) {\n          sum += dataArray[i];\n        }\n        var average = sum / bufferLength;\n\n        // Update the audio level for display (scale as needed)\n        _this2.audioLevel = average * 100 / 128; // Adjust as necessary\n\n        _this2.audioAnimationFrameId = requestAnimationFrame(updateAudioLevel);\n      };\n      updateAudioLevel();\n    },\n    reconnectAudioContextIfNeeded: function reconnectAudioContextIfNeeded(videoJs) {\n      // This function shouldn't be needed as the MediaElementSourceNode can only be\n      // created once per media element.\n\n      // Assuming the video element and audio context setup are similar to previous steps\n      var videoElement = videoJs.tech().el();\n      // Check if the media element source needs to be reconnected\n      if (!videoElement.__mediaElementSourceConnected) {\n        var sourceNode = window.audioContext.createMediaElementSource(videoElement);\n        // Reconnect source node to your audio nodes or directly to the destination\n        sourceNode.connect(window.audioContext.destination);\n        videoElement.__mediaElementSourceConnected = true; // Flag to avoid duplicate connections\n      }\n    },\n    setupDynamicGainControl: function setupDynamicGainControl(player) {\n      // Ensure the global audioContext is used and not re-initialized\n      var audioContext = window.audioContext;\n\n      // Access the actual HTML video element from the Video.js player\n      var videoElement = player.tech().el();\n\n      // Create the media element source only once to avoid creating multiple connections for the same source\n      if (!player.__mediaElementSource) {\n        // Example function to adjust gain - adjust as necessary\n        var adjustGainBasedOnAnalysis = function adjustGainBasedOnAnalysis() {\n          gainNode.gain.setValueAtTime(1.5, audioContext.currentTime); // Example adjustment\n        };\n        var source = audioContext.createMediaElementSource(videoElement);\n        player.__mediaElementSource = source; // Store it to reuse\n\n        // Optionally, store gainNode for later use, e.g., in window or another global state\n        var gainNode = audioContext.createGain();\n        // Configure gain node and compressor as before\n        gainNode.gain.setValueAtTime(1, audioContext.currentTime); // Example: start with unity gain\n\n        var compressor = audioContext.createDynamicsCompressor();\n        // Compressor settings\n        // Connect the audio nodes\n        source.connect(gainNode);\n        gainNode.connect(compressor);\n        compressor.connect(audioContext.destination);\n        adjustGainBasedOnAnalysis();\n        console.log('Dynamic gain control setup complete');\n      }\n    },\n    // startAudioLevelMonitoring() {\n    //     const updateAudioLevel = () => {\n    //         // Your existing logic...\n    //         this.audioAnimationFrameId = requestAnimationFrame(updateAudioLevel);\n    //     };\n    //\n    //     updateAudioLevel();\n    // },\n    stopAudioLevelMonitoring: function stopAudioLevelMonitoring() {\n      if (this.audioAnimationFrameId !== null) {\n        cancelAnimationFrame(this.audioAnimationFrameId);\n        this.audioAnimationFrameId = null; // Reset the ID after stopping\n      }\n    },\n    // tec21: this isn't setup yet. We can apply different gain and dynamics\n    // settings to different channels... and creators can also choose settings\n    // for their content that override the defaults... ** FUTURE FEATURE **\n    // Example function to adjust gain dynamically\n    adjustAudioForNewVideo: function adjustAudioForNewVideo(gainValue) {\n      // Assuming gainNode is stored or accessible globally similar to audioContext\n      var gainNode = window.gainNode; // Ensure this is set up in your initial audio setup\n      gainNode.gain.setValueAtTime(gainValue, window.audioContext.currentTime);\n    },\n    /////////////////////////////// ADDITIONAL AUDIO FUNCTIONS\n    //////////////////////////////////////////////////////////\n    ///////// FADE IN AUDIO FROM MUTED\n    //////////////////////////////////\n    fadeInAudioFromMuted: function fadeInAudioFromMuted() {\n      var videoJs = (0,video_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])('main-player');\n\n      // Ensure the video is not muted to allow volume changes to take effect\n      videoJs.muted(false);\n      this.muted = false; // Update your application's state accordingly\n\n      // Initialize volume at 0 for the fade-in effect\n      var currentVolume = 0;\n      videoJs.volume(currentVolume);\n      var maxVolume = 1; // Define the maximum volume as 100%\n      var fadeStep = 0.05; // Define the increment step for the fade-in effect\n      var fadeInterval = 100; // Define the time interval for each step in milliseconds\n\n      var fadeAudioIn = setInterval(function () {\n        if (currentVolume < maxVolume) {\n          currentVolume += fadeStep; // Increment the volume\n          currentVolume = Math.min(currentVolume, maxVolume); // Ensure it does not exceed maxVolume\n          videoJs.volume(currentVolume); // Apply the incremented volume\n        } else {\n          clearInterval(fadeAudioIn); // Stop the interval once the max volume is reached\n        }\n      }, fadeInterval);\n    } /////////////////////////////// END AUDIO FUNCTIONS AND SETUP\n    /////////////////////////////////////////////////////////////\n  },\n  getters: {}\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/Stores/AudioStore.js\n");

/***/ })

}]);