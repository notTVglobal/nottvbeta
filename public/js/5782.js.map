{"version":3,"file":"js/5782.js","mappings":"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","sources":["webpack:///./resources/js/Stores/ScheduleStore.js","webpack:///./resources/js/Utilities/TimeUtils.js","webpack:///./resources/js/Utilities/PageSetup.js","webpack:///./resources/js/Components/Global/Calendar/TodayView.vue?281e","webpack:///./resources/js/Components/Pages/Schedule/ScheduleGrid.vue?e85f","webpack:///./resources/js/Pages/Schedule/Index.vue?6a24","webpack:///./resources/js/Components/Global/Calendar/TodayView.vue","webpack:///./resources/js/Components/Global/Calendar/TodayView.vue?ef98","webpack:///./resources/js/Components/Global/Calendar/TodayView.vue?ee4f","webpack:///./resources/js/Components/Global/Modals/Messages.vue?dfe9","webpack:///./resources/js/Components/Global/Modals/Messages.vue","webpack:///./resources/js/Components/Global/Modals/PopUpModal.vue?0d51","webpack:///./resources/js/Components/Global/Modals/PopUpModal.vue","webpack:///./resources/js/Components/Pages/Schedule/SpotComponent.vue?1d58","webpack:///./resources/js/Components/Pages/Schedule/SpotComponent.vue","webpack:///./resources/js/Components/Pages/Schedule/ScheduleGrid.vue","webpack:///./resources/js/Components/Pages/Schedule/ScheduleGrid.vue?bcb6","webpack:///./resources/js/Components/Pages/Schedule/ScheduleGrid.vue?f507","webpack:///./resources/js/Pages/Schedule/Index.vue","webpack:///./resources/js/Pages/Schedule/Index.vue?912f","webpack:///./resources/js/Pages/Schedule/Index.vue?d7b5"],"sourcesContent":["import { defineStore } from 'pinia'\nimport { useUserStore } from '@/Stores/UserStore'\nimport { createTimeSlots } from '@/Utilities/TimeUtils'\nimport {\n    addDays,\n    addHours,\n    addMonths,\n    eachDayOfInterval,\n    eachHourOfInterval,\n    endOfMonth,\n    endOfWeek,\n    format,\n    getHours,\n    getMonth,\n    getYear,\n    isSameDay,\n    isToday,\n    isTomorrow,\n    isYesterday,\n    startOfDay,\n    startOfHour,\n    startOfMonth,\n    startOfWeek,\n    subMonths,\n} from 'date-fns'\n\n// Import dayjs and its plugins\nimport dayjs from 'dayjs'\nimport relativeTime from 'dayjs/plugin/relativeTime'\nimport timezone from 'dayjs/plugin/timezone'\nimport utc from 'dayjs/plugin/utc'\n\n// Extend dayjs with the plugins\ndayjs.extend(relativeTime)\ndayjs.extend(timezone)\ndayjs.extend(utc)\n\nfunction convertScheduleToTimezone(scheduleData) {\n    const userStore = useUserStore() // Access the UserStore\n\n    return scheduleData.data.map(item => {\n        // Convert top-level start_time and end_time using UserStore methods\n        const startTimeInUserTz = item.start_time ? userStore.formatDateTimeFromUtcToUserTimezone(item.start_time, 'YYYY-MM-DD HH:mm:ss') : null\n        const endTimeInUserTz = item.end_time ? userStore.formatDateTimeFromUtcToUserTimezone(item.end_time, 'YYYY-MM-DD HH:mm:ss') : null\n\n        // Check and convert recurrenceDetails if present\n        let recurrenceDetailsInUserTz = null\n        if (item.recurrenceDetails) {\n            const {start_time, start_date, end_date} = item.recurrenceDetails\n            recurrenceDetailsInUserTz = {\n                ...item.recurrenceDetails,\n                start_time: start_time ? userStore.formatTimeInUserTimezone(start_time, 'HH:mm:ss') : null,\n                start_date: start_date ? userStore.formatDateTimeFromUtcToUserTimezone(start_date, 'YYYY-MM-DD') : null,\n                end_date: end_date ? userStore.formatDateTimeFromUtcToUserTimezone(end_date, 'YYYY-MM-DD') : null,\n            }\n        }\n\n        return {\n            ...item,\n            start_time: startTimeInUserTz,\n            end_time: endTimeInUserTz,\n            recurrenceDetails: recurrenceDetailsInUserTz,\n        }\n    })\n}\n\n// Helper function to get dates within the next 6 hours from viewingWindowStart\nfunction getUpcomingContentDates(viewingWindowStart) {\n    let dates = []\n    let start = new Date(viewingWindowStart)\n    for (let i = 0; i < 6; i++) {\n        dates.push(new Date(start.setHours(start.getHours() + i)))\n    }\n    return dates\n}\n\n/**\n * Filters shows that are scheduled within a specified datetime range, adjusted to the user's timezone.\n *\n * This function ensures that show scheduling comparisons are made accurately by converting all involved\n * datetime values to the user's local timezone using functions from the userStore. It includes type checking\n * to ensure input dates are valid and handles edge cases where shows start or end at the boundary times.\n *\n * @param {Object} state - The state object containing the shows' data.\n * @param {Date} startDateTime - The start datetime from which to filter shows, expected to be a Date object.\n * @param {Date} endDateTime - The end datetime up to which to filter shows, expected to be a Date object.\n * @returns {Array} An array of shows that start within the specified datetime range.\n */\nfunction fetchShowsScheduledBetween(state, startDateTime, endDateTime) {\n    const userStore = useUserStore() // Access user-specific settings and utilities\n\n    if (!(startDateTime instanceof Date && endDateTime instanceof Date)) {\n        throw new TypeError('startDateTime and endDateTime must be Date objects.');\n    }\n\n    // Convert start and end DateTime to the user's timezone for accurate comparison\n    const startInUserTZ = userStore.convertUtcToUserTimezone(startDateTime.toISOString())\n    const endInUserTZ = userStore.convertUtcToUserTimezone(endDateTime.toISOString())\n\n    return state.weeklyContent.filter(show => {\n        if (typeof show.start_time !== 'string') {\n            console.warn('Expected show.start_time to be a string in ISO format.');\n            return false;\n        }\n        const showStartTimeInUserTZ = userStore.convertUtcToUserTimezone(show.start_time);\n\n        // Check if the show's start time is within the specified datetime range, inclusive of start and exclusive of end\n        return new Date(showStartTimeInUserTZ) >= new Date(startInUserTZ) && new Date(showStartTimeInUserTZ) < new Date(endInUserTZ);\n    });\n}\n\nfunction resolveSchedulingConflicts(shows) {\n    // Sort shows by start time, then by priority for shows with the same start time\n    const sortedShows = shows.sort((a, b) => {\n        const startTimeComparison = new Date(a.start_time) - new Date(b.start_time)\n        if (startTimeComparison === 0) { // If start times are the same\n            return a.priority - b.priority // Compare by priority\n        }\n        return startTimeComparison\n    })\n\n    const resolvedShows = []\n    const showsByStartTime = {}\n\n    // Group shows by their start time\n    sortedShows.forEach(show => {\n        const startTime = new Date(show.start_time).toISOString()\n        if (!showsByStartTime[startTime]) {\n            showsByStartTime[startTime] = []\n        }\n        showsByStartTime[startTime].push(show)\n    })\n\n    // For each start time, select the show with the highest priority (lowest priority number)\n    Object.values(showsByStartTime).forEach(group => {\n        if (group.length > 1) {\n            // If there are conflicts, push only the show with the highest priority\n            resolvedShows.push(group[0]) // Assuming the group is already sorted by priority\n        } else {\n            // No conflict, push the single show\n            resolvedShows.push(group[0])\n        }\n    })\n\n    return resolvedShows\n}\n\nfunction adjustShowsForGrid(shows, timeSlots) {\n    return shows.map(show => {\n        // Your existing logic for calculating show placement\n        const showStart = new Date(show.start_time)\n        const showEnd = new Date(show.start_time)\n        showEnd.setMinutes(showEnd.getMinutes() + show.durationMinutes)\n        const slotIndex = timeSlots.findIndex(slot => showStart >= slot && showStart < new Date(slot.getTime() + 30 * 60000))\n        let span = Math.ceil(show.durationMinutes / 30)\n        if (slotIndex + span > timeSlots.length) {\n            span = timeSlots.length - slotIndex\n        }\n\n        return {\n            ...show,\n            gridStart: slotIndex + 1,\n            gridSpan: span,\n        }\n    })\n}\n\nfunction fillEmptySlotsWithPlaceholders(showsWithPlacement, timeSlots) {\n    const gridItems = []\n\n    timeSlots.forEach((slot, index) => {\n        // Ensure every slot is a Date object, convert if necessary\n        console.log('type of slot: ' + slot, typeof slot); // Check what `slot` contains and its type\n\n        if (!(slot instanceof Date)) {\n            console.error('slot is not a Date object:', slot);\n            return; // Skip this iteration if `slot` is not a Date object\n        }\n\n        const slotStart = slot\n        const showExistsInSlot = showsWithPlacement.some(show =>\n            slotStart >= new Date(show.start_time) &&\n            slotStart < new Date(new Date(show.start_time).getTime() + show.durationMinutes * 60000),\n        )\n\n        if (!showExistsInSlot) {\n            // Insert a placeholder show for this slot\n            gridItems.push({\n                placeholder: true,\n                start_time: slot.toISOString(),\n                gridStart: index + 1,\n                gridSpan: 1,\n                content: {show: {name: 'Nothing scheduled.'}},\n            })\n        }\n    })\n\n    // Merge and sort the grid items by their start time/gridStart to maintain chronological order\n    return [...showsWithPlacement, ...gridItems].sort((a, b) => a.gridStart - b.gridStart)\n}\n\n\nconst initialState = () => ({\n    viewingWindowStart: new Date(),\n    currentMonth: new Date(),\n    selectedDay: new Date(),\n    currentWeekStart: null,\n    currentWeekEnd: null,\n    // viewingMode: 'automatic', // or 'userSelected'\n    fiveDaySixHourSchedule: [], // Holds the schedule shows 5 day / 6 hour structured data\n    todaysContent: [],\n    weeklyContent: [],\n    dataFetchLog: [],\n    scheduleIsLoading: false,\n    savingToSchedule: false,\n})\n\nexport const useScheduleStore = defineStore('scheduleStore', {\n    state: initialState,\n    actions: {\n        resetAll() {\n            // Reset the store to its original state (clear all data)\n            Object.assign(this, initialState())\n        },\n        reset() {\n            const now = new Date()\n            this.viewingWindowStart = now\n            this.currentMonth = now\n            this.selectedDay = now\n        },\n        async setSelectedDay(day) {\n            this.selectedDay = day\n            // Explicitly set the viewingWindowStart to 4 AM for the selected day\n            this.viewingWindowStart = addHours(startOfDay(day), 4)\n            this.currentWeekStart = startOfWeek(day, {weekStartsOn: 0})\n            this.currentWeekEnd = endOfWeek(day, {weekStartsOn: 0})\n\n            // // Check if the week of the selected day is already loaded\n            // this.currentWeekStart = startOfWeek(day, {weekStartsOn: 0});\n            // this.currentWeekEnd = endOfWeek(day, {weekStartsOn: 0});\n\n            // Use the updated fetch logic\n            await this.fetchWeekDataIfNeeded()\n\n            // // First, check if we need to load data for the new week\n            // if (this.needsDataForWeek(weekStart, weekEnd)) {\n            //     // If new data is needed for the week, load it\n            //     await this.loadWeekFromDate(day).catch(error => {\n            //         console.error(\"Failed to load data for the new week:\", error);\n            //     });\n            // }\n\n            // Then, check and fetch for any missing upcoming content\n            // This is necessary in case the week data is present but specific upcoming content within the week is missing\n            // await this.checkAndFetchForUpcomingContent();\n        },\n        setSelectedDayToToday(day) {\n            const now = new Date()\n            this.selectedDay = now\n            this.viewingWindowStart = startOfHour(now)\n        },\n        async changeDay(days) {\n            const currentTime = this.viewingWindowStart.getHours() * 60 + this.viewingWindowStart.getMinutes()\n            let newDay = addDays(startOfDay(this.viewingWindowStart), days)\n            newDay = new Date(newDay.setMinutes(currentTime)) // Preserve time of day\n\n            this.selectedDay = newDay\n            this.viewingWindowStart = newDay\n\n            // Update the week's range based on the new day\n            this.currentWeekStart = startOfWeek(newDay, {weekStartsOn: 0})\n            this.currentWeekEnd = endOfWeek(newDay, {weekStartsOn: 0})\n\n            // // Check if the week of the new day is already loaded\n            // const weekStart = startOfWeek(newDay, {weekStartsOn: 0});\n            // const weekEnd = endOfWeek(newDay, {weekStartsOn: 0});\n\n            // Use the updated centralized fetch logic without redundant checks\n            await this.fetchWeekDataIfNeeded()\n\n            // // Check for the need to load data for the new week\n            // if (this.needsDataForWeek(weekStart, weekEnd)) {\n            //     await this.loadWeekFromDate(newDay).catch(error => {\n            //         console.error(\"Failed to load data for the new week:\", error);\n            //     });\n            // }\n\n            // // Check for the need to load data for the new week\n            // if (!this.needsDataForWeek()) {\n            //     // Data for the current week has already been loaded; skip fetching\n            //     console.log(\"Data for the current week has already been loaded; skipping redundant fetch.\");\n            //     return;\n            // }\n            //\n            // // Proceed with data fetching if needed\n            // await this.checkAndFetchForUpcomingContent();\n        },\n        async shiftHours(hours) {\n            // Shift the viewing window\n            this.viewingWindowStart = addHours(this.viewingWindowStart, hours)\n            this.currentWeekStart = startOfWeek(this.viewingWindowStart, {weekStartsOn: 0})\n            this.currentWeekEnd = endOfWeek(this.viewingWindowStart, {weekStartsOn: 0})\n\n            // // Update selectedDay if the day has changed\n            // if (!isSameDay(this.viewingWindowStart, this.selectedDay)) {\n            //     this.selectedDay = startOfDay(this.viewingWindowStart);\n            // }\n\n            // If the day has changed, update selectedDay and the week's range\n            if (!isSameDay(this.viewingWindowStart, this.selectedDay)) {\n                this.selectedDay = startOfDay(this.viewingWindowStart)\n            }\n\n            // // Check if the week of the new viewing window is already loaded\n            // this.currentWeekStart = startOfWeek(this.viewingWindowStart, { weekStartsOn: 0 });\n            // this.currentWeekEnd = endOfWeek(this.viewingWindowStart, { weekStartsOn: 0 });\n\n            // Use the updated fetch logic\n            await this.fetchWeekDataIfNeeded()\n\n            // // Check for the need to load data for the new week\n            // if (!this.needsDataForWeek()) {\n            //     // Data for the current week has already been loaded; skip fetching\n            //     console.log(\"Data for the current week has already been loaded; skipping redundant fetch.\");\n            //     return;\n            // }\n\n            //\n            // await this.loadWeekFromDate(this.viewingWindowStart).catch(error => {\n            //     console.error(\"Failed to load data for the new week:\", error);\n            // });\n\n            // Proceed with data fetching if needed\n            // await this.checkAndFetchForUpcomingContent();\n        },\n        isElevenPM(date) {\n            return getHours(date) === 23 // Checks if the hour is 23 (11 PM)\n        },\n        // Actions to change the month\n        async subtractMonth() {\n            // Subtract one month from the currentMonth\n            this.currentMonth = subMonths(this.currentMonth, 1)\n\n            try {\n                await this.setSelectedDay(this.currentMonth)\n                console.log('Set selected day based on current month:', this.currentMonth)\n            } catch (error) {\n                console.error(`Failed to set selected day based on current month ${this.currentMonth}:`, error)\n            }\n        },\n        async addMonth() {\n            this.currentMonth = addMonths(this.currentMonth, 1)\n            try {\n                await this.setSelectedDay(this.currentMonth)\n                console.log('Set selected day based on current month:', this.currentMonth)\n            } catch (error) {\n                console.error(`Failed to set selected day based on current month ${this.currentMonth}:`, error)\n            }\n        },\n        async fetchFiveDaySixHourSchedule() {\n            console.error('fetchFiveDaySixHourSchedule')\n            try {\n                const userStore = useUserStore()\n                const response = await axios.get('/api/schedule')\n\n                // Fallback to response timezone if userStore.timezone is not set\n                const timezone = userStore.timezone || response.data.userTimezone || 'UTC' // Additional fallback to 'UTC'\n\n                // Convert the entire schedule, including nested recurrenceDetails, to the user's timezone\n                this.fiveDaySixHourSchedule = convertScheduleToTimezone(response.data, timezone)\n                console.error('fetchFiveDaySixHourSchedule', response.data)\n            } catch (error) {\n                console.error('Failed to load schedule shows:', error)\n                // Handle the error state as needed, e.g., setting an error state property\n            }\n        },\n        async fetchTodaysContent() {\n            try {\n                const userStore = useUserStore()\n                const response = await axios.get('/api/schedule/today')\n\n                // Fallback to response timezone if userStore.timezone is not set\n                const timezone = userStore.timezone || response.data.userTimezone || 'UTC' // Additional fallback to 'UTC'\n\n                this.todaysContent = convertScheduleToTimezone(response.data, timezone)\n            } catch (error) {\n                console.error('Failed to fetch today\\'s content:', error)\n            }\n        },\n        async preloadWeeklyContent() {\n            // Use the current date to preload content for the current week\n            const currentDate = new Date()\n\n            try {\n                // Call loadWeekFromDate with the current date\n                await this.loadWeekFromDate(currentDate)\n            } catch (error) {\n                console.error('Failed to preload weekly content:', error)\n            }\n        },\n        async loadWeekFromDate(date) {\n            let formattedDate // Declare formattedDate outside of the try block\n            this.scheduleIsLoading = true\n            try {\n                const userStore = useUserStore()\n                // Ensure the date is in UTC format for the request\n                console.log('Date before formatted: ' + date)\n                const fullISODate = date.toISOString()\n\n                console.log(`Loading week data for date in UTC: ${fullISODate}`)\n\n                // Send the dateTime and timezone as a JSON object in a POST request\n                const response = await axios.post(`/api/schedule/week/${fullISODate}`)\n\n                // const formattedDate = date.toISOString().split('T')[0];\n                // console.log(`Loading week data for date: ${formattedDate}`); // Log the date being requested\n                //\n                // const response = await axios.get(`/api/schedule/week/${formattedDate}`);\n                console.log('Received response:', response.data) // Log the raw response data\n\n                // Fallback to response timezone if userStore.timezone is not set\n                const timezone = userStore.timezone || response.data.userTimezone || 'UTC' // Additional fallback to 'UTC'\n                console.log(`Using timezone: ${timezone}`) // Log the timezone being used\n\n                const newData = convertScheduleToTimezone(response.data, timezone) // Ensure you are accessing the correct data property from the response\n\n                // Update the fetch log with the current fetch\n                const weekStart = startOfWeek(new Date(date), {weekStartsOn: 0}).toISOString()\n                const weekEnd = endOfWeek(new Date(date), {weekStartsOn: 0}).toISOString()\n                const fetchTime = new Date().toISOString()\n\n                const existingLogIndex = this.dataFetchLog.findIndex(log => log.weekStart === weekStart && log.weekEnd === weekEnd)\n                if (existingLogIndex !== -1) {\n                    this.dataFetchLog[existingLogIndex].lastFetch = fetchTime\n                } else {\n                    this.dataFetchLog.push({weekStart, weekEnd, lastFetch: fetchTime})\n                }\n\n                // Merge newData into weeklyContent, avoiding duplicates\n                this.weeklyContent = [...this.weeklyContent, ...newData].filter((value, index, self) =>\n                        index === self.findIndex((t) => (\n                            t.id === value.id && t.start_time === value.start_time\n                        )),\n                )\n                this.scheduleIsLoading = false\n            } catch (error) {\n                console.error(`Failed to load content for week starting ${formattedDate}:`, error)\n                this.scheduleIsLoading = false\n            }\n        },\n        needsDataForWeek() {\n            // Helper function to format ISO date strings for easier comparison\n            const formatISODate = date => date.toISOString().split('T')[0]\n\n            // Current week range in ISO date string format\n            const weekStartStr = formatISODate(this.currentWeekStart)\n            const weekEndStr = formatISODate(this.currentWeekEnd)\n\n            // Enhanced logging for debugging\n            console.log(`Current week range: ${weekStartStr} to ${weekEndStr}`)\n            console.log('Existing data fetch log entries:', this.dataFetchLog)\n\n            // Iterate through the fetch log to check if the current week has been fetched\n            const weekHasBeenFetched = this.dataFetchLog.some(log => {\n                // Convert log dates to ISO string format for comparison\n                const logWeekStartStr = formatISODate(new Date(log.weekStart))\n                const logWeekEndStr = formatISODate(new Date(log.weekEnd))\n\n                // Log each comparison for insight\n                console.log(`Comparing to fetched range: ${logWeekStartStr} to ${logWeekEndStr}`)\n\n                return logWeekStartStr <= weekStartStr && logWeekEndStr >= weekEndStr\n            })\n\n            // Log the final determination\n            console.log(`Week from ${weekStartStr} to ${weekEndStr} has ${weekHasBeenFetched ? '' : 'not '}been fetched.`)\n\n            return !weekHasBeenFetched\n            // // Extend weekEnd to cover the span of upcoming content from viewingWindowStart\n            // const extendedEnd = this.calculateExtendedEndForUpcomingContent();\n            // let checkWeekEnd = new Date(this.currentWeekEnd); // Work with a copy to avoid side effects\n            //\n            // if (extendedEnd > checkWeekEnd) {\n            //     checkWeekEnd = extendedEnd;\n            // }\n            //\n            // // Now weekEnd includes any additional day(s) that might be displayed\n            // // Adjust the checkWeekEnd to include the entire day\n            // checkWeekEnd.setHours(23, 59, 59, 999);\n            //\n            // const hasDataForExtendedWeek = this.weeklyContent.some(content => {\n            //     const contentDate = new Date(content.start_time);\n            //     return contentDate >= this.currentWeekStart && contentDate <= checkWeekEnd;\n            // });\n            //\n            // console.log('Has data for extended week range:', hasDataForExtendedWeek);\n            // return !hasDataForExtendedWeek;\n        },\n        calculateExtendedEndForUpcomingContent() {\n            // Assuming viewingWindowStart is the reference start time for upcoming content\n            const baseStartTime = new Date(this.viewingWindowStart)\n            // Extend by 6 hours to cover the upcoming content span\n            // Return the extended end time, potentially adjusting into the next day\n            return new Date(baseStartTime.getTime() + (6 * 60 * 60 * 1000))\n        },\n        // Function to check for and fetch missing upcoming content\n        async checkAndFetchForUpcomingContent() {\n            const upcomingDates = getUpcomingContentDates(this.viewingWindowStart)\n            const now = new Date()\n            const fifteenMinutesAgo = new Date(now.getTime() - 15 * 60000)\n\n            for (const date of upcomingDates) {\n                const dateString = date.toISOString().split('T')[0]\n                const contentCoverageAndFreshness = this.weeklyContent.some(content => {\n                    const contentDate = new Date(content.start_time).toDateString()\n                    const lastFetchedTime = this.dataFetchLog[dateString]\n                    const isFresh = lastFetchedTime && new Date(lastFetchedTime) > fifteenMinutesAgo\n                    return date.toDateString() === contentDate && isFresh\n                })\n\n                if (!contentCoverageAndFreshness) {\n                    // This date needs data fetching\n                    await this.fetchDataAndUpdateLog(dateString, date)\n                    break // Assuming you fetch data for the week, so no need to check further dates within the same week\n                }\n            }\n        },\n        async fetchDataAndUpdateLog(dateString, date) {\n            try {\n                await this.loadWeekFromDate(date)\n                // Successfully fetched, so update the log\n                this.dataFetchLog[dateString] = new Date().toISOString()\n                console.log('Data fetched successfully for date:', dateString)\n            } catch (error) {\n                console.error(`Failed to fetch data for date ${dateString}:`, error)\n            }\n        },\n\n        // Updated to use this.currentWeekStart and this.currentWeekEnd directly\n        async fetchWeekDataIfNeeded() {\n            // Assumes this.currentWeekStart and this.currentWeekEnd are already set\n            if (this.needsDataForWeek()) {\n                await this.checkAndFetchForUpcomingContent().catch(error => {\n                    console.error('Failed to load data for the week:', error)\n                    return false // Indicates failure to fetch when an error occurs\n                })\n                // await this.loadWeekFromDate(this.currentWeekStart).catch(error => {\n                //     console.error(\"Failed to load data for the week:\", error);\n                //     return false; // Indicates failure to fetch when an error occurs\n                // });\n            } else {\n                console.log('Week data already loaded; no need to fetch.')\n            }\n\n            // Conditionally check for missing upcoming content within the current week\n            // only if new week data hasn't been fetched.\n            // if (!dataFetched) {\n            //     await this.checkAndFetchForUpcomingContent();\n            // }\n        },\n        // createTimeSlots(start, durationHours = 4, intervalMinutes = 30) {\n        //     let slots = [];\n        //     for (let i = 0; i < (durationHours * 60) / intervalMinutes; i++) {\n        //         let slotTime = new Date(start.getTime() + i * intervalMinutes * 60000);\n        //         slots.push(slotTime);\n        //     }\n        //     return slots;\n        // },\n\n\n        mapShowsToTimeSlots(shows, timeSlots) {\n            const showsWithAdjustedSpans = shows.map(show => {\n                const showStart = new Date(show.start_time)\n                const showEnd = new Date(show.start_time)\n                showEnd.setMinutes(showEnd.getMinutes() + show.durationMinutes)\n                const slotIndex = timeSlots.findIndex(slot => showStart >= slot && showStart < new Date(slot.getTime() + 30 * 60000))\n\n                // Initially set the span based on the show's duration\n                let span = Math.ceil(show.durationMinutes / 30)\n\n                // Adjust the span if there's an overlap with the next show's start time\n                if (slotIndex + span > timeSlots.length) {\n                    span = timeSlots.length - slotIndex // Adjust to not exceed the grid\n                }\n\n                // Return the show with adjusted span and calculated start index\n                return {\n                    ...show,\n                    gridStart: slotIndex + 1,\n                    gridSpan: span,\n                }\n            })\n\n            // Now handle placing the shows with adjusted spans in the grid, including placeholders for empty slots\n            return timeSlots.map((slot, index) => {\n                const showForSlot = showsWithAdjustedSpans.find(show => show.gridStart === index + 1)\n                if (showForSlot) {\n                    return showForSlot\n                } else {\n                    // If no show for this slot, return a placeholder\n                    return {\n                        placeholder: true,\n                        gridStart: index + 1,\n                        gridSpan: 1,\n                        content: {show: {name: 'Nothing scheduled.'}},\n                    }\n                }\n            })\n        },\n\n    },\n\n    getters: {\n        nextFourHoursOfContent: (state) => {\n            const now = new Date()\n            const startOfCurrentHour = new Date(now.setMinutes(0, 0, 0))\n            const fourHoursLater = new Date(startOfCurrentHour.getTime() + 4 * 60 * 60 * 1000)\n\n            const timeSlots = createTimeSlots(startOfCurrentHour, 4, 30)\n            let shows = fetchShowsScheduledBetween(state, startOfCurrentHour, fourHoursLater)\n            let resolvedShows = resolveSchedulingConflicts(shows)\n            let adjustedShows = adjustShowsForGrid(resolvedShows, timeSlots)\n            return fillEmptySlotsWithPlaceholders(adjustedShows, timeSlots)\n        },\n        // nextFourHoursOfContent: (state) => {\n        //     const userStore = useUserStore()\n        //     const now = new Date() // Current time\n        //     // const startOfCurrentHour = new Date(now.getFullYear(), now.getMonth(), now.getDate(), now.getHours());\n        //     const startOfCurrentHour = new Date(now.setMinutes(0, 0, 0))\n        //     const fourHoursLater = new Date(startOfCurrentHour.getTime() + 4 * 60 * 60 * 1000)\n        //\n        //\n        //     // Create time slots for the next four hours, at 30-minute intervals, in UTC\n        //     const utcTimeSlots = createTimeSlots(startOfCurrentHour, 4, 30)\n        //     // Convert each UTC time slot to the user's local timezone\n        //     const timeSlots = utcTimeSlots.map(slot =>\n        //         new Date(userStore.convertUtcToUserTimezone(slot)),\n        //     )\n        //\n        //     // Iterate over each time slot to either find a show that matches or insert a placeholder\n        //     const filledShows = timeSlots.map((slot, index) => {\n        //         const slotStart = dayjs(slot).format('YYYY-MM-DD HH:mm:ss')\n        //         const matchingShow = state.weeklyContent.find(show => {\n        //             const showStart = dayjs(show.start_time).format('YYYY-MM-DD HH:mm:ss')\n        //             return showStart === slotStart\n        //         })\n        //\n        //         if (matchingShow) {\n        //             // Calculate grid placement based on the show's start time and duration\n        //             return {\n        //                 ...matchingShow,\n        //                 gridStart: index + 1,\n        //                 gridSpan: Math.ceil(matchingShow.durationMinutes / 30),\n        //             }\n        //         } else {\n        //             // Create a placeholder for empty time slots\n        //             return {\n        //                 placeholder: true,\n        //                 start_time: slot.toISOString(),\n        //                 durationMinutes: 30,\n        //                 gridStart: index + 1,\n        //                 gridSpan: 1,\n        //                 content: {show: {name: 'Nothing scheduled.'}},\n        //             }\n        //         }\n        //     })\n        //\n        //     return filledShows\n        // },\n\n        // // Group shows by start time\n        // const showsGroupedByStartTime = state.weeklyContent.reduce((acc, item) => {\n        //     const itemStart = dayjs(item.start_time).format('YYYY-MM-DD HH:mm:ss');\n        //     if (!acc[itemStart]) {\n        //         acc[itemStart] = [];\n        //     }\n        //     acc[itemStart].push(item);\n        //     return acc;\n        // }, {});\n        //\n        // // Select the show with the lowest priority for each start time\n        // const selectedShows = Object.values(showsGroupedByStartTime).map(group => {\n        //     return group.reduce((selected, item) => {\n        //         return !selected || item.priority < selected.priority ? item : selected;\n        //     }, null);\n        // });\n        //\n        // // Sort, adjust for overlaps, and calculate grid placement as before\n        // let sortedShows = selectedShows\n        //     .filter(item => {\n        //         const itemStart = new Date(item.start_time);\n        //         return itemStart >= startOfCurrentHour && itemStart < fourHoursLater;\n        //     })\n        //     .sort((a, b) => {\n        //         const startDiff = new Date(a.start_time) - new Date(b.start_time);\n        //         return startDiff !== 0 ? startDiff : a.priority - b.priority;\n        //     })\n        //     .map((item, index, array) => {\n        //         // Grid placement logic remains the same as before\n        //         // Ensure the span doesn't exceed the grid or become negative\n        //         const itemStart = new Date(item.start_time);\n        //         const slotIndex = timeSlots.findIndex(slot => new Date(item.start_time) >= slot && new Date(item.start_time) < new Date(slot.getTime() + 30 * 60000));\n        //         let durationSlots = Math.ceil(item.durationMinutes / 30);\n        //         if (index < array.length - 1) {\n        //             // Adjust for overlaps with subsequent shows\n        //         }\n        //         const adjustedSpan = Math.max(1, Math.min(durationSlots, timeSlots.length - slotIndex));\n        //         return {\n        //             ...item,\n        //             gridStart: slotIndex + 1,\n        //             gridSpan: adjustedSpan\n        //         };\n        //     });\n\n        // Filter, sort, and adjust shows based on start time, duration, and priority\n        // let sortedShows = state.weeklyContent\n        //     .filter(item => {\n        //         const itemStart = new Date(item.start_time);\n        //         return itemStart >= startOfCurrentHour && itemStart < fourHoursLater;\n        //     })\n        //     .sort((a, b) => {\n        //         // Sort by start time; if equal, then by priority\n        //         const startDiff = new Date(a.start_time) - new Date(b.start_time);\n        //         return startDiff !== 0 ? startDiff : a.priority - b.priority;\n        //     })\n        //     .map((item, index, array) => {\n        //         // Convert back to string format matching start_time format\n        //         const formattedItemStartTime = dayjs(item.start_time).format('YYYY-MM-DD HH:mm:ss');\n        //\n        //         console.log('itemStartTimeInUserTZ: ' + formattedItemStartTime)\n        //         // Calculate grid placement for each show\n        //         const itemStart = new Date(item.start_time);\n        //         const itemEnd = new Date(item.start_time);\n        //         itemEnd.setMinutes(itemEnd.getMinutes() + item.durationMinutes);\n        //\n        //         // Find the index of the slot that the item starts in\n        //         // const slotIndex = timeSlots.findIndex(slot => itemStart >= slot && itemStart < new Date(slot.getTime() + 30 * 60000));\n        //\n        //         // Find the index of the slot that the item starts in\n        //         const slotIndex = timeSlots.findIndex(slot => {\n        //             return formattedItemStartTime >= slot && formattedItemStartTime < new Date(slot.getTime() + 30 * 60000);\n        //         });\n        //\n        //         let durationSlots = Math.ceil(item.durationMinutes / 30);\n        //         // Adjust for overlaps with subsequent shows\n        //         if (index < array.length - 1) {\n        //             const nextItemStart = new Date(array[index + 1].start_time);\n        //             if (itemEnd > nextItemStart) {\n        //                 // If overlap, reduce durationSlots\n        //                 const overlap = Math.ceil((itemEnd - nextItemStart) / (30 * 60000));\n        //                 durationSlots -= overlap;\n        //             }\n        //         }\n        //\n        //         // Ensure the span doesn't exceed the grid or become negative\n        //         const adjustedSpan = Math.max(1, Math.min(durationSlots, timeSlots.length - slotIndex));\n        //\n        //         // Return the adjusted show with grid placement information\n        //         return {\n        //             ...item,\n        //             gridStart: slotIndex + 1, // Grid is 1-indexed\n        //             gridSpan: adjustedSpan\n        //         };\n        //     });\n\n        // Create placeholders for each time slot if there's no show scheduled\n        // const filledShows = timeSlots.map(slot => {\n        //     const formattedSlot = dayjs(slot).format('YYYY-MM-DD HH:mm:ss');\n        //     const showForSlot = sortedShows.find(show => dayjs(show.start_time).format('YYYY-MM-DD HH:mm:ss') === formattedSlot);\n        //\n        //     if (showForSlot) {\n        //         return showForSlot; // Return the actual show if it exists\n        //     } else {\n        //         // Return a placeholder show for empty slots\n        //         return {\n        //             placeholder: true, // Indicate this is a placeholder\n        //             start_time: slot.toISOString(),\n        //             durationMinutes: 30, // Assuming a standard 30-minute slot\n        //             gridStart: timeSlots.indexOf(slot) + 1,\n        //             gridSpan: 1,\n        //             content: {\n        //                 show: {\n        //                     name: \"Nothing scheduled.\"\n        //                 }\n        //             }\n        //         };\n        //     }\n        // });\n\n        // Return the filled array of shows and placeholders\n        // return filledShows;\n        // return sortedShows;\n        // },\n        // nextFourHoursOfContent: (state) => {\n        //     const now = new Date(); // Get the current date and time\n        //     const start = new Date(now.getFullYear(), now.getMonth(), now.getDate(), now.getHours()); // Set to the top of the current hour\n        //     const end = new Date(start.getTime() + 4 * 60 * 60 * 1000); // 4 hours later from the start\n        //\n        //     // Filter weeklyContent for the next 6 hours window\n        //     return state.weeklyContent.filter(item => {\n        //         const itemStart = new Date(item.start_time);\n        //         return itemStart >= start && itemStart < end;\n        //     }).sort((a, b) => new Date(a.start_time) - new Date(b.start_time));\n        // },\n        nextFourHoursWithHalfHourIntervals: (state) => {\n            const userStore = useUserStore() // Access the user store\n            const userTimezone = userStore.timezone // Get the user's timezone\n\n            const intervals = []\n            const now = dayjs().tz(userTimezone) // Get the current time in the user's timezone\n            // Use dayjs to handle time correctly in the specified timezone\n            let current = now.startOf('hour') // Set to the top of the current hour\n\n            // Generate intervals for the next 4 hours, each 30 minutes apart\n            for (let i = 0; i < 8; i++) { // 4 hours / 30 minutes = 8 intervals\n                // Push an object with both the formatted time for display and the actual DateTime object\n                intervals.push({\n                    formatted: current.format('hh:mm A'), // Formatted time for display\n                    dateTimeString: current.format('YYYY-MM-DD HH:mm:ss'), // Y-m-d H:m:s format for comparisons\n                })\n                current = current.add(30, 'minute') // Move to the next 30-minute interval\n            }\n\n            return intervals\n        },\n        upcomingContent: (state) => {\n            const start = new Date(state.viewingWindowStart.getTime() - 60 * 60 * 1000) // 1 hour earlier\n            const end = new Date(start.getTime() + 7 * 60 * 60 * 1000) // 6 hours later\n\n            // Group shows by start time\n            const showsGroupedByStartTime = state.weeklyContent.reduce((acc, item) => {\n                const itemStart = new Date(item.start_time).getTime()\n                if (!acc[itemStart]) {\n                    acc[itemStart] = []\n                }\n                acc[itemStart].push(item)\n                return acc\n            }, {})\n\n            // Select the show with the lowest priority for each start time\n            const selectedShows = Object.values(showsGroupedByStartTime).map(group => {\n                return group.reduce((selected, item) => {\n                    return !selected || item.priority < selected.priority ? item : selected\n                }, null)\n            })\n\n            // Filter, ensuring they fall within the next 6-hour window, and sort\n            return selectedShows\n                .filter(item => {\n                    const itemStart = new Date(item.start_time)\n                    return itemStart >= start && itemStart < end\n                })\n                .sort((a, b) => new Date(a.start_time) - new Date(b.start_time))\n\n            // // Filter weeklyContent for the next 6 hours window\n            // return state.weeklyContent.filter(item => {\n            //     const itemStart = new Date(item.start_time);\n            //     return itemStart >= start && itemStart < end;\n            // }).sort((a, b) => new Date(a.start_time) - new Date(b.start_time));\n        },\n        nextSixHours: (state) => {\n            let adjustedStart = state.viewingWindowStart\n            const end = addHours(adjustedStart, 5)\n            return eachHourOfInterval({start: adjustedStart, end})\n        },\n        dateMessage: (state) => {\n            const startDay = startOfDay(state.viewingWindowStart)\n            const formattedDate = format(startDay, 'EEEE MMMM do, yyyy')\n            if (isToday(startDay)) {\n                return `Today - ${formattedDate}`\n            } else if (isYesterday(startDay)) {\n                return `Yesterday - ${formattedDate}`\n            } else if (isTomorrow(startDay)) {\n                return `Tomorrow - ${formattedDate}`\n            } else {\n                return formattedDate\n            }\n        },\n        currentMonthIndex: (state) => getMonth(state.currentMonth), // Adds a getter to get the current month's index\n        currentMonthName: (state) => format(state.currentMonth, 'MMMM'),\n        currentYear: (state) => getYear(state.currentMonth),\n        daysInMonth: (state) => {\n            const startOfCurrentMonth = startOfMonth(state.currentMonth)\n            const endOfCurrentMonth = endOfMonth(state.currentMonth)\n\n            // Adjust these to ensure the grid starts on Sunday and ends on Saturday\n            const startOfGrid = startOfWeek(startOfCurrentMonth, {weekStartsOn: 0})\n            const endOfGrid = endOfWeek(endOfCurrentMonth, {weekStartsOn: 0})\n\n            // Generate the days for the calendar grid\n            return eachDayOfInterval({start: startOfGrid, end: endOfGrid})\n        },\n        isToday: (state) => {\n            const today = new Date()\n            const viewingStart = new Date(state.viewingWindowStart)\n\n            return today.toDateString() === viewingStart.toDateString()\n        },\n    },\n})\n","// utilities/timeUtils.js\n/**\n * Creates an array of Date objects representing time slots.\n *\n * This function generates a sequence of time slots starting from a specified\n * start time, continuing for a given number of hours, and spaced apart\n * by a specified interval in minutes.\n *\n * @param {Date} start - The start time from which to generate slots, as a Date object.\n * @param {number} [durationHours=4] - The total duration for which to generate slots, in hours.\n * @param {number} [intervalMinutes=30] - The interval between each slot, in minutes.\n * @returns {Date[]} An array of Date objects, each representing a time slot.\n *\n * Example:\n * If start is `new Date('2024-01-01T08:00:00Z')`, durationHours is 2, and intervalMinutes is 30,\n * the output will be an array of Date objects representing the times:\n * `08:00`, `08:30`, `09:00`, and `09:30`.\n */\nexport function createTimeSlots(start, durationHours = 4, intervalMinutes = 30) {\n    let slots = [];\n    for (let i = 0; i < (durationHours * 60) / intervalMinutes; i++) {\n        let slotTime = new Date(start.getTime() + i * intervalMinutes * 60000);\n        slots.push(slotTime);  // Keep as Date object\n    }\n    return slots;\n}","import { onBeforeMount, onMounted } from 'vue'\nimport { useUserStore } from \"@/Stores/UserStore\"\nimport { useAppSettingStore } from \"@/Stores/AppSettingStore\"\nimport { useVideoPlayerStore } from \"@/Stores/VideoPlayerStore\"\nimport { Inertia } from '@inertiajs/inertia'\n\nexport function usePageSetup(pageName) {\n    const userStore = useUserStore()\n    const appSettingStore = useAppSettingStore()\n    const videoPlayerStore = useVideoPlayerStore()\n\n    appSettingStore.currentPage = pageName\n    appSettingStore.showFlashMessage = true\n    appSettingStore.pageIsHidden = false\n\n    if (userStore.isMobile || window.innerWidth < 1024 || appSettingStore.fullPage) {\n        appSettingStore.ott = 0;\n    } else {\n        appSettingStore.ott = 1;\n        appSettingStore.showOttButtons = true;\n    }\n\n    videoPlayerStore.makeVideoTopRight()\n\n    if (appSettingStore.pageReload) {\n        appSettingStore.pageReload = false\n        window.location.reload(true);\n    }\n    // Check if the URL contains query strings\n\n\n    // Only scroll into view if there are no query strings\n\n        // const topDiv = document.getElementById(\"topDiv\")\n        // if (topDiv) {\n        //     topDiv.scrollIntoView()\n        // }\n        Inertia.on('navigate', (event) => {\n            if (userStore.isMobile || window.innerWidth < 1024 || appSettingStore.fullPage) {\n                appSettingStore.ott = 0;\n            } else {\n                appSettingStore.ott = 1;\n            }\n            const hasQueryStrings = window.location.search !== '';\n            if (!hasQueryStrings || appSettingStore.shouldScrollToTop) {\n                requestAnimationFrame(() => {\n                    const topDiv = document.getElementById(\"topDiv\");\n                    if (topDiv) {\n                        topDiv.scrollIntoView({behavior: 'auto'});\n                    } else {\n                        window.scrollTo(0, 0);\n                    }\n                });\n            }\n            appSettingStore.shouldScrollToTop = false;\n        })\n    // Only update if we're not already on this page to avoid overwriting with the current URL\n    appSettingStore.setPrevUrl()\n    appSettingStore.showOttButtons = true\n    appSettingStore.noLayout = false\n\n    // Inertia.reload()\n\n}\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"\", \"\",{\"version\":3,\"sources\":[],\"names\":[],\"mappings\":\"\",\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".grid[data-v-753bb39c]{display:grid;gap:4px;grid-auto-rows:minmax(100px,auto);grid-template-columns:repeat(8,minmax(0,1fr))}@media (max-width:640px){.grid[data-v-753bb39c]{grid-template-columns:repeat(4,minmax(0,1fr))}}@media (min-width:641px) and (max-width:768px){.grid[data-v-753bb39c]{grid-template-columns:repeat(6,minmax(0,1fr))}}@media (min-width:769px){.grid[data-v-753bb39c]{grid-template-columns:repeat(8,minmax(0,1fr))}}\", \"\",{\"version\":3,\"sources\":[\"webpack://./resources/js/Components/Pages/Schedule/ScheduleGrid.vue\"],\"names\":[],\"mappings\":\"AAmKA,uBACE,YAAa,CAGb,OAAQ,CADR,iCAAmC,CADnC,6CAGF,CAEA,yBACE,uBACE,6CACF,CACF,CACA,+CACE,uBACE,6CACF,CACF,CACA,yBACE,uBACE,6CACF,CACF\",\"sourcesContent\":[\"<template>\\n  <div>\\n    <input type=\\\"time\\\" v-model=\\\"currentHour\\\" @input=\\\"updateShows\\\" class=\\\"text-black\\\">\\n    <div :class=\\\"gridClass\\\">\\n      <SpotComponent\\n          v-for=\\\"show in visibleShows\\\"\\n          :key=\\\"show.id\\\"\\n          :show=\\\"show\\\"\\n          :span=\\\"calculateSpan(show)\\\"\\n      />\\n    </div>\\n  </div>\\n</template>\\n\\n<script setup>\\nimport { ref, computed, watch, onMounted, onUnmounted, watchEffect } from 'vue'\\nimport { useScheduleStore } from '@/Stores/ScheduleStore'\\nimport SpotComponent from './SpotComponent.vue';\\nimport { mockShows } from '../../../Json/mockShows'; // assuming you export this from a module\\n\\nconst scheduleStore = useScheduleStore()\\n\\nconst baseTime = ref(new Date());\\nconst currentHour = ref(baseTime.value.toISOString().substring(11, 16));\\n// const shows = ref([]);\\n\\n// Update base time whenever current hour changes\\n// const updateShows = () => {\\n//   const [hours, minutes] = currentHour.value.split(':');\\n//   baseTime.value.setHours(parseInt(hours), parseInt(minutes), 0, 0);\\n// };\\n\\nconst gridClass = computed(() => {\\n  // Here you can have logic based on window width or other factors\\n  return 'grid grid-cols-8 gap-2 p-4'\\n}); // as before\\n\\nconst updateShows = () => {\\n  const [hour, minute] = currentHour.value.split(':');\\n  baseTime.value.setHours(parseInt(hour), parseInt(minute), 0, 0);\\n  // You might want to force a re-render or re-compute of visible shows here\\n};\\n\\n/**\\n * Calculates how many 30-minute columns a show should span within the visible grid based on its start and end times.\\n * @param {Object} show - The show object containing start time and duration.\\n * @returns {Number} The number of 30-minute columns the show spans within the visible grid.\\n */\\nconst calculateSpan = (show) => {\\n\\n  // gridWindowEnd is calculated as 4 hours beyond the baseTime.\\n  // This covers the full span of the visible schedule grid from the current base time.\\n  const gridWindowEnd = new Date(baseTime.value.getTime() + 4 * 3600000); // 4 hours from baseTime\\n\\n  // Convert show start time and duration into JavaScript Date objects for easier manipulation.\\n  const showStart = new Date(show.startTime);\\n  const showEnd = new Date(showStart.getTime() + show.duration * 60000); // Convert duration from minutes to milliseconds\\n\\n  // Check if the show is outside the visible time window defined by baseTime and gridWindowEnd.\\n  if (showEnd <= baseTime || showStart >= gridWindowEnd) {\\n    // If the show ends before the grid starts or begins after the grid ends, it is not visible.\\n    return 0;\\n  }\\n\\n  // Calculate the actual start and end times of the show that are visible within the grid.\\n  const visibleStartTime = showStart < baseTime ? baseTime : showStart;\\n  const visibleEndTime = showEnd > gridWindowEnd ? gridWindowEnd : showEnd;\\n\\n  // Calculate the visible duration of the show in minutes.\\n  const visibleDuration = (visibleEndTime - visibleStartTime) / 60000; // Convert milliseconds to minutes\\n\\n  // Determine how many 30-minute columns this visible duration spans.\\n  // Use Math.ceil to ensure that any part of a column used requires a full column allocation.\\n  return Math.ceil(visibleDuration / 30);\\n};\\n\\n\\nwatch(currentHour, (newHour, oldHour) => {\\n  updateShows(newHour);  // Update to use newHour if necessary\\n}, { immediate: true });\\n\\nconst visibleShows = computed(() => {\\n  return mockShows.map(show => {\\n    const startTime = new Date(baseTime.value.toDateString() + ' ' + show.startTime);\\n    const span = Math.min(show.span, 8); // Limit span to grid size\\n    return { ...show, startTime, span };\\n  });\\n});\\n\\nconst timeFormat = (date) => {\\n  return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\\n};\\n\\nconst endTime = (show) => {\\n  return new Date(show.startTime.getTime() + show.span * 30 * 60000);\\n};\\n\\n// const visibleShows = computed(() => {\\n//   return mockShows.map(show => {\\n//     // Calculate the adjusted start time based on the base time\\n//     const startTime = new Date(baseTime.value.toDateString() + ' ' + show.startTime);\\n//     const endTime = new Date(startTime.getTime() + show.span * 30 * 60000); // span in minutes to milliseconds\\n//\\n//     // Determine if the show should be visible within the current view window\\n//     // For example, assuming the view window is 4 hours from the base time\\n//     const viewWindowStart = baseTime.value;\\n//     const viewWindowEnd = new Date(baseTime.value.getTime() + 4 * 3600000);\\n//\\n//     // Check if the show overlaps with the current view window\\n//     const isVisible = (startTime < viewWindowEnd && endTime > viewWindowStart);\\n//\\n//     return {\\n//       ...show,\\n//       startTime,\\n//       endTime, // optional, for debugging or further calculations\\n//       isVisible // This can be used to conditionally render shows\\n//     };\\n//   }).filter(show => show.isVisible); // Optionally filter out shows not visible in the current window\\n// });\\n\\n// const visibleShows = computed(() => {\\n//   // Filter or adjust shows based on the current 'baseTime'\\n//   return mockShows.map(show => ({\\n//     ...show,\\n//     startTime: new Date(show.startTime.getTime()) // ensure reactive updates\\n//   }));\\n// });\\n\\n// const numberOfColumns = scheduleStore.numberOfColumns;\\n\\n// const width = ref(window.innerWidth);\\n\\nonMounted(async() => {\\n// Register the resize event listener to update the width\\n  window.addEventListener('resize', scheduleStore.updateWidth);\\n  // const response = await axios.get('@/Json/mockShows');\\n  // shows.value = response.data.mockShows.map(show => ({\\n  //   ...show,\\n  //   startTime: new Date(baseTime.value.toDateString() + ' ' + show.startTime)\\n  // }));\\n});\\n\\nonUnmounted(() => {\\n  window.removeEventListener('resize', scheduleStore.updateWidth);\\n});\\n\\n// Assuming the current hour is 0, which represents the start of our viewing grid\\n// const baseTime = new Date();\\n// baseTime.setMinutes(0, 0, 0); // Normalize to the full hour for consistency\\n\\n// const mockShows = [\\n//   { name: 'Early Morning Show', span: 2, startTime: new Date(baseTime.getTime() - 30*60000) }, // Started 30 minutes ago\\n//   { name: 'Morning Show', span: 4, startTime: baseTime }, // Starts now\\n//   { name: 'Late Morning Show', span: 3, startTime: new Date(baseTime.getTime() + 1*3600000) }, // Starts in 1 hour\\n//   { name: 'Noon News', span: 2, startTime: new Date(baseTime.getTime() + 90*60000) }, // Starts in 1.5 hours\\n//   { name: 'Afternoon Talk', span: 6, startTime: new Date(baseTime.getTime() + 2*3600000) }, // Starts in 2 hours\\n//   { name: 'Evening Special', span: 1, startTime: new Date(baseTime.getTime() - 90*60000) }, // Started 1.5 hours ago\\n//   { name: 'Late Show', span: 3, startTime: new Date(baseTime.getTime() + 2*3600000) }, // Starts in 2 hours\\n//   { name: 'Night Owl Movie', span: 2, startTime: new Date(baseTime.getTime() + 3*3600000) } // Starts in 3 hours\\n// ];\\n</script>\\n\\n<style scoped>\\n.grid {\\n  display: grid;\\n  grid-template-columns: repeat(8, minmax(0, 1fr));\\n  grid-auto-rows: minmax(100px, auto);\\n  gap: 4px;\\n}\\n\\n@media (max-width: 640px) {\\n  .grid {\\n    grid-template-columns: repeat(4, minmax(0, 1fr));\\n  }\\n}\\n@media (min-width: 641px) and (max-width: 768px) {\\n  .grid {\\n    grid-template-columns: repeat(6, minmax(0, 1fr));\\n  }\\n}\\n@media (min-width: 769px) {\\n  .grid {\\n    grid-template-columns: repeat(8, minmax(0, 1fr));\\n  }\\n}\\n</style>\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".bg-gradient-show[data-v-01fa62c3]{background:linear-gradient(90deg,#1f4037,#99f2c8)}.bg-gradient-show-hover[data-v-01fa62c3]:hover{background:linear-gradient(90deg,#66d3fa,#6e45e2)}.bg-gradient-new-release[data-v-01fa62c3]{background:linear-gradient(90deg,#654ea3,#eaafc8)}.bg-gradient-new-release-hover[data-v-01fa62c3]:hover{background:linear-gradient(90deg,#c2e59c,#64b3f4)}.column-width[data-v-01fa62c3]{@apply w-16}.schedule-item[data-v-01fa62c3]{align-items:center;background:#f0f0f0;color:#000;display:flex;flex-direction:column;gap:10px;padding:10px}.time-slot[data-v-01fa62c3]{border-bottom:1px solid #fff;grid-row:1;padding:10px 0;text-align:center}.time-cell[data-v-01fa62c3]{border:1px solid #fff}.content[data-v-01fa62c3]{background:#f0f0f0;border:1px solid #ddd;padding:8px}.placeholder[data-v-01fa62c3]{background:#ccc;height:60px;width:100%}.schedule-grid[data-v-01fa62c3]{display:grid;grid-template-columns:repeat(8,1fr)}.content-row[data-v-01fa62c3],.header-row[data-v-01fa62c3],.status-row[data-v-01fa62c3]{display:contents;width:100%}.schedule-cell[data-v-01fa62c3]{background:#333;color:#fff;padding:8px;text-align:center}.item-content[data-v-01fa62c3]{background:linear-gradient(90deg,#444444e6,#444444b3);padding:8px}.item-content[data-v-01fa62c3]:hover{background:linear-gradient(90deg,#06beb6,#48b1bf)}.content-image[data-v-01fa62c3]{height:auto;object-fit:cover;width:100%}.status-row[data-v-01fa62c3]{background-color:#000000b3;color:#fff;font-size:1rem;padding:10px 0;text-align:center;width:100%}.status-cell[data-v-01fa62c3]{align-items:center;color:#fff;display:flex;font-weight:700;height:100%;justify-content:center;opacity:.8;padding:8px;transition:background-color .3s ease;width:100%}.status-cell span[data-v-01fa62c3]{background-color:#000;border-radius:4px;display:block;padding:4px 8px}.status-cell[data-v-01fa62c3]:empty:after{background:none;content:\\\"\\\";display:block;height:100%;width:100%}.now-playing[data-v-01fa62c3]{animation:pulseAnimation-01fa62c3 2s infinite;background-color:#4caf50}.coming-up-next[data-v-01fa62c3]{background-color:#ff9800}@keyframes pulseAnimation-01fa62c3{0%{opacity:.75}50%{opacity:1}to{opacity:.75}}@media (min-width:1280px){.xl\\\\:hidden[data-v-01fa62c3]{display:none}}@media (min-width:1024px){.lg\\\\:hidden[data-v-01fa62c3]{display:none}}\", \"\",{\"version\":3,\"sources\":[\"webpack://./resources/js/Pages/Schedule/Index.vue\"],\"names\":[],\"mappings\":\"AA0lBA,mCACE,iDACF,CAEA,+CACE,iDACF,CAEA,0CACE,iDACF,CAEA,sDACE,iDACF,CAGA,+BACE,WACF,CAGA,gCAOE,kBAAmB,CANnB,kBAAmB,CACnB,UAAW,CAEX,YAAa,CACb,qBAAsB,CACtB,QAAS,CAHT,YAKF,CAEA,4BAGE,4BAA6B,CAC7B,UAAW,CAFX,cAAe,CADf,iBAIF,CAEA,4BACE,qBACF,CAEA,0BACE,kBAAmB,CAEnB,qBAAsB,CADtB,WAEF,CAEA,8BACE,eAAgB,CAEhB,WAAY,CADZ,UAEF,CAGA,gCACE,YAAa,CACb,mCAEF,CAEA,wFACE,gBAAiB,CACjB,UACF,CAEA,gCACE,eAAgB,CAChB,UAAW,CAEX,WAAY,CADZ,iBAEF,CAEA,+BAEE,qDAAmF,CADnF,WAEF,CAEA,qCACE,iDAEF,CAEA,gCAEE,WAAY,CACZ,gBAAiB,CAFjB,UAGF,CAEA,6BAME,0BAAiC,CAFjC,UAAY,CADZ,cAAe,CAEf,cAAe,CAHf,iBAAkB,CADlB,UAMF,CAEA,8BAGE,kBAAmB,CAEnB,UAAY,CAJZ,YAAa,CAOb,eAAiB,CADjB,WAAW,CALX,sBAAuB,CAOvB,UAAY,CALZ,WAAY,CAMZ,oCAAsC,CAJtC,UAKF,CAEA,mCAIE,qBAAuB,CADvB,iBAAkB,CAFlB,aAAc,CACd,eAGF,CAGA,0CAKE,eAAgB,CAJhB,UAAW,CACX,aAAc,CAEd,WAAY,CADZ,UAGF,CAEA,8BAEE,6CAAqC,CADrC,wBAEF,CAEA,iCACE,wBACF,CAIA,mCACE,GAAK,WAAe,CACpB,IAAM,SAAY,CAClB,GAAO,WAAe,CACxB,CAGA,0BAEE,6BACE,YACF,CACF,CAEA,0BAEE,6BACE,YACF,CACF\",\"sourcesContent\":[\"<script>\\n\\n// DELETE THIS SCRIPT TAG\\n// This is only for notes about building this page.\\n\\n// The schedule page will allow free users to look back 72 hours and look ahead 72 hours.\\n// On a mobile device it's easy enough to create a forever scroll for looking forward.\\n// The easter egg will be scrolling UP to look back at the past 72 hours.\\n// Free users can watch any of the content in the past 72 hours for free.\\n// Users are given credits each month to watch premium notTV content.\\n// They may purchase more credits, or subscribe for unlimited access.\\n// They may also use credits to purchase licenses to content from creators.\\n// Credits may also be spent in the shop.\\n\\n</script>\\n\\n<template>\\n  <Head title=\\\"Schedule\\\"/>\\n\\n  <div class=\\\"place-self-center flex flex-col w-full overscroll-x-none pb-64\\\">\\n    <div id=\\\"topDiv\\\" class=\\\"flex justify-end px-5\\\">\\n      <div class=\\\"relative w-32 h-32 mt-8 -mb-8 mr-8\\\">\\n        <div class=\\\"absolute top-3 left-0 w-full h-full flex justify-center items-center z-20\\\"><h1 class=\\\"text-4xl font-bold text-white bg-black bg-opacity-80 px-4 py-1 text-center\\\">Broadcast<br />Schedule</h1></div>\\n        <div class=\\\"absolute top-3 left-0 w-full h-full flex justify-center items-center z-10\\\"><img src=\\\"/storage/images/Ping.png\\\"  alt=\\\"notTV Ping\\\"/></div>\\n      </div>\\n\\n    </div>\\n    <Message v-if=\\\"appSettingStore.showFlashMessage\\\" :flash=\\\"$page.props.flash\\\"/>\\n    <!--    <div class=\\\"mx-6\\\">-->\\n    <!--      <div class=\\\"alert alert-info\\\">-->\\n    <!--        <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"none\\\" viewBox=\\\"0 0 24 24\\\" class=\\\"stroke-current shrink-0 w-6 h-6\\\">-->\\n    <!--          <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" stroke-width=\\\"2\\\"-->\\n    <!--                d=\\\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\\\"></path>-->\\n    <!--        </svg>-->\\n    <!--        <span></span>-->\\n    <!--      </div>-->\\n    <!--    </div>-->\\n    <!--    <ul class=\\\"w-64 ml-12 my-8\\\">-->\\n    <!--      <li class=\\\"p-2 bg-green-800\\\">Scheduled Shows</li>-->\\n    <!--      <li class=\\\"p-2 bg-purple-800\\\">New Releases</li>-->\\n    <!--      <li class=\\\"p-2 bg-blue-800\\\">Live Events</li>-->\\n    <!--      <li class=\\\"p-2 bg-yellow-800\\\">News</li>-->\\n    <!--      &lt;!&ndash;            <li class=\\\"p-2\\\"><font-awesome-icon icon=\\\"fa-leaf\\\" class=\\\"text-red-600 text-3xl pr-2\\\"/> Canadian Content</li>&ndash;&gt;-->\\n    <!--      &lt;!&ndash;            <li class=\\\"p-2\\\"><font-awesome-icon icon=\\\"fa-flag-usa\\\" class=\\\"text-red-600 text-3xl pr-2\\\"/> American Content</li>&ndash;&gt;-->\\n\\n    <!--    </ul>-->\\n\\n    <div class=\\\"ml-5 px-2 mb-2\\\">\\n      <span class=\\\"text-sm uppercase text-purple-500\\\">All times are listed in your timezone.</span>\\n    </div>\\n\\n    <!--    <div class=\\\"schedule-grid\\\">-->\\n    <!--      &lt;!&ndash; Header Row for Times &ndash;&gt;-->\\n    <!--      <div class=\\\"header-row\\\">-->\\n    <!--        <template v-for=\\\"(time, index) in nextFourHours\\\" :key=\\\"`header-${index}`\\\">-->\\n    <!--          <div class=\\\"schedule-cell\\\" :style=\\\"{ 'grid-column': index + 1 }\\\">{{ time.formatted }}</div>-->\\n    <!--        </template>-->\\n    <!--      </div>-->\\n    <div class=\\\"schedule-grid\\\">\\n    <div class=\\\"header-row\\\">\\n      <!-- Time slots header -->\\n      <div class=\\\"time-cell bg-gray-900 px-3 py-2 text-center font-bold\\\" v-for=\\\"interval in nextFourHoursWithHalfHourIntervals\\\" :key=\\\"interval.dateTime\\\">\\n        {{ interval.formatted }}\\n      </div>\\n    </div>\\n    </div>\\n    <ScheduleGrid />\\n\\n\\n    <div class=\\\"schedule-grid\\\">\\n      <div class=\\\"header-row\\\">\\n        <!-- Time slots header -->\\n        <div class=\\\"time-cell bg-gray-900 px-3 py-2 text-center font-bold\\\" v-for=\\\"interval in nextFourHoursWithHalfHourIntervals\\\" :key=\\\"interval.dateTime\\\">\\n          {{ interval.formatted }}\\n        </div>\\n      </div>\\n\\n      <div v-if=\\\"scheduleStore.scheduleIsLoading && scheduleStore.nextFourHoursOfContent.length === 0\\\"\\n            class=\\\"w-full flex justify-center text-center items-center\\\">\\n        <span class=\\\"loading loading-ball loading-xl text-info\\\"></span>\\n      </div>\\n\\n      <div class=\\\"content-row\\\">\\n        <!-- Scheduled shows -->\\n        <template v-for=\\\"item in nextFourHoursOfContent\\\" :key=\\\"item.id\\\">\\n          <div\\n              class=\\\"show-cell flex flex-col w-full h-full\\\"\\n              :class=\\\"getCellClasses(item.type)\\\"\\n              :style=\\\"gridPlacement(item.start_time, item.durationMinutes)\\\"\\n              @click=\\\"handleShowClick(item)\\\"\\n          >\\n            <div  class=\\\"item-content flex flex-col items-center justify-center gap-y-2 flex-grow\\\">\\n              <h3>{{ item.content.show?.name || 'No Show Name' }}</h3>\\n              <!-- Display the image if available -->\\n              <SingleImage v-if=\\\"item.content.show?.image\\\"\\n                           :image=\\\"item.content.show?.image\\\"\\n                           :alt=\\\"item.content.show?.name\\\"\\n                           class=\\\"content-image\\\"/>\\n              <!-- Fallback placeholder if no image -->\\n              <div v-else class=\\\"placeholder\\\"></div>\\n            </div>\\n          </div>\\n        </template>\\n      </div>\\n\\n\\n      <!-- Status Row -->\\n      <div class=\\\"status-row\\\">\\n        <!-- Status for each show -->\\n        <template v-for=\\\"(item, index) in nextFourHoursOfContent\\\" :key=\\\"`status-${item.id}`\\\">\\n          <div\\n              :class=\\\"getStatusCellClasses(index)\\\" :style=\\\"gridPlacement(item.start_time, item.durationMinutes)\\\"\\n          >\\n            <!-- Use the index to determine the status -->\\n            <span v-if=\\\"index === 0\\\">NOW PLAYING</span>\\n            <span v-else-if=\\\"index === 1\\\">COMING UP NEXT</span>\\n\\n          </div>\\n        </template>\\n      </div>\\n\\n      <!--      &lt;!&ndash; Content Row &ndash;&gt;-->\\n      <!--      <div class=\\\"content-row\\\">-->\\n      <!--        <div-->\\n      <!--            v-for=\\\"(item, index) in nextFourHoursOfContent\\\"-->\\n      <!--            :key=\\\"`content-${index}`\\\"-->\\n      <!--            :style=\\\"{ 'grid-column': item.gridColumn }\\\"-->\\n      <!--            class=\\\"item-cell\\\"-->\\n      <!--        >-->\\n      <!--          &lt;!&ndash; Calculate where the item should start and how many columns it should span &ndash;&gt;-->\\n      <!--          <div :style=\\\"{-->\\n      <!--                'grid-column': `${calculateStartColumn(item.start_time, timeSlots)} / span ${calculateSpan(item.start_time, item.durationMinutes, timeSlots)}`,-->\\n      <!--                }\\\">-->\\n      <!--            &lt;!&ndash; Content Here &ndash;&gt;-->\\n      <!--            &lt;!&ndash; Content Display Logic &ndash;&gt;-->\\n      <!--            <div class=\\\"item-content\\\">-->\\n      <!--              <h3>{{ item.content.show?.name || 'No Show Name' }}</h3>-->\\n      <!--              &lt;!&ndash; Display the image if available &ndash;&gt;-->\\n      <!--              <SingleImage v-if=\\\"item.content.show?.image\\\"-->\\n      <!--                           :image=\\\"item.content.show?.image\\\"-->\\n      <!--                           :alt=\\\"item.content.show?.name\\\"-->\\n      <!--                           class=\\\"content-image\\\" />-->\\n      <!--              &lt;!&ndash; Fallback placeholder if no image &ndash;&gt;-->\\n      <!--              <div v-else class=\\\"placeholder\\\"></div>-->\\n      <!--            </div>-->\\n      <!--          </div>-->\\n\\n      <!--        </div>-->\\n      <!--      </div>-->\\n\\n    </div>\\n\\n\\n<!--    <table class=\\\"table-fixed mx-5\\\">-->\\n<!--      <thead class=\\\"bg-gray-900\\\">-->\\n<!--      <tr class=\\\"border-b border-0.5 border-white\\\">-->\\n<!--        &lt;!&ndash; Loop for each hour, including its half-hour mark &ndash;&gt;-->\\n<!--        <template v-for=\\\"(time, index) in nextFourHours\\\" :key=\\\"index\\\">-->\\n<!--          &lt;!&ndash; Hour mark &ndash;&gt;-->\\n<!--          <th :class=\\\"getColumnVisibilityClass(index * 2)\\\">-->\\n<!--            {{ formatTime(new Date(time)) }}-->\\n<!--          </th>-->\\n<!--          &lt;!&ndash; Half-hour mark &ndash;&gt;-->\\n<!--          <th :class=\\\"getColumnVisibilityClass(index * 2 + 1)\\\">-->\\n<!--            {{ formatHalfHour(new Date(time)) }}-->\\n<!--          </th>-->\\n<!--        </template>-->\\n<!--      </tr>-->\\n<!--      </thead>-->\\n<!--      <tbody>-->\\n<!--      &lt;!&ndash; Loop through each content item &ndash;&gt;-->\\n<!--      <tr v-for=\\\"(item, index) in nextFourHoursOfContent\\\" :key=\\\"index\\\" class=\\\"border-b border-0.5 border-white\\\">-->\\n<!--        &lt;!&ndash; Calculate the colspan based on durationMinutes &ndash;&gt;-->\\n<!--        <td :colspan=\\\"calculateColspan(item.durationMinutes)\\\" @click=\\\"openModal(`goToNowPlayingModal`)\\\"-->\\n<!--            :class=\\\"getCellClasses(item.type)\\\">-->\\n<!--          <div class=\\\"flex flex-col\\\">-->\\n<!--            <span class=\\\"text-center pb-2\\\">{{ item.content.show?.name || 'No Show Name' }}</span>-->\\n<!--            &lt;!&ndash; Optionally display an image if available &ndash;&gt;-->\\n<!--            &lt;!&ndash;            <div v-if=\\\"content.show?.image\\\" class=\\\"w-full h-64\\\" :style=\\\"{ backgroundImage: `url(${content.show.image.cdn_endpoint}${content.show.image.folder}/${content.show.image.name})`, backgroundSize: 'cover' }\\\"></div>&ndash;&gt;-->\\n<!--            <SingleImage v-if=\\\"item.type === 'show'\\\" :image=\\\"item?.content?.show?.image\\\"-->\\n<!--                         :alt=\\\"item?.content?.show?.name\\\" :class=\\\"`max-w-full h-auto object-cover`\\\"/>-->\\n<!--            <SingleImage v-else :image=\\\"item?.content?.image\\\" :alt=\\\"item?.content?.name\\\"-->\\n<!--                         :class=\\\"`max-w-xs h-auto object-cover`\\\"/>-->\\n<!--            &lt;!&ndash; Placeholder if no image is available &ndash;&gt;-->\\n<!--            <div v-else class=\\\"w-full h-64 bg-gray-400\\\"></div>-->\\n<!--          </div>-->\\n<!--        </td>-->\\n<!--      </tr>-->\\n<!--      </tbody>-->\\n\\n<!--    </table>-->\\n\\n    <PopUpModal :id=\\\"`goToNowPlayingModal`\\\">\\n      <template v-slot:header>Now Playing</template>\\n      <template v-slot:main><span class=\\\"text-orange-500\\\">This modal is temporary. This will take you to the now playing show or episode page.</span>\\n      </template>\\n    </PopUpModal>\\n    <PopUpModal :id=\\\"`getReminderModal`\\\">\\n      <template v-slot:header>Set Reminder</template>\\n      <template v-slot:main><span class=\\\"text-orange-500\\\">This modal is temporary. Set a reminder when this show starts and/or subscribe to the show to get all notifications when new episodes are released or the show goes live. <br /><br /><span class=\\\"font-semibold text-yellow-600\\\">NOTE: Monthly and Yearly contributors get first access to new features.</span></span>\\n      </template>\\n    </PopUpModal>\\n\\n    <div class=\\\"bg-gray-600 rounded-lg shadow m-10 p-4\\\">\\n\\n\\n      <TodayView/>\\n    </div>\\n\\n\\n  </div>\\n</template>\\n\\n<script setup>\\nimport { usePageSetup } from '@/Utilities/PageSetup'\\nimport { useAppSettingStore } from '@/Stores/AppSettingStore'\\nimport { useScheduleStore } from '@/Stores/ScheduleStore'\\nimport Message from '@/Components/Global/Modals/Messages'\\nimport PopUpModal from '@/Components/Global/Modals/PopUpModal'\\nimport TodayView from '@/Components/Global/Calendar/TodayView.vue'\\nimport { computed, onMounted } from 'vue'\\nimport SingleImage from '@/Components/Global/Multimedia/SingleImage.vue'\\nimport dayjs from 'dayjs'\\nimport { Inertia } from '@inertiajs/inertia'\\nimport ScheduleGrid from '@/Components/Pages/Schedule/ScheduleGrid.vue'\\n\\nusePageSetup('schedule')\\n\\nconst appSettingStore = useAppSettingStore()\\nconst scheduleStore = useScheduleStore()\\n\\nlet props = defineProps({\\n  can: Object,\\n})\\n\\n// Computed property to ensure reactivity\\nconst nextFourHours = computed(() => scheduleStore.nextFourHoursWithHalfHourIntervals)\\nconst nextFourHoursOfContent = computed(() => scheduleStore.nextFourHoursOfContent)\\nconst nextFourHoursWithHalfHourIntervals = computed(() => scheduleStore.nextFourHoursWithHalfHourIntervals)\\nconst timeIntervals = computed(() => scheduleStore.nextFourHoursWithHalfHourIntervals)\\nconst shows = computed(() => scheduleStore.nextFourHoursOfContent)\\n\\n// Determine the \\\"Now Playing\\\" and \\\"Coming Up Next\\\" statuses\\nconst now = dayjs();\\nlet nowPlayingIndex = -1;\\nlet comingUpNextIndex = -1;\\n//\\n// // Ensure shows.value is defined and is an array before attempting to iterate over it\\n// if (Array.isArray(shows.value)) {\\n//   shows.value.forEach((show, index) => {\\n//     const showStart = dayjs(show.start_time);\\n//     const showEnd = showStart.add(show.durationMinutes, 'minutes');\\n//     if (now.isSameOrBefore(showEnd) && now.isAfter(showStart)) {\\n//       nowPlayingIndex = index; // This show is now playing\\n//     }\\n//     // Assuming shows are sorted by start time\\n//     if (nowPlayingIndex !== -1 && index === nowPlayingIndex + 1) {\\n//       comingUpNextIndex = index; // The next show in the list\\n//     }\\n//   });\\n// }\\n\\n// Provide these indexes for template usage\\n// const isNowPlaying = (index) => index === nowPlayingIndex;\\nconst isComingUpNext = (index) => index === comingUpNextIndex;\\n\\nconst gridPlacement = (startTime, durationMinutes) => {\\n  // Convert startTime to a comparable format if necessary\\n  const startDateTime = new Date(startTime)\\n  const timeSlots = nextFourHoursWithHalfHourIntervals.value.map(interval => new Date(interval.dateTimeString))\\n\\n  // Find the index of the time slot that matches the item's start time\\n  let startColumn = timeSlots.findIndex(slot => startDateTime >= slot && startDateTime < new Date(slot.getTime() + 30 * 60000))\\n  if (startColumn === -1) {\\n    console.error('Start time does not match any interval:', startTime)\\n    return {} // Fallback or error handling\\n  }\\n\\n  // Adjust startColumn for 1-based indexing in CSS Grid\\n  startColumn += 1\\n\\n  // Calculate span based on duration\\n  const span = Math.ceil(durationMinutes / 30)\\n\\n  // Return CSS style object for grid placement\\n  return {\\n    'gridColumn': `${startColumn} / span ${span}`,\\n  }\\n}\\n\\n// Determines the classes for a status cell\\nconst getStatusCellClasses = (index) => {\\n  const classes = ['status-cell'];\\n  if (index === 0) classes.push('now-playing');\\n  else if (index === 1) classes.push('coming-up-next');\\n  else classes.push('status-cell-empty'); // For cells without specific content\\n  return classes;\\n};\\n\\n// Checks if a given show is currently playing\\nfunction isNowPlaying(showStartTime, durationMinutes) {\\n  const now = dayjs()\\n  const startTime = dayjs(showStartTime)\\n  const endTime = startTime.add(durationMinutes, 'minute')\\n  console.log('ShowStartTime Time: ' + showStartTime)\\n  console.log('Duration Minutes: ' + durationMinutes)\\n  console.log('Now: ' + now)\\n  console.log('Start Time: ' + startTime)\\n  console.log('End Time: ' + endTime)\\n  return now.isAfter(startTime) && now.isBefore(endTime)\\n}\\n\\n\\n// const isComingUpNext = (shows) => {\\n//   const now = dayjs();\\n//   let nowPlayingIndex = -1;\\n//\\n//   // First, find the index of the show that's currently playing, if any\\n//   shows.value.forEach((show, index) => {\\n//     const showStart = dayjs(show.start_time);\\n//     const showEnd = showStart.add(show.durationMinutes, 'minute');\\n//     if (now.isAfter(showStart) && now.isBefore(showEnd)) {\\n//       nowPlayingIndex = index;\\n//     }\\n//   });\\n//\\n//   // The show coming up next would be the first show that starts after the current time\\n//   // and is not the currently playing show\\n//   for (let i = nowPlayingIndex + 1; i < shows.length; i++) {\\n//     const nextShowStart = dayjs(shows[i].start_time);\\n//     if (now.isBefore(nextShowStart)) {\\n//       return i; // Return the index of the coming up next show\\n//     }\\n//   }\\n//\\n//   return -1; // Return -1 if there's no show coming up next\\n// };\\n\\nconst nextShowIndex = isComingUpNext(shows);\\nconsole.log(\\\"Coming up next show index:\\\", nextShowIndex);\\n\\n\\n// const nextFourHoursOfContent = computed(() => {\\n//   return scheduleStore.nextFourHoursOfContent.map(item => {\\n//     const { startColumn, span } = calculateGridPlacement(item.start_time, item.durationMinutes, nextFourHours.value);\\n//     // Adjust startColumn for CSS Grid (1-indexed)\\n//     const gridColumnStart = startColumn + 1;\\n//     item.gridColumn = `${gridColumnStart} / span ${span}`;\\n//     return item;\\n//   });\\n// });\\n\\n// console.log(nextFourHoursOfContent.value);\\nconst timeSlots = computed(() => {\\n  // Assuming nextFourHoursWithHalfHourIntervals is a reactive source\\n  return nextFourHoursOfContent.value.map(slot => new Date(slot))\\n})\\n//\\n// console.log(timeSlots.value);\\n\\nfunction calculateStartColumn(startTime, timeSlots) {\\n  // Convert startTime to a Date object for comparison\\n  const startDateTime = new Date(startTime)\\n  // Find the first time slot that matches or exceeds the startDateTime\\n  const columnIndex = timeSlots.findIndex(timeSlot => {\\n    const timeSlotDate = new Date(timeSlot)\\n    return startDateTime.getTime() <= timeSlotDate.getTime()\\n  })\\n  // Return the column index + 1 (CSS grid lines start at 1, not 0)\\n  return columnIndex + 1\\n}\\n\\nfunction calculateSpan(startTime, durationMinutes, timeSlots) {\\n  const startDateTime = new Date(startTime)\\n  const endDateTime = new Date(startDateTime.getTime() + durationMinutes * 60000) // Convert duration to milliseconds and add\\n\\n  let startIndex = -1\\n  let endIndex = -1\\n\\n  // Loop through timeSlots to find start and end indexes\\n  for (let i = 0; i < timeSlots.length; i++) {\\n    const slot = new Date(timeSlots[i])\\n    if (startIndex === -1 && startDateTime <= slot) {\\n      startIndex = i\\n    }\\n    if (endDateTime <= slot) {\\n      endIndex = i\\n      break\\n    }\\n  }\\n\\n  // If the end index was not found, it means the event lasts beyond the last time slot\\n  if (endIndex === -1) {\\n    endIndex = timeSlots.length\\n  }\\n\\n  // The span is the difference between the end and start indexes\\n  return endIndex - startIndex\\n}\\n\\nconst timeStringToMinutes = (timeStr) => {\\n  const [hour, minute] = timeStr.match(/\\\\d+/g)\\n  return parseInt(hour) * 60 + parseInt(minute)\\n}\\n\\n// const calculateGridPlacement = (showStartTime, showDuration, timeIntervals) => {\\n//   // Convert the show start time and intervals to minutes for comparison\\n//   const showStartMinutes = timeStringToMinutes(showStartTime);\\n//   const intervalStartMinutes = timeIntervals.map(interval => timeStringToMinutes(interval));\\n//\\n//   // Find the starting column by finding the closest interval start time\\n//   let startColumn = intervalStartMinutes.findIndex(time => time >= showStartMinutes);\\n//   startColumn = startColumn === -1 ? timeIntervals.length - 1 : startColumn; // Fallback to the last column if not found\\n//\\n//   // Calculate span based on duration (rounded up to cover partial intervals)\\n//   const span = Math.ceil(showDuration / 30);\\n//\\n//   return { startColumn, span };\\n// };\\n\\n// Sample usage\\n// const timeIntervals = [\\\"05:00 PM\\\", \\\"05:30 PM\\\", \\\"06:00 PM\\\", \\\"06:30 PM\\\", \\\"07:00 PM\\\", \\\"07:30 PM\\\", \\\"08:00 PM\\\", \\\"08:30 PM\\\"];\\n// const showStartTime = \\\"17:00\\\"; // \\\"05:00 PM\\\"\\n// const showDuration = 60; // 60 minutes\\n\\n// const { startColumn, span } = calculateGridPlacement(showStartTime, showDuration, timeIntervals);\\n\\n// shows.value.forEach(show => {\\n//   const { startColumn, span } = calculateGridPlacement(show.start_time, show.durationMinutes, timeIntervals.value);\\n//   // Apply the calculated start column and span to your grid layout logic\\n// });\\n//\\n// function calculateGridPlacement(showStartTime, showDuration, timeIntervals) {\\n//   // Convert showStartTime to the user's timezone and format for comparison\\n//   const showStartInUserTZ = userStore.convertUtcToUserTimezone(showStartTime);\\n//\\n//   // Find the index of the interval that matches the show's start time\\n//   const startColumn = timeIntervals.findIndex(interval => showStartInUserTZ === interval.dateTimeString);\\n//\\n//   // Calculate how many 30-minute intervals the show spans\\n//   const intervals = Math.ceil(showDuration / 30);\\n//\\n//   if (startColumn === -1) {\\n//     console.error('Start time does not match any interval:', showStartInUserTZ);\\n//     // Handle the error case appropriately\\n//     return { startColumn: 1, span: intervals }; // Default or error handling\\n//   }\\n//\\n//   const span = startColumn + intervals > timeIntervals.length ? timeIntervals.length - startColumn : intervals;\\n//\\n//   return { startColumn: startColumn + 1, span }; // +1 for CSS grid's 1-based indexing\\n// }\\n\\n\\n// This function assumes that `showStartTime` is already in the same format as your time intervals.\\n// If not, you may need to implement a conversion function to align the time formats.\\n\\nfunction convertTo24HourFormat(time) {\\n  // Assume input is \\\"HH:MM PM/AM\\\" and convert to 24-hour format \\\"HH:MM\\\"\\n  // This is a placeholder for actual conversion logic\\n  return time\\n}\\n\\n\\n// function calculateGridColumn(startTime, durationMinutes, timeSlots) {\\n//   // Find the index of the slot that matches the item's start time\\n//   const startSlotIndex = timeSlots.value.findIndex(timeSlot =>\\n//       new Date(startTime) >= new Date(timeSlot) &&\\n//       new Date(startTime) < new Date(new Date(timeSlot).getTime() + 30 * 60000)\\n//   ) + 1; // Grid lines start at 1\\n// }\\n//   function calculateSpan(startTime, durationMinutes) {\\n//     if (!timeSlots.value || timeSlots.value.length === 0) {\\n//       console.error('timeSlots is not defined or empty');\\n//       return 0; // or some fallback value\\n//     }\\n//\\n//     // Now safe to use timeSlots.value.findIndex\\n//     const startIndex = timeSlots.value.findIndex(/* your logic here */);\\n//     // Further logic...\\n//   }\\n\\n\\n// Example processing of schedule into grid items\\n// const processedSchedule = computed(() => {\\n//   return shows.map(show => {\\n//     const startCol = calculateStartColumn(show.startTime);\\n//     const span = calculateSpan(show.duration, show.startTime);\\n//\\n//     return {\\n//       ...show,\\n//       startCol,\\n//       span,\\n//     };\\n//   }).sort((a, b) => a.priority - b.priority); // Ensure sorting by priority\\n// });\\n\\n// const calculateStartColumn = (startTime) => {\\n//   const showStart = new Date(startTime);\\n//   const gridStart = new Date(nextFourHours.value[0]);\\n//\\n//   // Calculate start column based on half-hour increments from gridStart\\n//   const diffHours = (showStart - gridStart) / (1000 * 60 * 60);\\n//   return Math.ceil(diffHours * 2) + 1; // +1 because CSS Grid lines start at 1\\n// };\\n//\\n// const calculateSpan = (durationMinutes) => {\\n//   return Math.ceil(durationMinutes / 30); // Span based on 30-minute intervals\\n// };\\n\\n// const calculateStartColumn = (startTime) => {\\n//   const showStart = new Date(startTime);\\n//   const gridStart = nextFourHours[0];\\n//\\n//   // Find the index of the time slot that matches or immediately precedes the show's start time\\n//   const columnIndex = nextFourHours.findIndex(time => showStart < time) - 1;\\n//   console.log('BAHH ' + columnIndex);\\n//\\n//   return columnIndex >= 0 ? columnIndex + 1 : 1; // Ensure it falls within the grid columns\\n// };\\n//\\n// const calculateSpan = (startTime, durationMinutes) => {\\n//   const startColumn = calculateStartColumn(startTime);\\n//   const span = Math.ceil(durationMinutes / 30); // Determine span based on duration\\n//\\n//   // Adjust the span to ensure it doesn't extend beyond the grid\\n//   return startColumn + span - 1 <= 8 ? span : 8 - startColumn + 1;\\n// };\\n\\nconst getItemStyle = (item) => {\\n  const startColumn = calculateStartColumn(item.start_time)\\n  const span = calculateSpan(item.durationMinutes)\\n\\n  return {\\n    gridColumnStart: startColumn,\\n    gridColumnEnd: `span ${span}`,\\n    gridRowStart: 2, // All items start in the second row\\n  }\\n}\\n\\n// Method to format the full hour\\nfunction formatTime(date) {\\n  return date.toLocaleTimeString('en-US', {hour: 'numeric', minute: '2-digit', hour12: true})\\n}\\n\\n// Method to add 30 minutes to the given date and format it\\nfunction formatHalfHour(date) {\\n  const halfHourLater = new Date(date.getTime() + 30 * 60 * 1000)\\n  return halfHourLater.toLocaleTimeString('en-US', {hour: 'numeric', minute: '2-digit', hour12: true})\\n}\\n\\n// Determine visibility classes based on column index and if it's a half-hour\\nfunction getColumnVisibilityClass(index, isHalfHour) {\\n  // Adjust index for half-hour columns\\n  const adjustedIndex = isHalfHour ? index * 2 + 1 : index * 2\\n\\n  if (adjustedIndex >= 6) { // Last two columns visible only on 2xl screens\\n    return 'hidden 2xl:table-cell'\\n  } else if (adjustedIndex >= 3) { // Columns 4, 5, 6 visible on xl screens and above\\n    return 'hidden xl:table-cell'\\n  } else { // Columns 1, 2, 3 are always visible\\n    return ''\\n  }\\n}\\n\\nfunction calculateColspan(durationMinutes) {\\n  // Assuming each hour (and its half-hour mark) is represented by two columns\\n  // and that each content item's duration in minutes can determine its span\\n  return Math.ceil(durationMinutes / 30)\\n}\\n\\nfunction getCellClasses(type) {\\n  const baseClass = 'column-width text-sm 2xl:text-md border border-0.5 border-green-300 hover:border-blue-500 cursor-pointer'\\n  switch (type) {\\n    case 'show':\\n      return `${baseClass} bg-gradient-show hover:bg-gradient-show-hover`\\n    case 'new_release':\\n      return `${baseClass} bg-gradient-new-release hover:bg-gradient-new-release-hover`\\n      // Add more cases as needed\\n    default:\\n      return baseClass\\n  }\\n}\\n\\nfunction handleShowClick(item) {\\n  if (isNowPlaying(item.start_time, item.durationMinutes)) {\\n    // Redirect to the show's page if it's currently playing\\n    Inertia.visit(`/shows/${item.content.show.slug}/`)\\n  } else {\\n    // Open the reminder modal for shows that are not currently playing\\n    openModal('getReminderModal')\\n  }\\n}\\n\\nfunction openModal(modalName) {\\n  document.getElementById(modalName).showModal()\\n}\\n\\n</script>\\n\\n<style scoped>\\n\\n.bg-gradient-show {\\n  background: linear-gradient(to right, #1f4037, #99f2c8); /* Example green gradient */\\n}\\n\\n.bg-gradient-show-hover:hover {\\n  background: linear-gradient(to right, #66D3FA, #6E45E2); /* Example green gradient on hover */\\n}\\n\\n.bg-gradient-new-release {\\n  background: linear-gradient(to right, #654ea3, #eaafc8); /* Example purple gradient */\\n}\\n\\n.bg-gradient-new-release-hover:hover {\\n  background: linear-gradient(to right, #c2e59c, #64b3f4); /* Example purple gradient on hover */\\n}\\n\\n\\n.column-width {\\n  @apply w-16\\n}\\n\\n\\n.schedule-item {\\n  background: #f0f0f0;\\n  color: #000;\\n  padding: 10px;\\n  display: flex;\\n  flex-direction: column;\\n  gap: 10px;\\n  align-items: center;\\n}\\n\\n.time-slot {\\n  text-align: center;\\n  padding: 10px 0;\\n  border-bottom: 1px solid #fff;\\n  grid-row: 1; /* Ensures all time slots are in the first row */\\n}\\n\\n.time-cell {\\n  border: 1px solid #fff;\\n}\\n\\n.content {\\n  background: #f0f0f0;\\n  padding: 8px;\\n  border: 1px solid #ddd;\\n}\\n\\n.placeholder {\\n  background: #ccc;\\n  width: 100%;\\n  height: 60px;\\n}\\n\\n\\n.schedule-grid {\\n  display: grid;\\n  grid-template-columns: repeat(8, 1fr); /* Adjust based on your actual time slots */\\n\\n}\\n\\n.header-row, .content-row, .status-row {\\n  display: contents; /* Make these divs act as part of the grid layout without creating extra rows */\\n  width: 100%; /* Ensure they span the full width of the grid */\\n}\\n\\n.schedule-cell {\\n  background: #333;\\n  color: #fff;\\n  text-align: center;\\n  padding: 8px;\\n}\\n\\n.item-content {\\n  padding: 8px;\\n  background: linear-gradient(to right, rgba(68, 68, 68, 0.9), rgba(68, 68, 68, 0.7));\\n}\\n\\n.item-content:hover {\\n  background: linear-gradient(to right, #06beb6, #48b1bf);\\n  /* Adjust the colors above to match your desired hover effect */\\n}\\n\\n.content-image {\\n  width: 100%;\\n  height: auto;\\n  object-fit: cover;\\n}\\n\\n.status-row {\\n  width: 100%; /* Ensure the row takes the full width of its container */\\n  text-align: center;\\n  font-size: 1rem; /* Adjust as needed */\\n  color: white; /* Adjust as needed */\\n  padding: 10px 0; /* Adjust as needed */\\n  background-color: rgba(0,0,0,0.7); /* Adjust as needed for visibility */\\n}\\n\\n.status-cell {\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  padding: 8px;\\n  color: white;\\n  width: 100%;\\n  height:100%;\\n  font-weight: bold;\\n  opacity: 0.8;\\n  transition: background-color 0.3s ease;\\n}\\n\\n.status-cell span {\\n  display: block;\\n  padding: 4px 8px;\\n  border-radius: 4px;\\n  background-color: black;\\n}\\n\\n/* Optional: If you want the empty cells to have a slight indication they are there */\\n.status-cell:empty::after {\\n  content: \\\"\\\";\\n  display: block;\\n  width: 100%;\\n  height: 100%;\\n  background: none; /* Adjust this to a very subtle color or keep transparent */\\n}\\n\\n.now-playing {\\n  background-color: #4CAF50; /* Green for now playing */\\n  animation: pulseAnimation 2s infinite;\\n}\\n\\n.coming-up-next {\\n  background-color: #FF9800; /* Orange for coming up next */\\n}\\n\\n\\n\\n@keyframes pulseAnimation {\\n  0% { opacity: 0.75; }\\n  50% { opacity: 1; }\\n  100% { opacity: 0.75; }\\n}\\n\\n/* Responsive visibility */\\n@media (min-width: 1280px) {\\n  /* 2xl */\\n  .xl\\\\:hidden {\\n    display: none;\\n  }\\n}\\n\\n@media (min-width: 1024px) {\\n  /* xl */\\n  .lg\\\\:hidden {\\n    display: none;\\n  }\\n}\\n\\n</style>\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","<template>\n  <!-- Today view layout -->\n  <div class=\"today-view container mx-auto px-4 py-8 flex flex-col\">\n    <div id=\"topDivForTodayView\"></div>\n    <button  v-if=\"!scheduleStore.isToday\"\n             @click=\"scheduleStore.setSelectedDayToToday(new Date());\"\n             class=\"py-1 px-2 text-white rounded-lg w-fit\"\n             :class=\"{'bg-blue-300': scheduleStore.isToday, 'bg-green-600 hover:bg-green-700': !scheduleStore.isToday}\">\n      Go To Now</button>\n    <div class=\"flex justify-center text-center mb-4\">\n      <h2 class=\"text-3xl font-bold mb-2\">{{ dateMessage }}</h2>\n    </div>\n    <div class=\"flex justify-between items-center mb-4\">\n      <button\n          @click=\"scheduleStore.changeDay(-1)\"\n          class=\"bg-gray-100 hover:bg-gray-200 text-black p-2 rounded shadow\"\n      >\n        &lt; Previous Day\n      </button>\n      <div class=\"flex flex-col text-center\">\n\n        <h3>{{ userStore.canadianTimezoneDescription }} Time</h3>\n      </div>\n      <button\n          @click=\"scheduleStore.changeDay(1)\"\n          class=\"bg-gray-100 hover:bg-gray-200 text-black p-2 rounded shadow\"\n      >\n        Next Day &gt;\n      </button>\n    </div>\n    <button\n        @click=\"scheduleStore.shiftHours(-6)\"\n        class=\"mb-4 bg-gray-100 hover:bg-gray-200 text-black py-2 rounded shadow\"\n    >\n      &#8593; Back 6 Hours\n    </button>\n\n    <div class=\"flex flex-col flex-grow\">\n      <div v-for=\"(hour, index) in scheduleStore.nextSixHours\" :key=\"hour.toString()\">\n\n        <!-- Time Segment Label -->\n        <div\n            v-if=\"index === 0 || getTimeSegment(hour).segment !== getTimeSegment(scheduleStore.nextSixHours[index - 1]).segment\"\n            :class=\"getTimeSegment(hour).color\"\n            class=\"mb-4 p-2 text-black text-center font-bold text-2xl rounded shadow\">\n          {{ getTimeSegment(hour).segment }}\n        </div>\n\n        <!-- Content for the current hour -->\n        <template v-for=\"item in upcomingContent\">\n          <div v-if=\"isWithinCurrentHour(item, hour)\" :key=\"item.id\"\n               class=\"hover:bg-blue-400 hover:cursor-pointer\"\n               @click.prevent=\"goToContentPage(item)\"\n               :class=\"['p-4 rounded-lg shadow', getTimeSegment(new Date(item.start_time)).color, 'mb-4']\">\n            <div class=\"flex flex-row flex-wrap gap-x-4 gap-y-2\">\n              <div class=\"flex flex-col w-28 max-w-28 text-gray-500\">\n                <div class=\"font-bold text-black break-words\">{{\n                    formatHour(new Date(item.start_time))\n                  }}&nbsp;{{ userStore.timezoneAbbreviation }}\n                </div>\n                <div class=\"break-words\">{{ formatDuration(item.durationMinutes) }}</div>\n              </div>\n              <div class=\"flex flex-col\">\n                <button @click.prevent=\"goToContentPage(item)\">\n                  <SingleImage v-if=\"item.type === 'show'\" :image=\"item?.content?.show?.image\"\n                               :alt=\"item?.content?.show?.name\" class=\"w-20 h-20\"/>\n                  <SingleImage v-else :image=\"item?.content?.image\" :alt=\"item?.content?.name\" class=\"w-20 h-20\"/>\n                </button>\n              </div>\n              <div class=\"flex flex-col items-start h-full\">\n                <div class=\"text-gray-800 text-2xl tracking-wider\">\n                  <button @click.prevent=\"goToContentPage(item)\" class=\"text-left\">\n                    <span v-if=\"item.type === 'show'\">{{ item?.content?.show?.name }}</span>\n                    <span v-if=\"item.type === 'movie'\">{{ item?.content?.name }}</span>\n                  </button>\n                </div>\n                <div class=\"mt-2 text-gray-700 flex flex-wrap gap-1\">\n                    <div class=\"w-fit text-xs font-semibold uppercase tracking-wide bg-gray-900 px-2 py-1 rounded\">\n                      <span v-if=\"item.type === 'show'\" class=\"text-green-500\">show</span>\n                      <span v-if=\"item.type === 'movie'\"\n                            class=\"text-pink-500 bg-gray-900 px-2 py-1\">movie</span>\n                    </div>\n                    <div v-if=\"item?.content?.show?.category?.name || item?.content?.category?.name\"\n                         class=\"w-fit text-xs font-semibold uppercase tracking-wider text-yellow-600 bg-gray-900 px-2 py-1 rounded\">\n                    <span v-if=\"item.type === 'show' && item?.content?.show?.category?.name\"\n                          class=\"\">{{ item?.content?.show?.category?.name }}</span>\n                      <span v-if=\"item.type === 'movie' && item?.content?.subCategory?.name\"\n                            class=\"\">{{ item?.content?.category?.name }}</span>\n                    </div>\n                    <div v-if=\"item?.content?.show?.subCategory?.name || item?.content?.subCategory?.name\"\n                         class=\"w-fit text-xs font-semibold tracking-wide text-yellow-500 bg-gray-900 px-2 py-1 rounded\">\n                      <span v-if=\"item.type === 'show'\" class=\"\">{{ item?.content?.show?.subCategory?.name }}</span>\n                      <span v-if=\"item.type === 'movie'\" class=\"\">{{ item?.content?.subCategory?.name }}</span>\n                    </div>\n                  </div>\n              </div>\n            </div>\n          </div>\n        </template>\n\n\n        <!-- Fallback if no content is found for the current hour -->\n        <div v-if=\"!isContentAvailableForHour(hour)\" :class=\"getTimeSegment(hour).color\"\n             class=\"mb-4 p-4 rounded-lg shadow text-gray-500\">\n          <div class=\"font-semibold\">{{ formatHour(hour) }}&nbsp;{{ userStore.timezoneAbbreviation }}</div>\n          <div>Nothing scheduled.</div>\n        </div>\n\n        <!-- Dynamically insert the dateMessage for the next day if the hour is 11 PM -->\n        <div v-if=\"scheduleStore.isElevenPM(hour) && scheduleStore.nextSixHours[index + 1]\"\n             class=\"my-4 p-2 bg-blue-800 text-white rounded shadow\">\n          {{ generateDateMessage(addHours(hour, 1)) }}\n        </div>\n      </div>\n    </div>\n\n    <button\n        @click=\"shiftHours(6)\"\n        class=\"bg-gray-100 hover:bg-gray-200 text-black py-2 rounded shadow\"\n    >\n      &#8595; Forward 6 Hours\n    </button>\n  </div>\n</template>\n\n<script setup>\n// Today view logic\n// import { ref, computed } from 'vue'\nimport { useScheduleStore } from '@/Stores/ScheduleStore'\nimport { useUserStore } from '@/Stores/UserStore'\nimport {\n  format,\n  startOfHour,\n  addHours,\n  isToday,\n  isYesterday,\n  isTomorrow,\n  startOfDay,\n  isWithinInterval,\n  isSameDay,\n} from 'date-fns'\nimport { storeToRefs } from 'pinia'\nimport { computed, onMounted, ref, watch, watchEffect } from 'vue'\nimport SingleImage from '@/Components/Global/Multimedia/SingleImage.vue'\nimport { Inertia } from '@inertiajs/inertia'\n\nconst scheduleStore = useScheduleStore()\nconst userStore = useUserStore()\nconst {upcomingContent, dateMessage} = storeToRefs(scheduleStore)\n\nconst selectedDay = ref(scheduleStore.selectedDay)\nconst weeklyContent = computed(() => scheduleStore.weeklyContent)\n\nconst shiftHours = async(hours) => {\n  const topDiv = document.getElementById(\"topDivForTodayView\");\n  topDiv.scrollIntoView({behavior: 'smooth'});\n  await scheduleStore.shiftHours(hours)\n}\n\nwatch(selectedDay, (newValue) => {\n  scheduleStore.setSelectedDay(newValue)\n  // If necessary, trigger other actions when selectedDay changes\n})\n\nfunction isWithinCurrentHour(item, hour) {\n  const startOfCurrentHour = startOfHour(hour)\n  const endOfCurrentHour = addHours(startOfCurrentHour, 1)\n  const contentStartTime = new Date(item.start_time)\n  return contentStartTime >= startOfCurrentHour && contentStartTime < endOfCurrentHour\n}\n\n// Assuming `upcomingContent` is a computed property that already filters\n// content within a 6-hour window from `scheduleStore.viewingWindowStart`\nfunction isContentAvailableForHour(hour) {\n  // Convert the given hour to the start and end of that hour block\n  const startOfCurrentHour = startOfHour(hour)\n  const endOfCurrentHour = addHours(startOfCurrentHour, 1)\n\n  // Check if any item in `upcomingContent` starts within this hour block\n  return upcomingContent.value.some(item => {\n    const contentStartTime = new Date(item.start_time)\n    return contentStartTime >= startOfCurrentHour && contentStartTime < endOfCurrentHour\n  })\n}\n\nfunction formatHour(date) {\n  return format(date, 'h:mm aaaa')\n}\n\nfunction getTimeSegment(hour) {\n  const hourOfDay = hour.getHours()\n  if (hourOfDay >= 4 && hourOfDay < 6) return {segment: 'Early Morning', color: 'bg-gray-200'}\n  if (hourOfDay >= 6 && hourOfDay < 12) return {segment: 'Morning', color: 'bg-yellow-200'}\n  if (hourOfDay >= 12 && hourOfDay < 17) return {segment: 'Afternoon', color: 'bg-green-200'}\n  if (hourOfDay >= 17 && hourOfDay < 20) return {segment: 'Prime Time', color: 'bg-red-200'}\n  if (hourOfDay >= 20 && hourOfDay < 23) return {segment: 'Late Prime Time', color: 'bg-purple-200'}\n  if (hourOfDay >= 23 || hourOfDay < 1) return {segment: 'Late Night', color: 'bg-blue-200'}\n  if (hourOfDay >= 1 && hourOfDay < 4) return {segment: 'Overnight', color: 'bg-indigo-200'}\n  return {segment: '', color: ''} // Default case\n}\n\n// A computed property to determine the starting segment for the displayed hours\nconst startingSegment = computed(() => scheduleStore.nextSixHours.value.length > 0 ? getTimeSegment(scheduleStore.nextSixHours.value[0]) : null)\n\nfunction generateDateMessage(date) {\n  // This method mirrors the logic in the store's getter but accepts any date.\n  const startDay = startOfDay(date)\n  const formattedDate = format(startDay, 'EEEE, MMMM do')\n  if (isToday(startDay)) {\n    return `Today - ${formattedDate}`\n  } else if (isYesterday(startDay)) {\n    return `Yesterday - ${formattedDate}`\n  } else if (isTomorrow(startDay)) {\n    return `Tomorrow - ${formattedDate}`\n  } else {\n    return formattedDate\n  }\n}\n\nconst goToContentPage = (item) => {\n  if (item.type === 'show') {\n    Inertia.visit(`/shows/${item.content.show.slug}`)\n  } else if (item.type === 'movie') {\n    Inertia.visit(`/movies/${item.content.slug}`)\n  }\n}\n\nconst formatDuration = (minutes) => {\n  if (minutes < 60) {\n    return `${minutes} minutes`\n  } else if (minutes === 60) {\n    return `1 hour`\n  } else {\n    const hours = Math.floor(minutes / 60)\n    const remainingMinutes = minutes % 60\n    if (remainingMinutes === 0) {\n      return `${hours} hours`\n    } else {\n      return `${hours} hour${hours > 1 ? 's' : ''} and ${remainingMinutes} minutes`\n    }\n  }\n}\n\n\n// Define a reactive watcher on the timezone\n// This watcher will call preloadWeeklyContent whenever the timezone changes and is not null\nwatch(\n    () => userStore.timezone,\n    async (newTimezone, oldTimezone) => {\n      // Ensure the timezone is set before calling preloadWeeklyContent\n      if (newTimezone) {\n        await scheduleStore.preloadWeeklyContent()\n      }\n    },\n    {immediate: true}, // This option ensures the watcher is triggered immediately on mount\n)\n\n// Optionally, keep the onMounted if there are other initialization tasks\n// onMounted(async () => {\n//   // Check if timezone is already available on mount and preload content if it hasn't been done by the watcher\n//   if (userStore.timezone) {\n//     await scheduleStore.preloadWeeklyContent()\n//   }\n// })\n</script>\n\n<style scoped>\n/* Styles specific to today view */\n</style>","import api from \"!../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../../../node_modules/css-loader/dist/cjs.js??clonedRuleSet-9.use[1]!../../../../../node_modules/vue-loader/dist/stylePostLoader.js!../../../../../node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-9.use[2]!../../../../../node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./TodayView.vue?vue&type=style&index=0&id=6a43bda0&scoped=true&lang=css\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","import script from \"./TodayView.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./TodayView.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./TodayView.vue?vue&type=style&index=0&id=6a43bda0&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-6a43bda0\"]])\n\nexport default __exports__","import script from \"./Messages.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Messages.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n  <div class=\"mx-4 my-4\">\n    <div class=\"alert alert-info mt-4\"\n         v-if=\"props.flash.message\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" class=\"stroke-current shrink-0 w-6 h-6\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n              d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"></path>\n      </svg>\n      <span>{{ props.flash.message }}</span>\n      <button class=\"text-xs ml-12\" @click=\"clearFlashMessage\"> Close</button>\n    </div>\n    <div class=\"alert alert-success mt-4 mx-3\"\n         v-if=\"props.flash.success\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"stroke-current shrink-0 h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n              d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"/>\n      </svg>\n      <span>{{ props.flash.success }}</span>\n      <button class=\"text-xs ml-12\" @click=\"clearFlashMessage\"> Close</button>\n    </div>\n    <div class=\"alert alert-warning mt-4 mx-3\"\n         v-if=\"props.flash.warning\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"stroke-current shrink-0 h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n              d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z\"/>\n      </svg>\n      <span>{{ props.flash.warning }}</span>\n      <button class=\"text-xs ml-12\" @click=\"clearFlashMessage\"> Close</button>\n    </div>\n    <div class=\"alert alert-error mt-4 mx-3\"\n         v-if=\"props.flash.error\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"stroke-current shrink-0 h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n              d=\"M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z\"/>\n      </svg>\n      <span>{{ props.flash.error }}</span>\n      <button class=\"text-xs ml-12\" @click=\"clearFlashMessage\"> Close</button>\n    </div>\n  </div>\n\n</template>\n\n<script setup>\nimport { Inertia } from \"@inertiajs/inertia\"\nimport { computed } from \"vue\"\nimport { useAppSettingStore } from \"@/Stores/AppSettingStore\"\n\nconst appSettingStore = useAppSettingStore()\n\nappSettingStore.showFlashMessage = true\n\nlet props = defineProps({\n  flash: Object,\n\n})\n\nconst messageType = computed(() => ({\n  'text-green-700 bg-green-100 dark:bg-green-200 dark:text-green-800': props.flash.success,\n  'text-blue-700 bg-blue-100 dark:bg-blue-200 dark:text-blue-800': props.flash.message,\n  'text-orange-700 bg-orange-100 dark:bg-orange-200 dark:text-orange-800': props.flash.warning,\n  'text-red-700 bg-red-100 dark:bg-red-200 dark:text-red-800': props.flash.error,\n}))\n\nconst clearFlashMessage = async () => {\n  await Inertia.post(route('flash.clear'));\n  Inertia.reload();\n};\n</script>\n","import script from \"./PopUpModal.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./PopUpModal.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n  <div>\n    <dialog :id=\"id\" class=\"modal\">\n      <div class=\"modal-box text-center my-auto border-2 border-secondary\" data-theme=\"dark\">\n        <h2 class=\"font-bold text-3xl text-secondary\">\n          <slot name=\"header\"></slot>\n        </h2>\n        <p class=\"py-4 text-xl\">\n          <slot name=\"main\"></slot>\n        </p>\n        <div class=\"modal-action justify-center w-full\">\n          <form method=\"dialog\">\n            <!-- if there is a button in form, it will close the modal -->\n            <button @click=\"notificationStore.showPopUpModal = false\" class=\"btn btn-secondary\">Okay</button>\n          </form>\n        </div>\n      </div>\n    </dialog>\n  </div>\n</template>\n<script setup>\nimport { useNotificationStore } from \"@/Stores/NotificationStore\"\n\nconst notificationStore = useNotificationStore()\n\ndefineProps({\n  id: String,\n})\n</script>\n","import script from \"./SpotComponent.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./SpotComponent.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n  <div :class=\"`col-span-${span} ${colorClass} row-span-1`\" class=\"flex flex-col items-center justify-center text-white text-sm p-2 overflow-hidden\">\n    <h3 class=\"font-bold\">{{ show.name }}</h3>\n    <p>{{ displayStartTime }} - {{ displayEndTime }}</p>\n  </div>\n</template>\n\n<script setup>\nimport { computed } from 'vue';\n\nconst props = defineProps({\n  show: {\n    type: Object,\n    required: true\n  },\n  span: {\n    type: Number,\n    required: true\n  }\n});\n\nconst colorClass = computed(() => {\n  switch (props.span) {\n    case 1: return 'bg-green-500';  // 30 minutes\n    case 2: return 'bg-orange-500'; // 60 minutes\n    case 3: return 'bg-blue-500';   // 90 minutes\n    case 4: return 'bg-yellow-500'; // 120 minutes\n    case 5: return 'bg-red-500';    // 150 minutes\n    case 6: return 'bg-purple-500'; // 180 minutes\n    default: return 'bg-gray-400';  // default or undefined duration\n  }\n});\n\nconst displayStartTime = computed(() => props.show.startTime.toLocaleTimeString());\nconst displayEndTime = computed(() => new Date(props.show.startTime.getTime() + props.show.span * 30 * 60000).toLocaleTimeString());\n\n</script>\n","<template>\n  <div>\n    <input type=\"time\" v-model=\"currentHour\" @input=\"updateShows\" class=\"text-black\">\n    <div :class=\"gridClass\">\n      <SpotComponent\n          v-for=\"show in visibleShows\"\n          :key=\"show.id\"\n          :show=\"show\"\n          :span=\"calculateSpan(show)\"\n      />\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { ref, computed, watch, onMounted, onUnmounted, watchEffect } from 'vue'\nimport { useScheduleStore } from '@/Stores/ScheduleStore'\nimport SpotComponent from './SpotComponent.vue';\nimport { mockShows } from '../../../Json/mockShows'; // assuming you export this from a module\n\nconst scheduleStore = useScheduleStore()\n\nconst baseTime = ref(new Date());\nconst currentHour = ref(baseTime.value.toISOString().substring(11, 16));\n// const shows = ref([]);\n\n// Update base time whenever current hour changes\n// const updateShows = () => {\n//   const [hours, minutes] = currentHour.value.split(':');\n//   baseTime.value.setHours(parseInt(hours), parseInt(minutes), 0, 0);\n// };\n\nconst gridClass = computed(() => {\n  // Here you can have logic based on window width or other factors\n  return 'grid grid-cols-8 gap-2 p-4'\n}); // as before\n\nconst updateShows = () => {\n  const [hour, minute] = currentHour.value.split(':');\n  baseTime.value.setHours(parseInt(hour), parseInt(minute), 0, 0);\n  // You might want to force a re-render or re-compute of visible shows here\n};\n\n/**\n * Calculates how many 30-minute columns a show should span within the visible grid based on its start and end times.\n * @param {Object} show - The show object containing start time and duration.\n * @returns {Number} The number of 30-minute columns the show spans within the visible grid.\n */\nconst calculateSpan = (show) => {\n\n  // gridWindowEnd is calculated as 4 hours beyond the baseTime.\n  // This covers the full span of the visible schedule grid from the current base time.\n  const gridWindowEnd = new Date(baseTime.value.getTime() + 4 * 3600000); // 4 hours from baseTime\n\n  // Convert show start time and duration into JavaScript Date objects for easier manipulation.\n  const showStart = new Date(show.startTime);\n  const showEnd = new Date(showStart.getTime() + show.duration * 60000); // Convert duration from minutes to milliseconds\n\n  // Check if the show is outside the visible time window defined by baseTime and gridWindowEnd.\n  if (showEnd <= baseTime || showStart >= gridWindowEnd) {\n    // If the show ends before the grid starts or begins after the grid ends, it is not visible.\n    return 0;\n  }\n\n  // Calculate the actual start and end times of the show that are visible within the grid.\n  const visibleStartTime = showStart < baseTime ? baseTime : showStart;\n  const visibleEndTime = showEnd > gridWindowEnd ? gridWindowEnd : showEnd;\n\n  // Calculate the visible duration of the show in minutes.\n  const visibleDuration = (visibleEndTime - visibleStartTime) / 60000; // Convert milliseconds to minutes\n\n  // Determine how many 30-minute columns this visible duration spans.\n  // Use Math.ceil to ensure that any part of a column used requires a full column allocation.\n  return Math.ceil(visibleDuration / 30);\n};\n\n\nwatch(currentHour, (newHour, oldHour) => {\n  updateShows(newHour);  // Update to use newHour if necessary\n}, { immediate: true });\n\nconst visibleShows = computed(() => {\n  return mockShows.map(show => {\n    const startTime = new Date(baseTime.value.toDateString() + ' ' + show.startTime);\n    const span = Math.min(show.span, 8); // Limit span to grid size\n    return { ...show, startTime, span };\n  });\n});\n\nconst timeFormat = (date) => {\n  return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n};\n\nconst endTime = (show) => {\n  return new Date(show.startTime.getTime() + show.span * 30 * 60000);\n};\n\n// const visibleShows = computed(() => {\n//   return mockShows.map(show => {\n//     // Calculate the adjusted start time based on the base time\n//     const startTime = new Date(baseTime.value.toDateString() + ' ' + show.startTime);\n//     const endTime = new Date(startTime.getTime() + show.span * 30 * 60000); // span in minutes to milliseconds\n//\n//     // Determine if the show should be visible within the current view window\n//     // For example, assuming the view window is 4 hours from the base time\n//     const viewWindowStart = baseTime.value;\n//     const viewWindowEnd = new Date(baseTime.value.getTime() + 4 * 3600000);\n//\n//     // Check if the show overlaps with the current view window\n//     const isVisible = (startTime < viewWindowEnd && endTime > viewWindowStart);\n//\n//     return {\n//       ...show,\n//       startTime,\n//       endTime, // optional, for debugging or further calculations\n//       isVisible // This can be used to conditionally render shows\n//     };\n//   }).filter(show => show.isVisible); // Optionally filter out shows not visible in the current window\n// });\n\n// const visibleShows = computed(() => {\n//   // Filter or adjust shows based on the current 'baseTime'\n//   return mockShows.map(show => ({\n//     ...show,\n//     startTime: new Date(show.startTime.getTime()) // ensure reactive updates\n//   }));\n// });\n\n// const numberOfColumns = scheduleStore.numberOfColumns;\n\n// const width = ref(window.innerWidth);\n\nonMounted(async() => {\n// Register the resize event listener to update the width\n  window.addEventListener('resize', scheduleStore.updateWidth);\n  // const response = await axios.get('@/Json/mockShows');\n  // shows.value = response.data.mockShows.map(show => ({\n  //   ...show,\n  //   startTime: new Date(baseTime.value.toDateString() + ' ' + show.startTime)\n  // }));\n});\n\nonUnmounted(() => {\n  window.removeEventListener('resize', scheduleStore.updateWidth);\n});\n\n// Assuming the current hour is 0, which represents the start of our viewing grid\n// const baseTime = new Date();\n// baseTime.setMinutes(0, 0, 0); // Normalize to the full hour for consistency\n\n// const mockShows = [\n//   { name: 'Early Morning Show', span: 2, startTime: new Date(baseTime.getTime() - 30*60000) }, // Started 30 minutes ago\n//   { name: 'Morning Show', span: 4, startTime: baseTime }, // Starts now\n//   { name: 'Late Morning Show', span: 3, startTime: new Date(baseTime.getTime() + 1*3600000) }, // Starts in 1 hour\n//   { name: 'Noon News', span: 2, startTime: new Date(baseTime.getTime() + 90*60000) }, // Starts in 1.5 hours\n//   { name: 'Afternoon Talk', span: 6, startTime: new Date(baseTime.getTime() + 2*3600000) }, // Starts in 2 hours\n//   { name: 'Evening Special', span: 1, startTime: new Date(baseTime.getTime() - 90*60000) }, // Started 1.5 hours ago\n//   { name: 'Late Show', span: 3, startTime: new Date(baseTime.getTime() + 2*3600000) }, // Starts in 2 hours\n//   { name: 'Night Owl Movie', span: 2, startTime: new Date(baseTime.getTime() + 3*3600000) } // Starts in 3 hours\n// ];\n</script>\n\n<style scoped>\n.grid {\n  display: grid;\n  grid-template-columns: repeat(8, minmax(0, 1fr));\n  grid-auto-rows: minmax(100px, auto);\n  gap: 4px;\n}\n\n@media (max-width: 640px) {\n  .grid {\n    grid-template-columns: repeat(4, minmax(0, 1fr));\n  }\n}\n@media (min-width: 641px) and (max-width: 768px) {\n  .grid {\n    grid-template-columns: repeat(6, minmax(0, 1fr));\n  }\n}\n@media (min-width: 769px) {\n  .grid {\n    grid-template-columns: repeat(8, minmax(0, 1fr));\n  }\n}\n</style>\n","import api from \"!../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../../../node_modules/css-loader/dist/cjs.js??clonedRuleSet-9.use[1]!../../../../../node_modules/vue-loader/dist/stylePostLoader.js!../../../../../node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-9.use[2]!../../../../../node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./ScheduleGrid.vue?vue&type=style&index=0&id=753bb39c&scoped=true&lang=css\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","import script from \"./ScheduleGrid.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./ScheduleGrid.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./ScheduleGrid.vue?vue&type=style&index=0&id=753bb39c&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-753bb39c\"]])\n\nexport default __exports__","<script>\n\n// DELETE THIS SCRIPT TAG\n// This is only for notes about building this page.\n\n// The schedule page will allow free users to look back 72 hours and look ahead 72 hours.\n// On a mobile device it's easy enough to create a forever scroll for looking forward.\n// The easter egg will be scrolling UP to look back at the past 72 hours.\n// Free users can watch any of the content in the past 72 hours for free.\n// Users are given credits each month to watch premium notTV content.\n// They may purchase more credits, or subscribe for unlimited access.\n// They may also use credits to purchase licenses to content from creators.\n// Credits may also be spent in the shop.\n\n</script>\n\n<template>\n  <Head title=\"Schedule\"/>\n\n  <div class=\"place-self-center flex flex-col w-full overscroll-x-none pb-64\">\n    <div id=\"topDiv\" class=\"flex justify-end px-5\">\n      <div class=\"relative w-32 h-32 mt-8 -mb-8 mr-8\">\n        <div class=\"absolute top-3 left-0 w-full h-full flex justify-center items-center z-20\"><h1 class=\"text-4xl font-bold text-white bg-black bg-opacity-80 px-4 py-1 text-center\">Broadcast<br />Schedule</h1></div>\n        <div class=\"absolute top-3 left-0 w-full h-full flex justify-center items-center z-10\"><img src=\"/storage/images/Ping.png\"  alt=\"notTV Ping\"/></div>\n      </div>\n\n    </div>\n    <Message v-if=\"appSettingStore.showFlashMessage\" :flash=\"$page.props.flash\"/>\n    <!--    <div class=\"mx-6\">-->\n    <!--      <div class=\"alert alert-info\">-->\n    <!--        <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" class=\"stroke-current shrink-0 w-6 h-6\">-->\n    <!--          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"-->\n    <!--                d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"></path>-->\n    <!--        </svg>-->\n    <!--        <span></span>-->\n    <!--      </div>-->\n    <!--    </div>-->\n    <!--    <ul class=\"w-64 ml-12 my-8\">-->\n    <!--      <li class=\"p-2 bg-green-800\">Scheduled Shows</li>-->\n    <!--      <li class=\"p-2 bg-purple-800\">New Releases</li>-->\n    <!--      <li class=\"p-2 bg-blue-800\">Live Events</li>-->\n    <!--      <li class=\"p-2 bg-yellow-800\">News</li>-->\n    <!--      &lt;!&ndash;            <li class=\"p-2\"><font-awesome-icon icon=\"fa-leaf\" class=\"text-red-600 text-3xl pr-2\"/> Canadian Content</li>&ndash;&gt;-->\n    <!--      &lt;!&ndash;            <li class=\"p-2\"><font-awesome-icon icon=\"fa-flag-usa\" class=\"text-red-600 text-3xl pr-2\"/> American Content</li>&ndash;&gt;-->\n\n    <!--    </ul>-->\n\n    <div class=\"ml-5 px-2 mb-2\">\n      <span class=\"text-sm uppercase text-purple-500\">All times are listed in your timezone.</span>\n    </div>\n\n    <!--    <div class=\"schedule-grid\">-->\n    <!--      &lt;!&ndash; Header Row for Times &ndash;&gt;-->\n    <!--      <div class=\"header-row\">-->\n    <!--        <template v-for=\"(time, index) in nextFourHours\" :key=\"`header-${index}`\">-->\n    <!--          <div class=\"schedule-cell\" :style=\"{ 'grid-column': index + 1 }\">{{ time.formatted }}</div>-->\n    <!--        </template>-->\n    <!--      </div>-->\n    <div class=\"schedule-grid\">\n    <div class=\"header-row\">\n      <!-- Time slots header -->\n      <div class=\"time-cell bg-gray-900 px-3 py-2 text-center font-bold\" v-for=\"interval in nextFourHoursWithHalfHourIntervals\" :key=\"interval.dateTime\">\n        {{ interval.formatted }}\n      </div>\n    </div>\n    </div>\n    <ScheduleGrid />\n\n\n    <div class=\"schedule-grid\">\n      <div class=\"header-row\">\n        <!-- Time slots header -->\n        <div class=\"time-cell bg-gray-900 px-3 py-2 text-center font-bold\" v-for=\"interval in nextFourHoursWithHalfHourIntervals\" :key=\"interval.dateTime\">\n          {{ interval.formatted }}\n        </div>\n      </div>\n\n      <div v-if=\"scheduleStore.scheduleIsLoading && scheduleStore.nextFourHoursOfContent.length === 0\"\n            class=\"w-full flex justify-center text-center items-center\">\n        <span class=\"loading loading-ball loading-xl text-info\"></span>\n      </div>\n\n      <div class=\"content-row\">\n        <!-- Scheduled shows -->\n        <template v-for=\"item in nextFourHoursOfContent\" :key=\"item.id\">\n          <div\n              class=\"show-cell flex flex-col w-full h-full\"\n              :class=\"getCellClasses(item.type)\"\n              :style=\"gridPlacement(item.start_time, item.durationMinutes)\"\n              @click=\"handleShowClick(item)\"\n          >\n            <div  class=\"item-content flex flex-col items-center justify-center gap-y-2 flex-grow\">\n              <h3>{{ item.content.show?.name || 'No Show Name' }}</h3>\n              <!-- Display the image if available -->\n              <SingleImage v-if=\"item.content.show?.image\"\n                           :image=\"item.content.show?.image\"\n                           :alt=\"item.content.show?.name\"\n                           class=\"content-image\"/>\n              <!-- Fallback placeholder if no image -->\n              <div v-else class=\"placeholder\"></div>\n            </div>\n          </div>\n        </template>\n      </div>\n\n\n      <!-- Status Row -->\n      <div class=\"status-row\">\n        <!-- Status for each show -->\n        <template v-for=\"(item, index) in nextFourHoursOfContent\" :key=\"`status-${item.id}`\">\n          <div\n              :class=\"getStatusCellClasses(index)\" :style=\"gridPlacement(item.start_time, item.durationMinutes)\"\n          >\n            <!-- Use the index to determine the status -->\n            <span v-if=\"index === 0\">NOW PLAYING</span>\n            <span v-else-if=\"index === 1\">COMING UP NEXT</span>\n\n          </div>\n        </template>\n      </div>\n\n      <!--      &lt;!&ndash; Content Row &ndash;&gt;-->\n      <!--      <div class=\"content-row\">-->\n      <!--        <div-->\n      <!--            v-for=\"(item, index) in nextFourHoursOfContent\"-->\n      <!--            :key=\"`content-${index}`\"-->\n      <!--            :style=\"{ 'grid-column': item.gridColumn }\"-->\n      <!--            class=\"item-cell\"-->\n      <!--        >-->\n      <!--          &lt;!&ndash; Calculate where the item should start and how many columns it should span &ndash;&gt;-->\n      <!--          <div :style=\"{-->\n      <!--                'grid-column': `${calculateStartColumn(item.start_time, timeSlots)} / span ${calculateSpan(item.start_time, item.durationMinutes, timeSlots)}`,-->\n      <!--                }\">-->\n      <!--            &lt;!&ndash; Content Here &ndash;&gt;-->\n      <!--            &lt;!&ndash; Content Display Logic &ndash;&gt;-->\n      <!--            <div class=\"item-content\">-->\n      <!--              <h3>{{ item.content.show?.name || 'No Show Name' }}</h3>-->\n      <!--              &lt;!&ndash; Display the image if available &ndash;&gt;-->\n      <!--              <SingleImage v-if=\"item.content.show?.image\"-->\n      <!--                           :image=\"item.content.show?.image\"-->\n      <!--                           :alt=\"item.content.show?.name\"-->\n      <!--                           class=\"content-image\" />-->\n      <!--              &lt;!&ndash; Fallback placeholder if no image &ndash;&gt;-->\n      <!--              <div v-else class=\"placeholder\"></div>-->\n      <!--            </div>-->\n      <!--          </div>-->\n\n      <!--        </div>-->\n      <!--      </div>-->\n\n    </div>\n\n\n<!--    <table class=\"table-fixed mx-5\">-->\n<!--      <thead class=\"bg-gray-900\">-->\n<!--      <tr class=\"border-b border-0.5 border-white\">-->\n<!--        &lt;!&ndash; Loop for each hour, including its half-hour mark &ndash;&gt;-->\n<!--        <template v-for=\"(time, index) in nextFourHours\" :key=\"index\">-->\n<!--          &lt;!&ndash; Hour mark &ndash;&gt;-->\n<!--          <th :class=\"getColumnVisibilityClass(index * 2)\">-->\n<!--            {{ formatTime(new Date(time)) }}-->\n<!--          </th>-->\n<!--          &lt;!&ndash; Half-hour mark &ndash;&gt;-->\n<!--          <th :class=\"getColumnVisibilityClass(index * 2 + 1)\">-->\n<!--            {{ formatHalfHour(new Date(time)) }}-->\n<!--          </th>-->\n<!--        </template>-->\n<!--      </tr>-->\n<!--      </thead>-->\n<!--      <tbody>-->\n<!--      &lt;!&ndash; Loop through each content item &ndash;&gt;-->\n<!--      <tr v-for=\"(item, index) in nextFourHoursOfContent\" :key=\"index\" class=\"border-b border-0.5 border-white\">-->\n<!--        &lt;!&ndash; Calculate the colspan based on durationMinutes &ndash;&gt;-->\n<!--        <td :colspan=\"calculateColspan(item.durationMinutes)\" @click=\"openModal(`goToNowPlayingModal`)\"-->\n<!--            :class=\"getCellClasses(item.type)\">-->\n<!--          <div class=\"flex flex-col\">-->\n<!--            <span class=\"text-center pb-2\">{{ item.content.show?.name || 'No Show Name' }}</span>-->\n<!--            &lt;!&ndash; Optionally display an image if available &ndash;&gt;-->\n<!--            &lt;!&ndash;            <div v-if=\"content.show?.image\" class=\"w-full h-64\" :style=\"{ backgroundImage: `url(${content.show.image.cdn_endpoint}${content.show.image.folder}/${content.show.image.name})`, backgroundSize: 'cover' }\"></div>&ndash;&gt;-->\n<!--            <SingleImage v-if=\"item.type === 'show'\" :image=\"item?.content?.show?.image\"-->\n<!--                         :alt=\"item?.content?.show?.name\" :class=\"`max-w-full h-auto object-cover`\"/>-->\n<!--            <SingleImage v-else :image=\"item?.content?.image\" :alt=\"item?.content?.name\"-->\n<!--                         :class=\"`max-w-xs h-auto object-cover`\"/>-->\n<!--            &lt;!&ndash; Placeholder if no image is available &ndash;&gt;-->\n<!--            <div v-else class=\"w-full h-64 bg-gray-400\"></div>-->\n<!--          </div>-->\n<!--        </td>-->\n<!--      </tr>-->\n<!--      </tbody>-->\n\n<!--    </table>-->\n\n    <PopUpModal :id=\"`goToNowPlayingModal`\">\n      <template v-slot:header>Now Playing</template>\n      <template v-slot:main><span class=\"text-orange-500\">This modal is temporary. This will take you to the now playing show or episode page.</span>\n      </template>\n    </PopUpModal>\n    <PopUpModal :id=\"`getReminderModal`\">\n      <template v-slot:header>Set Reminder</template>\n      <template v-slot:main><span class=\"text-orange-500\">This modal is temporary. Set a reminder when this show starts and/or subscribe to the show to get all notifications when new episodes are released or the show goes live. <br /><br /><span class=\"font-semibold text-yellow-600\">NOTE: Monthly and Yearly contributors get first access to new features.</span></span>\n      </template>\n    </PopUpModal>\n\n    <div class=\"bg-gray-600 rounded-lg shadow m-10 p-4\">\n\n\n      <TodayView/>\n    </div>\n\n\n  </div>\n</template>\n\n<script setup>\nimport { usePageSetup } from '@/Utilities/PageSetup'\nimport { useAppSettingStore } from '@/Stores/AppSettingStore'\nimport { useScheduleStore } from '@/Stores/ScheduleStore'\nimport Message from '@/Components/Global/Modals/Messages'\nimport PopUpModal from '@/Components/Global/Modals/PopUpModal'\nimport TodayView from '@/Components/Global/Calendar/TodayView.vue'\nimport { computed, onMounted } from 'vue'\nimport SingleImage from '@/Components/Global/Multimedia/SingleImage.vue'\nimport dayjs from 'dayjs'\nimport { Inertia } from '@inertiajs/inertia'\nimport ScheduleGrid from '@/Components/Pages/Schedule/ScheduleGrid.vue'\n\nusePageSetup('schedule')\n\nconst appSettingStore = useAppSettingStore()\nconst scheduleStore = useScheduleStore()\n\nlet props = defineProps({\n  can: Object,\n})\n\n// Computed property to ensure reactivity\nconst nextFourHours = computed(() => scheduleStore.nextFourHoursWithHalfHourIntervals)\nconst nextFourHoursOfContent = computed(() => scheduleStore.nextFourHoursOfContent)\nconst nextFourHoursWithHalfHourIntervals = computed(() => scheduleStore.nextFourHoursWithHalfHourIntervals)\nconst timeIntervals = computed(() => scheduleStore.nextFourHoursWithHalfHourIntervals)\nconst shows = computed(() => scheduleStore.nextFourHoursOfContent)\n\n// Determine the \"Now Playing\" and \"Coming Up Next\" statuses\nconst now = dayjs();\nlet nowPlayingIndex = -1;\nlet comingUpNextIndex = -1;\n//\n// // Ensure shows.value is defined and is an array before attempting to iterate over it\n// if (Array.isArray(shows.value)) {\n//   shows.value.forEach((show, index) => {\n//     const showStart = dayjs(show.start_time);\n//     const showEnd = showStart.add(show.durationMinutes, 'minutes');\n//     if (now.isSameOrBefore(showEnd) && now.isAfter(showStart)) {\n//       nowPlayingIndex = index; // This show is now playing\n//     }\n//     // Assuming shows are sorted by start time\n//     if (nowPlayingIndex !== -1 && index === nowPlayingIndex + 1) {\n//       comingUpNextIndex = index; // The next show in the list\n//     }\n//   });\n// }\n\n// Provide these indexes for template usage\n// const isNowPlaying = (index) => index === nowPlayingIndex;\nconst isComingUpNext = (index) => index === comingUpNextIndex;\n\nconst gridPlacement = (startTime, durationMinutes) => {\n  // Convert startTime to a comparable format if necessary\n  const startDateTime = new Date(startTime)\n  const timeSlots = nextFourHoursWithHalfHourIntervals.value.map(interval => new Date(interval.dateTimeString))\n\n  // Find the index of the time slot that matches the item's start time\n  let startColumn = timeSlots.findIndex(slot => startDateTime >= slot && startDateTime < new Date(slot.getTime() + 30 * 60000))\n  if (startColumn === -1) {\n    console.error('Start time does not match any interval:', startTime)\n    return {} // Fallback or error handling\n  }\n\n  // Adjust startColumn for 1-based indexing in CSS Grid\n  startColumn += 1\n\n  // Calculate span based on duration\n  const span = Math.ceil(durationMinutes / 30)\n\n  // Return CSS style object for grid placement\n  return {\n    'gridColumn': `${startColumn} / span ${span}`,\n  }\n}\n\n// Determines the classes for a status cell\nconst getStatusCellClasses = (index) => {\n  const classes = ['status-cell'];\n  if (index === 0) classes.push('now-playing');\n  else if (index === 1) classes.push('coming-up-next');\n  else classes.push('status-cell-empty'); // For cells without specific content\n  return classes;\n};\n\n// Checks if a given show is currently playing\nfunction isNowPlaying(showStartTime, durationMinutes) {\n  const now = dayjs()\n  const startTime = dayjs(showStartTime)\n  const endTime = startTime.add(durationMinutes, 'minute')\n  console.log('ShowStartTime Time: ' + showStartTime)\n  console.log('Duration Minutes: ' + durationMinutes)\n  console.log('Now: ' + now)\n  console.log('Start Time: ' + startTime)\n  console.log('End Time: ' + endTime)\n  return now.isAfter(startTime) && now.isBefore(endTime)\n}\n\n\n// const isComingUpNext = (shows) => {\n//   const now = dayjs();\n//   let nowPlayingIndex = -1;\n//\n//   // First, find the index of the show that's currently playing, if any\n//   shows.value.forEach((show, index) => {\n//     const showStart = dayjs(show.start_time);\n//     const showEnd = showStart.add(show.durationMinutes, 'minute');\n//     if (now.isAfter(showStart) && now.isBefore(showEnd)) {\n//       nowPlayingIndex = index;\n//     }\n//   });\n//\n//   // The show coming up next would be the first show that starts after the current time\n//   // and is not the currently playing show\n//   for (let i = nowPlayingIndex + 1; i < shows.length; i++) {\n//     const nextShowStart = dayjs(shows[i].start_time);\n//     if (now.isBefore(nextShowStart)) {\n//       return i; // Return the index of the coming up next show\n//     }\n//   }\n//\n//   return -1; // Return -1 if there's no show coming up next\n// };\n\nconst nextShowIndex = isComingUpNext(shows);\nconsole.log(\"Coming up next show index:\", nextShowIndex);\n\n\n// const nextFourHoursOfContent = computed(() => {\n//   return scheduleStore.nextFourHoursOfContent.map(item => {\n//     const { startColumn, span } = calculateGridPlacement(item.start_time, item.durationMinutes, nextFourHours.value);\n//     // Adjust startColumn for CSS Grid (1-indexed)\n//     const gridColumnStart = startColumn + 1;\n//     item.gridColumn = `${gridColumnStart} / span ${span}`;\n//     return item;\n//   });\n// });\n\n// console.log(nextFourHoursOfContent.value);\nconst timeSlots = computed(() => {\n  // Assuming nextFourHoursWithHalfHourIntervals is a reactive source\n  return nextFourHoursOfContent.value.map(slot => new Date(slot))\n})\n//\n// console.log(timeSlots.value);\n\nfunction calculateStartColumn(startTime, timeSlots) {\n  // Convert startTime to a Date object for comparison\n  const startDateTime = new Date(startTime)\n  // Find the first time slot that matches or exceeds the startDateTime\n  const columnIndex = timeSlots.findIndex(timeSlot => {\n    const timeSlotDate = new Date(timeSlot)\n    return startDateTime.getTime() <= timeSlotDate.getTime()\n  })\n  // Return the column index + 1 (CSS grid lines start at 1, not 0)\n  return columnIndex + 1\n}\n\nfunction calculateSpan(startTime, durationMinutes, timeSlots) {\n  const startDateTime = new Date(startTime)\n  const endDateTime = new Date(startDateTime.getTime() + durationMinutes * 60000) // Convert duration to milliseconds and add\n\n  let startIndex = -1\n  let endIndex = -1\n\n  // Loop through timeSlots to find start and end indexes\n  for (let i = 0; i < timeSlots.length; i++) {\n    const slot = new Date(timeSlots[i])\n    if (startIndex === -1 && startDateTime <= slot) {\n      startIndex = i\n    }\n    if (endDateTime <= slot) {\n      endIndex = i\n      break\n    }\n  }\n\n  // If the end index was not found, it means the event lasts beyond the last time slot\n  if (endIndex === -1) {\n    endIndex = timeSlots.length\n  }\n\n  // The span is the difference between the end and start indexes\n  return endIndex - startIndex\n}\n\nconst timeStringToMinutes = (timeStr) => {\n  const [hour, minute] = timeStr.match(/\\d+/g)\n  return parseInt(hour) * 60 + parseInt(minute)\n}\n\n// const calculateGridPlacement = (showStartTime, showDuration, timeIntervals) => {\n//   // Convert the show start time and intervals to minutes for comparison\n//   const showStartMinutes = timeStringToMinutes(showStartTime);\n//   const intervalStartMinutes = timeIntervals.map(interval => timeStringToMinutes(interval));\n//\n//   // Find the starting column by finding the closest interval start time\n//   let startColumn = intervalStartMinutes.findIndex(time => time >= showStartMinutes);\n//   startColumn = startColumn === -1 ? timeIntervals.length - 1 : startColumn; // Fallback to the last column if not found\n//\n//   // Calculate span based on duration (rounded up to cover partial intervals)\n//   const span = Math.ceil(showDuration / 30);\n//\n//   return { startColumn, span };\n// };\n\n// Sample usage\n// const timeIntervals = [\"05:00 PM\", \"05:30 PM\", \"06:00 PM\", \"06:30 PM\", \"07:00 PM\", \"07:30 PM\", \"08:00 PM\", \"08:30 PM\"];\n// const showStartTime = \"17:00\"; // \"05:00 PM\"\n// const showDuration = 60; // 60 minutes\n\n// const { startColumn, span } = calculateGridPlacement(showStartTime, showDuration, timeIntervals);\n\n// shows.value.forEach(show => {\n//   const { startColumn, span } = calculateGridPlacement(show.start_time, show.durationMinutes, timeIntervals.value);\n//   // Apply the calculated start column and span to your grid layout logic\n// });\n//\n// function calculateGridPlacement(showStartTime, showDuration, timeIntervals) {\n//   // Convert showStartTime to the user's timezone and format for comparison\n//   const showStartInUserTZ = userStore.convertUtcToUserTimezone(showStartTime);\n//\n//   // Find the index of the interval that matches the show's start time\n//   const startColumn = timeIntervals.findIndex(interval => showStartInUserTZ === interval.dateTimeString);\n//\n//   // Calculate how many 30-minute intervals the show spans\n//   const intervals = Math.ceil(showDuration / 30);\n//\n//   if (startColumn === -1) {\n//     console.error('Start time does not match any interval:', showStartInUserTZ);\n//     // Handle the error case appropriately\n//     return { startColumn: 1, span: intervals }; // Default or error handling\n//   }\n//\n//   const span = startColumn + intervals > timeIntervals.length ? timeIntervals.length - startColumn : intervals;\n//\n//   return { startColumn: startColumn + 1, span }; // +1 for CSS grid's 1-based indexing\n// }\n\n\n// This function assumes that `showStartTime` is already in the same format as your time intervals.\n// If not, you may need to implement a conversion function to align the time formats.\n\nfunction convertTo24HourFormat(time) {\n  // Assume input is \"HH:MM PM/AM\" and convert to 24-hour format \"HH:MM\"\n  // This is a placeholder for actual conversion logic\n  return time\n}\n\n\n// function calculateGridColumn(startTime, durationMinutes, timeSlots) {\n//   // Find the index of the slot that matches the item's start time\n//   const startSlotIndex = timeSlots.value.findIndex(timeSlot =>\n//       new Date(startTime) >= new Date(timeSlot) &&\n//       new Date(startTime) < new Date(new Date(timeSlot).getTime() + 30 * 60000)\n//   ) + 1; // Grid lines start at 1\n// }\n//   function calculateSpan(startTime, durationMinutes) {\n//     if (!timeSlots.value || timeSlots.value.length === 0) {\n//       console.error('timeSlots is not defined or empty');\n//       return 0; // or some fallback value\n//     }\n//\n//     // Now safe to use timeSlots.value.findIndex\n//     const startIndex = timeSlots.value.findIndex(/* your logic here */);\n//     // Further logic...\n//   }\n\n\n// Example processing of schedule into grid items\n// const processedSchedule = computed(() => {\n//   return shows.map(show => {\n//     const startCol = calculateStartColumn(show.startTime);\n//     const span = calculateSpan(show.duration, show.startTime);\n//\n//     return {\n//       ...show,\n//       startCol,\n//       span,\n//     };\n//   }).sort((a, b) => a.priority - b.priority); // Ensure sorting by priority\n// });\n\n// const calculateStartColumn = (startTime) => {\n//   const showStart = new Date(startTime);\n//   const gridStart = new Date(nextFourHours.value[0]);\n//\n//   // Calculate start column based on half-hour increments from gridStart\n//   const diffHours = (showStart - gridStart) / (1000 * 60 * 60);\n//   return Math.ceil(diffHours * 2) + 1; // +1 because CSS Grid lines start at 1\n// };\n//\n// const calculateSpan = (durationMinutes) => {\n//   return Math.ceil(durationMinutes / 30); // Span based on 30-minute intervals\n// };\n\n// const calculateStartColumn = (startTime) => {\n//   const showStart = new Date(startTime);\n//   const gridStart = nextFourHours[0];\n//\n//   // Find the index of the time slot that matches or immediately precedes the show's start time\n//   const columnIndex = nextFourHours.findIndex(time => showStart < time) - 1;\n//   console.log('BAHH ' + columnIndex);\n//\n//   return columnIndex >= 0 ? columnIndex + 1 : 1; // Ensure it falls within the grid columns\n// };\n//\n// const calculateSpan = (startTime, durationMinutes) => {\n//   const startColumn = calculateStartColumn(startTime);\n//   const span = Math.ceil(durationMinutes / 30); // Determine span based on duration\n//\n//   // Adjust the span to ensure it doesn't extend beyond the grid\n//   return startColumn + span - 1 <= 8 ? span : 8 - startColumn + 1;\n// };\n\nconst getItemStyle = (item) => {\n  const startColumn = calculateStartColumn(item.start_time)\n  const span = calculateSpan(item.durationMinutes)\n\n  return {\n    gridColumnStart: startColumn,\n    gridColumnEnd: `span ${span}`,\n    gridRowStart: 2, // All items start in the second row\n  }\n}\n\n// Method to format the full hour\nfunction formatTime(date) {\n  return date.toLocaleTimeString('en-US', {hour: 'numeric', minute: '2-digit', hour12: true})\n}\n\n// Method to add 30 minutes to the given date and format it\nfunction formatHalfHour(date) {\n  const halfHourLater = new Date(date.getTime() + 30 * 60 * 1000)\n  return halfHourLater.toLocaleTimeString('en-US', {hour: 'numeric', minute: '2-digit', hour12: true})\n}\n\n// Determine visibility classes based on column index and if it's a half-hour\nfunction getColumnVisibilityClass(index, isHalfHour) {\n  // Adjust index for half-hour columns\n  const adjustedIndex = isHalfHour ? index * 2 + 1 : index * 2\n\n  if (adjustedIndex >= 6) { // Last two columns visible only on 2xl screens\n    return 'hidden 2xl:table-cell'\n  } else if (adjustedIndex >= 3) { // Columns 4, 5, 6 visible on xl screens and above\n    return 'hidden xl:table-cell'\n  } else { // Columns 1, 2, 3 are always visible\n    return ''\n  }\n}\n\nfunction calculateColspan(durationMinutes) {\n  // Assuming each hour (and its half-hour mark) is represented by two columns\n  // and that each content item's duration in minutes can determine its span\n  return Math.ceil(durationMinutes / 30)\n}\n\nfunction getCellClasses(type) {\n  const baseClass = 'column-width text-sm 2xl:text-md border border-0.5 border-green-300 hover:border-blue-500 cursor-pointer'\n  switch (type) {\n    case 'show':\n      return `${baseClass} bg-gradient-show hover:bg-gradient-show-hover`\n    case 'new_release':\n      return `${baseClass} bg-gradient-new-release hover:bg-gradient-new-release-hover`\n      // Add more cases as needed\n    default:\n      return baseClass\n  }\n}\n\nfunction handleShowClick(item) {\n  if (isNowPlaying(item.start_time, item.durationMinutes)) {\n    // Redirect to the show's page if it's currently playing\n    Inertia.visit(`/shows/${item.content.show.slug}/`)\n  } else {\n    // Open the reminder modal for shows that are not currently playing\n    openModal('getReminderModal')\n  }\n}\n\nfunction openModal(modalName) {\n  document.getElementById(modalName).showModal()\n}\n\n</script>\n\n<style scoped>\n\n.bg-gradient-show {\n  background: linear-gradient(to right, #1f4037, #99f2c8); /* Example green gradient */\n}\n\n.bg-gradient-show-hover:hover {\n  background: linear-gradient(to right, #66D3FA, #6E45E2); /* Example green gradient on hover */\n}\n\n.bg-gradient-new-release {\n  background: linear-gradient(to right, #654ea3, #eaafc8); /* Example purple gradient */\n}\n\n.bg-gradient-new-release-hover:hover {\n  background: linear-gradient(to right, #c2e59c, #64b3f4); /* Example purple gradient on hover */\n}\n\n\n.column-width {\n  @apply w-16\n}\n\n\n.schedule-item {\n  background: #f0f0f0;\n  color: #000;\n  padding: 10px;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  align-items: center;\n}\n\n.time-slot {\n  text-align: center;\n  padding: 10px 0;\n  border-bottom: 1px solid #fff;\n  grid-row: 1; /* Ensures all time slots are in the first row */\n}\n\n.time-cell {\n  border: 1px solid #fff;\n}\n\n.content {\n  background: #f0f0f0;\n  padding: 8px;\n  border: 1px solid #ddd;\n}\n\n.placeholder {\n  background: #ccc;\n  width: 100%;\n  height: 60px;\n}\n\n\n.schedule-grid {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr); /* Adjust based on your actual time slots */\n\n}\n\n.header-row, .content-row, .status-row {\n  display: contents; /* Make these divs act as part of the grid layout without creating extra rows */\n  width: 100%; /* Ensure they span the full width of the grid */\n}\n\n.schedule-cell {\n  background: #333;\n  color: #fff;\n  text-align: center;\n  padding: 8px;\n}\n\n.item-content {\n  padding: 8px;\n  background: linear-gradient(to right, rgba(68, 68, 68, 0.9), rgba(68, 68, 68, 0.7));\n}\n\n.item-content:hover {\n  background: linear-gradient(to right, #06beb6, #48b1bf);\n  /* Adjust the colors above to match your desired hover effect */\n}\n\n.content-image {\n  width: 100%;\n  height: auto;\n  object-fit: cover;\n}\n\n.status-row {\n  width: 100%; /* Ensure the row takes the full width of its container */\n  text-align: center;\n  font-size: 1rem; /* Adjust as needed */\n  color: white; /* Adjust as needed */\n  padding: 10px 0; /* Adjust as needed */\n  background-color: rgba(0,0,0,0.7); /* Adjust as needed for visibility */\n}\n\n.status-cell {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 8px;\n  color: white;\n  width: 100%;\n  height:100%;\n  font-weight: bold;\n  opacity: 0.8;\n  transition: background-color 0.3s ease;\n}\n\n.status-cell span {\n  display: block;\n  padding: 4px 8px;\n  border-radius: 4px;\n  background-color: black;\n}\n\n/* Optional: If you want the empty cells to have a slight indication they are there */\n.status-cell:empty::after {\n  content: \"\";\n  display: block;\n  width: 100%;\n  height: 100%;\n  background: none; /* Adjust this to a very subtle color or keep transparent */\n}\n\n.now-playing {\n  background-color: #4CAF50; /* Green for now playing */\n  animation: pulseAnimation 2s infinite;\n}\n\n.coming-up-next {\n  background-color: #FF9800; /* Orange for coming up next */\n}\n\n\n\n@keyframes pulseAnimation {\n  0% { opacity: 0.75; }\n  50% { opacity: 1; }\n  100% { opacity: 0.75; }\n}\n\n/* Responsive visibility */\n@media (min-width: 1280px) {\n  /* 2xl */\n  .xl\\:hidden {\n    display: none;\n  }\n}\n\n@media (min-width: 1024px) {\n  /* xl */\n  .lg\\:hidden {\n    display: none;\n  }\n}\n\n</style>\n","import api from \"!../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../../node_modules/css-loader/dist/cjs.js??clonedRuleSet-9.use[1]!../../../../node_modules/vue-loader/dist/stylePostLoader.js!../../../../node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-9.use[2]!../../../../node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./Index.vue?vue&type=style&index=0&id=01fa62c3&scoped=true&lang=css\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","import script from \"./Index.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Index.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./Index.vue?vue&type=style&index=0&id=01fa62c3&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-01fa62c3\"]])\n\nexport default __exports__"],"names":["_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","delegateYield","asyncGeneratorStep","gen","reject","_next","_throw","key","info","error","_asyncToGenerator","fn","self","args","arguments","apply","err","undefined","_toConsumableArray","arr","Array","isArray","_arrayLikeToArray","_arrayWithoutHoles","iter","from","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","minLen","toString","test","len","arr2","ownKeys","getOwnPropertySymbols","filter","getOwnPropertyDescriptor","_objectSpread","_defineProperty","getOwnPropertyDescriptors","defineProperties","obj","toPrimitive","String","Number","_toPrimitive","convertScheduleToTimezone","scheduleData","userStore","useUserStore","data","map","item","startTimeInUserTz","start_time","formatDateTimeFromUtcToUserTimezone","endTimeInUserTz","end_time","recurrenceDetailsInUserTz","recurrenceDetails","_item$recurrenceDetai","start_date","end_date","formatTimeInUserTimezone","getUpcomingContentDates","viewingWindowStart","dates","start","Date","setHours","getHours","dayjs","relativeTime","timezone","utc","initialState","currentMonth","selectedDay","currentWeekStart","currentWeekEnd","fiveDaySixHourSchedule","todaysContent","weeklyContent","dataFetchLog","scheduleIsLoading","savingToSchedule","useScheduleStore","defineStore","state","actions","resetAll","assign","this","now","setSelectedDay","day","_this","_callee","_context","addHours","startOfDay","startOfWeek","weekStartsOn","endOfWeek","fetchWeekDataIfNeeded","setSelectedDayToToday","startOfHour","changeDay","days","_this2","_callee2","currentTime","newDay","_context2","getMinutes","addDays","setMinutes","shiftHours","hours","_this3","_callee3","_context3","isSameDay","isElevenPM","date","subtractMonth","_this4","_callee4","_context4","subMonths","console","log","t0","concat","addMonth","_this5","_callee5","_context5","addMonths","fetchFiveDaySixHourSchedule","_this6","_callee6","response","_context6","axios","get","userTimezone","fetchTodaysContent","_this7","_callee7","_context7","preloadWeeklyContent","_this8","_callee8","currentDate","_context8","loadWeekFromDate","_this9","_callee9","fullISODate","_timezone3","newData","weekStart","weekEnd","fetchTime","existingLogIndex","_context9","toISOString","post","findIndex","lastFetch","index","id","formattedDate","needsDataForWeek","formatISODate","split","weekStartStr","weekEndStr","weekHasBeenFetched","some","logWeekStartStr","logWeekEndStr","calculateExtendedEndForUpcomingContent","baseStartTime","getTime","checkAndFetchForUpcomingContent","_this10","_callee10","upcomingDates","fifteenMinutesAgo","_iterator","_step","_loop","_context11","_createForOfIteratorHelper","dateString","_context10","content","contentDate","toDateString","lastFetchedTime","isFresh","fetchDataAndUpdateLog","t1","_this11","_callee11","_context12","_this12","_callee12","_context13","mapShowsToTimeSlots","shows","timeSlots","showsWithAdjustedSpans","show","showStart","showEnd","durationMinutes","slotIndex","slot","span","Math","ceil","gridStart","gridSpan","showForSlot","find","placeholder","getters","nextFourHoursOfContent","startOfCurrentHour","fourHoursLater","durationHours","intervalMinutes","slots","slotTime","createTimeSlots","startDateTime","endDateTime","startInUserTZ","convertUtcToUserTimezone","endInUserTZ","warn","showStartTimeInUserTZ","fetchShowsScheduledBetween","resolvedShows","sortedShows","sort","b","startTimeComparison","priority","showsByStartTime","startTime","group","resolveSchedulingConflicts","adjustedShows","adjustShowsForGrid","showsWithPlacement","gridItems","slotStart","fillEmptySlotsWithPlaceholders","nextFourHoursWithHalfHourIntervals","intervals","current","tz","startOf","formatted","format","dateTimeString","add","upcomingContent","end","showsGroupedByStartTime","reduce","acc","itemStart","selected","nextSixHours","adjustedStart","eachHourOfInterval","dateMessage","startDay","isToday","isYesterday","isTomorrow","currentMonthIndex","getMonth","currentMonthName","currentYear","getYear","daysInMonth","startOfCurrentMonth","startOfMonth","endOfCurrentMonth","endOfMonth","startOfGrid","endOfGrid","eachDayOfInterval","today","viewingStart","usePageSetup","pageName","appSettingStore","useAppSettingStore","videoPlayerStore","useVideoPlayerStore","currentPage","showFlashMessage","pageIsHidden","isMobile","window","innerWidth","fullPage","ott","showOttButtons","makeVideoTopRight","pageReload","location","reload","Inertia","on","event","search","shouldScrollToTop","requestAnimationFrame","topDiv","document","getElementById","scrollIntoView","behavior","scrollTo","setPrevUrl","noLayout","___CSS_LOADER_EXPORT___","module","scheduleStore","_storeToRefs","storeToRefs","ref","computed","_ref","_x","isWithinCurrentHour","hour","endOfCurrentHour","contentStartTime","isContentAvailableForHour","formatHour","getTimeSegment","hourOfDay","segment","color","watch","newValue","goToContentPage","visit","slug","formatDuration","minutes","floor","remainingMinutes","_ref2","newTimezone","oldTimezone","_x2","_x3","immediate","options","locals","props","__props","clearFlashMessage","flash","success","message","warning","route","notificationStore","useNotificationStore","colorClass","displayStartTime","toLocaleTimeString","displayEndTime","baseTime","currentHour","substring","gridClass","updateShows","_currentHour$value$sp2","_slicedToArray","minute","parseInt","calculateSpan","gridWindowEnd","duration","visibleDuration","newHour","oldHour","visibleShows","mockShows","min","onMounted","addEventListener","updateWidth","onUnmounted","removeEventListener","gridPlacement","startColumn","interval","getStatusCellClasses","classes","nextShowIndex","getCellClasses","baseClass","handleShowClick","modalName","showStartTime","endTime","isAfter","isBefore","isNowPlaying","showModal"],"sourceRoot":""}