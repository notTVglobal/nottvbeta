{"version":3,"file":"js/1677.js","mappings":"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","sources":["webpack://nottvbeta/./resources/js/Utilities/BroadcastUtils.js","webpack://nottvbeta/./resources/js/Stores/TeamStore.js"],"sourcesContent":["import dayjs from 'dayjs'\nimport utc from 'dayjs-plugin-utc'\nimport timezone from 'dayjs/plugin/timezone'\n\ndayjs.extend(utc)\ndayjs.extend(timezone)\n\nexport function filterAndSortBroadcasts(broadcasts, nextBroadcastLoaded, userTimezone) {\n    const nowInUserTimezone = dayjs().tz(userTimezone);\n\n    return broadcasts\n        .filter(broadcast => {\n            // Calculate broadcastEndTime for the current broadcast\n            const broadcastEndTime = dayjs(broadcast.broadcastDate)\n                .add(broadcast.broadcastDetails.duration_minutes, 'minute')\n                .utc()\n                .tz(userTimezone);\n\n            // Filter out broadcasts that have already ended\n            const isAfterNow = nowInUserTimezone.isBefore(broadcastEndTime);\n\n            // Exclude if it matches nextBroadcastLoaded.broadcastDate && broadcastEndTime\n            const isNotLoadedBroadcast = !(\n                nextBroadcastLoaded &&\n                nextBroadcastLoaded.broadcastDate === broadcast.broadcastDate &&\n                dayjs(nextBroadcastLoaded.broadcastDate)\n                    .add(nextBroadcastLoaded.broadcastDetails?.duration_minutes || 0, 'minute')\n                    .utc()\n                    .tz(userTimezone)\n                    .isSame(broadcastEndTime)\n            );\n\n            return isAfterNow && isNotLoadedBroadcast;\n        })\n        .sort((a, b) => dayjs(a.broadcastDate).tz(userTimezone).diff(dayjs(b.broadcastDate).tz(userTimezone)))\n        .map(broadcast => ({\n            ...broadcast,\n            localDate: dayjs(broadcast.broadcastDate).tz(userTimezone).format(),\n        }));\n}\n","import { defineStore } from 'pinia'\nimport dayjs from 'dayjs'\nimport utc from 'dayjs-plugin-utc'\nimport timezone from 'dayjs/plugin/timezone'\nimport { useUserStore } from '@/Stores/UserStore'\nimport { useNotificationStore } from '@/Stores/NotificationStore'\nimport { filterAndSortBroadcasts } from '@/Utilities/BroadcastUtils'\n\ndayjs.extend(utc)\ndayjs.extend(timezone)\n\nconst initialState = () => ({\n    team: {},\n    shows: {},\n    contributors: {},\n    members: {},\n    managers: [],\n    teamOwner: [],\n    teamLeader: [],\n    can: {},\n    id: 0,\n    name: '',\n    description: '',\n    slug: '',\n    totalSpots: '',\n    memberSpots: '',\n    activeShow: [],\n    activeEpisode: [],\n    showModal: Boolean,\n    confirmDialog: false,\n    confirmManagerDialog: false,\n    selectedManagerName: '',\n    selectedManagerId: 0,\n    addManager: false,\n    removeManager: false,\n    deleteMemberName: '',\n    deleteMemberId: 0,\n    noteEdit: 0,\n    note: '',\n    noteKey: 0,\n    saveNoteProcessing: Boolean,\n    // on the show episode manage page\n    // turn on the go live div\n    goLiveDisplay: false,\n    openComponent: 'teamShows',\n    nextBroadcastLoaded: {\n        scheduleIndexId: null,\n        broadcastDate: null,\n        broadcastDetails: {},\n        type: '',\n        image: null,\n        category: null,\n        subCategory: null,\n        slug: null,\n        name: null,\n        description: null,\n    },\n    nextBroadcastZoomLink: '',\n})\n\nexport const useTeamStore = defineStore('teamStore', {\n    state: initialState,\n    actions: {\n        reset() {\n            // Reset the store to its original state (clear all data)\n            Object.assign(this, initialState())\n        },\n        // async fill() {\n        //     let r = await import('@/Json/team.json');\n        //     this.$state = r.default;\n        // },\n        initializeTeam(team) {\n            console.log('incoming team: ', team)\n            // const userStore = useUserStore()\n\n            // // Ensure nextBroadcast is an array and has at least one element\n            // if (Array.isArray(team.nextBroadcast) && team.nextBroadcast.length > 0) {\n            //     const firstBroadcast = team.nextBroadcast[0]\n            //\n            //     if (firstBroadcast.broadcastDetails) {\n            //\n            //\n            //         // Ensure broadcastDetails is an array and has the zoomLink object\n            //         // this.nextBroadcastLoaded.broadcastDetails = []\n            //         // if (!Array.isArray(this.nextBroadcastLoaded.broadcastDetails)) {\n            //         //     this.nextBroadcastLoaded.broadcastDetails = []\n            //         // }\n            //\n            //         // let zoomLinkObj = this.nextBroadcastLoaded.broadcastDetails.find(detail => detail.zoomLink !== undefined)\n            //         // if (!zoomLinkObj) {\n            //         //     zoomLinkObj = {zoomLink: ''}\n            //         //     this.nextBroadcastLoaded.broadcastDetails.push(zoomLinkObj)\n            //         // }\n            //\n            //         team.nextBroadcast = team.nextBroadcast.map(broadcast => ({\n            //             ...broadcast,\n            //             broadcastDate: userStore.convertUtcToUserTimezone(broadcast.broadcastDate),\n            //         }))\n            //     }\n            // } else {\n            //     // Handle the case where nextBroadcast is not an array or is empty\n            //     this.nextBroadcastLoaded = null\n            //     this.nextBroadcastZoomLink = null\n            // }\n\n            this.team = team || {}\n            // this.setActiveTeam(team)\n        },\n        initializeShows(shows) {\n            this.shows = shows || {}\n        },\n        initializeContributors(contributors) {\n            this.contributors = contributors || {}\n        },\n        setCan(can) {\n            this.can = can || {}\n        },\n        setActiveTeam(team) {\n            this.team.id = team.id\n            this.team.name = team.name\n            this.team.description = team.description\n            this.team.slug = team.slug\n            this.team.members = team.members\n            this.team.managers = team.managers\n            this.team.totalSpots = team.totalSpots\n        },\n        setActiveShow(show) {\n            this.activeShow = show\n        },\n        setActiveEpisode(episode) {\n            this.activeShow = episode\n        },\n        addMember(member) {\n            this.members.push(member)\n            this.team.memberCount++\n        },\n        removeMember(memberId) {\n            // this.members = this.members.filter(member => member.id !== memberId)\n            this.team.members.data = this.team.members.data.filter(member => member.id !== memberId)\n            // this.team.members.data = this.members\n            this.team.memberCount--\n        },\n        updateCreatorTeams(creatorId, teamId, remove = false) {\n            const creator = this.creators.find(c => c.id === creatorId)\n            if (creator) {\n                if (remove) {\n                    creator.teams = creator.teams.filter(team => team.id !== teamId)\n                } else {\n                    creator.teams.push({id: teamId, is_manager: false}) // Add the new team to the creator's teams\n                }\n            }\n        },\n        // getCreators() {\n        //     router.reload({ only: ['creators'] })\n        // },\n        deleteTeamMemberCancel() {\n            this.confirmDialog = false\n        },\n        confirmTeamManagerCancel() {\n            this.confirmManagerDialog = false\n        },\n        // loadTeamMembers(members){\n        //     this.members = members;\n        // }\n        // deleteTeamMember() {\n        //     router.visit(route('teams.removeTeamMember'), {\n        //         method: 'post',\n        //         data: {\n        //             user_id: this.deleteMemberId,\n        //             team_id: this.id,\n        //             team_slug: this.slug,\n        //         },\n        //     })\n        // },\n        async deleteTeamMember() {\n            const notificationStore = useNotificationStore()\n            const payload = {\n                user_id: this.deleteMemberId,\n                team_id: this.team.id,\n            }\n\n            try {\n                const response = await axios.post(route('teams.removeTeamMember'), payload)\n                if (response.status === 200) {\n                    this.removeMember(this.deleteMemberId)\n                    this.updateCreatorTeams(this.deleteMemberId, this.team.id, true) // Remove the team from the creator's teams\n                    this.confirmDialog = false\n                    notificationStore.setToastNotification(response.data.message, 'success')\n                } else {\n                    this.confirmDialog = false\n                    notificationStore.setToastNotification('Failed to remove member from the team.', 'warning')\n                }\n            } catch (error) {\n                console.error(error)\n                this.confirmDialog = false\n                notificationStore.setToastNotification('An error occurred while removing the member from the team.', 'error')\n            }\n        },\n        async addTeamManager() {\n            const notificationStore = useNotificationStore()\n            const payload = {\n                user_id: this.selectedManagerId,\n                team_id: this.team.id,\n                team_slug: this.team.slug,\n            }\n            try {\n                const response = await axios.post(route('teams.addTeamManager'), payload)\n                if (response.status === 200) {\n                    // Add any additional logic if needed, e.g., updating team data in the store\n                    this.team.managers.push(response.data.manager)\n                    this.confirmManagerDialog = false\n                    notificationStore.setToastNotification(response.data.message, 'success')\n                } else {\n                    this.confirmManagerDialog = false\n                    notificationStore.setToastNotification('Failed to add manager to the team.', 'warning')\n                }\n            } catch (error) {\n                console.error(error)\n                this.confirmManagerDialog = false\n                notificationStore.setToastNotification('An error occurred while adding the manager to the team.', 'error')\n            }\n        },\n        async removeTeamManager() {\n            const notificationStore = useNotificationStore()\n            const payload = {\n                user_id: this.selectedManagerId,\n                team_id: this.team.id,\n                team_slug: this.team.slug,\n            }\n\n            try {\n                const response = await axios.post(route('teams.removeTeamManager'), payload)\n                if (response.status === 200) {\n                    // Remove the manager from the team.managers array\n                    this.team.managers = this.team.managers.filter(manager => manager.id !== this.selectedManagerId)\n                    this.confirmManagerDialog = false\n                    notificationStore.setToastNotification(response.data.message, 'success')\n                } else {\n                    this.confirmManagerDialog = false\n                    notificationStore.setToastNotification('Failed to remove manager from the team.', 'warning')\n                }\n            } catch (error) {\n                console.error(error)\n                this.confirmManagerDialog = false\n                notificationStore.setToastNotification('An error occurred while removing the manager from the team.', 'error')\n            }\n        },\n        toggleGoLiveDisplay() {\n            this.goLiveDisplay = !this.goLiveDisplay\n        },\n        async fetchTeamMembers() {\n            await axios.get('/team/team-members').then().error()\n        },\n        setCreators(creators) {\n            this.creators = creators\n        },\n        updatePublicMessage(html) {\n            this.team.public_message = html\n        },\n    },\n\n    getters: {\n        spotsRemaining(state) {\n            if (!state.team.memberCount) {\n                return state.team.totalSpots // Assume no members if state.members is not defined\n            } else if (state.team.memberCount) {\n                this.totalSpots = state.team.totalSpots\n                return Math.max(state.team.totalSpots - state.team.memberCount, 0)\n            }\n        },\n        membersCount(state) {\n            if (!state.team.memberCount) {\n                return 0 // Assume no members if state.members is not defined\n            } else if (state.team.memberCount) {\n                state.memberSpots = state.team.memberCount\n                return state.team.memberCount\n            }\n        },\n        membersCountDisplay(state) {\n            if (state.team.memberCount) {\n                return state.team.memberCount > 99 ? '99+' : state.team.memberCount\n            }\n        },\n        setManagers(state) {\n            state.managers = state.team.managers\n            return state.managers\n        },\n        setMembers(state) {\n            state.members = state.team.members.data\n            return state.members\n        },\n        // nextBroadcast(state) {\n        //     const {team} = state\n        //     if (!team.nextBroadcast || team.nextBroadcast.length === 0) {\n        //         return null\n        //     }\n        //\n        //     const userStore = useUserStore()\n        //     const today = dayjs().tz(userStore.timezone)\n        //\n        //     return team.nextBroadcast.reduce((closest, broadcast) => {\n        //         // Check if broadcastDate is valid\n        //         const broadcastDateString = broadcast.broadcastDate\n        //         const isValidDate = broadcastDateString && !isNaN(Date.parse(broadcastDateString)) && broadcastDateString !== 'No broadcast date'\n        //\n        //         if (!isValidDate) {\n        //             return closest\n        //         }\n        //\n        //         const broadcastDate = dayjs(broadcastDateString).tz(userStore.timezone)\n        //         if (!closest || Math.abs(broadcastDate - today) < Math.abs(dayjs(closest.broadcastDate).tz(userStore.timezone) - today)) {\n        //             return broadcast\n        //         }\n        //         return closest\n        //     }, null)\n        // },\n        nextBroadcast(state) {\n            // Leverage the sortedBroadcasts array and return the first item\n            const sorted = this.sortedBroadcasts\n            return sorted.length > 0 ? sorted[0] : null\n        },\n        // nextBroadcastIsOver: (state) => {\n        //     const userStore = useUserStore()\n        //     const nowInUserTimezone = dayjs().utc().tz(userStore.timezone)\n        //\n        //     const nextBroadcast = state.nextBroadcastLoaded\n        //\n        //     if (!nextBroadcast || !nextBroadcast.broadcastDate || !nextBroadcast.broadcastDetails?.duration_minutes) {\n        //         return false // Handle cases where the necessary data is missing\n        //     }\n        //\n        //     const broadcastEndTime = dayjs(nextBroadcast.broadcastDate)\n        //         .add(nextBroadcast.broadcastDetails.duration_minutes, 'minute')\n        //         .utc()\n        //         .tz(userStore.timezone)\n        //\n        //     return nowInUserTimezone.isAfter(broadcastEndTime)\n        // },\n        nextBroadcastIsOver(state) {\n            const userStore = useUserStore()\n            const nowInUserTimezone = dayjs().tz(userStore.timezone)\n\n            const nextBroadcast = this.nextBroadcast\n\n            if (!nextBroadcast || !nextBroadcast.broadcastDate || !nextBroadcast.broadcastDetails?.duration_minutes) {\n                return false // Handle cases where the necessary data is missing\n            }\n\n            const broadcastEndTime = dayjs(nextBroadcast.broadcastDate)\n                .add(nextBroadcast.broadcastDetails.duration_minutes, 'minute')\n                .tz(userStore.timezone)\n\n            return nowInUserTimezone.isAfter(broadcastEndTime)\n        },\n        setTeamNextBroadcast(state, broadcasts) {\n            const userStore = useUserStore()\n\n            state.team.nextBroadcast = broadcasts.map(broadcast => ({\n                ...broadcast,\n                broadcastDate: userStore.convertUtcToUserTimezone(broadcast.broadcastDate),\n            }))\n        },\n        sortedBroadcasts(state) {\n            if (!state.team.nextBroadcast || state.team.nextBroadcast.length === 0) {\n                return []\n            }\n\n            const userStore = useUserStore()\n            const sortedBroadcasts = filterAndSortBroadcasts(state.team.nextBroadcast, state.nextBroadcastLoaded, userStore.timezone)\n\n            // Set the first broadcast as the nextBroadcastLoaded\n            if (sortedBroadcasts.length > 0) {\n                const firstBroadcast = sortedBroadcasts[0]\n                state.nextBroadcastLoaded = firstBroadcast\n\n                // Check if the zoomLink is available and set it\n                if (firstBroadcast.broadcastDetails && firstBroadcast.broadcastDetails.zoomLink) {\n                    state.nextBroadcastZoomLink = firstBroadcast.broadcastDetails.zoomLink\n                } else {\n                    state.nextBroadcastZoomLink = null  // Reset if no zoomLink is found\n                }\n            } else {\n                state.nextBroadcastLoaded = null\n                state.nextBroadcastZoomLink = null  // Reset if no broadcasts are found\n            }\n\n            return sortedBroadcasts\n        },\n        futureBroadcasts(state) {\n            if (!state.team.nextBroadcast || state.team.nextBroadcast.length === 0) {\n                return []\n            }\n\n            const userStore = useUserStore()\n            const sortedAndFilteredBroadcasts = filterAndSortBroadcasts(state.team.nextBroadcast, state.nextBroadcastLoaded, userStore.timezone)\n\n            // Exclude the first item in the sorted array\n            return sortedAndFilteredBroadcasts.slice(1)\n        },\n        // sortedBroadcasts(state) {\n        //     if (!state.team.nextBroadcast || state.team.nextBroadcast.length === 0) {\n        //         return []\n        //     }\n        //\n        //     const userStore = useUserStore()\n        //     const nowInUserTimezone = dayjs().tz(userStore.timezone)\n        //\n        //     return state.team.nextBroadcast\n        //         .filter(broadcast => {\n        //             // Calculate broadcastEndTime for the current broadcast\n        //             const broadcastEndTime = dayjs(broadcast.broadcastDate)\n        //                 .add(broadcast.broadcastDetails.duration_minutes, 'minute')\n        //                 .utc()\n        //                 .tz(userStore.timezone)\n        //\n        //             // Filter out broadcasts that have already ended\n        //             const isAfterNow = nowInUserTimezone.isBefore(broadcastEndTime)\n        //\n        //             // Exclude if it matches state.nextBroadcastLoaded.broadcastDate && broadcastEndTime\n        //             const isNotLoadedBroadcast = !(\n        //                 state.nextBroadcastLoaded &&\n        //                 state.nextBroadcastLoaded.broadcastDate === broadcast.broadcastDate &&\n        //                 dayjs(state.nextBroadcastLoaded.broadcastDate)\n        //                     .add(state.nextBroadcastLoaded.broadcastDetails?.duration_minutes || 0, 'minute')\n        //                     .utc()\n        //                     .tz(userStore.timezone)\n        //                     .isSame(broadcastEndTime)\n        //             )\n        //\n        //             return isAfterNow && isNotLoadedBroadcast\n        //         })\n        //         .sort((a, b) => dayjs(a.broadcastDate).tz(userStore.timezone).diff(dayjs(b.broadcastDate).tz(userStore.timezone)))\n        //         .map(broadcast => ({\n        //             ...broadcast,\n        //             localDate: dayjs(broadcast.broadcastDate).tz(userStore.timezone).format(),\n        //         }))\n        // },\n        // futureBroadcasts(state) {\n        //     const nextBroadcast = this.nextBroadcast\n        //     if (!state.team.nextBroadcast || state.team.nextBroadcast.length === 0) {\n        //         return []\n        //     }\n        //\n        //     const userStore = useUserStore()\n        //     const nowInUserTimezone = dayjs().tz(userStore.timezone)\n        //\n        //     // Apply similar logic to sortedBroadcasts\n        //     const sortedAndFilteredBroadcasts = state.team.nextBroadcast\n        //         .filter(broadcast => {\n        //             // Calculate broadcastEndTime for the current broadcast\n        //             const broadcastEndTime = dayjs(broadcast.broadcastDate)\n        //                 .add(broadcast.broadcastDetails.duration_minutes, 'minute')\n        //                 .utc()\n        //                 .tz(userStore.timezone)\n        //\n        //             // Filter out broadcasts that have already ended\n        //             const isAfterNow = nowInUserTimezone.isBefore(broadcastEndTime)\n        //\n        //             // Exclude if it matches state.nextBroadcastLoaded.broadcastDate && broadcastEndTime\n        //             const isNotLoadedBroadcast = !(\n        //                 state.nextBroadcastLoaded &&\n        //                 state.nextBroadcastLoaded.broadcastDate === broadcast.broadcastDate &&\n        //                 dayjs(state.nextBroadcastLoaded.broadcastDate)\n        //                     .add(state.nextBroadcastLoaded.broadcastDetails?.duration_minutes || 0, 'minute')\n        //                     .utc()\n        //                     .tz(userStore.timezone)\n        //                     .isSame(broadcastEndTime)\n        //             )\n        //\n        //             return isAfterNow && isNotLoadedBroadcast\n        //         })\n        //         .sort((a, b) => dayjs(a.broadcastDate).tz(userStore.timezone).diff(dayjs(b.broadcastDate).tz(userStore.timezone)))\n        //         .map(broadcast => ({\n        //             ...broadcast,\n        //             localDate: dayjs(broadcast.broadcastDate).tz(userStore.timezone).format(),\n        //         }))\n        //\n        //     // Exclude the first item in the sorted array\n        //     return sortedAndFilteredBroadcasts.slice(1)\n        // },\n    },\n})\n\n\n// Another option for declaring specific data to return:\n// let data = r.default;\n//\n// import('@/Json/team.json').then(r => {\n// this.$patch({\n//     name: data.name,\n//     spots: data.spots,\n//     members: data.members\n// });\n// });\n"],"names":["filterAndSortBroadcasts","broadcasts","nextBroadcastLoaded","userTimezone","nowInUserTimezone","dayjs","tz","filter","broadcast","_nextBroadcastLoaded$","broadcastEndTime","broadcastDate","add","broadcastDetails","duration_minutes","utc","isAfterNow","isBefore","isNotLoadedBroadcast","isSame","sort","a","b","diff","map","_objectSpread","localDate","format","_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","delegateYield","asyncGeneratorStep","_asyncToGenerator","arguments","apply","_next","_throw","timezone","initialState","team","shows","contributors","members","managers","teamOwner","teamLeader","can","id","description","slug","totalSpots","memberSpots","activeShow","activeEpisode","showModal","Boolean","confirmDialog","confirmManagerDialog","selectedManagerName","selectedManagerId","addManager","removeManager","deleteMemberName","deleteMemberId","noteEdit","note","noteKey","saveNoteProcessing","goLiveDisplay","openComponent","scheduleIndexId","image","category","subCategory","nextBroadcastZoomLink","useTeamStore","defineStore","state","actions","assign","this","initializeTeam","console","log","initializeShows","initializeContributors","setCan","setActiveTeam","setActiveShow","show","setActiveEpisode","episode","addMember","member","memberCount","removeMember","memberId","data","updateCreatorTeams","creatorId","teamId","remove","undefined","creator","creators","find","teams","is_manager","deleteTeamMemberCancel","confirmTeamManagerCancel","deleteTeamMember","_this","_callee","notificationStore","payload","response","_context","useNotificationStore","user_id","team_id","axios","post","route","status","setToastNotification","message","t0","error","addTeamManager","_this2","_callee2","_context2","team_slug","manager","removeTeamManager","_this3","_callee3","_context3","toggleGoLiveDisplay","fetchTeamMembers","_callee4","_context4","get","setCreators","updatePublicMessage","html","public_message","getters","spotsRemaining","Math","max","membersCount","membersCountDisplay","setManagers","setMembers","nextBroadcast","sorted","sortedBroadcasts","nextBroadcastIsOver","_nextBroadcast$broadc","userStore","useUserStore","isAfter","setTeamNextBroadcast","convertUtcToUserTimezone","firstBroadcast","zoomLink","futureBroadcasts"],"sourceRoot":""}