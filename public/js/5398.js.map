{"version":3,"file":"js/5398.js","mappings":"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","sources":["webpack:///./resources/js/Stores/NewsStore.js"],"sourcesContent":["import { defineStore } from \"pinia\";\nimport { computed, ref } from 'vue'\n\nconst initialState = () => ({\n    newsStory: [],\n    newsArticleIdTiptop: '',\n    newsArticleTitleTiptop: '',\n    newsArticleContentTiptop: '',\n    content_json: '',\n    news_category_id: null,\n    news_category_sub_id: null,\n    categories: [],\n    subcategories: [],\n    city_id: null,\n    province_id: null,\n    federal_electoral_district_id: null,\n    subnational_electoral_district_id: null,\n    type: '',\n    displayText: '',\n    country: [],\n    selectedCategory: [], // initially no selected category\n    selectedSubcategory: [],\n    selectedLocation: [], // the selected location\n    locationSearch: [], // array of locations for the dropdown\n    citySelectDropdownVisible: false, // visibility of the dropdown\n    focusedIndex: 0, // for managing focused item in the dropdown\n    searchQuery: null,\n    filters: [],\n    search: '',\n    formErrors: [],\n\n    // Computed property for displaying\n})\n\nexport const useNewsStore = defineStore('newsStore', {\n    state: initialState,\n    actions: {\n        reset() {\n            // Reset the store to its original state (clear all data)\n            Object.assign(this, initialState());\n            // await this.setSelectedLocation()\n        },\n        // load NewsStory props into NewsStore\n        loadNewsStory(newsStory) {\n            this.newsStory = newsStory;\n        },\n        // Action to set the selected Category\n        setSelectedCategory() {\n            let matchingCategory = this.categories.find(category => category.id === this.news_category_id);\n            this.selectedCategory = matchingCategory || null;\n            if (this.news_category_sub_id) {\n                this.getSubcategories() // After setting the category, get the subcategory\n                this.getSelectedSubcategory(); // Call after subcategories are populated\n            }\n            // Check if the selected category is 3 (Local News)\n            if (this.news_category_id === 3) {\n                this.setSelectedLocation(); // Set the Location for Local News\n            } else {\n                this.resetLocationIds(); // Reset location-related IDs for other categories\n            }\n        },\n        // Action to get the Subcategories\n        getSubcategories() {\n            console.log('start getting subcategories');\n\n            // Find the matching category using selectedCategory.id\n            const matchingCategory = this.categories.find(category => category.id === this.selectedCategory.id);\n\n            if (matchingCategory) {\n                // Set the subcategories from the matched category\n                this.subcategories = matchingCategory.news_category_subs;\n                console.log('subcategories updated:', this.subcategories);\n            } else {\n                // Handle the case where no matching category is found\n                this.subcategories = []; // Set subcategories to an empty array\n                console.log('No matching category found');\n            }\n        },\n\n        getSelectedSubcategory() {\n            console.log('start getting selected subcategory');\n\n            // Find the subcategory that matches the news_category_sub_id\n            const matchingSubcategory = this.subcategories.find(subcategory => subcategory.id === this.news_category_sub_id);\n\n            if (matchingSubcategory) {\n                // Set the selectedSubcategory to the found subcategory\n                this.selectedSubcategory = matchingSubcategory;\n                console.log('selected subcategory updated:', this.selectedSubcategory);\n            } else {\n                // Handle the case where no matching subcategory is found\n                this.selectedSubcategory = null;\n                console.log('No matching subcategory found');\n            }\n        },\n\n        // Action to set the selected Location\n        setSelectedLocation() {\n            let matchingLocation = null;\n\n            // Simplified conditional logic\n            if (this.city_id) {\n                matchingLocation = this.locationSearch.find(location => location.city_id === this.city_id);\n            } else if (this.province_id) {\n                matchingLocation = this.locationSearch.find(location => location.province_id === this.province_id);\n            } else if (this.federal_electoral_district_id) {\n                matchingLocation = this.locationSearch.find(location => location.federal_electoral_district_id === this.federal_electoral_district_id);\n            } else if (this.subnational_electoral_district_id) {\n                matchingLocation = this.locationSearch.find(location => location.subnational_electoral_district.id === this.subnational_electoral_district_id);\n            }\n\n            // Handling null case\n            if (matchingLocation) {\n                this.selectedLocation = matchingLocation;\n\n                // Set displayText based on type\n                switch (this.type) {\n                    case 'city':\n                        this.displayText = 'City';\n                        this.type = 'city';\n                        break;\n                    case 'town':\n                        this.displayText = 'Town';\n                        this.type = 'town';\n                        break;\n                    case 'province':\n                        this.displayText = 'Province';\n                        this.type = 'province';\n                        break;\n                    case 'territory':\n                        this.displayText = 'Territory';\n                        this.type = 'territory';\n                        break;\n                    case 'federalElectoralDistrict':\n                        this.displayText = 'Federal Electoral District';\n                        this.type = 'federalElectoralDistrict';\n                        break;\n                    case 'subnationalElectoralDistrict':\n                        this.displayText = 'Subnational Electoral District';\n                        this.type = 'subnationalElectoralDistrict';\n                        break;\n                    default:\n                        this.displayText = '';\n                        break;\n                }\n            } else {\n                // Handle the case where no matching location is found\n                this.selectedLocation = null;\n                this.selectedType = null;\n                this.city_id = null; // or keep the existing value?\n                this.type = null;\n                this.displayText = '';\n            }\n        },\n// Action to set the selected Location\n        updateSelectedLocation(location) {\n            if (!location) {\n                // Handle the case where no location is passed\n                this.selectedLocation = null;\n                this.displayText = '';\n                this.resetLocationIds(null);\n                return;\n            }\n\n            // Update the selectedLocation based on the type of location\n            this.selectedLocation = location;\n            this.displayText = this.getDisplayTextForType(location.type);\n\n            // Update the relevant IDs based on the type\n            this.city_id = null;\n            this.province_id = null;\n            this.federal_electoral_district_id = null;\n            this.subnational_electoral_district_id = null;\n\n            switch (location.type) {\n                case 'city':\n                case 'town':\n                    this.city_id = location.city_id;\n                    // Assuming province_id is also part of city data\n                    this.province_id = location.province_id || null;\n                    break;\n                case 'province':\n                case 'territory':\n                    this.province_id = location.province_id;\n                    break;\n                case 'federalElectoralDistrict':\n                    this.federal_electoral_district_id = location.federal_electoral_district_id;\n                    break;\n                case 'subnationalElectoralDistrict':\n                    this.subnational_electoral_district_id = location.subnational_electoral_district_id;\n                    break;\n                // Add more cases as needed for other types\n            }\n        },\n\n// Helper function to get display text based on type\n        getDisplayTextForType(type) {\n            switch (type) {\n                case 'city':\n                    this.type = 'city';\n                    return 'City';\n                case 'town':\n                    this.type = 'town';\n                    return 'Town';\n                case 'province':\n                    this.type = 'province';\n                    return 'Province';\n                case 'territory':\n                    this.type = 'territory';\n                    return 'Territory';\n                case 'federalElectoralDistrict':\n                    this.type = 'federalElectoralDistrict';\n                    return 'Federal Electoral District';\n                case 'subnationalElectoralDistrict':\n                    this.type = 'subnationalElectoralDistrict';\n                    return 'Subnational Electoral District';\n                default:\n                    return '';\n            }\n        },\n\n        // Helper function to reset location IDs\n        resetLocationIds(matchingLocation) {\n            this.city_id = null;\n            this.province_id = null;\n            this.federal_electoral_district_id = null;\n            this.subnational_electoral_district_id = null;\n\n            if (matchingLocation) {\n                switch (matchingLocation.type) {\n                    case 'city':\n                        this.city_id = matchingLocation.city_id;\n                        this.province_id = matchingLocation.province_id; // Assuming province_id is also part of city data\n                        break;\n                    case 'province':\n                    case 'territory':\n                        this.province_id = matchingLocation.province_id;\n                        break;\n                    case 'federalElectoralDistrict':\n                        this.federal_electoral_district_id = matchingLocation.federal_electoral_district_id;\n                        break;\n                    case 'subnationalElectoralDistrict':\n                        this.subnational_electoral_district_id = matchingLocation.subnational_electoral_district_id;\n                        break;\n                    // ... handle other types if needed\n                }\n            }\n        },\n\n    },\n\n\n})\n\n"],"names":["initialState","newsStory","newsArticleIdTiptop","newsArticleTitleTiptop","newsArticleContentTiptop","content_json","news_category_id","news_category_sub_id","categories","subcategories","city_id","province_id","federal_electoral_district_id","subnational_electoral_district_id","type","displayText","country","selectedCategory","selectedSubcategory","selectedLocation","locationSearch","citySelectDropdownVisible","focusedIndex","searchQuery","filters","search","formErrors","useNewsStore","defineStore","state","actions","reset","Object","assign","this","loadNewsStory","setSelectedCategory","_this","matchingCategory","find","category","id","getSubcategories","getSelectedSubcategory","setSelectedLocation","resetLocationIds","_this2","console","log","news_category_subs","_this3","matchingSubcategory","subcategory","_this4","matchingLocation","location","subnational_electoral_district","selectedType","updateSelectedLocation","getDisplayTextForType"],"sourceRoot":""}