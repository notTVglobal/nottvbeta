{"version":3,"file":"js/4538.js","mappings":";uUACA,gjNACO,IAAIA,GAAeC,UAAAA,IAAY,YAAa,CAC/CC,MAAO,iBAAO,CACVC,GAAI,EACJC,KAAM,GACNC,YAAa,EACbC,gBAAiB,EACjBC,qBAAsB,GACtBC,eAAgB,GAChBC,YAAa,GACbC,WAAY,GACZC,SAAU,CAAC,GACXC,SAAU,GACVC,QAAS,UACTC,cAAe,GACfC,SAAU,EACVC,KAAM,GACNC,mBAAoBC,QAEvB,EAEDC,QAAS,CACCC,KAAI,WAAG,IAtBrB,EAsBqB,cAtBrB,EAsBqB,8GACK,oCAA0B,OAApCC,EAAI,EAAH,KACL,EAAKC,OAASD,EAAC,QAAS,0CAxBpC,gLAyBQ,GAGJE,QAAS,CACL,sEC3BJC,QAA0B,GAA4B,KAE1DA,EAAwBC,KAAK,CAACC,EAAOvB,GAAI,geAAie,GAAG,CAAC,QAAU,EAAE,QAAU,CAAC,qEAAqE,MAAQ,GAAG,SAAW,2NAA2N,eAAiB,CAAC,unYAAi0X,WAAa,MAE3rZ,uOCFA,u6CC4OA,EAAe,CACXwB,MAAO,CACHC,OAAM,SAACC,EAAGC,GACFD,EAAEE,OAAS,GACXC,KAAKC,QAEb,GAGJC,KAAI,WACA,MAAO,CACHC,KAAM,KACNP,OAAQ,GACRQ,SAAU,EAElB,EAEAC,SAAU,CACNC,SAAQ,WACJ,OAAOC,KAAKC,MAAuB,IAAhBR,KAAKI,SAAkBJ,KAAKG,KAAKM,KACxD,EACAC,SAAQ,WACJ,IAAIA,EAAW,IAAIC,SAKnB,OAHAD,EAASE,IAAI,UAAkC,IAAvBZ,KAAKJ,OAAOG,QACpCW,EAASE,IAAI,OAAQZ,KAAKJ,OAAO,GAAI,GAAF,OAAKI,KAAKG,KAAK/B,KAAI,UAE/CsC,CACX,EACAG,OAAM,WAAG,WACL,MAAO,CACHC,OAAQ,OACRZ,KAAMF,KAAKU,SACXK,IAAK,gBACLC,QAAS,CACL,eAAgB,4BAEpBC,iBAAkB,SAAAC,GACd,EAAKd,UAAYc,EAAMC,MAC3B,EAER,GAGJC,QAAS,CACLC,OAAM,SAACH,GACHlB,KAAKG,KAAOe,EAAMI,OAAOC,MAAMC,KAAK,GACpCxB,KAAKyB,cACT,EACAxB,OAAM,WAAG,WACLyB,MAAM1B,KAAKa,QAAQc,MAAK,SAAAC,GACpB,EAAKhC,OAAOiC,OAChB,IAAE,OAAO,SAAAC,GAAU,GACvB,EACAL,aAAY,WAGR,IAFA,IAAIhB,EAAO,KAAMb,EAASW,KAAKwB,KAAK/B,KAAKG,KAAKM,KAAOA,GAE5CuB,EAAI,EAAGA,EAAIpC,EAAQoC,IACxBhC,KAAKJ,OAAOH,KAAKO,KAAKG,KAAK8B,MACvBD,EAAIvB,EAAMF,KAAK2B,IAAIF,EAAIvB,EAAOA,EAAMT,KAAKG,KAAKM,MAAOT,KAAKG,KAAKgC,MAG3E,kKApJJC,GAAmBC,EAAAA,EAAAA,KAGnBC,IAFYC,EAAAA,EAAAA,MACAvE,EAAAA,EAAAA,MACAwE,EAAAA,EAAAA,MAEhBJ,EAAiBK,YAAc,UAE/BC,EAAAA,EAAAA,gBAAc,WACVJ,EAAUK,mBAAqB,CACnC,KAEAC,EAAAA,EAAAA,YAAU,WACNR,EAAiBS,oBACoB,IAAjCP,EAAUK,qBACVG,SAASC,eAAe,UAAUC,iBAClCV,EAAUK,qBAElB,IAgBA,IAAIM,GAAcC,EAAAA,EAAAA,MAAI,25CCzLlBC,EAAU,CAEdA,OAAiB,OACjBA,WAAoB,GAEP,IAAI,IAASA,GAIX,WCNf,MAEA,GAFiC,aAAgB,EAAQ,CAAC,CAAC,YAAY","sources":["webpack:///./resources/js/Stores/ShowStore.js","webpack:///./resources/js/Pages/Movies/Upload.chunk.notWorking.vue?c852","webpack:///./resources/js/Components/Modals/Messages.vue","webpack:///./resources/js/Pages/Movies/Upload.chunk.notWorking.vue","webpack:///./resources/js/Pages/Movies/Upload.chunk.notWorking.vue?a235","webpack:///./resources/js/Pages/Movies/Upload.chunk.notWorking.vue?23c1"],"sourcesContent":["import { defineStore } from \"pinia\";\n\nexport let useShowStore = defineStore('showStore', {\n    state: () => ({\n        id: 0,\n        name: '',\n        category_id: 0,\n        category_sub_id: 0,\n        category_description: '',\n        sub_categories: [],\n        description: '',\n        posterName: [],\n        posterId: [0],\n        episodes: [],\n        team_id: 'team id',\n        episodePoster: '',\n        noteEdit: 0,\n        note: '',\n        saveNoteProcessing: Boolean,\n\n    }),\n\n    actions: {\n        async fill() {\n            let r = await import('@/Json/show.json');\n            this.$state = r.default;\n        }\n    },\n\n    getters: {\n        //\n    }\n});\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".dropzone[data-v-dfe36528]{align-items:center;border:2px dashed #6b7280;display:flex;flex-direction:column;height:200px;justify-content:center;row-gap:16px;transition:all .3s ease;width:400px}label[data-v-dfe36528]{padding:8px 12px;transition:all .3s ease}.active-dropzone[data-v-dfe36528],label[data-v-dfe36528]{background-color:#4bb1b1;color:#fff}.active-dropzone[data-v-dfe36528]{border-color:#fff}.active-dropzone label[data-v-dfe36528]{background-color:#fff;color:#4bb1b1}\", \"\",{\"version\":3,\"sources\":[\"webpack://./resources/js/Pages/Movies/Upload.chunk.notWorking.vue\"],\"names\":[],\"mappings\":\"AAqTA,2BAMI,kBAAmB,CAEnB,yBAA0B,CAL1B,YAAa,CACb,qBAAsB,CAFtB,YAAa,CAGb,sBAAuB,CAEvB,YAAa,CAEb,uBAAyB,CARzB,WASJ,CAEA,uBACI,gBAAiB,CAGjB,uBACJ,CAEA,yDAJI,wBAAyB,CADzB,UASJ,CAJA,kCAEI,iBAEJ,CAEA,wCACQ,qBAAsB,CACtB,aACJ\",\"sourcesContent\":[\"<template>\\n\\n    <Head :title=\\\"`Upload Movie`\\\"/>\\n\\n    <div id=\\\"topDiv\\\"></div>\\n    <header class=\\\"md:pageWidth pageWidthSmall\\\">\\n\\n        <Message v-if=\\\"showMessage\\\" @close=\\\"showMessage = false\\\"/>\\n\\n        <div class=\\\"flex justify-between p-4 m-4 text-sm text-red-700 bg-red-100 rounded-lg dark:bg-red-200 dark:text-red-800\\\"\\n             role=\\\"alert\\\"\\n             v-if=\\\"props.errors.video\\\">\\n                <span class=\\\"font-medium\\\">\\n                    {{ props.errors.video }}\\n                </span>\\n        </div>\\n\\n    </header>\\n\\n\\n    <div class=\\\"place-self-center flex flex-col gap-y-3\\\">\\n        <div class=\\\"bg-white text-black p-5 mb-10\\\">\\n\\n            <div class=\\\"flex justify-between mb-3\\\">\\n                <div class=\\\"mb-4\\\">\\n                    <h1 class=\\\"text-3xl font-semibold\\\">Movie Upload</h1>\\n                </div>\\n                <div>\\n                    <div class=\\\"flex flex-wrap-reverse justify-end gap-2\\\">\\n                        <Link :href=\\\"`/dashboard`\\\">\\n                            <button\\n                                class=\\\"px-4 py-2 text-white bg-blue-600 hover:bg-blue-500 rounded-lg\\\"\\n                            >Dashboard\\n                            </button>\\n                        </Link>\\n                    </div>\\n                </div>\\n            </div>\\n\\n            <div>\\n<!--                <form @submit.prevent=\\\"submit\\\" enctype=\\\"multipart/form-data\\\">-->\\n<!--                    <div class=\\\"bg-orange-800 text-white p-4 mb-6\\\"><span class=\\\"font-semibold\\\">Note:</span> File uploads are limited to 500 MB until we implement a chunk method.-->\\n<!--                    This will require storing the uploaded file on the server in a temp directory, then we can process it and encrypt it using-->\\n<!--                    FFMPEG and finally upload it to our destination(s), whether that is Digital Ocean Spaces, an attached volume, remote server,-->\\n<!--                    or a Peer-to-peer distribution network. We also need to implement file validation and restrict the filetypes that can be uploaded.<br>-->\\n<!--                    For more info about chunking go to:-->\\n<!--                        <a href=\\\"https://github.com/pionl/laravel-chunk-upload\\\" class=\\\"text-blue-400 hover:text-blue-200\\\" target=\\\"_blank\\\">-->\\n<!--                            https://github.com/pionl/laravel-chunk-upload</a>-->\\n<!--                        <br><br>-->\\n<!--                        Also look at: <a href=\\\"https://pineco.de/chunked-file-upload-with-laravel-and-vue/\\\" class=\\\"text-blue-400 hover:text-blue-200\\\" target=\\\"_blank\\\">-->\\n<!--                            https://pineco.de/chunked-file-upload-with-laravel-and-vue/-->\\n<!--                        </a>-->\\n<!--                    </div>-->\\n<!--                    <input-->\\n<!--                        v-model=\\\"form.name\\\"-->\\n<!--                        type=\\\"text\\\"-->\\n<!--                        name=\\\"name\\\"-->\\n<!--                        id=\\\"name\\\"-->\\n<!--                        class=\\\"border border-gray-400 rounded w-full px-2 py-2 my-2\\\"-->\\n<!--                        placeholder=\\\"Movie Title\\\"-->\\n<!--                    />-->\\n<!--                    <div v-if=\\\"form.errors.name\\\" v-text=\\\"form.errors.name\\\"-->\\n<!--                         class=\\\"bg-red-600 p-2 w-full text-white font-semibold mt-1\\\"></div>-->\\n<!--                    <textarea-->\\n<!--                        v-model=\\\"form.description\\\"-->\\n<!--                        type=\\\"text\\\"-->\\n<!--                        name=\\\"description\\\"-->\\n<!--                        id=\\\"description\\\"-->\\n<!--                        cols=\\\"30\\\"-->\\n<!--                        row=\\\"20\\\"-->\\n<!--                        class=\\\"border border-gray-400 rounded w-full px-2 py-2 my-2\\\"-->\\n<!--                        placeholder=\\\"Description\\\"-->\\n<!--                    />-->\\n<!--                    <div v-if=\\\"form.errors.description\\\" v-text=\\\"form.errors.description\\\"-->\\n<!--                         class=\\\"bg-red-600 p-2 w-full text-white font-semibold mt-1\\\"></div>-->\\n<!--                    <input-->\\n<!--                        v-model=\\\"form.file_url\\\"-->\\n<!--                        type=\\\"text\\\"-->\\n<!--                        name=\\\"file_url\\\"-->\\n<!--                        id=\\\"file_url\\\"-->\\n<!--                        class=\\\"border border-gray-400 rounded w-full px-2 py-2 my-2\\\"-->\\n<!--                        placeholder=\\\"Link to existing video file (optional)\\\"-->\\n<!--                    />-->\\n<!--                    <div v-if=\\\"form.errors.file_url\\\" v-text=\\\"form.errors.file_url\\\"-->\\n<!--                         class=\\\"bg-red-600 p-2 w-full text-white font-semibold mt-1\\\"></div>-->\\n\\n<!--                    <div-->\\n<!--                        @dragenter.prevent=\\\"toggleActive\\\"-->\\n<!--                        @dragleave.prevent=\\\"toggleActive\\\"-->\\n<!--                        @dragover.prevent-->\\n<!--                        @drop.prevent=\\\"drop\\\"-->\\n<!--                        :class=\\\"{ 'active-dropzone': active }\\\"-->\\n<!--                        class=\\\"dropzone mt-4\\\">-->\\n<!--                        <span>Drag or Drop Video</span>-->\\n<!--                        <span>OR</span>-->\\n<!--                        <label for=\\\"dropzoneFile\\\" class=\\\"cursor-pointer hover:bg-gray-600\\\">Select Video</label>-->\\n<!--                        <input-->\\n<!--                            type=\\\"file\\\"-->\\n<!--                            name=\\\"video\\\"-->\\n<!--                            id=\\\"dropzoneFile\\\"-->\\n<!--                            class=\\\"dropzoneFile border border-gray-400 rounded w-full px-2 py-2 my-2\\\"-->\\n<!--                            @change=\\\"selectedFile\\\"-->\\n<!--                            ref=\\\"fileInput\\\"-->\\n<!--                            accept=\\\"video/*\\\"-->\\n<!--                            @input=\\\"form.video = $event.target.files[0]\\\"-->\\n<!--                            style=\\\"display: none\\\"/>-->\\n<!--                    </div>-->\\n\\n<!--                    <progress :value=\\\"progress\\\"></progress>-->\\n\\n<!--                    <div class=\\\"mt-2\\\">File: {{ dropzoneFile.name }}</div>-->\\n\\n<!--                    <div v-if=\\\"form.errors.video\\\" v-text=\\\"form.errors.video\\\"-->\\n<!--                         class=\\\"bg-red-600 p-2 w-full text-white font-semibold mt-1\\\"></div>-->\\n\\n\\n<!--                    <button-->\\n<!--                        @click=\\\"submit\\\"-->\\n<!--                        class=\\\"bg-green-600 hover:bg-green-500 text-white rounded py-2 px-4 mt-2\\\"-->\\n<!--                        :disabled=\\\"form.processing\\\"-->\\n<!--                    >-->\\n<!--                        Upload-->\\n<!--                    </button>-->\\n\\n<!--                </form>-->\\n\\n                <div> New chunk uploader</div>\\n                <input\\n                    type=\\\"file\\\"\\n                    @change=\\\"select\\\"\\n                    name=\\\"video\\\"\\n                    class=\\\"dropzoneFile border border-gray-400 rounded w-full px-2 py-2 my-2\\\"\\n                    ref=\\\"fileInputChunk\\\"\\n                    accept=\\\"video/*\\\"\\n                    @input=\\\"form.video = $event.target.files[0]\\\"\\n                    />\\n                >\\n                <progress :value=\\\"progress\\\" class=\\\"w-full\\\"></progress>\\n\\n            </div>\\n\\n        </div>\\n    </div>\\n\\n</template>\\n\\n<script setup>\\nimport Message from \\\"@/Components/Modals/Messages\\\"\\nimport {ref, onMounted, onBeforeMount} from \\\"vue\\\"\\n\\nimport { useVideoPlayerStore } from \\\"@/Stores/VideoPlayerStore.js\\\"\\nimport { useTeamStore } from \\\"@/Stores/TeamStore.js\\\"\\nimport { useShowStore } from \\\"@/Stores/ShowStore.js\\\"\\nimport {useUserStore} from \\\"@/Stores/UserStore\\\";\\n\\nlet videoPlayerStore = useVideoPlayerStore()\\nlet teamStore = useTeamStore()\\nlet showStore = useShowStore()\\nlet userStore = useUserStore()\\n\\nvideoPlayerStore.currentPage = 'movies'\\n\\nonBeforeMount(() => {\\n    userStore.scrollToTopCounter = 0;\\n})\\n\\nonMounted(() => {\\n    videoPlayerStore.makeVideoTopRight();\\n    if (userStore.scrollToTopCounter === 0 ) {\\n        document.getElementById(\\\"topDiv\\\").scrollIntoView()\\n        userStore.scrollToTopCounter ++;\\n    }\\n});\\n\\nlet props = defineProps({\\n    message: ref(''),\\n    errors: ref(''),\\n    isHidden: ref(false),\\n    // filters: Object,\\n});\\n\\n// let form = useForm({\\n//     name: '',\\n//     description: '',\\n//     video: '',\\n//     file_url: '',\\n// });\\n\\nlet showMessage = ref(true);\\n\\n// Dropzone tutorial: https://www.youtube.com/watch?v=wWKhKPN_Pmw\\n\\n// let dropzoneFile = ref([]);\\n// // let chunks = ref([]);\\n// //\\n// const active = ref(false);\\n// //\\n// const toggleActive = () => {\\n//     active.value = !active.value;\\n// }\\n// //\\n// //\\n// //\\n// const drop = (e) => {\\n//     dropzoneFile.value = e.dataTransfer.files[0];\\n//     active.value = !active.value;\\n// }\\n// //\\n// const selectedFile = () => {\\n//     dropzoneFile.value = document.querySelector('.dropzoneFile').files[0];\\n// }\\n//\\n// const createChunks = (e) => {\\n//     let size = 2048,\\n//         chunks = Math.ceil(e.file.size / size);\\n//\\n//     for ( let i = 0; i < chunks; i++ ) {\\n//         e.chunks.push(e.file.slice(\\n//             i * size, Math.min(i * size + size, e.file.size), e.file.type\\n//         ));\\n//     }\\n// }\\n//\\n// function upload() {\\n//     axios(this.config).then(response => {\\n//         this.chunks.shift();\\n//     }).catch(error => {});\\n// }\\n//\\n\\n//\\nlet submit = () => {\\n    // form.append('form', json);\\n    // axios.post(\\\"/movies/upload\\\", form.data);\\n    form.post(route('movies.store', form));\\n};\\n\\n\\n</script>\\n\\n<script>\\nexport default {\\n    watch: {\\n        chunks(n, o) {\\n            if (n.length > 0) {\\n                this.upload();\\n            }\\n        }\\n    },\\n\\n    data() {\\n        return {\\n            file: null,\\n            chunks: [],\\n            uploaded: 0\\n        };\\n    },\\n\\n    computed: {\\n        progress() {\\n            return Math.floor((this.uploaded * 100) / this.file.size);\\n        },\\n        formData() {\\n            let formData = new FormData;\\n\\n            formData.set('is_last', this.chunks.length === 1);\\n            formData.set('file', this.chunks[0], `${this.file.name}.part`);\\n\\n            return formData;\\n        },\\n        config() {\\n            return {\\n                method: 'POST',\\n                data: this.formData,\\n                url: 'movies/upload',\\n                headers: {\\n                    'Content-Type': 'application/octet-stream'\\n                },\\n                onUploadProgress: event => {\\n                    this.uploaded += event.loaded;\\n                }\\n            };\\n        }\\n    },\\n\\n    methods: {\\n        select(event) {\\n            this.file = event.target.files.item(0);\\n            this.createChunks();\\n        },\\n        upload() {\\n            axios(this.config).then(response => {\\n                this.chunks.shift();\\n            }).catch(error => {});\\n        },\\n        createChunks() {\\n            let size = 2048, chunks = Math.ceil(this.file.size / size);\\n\\n            for (let i = 0; i < chunks; i++) {\\n                this.chunks.push(this.file.slice(\\n                    i * size, Math.min(i * size + size, this.file.size), this.file.type\\n                ));\\n            }\\n        }\\n    }\\n}\\n</script>\\n\\n<style scoped>\\n.dropzone {\\n    width: 400px;\\n    height: 200px;\\n    display: flex;\\n    flex-direction: column;\\n    justify-content: center;\\n    align-items: center;\\n    row-gap: 16px;\\n    border: 2px dashed #6b7280;\\n    transition: 0.3s ease all;\\n}\\n\\nlabel {\\n    padding: 8px 12px;\\n    color: #fff;\\n    background-color: #4bb1b1;\\n    transition: 0.3s ease all;\\n}\\n\\n.active-dropzone {\\n    color: #fff;\\n    border-color: #fff;\\n    background-color: #4bb1b1;\\n}\\n\\n.active-dropzone  label {\\n        background-color: #fff;\\n        color: #4bb1b1;\\n    }\\n\\n\\n</style>\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","import script from \"./Messages.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Messages.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n\n    <Head :title=\"`Upload Movie`\"/>\n\n    <div id=\"topDiv\"></div>\n    <header class=\"md:pageWidth pageWidthSmall\">\n\n        <Message v-if=\"showMessage\" @close=\"showMessage = false\"/>\n\n        <div class=\"flex justify-between p-4 m-4 text-sm text-red-700 bg-red-100 rounded-lg dark:bg-red-200 dark:text-red-800\"\n             role=\"alert\"\n             v-if=\"props.errors.video\">\n                <span class=\"font-medium\">\n                    {{ props.errors.video }}\n                </span>\n        </div>\n\n    </header>\n\n\n    <div class=\"place-self-center flex flex-col gap-y-3\">\n        <div class=\"bg-white text-black p-5 mb-10\">\n\n            <div class=\"flex justify-between mb-3\">\n                <div class=\"mb-4\">\n                    <h1 class=\"text-3xl font-semibold\">Movie Upload</h1>\n                </div>\n                <div>\n                    <div class=\"flex flex-wrap-reverse justify-end gap-2\">\n                        <Link :href=\"`/dashboard`\">\n                            <button\n                                class=\"px-4 py-2 text-white bg-blue-600 hover:bg-blue-500 rounded-lg\"\n                            >Dashboard\n                            </button>\n                        </Link>\n                    </div>\n                </div>\n            </div>\n\n            <div>\n<!--                <form @submit.prevent=\"submit\" enctype=\"multipart/form-data\">-->\n<!--                    <div class=\"bg-orange-800 text-white p-4 mb-6\"><span class=\"font-semibold\">Note:</span> File uploads are limited to 500 MB until we implement a chunk method.-->\n<!--                    This will require storing the uploaded file on the server in a temp directory, then we can process it and encrypt it using-->\n<!--                    FFMPEG and finally upload it to our destination(s), whether that is Digital Ocean Spaces, an attached volume, remote server,-->\n<!--                    or a Peer-to-peer distribution network. We also need to implement file validation and restrict the filetypes that can be uploaded.<br>-->\n<!--                    For more info about chunking go to:-->\n<!--                        <a href=\"https://github.com/pionl/laravel-chunk-upload\" class=\"text-blue-400 hover:text-blue-200\" target=\"_blank\">-->\n<!--                            https://github.com/pionl/laravel-chunk-upload</a>-->\n<!--                        <br><br>-->\n<!--                        Also look at: <a href=\"https://pineco.de/chunked-file-upload-with-laravel-and-vue/\" class=\"text-blue-400 hover:text-blue-200\" target=\"_blank\">-->\n<!--                            https://pineco.de/chunked-file-upload-with-laravel-and-vue/-->\n<!--                        </a>-->\n<!--                    </div>-->\n<!--                    <input-->\n<!--                        v-model=\"form.name\"-->\n<!--                        type=\"text\"-->\n<!--                        name=\"name\"-->\n<!--                        id=\"name\"-->\n<!--                        class=\"border border-gray-400 rounded w-full px-2 py-2 my-2\"-->\n<!--                        placeholder=\"Movie Title\"-->\n<!--                    />-->\n<!--                    <div v-if=\"form.errors.name\" v-text=\"form.errors.name\"-->\n<!--                         class=\"bg-red-600 p-2 w-full text-white font-semibold mt-1\"></div>-->\n<!--                    <textarea-->\n<!--                        v-model=\"form.description\"-->\n<!--                        type=\"text\"-->\n<!--                        name=\"description\"-->\n<!--                        id=\"description\"-->\n<!--                        cols=\"30\"-->\n<!--                        row=\"20\"-->\n<!--                        class=\"border border-gray-400 rounded w-full px-2 py-2 my-2\"-->\n<!--                        placeholder=\"Description\"-->\n<!--                    />-->\n<!--                    <div v-if=\"form.errors.description\" v-text=\"form.errors.description\"-->\n<!--                         class=\"bg-red-600 p-2 w-full text-white font-semibold mt-1\"></div>-->\n<!--                    <input-->\n<!--                        v-model=\"form.file_url\"-->\n<!--                        type=\"text\"-->\n<!--                        name=\"file_url\"-->\n<!--                        id=\"file_url\"-->\n<!--                        class=\"border border-gray-400 rounded w-full px-2 py-2 my-2\"-->\n<!--                        placeholder=\"Link to existing video file (optional)\"-->\n<!--                    />-->\n<!--                    <div v-if=\"form.errors.file_url\" v-text=\"form.errors.file_url\"-->\n<!--                         class=\"bg-red-600 p-2 w-full text-white font-semibold mt-1\"></div>-->\n\n<!--                    <div-->\n<!--                        @dragenter.prevent=\"toggleActive\"-->\n<!--                        @dragleave.prevent=\"toggleActive\"-->\n<!--                        @dragover.prevent-->\n<!--                        @drop.prevent=\"drop\"-->\n<!--                        :class=\"{ 'active-dropzone': active }\"-->\n<!--                        class=\"dropzone mt-4\">-->\n<!--                        <span>Drag or Drop Video</span>-->\n<!--                        <span>OR</span>-->\n<!--                        <label for=\"dropzoneFile\" class=\"cursor-pointer hover:bg-gray-600\">Select Video</label>-->\n<!--                        <input-->\n<!--                            type=\"file\"-->\n<!--                            name=\"video\"-->\n<!--                            id=\"dropzoneFile\"-->\n<!--                            class=\"dropzoneFile border border-gray-400 rounded w-full px-2 py-2 my-2\"-->\n<!--                            @change=\"selectedFile\"-->\n<!--                            ref=\"fileInput\"-->\n<!--                            accept=\"video/*\"-->\n<!--                            @input=\"form.video = $event.target.files[0]\"-->\n<!--                            style=\"display: none\"/>-->\n<!--                    </div>-->\n\n<!--                    <progress :value=\"progress\"></progress>-->\n\n<!--                    <div class=\"mt-2\">File: {{ dropzoneFile.name }}</div>-->\n\n<!--                    <div v-if=\"form.errors.video\" v-text=\"form.errors.video\"-->\n<!--                         class=\"bg-red-600 p-2 w-full text-white font-semibold mt-1\"></div>-->\n\n\n<!--                    <button-->\n<!--                        @click=\"submit\"-->\n<!--                        class=\"bg-green-600 hover:bg-green-500 text-white rounded py-2 px-4 mt-2\"-->\n<!--                        :disabled=\"form.processing\"-->\n<!--                    >-->\n<!--                        Upload-->\n<!--                    </button>-->\n\n<!--                </form>-->\n\n                <div> New chunk uploader</div>\n                <input\n                    type=\"file\"\n                    @change=\"select\"\n                    name=\"video\"\n                    class=\"dropzoneFile border border-gray-400 rounded w-full px-2 py-2 my-2\"\n                    ref=\"fileInputChunk\"\n                    accept=\"video/*\"\n                    @input=\"form.video = $event.target.files[0]\"\n                    />\n                >\n                <progress :value=\"progress\" class=\"w-full\"></progress>\n\n            </div>\n\n        </div>\n    </div>\n\n</template>\n\n<script setup>\nimport Message from \"@/Components/Modals/Messages\"\nimport {ref, onMounted, onBeforeMount} from \"vue\"\n\nimport { useVideoPlayerStore } from \"@/Stores/VideoPlayerStore.js\"\nimport { useTeamStore } from \"@/Stores/TeamStore.js\"\nimport { useShowStore } from \"@/Stores/ShowStore.js\"\nimport {useUserStore} from \"@/Stores/UserStore\";\n\nlet videoPlayerStore = useVideoPlayerStore()\nlet teamStore = useTeamStore()\nlet showStore = useShowStore()\nlet userStore = useUserStore()\n\nvideoPlayerStore.currentPage = 'movies'\n\nonBeforeMount(() => {\n    userStore.scrollToTopCounter = 0;\n})\n\nonMounted(() => {\n    videoPlayerStore.makeVideoTopRight();\n    if (userStore.scrollToTopCounter === 0 ) {\n        document.getElementById(\"topDiv\").scrollIntoView()\n        userStore.scrollToTopCounter ++;\n    }\n});\n\nlet props = defineProps({\n    message: ref(''),\n    errors: ref(''),\n    isHidden: ref(false),\n    // filters: Object,\n});\n\n// let form = useForm({\n//     name: '',\n//     description: '',\n//     video: '',\n//     file_url: '',\n// });\n\nlet showMessage = ref(true);\n\n// Dropzone tutorial: https://www.youtube.com/watch?v=wWKhKPN_Pmw\n\n// let dropzoneFile = ref([]);\n// // let chunks = ref([]);\n// //\n// const active = ref(false);\n// //\n// const toggleActive = () => {\n//     active.value = !active.value;\n// }\n// //\n// //\n// //\n// const drop = (e) => {\n//     dropzoneFile.value = e.dataTransfer.files[0];\n//     active.value = !active.value;\n// }\n// //\n// const selectedFile = () => {\n//     dropzoneFile.value = document.querySelector('.dropzoneFile').files[0];\n// }\n//\n// const createChunks = (e) => {\n//     let size = 2048,\n//         chunks = Math.ceil(e.file.size / size);\n//\n//     for ( let i = 0; i < chunks; i++ ) {\n//         e.chunks.push(e.file.slice(\n//             i * size, Math.min(i * size + size, e.file.size), e.file.type\n//         ));\n//     }\n// }\n//\n// function upload() {\n//     axios(this.config).then(response => {\n//         this.chunks.shift();\n//     }).catch(error => {});\n// }\n//\n\n//\nlet submit = () => {\n    // form.append('form', json);\n    // axios.post(\"/movies/upload\", form.data);\n    form.post(route('movies.store', form));\n};\n\n\n</script>\n\n<script>\nexport default {\n    watch: {\n        chunks(n, o) {\n            if (n.length > 0) {\n                this.upload();\n            }\n        }\n    },\n\n    data() {\n        return {\n            file: null,\n            chunks: [],\n            uploaded: 0\n        };\n    },\n\n    computed: {\n        progress() {\n            return Math.floor((this.uploaded * 100) / this.file.size);\n        },\n        formData() {\n            let formData = new FormData;\n\n            formData.set('is_last', this.chunks.length === 1);\n            formData.set('file', this.chunks[0], `${this.file.name}.part`);\n\n            return formData;\n        },\n        config() {\n            return {\n                method: 'POST',\n                data: this.formData,\n                url: 'movies/upload',\n                headers: {\n                    'Content-Type': 'application/octet-stream'\n                },\n                onUploadProgress: event => {\n                    this.uploaded += event.loaded;\n                }\n            };\n        }\n    },\n\n    methods: {\n        select(event) {\n            this.file = event.target.files.item(0);\n            this.createChunks();\n        },\n        upload() {\n            axios(this.config).then(response => {\n                this.chunks.shift();\n            }).catch(error => {});\n        },\n        createChunks() {\n            let size = 2048, chunks = Math.ceil(this.file.size / size);\n\n            for (let i = 0; i < chunks; i++) {\n                this.chunks.push(this.file.slice(\n                    i * size, Math.min(i * size + size, this.file.size), this.file.type\n                ));\n            }\n        }\n    }\n}\n</script>\n\n<style scoped>\n.dropzone {\n    width: 400px;\n    height: 200px;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    row-gap: 16px;\n    border: 2px dashed #6b7280;\n    transition: 0.3s ease all;\n}\n\nlabel {\n    padding: 8px 12px;\n    color: #fff;\n    background-color: #4bb1b1;\n    transition: 0.3s ease all;\n}\n\n.active-dropzone {\n    color: #fff;\n    border-color: #fff;\n    background-color: #4bb1b1;\n}\n\n.active-dropzone  label {\n        background-color: #fff;\n        color: #4bb1b1;\n    }\n\n\n</style>\n","import api from \"!../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../../node_modules/css-loader/dist/cjs.js??clonedRuleSet-9.use[1]!../../../../node_modules/vue-loader/dist/stylePostLoader.js!../../../../node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-9.use[2]!../../../../node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./Upload.chunk.notWorking.vue?vue&type=style&index=0&id=dfe36528&scoped=true&lang=css\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","import script from \"./Upload.chunk.notWorking.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Upload.chunk.notWorking.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./Upload.chunk.notWorking.vue?vue&type=style&index=0&id=dfe36528&scoped=true&lang=css\"\n\nimport exportComponent from \"/var/www/nottvbeta/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-dfe36528\"]])\n\nexport default __exports__"],"names":["useShowStore","defineStore","state","id","name","category_id","category_sub_id","category_description","sub_categories","description","posterName","posterId","episodes","team_id","episodePoster","noteEdit","note","saveNoteProcessing","Boolean","actions","fill","r","$state","getters","___CSS_LOADER_EXPORT___","push","module","watch","chunks","n","o","length","this","upload","data","file","uploaded","computed","progress","Math","floor","size","formData","FormData","set","config","method","url","headers","onUploadProgress","event","loaded","methods","select","target","files","item","createChunks","axios","then","response","shift","error","ceil","i","slice","min","type","videoPlayerStore","useVideoPlayerStore","userStore","useTeamStore","useUserStore","currentPage","onBeforeMount","scrollToTopCounter","onMounted","makeVideoTopRight","document","getElementById","scrollIntoView","showMessage","ref","options"],"sourceRoot":""}