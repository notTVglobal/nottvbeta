{"version":3,"file":"js/4634.js","mappings":";68CAKA,mFCFA,IAAMA,EAAQC,EAORC,GAAcC,EAAAA,EAAAA,OAAMH,EAAO,YAE3BI,GAAgBC,EAAAA,EAAAA,WAAS,WAC3B,OAAOH,EAAYI,MAAMC,KAAI,SAACC,GAE1B,IAAMC,EAAkB,eAClBC,EAAqBF,EAAEG,MAAMF,GACnC,OAAAG,EAAAA,EAAA,GACQF,GAAsB,CAACG,cAAeH,EAAmB,KAAG,IAChEI,QAASN,EAAEO,QAAQN,EAAiB,KAAOD,GAEnD,GACJ,qYAE2BK,kBAChB,8CAAPG,OAAqDH,sFAD/B,IAACA,qmOCnB3B,uCCCA,IAIII,EAJEC,GAAWC,EAAAA,EAAAA,KAAI,IACfC,GAAeD,EAAAA,EAAAA,KAAI,WAKzBE,EAAAA,EAAAA,WAASC,EAAAC,IAAAC,MAAC,SAAAC,IAAA,IAAAC,EAAAC,EAAAC,EAAAC,EAAAhB,EAAA,OAAAU,IAAAO,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EAC2BC,MAAM,eAAeC,MAAK,SAACC,GAAG,OAAKA,EAAIC,MAAM,IAAC,OAAzD,OAAyDX,EAAAK,EAAAO,KAAvEX,EAAcD,EAAdC,eAAcI,EAAAE,KAAA,GACPM,EAAAA,EAAAA,GAAWZ,GAAe,OAAnC,OAANV,EAAMc,EAAAO,KAAAP,EAAAE,KAAG,EAE4BhB,EAAOuB,sBACxCpB,EAAad,OAChB,OAAAsB,EAAAG,EAAAO,KAFMT,EAAKD,EAALC,MAAOhB,EAAae,EAAbf,cAIVgB,GACAX,EAASZ,MAAMmC,OAAOZ,EAAMa,SAEhCxB,EAASZ,MAAMqC,KAAK,WAAD3B,OAAYH,EAAc+B,OAAM,MAAA5B,OAAKH,EAAcgC,KAAK,yBAAAd,EAAAe,OAAA,GAAArB,EAAA","sources":["webpack:///./resources/js/Pages/SrMessages.vue?c45d","webpack:///./resources/js/Pages/SrMessages.vue","webpack:///./resources/js/Pages/SrReturn.vue?f533","webpack:///./resources/js/Pages/SrReturn.vue"],"sourcesContent":["import script from \"./SrMessages.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./SrMessages.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<script setup>\nimport { defineProps, computed, toRef } from 'vue';\n\nconst props = defineProps({\n    messages: {\n        type: Array,\n        required: true\n    }\n});\n\nconst messagesRef = toRef(props, 'messages');\n\nconst splitMessages = computed(() => {\n    return messagesRef.value.map((x) => {\n\n        const paymentIntentRe = /(pi_(\\S*)\\b)/\n        const paymentIntentMatch = x.match(paymentIntentRe)\n        return {\n            ...(paymentIntentMatch && {paymentIntent: paymentIntentMatch[0]}),\n            content: x.replace(paymentIntentRe, '') || x\n        }\n    });\n})\n\nconst addDashboardLinks = (paymentIntent) => {\n    return `https://dashboard.stripe.com/test/payments/${paymentIntent}`;\n};\n\n</script>\n<template>\n    <div\n        id=\"messages\"\n        role=\"alert\"\n    >\n    <span\n        v-for=\"message in splitMessages\"\n        :key=\"message\"\n    >\n      > {{ message.content }}<a\n        v-if=\"message.paymentIntent\"\n        :href=\"addDashboardLinks(message.paymentIntent)\"\n    >{{ message.paymentIntent }}</a>\n      <br>\n    </span>\n    </div>\n</template>\n","import script from \"./SrReturn.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./SrReturn.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<script setup>\nimport { ref, onMounted, computed } from \"vue\";\nimport { loadStripe } from \"@stripe/stripe-js\";\n\nimport SrMessages from \"./SrMessages.vue\";\n\nconst messages = ref([]);\nconst clientSecret = ref('');\n\n\nlet stripe;\n\nonMounted(async () => {\n    const { publishableKey } = await fetch(\"/api/config\").then((res) => res.json());\n    stripe = await loadStripe(publishableKey);\n\n    const {error, paymentIntent} = await stripe.retrievePaymentIntent(\n        clientSecret.value,\n    );\n\n    if (error) {\n        messages.value.append(error.message);\n    }\n    messages.value.push(`Payment ${paymentIntent.status}: ${paymentIntent.id}`)\n});\n\n</script>\n\n<template>\n    <body>\n    <main>\n        <a href=\"/\">home</a>\n        <h1>Thank you!</h1>\n        <sr-messages\n            v-if=\"clientSecret\"\n            :messages=\"messages\"\n        />\n    </main>\n    </body>\n</template>\n"],"names":["props","__props","messagesRef","toRef","splitMessages","computed","value","map","x","paymentIntentRe","paymentIntentMatch","match","_objectSpread","paymentIntent","content","replace","concat","stripe","messages","ref","clientSecret","onMounted","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_yield$fetch$then","publishableKey","_yield$stripe$retriev","error","wrap","_context","prev","next","fetch","then","res","json","sent","loadStripe","retrievePaymentIntent","append","message","push","status","id","stop"],"sourceRoot":""}