{"version":3,"file":"js/8625.js","mappings":"8IAEMA,EAAe,WAAH,MAAU,CACxBC,QAAS,KACTC,aAAc,OACjB,EAEYC,GAAiBC,EAAAA,EAAAA,IAAY,cAAe,CACrDC,MAAOL,EACPM,QAAS,CACLC,MAAK,WAEDC,OAAOC,OAAOC,KAVE,CACxBT,QAAS,KACTC,aAAc,QASV,EACAS,WAAU,SAACC,GACPF,KAAKT,QAAUW,CACnB,EACAC,gBAAe,SAACC,GACZJ,KAAKR,aAAeY,CACxB,I,sEChBJC,E,MAA0B,GAA4B,KAE1DA,EAAwBC,KAAK,CAACC,EAAOL,GAAI,6dAA8d,GAAG,CAAC,QAAU,EAAE,QAAU,CAAC,wEAAwE,MAAQ,GAAG,SAAW,kNAAkN,eAAiB,CAAC,w6LAAi9L,WAAa,MAEl0N,S,sgBCwBMM,GAAYC,EAAAA,EAAAA,gBACZC,GAAcjB,EAAAA,EAAAA,kBAGhBkB,IADmBC,EAAAA,EAAAA,KAAI,IACJA,EAAAA,EAAAA,MAAI,IACvBC,GAAiBD,EAAAA,EAAAA,MAAI,GACrBE,GAAWF,EAAAA,EAAAA,MAAI,GAEbG,EAAQC,GAkBdC,EAAAA,EAAAA,YAAU,WAIR,GAFwBC,SAASC,eAAe,mBAE3B,CAInB,IAAIC,EAAa,IAAIC,EAAAA,EAAS,mBAAoB,CAChDC,IAAK,eACLC,UAAW,OACXC,YAAa,QACbC,UAAU,EACVC,UAAW,QACXC,sBAAsB,EACtBC,aAAa,EACbC,iBAAkB,GAClBC,QAAS,KAITC,cAAe,mBACfC,eAAgB,SAAUC,EAAMC,EAAUC,GACxC3B,EAAU4B,iBAAmBF,EAC7BG,QAAQC,IAAI9B,EAAU4B,kBACa,MAA/B5B,EAAU4B,mBACZtB,GAAW,EAEf,EACAyB,mBAAoB,4EACpBC,eAAe,EACfC,OAAQ,SAAUR,EAAMS,GACJ,KAAdT,EAAKU,KACPD,EAAK,gBACIT,EAAKW,KAAO,MACrBP,QAAQC,IAAIL,EAAKW,MACjBF,EAAK,uBACLG,MAAM,yCAENH,GAEJ,IAGFtB,EAAW0B,GAAG,aAAa,SAAAb,GAtD7BtB,GAAmB,EACnBI,EAAM,gBAuDFsB,QAAQC,IAAI,eAADS,OAAgBd,EAAKU,MAClC,IAEAvB,EAAW0B,GAAG,WAAW,SAASb,EAAMe,GAEtC,GAAIA,EAASzD,QAAS,CACpB8C,QAAQC,IAAIU,EAASzD,SACrB,IAAMA,EAAUyD,EAASzD,QACrBA,GA5DZ,SAAyBA,GACvBwB,EAAM,kBAAmBxB,GACzBmB,EAAYT,WAAWV,GACvBmB,EAAYP,gBAAgB,aAC9B,CAyDU8C,CAAgB1D,EAGpB,CACF,IAEA6B,EAAW0B,GAAG,YAAY,SAAUb,EAAMe,GA5E5CrC,GAAmB,EACnBE,GAAiB,EA6EbO,EAAW8B,WAAWjB,GACtBzB,EAAU4B,iBAAmB,EAC7BtB,GAAW,EACXqC,EAAAA,QAAQC,OAAO,CACbC,KAAM,CAAC,WAEX,GAEF,MACEhB,QAAQiB,MAAM,0DAElB,IAEA,IAAIC,EAAQC,EAOY,OAAlBD,EAAME,QACRjD,EAAUkD,cAAgBH,EAAMI,IACE,OAAzBJ,EAAMK,eACfpD,EAAUoD,eAAiBL,EAAMK,eACA,OAAxBL,EAAMM,gBACfrD,EAAUsD,oBAAsBP,EAAMM,eAM1C,IAAIE,GAAOC,EAAAA,EAAAA,IAAQ,CACjB/B,KAAM,GAENwB,QAASF,EAAME,QACfG,eAAgBL,EAAME,QACtBI,cAAeN,EAAMM,gB,8xCCzJnBI,EAAU,CAEdA,OAAiB,OACjBA,WAAoB,GAEP,IAAI,IAASA,GAIX,IAAQC,OCNvB,MAEA,GAFiC,E,SAAA,GAAgB,EAAQ,CAAC,CAAC,YAAY,oB","sources":["webpack:///./resources/js/Stores/UploadStore.js","webpack:///./resources/js/Components/Global/Uploaders/VideoUpload.vue?37a3","webpack:///./resources/js/Components/Global/Uploaders/VideoUpload.vue","webpack:///./resources/js/Components/Global/Uploaders/VideoUpload.vue?53c3","webpack:///./resources/js/Components/Global/Uploaders/VideoUpload.vue?b223"],"sourcesContent":["import { defineStore } from 'pinia'\n\nconst initialState = () => ({\n    videoId: null,\n    uploadStatus: 'idle', // Possible values: 'idle', 'uploading', 'processing', 'completed', 'error'\n})\n\nexport const useUploadStore = defineStore('uploadStore', {\n    state: initialState,\n    actions: {\n        reset() {\n            // Reset the store to its original state (clear all data)\n            Object.assign(this, initialState())\n        },\n        setVideoId(id) {\n            this.videoId = id;\n        },\n        setUploadStatus(status) {\n            this.uploadStatus = status;\n        },\n    },\n})","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".dropzone[data-v-21826cbb]{align-items:center;background-color:#fce4bb;border:2px dashed #000;display:flex;flex-direction:column;justify-content:center;row-gap:16px;transition:all .3s ease}label[data-v-21826cbb]{padding:8px 12px;transition:all .3s ease}.active-dropzone[data-v-21826cbb],label[data-v-21826cbb]{background-color:#4bb1b1;color:#fff}.active-dropzone[data-v-21826cbb]{border-color:#fff}.active-dropzone label[data-v-21826cbb]{background-color:#fff;color:#4bb1b1}\", \"\",{\"version\":3,\"sources\":[\"webpack://./resources/js/Components/Global/Uploaders/VideoUpload.vue\"],\"names\":[],\"mappings\":\"AA4KA,2BAIE,kBAAmB,CAGnB,wBAAyB,CADzB,sBAA0B,CAL1B,YAAa,CACb,qBAAsB,CACtB,sBAAuB,CAEvB,YAAa,CAGb,uBACF,CAEA,uBACE,gBAAiB,CAGjB,uBACF,CAEA,yDAJE,wBAAyB,CADzB,UASF,CAJA,kCAEE,iBAEF,CAEA,wCACE,qBAAsB,CACtB,aACF\",\"sourcesContent\":[\"<template>\\n  <div>\\n\\n    <progress v-show=\\\"userStore.uploadPercentage !== 0\\\" max=\\\"100\\\" :value=\\\"userStore.uploadPercentage\\\" class=\\\"w-full\\\"/>\\n    <div v-show=\\\"userStore.uploadPercentage !== 0\\\" class=\\\"w-full mb-4\\\">{{ userStore.uploadPercentageRounded }}%</div>\\n\\n    <div v-show=\\\"uploadingMessage\\\" class=\\\"mb-4 font-bold text-center\\\">Please stay on this screen until upload is\\n      complete.\\n    </div>\\n    <div v-show=\\\"uploadComplete\\\" class=\\\"mb-4 font-bold text-center\\\">Upload is complete. The video is now\\n      processing.\\n    </div>\\n    <form v-show=\\\"!isHidden\\\" id=\\\"videoUploadForm\\\" action=\\\"/videoupload\\\"\\n          class=\\\"dropzone dropzoneFile border border-black rounded w-full h-48 max-w-md px-2 py-2 mb-6\\\">\\n      <!--                            add input fields and a submit button to send data back to Laravel -->\\n      <input hidden name=\\\"movieId\\\" v-model=\\\"form.movieId\\\">\\n      <!--            <input hidden name=\\\"movieTrailerId\\\" v-model=\\\"form.movieTrailerId\\\">-->\\n      <input hidden name=\\\"showEpisodeId\\\" v-model=\\\"form.showEpisodeId\\\">\\n    </form>\\n\\n  </div>\\n</template>\\n\\n<script setup>\\nimport { Inertia } from \\\"@inertiajs/inertia\\\"\\nimport { onMounted, ref } from \\\"vue\\\"\\nimport { useForm } from \\\"@inertiajs/inertia-vue3\\\"\\nimport { Dropzone } from \\\"dropzone\\\"\\nimport { useUserStore } from \\\"@/Stores/UserStore\\\"\\nimport { useUploadStore } from \\\"@/Stores/UploadStore\\\"\\n\\nconst userStore = useUserStore()\\nconst uploadStore = useUploadStore()\\n\\nlet uploadPercentage = ref(0)\\nlet uploadingMessage = ref(false)\\nlet uploadComplete = ref(false)\\nlet isHidden = ref(false)\\n\\nconst emits = defineEmits(['upload-start', 'upload-finished']);\\n\\nconst uploadCompleteMessage = () => {\\n  uploadingMessage = false\\n  uploadComplete = true\\n}\\n\\nconst uploadStarted = () => {\\n  uploadingMessage = true\\n  emits('upload-start');\\n}\\n\\nfunction onUploadSuccess(videoId) {\\n  emits('upload-finished', videoId);\\n  uploadStore.setVideoId(videoId);\\n  uploadStore.setUploadStatus('processing');\\n}\\n\\nonMounted(() => {\\n  // Make sure the element with the ID \\\"videoUploadForm\\\" is available in the DOM.\\n  const videoUploadForm = document.getElementById('videoUploadForm');\\n\\n  if (videoUploadForm) {\\n    // Initialize Dropzone on the element.\\n\\n    // see options for Dropzone here: https://github.com/dropzone/dropzone/blob/main/src/options.js\\n    let myDropzone = new Dropzone(\\\"#videoUploadForm\\\", {\\n      url: \\\"/videoupload\\\",\\n      paramName: \\\"file\\\", // The name that will be used to transfer the file\\n      maxFilesize: '25 GB', // MB\\n      chunking: true,\\n      chunkSize: 2 * 1024 * 1024,\\n      parallelChunkUploads: false,\\n      retryChunks: true,\\n      retryChunksLimit: 10,\\n      capture: null,\\n      // can set the capture method as camera, microphone or video\\n      // for mobile devices to skip the file selection and choose the\\n      // recording device instead.\\n      acceptedFiles: 'video/*, audio/*',\\n      uploadprogress: function (file, progress, bytesSent) {\\n        userStore.uploadPercentage = progress;\\n        console.log(userStore.uploadPercentage);\\n        if (userStore.uploadPercentage !== 100) {\\n          isHidden = true;\\n        }\\n      },\\n      dictDefaultMessage: \\\"Click here or Drop video here to upload <br>(Max video file size is 25GB)\\\",\\n      forceFallback: false, // for testing, set to true.\\n      accept: function (file, done) {\\n        if (file.name === \\\"\\\") {\\n          done(\\\"Need a file.\\\");\\n        } else if (file.size > 25000000000) {\\n          console.log(file.size)\\n          done(\\\"Video file too big.\\\");\\n          alert('Video file must be smaller than 25GB');\\n        } else {\\n          done();\\n        }\\n      }\\n    });\\n\\n    myDropzone.on(\\\"addedfile\\\", file => {\\n      uploadStarted()\\n      console.log(`File added: ${file.name}`);\\n    });\\n\\n    myDropzone.on(\\\"success\\\", function(file, response) {\\n      // Assuming 'response' contains the videoId after the file is uploaded\\n      if (response.videoId) {\\n        console.log(response.videoId)\\n        const videoId = response.videoId;\\n        if (videoId) {\\n          onUploadSuccess(videoId);\\n          // onUploadSuccess(response.videoId);\\n        }\\n      }\\n    });\\n\\n    myDropzone.on(\\\"complete\\\", function (file, response) {\\n      uploadCompleteMessage()\\n      myDropzone.removeFile(file);\\n      userStore.uploadPercentage = 0;\\n      isHidden = false;\\n      Inertia.reload({\\n        only: [\\\"videos\\\"],\\n      });\\n    });\\n\\n  } else {\\n    console.error('Element with ID \\\"videoUploadForm\\\" not found in the DOM.');\\n  }\\n})\\n\\nlet props = defineProps({\\n  movieId: Number,\\n  movieTrailerId: Number,\\n  showEpisodeId: Number,\\n})\\n\\nfunction setMovieOrEpisodeId() {\\n  if (props.movieId !== null) {\\n    userStore.uploadMovieId = props.mov;\\n  } else if (props.movieTrailerId !== null) {\\n    userStore.movieTrailerId = props.movieTrailerId;\\n  } else if (props.showEpisodeId !== null) {\\n    userStore.uploadShowEpisodeId = props.showEpisodeId;\\n  }\\n}\\n\\nsetMovieOrEpisodeId()\\n\\nlet form = useForm({\\n  file: [],\\n  // movieId: userStore.uploadMovieId,\\n  movieId: props.movieId,\\n  movieTrailerId: props.movieId,\\n  showEpisodeId: props.showEpisodeId,\\n});\\n\\n// let props = defineProps({\\n//     filters: Object,\\n//     can: Object,\\n//     videos: Object,\\n//     message: String,\\n//     errors: ref(''),\\n//     isHidden: ref(false),\\n//     done: ref(),\\n// });\\n\\n</script>\\n<style scoped>\\n\\n.dropzone {\\n  display: flex;\\n  flex-direction: column;\\n  justify-content: center;\\n  align-items: center;\\n  row-gap: 16px;\\n  border: 2px dashed #000000;\\n  background-color: #fce4bb;\\n  transition: 0.3s ease all;\\n}\\n\\nlabel {\\n  padding: 8px 12px;\\n  color: #fff;\\n  background-color: #4bb1b1;\\n  transition: 0.3s ease all;\\n}\\n\\n.active-dropzone {\\n  color: #fff;\\n  border-color: #fff;\\n  background-color: #4bb1b1;\\n}\\n\\n.active-dropzone label {\\n  background-color: #fff;\\n  color: #4bb1b1;\\n}\\n\\n/*6b7280*/\\n/*4bb1b1*/\\n\\n</style>\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","<template>\n  <div>\n\n    <progress v-show=\"userStore.uploadPercentage !== 0\" max=\"100\" :value=\"userStore.uploadPercentage\" class=\"w-full\"/>\n    <div v-show=\"userStore.uploadPercentage !== 0\" class=\"w-full mb-4\">{{ userStore.uploadPercentageRounded }}%</div>\n\n    <div v-show=\"uploadingMessage\" class=\"mb-4 font-bold text-center\">Please stay on this screen until upload is\n      complete.\n    </div>\n    <div v-show=\"uploadComplete\" class=\"mb-4 font-bold text-center\">Upload is complete. The video is now\n      processing.\n    </div>\n    <form v-show=\"!isHidden\" id=\"videoUploadForm\" action=\"/videoupload\"\n          class=\"dropzone dropzoneFile border border-black rounded w-full h-48 max-w-md px-2 py-2 mb-6\">\n      <!--                            add input fields and a submit button to send data back to Laravel -->\n      <input hidden name=\"movieId\" v-model=\"form.movieId\">\n      <!--            <input hidden name=\"movieTrailerId\" v-model=\"form.movieTrailerId\">-->\n      <input hidden name=\"showEpisodeId\" v-model=\"form.showEpisodeId\">\n    </form>\n\n  </div>\n</template>\n\n<script setup>\nimport { Inertia } from \"@inertiajs/inertia\"\nimport { onMounted, ref } from \"vue\"\nimport { useForm } from \"@inertiajs/inertia-vue3\"\nimport { Dropzone } from \"dropzone\"\nimport { useUserStore } from \"@/Stores/UserStore\"\nimport { useUploadStore } from \"@/Stores/UploadStore\"\n\nconst userStore = useUserStore()\nconst uploadStore = useUploadStore()\n\nlet uploadPercentage = ref(0)\nlet uploadingMessage = ref(false)\nlet uploadComplete = ref(false)\nlet isHidden = ref(false)\n\nconst emits = defineEmits(['upload-start', 'upload-finished']);\n\nconst uploadCompleteMessage = () => {\n  uploadingMessage = false\n  uploadComplete = true\n}\n\nconst uploadStarted = () => {\n  uploadingMessage = true\n  emits('upload-start');\n}\n\nfunction onUploadSuccess(videoId) {\n  emits('upload-finished', videoId);\n  uploadStore.setVideoId(videoId);\n  uploadStore.setUploadStatus('processing');\n}\n\nonMounted(() => {\n  // Make sure the element with the ID \"videoUploadForm\" is available in the DOM.\n  const videoUploadForm = document.getElementById('videoUploadForm');\n\n  if (videoUploadForm) {\n    // Initialize Dropzone on the element.\n\n    // see options for Dropzone here: https://github.com/dropzone/dropzone/blob/main/src/options.js\n    let myDropzone = new Dropzone(\"#videoUploadForm\", {\n      url: \"/videoupload\",\n      paramName: \"file\", // The name that will be used to transfer the file\n      maxFilesize: '25 GB', // MB\n      chunking: true,\n      chunkSize: 2 * 1024 * 1024,\n      parallelChunkUploads: false,\n      retryChunks: true,\n      retryChunksLimit: 10,\n      capture: null,\n      // can set the capture method as camera, microphone or video\n      // for mobile devices to skip the file selection and choose the\n      // recording device instead.\n      acceptedFiles: 'video/*, audio/*',\n      uploadprogress: function (file, progress, bytesSent) {\n        userStore.uploadPercentage = progress;\n        console.log(userStore.uploadPercentage);\n        if (userStore.uploadPercentage !== 100) {\n          isHidden = true;\n        }\n      },\n      dictDefaultMessage: \"Click here or Drop video here to upload <br>(Max video file size is 25GB)\",\n      forceFallback: false, // for testing, set to true.\n      accept: function (file, done) {\n        if (file.name === \"\") {\n          done(\"Need a file.\");\n        } else if (file.size > 25000000000) {\n          console.log(file.size)\n          done(\"Video file too big.\");\n          alert('Video file must be smaller than 25GB');\n        } else {\n          done();\n        }\n      }\n    });\n\n    myDropzone.on(\"addedfile\", file => {\n      uploadStarted()\n      console.log(`File added: ${file.name}`);\n    });\n\n    myDropzone.on(\"success\", function(file, response) {\n      // Assuming 'response' contains the videoId after the file is uploaded\n      if (response.videoId) {\n        console.log(response.videoId)\n        const videoId = response.videoId;\n        if (videoId) {\n          onUploadSuccess(videoId);\n          // onUploadSuccess(response.videoId);\n        }\n      }\n    });\n\n    myDropzone.on(\"complete\", function (file, response) {\n      uploadCompleteMessage()\n      myDropzone.removeFile(file);\n      userStore.uploadPercentage = 0;\n      isHidden = false;\n      Inertia.reload({\n        only: [\"videos\"],\n      });\n    });\n\n  } else {\n    console.error('Element with ID \"videoUploadForm\" not found in the DOM.');\n  }\n})\n\nlet props = defineProps({\n  movieId: Number,\n  movieTrailerId: Number,\n  showEpisodeId: Number,\n})\n\nfunction setMovieOrEpisodeId() {\n  if (props.movieId !== null) {\n    userStore.uploadMovieId = props.mov;\n  } else if (props.movieTrailerId !== null) {\n    userStore.movieTrailerId = props.movieTrailerId;\n  } else if (props.showEpisodeId !== null) {\n    userStore.uploadShowEpisodeId = props.showEpisodeId;\n  }\n}\n\nsetMovieOrEpisodeId()\n\nlet form = useForm({\n  file: [],\n  // movieId: userStore.uploadMovieId,\n  movieId: props.movieId,\n  movieTrailerId: props.movieId,\n  showEpisodeId: props.showEpisodeId,\n});\n\n// let props = defineProps({\n//     filters: Object,\n//     can: Object,\n//     videos: Object,\n//     message: String,\n//     errors: ref(''),\n//     isHidden: ref(false),\n//     done: ref(),\n// });\n\n</script>\n<style scoped>\n\n.dropzone {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  row-gap: 16px;\n  border: 2px dashed #000000;\n  background-color: #fce4bb;\n  transition: 0.3s ease all;\n}\n\nlabel {\n  padding: 8px 12px;\n  color: #fff;\n  background-color: #4bb1b1;\n  transition: 0.3s ease all;\n}\n\n.active-dropzone {\n  color: #fff;\n  border-color: #fff;\n  background-color: #4bb1b1;\n}\n\n.active-dropzone label {\n  background-color: #fff;\n  color: #4bb1b1;\n}\n\n/*6b7280*/\n/*4bb1b1*/\n\n</style>\n","import api from \"!../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../../../node_modules/css-loader/dist/cjs.js??clonedRuleSet-10.use[1]!../../../../../node_modules/vue-loader/dist/stylePostLoader.js!../../../../../node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-10.use[2]!../../../../../node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./VideoUpload.vue?vue&type=style&index=0&id=21826cbb&scoped=true&lang=css\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","import script from \"./VideoUpload.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./VideoUpload.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./VideoUpload.vue?vue&type=style&index=0&id=21826cbb&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-21826cbb\"]])\n\nexport default __exports__"],"names":["initialState","videoId","uploadStatus","useUploadStore","defineStore","state","actions","reset","Object","assign","this","setVideoId","id","setUploadStatus","status","___CSS_LOADER_EXPORT___","push","module","userStore","useUserStore","uploadStore","uploadingMessage","ref","uploadComplete","isHidden","emits","__emit","onMounted","document","getElementById","myDropzone","Dropzone","url","paramName","maxFilesize","chunking","chunkSize","parallelChunkUploads","retryChunks","retryChunksLimit","capture","acceptedFiles","uploadprogress","file","progress","bytesSent","uploadPercentage","console","log","dictDefaultMessage","forceFallback","accept","done","name","size","alert","on","concat","response","onUploadSuccess","removeFile","Inertia","reload","only","error","props","__props","movieId","uploadMovieId","mov","movieTrailerId","showEpisodeId","uploadShowEpisodeId","form","useForm","options","locals"],"sourceRoot":""}