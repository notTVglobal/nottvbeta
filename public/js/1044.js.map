{"version":3,"file":"js/1044.js","mappings":"wHAKA,E,irECsIMA,EAAWC,IACbC,IACAC,IACAC,KAwBJ,EAAe,CACXC,WAAY,CACRL,SAAAA,GAEJM,QAAS,CAELC,oBAAqB,WACjBC,QAAQC,IAAI,sBACZD,QAAQC,IAAI,mBAAoBC,KAAKC,MAAMC,KAE/C,EACAC,oBAAmB,SAACC,EAAOC,GACvB,GAAID,EAIA,OAHAN,QAAQC,IAAI,2BACZD,QAAQC,IAAIK,QACZN,QAAQC,IAAIM,GAKhBC,EAAAA,QAAAA,OAAe,CACHC,KAAM,CAAC,WAEvB,GAEJC,MAAO,CACCC,OAAQC,QAEhBC,MAAK,SAACH,GAEN,G,MC/LJ,E,4EDqEII,GAAmBC,EAAAA,EAAAA,KACnBC,GAAYC,EAAAA,EAAAA,K,OAEhBH,EAAiBI,YAAc,iBAE/BC,EAAAA,EAAAA,gBAAc,WACVH,EAAUI,mBAAqB,CACnC,KAEAC,EAAAA,EAAAA,YAAU,WACNP,EAAiBQ,oBACoB,IAAjCN,EAAUI,qBACVG,SAASC,eAAe,UAAUC,iBAClCT,EAAUI,qBAElB,I","sources":["webpack:///./resources/js/Components/Pagination.vue","webpack:///./resources/js/Pages/Image.vue","webpack:///./resources/js/Pages/Image.vue?64c4"],"sourcesContent":["import script from \"./Pagination.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Pagination.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n    <Head title=\"Image uploading\"/>\n\n    <div id=\"topDiv\"></div>\n    <div class=\"place-self-center flex flex-col gap-y-3\">\n        <div class=\"bg-white text-black p-5 mb-10\">\n\n            <div class=\"flex justify-between mb-6\">\n                <div class=\"grid grid-cols-1 grid-rows-2 pt-4\">\n                    <h1 class=\"text-3xl font-semibold\">Image Uploader</h1>\n                </div>\n                <span class=\"text-xs font-semibold text-red-700\">Admin Mode</span>\n                <div class=\"grid grid-cols-1 grid-rows-2\">\n                    <div class=\"justify-self-end mb-4\">\n                        <Link :href=\"`/dashboard`\"><button\n                            class=\"px-4 py-2 text-white bg-blue-600 hover:bg-blue-500 rounded-lg\"\n                        >Dashboard</button>\n                        </Link>\n                    </div>\n                </div>\n            </div>\n\n    <div class=\"max-w-lg mx-auto mt-2 bg-gray-200 p-6\">\n        <div class=\"pt-3 pb-4\">\n            <ul>\n                <li>Max File Size: <span class=\"text-orange-400\">20MB</span></li>\n                <li>File Types accepted: <span class=\"text-orange-400\">jpg, jpeg, png</span></li>\n            </ul>\n        </div>\n        <file-pond\n            name=\"image\"\n            ref=\"pond\"\n            label-idle=\"Click to choose image, or drag here...\"\n            @init=\"filepondInitialized\"\n            server=\"/upload\"\n            accepted-file-types=\"image/jpg, image/jpeg, image/png\"\n            @processfile=\"handleProcessedFile\"\n            allow-multiple=\"true\" max-files=\"10\"\n            max-file-size=\"20MB\"\n\n        />\n\n    </div>\n\n    <div class=\"mt-8 mb-24 mx-auto\">\n        <h3 class=\"text-2xl font-medium text-center\">Image Gallery</h3>\n<!--        <input v-model=\"search\" type=\"search\" placeholder=\"Search...\" class=\"border px-2 rounded-lg\" />-->\n        <!-- Paginator -->\n        <Pagination :links=\"images.links\" class=\"mt-6\"/>\n        <div class=\"grid grid-cols-3 gap-2 justify-evenly mt-4\">\n            <div v-for=\"image in images.data\" :key=\"image.id\">\n                <img :src=\"'/storage/images/' + image.name\">\n            </div>\n        </div>\n        <!-- Paginator -->\n        <Pagination :links=\"images.links\" class=\"mt-6\"/>\n    </div>\n        </div>\n    </div>\n</template>\n\n\n<script setup>\nimport Pagination from \"@/Components/Pagination\"\nimport {Head, Link} from '@inertiajs/inertia-vue3'\n// import {ref, onMounted } from 'vue'\n// import vueFilePond, { setOptions } from 'vue-filepond'\nimport \"filepond/dist/filepond.min.css\"\n// import FilePondPluginFileValidateType from 'filepond-plugin-file-validate-type'\nimport { useVideoPlayerStore } from \"@/Stores/VideoPlayerStore.js\"\nimport {Inertia} from \"@inertiajs/inertia\";\nimport {useUserStore} from \"@/Stores/UserStore\";\nimport {onBeforeMount, onMounted} from \"vue\";\n\nlet videoPlayerStore = useVideoPlayerStore()\nlet userStore = useUserStore()\n\nvideoPlayerStore.currentPage = 'imageUploader';\n\nonBeforeMount(() => {\n    userStore.scrollToTopCounter = 0;\n})\n\nonMounted(() => {\n    videoPlayerStore.makeVideoTopRight();\n    if (userStore.scrollToTopCounter === 0 ) {\n        document.getElementById(\"topDiv\").scrollIntoView()\n        userStore.scrollToTopCounter ++;\n    }\n});\n\nlet props = defineProps({\n    images: Object,\n    // filters: Object,\n});\n\n\n\n// let search = ref(props.filters.search);\n//\n// watch(search, throttle(function (value) {\n//     Inertia.get('image', { search: value }, {\n//         preserveState: true,\n//         replace: true\n//     });\n// }, 300));\n\n// config: { headers: function () { return {} } }\n\n\n\n// const FilePond = vueFilePond(FilePondPluginFileValidateType);\n// const pond = ref([]);\n// const FilePondInitialized = ref();\n// console.log(FilePondInitialized, \"Filepond is ready!\");\n// console.log(\"Filepond object:\", pond);\n//\n// onMounted(() => setOptions({\n//     server: {\n//         process: {\n//             url: './upload',\n//             headers: {\n//                 \"X-CSRF-TOKEN\": document.head.querySelector('meta[name=\"csrf-token\"]').content\n//             }\n//         }\n//     }\n// }))\n\n</script>\n\n<script>\nimport vueFilePond, { setOptions } from 'vue-filepond';\nimport FilePondPluginFileValidateType from 'filepond-plugin-file-validate-type';\nimport FilePondPluginFileValidateSize from 'filepond-plugin-file-validate-size';\nimport FilePondPluginImagePreview from \"filepond-plugin-image-preview\";\nimport 'filepond/dist/filepond.min.css';\nimport {Inertia} from \"@inertiajs/inertia\";\n\n\nconst FilePond = vueFilePond(\n    FilePondPluginFileValidateType,\n    FilePondPluginFileValidateSize,\n    FilePondPluginImagePreview\n);\n\n// The setOptions isn't working. It works in the Laracast Advanced Image Uploading Tutorial, but it isn't working here.\n// let serverMessage = {};\n// setOptions({\n//     server: {\n//         process: {\n//             // onerror: (response) => {\n//             //     serverMessage = JSON.parse(response);\n//             // },\n//             url: './upload',\n//             headers: {\n//                 'X-CSRF-TOKEN': '',\n//             },\n//         },\n//     },\n//     // labelFileProcessing: () => {\n//     //     return serverMessage.error;\n//     // }\n// });\n\n\n\nexport default {\n    components: {\n        FilePond\n    },\n    methods: {\n\n        filepondInitialized: function () {\n            console.log(\"Filepond is ready!\");\n            console.log('Filepond object:', this.$refs.pond);\n\n        },\n        handleProcessedFile(error, file) {\n            if (error) {\n                console.log(\"Filepond processed file\");\n                console.log(error);\n                console.log(file);\n                return;\n            }\n\n            // add the file to our images array\n            Inertia.reload({\n                        only: [\"images\"],\n            });\n        }\n    },\n    props: {\n            images: Object\n    },\n    setup(props) {\n\n    }\n\n        // filepondProcessFile = (error, file) {\n        //     console.log(\"Filepond processed file\");\n        //     console.log(error);\n        //     console.log(file);\n        //\n        //     Inertia.reload({\n        //         only: [\"images\"],\n        //     });\n        // };\n\n\n};\n</script>\n","import script from \"./Image.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Image.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__"],"names":["FilePond","vueFilePond","FilePondPluginFileValidateType","FilePondPluginFileValidateSize","FilePondPluginImagePreview","components","methods","filepondInitialized","console","log","this","$refs","pond","handleProcessedFile","error","file","Inertia","only","props","images","Object","setup","videoPlayerStore","useVideoPlayerStore","userStore","useUserStore","currentPage","onBeforeMount","scrollToTopCounter","onMounted","makeVideoTopRight","document","getElementById","scrollIntoView"],"sourceRoot":""}