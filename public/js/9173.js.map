{"version":3,"file":"js/9173.js","mappings":";wJAGMA,EAAe,WAAH,MAAU,CACxBC,GAAI,EACJC,KAAM,GACNC,YAAa,GACbC,KAAM,GACNC,WAAY,GACZC,YAAa,GACbC,YAAa,GACbC,WAAY,GACZC,QAAS,GACTC,SAAU,GACVC,WAAY,GACZC,cAAe,GACfC,SAAU,GACVC,UAAWC,QACXC,eAAe,EACfC,sBAAsB,EACtBC,oBAAqB,GACrBC,kBAAmB,EACnBC,YAAY,EACZC,eAAe,EACfC,iBAAkB,GAClBC,eAAgB,EAChBC,SAAU,EACVC,KAAM,GACNC,mBAAoBX,QAGpBY,eAAe,EACfC,IAAK,GACLC,cAAe,YAClB,EAEYC,GAAeC,EAAAA,EAAAA,IAAY,YAAa,CACjDC,MAAOhC,EACPiC,QAAS,CACLC,MAAK,WAEDC,OAAOC,OAAOC,KAAMrC,IACxB,EAKAsC,cAAa,SAACC,GACVF,KAAKpC,GAAKsC,EAAKtC,GACfoC,KAAKnC,KAAOqC,EAAKrC,KACjBmC,KAAKlC,YAAcoC,EAAKpC,YACxBkC,KAAKjC,KAAOmC,EAAKnC,KACjBiC,KAAKhC,WAAakC,EAAKlC,WACvBgC,KAAK/B,YAAciC,EAAKjC,WAC5B,EACAkC,cAAa,SAACC,GACVJ,KAAK1B,WAAa8B,CACtB,EACAC,iBAAgB,SAACC,GACbN,KAAK1B,WAAagC,CACtB,EAIAC,uBAAsB,WAClBP,KAAKrB,eAAgB,CACzB,EACA6B,yBAAwB,WACpBR,KAAKpB,sBAAuB,CAChC,EAIA6B,iBAAgB,WACZC,EAAAA,QAAQC,MAAMC,MAAM,0BAA2B,CAC3CC,OAAQ,OACRC,KAAM,CACFC,QAASf,KAAKd,eACd8B,QAAShB,KAAKpC,GACdqD,UAAWjB,KAAKjC,OAG5B,EACAmD,eAAc,WACVR,EAAAA,QAAQC,MAAMC,MAAM,wBAAyB,CACzCC,OAAQ,OACRC,KAAM,CACFC,QAASf,KAAKlB,kBACdkC,QAAShB,KAAKpC,GACdqD,UAAWjB,KAAKjC,QAGxBiC,KAAKpB,sBAAuB,CAChC,EACAuC,kBAAiB,WACbT,EAAAA,QAAQC,MAAMC,MAAM,2BAA4B,CAC5CC,OAAQ,OACRC,KAAM,CACFC,QAASf,KAAKlB,kBACdkC,QAAShB,KAAKpC,GACdqD,UAAWjB,KAAKjC,QAGxBiC,KAAKpB,sBAAuB,CAChC,EACAwC,oBAAmB,WACfpB,KAAKV,eAAkBU,KAAKV,aAChC,GAGJ+B,QAAS,CACLC,eAAc,WACV,OAAItB,KAAKhC,WAAagC,KAAK/B,YAAc,EAC9B,EAEJ+B,KAAKhC,WAAagC,KAAK/B,WAClC,yFC9GD,SAASsD,EAAaC,GACzB,IAAMC,GAAYC,EAAAA,EAAAA,gBACZC,GAAkBC,EAAAA,EAAAA,sBAClBC,GAAmBC,EAAAA,EAAAA,uBAEzBH,EAAgBI,YAAcP,EAC9BG,EAAgBK,kBAAmB,EACnCL,EAAgBM,cAAe,EAE3BR,EAAUS,WACVP,EAAgBQ,IAAM,GAG1BN,EAAiBO,qBAEjBC,EAAAA,EAAAA,YAAU,WAKN,KAHmD,KAA3BC,OAAOC,SAASC,QAGlB,CAClB,IAAMC,EAASC,SAASC,eAAe,UACnCF,GACAA,EAAOG,gBAEf,CAEAjB,EAAgBkB,aAChBnC,EAAAA,QAAQoC,QAEZ,GACJ,oEClCIC,QAA0B,GAA4B,KAE1DA,EAAwBC,KAAK,CAACC,EAAOrF,GAAI,6dAA8d,GAAG,CAAC,QAAU,EAAE,QAAU,CAAC,wEAAwE,MAAQ,GAAG,SAAW,kNAAkN,eAAiB,CAAC,2jKAA4mK,WAAa,MAE79L,2FCFA,2CCUA,IAAM+D,GAAkBC,EAAAA,EAAAA,sBAClBH,GAAYC,EAAAA,EAAAA,gBAElB,SAASwB,IACP,GAAIvB,EAAgBwB,QAClBzC,EAAAA,QAAQC,MAAMgB,EAAgBwB,aACzB,CAEL,IAAIA,EAAU1B,EAAU2B,UAAY,aAAe,IACnD1C,EAAAA,QAAQC,MAAMwC,EAChB,CACF,w3CCrBA,+FCgEME,EAAQC,EAORC,SAIFC,GAAOC,EAAAA,EAAAA,KAAIJ,EAAMG,OACJC,EAAAA,EAAAA,KAAI,OACFA,EAAAA,EAAAA,KAAIJ,EAAMK,YAAc,aAQ3CC,EAAAA,EAAAA,OAAM,CAACH,IAAO,SAAAI,GAAe,IAAbC,EAAaC,EAAAF,EAAA,GAAN,GACrBL,EAAM,qBAAsB,CAACC,KAAMK,GACrC,s4RCvFA,6DC0CwBjC,EAAAA,EAAAA,sBAERI,kBAAmB,EAEnC,IAAIqB,EAAQC,EAYNS,IAPcC,EAAAA,EAAAA,WAAS,iBAAO,CAClC,oEAAqEX,EAAMY,MAAMC,QACjF,gEAAiEb,EAAMY,MAAME,QAC7E,wEAAyEd,EAAMY,MAAMG,QACrF,4DAA6Df,EAAMY,MAAMI,MAC1E,IAEsB,iBAAAC,KAAAC,IAAAC,MAAG,SAAAC,IAAA,OAAAF,IAAAG,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EAClBnE,EAAAA,QAAQoE,KAAKlE,MAAM,gBAAe,OACxCF,EAAAA,QAAQoC,SAAS,wBAAA6B,EAAAI,OAAA,GAAAN,EAAA,mLAClB,kBAHsB,OAAAH,EAAAU,MAAA,KAAAC,UAAA,4yCC1DvB,2GCOIC,SAEJ,SAASC,EAAWC,GAClB,IAAIC,EAAWD,EAAEE,OAGbC,EAAMF,EAASG,MACfC,EAAQJ,EAASK,eACjBC,EAAMN,EAASO,aAGnBP,EAASG,MAAQD,EAAIM,UAAU,EAAGJ,GAAS,KAAOF,EAAIM,UAAUF,GAGhEN,EAASK,eAAiBL,EAASO,aAAeH,EAAQ,CAC5D,qyCCtBA,sMCsCIpC,EAAQC,EAiFNwC,GAzDcC,EAAA,GAFA1C,EAAM2C,YACJ3C,EAAM4C,eA0DXC,IACbC,IACAC,IACAC,IACAC,MA0BJ,SAASC,IACPC,QAAQC,IAAI,qBAGd,CAlBAX,EAASY,WAAc,CACrBC,mBAAoB,CAClBC,QAAS,MAkBb,IAAM1B,EAAO2B,EAEb,SAASC,EAAoBzC,EAAO0C,GAClC,GAAI1C,EAIF,OAHAmC,QAAQC,IAAI,2BACZD,QAAQC,IAAIpC,QACZmC,QAAQC,IAAIM,GAId7B,EAAK,cAKP,utCCjJA,IAAMzD,GAAYC,EAAAA,EAAAA,gBAEdsF,IADmBvD,EAAAA,EAAAA,KAAI,IACJA,EAAAA,EAAAA,KAAI,IACvBwD,GAAwBxD,EAAAA,EAAAA,KAAI,GAC5ByD,GAAWzD,EAAAA,EAAAA,MAAI,IAEnBpB,EAAAA,EAAAA,YAAU,WAIR,GAFwBK,SAASC,eAAe,mBAE3B,CAInB,IAAIwE,EAAa,IAAIC,EAAAA,EAAS,mBAAoB,CAChDC,IAAK,eACLC,UAAW,OACXC,YAAa,QACbC,UAAU,EACVC,UAAW,QACXC,sBAAsB,EACtBC,aAAa,EACbC,iBAAkB,GAClBC,QAAS,KAITC,cAAe,mBACfC,eAAgB,SAAUhB,EAAMiB,EAAUC,GACxCxG,EAAUyG,iBAAmBF,EAC7BxB,QAAQC,IAAIhF,EAAUyG,kBACa,MAA/BzG,EAAUyG,mBACZhB,GAAW,EAEf,EACAiB,mBAAoB,4EACpBC,eAAe,EACfC,OAAQ,SAAUtB,EAAMuB,GACJ,KAAdvB,EAAKlJ,KACPyK,EAAK,gBACIvB,EAAKwB,KAAO,MACrB/B,QAAQC,IAAIM,EAAKwB,MACjBD,EAAK,uBACLE,MAAM,yCAENF,GAEJ,IAGFnB,EAAWsB,GAAG,aAAa,SAAA1B,GACzBC,EAAmB,EACnBR,QAAQC,IAAI,eAADiC,OAAgB3B,EAAKlJ,MAElC,IAEAsJ,EAAWsB,GAAG,YAAY,SAAU1B,GAClCC,EAAmB,EACnBC,EAAwB,EACxBE,EAAWwB,WAAW5B,GACtBtF,EAAUyG,iBAAmB,EAC7BhB,GAAW,EACXxG,EAAAA,QAAQoC,OAAO,CACb8F,KAAM,CAAC,WAEX,GAEF,MACEpC,QAAQnC,MAAM,0DAElB,IAEA,IAAIhB,EAAQC,EAOY,OAAlBD,EAAMwF,QACRpH,EAAUqH,cAAgBzF,EAAM0F,IACE,OAAzB1F,EAAM2F,eACfvH,EAAUuH,eAAiB3F,EAAM2F,eACA,OAAxB3F,EAAM4F,gBACfxH,EAAUyH,oBAAsB7F,EAAM4F,eAM1C,IAAIE,GAAOC,EAAAA,EAAAA,IAAQ,CACjBrC,KAAM,GAEN8B,QAASxF,EAAMwF,QACfG,eAAgB3F,EAAMwF,QACtBI,cAAe5F,EAAM4F,0yCC1HnBI,EAAU,CAEdA,OAAiB,OACjBA,WAAoB,GAEP,IAAI,IAASA,GAIX,IAAQC,OCNvB,MAEA,GAFiC,aAAgB,EAAQ,CAAC,CAAC,YAAY,0uBCDvE,4/CCAA,+CCDA,IAAMC,GAASvF,EAAAA,EAAAA,WAAS,kBAAMwF,EAAAA,EAAAA,MAAUnG,MAAMmC,MAAM+D,MAAM,IACpDE,GAAYzF,EAAAA,EAAAA,WAAS,kBAAMlE,OAAO4J,KAAKH,EAAO/D,OAAOmE,OAAS,CAAC,i6DCArE,qzFCAA,8GCuBA,IAAIC,GAAc,IAAIC,MAAOC,8qLCvB7B,4GC4XAvI,EAAAA,EAAAA,GAAa,4BAEb,IAAMI,GAAkBC,EAAAA,EAAAA,sBAClBmI,GAAYtK,EAAAA,EAAAA,gBACZuK,GAAYC,EAAAA,EAAAA,gBACZxI,GAAYC,EAAAA,EAAAA,gBAEd2B,EAAQC,EAQZyG,EAAU9J,cAAcoD,EAAMnD,MAC9B6J,EAAU5J,cAAckD,EAAMjD,MAC9B4J,EAAUE,cAAgB7G,EAAM8G,MAAMtM,KAEtC,IAAIuM,GAAoB3G,EAAAA,EAAAA,KAAI,IACxB4G,GAAkB5G,EAAAA,EAAAA,KAAI,IAGtB6G,GAA0B7G,EAAAA,EAAAA,KAAI,IAC9B8G,GAA4B9G,EAAAA,EAAAA,KAAI,IAChC+G,GAA6B/G,EAAAA,EAAAA,MAAI,GAEjCgH,GAA2BhH,EAAAA,EAAAA,KAAI,IAC/BiH,GAA6BjH,EAAAA,EAAAA,KAAI,IAEjCkH,GAAsBlH,EAAAA,EAAAA,KAAI,IAC1BmH,GAAwBnH,EAAAA,EAAAA,KAAI,IAE1BoH,GAAepH,EAAAA,EAAAA,KAAI,IAGzB4G,EAAkBhH,EAAM/C,QAAQwK,iBAChCV,EAAoB/G,EAAM/C,QAAQyK,2BAElC,IAKMC,EAAoB,SAACC,EAAUJ,GACnC,OAAOK,EAAAA,EAAAA,GAAOD,EAAU,yBAA0B,CAACJ,aAAAA,GACrD,EAEIR,IACFM,EAAoBnF,MAAQwF,EACxB,IAAInB,KAAKQ,GACTQ,EAAarF,OACjBgB,QAAQC,IAAI,0BAA4BkE,EAAoBnF,QAG1D4E,IACFQ,EAAsBpF,MAAQwF,EAC1B,IAAInB,KAAKO,GACTS,EAAarF,OACjBgB,QAAQC,IAAI,4BAA8BmE,EAAsBpF,QAGlE,IAAI2D,GAAOC,EAAAA,EAAAA,IAAQ,CACjBxL,GAAIyF,EAAM/C,QAAQ1C,GAClBC,KAAMwF,EAAM/C,QAAQzC,KACpBsN,eAAgB9H,EAAM/C,QAAQ6K,eAC9BrN,YAAauF,EAAM/C,QAAQxC,YAC3BsN,MAAO/H,EAAM/C,QAAQ8K,MACrBxE,QAASvD,EAAM/C,QAAQsG,QACvByE,UAAWhI,EAAM/C,QAAQgL,MAAMD,UAC/BE,YAAalI,EAAM/C,QAAQiL,YAC3BC,iBAAkBnI,EAAM/C,QAAQkL,iBAChCV,iBAAkB,GAClBC,2BAA4B,KAG1BU,EAAc,WAChB/K,EAAAA,QAAQoC,OAAO,CACb8F,KAAM,CAAC,UAEX,EAEI8C,EAAS,WACPvC,EAAKqC,mBAAqBnI,EAAM/C,QAAQkL,kBAAoBrC,EAAKkC,UAmGjEM,QAAQ,kFACVxC,EAAKyC,IAAIhL,MAAM,sBAAuByC,EAAM/C,QAAQvC,OAjGpDoL,EAAKyC,IAAIhL,MAAM,sBAAuByC,EAAM/C,QAAQvC,MACxD,EAGM8N,EAAcb,EAChB,IAAInB,KACJgB,EAAarF,OAGXsG,EAAwB,SAACjI,GAC7B,IAAIkI,EAAcf,EACdnH,EAAQL,KACRqH,EAAarF,OAKjB,GAHAgB,QAAQC,IAAIsF,GACZvF,QAAQC,IAAIoF,GAERE,EAAcF,EAEhB,OAAOrD,MAAM,+FAGb8B,EAAwB9E,MAAQ3B,EAChCwG,EAAkBxG,EAAQL,KAE1BwI,IACAxF,QAAQC,IAAIgE,EAAyBjF,OACrC2D,EAAK2B,iBAAmBL,EACxBtB,EAAK4B,2BAA6B,IAEtC,EACMkB,EAA0B,SAACpI,GAC/B0G,EAA0B/E,MAAQ3B,EAClCuG,EAAoBvG,EAAQL,KAE5B0I,IACA1F,QAAQC,IAAIiE,EAA2BlF,OAEvC2D,EAAK4B,2BAA6BL,EAClCvB,EAAK2B,iBAAmB,IAC1B,EAEA,SAASqB,IACP3B,EAA2BhF,OAAQ,EACnC+E,EAA0B/E,MAAQ,KAClC2D,EAAK4B,2BAA6B,IACpC,CAEA,IAAMiB,EAAwB,WACxB1B,EAAwB9E,MAG1BiF,EAAyBjF,MAAQwF,EAC7B,IAAInB,KAAKQ,GACTQ,EAAarF,OAejBiF,EAAyBjF,MAAQ,EAErC,EAEM0G,EAA0B,WAC1B3B,EAA0B/E,MAG5BkF,EAA2BlF,MAAQwF,EAC/B,IAAInB,KAAKO,GACTS,EAAarF,OAGjBkF,EAA2BlF,MAAQ,EAEvC,SAEAnD,EAAAA,EAAAA,YAAU,WAnIRwI,EAAarF,MAAQ4G,KAAKC,iBAAiBC,kBAAkBC,SAqI7D/F,QAAQC,IAAIoE,EAAarF,MAC3B,KAEAgH,EAAAA,EAAAA,cAAY,WACVxC,EAAUyC,aAAe,EAC3B","sources":["webpack:///./resources/js/Stores/TeamStore.js","webpack:///./resources/js/Utilities/PageSetup.js","webpack:///./resources/js/Components/Global/Uploaders/VideoUpload.vue?3461","webpack:///./resources/js/Components/Global/Buttons/CancelButton.vue?b7c6","webpack:///./resources/js/Components/Global/Buttons/CancelButton.vue","webpack:///./resources/js/Components/Global/Calendar/DateTimePickerSelect.vue?a94f","webpack:///./resources/js/Components/Global/Calendar/DateTimePickerSelect.vue","webpack:///./resources/js/Components/Global/Modals/Messages.vue?dfe9","webpack:///./resources/js/Components/Global/Modals/Messages.vue","webpack:///./resources/js/Components/Global/TextEditor/TabbableTextarea.vue?4db8","webpack:///./resources/js/Components/Global/TextEditor/TabbableTextarea.vue","webpack:///./resources/js/Components/Global/Uploaders/ImageUpload.vue?55d5","webpack:///./resources/js/Components/Global/Uploaders/ImageUpload.vue","webpack:///./resources/js/Components/Global/Uploaders/VideoUpload.vue","webpack:///./resources/js/Components/Global/Uploaders/VideoUpload.vue?d46c","webpack:///./resources/js/Components/Global/Uploaders/VideoUpload.vue?b223","webpack:///./resources/js/Components/Pages/ShowEpisodes/Elements/EpisodeVideo.vue","webpack:///./resources/js/Jetstream/ValidationErrors.vue?5fdc","webpack:///./resources/js/Jetstream/ValidationErrors.vue","webpack:///./resources/js/Components/Pages/ShowEpisodes/Edit/Layout/ShowEpisodeEditHeader.vue","webpack:///./resources/js/Components/Pages/ShowEpisodes/Edit/Layout/ShowEpisodeEditFooter.vue?d92d","webpack:///./resources/js/Components/Pages/ShowEpisodes/Edit/Layout/ShowEpisodeEditFooter.vue","webpack:///./resources/js/Pages/Shows/{$id}/Episodes/{$id}/Edit.vue?6515","webpack:///./resources/js/Pages/Shows/{$id}/Episodes/{$id}/Edit.vue"],"sourcesContent":["import {defineStore} from \"pinia\";\nimport {Inertia} from \"@inertiajs/inertia\";\n\nconst initialState = () => ({\n    id: 0,\n    name: '',\n    description: '',\n    slug: '',\n    totalSpots: '',\n    memberSpots: '',\n    teamCreator: [],\n    teamLeader: [],\n    members: [],\n    managers: [],\n    activeShow: [],\n    activeEpisode: [],\n    creators: [],\n    showModal: Boolean,\n    confirmDialog: false,\n    confirmManagerDialog: false,\n    selectedManagerName: '',\n    selectedManagerId: 0,\n    addManager: false,\n    removeManager: false,\n    deleteMemberName: '',\n    deleteMemberId: 0,\n    noteEdit: 0,\n    note: '',\n    saveNoteProcessing: Boolean,\n    // on the show episode manage page\n    // turn on the go live div\n    goLiveDisplay: false,\n    can: [],\n    openComponent: 'teamShows',\n})\n\nexport const useTeamStore = defineStore('teamStore', {\n    state: initialState,\n    actions: {\n        reset() {\n            // Reset the store to its original state (clear all data)\n            Object.assign(this, initialState());\n        },\n        // async fill() {\n        //     let r = await import('@/Json/team.json');\n        //     this.$state = r.default;\n        // },\n        setActiveTeam(team) {\n            this.id = team.id;\n            this.name = team.name;\n            this.description = team.description;\n            this.slug = team.slug;\n            this.totalSpots = team.totalSpots;\n            this.memberSpots = team.memberSpots;\n        },\n        setActiveShow(show) {\n            this.activeShow = show;\n        },\n        setActiveEpisode(episode) {\n            this.activeShow = episode;\n        },\n        // getCreators() {\n        //     Inertia.reload({ only: ['creators'] })\n        // },\n        deleteTeamMemberCancel() {\n            this.confirmDialog = false;\n        },\n        confirmTeamManagerCancel() {\n            this.confirmManagerDialog = false;\n        },\n        // loadTeamMembers(members){\n        //     this.members = members;\n        // }\n        deleteTeamMember() {\n            Inertia.visit(route('teams.removeTeamMember'), {\n                method: 'post',\n                data: {\n                    user_id: this.deleteMemberId,\n                    team_id: this.id,\n                    team_slug: this.slug\n                },\n            })\n        },\n        addTeamManager() {\n            Inertia.visit(route('teams.addTeamManager'), {\n                method: 'post',\n                data: {\n                    user_id: this.selectedManagerId,\n                    team_id: this.id,\n                    team_slug: this.slug\n                },\n            })\n            this.confirmManagerDialog = false;\n        },\n        removeTeamManager() {\n            Inertia.visit(route('teams.removeTeamManager'), {\n                method: 'post',\n                data: {\n                    user_id: this.selectedManagerId,\n                    team_id: this.id,\n                    team_slug: this.slug\n                },\n            })\n            this.confirmManagerDialog = false;\n        },\n        toggleGoLiveDisplay() {\n            this.goLiveDisplay = ! this.goLiveDisplay;\n        }\n    },\n\n    getters: {\n        spotsRemaining() {\n            if (this.totalSpots - this.memberSpots < 1){\n                return 0\n            }\n            return this.totalSpots - this.memberSpots;\n        },\n    }\n});\n\n\n// Another option for declaring specific data to return:\n// let data = r.default;\n//\n// import('@/Json/team.json').then(r => {\n// this.$patch({\n//     name: data.name,\n//     spots: data.spots,\n//     members: data.members\n// });\n// });\n","import { onMounted } from 'vue'\nimport { useUserStore } from \"@/Stores/UserStore\"\nimport { useAppSettingStore } from \"@/Stores/AppSettingStore\"\nimport { useVideoPlayerStore } from \"@/Stores/VideoPlayerStore\"\nimport { Inertia } from \"@inertiajs/inertia\"\n\nexport function usePageSetup(pageName) {\n    const userStore = useUserStore()\n    const appSettingStore = useAppSettingStore()\n    const videoPlayerStore = useVideoPlayerStore()\n\n    appSettingStore.currentPage = pageName\n    appSettingStore.showFlashMessage = true\n    appSettingStore.pageIsHidden = false\n\n    if (userStore.isMobile) {\n        appSettingStore.ott = 0\n    }\n\n    videoPlayerStore.makeVideoTopRight()\n\n    onMounted(() => {\n        // Check if the URL contains query strings\n        const hasQueryStrings = window.location.search !== '';\n\n        // Only scroll into view if there are no query strings\n        if (!hasQueryStrings) {\n            const topDiv = document.getElementById(\"topDiv\")\n            if (topDiv) {\n                topDiv.scrollIntoView()\n            }\n        }\n        // Only update if we're not already on this page to avoid overwriting with the current URL\n        appSettingStore.setPrevUrl()\n        Inertia.reload()\n\n    });\n}\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".dropzone[data-v-60980035]{align-items:center;background-color:#fce4bb;border:2px dashed #000;display:flex;flex-direction:column;justify-content:center;row-gap:16px;transition:all .3s ease}label[data-v-60980035]{padding:8px 12px;transition:all .3s ease}.active-dropzone[data-v-60980035],label[data-v-60980035]{background-color:#4bb1b1;color:#fff}.active-dropzone[data-v-60980035]{border-color:#fff}.active-dropzone label[data-v-60980035]{background-color:#fff;color:#4bb1b1}\", \"\",{\"version\":3,\"sources\":[\"webpack://./resources/js/Components/Global/Uploaders/VideoUpload.vue\"],\"names\":[],\"mappings\":\"AA6IA,2BAIE,kBAAmB,CAGnB,wBAAyB,CADzB,sBAA0B,CAL1B,YAAa,CACb,qBAAsB,CACtB,sBAAuB,CAEvB,YAAa,CAGb,uBACF,CAEA,uBACE,gBAAiB,CAGjB,uBACF,CAEA,yDAJE,wBAAyB,CADzB,UASF,CAJA,kCAEE,iBAEF,CAEA,wCACE,qBAAsB,CACtB,aACF\",\"sourcesContent\":[\"<template>\\n  <div>\\n\\n    <progress v-show=\\\"userStore.uploadPercentage != 0\\\" max=\\\"100\\\" :value=\\\"userStore.uploadPercentage\\\" class=\\\"w-full\\\"/>\\n    <div v-show=\\\"userStore.uploadPercentage != 0\\\" class=\\\"w-full mb-4\\\">{{ userStore.uploadPercentageRounded }}%</div>\\n\\n    <div v-show=\\\"uploadingMessage\\\" class=\\\"mb-4 font-bold text-center\\\">Please stay on this screen until upload is\\n      complete.\\n    </div>\\n    <div v-show=\\\"uploadCompleteMessage\\\" class=\\\"mb-4 font-bold text-center\\\">Upload is complete. The video is now\\n      processing.\\n    </div>\\n    <form v-show=\\\"!isHidden\\\" id=\\\"videoUploadForm\\\" action=\\\"/videoupload\\\"\\n          class=\\\"dropzone dropzoneFile border border-black rounded w-full h-48 max-w-md px-2 py-2 mb-6\\\">\\n      <!--                            add input fields and a submit button to send data back to Laravel -->\\n      <input hidden name=\\\"movieId\\\" v-model=\\\"form.movieId\\\">\\n      <!--            <input hidden name=\\\"movieTrailerId\\\" v-model=\\\"form.movieTrailerId\\\">-->\\n      <input hidden name=\\\"showEpisodeId\\\" v-model=\\\"form.showEpisodeId\\\">\\n    </form>\\n\\n  </div>\\n</template>\\n\\n<script setup>\\nimport { Inertia } from \\\"@inertiajs/inertia\\\"\\nimport { onMounted, ref } from \\\"vue\\\"\\nimport { useForm } from \\\"@inertiajs/inertia-vue3\\\"\\nimport { Dropzone } from \\\"dropzone\\\"\\nimport { useUserStore } from \\\"@/Stores/UserStore\\\"\\n\\nconst userStore = useUserStore()\\nlet uploadPercentage = ref(0)\\nlet uploadingMessage = ref(0)\\nlet uploadCompleteMessage = ref(0)\\nlet isHidden = ref(false)\\n\\nonMounted(() => {\\n  // Make sure the element with the ID \\\"videoUploadForm\\\" is available in the DOM.\\n  const videoUploadForm = document.getElementById('videoUploadForm');\\n\\n  if (videoUploadForm) {\\n    // Initialize Dropzone on the element.\\n\\n    // see options for Dropzone here: https://github.com/dropzone/dropzone/blob/main/src/options.js\\n    let myDropzone = new Dropzone(\\\"#videoUploadForm\\\", {\\n      url: \\\"/videoupload\\\",\\n      paramName: \\\"file\\\", // The name that will be used to transfer the file\\n      maxFilesize: '25 GB', // MB\\n      chunking: true,\\n      chunkSize: 2 * 1024 * 1024,\\n      parallelChunkUploads: false,\\n      retryChunks: true,\\n      retryChunksLimit: 10,\\n      capture: null,\\n      // can set the capture method as camera, microphone or video\\n      // for mobile devices to skip the file selection and choose the\\n      // recording device instead.\\n      acceptedFiles: 'video/*, audio/*',\\n      uploadprogress: function (file, progress, bytesSent) {\\n        userStore.uploadPercentage = progress;\\n        console.log(userStore.uploadPercentage);\\n        if (userStore.uploadPercentage !== 100) {\\n          isHidden = true;\\n        }\\n      },\\n      dictDefaultMessage: \\\"Click here or Drop video here to upload <br>(Max video file size is 25GB)\\\",\\n      forceFallback: false, // for testing, set to true.\\n      accept: function (file, done) {\\n        if (file.name === \\\"\\\") {\\n          done(\\\"Need a file.\\\");\\n        } else if (file.size > 25000000000) {\\n          console.log(file.size)\\n          done(\\\"Video file too big.\\\");\\n          alert('Video file must be smaller than 25GB');\\n        } else {\\n          done();\\n        }\\n      }\\n    });\\n\\n    myDropzone.on(\\\"addedfile\\\", file => {\\n      uploadingMessage = 1;\\n      console.log(`File added: ${file.name}`);\\n\\n    });\\n\\n    myDropzone.on(\\\"complete\\\", function (file) {\\n      uploadingMessage = 0;\\n      uploadCompleteMessage = 1;\\n      myDropzone.removeFile(file);\\n      userStore.uploadPercentage = 0;\\n      isHidden = false;\\n      Inertia.reload({\\n        only: [\\\"videos\\\"],\\n      });\\n    });\\n\\n  } else {\\n    console.error('Element with ID \\\"videoUploadForm\\\" not found in the DOM.');\\n  }\\n})\\n\\nlet props = defineProps({\\n  movieId: Number,\\n  movieTrailerId: Number,\\n  showEpisodeId: Number,\\n})\\n\\nfunction setMovieOrEpisodeId() {\\n  if (props.movieId !== null) {\\n    userStore.uploadMovieId = props.mov;\\n  } else if (props.movieTrailerId !== null) {\\n    userStore.movieTrailerId = props.movieTrailerId;\\n  } else if (props.showEpisodeId !== null) {\\n    userStore.uploadShowEpisodeId = props.showEpisodeId;\\n  }\\n}\\n\\nsetMovieOrEpisodeId()\\n\\nlet form = useForm({\\n  file: [],\\n  // movieId: userStore.uploadMovieId,\\n  movieId: props.movieId,\\n  movieTrailerId: props.movieId,\\n  showEpisodeId: props.showEpisodeId,\\n});\\n\\n// let props = defineProps({\\n//     filters: Object,\\n//     can: Object,\\n//     videos: Object,\\n//     message: String,\\n//     errors: ref(''),\\n//     isHidden: ref(false),\\n//     done: ref(),\\n// });\\n\\n</script>\\n<style scoped>\\n\\n.dropzone {\\n  display: flex;\\n  flex-direction: column;\\n  justify-content: center;\\n  align-items: center;\\n  row-gap: 16px;\\n  border: 2px dashed #000000;\\n  background-color: #fce4bb;\\n  transition: 0.3s ease all;\\n}\\n\\nlabel {\\n  padding: 8px 12px;\\n  color: #fff;\\n  background-color: #4bb1b1;\\n  transition: 0.3s ease all;\\n}\\n\\n.active-dropzone {\\n  color: #fff;\\n  border-color: #fff;\\n  background-color: #4bb1b1;\\n}\\n\\n.active-dropzone label {\\n  background-color: #fff;\\n  color: #4bb1b1;\\n}\\n\\n/*6b7280*/\\n/*4bb1b1*/\\n\\n</style>\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","import script from \"./CancelButton.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./CancelButton.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n  <div>\n    <button\n        @click.prevent=\"cancel\"\n        class=\"ml-2 px-4 py-2 text-white bg-orange-600 hover:bg-orange-500 rounded-lg\"\n    >Cancel\n    </button>\n  </div>\n</template>\n\n<script setup>\nimport { Inertia } from \"@inertiajs/inertia\"\nimport { useAppSettingStore } from \"@/Stores/AppSettingStore\"\nimport { useUserStore } from '@/Stores/UserStore'\n\nconst appSettingStore = useAppSettingStore()\nconst userStore = useUserStore()\n\nfunction cancel() {\n  if (appSettingStore.prevUrl) {\n    Inertia.visit(appSettingStore.prevUrl)\n  } else {\n    // Fallback if prevUrl is not available\n    let prevUrl = userStore.isCreator ? '/dashboard' : '/';\n    Inertia.visit(prevUrl);\n  }\n}\n</script>\n","import script from \"./DateTimePickerSelect.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./DateTimePickerSelect.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n  <div>\n    <!--        &lt;!&ndash; Date Picker &ndash;&gt;-->\n    <!--        <v-date-picker-->\n    <!--            v-model=\"selectedDate\"-->\n    <!--            is-inline-->\n    <!--            :attributes=\"{-->\n    <!--        placeholder: 'Select a Date',-->\n    <!--      }\"-->\n    <!--        />-->\n\n    <!--        &lt;!&ndash; Time Picker &ndash;&gt;-->\n    <!--        <v-time-picker-->\n    <!--            v-model=\"selectedTime\"-->\n    <!--            :step-minutes=\"15\"-->\n    <!--            :format=\"12\"-->\n    <!--            :min-time=\"'00:00:00'\"-->\n    <!--            :max-time=\"'23:59:59'\"-->\n    <!--            :attributes=\"{-->\n    <!--        placeholder: 'Select a Time',-->\n    <!--      }\"-->\n    <!--        />-->\n\n\n    <!--        <template>-->\n    <!--            <Calendar />-->\n    <!--&lt;!&ndash;            <DatePicker v-model=\"date\" />&ndash;&gt;-->\n    <!--            <VDatePicker v-model=\"date\" mode=\"dateTime\" :popover=\"false\" hide-time-header>-->\n    <!--                <template #default=\"{ togglePopover, inputValue, inputEvents }\">-->\n    <!--                    <div-->\n    <!--                        class=\"flex rounded-lg border border-gray-300 dark:border-gray-600 overflow-hidden\"-->\n    <!--                    >-->\n    <!--                        <button-->\n    <!--                            class=\"flex justify-center items-center px-2 bg-accent-100 hover:bg-accent-200 text-accent-700 border-r border-gray-300 dark:bg-gray-700 dark:text-accent-300 dark:border-gray-600 dark:hover:bg-gray-600\"-->\n    <!--                            @click=\"() => togglePopover()\"-->\n    <!--                        >-->\n    <!--                            <IconCalendar class=\"w-5 h-5\" />-->\n    <!--                        </button>-->\n    <!--                        <input-->\n    <!--                            :value=\"inputValue\"-->\n    <!--                            v-on=\"inputEvents\"-->\n    <!--                            class=\"flex-grow px-2 py-1 bg-white dark:bg-gray-700\"-->\n    <!--                        />-->\n    <!--                    </div>-->\n    <!--                </template>-->\n    <!--            </VDatePicker>-->\n    <!--        </template>-->\n\n    <DatePicker v-model=\"date\" mode=\"dateTime\" hide-time-header>\n      <template #default=\"{ togglePopover }\">\n        <button\n            class=\"px-3 py-2 bg-blue-500 text-sm text-white font-semibold rounded-md\"\n            @click.prevent=\"togglePopover\"\n        >\n          <slot name=\"buttonName\">Select date</slot>\n        </button>\n      </template>\n    </DatePicker>\n\n  </div>\n</template>\n\n<script setup>\nimport { ref, defineProps, defineEmits, watch } from 'vue'\nimport VDatePicker from 'v-calendar'\n// import VCalendar from 'v-calendar'\nimport { Calendar, DatePicker } from 'v-calendar'\nimport 'v-calendar/style.css'\n\nconst props = defineProps({\n  // initialDate: Date,\n  // initialTime: String,\n  inputValue: String,\n  date: String,\n});\n\nconst emits = defineEmits();\n\n// let date = new Date();\n// let date = ref(new Date());\nlet date = ref(props.date);\nconst calendar = ref(null);\nconst inputValue = ref(props.inputValue || null);\n\n// Define refs to store selected date and time\n// const selectedDate = ref(props.initialDate || null);\n// const selectedTime = ref(props.initialTime || null);\n\n\n// Watch for changes in selected dateTime emit it\nwatch([date], ([newDate]) => {\n  emits('date-time-selected', {date: newDate});\n});\n</script>\n","import script from \"./Messages.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Messages.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n  <div class=\"mx-4 my-4\">\n    <div class=\"alert alert-info mt-4\"\n         v-if=\"props.flash.message\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" class=\"stroke-current shrink-0 w-6 h-6\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n              d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"></path>\n      </svg>\n      <span>{{ props.flash.message }}</span>\n      <button class=\"text-xs ml-12\" @click=\"clearFlashMessage\"> Close</button>\n    </div>\n    <div class=\"alert alert-success mt-4 mx-3\"\n         v-if=\"props.flash.success\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"stroke-current shrink-0 h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n              d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"/>\n      </svg>\n      <span>{{ props.flash.success }}</span>\n      <button class=\"text-xs ml-12\" @click=\"clearFlashMessage\"> Close</button>\n    </div>\n    <div class=\"alert alert-warning mt-4 mx-3\"\n         v-if=\"props.flash.warning\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"stroke-current shrink-0 h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n              d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z\"/>\n      </svg>\n      <span>{{ props.flash.warning }}</span>\n      <button class=\"text-xs ml-12\" @click=\"clearFlashMessage\"> Close</button>\n    </div>\n    <div class=\"alert alert-error mt-4 mx-3\"\n         v-if=\"props.flash.error\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"stroke-current shrink-0 h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n              d=\"M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z\"/>\n      </svg>\n      <span>{{ props.flash.error }}</span>\n      <button class=\"text-xs ml-12\" @click=\"clearFlashMessage\"> Close</button>\n    </div>\n  </div>\n\n</template>\n\n<script setup>\nimport { Inertia } from \"@inertiajs/inertia\"\nimport { computed } from \"vue\"\nimport { useAppSettingStore } from \"@/Stores/AppSettingStore\"\n\nconst appSettingStore = useAppSettingStore()\n\nappSettingStore.showFlashMessage = true\n\nlet props = defineProps({\n  flash: Object,\n\n})\n\nconst messageType = computed(() => ({\n  'text-green-700 bg-green-100 dark:bg-green-200 dark:text-green-800': props.flash.success,\n  'text-blue-700 bg-blue-100 dark:bg-blue-200 dark:text-blue-800': props.flash.message,\n  'text-orange-700 bg-orange-100 dark:bg-orange-200 dark:text-orange-800': props.flash.warning,\n  'text-red-700 bg-red-100 dark:bg-red-200 dark:text-red-800': props.flash.error,\n}))\n\nconst clearFlashMessage = async () => {\n  await Inertia.post(route('flash.clear'));\n  Inertia.reload();\n};\n</script>\n","import script from \"./TabbableTextarea.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./TabbableTextarea.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n    <textarea\n        @keydown.tab.prevent=\"onTabPress\"\n        @keyup=\"emit('update:modelValue', $event.target.value)\"\n        v-text=\"modelValue\"/>\n</template>\n\n<script setup>\ndefineProps({\n  modelValue: String\n});\n\nlet emit = defineEmits(['update:modelValue']);\n\nfunction onTabPress(e) {\n  let textarea = e.target;\n\n  // get caret position/selection\n  let val = textarea.value,\n      start = textarea.selectionStart,\n      end = textarea.selectionEnd;\n\n  // set textarea value to: text before caret + tab + text after caret\n  textarea.value = val.substring(0, start) + \"\\t\" + val.substring(end);\n\n  // put caret at right position again\n  textarea.selectionStart = textarea.selectionEnd = start + 1;\n}\n\n</script>\n","import script from \"./ImageUpload.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./ImageUpload.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n  <div class=\"\">\n    <div class=\"max-full mx-auto mt-2 mb-6 bg-gray-200 p-6 text-black\">\n      <h2 class=\"text-xl font-semibold\">{{ name }}</h2>\n\n      <ul class=\"pb-4\">\n        <li>Max File Size: <span class=\"text-orange-400\">{{ maxSize }}</span></li>\n        <li>File Types accepted: <span class=\"text-orange-400\">{{ fileTypes }}</span></li>\n      </ul>\n      <file-pond\n          name=\"image\"\n          ref=\"pond\"\n          label-idle=\"Click to choose file, or drag here...\"\n          @init=\"filepondInitialized\"\n          :server=\"server\"\n          :accepted-file-types=\"fileTypes\"\n          @processfile=\"handleProcessedFile\"\n          :max-file-size=\"maxSize\"\n      />\n      <!--        <file-pond-->\n      <!--            ref=\"filePond\"-->\n      <!--            :files=\"files\"-->\n      <!--            :server=\"serverOptions\"-->\n      <!--            @init=\"handleFilePondInit\"-->\n      <!--            @beforeaddfile=\"handleBeforeAddFile\"-->\n      <!--            @processfile=\"handleProcessedFile\"-->\n      <!--        />-->\n    </div>\n  </div>\n\n</template>\n\n<script setup>\nimport { Inertia } from \"@inertiajs/inertia\"\nimport { computed, ref } from \"vue\"\nimport vueFilePond, { setOptions } from 'vue-filepond'\nimport FilePondPluginFileValidateType from \"filepond-plugin-file-validate-type\"\nimport FilePondPluginFileValidateSize from \"filepond-plugin-file-validate-size\"\nimport FilePondPluginImagePreview from \"filepond-plugin-image-preview\"\nimport FilePondPluginFileMetadata from \"filepond-plugin-file-metadata\"\nimport 'filepond/dist/filepond.min.css'\nimport 'filepond-plugin-image-preview/dist/filepond-plugin-image-preview.min.css'\n\nlet props = defineProps({\n  image: Object,\n  name: String,\n  metadataKey: String,\n  metadataValue: String,\n  server: String,\n  maxSize: String,\n  fileTypes: String,\n})\n\n\n// // Initialize FilePond with the File Metadata plugin\n// const filePondOptions = {\n//     allowMultiple: false,\n//     labelIdle: \"Drop files here or click to upload\",\n//     plugins: [FilePondPluginFileMetadata()],\n// };\n\n\n// Files array to store uploaded files\n// const files = ref([]);\n\nconst metadataKey = props.metadataKey\nconst metadataValue = props.metadataValue\nconst customMetadata = {\n  [metadataKey]: metadataValue\n};\n// customMetadata.value[props.metadataKey] = 'bar';\n// customMetadata.value[props.metadataKey] = props.metadataValue;\n// const customMetadata = ref({ [props.metadataKey]: props.metadataValue });\n// const customMetadata = computed(() => ({\n//     [props.metadataKey]: props.metadataValue,\n// }));\n\n// FilePond server options (you can customize this)\nconst serverOptions = {\n  process: (fieldName, file, metadata, load, error, progress, abort) => {\n    // Construct a FormData object to send the file and metadata to your Laravel server\n    const formData = new FormData();\n    formData.append('file', file, file.name); // Add the file\n    formData.append('metadata', JSON.stringify(customMetadata)); // Add the metadata as a JSON string\n\n    // Make an Axios POST request to your Laravel backend\n    axios.post(props.server, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data', // Set the appropriate content type\n      },\n      onUploadProgress: (event) => {\n        const progressPercentage = Math.round((event.loaded / event.total) * 100);\n        // Update the progress bar or display progress percentage if needed\n        progress(progressPercentage);\n      },\n    })\n        .then((response) => {\n          // Handle a successful upload\n          load(response.data.url); // Pass the file URL to the load() function\n        })\n        .catch((err) => {\n          // Handle upload error\n          console.error('Upload error:', err);\n          error('Error uploading the file'); // Pass an error message to the error() function\n        });\n  },\n};\n\n\n// Initialize FilePond\n// const handleFilePondInit = () => {\n//     // FilePond has been initialized\n//     console.log(\"FilePond is ready\");\n// };\n\n// Handle the beforeaddfile event\n// const handleBeforeAddFile = (file) => {\n//     // Add metadata to the file object\n//     file.setMetadata(\"key\", \"value\");\n//     // You can set multiple metadata fields as needed\n//     // file.setMetadata(\"anotherKey\", \"anotherValue\");\n// };\n\n\nconst FilePond = vueFilePond(\n    FilePondPluginFileValidateType,\n    FilePondPluginFileValidateSize,\n    FilePondPluginImagePreview,\n    FilePondPluginFileMetadata\n);\n\n// Handle the beforeaddfile event\n// const handleBeforeAddFile = (file) => {\n//     // Add metadata to the file object\n//     file.setMetadata(\"show_id\", \"1\");\n//     // You can set multiple metadata fields as needed\n//     // file.setMetadata(\"anotherKey\", \"anotherValue\");\n// };\n\n// FilePond.registerPlugin(FilePondPluginFileMetadata);\nFilePond.setOptions = ({\n  fileMetadataObject: {\n    show_id: '1',\n  },\n});\n\n\n// Initialize FilePond with the File Metadata plugin\n// const filePondOptions = {\n//     allowMultiple: true,\n//     labelIdle: \"Drop files here or click to upload\",\n//     plugins: [FilePondPluginFileMetadata()],\n// };\n\nfunction filepondInitialized() {\n  console.log(\"Filepond is ready!\");\n  // console.log('Filepond object:', FilePond);\n\n}\n\nconst emit = defineEmits(['reloadImage'])\n\nfunction handleProcessedFile(error, file) {\n  if (error) {\n    console.log(\"Filepond processed file\");\n    console.log(error);\n    console.log(file);\n    return;\n  }\n\n  emit('reloadImage')\n\n  // Inertia.reload({\n  //     only: ['image'],\n  // });\n}\n\n</script>\n","<template>\n  <div>\n\n    <progress v-show=\"userStore.uploadPercentage != 0\" max=\"100\" :value=\"userStore.uploadPercentage\" class=\"w-full\"/>\n    <div v-show=\"userStore.uploadPercentage != 0\" class=\"w-full mb-4\">{{ userStore.uploadPercentageRounded }}%</div>\n\n    <div v-show=\"uploadingMessage\" class=\"mb-4 font-bold text-center\">Please stay on this screen until upload is\n      complete.\n    </div>\n    <div v-show=\"uploadCompleteMessage\" class=\"mb-4 font-bold text-center\">Upload is complete. The video is now\n      processing.\n    </div>\n    <form v-show=\"!isHidden\" id=\"videoUploadForm\" action=\"/videoupload\"\n          class=\"dropzone dropzoneFile border border-black rounded w-full h-48 max-w-md px-2 py-2 mb-6\">\n      <!--                            add input fields and a submit button to send data back to Laravel -->\n      <input hidden name=\"movieId\" v-model=\"form.movieId\">\n      <!--            <input hidden name=\"movieTrailerId\" v-model=\"form.movieTrailerId\">-->\n      <input hidden name=\"showEpisodeId\" v-model=\"form.showEpisodeId\">\n    </form>\n\n  </div>\n</template>\n\n<script setup>\nimport { Inertia } from \"@inertiajs/inertia\"\nimport { onMounted, ref } from \"vue\"\nimport { useForm } from \"@inertiajs/inertia-vue3\"\nimport { Dropzone } from \"dropzone\"\nimport { useUserStore } from \"@/Stores/UserStore\"\n\nconst userStore = useUserStore()\nlet uploadPercentage = ref(0)\nlet uploadingMessage = ref(0)\nlet uploadCompleteMessage = ref(0)\nlet isHidden = ref(false)\n\nonMounted(() => {\n  // Make sure the element with the ID \"videoUploadForm\" is available in the DOM.\n  const videoUploadForm = document.getElementById('videoUploadForm');\n\n  if (videoUploadForm) {\n    // Initialize Dropzone on the element.\n\n    // see options for Dropzone here: https://github.com/dropzone/dropzone/blob/main/src/options.js\n    let myDropzone = new Dropzone(\"#videoUploadForm\", {\n      url: \"/videoupload\",\n      paramName: \"file\", // The name that will be used to transfer the file\n      maxFilesize: '25 GB', // MB\n      chunking: true,\n      chunkSize: 2 * 1024 * 1024,\n      parallelChunkUploads: false,\n      retryChunks: true,\n      retryChunksLimit: 10,\n      capture: null,\n      // can set the capture method as camera, microphone or video\n      // for mobile devices to skip the file selection and choose the\n      // recording device instead.\n      acceptedFiles: 'video/*, audio/*',\n      uploadprogress: function (file, progress, bytesSent) {\n        userStore.uploadPercentage = progress;\n        console.log(userStore.uploadPercentage);\n        if (userStore.uploadPercentage !== 100) {\n          isHidden = true;\n        }\n      },\n      dictDefaultMessage: \"Click here or Drop video here to upload <br>(Max video file size is 25GB)\",\n      forceFallback: false, // for testing, set to true.\n      accept: function (file, done) {\n        if (file.name === \"\") {\n          done(\"Need a file.\");\n        } else if (file.size > 25000000000) {\n          console.log(file.size)\n          done(\"Video file too big.\");\n          alert('Video file must be smaller than 25GB');\n        } else {\n          done();\n        }\n      }\n    });\n\n    myDropzone.on(\"addedfile\", file => {\n      uploadingMessage = 1;\n      console.log(`File added: ${file.name}`);\n\n    });\n\n    myDropzone.on(\"complete\", function (file) {\n      uploadingMessage = 0;\n      uploadCompleteMessage = 1;\n      myDropzone.removeFile(file);\n      userStore.uploadPercentage = 0;\n      isHidden = false;\n      Inertia.reload({\n        only: [\"videos\"],\n      });\n    });\n\n  } else {\n    console.error('Element with ID \"videoUploadForm\" not found in the DOM.');\n  }\n})\n\nlet props = defineProps({\n  movieId: Number,\n  movieTrailerId: Number,\n  showEpisodeId: Number,\n})\n\nfunction setMovieOrEpisodeId() {\n  if (props.movieId !== null) {\n    userStore.uploadMovieId = props.mov;\n  } else if (props.movieTrailerId !== null) {\n    userStore.movieTrailerId = props.movieTrailerId;\n  } else if (props.showEpisodeId !== null) {\n    userStore.uploadShowEpisodeId = props.showEpisodeId;\n  }\n}\n\nsetMovieOrEpisodeId()\n\nlet form = useForm({\n  file: [],\n  // movieId: userStore.uploadMovieId,\n  movieId: props.movieId,\n  movieTrailerId: props.movieId,\n  showEpisodeId: props.showEpisodeId,\n});\n\n// let props = defineProps({\n//     filters: Object,\n//     can: Object,\n//     videos: Object,\n//     message: String,\n//     errors: ref(''),\n//     isHidden: ref(false),\n//     done: ref(),\n// });\n\n</script>\n<style scoped>\n\n.dropzone {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  row-gap: 16px;\n  border: 2px dashed #000000;\n  background-color: #fce4bb;\n  transition: 0.3s ease all;\n}\n\nlabel {\n  padding: 8px 12px;\n  color: #fff;\n  background-color: #4bb1b1;\n  transition: 0.3s ease all;\n}\n\n.active-dropzone {\n  color: #fff;\n  border-color: #fff;\n  background-color: #4bb1b1;\n}\n\n.active-dropzone label {\n  background-color: #fff;\n  color: #4bb1b1;\n}\n\n/*6b7280*/\n/*4bb1b1*/\n\n</style>\n","import api from \"!../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../../../node_modules/css-loader/dist/cjs.js??clonedRuleSet-9.use[1]!../../../../../node_modules/vue-loader/dist/stylePostLoader.js!../../../../../node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-9.use[2]!../../../../../node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./VideoUpload.vue?vue&type=style&index=0&id=60980035&scoped=true&lang=css\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","import script from \"./VideoUpload.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./VideoUpload.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./VideoUpload.vue?vue&type=style&index=0&id=60980035&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-60980035\"]])\n\nexport default __exports__","import script from \"./EpisodeVideo.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./EpisodeVideo.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","import script from \"./ValidationErrors.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./ValidationErrors.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<script setup>\nimport { computed } from 'vue';\nimport { usePage } from '@inertiajs/inertia-vue3';\n\nconst errors = computed(() => usePage().props.value.errors);\nconst hasErrors = computed(() => Object.keys(errors.value).length > 0);\n</script>\n\n<template>\n    <div v-if=\"hasErrors\">\n        <div class=\"font-medium text-red-600\">\n            Whoops! Something went wrong.\n        </div>\n\n        <ul class=\"mt-3 list-disc list-inside text-sm text-red-600\">\n            <li v-for=\"(error, key) in errors\" :key=\"key\">\n                {{ error }}\n            </li>\n        </ul>\n    </div>\n</template>\n","import script from \"./ShowEpisodeEditHeader.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./ShowEpisodeEditHeader.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","import script from \"./ShowEpisodeEditFooter.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./ShowEpisodeEditFooter.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n\n  <div class=\"flex justify-between my-6\">\n    <!-- Paginator -->\n    <!--                            <Pagination :links=\"`#`\" class=\"mt-6\"/>-->\n    <div>\n      <span class=\"text-xs uppercase font-semibold\">Episode ID: </span><span class=\"text-xs\">{{ episode.ulid }}</span>\n    </div>\n    <div>\n      <Link :href=\"`/teams/${team.slug}`\" class=\"text-blue-500 hover:text-blue-700 ml-2 uppercase\">{{ team.name }} ©\n        <span v-if=\"show.last_release_year > 0\">{{ show.first_release_year }}-{{ show.last_release_year }}</span>\n        <span v-if=\"!show.last_release_year && show.first_release_year\">{{ show.first_release_year }}</span>\n        <span v-if=\"!show.last_release_year && !show.first_release_year\">{{ currentYear }}</span>\n      </Link>\n    </div>\n  </div>\n\n</template>\n\n<script setup>\n\ndefineProps({\n  team: Object,\n  episode: Object,\n  show: Object,\n  can: Object,\n})\n\nlet currentYear = new Date().getFullYear()\n\n</script>\n","import script from \"./Edit.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Edit.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n\n  <Head :title=\"`Edit Episode: ${props.episode.name}`\"/>\n\n  <div id=\"topDiv\" class=\"place-self-center flex flex-col gap-y-3\">\n    <div class=\"bg-white dark:bg-gray-800 text-black light:text-black dark:text-white px-5 mb-10\">\n\n      <Message v-if=\"appSettingStore.showFlashMessage\" :flash=\"$page.props.flash\"/>\n      <div class=\"alert alert-error mt-4 mx-3\"\n           v-if=\"showStore.errorMessage\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"stroke-current shrink-0 h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\">\n          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n                d=\"M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z\"/>\n        </svg>\n        <span>{{ showStore.errorMessage }}</span>\n        <button class=\"text-xs ml-12\" @click=\"showStore.errorMessage = ''\"> Close</button>\n      </div>\n\n      <header>\n        <ShowEpisodeEditHeader :show=\"props.show\" :team=\"props.team\" :episode=\"props.episode\"/>\n      </header>\n\n      <div class=\"flex flex-col\">\n        <div class=\"-my-2 overflow-x-none\">\n          <div class=\"py-2 align-middle inline-block min-w-full sm:px-6 lg:px-8\">\n            <div class=\"shadow overflow-hidden border-b border-gray-200 sm:rounded-lg\">\n\n              <div v-if=\"form.errors.name\" v-text=\"form.errors.name\"\n                   class=\"bg-red-600 p-2 w-full text-white font-semibold mt-1\"></div>\n              <div v-if=\"form.errors.description\" v-text=\"form.errors.description\"\n                   class=\"bg-red-600 p-2 w-full text-white font-semibold mt-1\"></div>\n              <div v-if=\"form.errors.episode_number\" v-text=\"form.errors.episode_number\"\n                   class=\"bg-red-600 p-2 w-full text-white font-semibold mt-1\"></div>\n              <div v-if=\"form.errors.notes\" v-text=\"form.errors.notes\"\n                   class=\"bg-red-600 p-2 w-full text-white font-semibold mt-1\"></div>\n              <div v-if=\"form.errors.video_file_url\" v-text=\"form.errors.video_file_url\"\n                   class=\"bg-red-600 p-2 w-full text-white font-semibold mt-1\"></div>\n              <!--                            <div v-if=\"form.errors.youtube_url\" v-text=\"form.errors.youtube_url\"-->\n              <!--                                 class=\"bg-red-600 p-2 w-full text-white font-semibold mt-1\"></div>-->\n              <div v-if=\"form.errors.video_embed_code\" v-text=\"form.errors.video_embed_code\"\n                   class=\"bg-red-600 p-2 w-full text-white font-semibold mt-1\"></div>\n\n\n              <form @submit.prevent=\"submit\">\n                <!--                                <div class=\"flex justify-end mr-2 mb-6\">-->\n                <!--                                    <button-->\n                <!--                                        @click=\"submit\"-->\n                <!--                                        class=\"bg-blue-600 hover:bg-blue-500 text-white rounded py-2 px-4\"-->\n                <!--                                        :disabled=\"form.processing\"-->\n                <!--                                    >-->\n                <!--                                        Save-->\n                <!--                                    </button>-->\n                <!--                                </div>-->\n\n\n                <!-- Begin grid 2-col -->\n                <div class=\"grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 space-x-6 p-6\">\n\n                  <!--Left Column-->\n                  <div class=\"xl:col-span-2\">\n\n                    <div class=\"mb-6\">\n                      <label class=\"block mb-2 uppercase font-bold text-xs\"\n                             for=\"notes\"\n                      >\n                        Episode Notes (only the team members see the notes)\n                      </label>\n\n                      <input v-model=\"form.notes\"\n                             class=\"border border-gray-400 p-2 w-full rounded-lg text-black\"\n                             type=\"text\"\n                             name=\"notes\"\n                             id=\"notes\"\n                      >\n                      <div v-if=\"form.errors.notes\" v-text=\"form.errors.notes\"\n                           class=\"text-xs text-red-600 mt-1\"></div>\n                    </div>\n\n\n                    <div v-if=\"props.episode.status.id < 7\" class=\"mb-6\">\n                      <label class=\"block mb-2 uppercase font-bold text-xs\"\n                             for=\"releaseDate\"\n                      >\n                                            <span v-if=\"props.episode.scheduled_release_dateTime\">\n                                                Scheduled Release Date</span>\n                        <span v-else>\n                                                Schedule Release</span>\n                      </label>\n\n                      <div v-if=\"!cancelScheduledReleaseDate\">\n                        <div v-if=\"props.episode.scheduled_release_dateTime && !selectedScheduledDateTime\"\n                             class=\"mb-2\">\n                          {{ formatDate(props.episode.scheduled_release_dateTime) }}\n                        </div>\n                        <div v-if=\"selectedScheduledDateTime\"\n                             class=\"mb-2\">\n                          {{ formatDate(selectedScheduledDateTime.date) }}\n                        </div>\n                      </div>\n                      <div v-else class=\"mb-2\">\n                        <span class=\"italic\">Scheduled release cancelled. Please save the changes.</span>\n                      </div>\n\n                      <div class=\"flex flex-row flex-wrap space-x-2\">\n                        <DateTimePickerSelect :date=\"props.episode.scheduled_release_dateTime\"\n                                              @date-time-selected=\"handleScheduledDateTime\"/>\n                        <!-- Display the selected date and time received from DateTimePicker -->\n                        <button v-if=\"props.episode.scheduled_release_dateTime\"\n                                class=\"px-3 py-2 bg-blue-500 text-sm text-white font-semibold rounded-md\"\n                                @click.prevent=\"cancelScheduledRelease\">Cancel Release\n                        </button>\n                      </div>\n\n\n                    </div>\n\n                    <div v-if=\"props.episode.status.id === 7\" class=\"mb-6\">\n                      <label class=\"block mb-2 uppercase font-bold text-xs\"\n                             for=\"releaseDate\"\n                      >\n                        Release Date\n                      </label>\n\n                      <div v-if=\"props.episode.release_dateTime && !selectedReleaseDateTime\"\n                           class=\"mb-2\">\n                        {{ formatDate(props.episode.release_dateTime) }}\n                      </div>\n                      <div v-if=\"selectedReleaseDateTime\"\n                           class=\"mb-2\">\n                        {{ formatDate(selectedReleaseDateTime.date) }}\n                      </div>\n\n\n                      <DateTimePickerSelect v-if=\"userStore.isAdmin\" :date=\"props.episode.release_dateTime\"\n                                            @date-time-selected=\"handleReleaseDateTime\">\n                        <template v-slot:buttonName>\n                          Change date\n                        </template>\n                      </DateTimePickerSelect>\n                      <!-- Display the selected date and time received from DateTimePicker -->\n\n\n                    </div>\n\n                    <div class=\"mb-6\">\n                      <label class=\"block mb-2 uppercase font-bold text-xs\"\n                             for=\"name\"\n                      >\n                        Episode Name\n                      </label>\n\n                      <input v-model=\"form.name\"\n                             class=\"border border-gray-400 text-gray-800 p-2 w-1/2 rounded-lg\"\n                             type=\"text\"\n                             name=\"name\"\n                             id=\"name\"\n                             required\n                      >\n                      <div v-if=\"form.errors.name\" v-text=\"form.errors.name\"\n                           class=\"text-xs text-red-600 mt-1\"></div>\n                    </div>\n\n                    <div class=\"mb-6\">\n                      <label class=\"block mb-2 uppercase font-bold text-xs\"\n                             for=\"episode_number\"\n                      >\n                        Episode Number\n                      </label>\n\n                      <input v-model=\"form.episode_number\"\n                             class=\"border border-gray-400 text-gray-800 p-2 w-1/2 rounded-lg\"\n                             type=\"text\"\n                             :placeholder=\"props.episode.id\"\n                             name=\"episode_number\"\n                             id=\"episode_number\"\n                      >\n                      <div v-if=\"form.errors.episode_number\" v-text=\"form.errors.episode_number\"\n                           class=\"text-xs text-red-600 mt-1\"></div>\n                    </div>\n\n\n                    <div class=\"mb-6 w-full\">\n                      <label class=\"block mb-2 uppercase font-bold text-xs text-light\"\n                             for=\"description\"\n                      >\n                        Description\n                      </label>\n                      <TabbableTextarea v-model=\"form.description\"\n                                        class=\"border border-gray-400 text-gray-800 p-2 w-full rounded-lg\"\n                                        name=\"description\"\n                                        id=\"description\"\n                                        rows=\"10\" cols=\"30\"\n                                        required\n                      />\n                      <div v-if=\"form.errors.description\" v-text=\"form.errors.description\"\n                           class=\"text-xs text-red-600 mt-1\"></div>\n                    </div>\n\n                    <!--                                    <div class=\"mb-6\">-->\n                    <!--                                        <label class=\"block mb-2 uppercase font-bold text-xs text-white\"-->\n                    <!--                                               for=\"video_file_url\"-->\n                    <!--                                        >-->\n                    <!--                                            YouTube URL-->\n                    <!--                                        </label>-->\n\n                    <!--                                        <input v-model=\"form.youtube_url\"-->\n                    <!--                                               class=\"border border-gray-400 text-gray-800 p-2 w-full rounded-lg\"-->\n                    <!--                                               type=\"text\"-->\n                    <!--                                               name=\"youtube_url\"-->\n                    <!--                                               id=\"youtube_url\"-->\n                    <!--                                        >-->\n                    <!--                                        <div v-if=\"form.errors.youtube_url\" v-text=\"form.errors.youtube_url\"-->\n                    <!--                                             class=\"text-xs text-red-600 mt-1\"></div>-->\n                    <!--                                    </div>-->\n\n                    <div class=\"mb-6\">\n                      <label class=\"block mb-2 uppercase font-bold text-xs\"\n                             for=\"video_file_url\"\n                      >\n                        Video URL (External MP4 only)\n                      </label>\n\n                      <input v-model=\"form.video_url\"\n                             class=\"border border-gray-400 text-gray-800 p-2 w-full rounded-lg\"\n                             type=\"text\"\n                             name=\"video_url\"\n                             id=\"video_url\"\n                      >\n                      <div class=\"text-xs mt-1\">\n                        Example: <span class=\"underline\">https://domainname.com/filename.mp4</span>\n                      </div>\n                      <div v-if=\"form.errors.video_url\" v-text=\"form.errors.video_url\"\n                           class=\"text-xs text-red-600 mt-1\"></div>\n                    </div>\n\n                    <div class=\"mb-6\">\n                      <label class=\"block mb-2 uppercase font-bold text-xs\"\n                             for=\"video_embed_code\"\n                      >\n                        Embed Code (Rumble or Bitchute only) <span class=\"\">*</span>\n                      </label>\n\n                      <TabbableTextarea v-model=\"form.video_embed_code\"\n                                        class=\"border border-gray-400 text-gray-800 p-2 w-full rounded-lg\"\n                                        type=\"text\"\n                                        name=\"video_embed_code\"\n                                        id=\"video_embed_code\"\n                                        rows=\"10\" cols=\"30\"\n                      />\n                      <div v-if=\"form.errors.video_embed_code\" v-text=\"form.errors.video_embed_code\"\n                           class=\"text-xs mt-1\"></div>\n                    </div>\n\n                    <div class=\"mt-2 mb-6 pb-4 border-b\">\n                      <div class=\"mb-2 block uppercase font-bold text-xs\">\n                        * Notes about video embedding:\n                      </div>\n                      <ul class=\"list-decimal pb-2 ml-2\">\n                        <li>\n                          If both URL and Embed Code are provided the system will attempt to get the Video Url from the\n                          Embed Code.\n                        </li>\n                        <li>\n                          We have <span class=\"font-bold\">not</span> enabled the use of Facebook videos for security\n                          purposes.\n                        </li>\n                        <li>\n                          If you want to use YouTube, enter the YouTube video URL above in the YouTube URL field. This\n                          option is least preferable, due to a lower quality user experience.\n                        </li>\n                      </ul>\n                    </div>\n\n\n                  </div>\n                  <!-- End Left Column -->\n\n                  <!--Right Column-->\n                  <div>\n\n                    <div>\n                      <label class=\"block mb-2 uppercase font-bold text-xs\"\n                             for=\"episodeVideo\"\n                      >\n                        Upload Episode\n                      </label>\n                      <div class=\"max-full mx-auto mt-2 mb-6 bg-gray-200 p-6\">\n                        <h2 class=\"text-xl font-semibold text-gray-800\">Upload Video</h2>\n\n                        <ul class=\"pb-4 text-gray-800\">\n                          <li>Max Video Length: <span class=\"text-orange-400\">4 hours</span>\n                          </li>\n                          <li>File Types accepted: <span class=\"text-orange-400\">mp4, webm, ogg</span>\n                          </li>\n                        </ul>\n\n                        <VideoUpload :showEpisodeId=\"episode.id\" class=\"text-black\"/>\n\n                      </div>\n\n                    </div>\n\n\n                    <div>\n                      <label class=\"block mb-2 uppercase font-bold text-xs\"\n                             for=\"name\"\n                      >\n                        Change Episode Poster\n                      </label>\n                      <div class=\"max-full mx-auto mt-2 mb-6 bg-gray-200 p-6\">\n\n                        <ImageUpload :image=\"props.image\"\n                                     :server=\"'/showEpisodesUploadPoster'\"\n                                     :name=\"'Upload Episode Poster'\"\n                                     :maxSize=\"'20MB'\"\n                                     :fileTypes=\"'image/jpg, image/jpeg, image/png'\"\n                                     @reloadImage=\"reloadImage\"\n                        />\n\n                        <div class=\"flex space-y-3\">\n                          <div class=\"mb-6\">\n                            <SingleImage :image=\"props.image\" :key=\"props.image\"/>\n                          </div>\n                        </div>\n\n\n                      </div>\n\n                    </div>\n\n\n                  </div>\n\n\n                  <!-- End Right Column -->\n                </div>\n                <!-- End grid 2-col -->\n\n                <div class=\"flex justify-end mb-6\">\n                  <JetValidationErrors class=\"mr-4\"/>\n                  <button\n                      @click.prevent=\"submit\"\n                      class=\"h-fit bg-blue-600 hover:bg-blue-500 text-white rounded py-2 px-4 mr-5\"\n                      :disabled=\"form.processing\"\n                  >\n                    Save\n                  </button>\n                </div>\n\n              </form>\n\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <ShowEpisodeEditFooter :can=\"props.can\" :team=\"props.team\" :episode=\"props.episode\" :show=\"props.show\"/>\n\n    </div>\n  </div>\n\n</template>\n\n<script setup>\nimport { Inertia } from \"@inertiajs/inertia\"\nimport { onMounted, onUnmounted, ref } from \"vue\"\nimport { useForm } from \"@inertiajs/inertia-vue3\"\nimport { format } from 'date-fns'\nimport { usePageSetup } from '@/Utilities/PageSetup'\nimport { useAppSettingStore } from \"@/Stores/AppSettingStore\"\nimport { useTeamStore } from \"@/Stores/TeamStore\"\nimport { useShowStore } from \"@/Stores/ShowStore\"\nimport { useUserStore } from \"@/Stores/UserStore\"\nimport JetValidationErrors from '@/Jetstream/ValidationErrors'\nimport ShowEpisodeEditHeader from \"@/Components/Pages/ShowEpisodes/Edit/Layout/ShowEpisodeEditHeader\"\nimport ShowEpisodeEditFooter from \"@/Components/Pages/ShowEpisodes/Edit/Layout/ShowEpisodeEditFooter\"\nimport Message from \"@/Components/Global/Modals/Messages\"\nimport ImageUpload from \"@/Components/Global/Uploaders/ImageUpload\"\nimport SingleImage from \"@/Components/Global/Multimedia/SingleImage\"\nimport VideoUpload from \"@/Components/Global/Uploaders/VideoUpload\"\nimport DateTimePickerSelect from \"@/Components/Global/Calendar/DateTimePickerSelect\"\nimport TabbableTextarea from \"@/Components/Global/TextEditor/TabbableTextarea\"\n// import {DatePicker} from \"v-calendar\";\n// import 'v-calendar/style.css';\n\nusePageSetup('shows/slug/episodes/slug')\n\nconst appSettingStore = useAppSettingStore()\nconst teamStore = useTeamStore()\nconst showStore = useShowStore()\nconst userStore = useUserStore()\n\nlet props = defineProps({\n  show: Object,\n  team: Object,\n  episode: Object,\n  image: Object,\n  can: Object,\n});\n\nteamStore.setActiveTeam(props.team);\nteamStore.setActiveShow(props.show);\nshowStore.episodePoster = props.image.name;\n\nlet scheduledDateTime = ref(''); // This will hold the selected date and time in ISO format\nlet releaseDateTime = ref(''); // This will hold the selected date and time in ISO format\n\n// Define a ref to store selected date and time received from DateTimePicker\nlet selectedReleaseDateTime = ref('');\nlet selectedScheduledDateTime = ref('');\nlet cancelScheduledReleaseDate = ref(false);\n\nlet formattedReleaseDateTime = ref(''); // This will display the formatted date and time\nlet formattedScheduledDateTime = ref(''); // This will display the formatted date and time\n\nlet userReleaseDateTime = ref(''); // This will display the date and time in the user's timezone\nlet userScheduledDateTime = ref(''); // This will display the date and time in the user's timezone\n\nconst userTimezone = ref('');\n\n// TODO: convert this to the user's local time\nreleaseDateTime = props.episode.release_dateTime\nscheduledDateTime = props.episode.scheduled_release_dateTime\n\nconst getUserTimezone = () => {\n  // Use the Intl object to get the user's timezone\n  userTimezone.value = Intl.DateTimeFormat().resolvedOptions().timeZone;\n};\n\nconst convertToTimeZone = (dateTime, userTimezone) => {\n  return format(dateTime, 'yyyy-MM-dd HH:mm:ssXXX', {userTimezone});\n};\n\nif (releaseDateTime) {\n  userReleaseDateTime.value = convertToTimeZone(\n      new Date(releaseDateTime),\n      userTimezone.value);\n  console.log('user release dateTime: ' + userReleaseDateTime.value)\n}\n\nif (scheduledDateTime) {\n  userScheduledDateTime.value = convertToTimeZone(\n      new Date(scheduledDateTime),\n      userTimezone.value);\n  console.log('user scheduled dateTime: ' + userScheduledDateTime.value)\n}\n\nlet form = useForm({\n  id: props.episode.id,\n  name: props.episode.name,\n  episode_number: props.episode.episode_number,\n  description: props.episode.description,\n  notes: props.episode.notes,\n  show_id: props.episode.show_id,\n  video_url: props.episode.video.video_url,\n  youtube_url: props.episode.youtube_url,\n  video_embed_code: props.episode.video_embed_code,\n  release_dateTime: '',\n  scheduled_release_dateTime: '',\n});\n\nlet reloadImage = () => {\n  Inertia.reload({\n    only: ['image'],\n  });\n};\n\nlet submit = () => {\n  if (form.video_embed_code !== props.episode.video_embed_code && form.video_url) {\n    addEmbedCodeConfirm();\n  } else\n    form.put(route('showEpisodes.update', props.episode.slug));\n};\n\n// Compare the converted date to the current date in the user's timezone\nconst currentDate = convertToTimeZone(\n    new Date(),\n    userTimezone.value\n);\n\nconst handleReleaseDateTime = (newDate) => {\n  let changedDate = convertToTimeZone(\n      newDate.date,\n      userTimezone.value\n  )\n  console.log(changedDate)\n  console.log(currentDate)\n  // if release dateTime is in the future, alert and return\n  if (changedDate > currentDate) {\n    // selectedReleaseDateTime.value = props.episode.release_dateTime\n    return alert(\"The selected release date and time is in the future! Please select a date/time in the past.\");\n  } else {\n    // else proceed\n    selectedReleaseDateTime.value = newDate;\n    releaseDateTime = newDate.date;\n    // console.log(releaseDateTime)\n    updateReleaseDateTime()\n    console.log(formattedReleaseDateTime.value)\n    form.release_dateTime = formattedReleaseDateTime\n    form.scheduled_release_dateTime = null\n  }\n}\nconst handleScheduledDateTime = (newDate) => {\n  selectedScheduledDateTime.value = newDate;\n  scheduledDateTime = newDate.date;\n  // console.log(scheduledDateTime)\n  updateScheduledDateTime()\n  console.log(formattedScheduledDateTime.value)\n\n  form.scheduled_release_dateTime = formattedScheduledDateTime\n  form.release_dateTime = null\n}\n\nfunction cancelScheduledRelease() {\n  cancelScheduledReleaseDate.value = true;\n  selectedScheduledDateTime.value = null;\n  form.scheduled_release_dateTime = null;\n}\n\nconst updateReleaseDateTime = () => {\n  if (selectedReleaseDateTime.value) {\n    // Convert the selected date and time to the desired time zone\n    // const timeZone = 'UTC'; // Change this to your desired time zone\n    formattedReleaseDateTime.value = convertToTimeZone(\n        new Date(releaseDateTime),\n        userTimezone.value\n    );\n\n    // Compare the converted date to the current date in the user's timezone\n    // const currentDate = convertToTimeZone(\n    //     new Date(),\n    //     userTimezone.value\n    // );\n    //\n    // if (formattedReleaseDateTime.value > currentDate) {\n    //     props.episode.release_dateTime = userReleaseDateTime.value\n    //     alert(\"The selected release date and time is in the future!\");\n    // }\n\n  } else {\n    formattedReleaseDateTime.value = '';\n  }\n};\n\nconst updateScheduledDateTime = () => {\n  if (selectedScheduledDateTime.value) {\n    // Convert the selected date and time to the desired time zone\n    // const timeZone = 'UTC'; // Change this to your desired time zone\n    formattedScheduledDateTime.value = convertToTimeZone(\n        new Date(scheduledDateTime),\n        userTimezone.value\n    );\n  } else {\n    formattedScheduledDateTime.value = '';\n  }\n};\n\nonMounted(() => {\n  getUserTimezone()\n  console.log(userTimezone.value)\n});\n\nonUnmounted(() => {\n  showStore.errorMessage = ''\n})\n\nfunction addEmbedCodeConfirm() {\n  if (confirm(\"Are you sure you want to add this embed code? It will override the video url.\")) {\n    form.put(route('showEpisodes.update', props.episode.slug));\n  }\n}\n\n</script>\n"],"names":["initialState","id","name","description","slug","totalSpots","memberSpots","teamCreator","teamLeader","members","managers","activeShow","activeEpisode","creators","showModal","Boolean","confirmDialog","confirmManagerDialog","selectedManagerName","selectedManagerId","addManager","removeManager","deleteMemberName","deleteMemberId","noteEdit","note","saveNoteProcessing","goLiveDisplay","can","openComponent","useTeamStore","defineStore","state","actions","reset","Object","assign","this","setActiveTeam","team","setActiveShow","show","setActiveEpisode","episode","deleteTeamMemberCancel","confirmTeamManagerCancel","deleteTeamMember","Inertia","visit","route","method","data","user_id","team_id","team_slug","addTeamManager","removeTeamManager","toggleGoLiveDisplay","getters","spotsRemaining","usePageSetup","pageName","userStore","useUserStore","appSettingStore","useAppSettingStore","videoPlayerStore","useVideoPlayerStore","currentPage","showFlashMessage","pageIsHidden","isMobile","ott","makeVideoTopRight","onMounted","window","location","search","topDiv","document","getElementById","scrollIntoView","setPrevUrl","reload","___CSS_LOADER_EXPORT___","push","module","cancel","prevUrl","isCreator","props","__props","emits","date","ref","inputValue","watch","_ref2","newDate","_slicedToArray","clearFlashMessage","computed","flash","success","message","warning","error","_ref","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","post","stop","apply","arguments","emit","onTabPress","e","textarea","target","val","value","start","selectionStart","end","selectionEnd","substring","FilePond","_defineProperty","metadataKey","metadataValue","vueFilePond","FilePondPluginFileValidateType","FilePondPluginFileValidateSize","FilePondPluginImagePreview","FilePondPluginFileMetadata","filepondInitialized","console","log","setOptions","fileMetadataObject","show_id","__emit","handleProcessedFile","file","uploadingMessage","uploadCompleteMessage","isHidden","myDropzone","Dropzone","url","paramName","maxFilesize","chunking","chunkSize","parallelChunkUploads","retryChunks","retryChunksLimit","capture","acceptedFiles","uploadprogress","progress","bytesSent","uploadPercentage","dictDefaultMessage","forceFallback","accept","done","size","alert","on","concat","removeFile","only","movieId","uploadMovieId","mov","movieTrailerId","showEpisodeId","uploadShowEpisodeId","form","useForm","options","locals","errors","usePage","hasErrors","keys","length","currentYear","Date","getFullYear","teamStore","showStore","useShowStore","episodePoster","image","scheduledDateTime","releaseDateTime","selectedReleaseDateTime","selectedScheduledDateTime","cancelScheduledReleaseDate","formattedReleaseDateTime","formattedScheduledDateTime","userReleaseDateTime","userScheduledDateTime","userTimezone","release_dateTime","scheduled_release_dateTime","convertToTimeZone","dateTime","format","episode_number","notes","video_url","video","youtube_url","video_embed_code","reloadImage","submit","confirm","put","currentDate","handleReleaseDateTime","changedDate","updateReleaseDateTime","handleScheduledDateTime","updateScheduledDateTime","cancelScheduledRelease","Intl","DateTimeFormat","resolvedOptions","timeZone","onUnmounted","errorMessage"],"sourceRoot":""}