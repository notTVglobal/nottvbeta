"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunknottvbeta"] = self["webpackChunknottvbeta"] || []).push([["resources_js_Stores_ShowStore_js"],{

/***/ "./resources/js/Stores/ShowStore.js":
/*!******************************************!*\
  !*** ./resources/js/Stores/ShowStore.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useShowStore: () => (/* binding */ useShowStore)\n/* harmony export */ });\n/* harmony import */ var pinia__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! pinia */ \"./node_modules/pinia/dist/pinia.mjs\");\n/* harmony import */ var _Stores_UserStore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/Stores/UserStore */ \"./resources/js/Stores/UserStore.js\");\n/* harmony import */ var _Stores_NotificationStore__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/Stores/NotificationStore */ \"./resources/js/Stores/NotificationStore.js\");\n/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! dayjs */ \"./node_modules/dayjs/dayjs.min.js\");\n/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(dayjs__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var dayjs_plugin_timezone__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! dayjs/plugin/timezone */ \"./node_modules/dayjs/plugin/timezone.js\");\n/* harmony import */ var dayjs_plugin_timezone__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(dayjs_plugin_timezone__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var dayjs_plugin_utc__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! dayjs/plugin/utc */ \"./node_modules/dayjs/plugin/utc.js\");\n/* harmony import */ var dayjs_plugin_utc__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(dayjs_plugin_utc__WEBPACK_IMPORTED_MODULE_4__);\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, \"catch\": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); }); }; }\n\n\n\n\n\n\ndayjs__WEBPACK_IMPORTED_MODULE_2___default().extend((dayjs_plugin_utc__WEBPACK_IMPORTED_MODULE_4___default()));\ndayjs__WEBPACK_IMPORTED_MODULE_2___default().extend((dayjs_plugin_timezone__WEBPACK_IMPORTED_MODULE_3___default()));\nvar initialState = function initialState() {\n  return {\n    show: {},\n    // new as of 2024-05-23\n    episodes: {},\n    // 2024-05-23 (changed from Array to Object)\n    episodeStatuses: [],\n    // new as of 2024-05-23\n    id: null,\n    name: '',\n    slug: '',\n    url: '',\n    show_status_id: 0,\n    episode_play_order: '',\n    scheduleDetails: {},\n    episodeName: '',\n    episodeUrl: '',\n    category_id: 0,\n    category_description: '',\n    categories: [],\n    sub_category_id: 0,\n    sub_category_description: '',\n    sub_categories: [],\n    description: '',\n    posterName: [],\n    posterId: [0],\n    team_id: 'team id',\n    episodePoster: '',\n    noteEdit: 0,\n    notes: '',\n    saveNoteProcessing: Boolean,\n    errorMessage: '',\n    episodeIsBeingDeleted: 0,\n    // put episode id here if being deleted (used on the Show Manage page, Show Episode component)\n    openComponent: 'showEpisodes',\n    isLive: false,\n    liveScheduledStartTime: '',\n    liveMistStreamName: '',\n    isScheduled: null,\n    isUpdatingSchedule: false,\n    updatedBy: null,\n    isSaving: null,\n    loadingUpdatingStatus: false,\n    // to show a loader\n    leader: null // for handling functions on the Echo broadcast channel\n  };\n};\nvar useShowStore = (0,pinia__WEBPACK_IMPORTED_MODULE_5__.defineStore)('showStore', {\n  state: initialState,\n  actions: {\n    reset: function reset() {\n      // Reset the store to its original state (clear all data)\n      Object.assign(this, initialState());\n    },\n    initializeShow: function initializeShow(show, episodes, episodeStatuses) {\n      var _meta$isScheduled, _meta$isSaving, _meta$isUpdatingSched, _meta$updatedBy;\n      // console.log('initializeShow')\n\n      var meta = {};\n      try {\n        if (show.meta) {\n          meta = typeof show.meta === 'string' ? JSON.parse(show.meta) : show.meta;\n        }\n      } catch (error) {\n        console.error('Error parsing meta:', error);\n      }\n      this.$patch({\n        show: show,\n        // new as of 2024-05-23\n        episodes: episodes,\n        // new as of 2024-05-23\n        episodeStatuses: episodeStatuses,\n        // new as of 2024-05-23\n        id: show.id,\n        name: show.name,\n        slug: show.slug,\n        scheduleDetails: show.scheduleDetails,\n        isScheduled: (_meta$isScheduled = meta.isScheduled) !== null && _meta$isScheduled !== void 0 ? _meta$isScheduled : false,\n        isSaving: (_meta$isSaving = meta.isSaving) !== null && _meta$isSaving !== void 0 ? _meta$isSaving : false,\n        isUpdatingSchedule: (_meta$isUpdatingSched = meta.isUpdatingSchedule) !== null && _meta$isUpdatingSched !== void 0 ? _meta$isUpdatingSched : null,\n        updatedBy: (_meta$updatedBy = meta.updatedBy) !== null && _meta$updatedBy !== void 0 ? _meta$updatedBy : null\n      });\n    },\n    setLeader: function setLeader(user) {\n      this.leader = user;\n    },\n    resetLeader: function resetLeader() {\n      this.leader = null;\n      // Reset other states...\n    },\n    checkIsLive: function checkIsLive(showSlug) {\n      var _this = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var response;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return axios.get(\"/api/shows/\".concat(showSlug, \"/check-live\"));\n            case 3:\n              response = _context.sent;\n              _this.isLive = response.data.isLive;\n              _this.liveScheduledStartTime = response.data.liveScheduledStartTime;\n              _this.liveMistStreamName = response.data.mistStreamName;\n              _context.next = 12;\n              break;\n            case 9:\n              _context.prev = 9;\n              _context.t0 = _context[\"catch\"](0);\n              console.error('Error checking if show is live:', _context.t0);\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[0, 9]]);\n      }))();\n    },\n    // async fill() {\n    //     let r = await import('@/Json/show.json')\n    //     this.$state = r.default\n    // },\n    setName: function setName(name) {\n      this.name = name;\n    },\n    setUrl: function setUrl(url) {\n      this.url = url;\n    },\n    setEpisodeName: function setEpisodeName(episodeName) {\n      this.episodeName = episodeName;\n    },\n    setEpisodeUrl: function setEpisodeUrl(episodeUrl) {\n      this.episodeUrl = episodeUrl;\n    },\n    initializeDescriptions: function initializeDescriptions(categoryId, subCategoryId) {\n      this.category_id = categoryId;\n      var category = this.categories.find(function (cat) {\n        return cat.id === categoryId;\n      });\n      this.category_description = category ? category.description : '';\n      this.sub_categories = category ? category.sub_categories : [];\n      this.updateSubCategoryDescription(subCategoryId);\n    },\n    updateSubCategoryDescription: function updateSubCategoryDescription(subCategoryId) {\n      // Ensure sub_categories is not undefined\n      if (!this.sub_categories) {\n        this.sub_category_id = '';\n        this.sub_category_description = '';\n        return;\n      }\n      var subCategory = this.sub_categories.find(function (sub) {\n        return sub.id === subCategoryId;\n      });\n      this.sub_category_id = subCategory ? subCategory.id : '';\n      this.sub_category_description = subCategory ? subCategory.description : '';\n    },\n    addShowToSchedule: function addShowToSchedule(payload) {\n      var _this2 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var response;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _this2.loadingUpdatingStatus = true;\n              _context2.prev = 1;\n              // Append contentType and contentId to the payload\n              payload.contentType = 'show'; // Adjust this if necessary\n              payload.contentId = _this2.id;\n              _context2.next = 6;\n              return axios.post('/api/schedule/addToSchedule', payload);\n            case 6:\n              response = _context2.sent;\n              _this2.loadingUpdatingStatus = false;\n              _this2.isScheduled = true;\n              return _context2.abrupt(\"return\", response.data);\n            case 12:\n              _context2.prev = 12;\n              _context2.t0 = _context2[\"catch\"](1);\n              _this2.loadingUpdatingStatus = false;\n              throw _context2.t0;\n            case 16:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, null, [[1, 12]]);\n      }))();\n    },\n    setUpdatingStatus: function setUpdatingStatus(state, userName, slug) {\n      var _this3 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var notificationStore, response;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              notificationStore = (0,_Stores_NotificationStore__WEBPACK_IMPORTED_MODULE_1__.useNotificationStore)();\n              _this3.loadingUpdatingStatus = true;\n              _context3.prev = 2;\n              // Set the local saving state\n              _this3.isUpdatingSchedule = state;\n              _this3.updatedBy = state ? userName : null;\n              // console.log(userName);\n              // Update the meta field in the database\n              _context3.next = 7;\n              return axios.put(\"/api/shows/\".concat(slug, \"/meta\"), {\n                // isSaving: null,\n                isUpdatingSchedule: state,\n                updatedBy: userName\n              });\n            case 7:\n              response = _context3.sent;\n              _this3.loadingUpdatingStatus = false;\n              // Check for the notification type and handle it accordingly\n              if (response.data.notificationType !== 'silent') {\n                notificationStore.setToastNotification(response.data.message, 'info');\n              }\n              _context3.next = 18;\n              break;\n            case 12:\n              _context3.prev = 12;\n              _context3.t0 = _context3[\"catch\"](2);\n              console.error('Error updating saving state:', _context3.t0);\n              _this3.loadingUpdatingStatus = false;\n              notificationStore.setToastNotification(_context3.t0.message, 'error');\n              throw _context3.t0;\n            case 18:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, null, [[2, 12]]);\n      }))();\n    },\n    preparePayload: function preparePayload(form) {\n      var userStore = (0,_Stores_UserStore__WEBPACK_IMPORTED_MODULE_0__.useUserStore)();\n      var startDate, endDate, formattedDuration;\n\n      // Logging the initial form data\n      console.log('Initial Form Data:', form);\n      if (form.scheduleType === 'one-time') {\n        // One-time scheduling logic\n        startDate = dayjs__WEBPACK_IMPORTED_MODULE_2___default()(form.startDate).format('YYYY-MM-DDTHH:mm:ssZ');\n        console.log('preparePayload set startDate: ' + startDate);\n        form.startDate = startDate;\n        var durationHours = Number(form.durationHour);\n        var durationMinutes = Number(form.durationMinute);\n        form.duration = durationHours * 60 + durationMinutes;\n        endDate = dayjs__WEBPACK_IMPORTED_MODULE_2___default()(startDate).add(durationHours, 'hour').add(durationMinutes, 'minute').second(0).format('YYYY-MM-DDTHH:mm:ssZ');\n        form.endDate = endDate;\n        form.startTime = null;\n        form.daysOfWeek = null;\n      } else if (form.scheduleType === 'recurring') {\n        // Recurring scheduling logic\n        var hour = parseInt(form.startTime.hour) % 12;\n        if (form.startTime.meridian === 'PM') hour += 12;\n        startDate = dayjs__WEBPACK_IMPORTED_MODULE_2___default()(form.startDate).hour(hour).minute(form.startTime.minute).second(0);\n        form.startDate = startDate.tz(userStore.canadianTimezone, true).format('YYYY-MM-DDTHH:mm:ssZ');\n        var newEndTime = dayjs__WEBPACK_IMPORTED_MODULE_2___default()(form.startDate).add(form.durationHour, 'hours').add(form.durationMinute, 'minutes').second(0);\n        form.endTime = newEndTime.format('HH:mm:ss');\n        var endDateOnly = dayjs__WEBPACK_IMPORTED_MODULE_2___default()(form.endDate).format('YYYY-MM-DD');\n        form.endDate = dayjs__WEBPACK_IMPORTED_MODULE_2___default()(endDateOnly + ' ' + form.endTime).format('YYYY-MM-DD HH:mm:ss');\n        form.endDate = dayjs__WEBPACK_IMPORTED_MODULE_2___default()(form.endDate).tz(userStore.canadianTimezone, true).format('YYYY-MM-DDTHH:mm:ssZ');\n\n        // form.startTime = startDate.format('HH:mm:ss')\n        formattedDuration = parseInt(form.durationHour) * 60 + parseInt(form.durationMinute);\n        form.duration = formattedDuration;\n      }\n      return {\n        contentType: 'show',\n        contentId: form.contentId,\n        scheduleType: form.scheduleType,\n        // startTime: form.startTime,\n        duration: form.duration,\n        startDateTime: form.startDate,\n        endDateTime: form.endDate,\n        daysOfWeek: form.scheduleType === 'recurring' ? form.daysOfWeek : [],\n        timezone: form.timezone\n      };\n    },\n    removeFromSchedule: function removeFromSchedule(contentType, contentId) {\n      var _this4 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var notificationStore, payload;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              _this4.loadingUpdatingStatus = true;\n              notificationStore = (0,_Stores_NotificationStore__WEBPACK_IMPORTED_MODULE_1__.useNotificationStore)();\n              _context4.prev = 2;\n              payload = {\n                data: {\n                  contentType: contentType,\n                  contentId: contentId\n                }\n              }; // console.log(payload)\n              _context4.next = 6;\n              return axios[\"delete\"]('/api/schedule/removeFromSchedule', payload);\n            case 6:\n              _this4.loadingUpdatingStatus = false;\n              _this4.isScheduled = false;\n              // Optionally, update the state here if needed\n              _context4.next = 16;\n              break;\n            case 10:\n              _context4.prev = 10;\n              _context4.t0 = _context4[\"catch\"](2);\n              notificationStore.setToastNotification('There was an error.', 'error');\n              console.error('There was an error removing the item from the schedule:', _context4.t0);\n              _this4.loadingUpdatingStatus = false;\n              throw _context4.t0;\n            case 16:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, null, [[2, 10]]);\n      }))();\n    } // initializeEchoListener(showId) {\n    //     const showChannel = `show.${showId}`\n    //     Echo.channel(showChannel)\n    //         .listen('ScheduleUpdated', (event) => {\n    //             if (event.showId === showId) {\n    //                 this.setUpdatingStatus(showId, false)\n    //             }\n    //         })\n    // },\n    // leaveEchoListener(showId) {\n    //     const showChannel = `show.${showId}`\n    //     Echo.leaveChannel(showChannel)\n    // },\n  },\n  getters: {\n    //\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/Stores/ShowStore.js\n");

/***/ })

}]);