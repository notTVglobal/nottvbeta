{"version":3,"file":"js/7166.js","mappings":"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","sources":["webpack:///./resources/js/Stores/VideoAuxPlayerStore.js"],"sourcesContent":["import { defineStore } from 'pinia'\nimport { useAppSettingStore } from '@/Stores/AppSettingStore'\nimport { useStreamStore } from '@/Stores/StreamStore'\nimport { useUserStore } from '@/Stores/UserStore'\nimport { useChannelStore } from '@/Stores/ChannelStore'\nimport { useShowStore } from '@/Stores/ShowStore'\nimport { useAudioStore } from '@/Stores/AudioStore'\nimport videojs from 'video.js'\nimport { usePage } from '@inertiajs/inertia-vue3'\nimport { nextTick } from 'vue'\nimport { useNotificationStore } from '@/Stores/NotificationStore'\n\nconst initialState = () => ({\n    mistServerUri: 'https://mist.nottv.io/', // tec21: 2024-02-09, if we don't start with the address here changing channels is really slow and buggy. Address for the MistServer listed in the Admin Settings saved in AppSetting\n    player: null, // Video.js player instance\n    eventListenersAttached: false, // Track if listeners are attached\n    videoPlayerLoaded: false,\n    class: '',\n    videoContainerClass: '',\n    // ottClass: 'OttClose',\n    videoSourceIdSrc1: '',\n    videoSourceIdSrc2: '',\n    videoSourceIdSrc3: '',\n    videoSourceTypeSrc1: '',\n    videoSourceTypeSrc2: '',\n    videoSourceTypeSrc3: '',\n    firstPlayVideoSourceType: '',\n    firstPlayVideoSource: '',\n    key: '',\n    videoName: '',\n    videoSource: '',\n    videoSourceType: '',\n    videoPoster: '',\n    nextSource: '',\n    previousSource: '',\n    currentView: '',\n    currentChannelId: 0,\n    currentChannelName: '',\n    currentShow: {},\n    currentShowEpisode: {},\n    currentVideo: {},\n    hasVideo: false,\n    controls: true,\n    muted: true,\n    paused: true,\n    // videoCurrentTime: '',\n    currentTime: 0, // Current playback time in seconds\n    duration: 0, // Total video duration in seconds\n    formattedTime: '00:00 / 00:00', // Formatted time string\n    blue: false, // DO NOT REMOVE\n    videoIsYoutube: false,\n    videoUploadComplete: false,\n})\n\nexport const useVideoAuxPlayerStore = defineStore('videoAuxPlayerStore', {\n    state: initialState,\n    actions: {\n        reset() {\n            // Reset the store to its original state (clear all data)\n            Object.assign(this, initialState())\n        },\n\n        async getMistServerUri() {\n            try {\n                let response = await axios.get('/mist-server/uri')\n                this.mistServerUri = response.data\n            } catch (error) {\n                console.error(error)\n            }\n        },\n\n        // Initialize or update the player instance\n        setPlayer(playerInstance) {\n            this.player = playerInstance\n            this.initializePlayer().then(() => {\n                this.attachEventListeners() // Attach event listeners after initialization\n            }).catch(error => {\n                console.error('Error during video player initialization:', error)\n            })\n        },\n\n        // Initialize the player with necessary settings and start playback\n        async initializePlayer() {\n            if (!this.player) {\n                console.error('Video.js player is not initialized.')\n                return\n            }\n\n            await nextTick() // Ensure Vue's DOM updates are processed\n\n            // Perform any necessary audio context and node setup\n            await useAudioStore().ensureAudioContextAndNodesReady(this.player)\n\n            // Apply initial player settings\n            this.player.controls(false)\n            this.player.muted(this.muted)\n\n            // Attempt to start playback\n            this.player.ready(() => {\n                this.player.play().then(() => {\n                    console.log('Playback started successfully')\n                }).catch(error => {\n                    console.error('Error trying to play the video:', error)\n                    // Handle the error (e.g., showing a user-friendly message)\n                })\n            })\n        },\n\n        // Attach event listeners to the player\n        attachEventListeners() {\n            if (!this.player || this.eventListenersAttached) {\n                console.log('Event listeners are already attached or video player is not initialized.')\n                return\n            }\n\n            this.player.on('timeupdate', this.handleTimeUpdate)\n            this.player.on('fullscreenchange', this.handleFullscreenChange)\n            this.player.on('play', this.handlePlay)\n            this.player.on('pause', this.handlePause)\n            this.player.on('error', this.handleError)\n\n            this.eventListenersAttached = true\n            console.log('Event listeners attached.')\n        },\n\n        // Detach event listeners from the player\n        detachEventListeners() {\n            if (!this.player || !this.eventListenersAttached) {\n                console.log('Event listeners are already detached or video player is not initialized.')\n                return\n            }\n\n            useAudioStore().stopAudioLevelMonitoring()\n            this.player.off('timeupdate', this.handleTimeUpdate)\n            this.player.off('fullscreenchange', this.handleFullscreenChange)\n            this.player.off('play', this.handlePlay)\n            this.player.off('pause', this.handlePause)\n            this.player.off('error', this.handleError)\n\n            this.eventListenersAttached = false\n            console.log('Event listeners detached.')\n        },\n\n        // Dispose of the player and perform cleanup\n        disposePlayer() {\n            if (!this.player) {\n                console.error('Video player is not initialized.')\n                return\n            }\n            this.detachEventListeners() // Detach event listeners if attached\n            this.player.dispose() // Dispose of the player instance\n            this.player = null // Reset the player state\n\n            // Optionally, stop audio level monitoring if linked to the player lifecycle\n            // const audioStore = useAudioStore();\n            // audioStore.stopAudioLevelMonitoring();\n\n            console.log('Video player disposed and cleaned up.')\n        },\n\n        // New method to prepare for a new video source\n        prepareForNewVideoSource(source) {\n            console.log('Preparing for new video source')\n\n            // Example: Clear any existing channel or video-specific state\n            useChannelStore().clearChannel()\n\n            // Reset or cleanup any existing video playback, if necessary\n            // this.resetPlayback();\n\n            // Load and play the new video source\n            this.loadNewVideo(source)\n        },\n\n        resetPlayback() {\n            if (this.player) {\n                this.player.pause()\n                this.player.muted(true)\n                this.player.currentTime(0) // Optionally reset the time\n                // Further cleanup logic here, if necessary\n                this.detachEventListeners() // Detach event listeners if attached\n            }\n        },\n\n        // Event handlers\n        handleTimeUpdate() {\n            // console.log('Handling timeupdate...');\n            // Implement your logic\n            this.currentTime = this.player.currentTime()\n            this.duration = this.player.duration()\n            const progressPercentage = (this.currentTime / this.duration) * 100\n            this.formattedTime = `${this.formatDuration(this.currentTime)} / ${this.formatDuration(this.duration)}`\n\n            // Update UI elements or emit events as needed\n            // Note: Direct manipulation of the DOM or component refs from the store is not recommended\n\n        },\n        // for the handleTimeUpdate eventHandler\n        formatDuration(durationInSeconds) {\n            const hours = Math.floor(durationInSeconds / 3600)\n            const minutes = Math.floor((durationInSeconds % 3600) / 60)\n            const seconds = Math.floor(durationInSeconds % 60)\n\n            const parts = [hours, minutes, seconds].map(part => part.toString().padStart(2, '0'))\n            return parts.join(':')\n        },\n        handleFullscreenChange() {\n            console.log('Handling fullscreenchange...')\n            // Implement your logic\n            this.player?.on('fullscreenchange', () => {\n                if (this.player.isFullscreen()) {\n                    // Video is entering fullscreen mode\n                    // You can add custom behavior for entering fullscreen here if needed\n                } else {\n                    // Video is exiting fullscreen mode\n                    // Check if the video was playing before entering fullscreen\n                    if (this.player.paused() === false) {\n                        // Resume playback after exiting fullscreen\n                        this.player.play()\n                    }\n                }\n            })\n        },\n        handlePlay() {\n            console.log('Handling play...')\n            // Implement your logic\n            this.player?.on('play', () => {\n                this.paused = false\n            })\n        },\n        handlePause() {\n            console.log('Handling pause...')\n            // Implement your logic\n            this.player?.on('pause', () => {\n                this.paused = true\n            })\n        },\n        handleError() {\n            console.log('Handling error...')\n            // Implement your logic\n            this.player?.on('error', function () {\n                const error = this.player.error()\n                console.error('Video.js Error:', error.code, error.message)\n            })\n        },\n        makeBlue() {\n            // for testing. DO NOT REMOVE.\n            this.blue = true\n        },\n        // Apparently this loadFirstPlay isn't being used...\n        // loadFirstPlay() {\n        //     const {props} = usePage()\n        //     let videoJs = videojs('aux-player')\n        //     const type = props.firstPlayVideoSourceType\n        //     const src = props.firstPlayVideoSource\n        //     videoJs.ready(() => {\n        //         videoJs.src({src, type})\n        //         videoJs.play().then(() => {\n        //             console.log('Playback started successfully')\n        //         }).catch(error => {\n        //             console.error('Error trying to play the video:', error)\n        //             // Handle the error (e.g., showing a user-friendly message)\n        //         })\n        //     })\n        //     console.log(type)\n        //     console.log(src)\n        // },\n        // Toggle mute state\n        toggleMute() {\n            if (this.muted) {\n                this.unMute()\n            } else {\n                this.mute()\n            }\n        },\n        // Mute the video\n        mute() {\n            if (this.player) {\n                this.player.muted(true)\n                this.muted = true\n            }\n        },\n        // Unmute the video\n        unMute() {\n            // const audioStore = useAudioStore()\n\n            if (this.player) {\n                // Prepare audio setup for when it's unmuted\n                // audioStore.userInteractionForAudio()\n\n                // Optionally, if fadeInAudioFromMuted is a gradual process,\n                // ensure this.player.muted(false) is called within that function.\n                // audioStore.fadeInAudioFromMuted()\n\n                this.player.muted(false)\n                this.muted = false\n            }\n        },\n        togglePlay() {\n            let videoJs = videojs('aux-player')\n\n            if (this.paused) {\n                videoJs.play()\n            } else {\n                videoJs.pause()\n            }\n        },\n        load() {\n            let videoJs = videojs('aux-player')\n            videoJs.load()\n        },\n        loadNewLiveSource(source, sourceType) {\n            let videoJs = videojs('aux-player')\n            let fullSourceUrl = this.mistServerUri + '/hls/' + source + '/index.m3u8'\n            videoJs.src({'src': fullSourceUrl, 'type': sourceType});\n            videoJs.play()\n        },\n        pause() {\n            let videoJs = videojs('aux-player')\n            videoJs.controls(false)\n            videoJs.pause()\n            this.paused = true\n        },\n        play() {\n            let videoJs = videojs('aux-player')\n\n            videoJs.play()\n            videoJs.controls(false)\n            this.paused = false\n        },\n        // next not built yet\n        next() {\n            let videoJs = videojs('aux-player')\n            videoJs.controls(false)\n            videoJs.src(this.nextSource)\n        },\n        // back not built yet\n        back() {\n            let videoJs = videojs('aux-player')\n            videoJs.controls(false)\n            videoJs.src(this.previousSource)\n        },\n        fullscreen() {\n            let videoJs = videojs('aux-player')\n            videoJs.controls(false)\n            // videoJs.fullscreen(this.previousSource)\n            videoJs.requestFullscreen()\n        },\n        getVideoCurrentTime() {\n            let videoJs = videojs('aux-player')\n            videoJs.controls(false)\n            this.videoCurrentTime = videoJs.currentTime\n        },\n\n\n        // This playNewVideo was created to access the audioContext\n        // which our audio compressor uses. This is new as of 2/2/2024\n        // ~ tec21\n\n        // playNewVideo(source) {\n        //     useChannelStore().clearChannel() // Reset or clear channel store\n        //     const videoJs = videojs('aux-player')\n        //     let videoSrc, videoSourceType\n        //     // Determine the source type and construct the source URL if necessary\n        //     if (source.mediaType === 'externalVideo') {\n        //         videoSrc = source.video_url // Direct URL to the video\n        //         videoSourceType = source.type // MIME type, e.g., 'video/youtube', 'video/mp4'\n        //     } else {\n        //         // Construct file path for internal videos\n        //         videoSrc = `${source.cdn_endpoint}${source.cloud_folder}${source.folder}/${source.file_name}`\n        //         videoSourceType = source.type // MIME type, typically 'video/mp4' for file-based sources\n        //     }\n        //     this.resumeAudioContextIfNeeded()\n        //     videoJs.src({src: videoSrc, type: videoSourceType})\n        //     videoJs.muted(false)\n        // },\n\n        // getSourceDetails(source) {\n        //     let videoSrc = source.video_url; // Directly access the video URL\n        //\n        //     // Default to 'video/mp4' if type is falsy ('', null, undefined, etc.)\n        //     let videoSourceType = source.type || 'video/mp4'\n        //\n        //     // Determine the mediaType and construct the source URL if necessary\n        //     if (source.mediaType === 'externalVideo') {\n        //         videoSrc = source.video_url // Direct URL to the video\n        //     } else {\n        //         // Internal video: construct the path, ensuring the file name is encoded\n        //         let encodedFileName = encodeURIComponent(source.file_name);\n        //         console.log(encodedFileName)\n        //         videoSrc = `${source.cdn_endpoint}${source.cloud_folder}${source.folder}/${encodedFileName}`\n        //     }\n        //     // Logic to determine videoSrc and videoSourceType\n        //     console.log(`Video Source: ${videoSrc}, Type: ${videoSourceType}`);\n        //     return { videoSrc, videoSourceType } // Return as an object\n        // },\n\n\n        getSourceDetails(source) {\n            let videoSrc, videoSourceType\n\n            console.log('getSourceDetails called with source:', source);\n\n            // Default to 'video/mp4' if type is not specified or is empty\n            videoSourceType = source.type || 'video/mp4'\n            console.log(`Determined Video Source Type: ${videoSourceType}`);\n\n            if (source.mediaType === 'externalVideo') {\n                // For external videos, use the URL as provided without encoding\n                videoSrc = source.video_url\n                console.log('Using external video source:', videoSrc);\n            } else {\n                console.log('CDN Endpoint:', source.cdn_endpoint);\n                console.log('Cloud Folder:', source.cloud_folder);\n                console.log('Folder:', source.folder);\n                console.log('File Name:', source.file_name);\n                // For internal videos, construct the URL from its components\n                // Here, we assume the cdn_endpoint, cloud_folder, and folder are correctly formatted\n                // and do not require encoding. Only the file_name might need encoding.\n                const basePath = `${source.cdn_endpoint}${source.cloud_folder}${source.folder}/`\n                // const encodedFileName = encodeURIComponent(source.file_name);\n                const fileName = source.file_name\n                videoSrc = basePath + fileName\n                console.log('Constructed internal video source:', videoSrc);\n                // If your server or CDN is configured to handle spaces in URLs without %20 encoding\n                // or if the original working URLs did not use standard URL encoding,\n                // you might adjust the encoding strategy here.\n                // For example, to replace spaces with %20 but leave other characters as-is:\n                // const fileNameForUrl = source.file_name.replace(/ /g, '%20');\n                // videoSrc = basePath + fileNameForUrl;\n            }\n\n            console.log(`Final Constructed Video Source: ${videoSrc}, Type: ${videoSourceType}`);\n            return {videoSrc, videoSourceType}\n        },\n\n\n        loadNewVideo(source) {\n            try {\n                let videoJs = videojs('aux-player');\n                console.log('LOAD NEW VIDEO');\n                const audioStore = useAudioStore();\n                // Correctly destructure the returned object to get videoSrc and videoSourceType\n                const {videoSrc, videoSourceType} = this.getSourceDetails(source);\n\n                // Example: Stopping and cleaning up the current video and audio setup\n                if (videoJs) {\n                    videoJs.src({'src': videoSrc, 'type': videoSourceType});\n\n                    videoJs.ready(() => {\n                        // ensureAudioContextAndNodesReady does the following:\n                        // 1. Resumes AudioContext if suspended.\n                        // 2. (Re)connects MediaElementSource from the video element to AudioContext.\n                        audioStore.deferAudioSetup = false;\n                        audioStore.ensureAudioContextAndNodesReady(videoJs).then(() => {\n                            // Only attempt to play the video after ensuring the AudioContext is ready\n                            videoJs.play().catch(error => {\n                                useNotificationStore().setGeneralServiceNotification('Error', 'Playback initiation error: ' + error)\n                                console.error('Playback initiation error: ', error);\n                            });\n\n                            // Consider toggling mute based on the user's preference or previous state\n                            videoJs.muted(false);\n                            this.muted = false;\n                        });\n                    });\n                }\n            } catch (error) {\n                // Log the error or perform any other error handling\n                useNotificationStore().setGeneralServiceNotification('Error', 'Error loading new video: ' + error)\n                console.error('Error loading new video: ', error);\n            }\n        },\n\n        // loadNewVideo(source) {\n        //     console.log('LOAD NEW VIDEO TTTTTTTTTTTTTTTTTTTTTTTTTS');\n        //     console.log('LOAD NEW VIDEO initiated with source:', source);\n        //     const audioStore = useAudioStore();\n        //     this.unMute();\n        //     // Destructure the returned object to get videoSrc and videoSourceType\n        //     const { videoSrc, videoSourceType } = this.getSourceDetails(source);\n        //     console.log(`Video source details received: Src - ${videoSrc}, Type - ${videoSourceType}`);\n        //\n        //     // Ensure you're using the same player instance (`videoJs` in this context) for consistency\n        //     let videoJs = videojs('aux-player'); // Ensure this ID matches your video player element\n        //     console.log('Video.js player instance created or retrieved.');\n        //\n        //     // Stop and clean up the current video and audio setup if necessary\n        //     videoJs.ready(() => {\n        //         console.log('Video.js player is ready.');\n        //         videoJs.src({ 'src': videoSrc, 'type': videoSourceType });\n        //         console.log(`Video source set: ${videoSrc} of type ${videoSourceType}`);\n        //\n        //         // Ensure AudioContext and nodes are ready\n        //         audioStore.ensureAudioContextAndNodesReady(videoJs).then(() => {\n        //             console.log('Audio context and nodes are ready. Attempting to play video.');\n        //\n        //             videoJs.play().then(() => {\n        //                 console.log('Video playback started successfully.');\n        //             }).catch(error => {\n        //                 console.error('Playback initiation error:', error);\n        //             });\n        //             // Attempt to play the video after ensuring the AudioContext is ready\n        //             // videoJs.play().catch(error => {\n        //             //     console.error('Playback initiation error:', error);\n        //             // });\n        //\n        //             // Apply the unMute logic from loadMistStreamVideo to ensure audio is correctly configured\n        //             this.unMute();\n        //             console.log('Audio unmuted.');\n        //             this.paused = false;\n        //             console.log('Paused flag set to false.');\n        //         }).catch(error => {\n        //             console.error('Error ensuring audio context and nodes are ready:', error);\n        //         });\n        //     });\n        // },\n\n        playNewVideo() {\n            console.log('PLAY NEW VIDEO')\n            if (this.player) {\n                // Wait for the video to be ready before playing\n                this.player.ready(() => {\n                    this.player.play()\n                    // Assuming you want to unmute here; check if this aligns with user interaction policies\n                    this.player.muted(false)\n                    this.muted = false\n                })\n            }\n        },\n\n\n// load video from different types of sources:\n// Url\n// YouTube\n// EmbedCode\n// Mist\n// File\n        loadNewSourceFromYouTube(source) {\n            this.videoIsYoutube = true\n            useChannelStore().clearChannel()\n            let videoJs = videojs('aux-player')\n            this.videoSource = source\n            this.videoSourceType = 'video/youtube'\n            videoJs.src({'src': this.videoSource, 'type': this.videoSourceType})\n            videoJs.controls(false)\n            this.unMute()\n            this.paused = false\n        },\n        loadNewLiveSourceFromRumble(source) {\n            this.videoIsYoutube = true\n            useChannelStore().clearChannel()\n            let videoJs = videojs('aux-player')\n            this.videoSource = source\n            this.videoSourceType = 'application/x-mpegURL'\n            videoJs.src({'src': this.videoSource, 'type': this.videoSourceType})\n            videoJs.controls(false)\n            this.unMute()\n            this.paused = false\n        },\n        loadNewSourceFromUrl(source) {\n            try {\n                this.videoIsYoutube = false;\n                useChannelStore().clearChannel();\n                let videoJs = videojs('aux-player');\n\n                if (!source.video_url || !source.type) {\n                    useNotificationStore().setGeneralServiceNotification('Error', 'Invalid video source.')\n                    throw new Error(\"Invalid video source.\");\n                }\n\n                this.videoSource = source.video_url;\n                this.videoSourceType = source.type;\n                videoJs.src({'src': source.video_url, 'type': source.type});\n\n                this.unMute();\n                this.paused = false;\n            } catch (error) {\n                useNotificationStore().setGeneralServiceNotification('Error', 'Failed to load new source: ' + error)\n                console.error(\"Failed to load new source:\", error);\n                throw error; // Re-throw the error to be caught by the caller\n            }\n        },\n        loadNewSourceFromMist(source) {\n            this.videoIsYoutube = false\n            let videoJs = videojs('aux-player')\n            let filePath = 'https://mist.not.tv/hls/'\n            this.videoSource = filePath + source + '/index.m3u8'\n            this.videoSourceType = 'application/x-mpegURL'\n            videoJs.src({'src': this.videoSource, 'type': this.videoSourceType})\n            this.unMute()\n            this.paused = false\n        },\n        loadNewSourceFromFile(source) {\n            this.videoIsYoutube = false\n            useChannelStore().clearChannel()\n            let videoJs = videojs('aux-player')\n            let filePath = source.cdn_endpoint + source.cloud_folder + source.folder + '/'\n            this.videoSource = source.file_name\n            this.videoSourceType = source.type\n            videoJs.src({'src': filePath + this.videoSource, 'type': this.videoSourceType})\n            this.unMute()\n            this.paused = false\n        },\n\n        // The new load video functions (2024-02-09 tec21 and ChatGPT)\n        loadExternalSourceVideo() {\n\n        },\n        loadPlaylistVideos() {\n\n        },\n        async loadMistStreamVideo(mistStream) {\n            // console.log('Loading Mist Stream Video for:', mistStream.name); // Log which Mist Stream is being loaded\n            // This mistServerUri comes from appSettings\n            if (!this.mistServerUri) {\n                console.log('Mist Server URI not set, fetching...') // Log fetching attempt\n                await this.getMistServerUri()\n            }\n            if (this.mistServerUri) {\n                // console.log('Mist Server URI:', this.mistServerUri); // Log the URI to confirm it's fetched\n                let basePath = this.mistServerUri\n                this.videoSource = basePath + 'hls/' + mistStream.name + '/index.m3u8'\n                // console.log('Video Source Set To:', this.videoSource); // Log the final video source\n\n                this.videoSourceType = 'application/vnd.apple.mpegURL'\n                // console.log('Setting player source to:', this.videoSource, 'of type:', this.videoSourceType); // Log the source setting\n                let videoJs = videojs('aux-player')\n                videoJs.src({'src': this.videoSource, 'type': this.videoSourceType})\n                this.unMute()\n                this.paused = false\n            } else {\n                console.error('Mist Server URI is still not set after fetching.')\n            }\n            // let basePath = this.mistServerUri\n            // this.videoSource = basePath + 'hls/' + mistStream.name + '/index.m3u8'\n            // this.videoSourceType = \"application/vnd.apple.mpegURL\"\n            // this.player.src({'src': this.videoSource, 'type': this.videoSourceType})\n            // this.unMute()\n            // this.paused = false\n        },\n        async loadVideoFromFile(video) {\n            // console.log('Loading Mist Stream Video for:', mistStream.name); // Log which Mist Stream is being loaded\n            // This mistServerUri comes from appSettings\n            // if (!this.mistServerUri) {\n            //     console.log('Mist Server URI not set, fetching...') // Log fetching attempt\n            //     await this.getMistServerUri()\n            // }\n            // if (this.mistServerUri) {\n                // console.log('Mist Server URI:', this.mistServerUri); // Log the URI to confirm it's fetched\n                // let basePath = this.mistServerUri\n                // this.videoSource = basePath + 'hls/' + video.name + '/index.m3u8'\n                // console.log('Video Source Set To:', this.videoSource); // Log the final video source\n\n            // this.videoSourceType = 'video/mp4'\n            console.log('Video Source Type:', video.type);\n            console.log('Video URL:', video.video_url);\n            console.log('CDN Endpoint:', video.cdn_endpoint);\n            console.log('Cloud Folder:', video.cloud_folder);\n            console.log('Folder:', video.folder);\n            console.log('File Name:', video.file_name);\n\n            let videoSource = video.cdn_endpoint + video.cloud_folder + video.folder + '/' + video.file_name\n                // console.log('Setting player source to:', this.videoSource, 'of type:', this.videoSourceType); // Log the source setting\n                let videoJs = videojs('aux-player')\n                videoJs.src({'src': videoSource, 'type': video.type})\n                this.unMute()\n                this.paused = false\n            // } else {\n            //     console.error('Mist Server URI is still not set after fetching.')\n            // }\n            // let basePath = this.mistServerUri\n            // this.videoSource = basePath + 'hls/' + mistStream.name + '/index.m3u8'\n            // this.videoSourceType = \"application/vnd.apple.mpegURL\"\n            // this.player.src({'src': this.videoSource, 'type': this.videoSourceType})\n            // this.unMute()\n            // this.paused = false\n        },\n\n\n        setNowPlayingInfoVideoFile(source) {\n            this.nowPlayingType = 'Video File'\n            this.nowPlayingName = source.file_name\n            useStreamStore().currentChannel = 'On Demand'\n        },\n        setNowPlayingInfoShow(show, episode) {\n            this.clearNowPlayingInfo()\n            const showStore = useShowStore()\n\n            if (show.firstPlayVideo) {\n                showStore.setName(show.firstPlayVideo.name)\n                showStore.setEpisodeUrl(`/shows/${show.slug}/episode/${source.firstPlayVideo.slug}`)\n            } else if (episode) {\n                showStore.setName(show.name)\n                showStore.setUrl(`/shows/${show.slug}`)\n                showStore.setEpisodeName(episode.name)\n                showStore.setEpisodeUrl(`/shows/${show.slug}/episode/${episode.slug}`)\n            } else {\n                showStore.setName(show.name)\n                showStore.setUrl(`/shows/${show.slug}`)\n            }\n        },\n// change video size/position and page layout\n        makeVideoPiP() {\n            // const appSettingStore = useAppSettingStore();\n            // const userStore = useUserStore();\n            //\n            // if (userStore.isMobile) {\n            //     let videoJs = videojs('aux-player')\n            //     videoJs.controls(false)\n            //     if(this.fullPage) {\n            //         this.class = 'pipVideoClassFullPage'\n            //         this.videoContainerClass = 'pipVideoContainerFullPage'\n            //     } else {\n            //         this.class = 'pipVideoClassTopRight'\n            //         this.videoContainerClass = 'pipVideoContainerTopRight'\n            //     }\n            //     appSettingStore.togglePipChatMode()\n            // }\n        },\n        makeVideoFullPage() {\n            const appSettingStore = useAppSettingStore()\n            const userStore = useUserStore()\n\n            // this.fullPage = true; // to be deleted and replaced by appSettingStore.fullPage\n            appSettingStore.fullPage = true\n            // userStore.hidePage = true // to be deleted and replaced by appSettingStore.hidePage\n            appSettingStore.hidePage = true\n            appSettingStore.ott = 0\n\n            this.videoContainerClass = 'fullPageVideoContainer'\n            this.class = 'fullPageVideoClass'\n            this.controls = !userStore.isMobile\n        },\n        makeVideoTopRight() {\n            const appSettingStore = useAppSettingStore()\n\n            // this.fullPage = false // to be deleted and replaced by appSettingStore.fullPage\n            appSettingStore.fullPage = false\n            // userStore.hidePage = false // to be deleted and replaced by appSettingStore.hidePage\n            appSettingStore.hidePage = false\n            // this.currentPageIsStream = false // to be deleted and replaced by appSettingStore.currentPageIsStream\n            appSettingStore.currentPageIsStream = false\n\n            this.videoContainerClass = 'topRightVideoContainer'\n            this.class = 'topRightVideoClass'\n            this.controls = false\n        },\n        makeVideoWelcomePage() {\n            const appSettingStore = useAppSettingStore()\n            this.videoContainerClass = 'welcomeVideoContainer'\n            this.class = 'welcomeVideoClass'\n            appSettingStore.loggedIn = false\n            appSettingStore.fullPage = true\n            appSettingStore.hidePage = false\n        },\n\n\n    },\n\n    getters: {},\n})\n"],"names":["_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","delegateYield","asyncGeneratorStep","gen","reject","_next","_throw","key","info","error","_asyncToGenerator","fn","self","args","arguments","apply","err","undefined","initialState","mistServerUri","player","eventListenersAttached","videoPlayerLoaded","class","videoContainerClass","videoSourceIdSrc1","videoSourceIdSrc2","videoSourceIdSrc3","videoSourceTypeSrc1","videoSourceTypeSrc2","videoSourceTypeSrc3","firstPlayVideoSourceType","firstPlayVideoSource","videoName","videoSource","videoSourceType","videoPoster","nextSource","previousSource","currentView","currentChannelId","currentChannelName","currentShow","currentShowEpisode","currentVideo","hasVideo","controls","muted","paused","currentTime","duration","formattedTime","blue","videoIsYoutube","videoUploadComplete","useVideoAuxPlayerStore","defineStore","state","actions","assign","this","getMistServerUri","_this","_callee","response","_context","axios","get","data","t0","console","setPlayer","playerInstance","_this2","initializePlayer","attachEventListeners","_this3","_callee2","_context2","nextTick","useAudioStore","ensureAudioContextAndNodesReady","ready","play","log","on","handleTimeUpdate","handleFullscreenChange","handlePlay","handlePause","handleError","detachEventListeners","stopAudioLevelMonitoring","off","disposePlayer","dispose","prepareForNewVideoSource","source","useChannelStore","clearChannel","loadNewVideo","resetPlayback","pause","concat","formatDuration","durationInSeconds","Math","floor","map","part","toString","padStart","join","_this$player","_this4","isFullscreen","_this$player2","_this5","_this$player3","_this6","_this$player4","code","message","makeBlue","toggleMute","unMute","mute","togglePlay","videoJs","videojs","load","loadNewLiveSource","sourceType","fullSourceUrl","src","back","fullscreen","requestFullscreen","getVideoCurrentTime","videoCurrentTime","getSourceDetails","videoSrc","mediaType","video_url","cdn_endpoint","cloud_folder","folder","file_name","_this7","audioStore","_this$getSourceDetail","deferAudioSetup","useNotificationStore","setGeneralServiceNotification","playNewVideo","_this8","loadNewSourceFromYouTube","loadNewLiveSourceFromRumble","loadNewSourceFromUrl","loadNewSourceFromMist","loadNewSourceFromFile","filePath","loadExternalSourceVideo","loadPlaylistVideos","loadMistStreamVideo","mistStream","_this9","_callee3","basePath","_context3","loadVideoFromFile","video","_this10","_callee4","_context4","setNowPlayingInfoVideoFile","nowPlayingType","nowPlayingName","useStreamStore","currentChannel","setNowPlayingInfoShow","show","episode","clearNowPlayingInfo","showStore","useShowStore","firstPlayVideo","setName","setEpisodeUrl","slug","setUrl","setEpisodeName","makeVideoPiP","makeVideoFullPage","appSettingStore","useAppSettingStore","userStore","useUserStore","fullPage","hidePage","ott","isMobile","makeVideoTopRight","currentPageIsStream","makeVideoWelcomePage","loggedIn","getters"],"sourceRoot":""}