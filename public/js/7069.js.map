{"version":3,"file":"js/7069.js","mappings":"yRAKA,E,qCCkBA,IAAMA,GAAkBC,EAAAA,EAAAA,sBAClBC,GAAmBC,EAAAA,EAAAA,uB,OAEzBC,EAAAA,EAAAA,gBAAc,WACZJ,EAAgBK,iBAClB,I,qeCsBAC,EAAe,CACbC,O,SAAQC,G,MC9CV,E,iDDIA,IA2BIC,EA3BEC,EAAc,CAClBC,QAAS,eACTC,WAAY,YACZC,SAAU,OACVC,UAAW,SACXC,MAAO,YACPC,aAAc,OACdC,QAAS,OACTC,gBAAiB,sBACjBC,oBAAqB,cACrBC,oBAAqB,YACrBC,WAAY,SACZC,cAAe,sBAGXC,GAAcC,EAAAA,EAAAA,KAAI,IAClBC,EAAa,WACjB,IAAMC,EAAM,IAAIC,KAChBJ,EAAYK,MAAQF,EAAIG,mBAAmB,QAAS,CAClDC,QAAQ,EACRC,KAAM,UACNC,OAAQ,UACRC,OAAQ,UACRC,aAAc,UACX,OAAHC,OAAUT,EAAIU,oBAAsB,IAAM,EAC9C,E,OAIAC,EAAAA,EAAAA,YAAU,WACRZ,IACAhB,EAAa6B,YAAYb,EAAY,IACvC,KAEAc,EAAAA,EAAAA,cAAY,WACVC,cAAc/B,EAChB,I","sources":["webpack:///./resources/js/Layouts/NoLayout.vue?64f0","webpack:///./resources/js/Layouts/NoLayout.vue","webpack:///./resources/js/Pages/Time.vue","webpack:///./resources/js/Pages/Time.vue?d717"],"sourcesContent":["import script from \"./NoLayout.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./NoLayout.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n    <div>\n<!--       <Head :title=\"title\"/>-->\n    </div>\n\n    <div class=\"overflow-scroll hide-scrollbar scrollbar-hid\">\n        <slot />\n    </div>\n\n  <ImageLightboxModal v-if=\"appSettingStore.showImageLightboxModal\"/>\n  <GeneralServiceNotification />\n  <SocialSharingModal v-if=\"socialShareStore.socialSharingModal\" />\n</template>\n\n<script setup>\nimport { onBeforeMount } from 'vue'\nimport { useAppSettingStore } from '@/Stores/AppSettingStore'\nimport { useSocialShareStore } from '@/Stores/SocialShareStore'\n\nimport GeneralServiceNotification from '@/Components/Global/Modals/GeneralServiceNotification.vue'\nimport ImageLightboxModal from '@/Components/Global/Modals/ImageLightboxModal.vue'\nimport SocialSharingModal from '@/Components/Global/Modals/SocialSharingModal.vue'\n\nconst appSettingStore = useAppSettingStore()\nconst socialShareStore = useSocialShareStore()\n\nonBeforeMount(() => {\n  appSettingStore.checkScreenSize()\n})\n\n</script>\n","<template>\n  <div id=\"time\" :style=\"outputStyle\" class=\"w-full hide-scrollbar scrollbar-hide overflow-hidden\">\n    {{ currentTime }}\n  </div>\n</template>\n\n<script setup>\nimport { ref, onMounted, onUnmounted } from 'vue';\n\nconst outputStyle = {\n  display: 'inline-block',\n  fontFamily: 'monospace',\n  fontSize: '70px',\n  textAlign: 'center',\n  color: 'lightgray',\n  borderRadius: '10px',\n  padding: '10px',\n  backgroundColor: 'rgba(0, 0, 0, 0.75)',\n  WebkitFontSmoothing: 'antialiased', // For Chrome, Safari, newer versions of Opera\n  MozOsxFontSmoothing: 'grayscale', // For Firefox 25+\n  fontSmooth: 'always', // For older Firefox (though not standard)\n  textRendering: 'optimizeLegibility', // Improves legibility and rendering\n};\n\nconst currentTime = ref('');\nconst formatTime = () => {\n  const now = new Date();\n  currentTime.value = now.toLocaleTimeString('en-US', {\n    hour12: false,\n    hour: '2-digit',\n    minute: '2-digit',\n    second: '2-digit',\n    timeZoneName: 'short'\n  }) + ` GMT${now.getTimezoneOffset() / 60 * -1}`;\n};\n\nlet intervalId;\n\nonMounted(() => {\n  formatTime();  // Initialize time once component is mounted\n  intervalId = setInterval(formatTime, 1000);  // Update every second\n});\n\nonUnmounted(() => {\n  clearInterval(intervalId);  // Clear the interval when component is unmounted\n});\n</script>\n\n<script>\nimport NoLayout from '../Layouts/NoLayout';\nexport default {\n  layout: NoLayout,\n}\n</script>\n","import script from \"./Time.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Time.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__"],"names":["appSettingStore","useAppSettingStore","socialShareStore","useSocialShareStore","onBeforeMount","checkScreenSize","__default__","layout","NoLayout","intervalId","outputStyle","display","fontFamily","fontSize","textAlign","color","borderRadius","padding","backgroundColor","WebkitFontSmoothing","MozOsxFontSmoothing","fontSmooth","textRendering","currentTime","ref","formatTime","now","Date","value","toLocaleTimeString","hour12","hour","minute","second","timeZoneName","concat","getTimezoneOffset","onMounted","setInterval","onUnmounted","clearInterval"],"sourceRoot":""}