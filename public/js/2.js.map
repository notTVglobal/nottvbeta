{"version":3,"file":"js/2.js","mappings":"kHAEaA,MAAM,6B,GACFA,MAAM,Q,GACHA,MAAM,0B,GAGLA,MAAM,4C,GAEHC,EAAAA,EAAAA,oBAGS,UAFLD,MAAM,iEACT,mBACD,GCXxB,MAAME,EAAS,CAAC,EAKhB,GAFiC,E,QAAA,GAAgBA,EAAQ,CAAC,CAAC,S,4EDHvDC,EAAAA,EAAAA,oBAgBS,gBAfLF,EAAAA,EAAAA,oBAcM,MAdNG,EAcM,EAbFH,EAAAA,EAAAA,oBAEM,MAFNI,EAEM,EADFJ,EAAAA,EAAAA,oBAAgD,KAAhDK,EAAgD,EAAbC,EAAAA,EAAAA,YAAQC,EAAAC,OAAA,gBAE/CR,EAAAA,EAAAA,oBASM,aARFA,EAAAA,EAAAA,oBAOM,MAPNS,EAOM,EANFC,EAAAA,EAAAA,aAKOC,EAAA,CALAC,KAAI,mBAAmB,CARlD,SAAAC,EAAAA,EAAAA,UASwB,iBAGS,CAHTC,E,IATxBC,EAAA,W,iLEKA,E,2DCmBA,IAAIC,EAAsB,EACpBC,EAAqB,WACvBD,EAAsBE,OAAOC,OACjC,E,OAIAC,EAAAA,EAAAA,YAAU,WACNF,OAAOG,SAAS,EAAGL,EACvB,I,yxDC5BA,E,oMCsCIM,EAAQC,EAoFNC,GA5DcC,EAAA,GAFAH,EAAMI,YACJJ,EAAMK,eA6DXC,IACbC,IACAC,IACAC,IACAC,MA0BJ,SAASC,IACLC,QAAQC,IAAI,qBAGhB,CAlBAX,EAASY,WAAc,CACnBC,mBAAoB,CAChBC,QAAS,MAiBjB,IAAMC,EAAOC,EAEb,SAASC,EAAoBC,EAAOC,GAChC,GAAID,EAIA,OAHAR,QAAQC,IAAI,2BACZD,QAAQC,IAAIO,QACZR,QAAQC,IAAIQ,GAIhBJ,EAAK,cAKT,C,88CC5KA,E,wECoDA,IAAIK,GAAmBC,EAAAA,EAAAA,KACnBC,GAAYC,EAAAA,EAAAA,KAoBhB,SAASC,IACLC,EAAAA,QAAQC,OAAO,CACXC,KAAM,CAAC,WAEf,C,OAhBAL,EAAUM,YAAc,qBACxBN,EAAUO,kBAAmB,GAE7BjC,EAAAA,EAAAA,YAAU,WACNwB,EAAiBU,oBACbR,EAAUS,WACVX,EAAiBY,SAAW,WAC5BZ,EAAiBa,IAAM,GAE3BC,SAASC,eAAe,UAAUC,gBACtC,I","sources":["webpack:///./resources/js/Components/Admin/AdminHeader.vue","webpack:///./resources/js/Components/Admin/AdminHeader.vue?7b8b","webpack:///./resources/js/Components/Pagination.vue?9c0c","webpack:///./resources/js/Components/Pagination.vue","webpack:///./resources/js/Components/Uploaders/ImageUpload.vue?2f2a","webpack:///./resources/js/Components/Uploaders/ImageUpload.vue","webpack:///./resources/js/Pages/Admin/Images.vue?7f6f","webpack:///./resources/js/Pages/Admin/Images.vue"],"sourcesContent":["<template>\n    <header>\n        <div class=\"flex justify-between my-3\">\n            <div class=\"mb-4\">\n                <h1 class=\"text-3xl font-semibold\"><slot /></h1>\n            </div>\n            <div>\n                <div class=\"flex flex-wrap-reverse justify-end gap-2\">\n                    <Link :href=\"`/admin/settings`\">\n                        <button\n                            class=\"px-4 py-2 text-white bg-blue-600 hover:bg-blue-500 rounded-lg\"\n                        >Admin Settings\n                        </button>\n                    </Link>\n                </div>\n            </div>\n        </div>\n    </header>\n\n</template>\n\n<script setup>\n\n</script>\n","import { render } from \"./AdminHeader.vue?vue&type=template&id=0e7c3d0b\"\nconst script = {}\n\nimport exportComponent from \"../../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import script from \"./Pagination.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Pagination.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n    <div v-if=\"data.last_page > 1\" class=\"flex flex-wrap justify-center my-4 space-x-4 space-y-2\">\n        <div></div>\n        <Component\n            :is=\"link.url ? 'Link' : 'span'\"\n            v-for=\"(link, key) in data.links\"\n            :key=\"key\"\n            :href=\"link.url\"\n            @click=\"saveScrollPosition\"\n            v-html=\"link.label\"\n            class=\"px-4 py-3 text-sm leading-4 h-fit\"\n            :class=\"{ 'text-white bg-orange-400 hover:bg-orange-400 dark:bg-orange-400 dark:hover:bg-orange-400': link.active,\n                      'rounded mt-2 mr-0.5 text-gray-300 dark:text-gray-700': ! link.url,\n                      'rounded bg-gray-200 hover:bg-gray-300 dark:bg-gray-800 dark:hover:bg-gray-600 text-gray-800 dark:text-gray-50 focus:text-indigo-500 hover:shadow': link.url }\"\n            />\n    </div>\n</template>\n\n\n<script setup>\n\ndefineProps({\n    data: Object,\n})\nlet savedScrollPosition = 0;\nconst saveScrollPosition = () => {\n    savedScrollPosition = window.scrollY;\n};\n\nimport { onMounted, onUpdated } from 'vue';\n\nonMounted(() => {\n    window.scrollTo(0, savedScrollPosition);\n});\n\n// onUpdated(() => {\n//     window.scrollTo(0, savedScrollPosition);\n// });\n</script>\n\n<!--class=\"px-1 text-gray-800 dark:text-gray-50 dark:hover:text-blue-400 hover:text-blue-400\"-->\n<!--:class=\"{ 'text-gray-300 dark:text-gray-700 dark:hover:text-gray-700 hover:text-gray-300': ! link.url, 'font-bold' : link.active }\"-->\n","import script from \"./ImageUpload.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./ImageUpload.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n<div class=\"\">\n    <div class=\"max-full mx-auto mt-2 mb-6 bg-gray-200 p-6 text-black\">\n        <h2 class=\"text-xl font-semibold\">{{ name }}</h2>\n\n        <ul class=\"pb-4\">\n            <li>Max File Size: <span class=\"text-orange-400\">{{ maxSize }}</span></li>\n            <li>File Types accepted: <span class=\"text-orange-400\">{{ fileTypes }}</span></li>\n        </ul>\n        <file-pond\n            name=\"image\"\n            ref=\"pond\"\n            label-idle=\"Click to choose file, or drag here...\"\n            @init=\"filepondInitialized\"\n            :server=\"server\"\n            :accepted-file-types=\"fileTypes\"\n            @processfile=\"handleProcessedFile\"\n            :max-file-size=\"maxSize\"\n        />\n<!--        <file-pond-->\n<!--            ref=\"filePond\"-->\n<!--            :files=\"files\"-->\n<!--            :server=\"serverOptions\"-->\n<!--            @init=\"handleFilePondInit\"-->\n<!--            @beforeaddfile=\"handleBeforeAddFile\"-->\n<!--            @processfile=\"handleProcessedFile\"-->\n<!--        />-->\n    </div>\n</div>\n\n</template>\n\n<script setup>\nimport vueFilePond, { setOptions } from 'vue-filepond'\nimport FilePondPluginFileValidateType from \"filepond-plugin-file-validate-type\"\nimport FilePondPluginFileValidateSize from \"filepond-plugin-file-validate-size\"\nimport FilePondPluginImagePreview from \"filepond-plugin-image-preview\"\nimport FilePondPluginFileMetadata from \"filepond-plugin-file-metadata\"\nimport 'filepond/dist/filepond.min.css'\nimport 'filepond-plugin-image-preview/dist/filepond-plugin-image-preview.min.css'\nimport {Inertia} from \"@inertiajs/inertia\";\nimport {computed, ref} from \"vue\";\n\nlet props = defineProps({\n    image: Object,\n    name: String,\n    metadataKey: String,\n    metadataValue: String,\n    server: String,\n    maxSize: String,\n    fileTypes: String,\n})\n\n\n// // Initialize FilePond with the File Metadata plugin\n// const filePondOptions = {\n//     allowMultiple: false,\n//     labelIdle: \"Drop files here or click to upload\",\n//     plugins: [FilePondPluginFileMetadata()],\n// };\n\n\n// Files array to store uploaded files\n// const files = ref([]);\n\nconst metadataKey = props.metadataKey\nconst metadataValue = props.metadataValue\nconst customMetadata = {\n    [metadataKey]: metadataValue\n};\n// customMetadata.value[props.metadataKey] = 'bar';\n// customMetadata.value[props.metadataKey] = props.metadataValue;\n// const customMetadata = ref({ [props.metadataKey]: props.metadataValue });\n// const customMetadata = computed(() => ({\n//     [props.metadataKey]: props.metadataValue,\n// }));\n\n// FilePond server options (you can customize this)\nconst serverOptions = {\n    process: (fieldName, file, metadata, load, error, progress, abort) => {\n        // Construct a FormData object to send the file and metadata to your Laravel server\n        const formData = new FormData();\n        formData.append('file', file, file.name); // Add the file\n        formData.append('metadata', JSON.stringify(customMetadata)); // Add the metadata as a JSON string\n\n        // Make an Axios POST request to your Laravel backend\n        axios.post(props.server, formData, {\n            headers: {\n                'Content-Type': 'multipart/form-data', // Set the appropriate content type\n            },\n            onUploadProgress: (event) => {\n                const progressPercentage = Math.round((event.loaded / event.total) * 100);\n                // Update the progress bar or display progress percentage if needed\n                progress(progressPercentage);\n            },\n        })\n            .then((response) => {\n                // Handle a successful upload\n                load(response.data.url); // Pass the file URL to the load() function\n            })\n            .catch((err) => {\n                // Handle upload error\n                console.error('Upload error:', err);\n                error('Error uploading the file'); // Pass an error message to the error() function\n            });\n    },\n};\n\n\n// Initialize FilePond\n// const handleFilePondInit = () => {\n//     // FilePond has been initialized\n//     console.log(\"FilePond is ready\");\n// };\n\n// Handle the beforeaddfile event\n// const handleBeforeAddFile = (file) => {\n//     // Add metadata to the file object\n//     file.setMetadata(\"key\", \"value\");\n//     // You can set multiple metadata fields as needed\n//     // file.setMetadata(\"anotherKey\", \"anotherValue\");\n// };\n\n\n\n\n\nconst FilePond = vueFilePond(\n    FilePondPluginFileValidateType,\n    FilePondPluginFileValidateSize,\n    FilePondPluginImagePreview,\n    FilePondPluginFileMetadata\n);\n\n// Handle the beforeaddfile event\n// const handleBeforeAddFile = (file) => {\n//     // Add metadata to the file object\n//     file.setMetadata(\"show_id\", \"1\");\n//     // You can set multiple metadata fields as needed\n//     // file.setMetadata(\"anotherKey\", \"anotherValue\");\n// };\n\n// FilePond.registerPlugin(FilePondPluginFileMetadata);\nFilePond.setOptions = ({\n    fileMetadataObject: {\n        show_id: '1',\n    },\n});\n\n\n// Initialize FilePond with the File Metadata plugin\n// const filePondOptions = {\n//     allowMultiple: true,\n//     labelIdle: \"Drop files here or click to upload\",\n//     plugins: [FilePondPluginFileMetadata()],\n// };\n\nfunction filepondInitialized() {\n    console.log(\"Filepond is ready!\");\n    // console.log('Filepond object:', FilePond);\n\n}\nconst emit = defineEmits(['reloadImage'])\n\nfunction handleProcessedFile(error, file) {\n    if (error) {\n        console.log(\"Filepond processed file\");\n        console.log(error);\n        console.log(file);\n        return;\n    }\n\n    emit('reloadImage')\n\n    // Inertia.reload({\n    //     only: ['image'],\n    // });\n}\n\n</script>\n","import script from \"./Images.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Images.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n    <Head title=\"Image uploading\"/>\n\n    <div class=\"place-self-center flex flex-col gap-y-3\">\n        <div id=\"topDiv\" class=\"bg-white text-black dark:bg-gray-900 dark:text-gray-50 p-5 mb-10\">\n\n            <Message v-if=\"userStore.showFlashMessage\" :flash=\"$page.props.flash\"/>\n\n            <AdminHeader>Images</AdminHeader>\n\n            <div class=\"max-w-lg mx-auto mt-2 bg-gray-200 p-6\">\n                <h3 class=\"text-2xl font-bold text-center dark:text-white\">Image Uploader</h3>\n\n                <ImageUpload :image=\"images\"\n                             :server=\"'/upload'\"\n                             :name=\"''\"\n                             :maxSize=\"'10MB'\"\n                             :fileTypes=\"'image/jpg, image/jpeg, image/png'\"\n                             @reloadImage=\"reloadImage\"\n                />\n\n            </div>\n\n            <div class=\"mt-8 mb-24 mx-auto w-[calc(100%-96)] py-10\">\n                <h3 class=\"text-2xl font-bold text-center dark:text-white\">Image Gallery</h3>\n        <!--        <input v-model=\"search\" type=\"search\" placeholder=\"Search...\" class=\"border px-2 rounded-lg\" />-->\n                <!-- Paginator -->\n                <Pagination :data=\"images\" class=\"mt-6\"/>\n                <div class=\"w-full p-4 flex flex-initial flex-wrap gap-6 justify-center mt-4\">\n                    <div v-for=\"image in images.data\" :key=\"image\">\n        <!--                <img :src=\"'/storage/images/' + image.name\" class=\"max-w-xs\">-->\n                        <SingleImage :image=\"image\" :alt=\"'show cover'\" class=\"max-w-xs\"/>\n\n\n                    </div>\n                </div>\n                <!-- Paginator -->\n                <Pagination :data=\"images\" class=\"mt-6\"/>\n            </div>\n\n        </div>\n    </div>\n</template>\n\n\n<script setup>\nimport { onBeforeMount, onMounted, ref } from \"vue\";\nimport { Inertia } from \"@inertiajs/inertia\";\nimport { Head, Link } from '@inertiajs/inertia-vue3'\nimport { useVideoPlayerStore } from \"@/Stores/VideoPlayerStore.js\"\nimport { useUserStore } from \"@/Stores/UserStore\";\nimport Pagination from \"@/Components/Pagination.vue\"\nimport Message from \"@/Components/Modals/Messages.vue\";\nimport SingleImage from \"@/Components/Multimedia/SingleImage.vue\"\nimport ImageUpload from \"@/Components/Uploaders/ImageUpload.vue\"\nimport AdminHeader from \"@/Components/Admin/AdminHeader.vue\";\n\nlet videoPlayerStore = useVideoPlayerStore()\nlet userStore = useUserStore()\n\nlet props = defineProps({\n    images: Object,\n    message: String,\n    // filters: Object,\n});\n\nuserStore.currentPage = 'adminImageUploader';\nuserStore.showFlashMessage = true;\n\nonMounted(() => {\n    videoPlayerStore.makeVideoTopRight();\n    if (userStore.isMobile) {\n        videoPlayerStore.ottClass = 'ottClose'\n        videoPlayerStore.ott = 0\n    }\n    document.getElementById(\"topDiv\").scrollIntoView()\n});\n\nfunction reloadImage() {\n    Inertia.reload({\n        only: ['images'],\n    });\n}\n\n\n// let search = ref(props.filters.search);\n//\n// watch(search, throttle(function (value) {\n//     Inertia.get('image', { search: value }, {\n//         preserveState: true,\n//         replace: true\n//     });\n// }, 300));\n\n// config: { headers: function () { return {} } }\n\n</script>\n"],"names":["class","_createElementVNode","script","_createElementBlock","_hoisted_1","_hoisted_2","_hoisted_3","_renderSlot","_ctx","$slots","_hoisted_4","_createVNode","_component_Link","href","_withCtx","_hoisted_5","_","savedScrollPosition","saveScrollPosition","window","scrollY","onMounted","scrollTo","props","__props","FilePond","_defineProperty","metadataKey","metadataValue","vueFilePond","FilePondPluginFileValidateType","FilePondPluginFileValidateSize","FilePondPluginImagePreview","FilePondPluginFileMetadata","filepondInitialized","console","log","setOptions","fileMetadataObject","show_id","emit","__emit","handleProcessedFile","error","file","videoPlayerStore","useVideoPlayerStore","userStore","useUserStore","reloadImage","Inertia","reload","only","currentPage","showFlashMessage","makeVideoTopRight","isMobile","ottClass","ott","document","getElementById","scrollIntoView"],"sourceRoot":""}