{"version":3,"file":"js/2.js","mappings":"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","sources":["webpack:///./resources/js/Utilities/PageSetup.js","webpack:///./resources/js/Components/Global/Modals/Messages.vue?dfe9","webpack:///./resources/js/Components/Global/Modals/Messages.vue","webpack:///./resources/js/Components/Global/Paginators/Pagination.vue?0305","webpack:///./resources/js/Components/Global/Paginators/Pagination.vue","webpack:///./resources/js/Components/Global/Uploaders/ImageUpload.vue?55d5","webpack:///./resources/js/Components/Global/Uploaders/ImageUpload.vue","webpack:///./resources/js/Components/Pages/Admin/AdminHeader.vue?239a","webpack:///./resources/js/Components/Pages/Admin/AdminHeader.vue","webpack:///./resources/js/Pages/Admin/Images.vue?7f6f","webpack:///./resources/js/Pages/Admin/Images.vue"],"sourcesContent":["import { onBeforeMount, onMounted } from 'vue'\nimport { useUserStore } from \"@/Stores/UserStore\"\nimport { useAppSettingStore } from \"@/Stores/AppSettingStore\"\nimport { useVideoPlayerStore } from \"@/Stores/VideoPlayerStore\"\nimport { Inertia } from '@inertiajs/inertia'\n\nexport function usePageSetup(pageName) {\n    const userStore = useUserStore()\n    const appSettingStore = useAppSettingStore()\n    const videoPlayerStore = useVideoPlayerStore()\n\n    appSettingStore.currentPage = pageName\n    appSettingStore.showFlashMessage = true\n    appSettingStore.pageIsHidden = false\n\n    if (userStore.isMobile) {\n        appSettingStore.ott = 0\n    } else {\n        appSettingStore.ott = 1\n    }\n\n    videoPlayerStore.makeVideoTopRight()\n\n    if (appSettingStore.pageReload) {\n        appSettingStore.pageReload = false\n        window.location.reload(true);\n    }\n    // Check if the URL contains query strings\n\n\n    // Only scroll into view if there are no query strings\n\n        // const topDiv = document.getElementById(\"topDiv\")\n        // if (topDiv) {\n        //     topDiv.scrollIntoView()\n        // }\n        Inertia.on('navigate', (event) => {\n            const hasQueryStrings = window.location.search !== '';\n            if (!hasQueryStrings || appSettingStore.shouldScrollToTop) {\n                requestAnimationFrame(() => {\n                    const topDiv = document.getElementById(\"topDiv\");\n                    if (topDiv) {\n                        topDiv.scrollIntoView({behavior: 'auto'});\n                    } else {\n                        window.scrollTo(0, 0);\n                    }\n                });\n            }\n            appSettingStore.shouldScrollToTop = false;\n        })\n    // Only update if we're not already on this page to avoid overwriting with the current URL\n    appSettingStore.setPrevUrl()\n    appSettingStore.showOttButtons = true\n    appSettingStore.noLayout = false\n\n    // Inertia.reload()\n\n}\n","import script from \"./Messages.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Messages.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n  <div class=\"mx-4 my-4\">\n    <div class=\"alert alert-info mt-4\"\n         v-if=\"props.flash.message\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" class=\"stroke-current shrink-0 w-6 h-6\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n              d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"></path>\n      </svg>\n      <span>{{ props.flash.message }}</span>\n      <button class=\"text-xs ml-12\" @click=\"clearFlashMessage\"> Close</button>\n    </div>\n    <div class=\"alert alert-success mt-4 mx-3\"\n         v-if=\"props.flash.success\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"stroke-current shrink-0 h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n              d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"/>\n      </svg>\n      <span>{{ props.flash.success }}</span>\n      <button class=\"text-xs ml-12\" @click=\"clearFlashMessage\"> Close</button>\n    </div>\n    <div class=\"alert alert-warning mt-4 mx-3\"\n         v-if=\"props.flash.warning\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"stroke-current shrink-0 h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n              d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z\"/>\n      </svg>\n      <span>{{ props.flash.warning }}</span>\n      <button class=\"text-xs ml-12\" @click=\"clearFlashMessage\"> Close</button>\n    </div>\n    <div class=\"alert alert-error mt-4 mx-3\"\n         v-if=\"props.flash.error\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"stroke-current shrink-0 h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n              d=\"M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z\"/>\n      </svg>\n      <span>{{ props.flash.error }}</span>\n      <button class=\"text-xs ml-12\" @click=\"clearFlashMessage\"> Close</button>\n    </div>\n  </div>\n\n</template>\n\n<script setup>\nimport { Inertia } from \"@inertiajs/inertia\"\nimport { computed } from \"vue\"\nimport { useAppSettingStore } from \"@/Stores/AppSettingStore\"\n\nconst appSettingStore = useAppSettingStore()\n\nappSettingStore.showFlashMessage = true\n\nlet props = defineProps({\n  flash: Object,\n\n})\n\nconst messageType = computed(() => ({\n  'text-green-700 bg-green-100 dark:bg-green-200 dark:text-green-800': props.flash.success,\n  'text-blue-700 bg-blue-100 dark:bg-blue-200 dark:text-blue-800': props.flash.message,\n  'text-orange-700 bg-orange-100 dark:bg-orange-200 dark:text-orange-800': props.flash.warning,\n  'text-red-700 bg-red-100 dark:bg-red-200 dark:text-red-800': props.flash.error,\n}))\n\nconst clearFlashMessage = async () => {\n  await Inertia.post(route('flash.clear'));\n  Inertia.reload();\n};\n</script>\n","import script from \"./Pagination.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Pagination.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n  <div v-if=\"data.last_page > 1\" class=\"flex flex-wrap justify-center my-4 space-x-4 space-y-2\">\n    <div></div>\n    <Component\n        :is=\"link.url ? 'Link' : 'span'\"\n        v-for=\"(link, key) in data.links\"\n        :key=\"key\"\n        :href=\"link.url\"\n        @click.prevent=\"saveScrollPosition\"\n        v-html=\"link.label\"\n        class=\"px-4 py-3 text-sm leading-4 h-fit\"\n        :class=\"{ 'text-white bg-orange-400 hover:bg-orange-400 dark:bg-orange-400 dark:hover:bg-orange-400': link.active,\n                      'rounded mt-2 mr-0.5 text-gray-300 dark:text-gray-700': ! link.url,\n                      'rounded bg-gray-200 hover:bg-gray-300 dark:bg-gray-800 dark:hover:bg-gray-600 text-gray-800 dark:text-gray-50 focus:text-indigo-500 hover:shadow': link.url }\"\n    />\n  </div>\n</template>\n\n\n<script setup>\nimport { onMounted, onUpdated } from 'vue'\n\ndefineProps({\n  data: Object,\n})\nlet savedScrollPosition = 0\nconst saveScrollPosition = () => {\n  savedScrollPosition = window.scrollY\n}\nonMounted(() => {\n  window.scrollTo(0, savedScrollPosition)\n})\n</script>\n\n\n<!--class=\"px-1 text-gray-800 dark:text-gray-50 dark:hover:text-blue-400 hover:text-blue-400\"-->\n<!--:class=\"{ 'text-gray-300 dark:text-gray-700 dark:hover:text-gray-700 hover:text-gray-300': ! link.url, 'font-bold' : link.active }\"-->\n","import script from \"./ImageUpload.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./ImageUpload.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n  <div class=\"\">\n    <div class=\"max-full mx-auto mt-2 mb-6 bg-gray-200 p-6 text-black\">\n      <h2 class=\"text-xl font-semibold\">{{ name }}</h2>\n\n      <ul class=\"pb-4\">\n        <li>Max File Size: <span class=\"text-orange-400\">{{ maxSize }}</span></li>\n        <li>File Types accepted: <span class=\"text-orange-400\">{{ fileTypes }}</span></li>\n      </ul>\n      <file-pond\n          name=\"image\"\n          ref=\"pond\"\n          label-idle=\"Click to choose file, or drag here...\"\n          @init=\"filepondInitialized\"\n          :server=\"serverOptions\"\n          :accepted-file-types=\"fileTypes\"\n          @processfile=\"handleProcessedFile\"\n          :max-file-size=\"maxSize\"\n      />\n      <!--        <file-pond-->\n      <!--            ref=\"filePond\"-->\n      <!--            :files=\"files\"-->\n      <!--            :server=\"serverOptions\"-->\n      <!--            @init=\"handleFilePondInit\"-->\n      <!--            @beforeaddfile=\"handleBeforeAddFile\"-->\n      <!--            @processfile=\"handleProcessedFile\"-->\n      <!--        />-->\n    </div>\n  </div>\n\n</template>\n\n<script setup>\nimport { useNotificationStore } from '@/Stores/NotificationStore'\nimport vueFilePond, { setOptions } from 'vue-filepond'\nimport FilePondPluginFileValidateType from \"filepond-plugin-file-validate-type\"\nimport FilePondPluginFileValidateSize from \"filepond-plugin-file-validate-size\"\nimport FilePondPluginImagePreview from \"filepond-plugin-image-preview\"\nimport FilePondPluginFileMetadata from \"filepond-plugin-file-metadata\"\nimport 'filepond/dist/filepond.min.css'\nimport 'filepond-plugin-image-preview/dist/filepond-plugin-image-preview.min.css'\n\nconst notificationStore = useNotificationStore()\n\nlet props = defineProps({\n  image: Object,\n  name: String,\n  metadataKey: String,\n  metadataValue: String,\n  modelType: String,\n  modelId: String,\n  maxSize: String,\n  fileTypes: String,\n})\n\n\n// // Initialize FilePond with the File Metadata plugin\n// const filePondOptions = {\n//     allowMultiple: false,\n//     labelIdle: \"Drop files here or click to upload\",\n//     plugins: [FilePondPluginFileMetadata()],\n// };\n\n\n// Files array to store uploaded files\n// const files = ref([]);\n\nconst metadataKey = props.metadataKey\nconst metadataValue = props.metadataValue\nconst customMetadata = {\n  [metadataKey]: metadataValue\n};\n// customMetadata.value[props.metadataKey] = 'bar';\n// customMetadata.value[props.metadataKey] = props.metadataValue;\n// const customMetadata = ref({ [props.metadataKey]: props.metadataValue });\n// const customMetadata = computed(() => ({\n//     [props.metadataKey]: props.metadataValue,\n// }));\n\n// FilePond server options (you can customize this)\nconst serverOptions = {\n  process: (fieldName, file, metadata, load, error, progress, abort) => {\n    const formData = new FormData();\n    formData.append('image', file, file.name); // Attach the file\n    // Append modelType and modelId if it's part of your component\n    if (props.modelType) {\n      formData.append('modelType', props.modelType);\n    }\n    if (props.modelId) {\n      formData.append('modelId', props.modelId);\n    }\n\n    // Axios request configuration\n    const config = {\n      onUploadProgress: (event) => {\n        // Calculate and update progress\n        progress(event.lengthComputable, event.loaded, event.total);\n      },\n    };\n\n    // Perform the Axios POST request\n    axios.post('/api/image-upload', formData, config)\n        .then(response => {\n          // FilePond expects the server to return a file ID on successful upload,\n          // but you can adjust this based on your response structure.\n          load(response.data.fileId);\n        })\n        .catch(err => {\n          // Default error message and title in case err.response is undefined\n          let errorMessage = 'An unexpected error occurred during the upload. Please try again.';\n          let errorTitle = 'Upload Error';\n\n          // Check if the error response exists and has data\n          if (err.response && err.response.data) {\n            // Example: Extracting error message from server response\n            // Adjust based on your server's error response structure\n            if (typeof err.response.data === 'object' && err.response.data.errors) {\n              // If the errors are in object format, you might want to convert them to a string\n              const errors = err.response.data.errors;\n              const errorMessages = Object.keys(errors).map(key => `${key}: ${errors[key].join(', ')}`).join('\\n');\n              errorMessage = `Upload failed with errors:\\n${errorMessages}`;\n            } else if (typeof err.response.data === 'string') {\n              // Directly use the error string as the message\n              errorMessage = err.response.data;\n            }\n          }\n\n          // Use the errorMessage and errorTitle in your notification\n          notificationStore.setGeneralServiceNotification(errorTitle, errorMessage);\n\n          // Pass a generic error message to FilePond's error handler to avoid displaying sensitive or detailed information directly in the UI\n          error('An error occurred during the upload.');\n        });\n\n\n    // Return an abort function to stop the upload if needed\n    return {\n      abort: () => {\n        // This function is called if the user aborts the upload\n        console.log(\"Upload aborted by the user.\");\n        abort();\n      }\n    };\n  },\n};\n\n\n// Initialize FilePond\n// const handleFilePondInit = () => {\n//     // FilePond has been initialized\n//     console.log(\"FilePond is ready\");\n// };\n\n// Handle the beforeaddfile event\n// const handleBeforeAddFile = (file) => {\n//     // Add metadata to the file object\n//     file.setMetadata(\"key\", \"value\");\n//     // You can set multiple metadata fields as needed\n//     // file.setMetadata(\"anotherKey\", \"anotherValue\");\n// };\n\n\nconst FilePond = vueFilePond(\n    FilePondPluginFileValidateType,\n    FilePondPluginFileValidateSize,\n    FilePondPluginImagePreview,\n    FilePondPluginFileMetadata\n);\n\n// Handle the beforeaddfile event\n// const handleBeforeAddFile = (file) => {\n//     // Add metadata to the file object\n//     file.setMetadata(\"show_id\", \"1\");\n//     // You can set multiple metadata fields as needed\n//     // file.setMetadata(\"anotherKey\", \"anotherValue\");\n// };\n\n// FilePond.registerPlugin(FilePondPluginFileMetadata);\nFilePond.setOptions = ({\n  fileMetadataObject: {\n    show_id: '1',\n  },\n});\n\n\n// Initialize FilePond with the File Metadata plugin\n// const filePondOptions = {\n//     allowMultiple: true,\n//     labelIdle: \"Drop files here or click to upload\",\n//     plugins: [FilePondPluginFileMetadata()],\n// };\n\nfunction filepondInitialized() {\n  console.log(\"Filepond is ready!\");\n  // console.log('Filepond object:', FilePond);\n\n}\n\nconst emit = defineEmits(['reloadImage'])\n\nfunction handleProcessedFile(error, file) {\n  if (error) {\n    console.log(\"Filepond processed file\");\n    console.log(error);\n    console.log(file);\n    return;\n  }\n\n  emit('reloadImage')\n\n  // Inertia.reload({\n  //     only: ['image'],\n  // });\n}\n\n</script>\n","import script from \"./AdminHeader.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./AdminHeader.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n  <header>\n    <div class=\"flex justify-between my-3\">\n      <div class=\"mb-4 relative\">\n        <h1 class=\"text-3xl font-semibold inline-block\">\n          <slot/>\n        </h1>\n        <span v-if=\"displayBadges\" class=\"text-white font-semibold badge badge-success absolute -top-2 -right-10 flex items-center justify-center min-w-[2rem] h-[2rem] rounded-full\">{{ (badgePrimaryNumber ?? 0) > 99 ? '99+' : (badgePrimaryNumber ?? 0) }}</span>\n        <span v-if=\"displayBadges\" class=\"font-semibold badge badge-warning absolute -top-2 -right-20 flex items-center justify-center min-w-[2rem] h-[2rem] rounded-full\">{{ (badgeSecondaryNumber ?? 0) > 99 ? '99+' : (badgeSecondaryNumber ?? 0) }}</span>\n\n      </div>\n      <div>\n        <div class=\"flex flex-wrap-reverse justify-end gap-2\">\n          <Link :href=\"`/admin/settings`\">\n            <button\n                class=\"px-4 py-2 text-white bg-blue-600 hover:bg-blue-500 rounded-lg\"\n            >Admin Settings\n            </button>\n          </Link>\n        </div>\n      </div>\n    </div>\n  </header>\n\n</template>\n\n<script setup>\nimport { reactive } from 'vue'\n\nconst props = defineProps({\n  displayBadges: Boolean,\n  badgePrimaryNumber: Number,\n  badgeSecondaryNumber: Number,\n});\n\nconst defaultProps = {\n  displayBadges: false,\n};\n\nconst finalProps = reactive({ ...defaultProps, ...props });\n\n</script>\n","import script from \"./Images.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Images.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n  <Head title=\"Image uploading\"/>\n\n  <div class=\"place-self-center flex flex-col gap-y-3\">\n    <div id=\"topDiv\" class=\"bg-white text-black dark:bg-gray-900 dark:text-gray-50 p-5 mb-10\">\n\n      <Message v-if=\"appSettingStore.showFlashMessage\" :flash=\"$page.props.flash\"/>\n\n      <AdminHeader>Images</AdminHeader>\n\n      <div class=\"max-w-lg mx-auto mt-2 bg-gray-200 p-6\">\n        <h3 class=\"text-2xl font-bold text-center dark:text-white\">Image Uploader</h3>\n\n        <ImageUpload :image=\"images\"\n                     :modelType=\"null\"\n                     :modelId=\"null\"\n                     :name=\"'Generic Image Upload'\"\n                     :maxSize=\"'10MB'\"\n                     :fileTypes=\"'image/jpg, image/jpeg, image/png'\"\n                     @reloadImage=\"reloadImage\"\n        />\n\n      </div>\n\n      <div class=\"mt-8 mb-24 mx-auto w-[calc(100%-96)] py-10\">\n        <h3 class=\"text-2xl font-bold text-center dark:text-white\">Image Gallery</h3>\n        <!--        <input v-model=\"search\" type=\"search\" placeholder=\"Search...\" class=\"border px-2 rounded-lg\" />-->\n        <!-- Paginator -->\n        <Pagination :data=\"images\" class=\"mt-6\"/>\n        <div class=\"w-full p-4 flex flex-initial flex-wrap gap-6 justify-center mt-4\">\n          <div v-for=\"image in images.data\" :key=\"image\">\n            <!--                <img :src=\"'/storage/images/' + image.name\" class=\"max-w-xs\">-->\n            <SingleImage :image=\"image\" :alt=\"'show cover'\" class=\"max-w-xs\"/>\n\n\n          </div>\n        </div>\n        <!-- Paginator -->\n        <Pagination :data=\"images\" class=\"mt-6\"/>\n      </div>\n\n    </div>\n  </div>\n</template>\n\n\n<script setup>\nimport { Inertia } from \"@inertiajs/inertia\"\nimport { Head } from '@inertiajs/inertia-vue3'\nimport { usePageSetup } from '@/Utilities/PageSetup'\nimport { useAppSettingStore } from \"@/Stores/AppSettingStore\"\nimport AdminHeader from \"@/Components/Pages/Admin/AdminHeader\"\nimport Pagination from \"@/Components/Global/Paginators/Pagination\"\nimport Message from \"@/Components/Global/Modals/Messages\"\nimport SingleImage from \"@/Components/Global/Multimedia/SingleImage\"\nimport ImageUpload from \"@/Components/Global/Uploaders/ImageUpload\"\n\nusePageSetup('Admin/Images')\n\nconst appSettingStore = useAppSettingStore()\n\nlet props = defineProps({\n  images: Object,\n  message: String,\n  // filters: Object,\n});\n\nfunction reloadImage() {\n  Inertia.reload({\n    only: ['images'],\n  });\n}\n\n\n// let search = ref(props.filters.search);\n//\n// watch(search, throttle(function (value) {\n//     Inertia.get('image', { search: value }, {\n//         preserveState: true,\n//         replace: true\n//     });\n// }, 300));\n\n// config: { headers: function () { return {} } }\n\n</script>\n"],"names":["usePageSetup","pageName","userStore","useUserStore","appSettingStore","useAppSettingStore","videoPlayerStore","useVideoPlayerStore","currentPage","showFlashMessage","pageIsHidden","isMobile","ott","makeVideoTopRight","pageReload","window","location","reload","Inertia","on","event","search","shouldScrollToTop","requestAnimationFrame","topDiv","document","getElementById","scrollIntoView","behavior","scrollTo","setPrevUrl","showOttButtons","noLayout","props","__props","clearFlashMessage","computed","flash","success","message","warning","error","_ref","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","post","route","stop","apply","arguments","savedScrollPosition","saveScrollPosition","scrollY","onMounted","notificationStore","useNotificationStore","serverOptions","_defineProperty","metadataKey","metadataValue","process","fieldName","file","metadata","load","progress","abort","formData","FormData","append","name","modelType","modelId","config","onUploadProgress","lengthComputable","loaded","total","axios","then","response","data","fileId","err","errorMessage","_typeof","errors","errorMessages","Object","keys","map","key","concat","join","setGeneralServiceNotification","console","log","FilePond","vueFilePond","FilePondPluginFileValidateType","FilePondPluginFileValidateSize","FilePondPluginImagePreview","FilePondPluginFileMetadata","filepondInitialized","setOptions","fileMetadataObject","show_id","emit","__emit","handleProcessedFile","reactive","_objectSpread","displayBadges","reloadImage","only"],"sourceRoot":""}