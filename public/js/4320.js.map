{"version":3,"file":"js/4320.js","mappings":"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","sources":["webpack:///./resources/js/Pages/Video.vue?436a","webpack:///./resources/js/Pages/Video.vue"],"sourcesContent":["import script from \"./Video.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Video.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n\n    <Head title=\"MistServer API\" />\n    <div id=\"topDiv\"></div>\n    <div class=\"place-self-center flex flex-col gap-y-3\">\n        <div class=\"bg-white text-black p-5 mb-10\">\n\n            <div class=\"flex justify-between mb-6\">\n                <div class=\"grid grid-cols-1 grid-rows-2 pt-4\">\n                    <h1 class=\"text-3xl font-semibold\">MistServer API 2</h1>\n                </div>\n                <span class=\"text-xs font-semibold text-red-700\">Admin Mode</span>\n                <div class=\"grid grid-cols-1 grid-rows-2\">\n                    <div class=\"justify-self-end mb-4\">\n                        <Link :href=\"`/dashboard`\"><button\n                            class=\"px-4 py-2 text-white bg-blue-600 hover:bg-blue-500 rounded-lg\"\n                        >Dashboard</button>\n                        </Link>\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"flex justify-between\">\n                <div>\n                    <div class=\"\">Status: <span class=\"font-semibold\">{{ videoPlayerStore.status }}</span></div>\n\n                    <button class=\"ml-2 py-2 my-2 px-4 text-white bg-orange-800 hover:bg-orange-500 mr-2 rounded-xl\" @click.prevent=\"getStatus\">\n                        Get Status\n                    </button>\n\n                    <button v-if=\"videoPlayerStore.status === 'OK'\"\n                            class=\"ml-2 py-2 my-2 px-4 text-white bg-blue-800 hover:bg-blue-500 mr-2 rounded-xl\"\n                            @click.prevent=\"displayPushForm\">\n                        Start Push\n                    </button>\n\n                    <button v-if=\"videoPlayerStore.status === 'OK'\"\n                            class=\"ml-2 py-2 my-2 px-4 text-white bg-blue-800 hover:bg-blue-500 mr-2 rounded-xl\"\n                            @click.prevent=\"addStream\">\n                        Add Stream\n                    </button>\n                </div>\n                <div v-if=\"videoPlayerStore.status === 'OK'\" class=\"\">\n\n                </div>\n\n            </div>\n\n            <div v-if=\"videoPlayerStore.status === 'CHALL'\" class=\"mb-8\">\n                <div  class=\"py-3 px-4 mb-4 bg-orange-800 text-white rounded\">MistServer needs to be authenticated</div>\n\n                <div class=\"font-semibold text-2xl px-2\">\n                    Connect to the MistServer\n                </div>\n\n                <div class=\"my-3 pl-2 text-sm w-1/2\">If the MistServer Status will either be OK, CHALL, NOACC or ACC_MADE.\n                    If it's \"CHALL\" then you need to re-authenticate with the username and password.</div>\n\n                <form @submit.prevent class=\"mt-2 pl-2\">\n\n                    <div class=\"mt-2\">Challenge:</div>\n                    <input type=\"text\" name=\"challenge\" id=\"challenge\" v-model=\"videoPlayerStore.challenge\" disabled/>\n\n                    <div class=\"font-semibold mt-2\">MistServer Username:</div>\n                    <input class=\"mb-2\" type=\"text\" name=\"username\" v-model=\"videoPlayerStore.mistUsername\" />\n\n                    <div class=\"font-semibold mt-2\">MistServer Password:</div>\n                    <input type=\"password\" name=\"password\" v-model=\"form.password\" />\n\n                    <div class=\"mb-4 w-1/2 text-sm\"> Credit to Jeff Mott for his work on a pure JS implementation of the MD5 algorithm.\n                        You can find the npm package <a href=\"https://www.npmjs.com/package/md5\" target=\"_blank\" class=\"text-blue-800 hover:text-gray-500\">here.</a></div>\n\n                    <button class=\"ml-2 py-2 px-4 text-white bg-green-800 hover:bg-green-500 rounded-xl\" @click.prevent=\"authenticateMistServer\">\n                        Authenticate\n                    </button>\n\n                </form>\n\n            </div>\n\n            <div v-if=\"videoPlayerStore.status === 'OK'\" class=\"mb-8\">\n                <div  class=\"py-3 px-4 mb-4 bg-green-900 text-white rounded\">MistServer is connected</div>\n\n                <div class=\"grid grid-cols-1 md:grid-cols-3\">\n                    <div class=\"col-span-1\">\n                    <div class=\"flex flex-col space-y-2\">\n\n                        <button class=\"ml-2 py-2 px-4 text-white bg-blue-800 hover:bg-blue-500 rounded-xl\" @click.prevent=\"checkUpdates\">\n                           Check for Updates\n                        </button>\n\n                        <button class=\"ml-2 py-2 px-4 text-white bg-blue-800 hover:bg-blue-500 rounded-xl\" @click.prevent=\"getCapabilities\">\n                            Get Server Capabilities\n                        </button>\n\n                        <button class=\"ml-2 py-2 px-4 text-white bg-blue-800 hover:bg-blue-500 mr-2 rounded-xl\" @click.prevent=\"getTotals\">\n                            Get Totals\n                        </button>\n\n                        <button class=\"ml-2 py-2 px-4 text-white bg-blue-800 hover:bg-blue-500 mr-2 rounded-xl\" @click.prevent=\"getClients\">\n                            Get Clients\n                        </button>\n\n                        <button class=\"ml-2 py-2 px-4 text-white bg-blue-800 hover:bg-blue-500 rounded-xl\" @click.prevent=\"getActiveStreams\">\n                            Get Active Streams\n                        </button>\n\n                        <button class=\"ml-2 py-2 px-4 text-white bg-blue-800 hover:bg-blue-500 rounded-xl\" @click.prevent=\"getLog\">\n                            Get Log\n                        </button>\n\n                        <button class=\"ml-2 py-2 px-4 text-white bg-orange-800 hover:bg-orange-500 rounded-xl\" @click.prevent=\"clearLog\">\n                            Clear Log\n                        </button>\n\n                        <button class=\"ml-2 py-2 px-4 text-white bg-blue-800 hover:bg-blue-500 rounded-xl\" @click.prevent=\"browseRecordings\">\n                            Recordings\n                        </button>\n\n                    </div>\n                    </div>\n\n\n                    <div class=\"md:col-span-2 pl-6\">\n<!--                        <div v-if=\"videoPlayer.mistStatus\">-->\n<!--                            <div class=\"mt-2\">Returned data:</div>-->\n<!--                            <div class=\"\">-->\n<!--                                {{videoPlayer.apiResponse}}-->\n<!--                            </div>-->\n<!--                        </div>-->\n                        <div class=\"mt-2 text-xs uppercase\">Returned data:</div>\n\n                        <div v-if=\"videoPlayerStore.mistDisplay === 'updates'\">\n                            <table>\n                                <thead>\n                                <td></td>\n                                <td></td>\n                                <td></td>\n                                <td></td>\n                                <td></td>\n                                </thead>\n                                <tr v-for=\"update in videoPlayerStore.apiResponse.update\" :key=\"update.item\">\n                                    <td>{{ update[0] }}</td>\n                                    <td>{{ update[1] }}</td>\n                                    <td>{{ update[2] }}</td>\n                                    <td>{{ update[3] }}</td>\n                                    <td>{{ update[4] }}</td>\n                                </tr>\n                            </table>\n                        </div>\n\n                        <div v-if=\"videoPlayerStore.mistDisplay === 'capabilities'\">\n                            <div class=\"mt-2 font-semibold\">CPU</div>\n                            <table>\n                                <tr v-for=\"(value, name) in videoPlayerStore.apiResponse.capabilities.cpu[0]\" :key=\"name\">\n                                    <td>{{name}}</td>\n                                    <td>{{value}}</td>\n                                </tr>\n                            </table>\n                            <div class=\"mt-2 font-semibold\">Load</div>\n                            <table>\n                                <tr v-for=\"(value, name) in videoPlayerStore.apiResponse.capabilities.load\" :key=\"name\">\n                                    <td>{{name}}</td>\n                                    <td>{{value}}</td>\n                                </tr>\n                            </table>\n                            <div class=\"mt-2 font-semibold\">Mem</div>\n                            <table>\n                                <tr v-for=\"(value, name) in videoPlayerStore.apiResponse.capabilities.mem\" :key=\"name\">\n                                    <td>{{name}}</td>\n                                    <td>{{value}}</td>\n                                </tr>\n                            </table>\n                        </div>\n\n                        <div v-if=\"videoPlayerStore.mistDisplay === 'totals'\">\n\n                            <table>\n                                <thead>\n                                <td>{{videoPlayerStore.apiResponse.totals.fields[0]}}</td>\n                                <td>{{videoPlayerStore.apiResponse.totals.fields[1]}}</td>\n                                <td>{{videoPlayerStore.apiResponse.totals.fields[2]}}</td>\n                                <td>{{videoPlayerStore.apiResponse.totals.fields[3]}}</td>\n                                <td>{{videoPlayerStore.apiResponse.totals.fields[4]}}</td>\n                                <td>{{videoPlayerStore.apiResponse.totals.fields[5]}}</td>\n                                <td>{{videoPlayerStore.apiResponse.totals.fields[6]}}</td>\n                                </thead>\n                                <tr v-for=\"total in videoPlayerStore.apiResponse.totals.data.slice().reverse()\" :key=\"total.item\">\n                                    <td>{{ total[0] }}</td>\n                                    <td>{{ total[1] }}</td>\n                                    <td>{{ total[2] }}</td>\n                                    <td>{{ total[3] }}</td>\n                                    <td>{{ total[4] }}</td>\n                                    <td>{{ total[5] }}</td>\n                                    <td>{{ total[6] }}</td>\n                                </tr>\n                            </table>\n                        </div>\n\n                        <div v-if=\"videoPlayerStore.mistDisplay === 'clients'\">\n\n                            <table>\n                                <thead>\n                                <td>{{videoPlayerStore.apiResponse.clients.fields[0]}}</td>\n                                <td>{{videoPlayerStore.apiResponse.clients.fields[1]}}</td>\n                                <td>{{videoPlayerStore.apiResponse.clients.fields[2]}}</td>\n                                <td>{{videoPlayerStore.apiResponse.clients.fields[3]}}</td>\n                                <td>{{videoPlayerStore.apiResponse.clients.fields[4]}}</td>\n                                <td>{{videoPlayerStore.apiResponse.clients.fields[5]}}</td>\n                                <td>{{videoPlayerStore.apiResponse.clients.fields[6]}}</td>\n                                <td>{{videoPlayerStore.apiResponse.clients.fields[7]}}</td>\n                                <td>{{videoPlayerStore.apiResponse.clients.fields[8]}}</td>\n                                <td>{{videoPlayerStore.apiResponse.clients.fields[9]}}</td>\n                                <td>{{videoPlayerStore.apiResponse.clients.fields[10]}}</td>\n                                <td>{{videoPlayerStore.apiResponse.clients.fields[11]}}</td>\n                                <td>{{videoPlayerStore.apiResponse.clients.fields[12]}}</td>\n                                <td>{{videoPlayerStore.apiResponse.clients.fields[13]}}</td>\n                                <td>time</td>\n                                </thead>\n                                <tr v-for=\"client in videoPlayerStore.apiResponse.clients.data\" :key=\"client.item\">\n                                    <td>{{ client[0] }}</td>\n                                    <td>{{ client[1] }}</td>\n                                    <td>{{ client[2] }}</td>\n                                    <td>{{ client[3] }}</td>\n                                    <td>{{ client[4] }}</td>\n                                    <td>{{ client[5] }}</td>\n                                    <td>{{ client[6] }}</td>\n                                    <td>{{ client[7] }}</td>\n                                    <td>{{ client[8] }}</td>\n                                    <td>{{ client[9] }}</td>\n                                    <td>{{ client[10] }}</td>\n                                    <td>{{ client[11] }}</td>\n                                    <td>{{ client[12] }}</td>\n                                    <td>{{ client[13] }}</td>\n                                    <td>{{ client[14] }}</td>\n                                </tr>\n                            </table>\n                        </div>\n\n                        <div v-if=\"videoPlayerStore.mistDisplay === 'active_streams'\">\n\n                            <table>\n                                <thead class=\"font-semibold mb-2\">\n                                <td>Stream Name</td>\n                                </thead>\n                                <tr v-for=\"stream in videoPlayerStore.apiResponse.active_streams\" :key=\"stream.item\">\n                                    <td>{{ stream }}</td>\n\n                                </tr>\n                            </table>\n                        </div>\n\n                        <div v-if=\"videoPlayerStore.mistDisplay === 'log'\">\n\n                            <table>\n                                <tr v-for=\"log in videoPlayerStore.apiResponse.log\" :key=\"log.item\">\n                                    <td>{{ log[0] }}</td>\n                                    <td>{{ log[1] }}</td>\n                                    <td>{{ log[2] }}</td>\n                                    <td>{{ log[3] }}</td>\n                                </tr>\n                            </table>\n                        </div>\n\n                        <div v-if=\"videoPlayerStore.mistDisplay === 'recordings'\">\n\n                            <table>\n                                <tr v-for=\"log in videoPlayerStore.apiResponse.log\" :key=\"log.item\">\n                                    <td>{{ log[0] }}</td>\n                                    <td>{{ log[1] }}</td>\n                                    <td>{{ log[2] }}</td>\n                                    <td>{{ log[3] }}</td>\n                                </tr>\n                            </table>\n                        </div>\n\n                        <!--                    Begin Push Form ... move this to its own component.           -->\n                        <div v-if=\"videoPlayerStore.mistDisplayPushForm\">\n                            <div class=\"font-semibold my-2\">Push a Stream:</div>\n                            <div class=\"\">\n                                <label for=\"streamName\" class=\"mb-1\">Choose stream:</label>\n                                <select\n                                    id=\"streamName\"\n                                    v-model=\"streamStore.streamName\"\n                                    class=\"w-full mb-2\" >\n                                    <option v-for=\"stream in videoPlayerStore.apiResponse.active_streams\" :key=\"stream\">\n                                        {{ stream }}\n                                    </option>\n                                </select>\n                                <label for=\"rtmpDestination\" class=\"mb-1\">Set destination:</label>\n                                <input type=\"text\"\n                                       id=\"rtmpDestination\"\n                                       v-model=\"streamStore.rtmpDestination\"\n                                       placeholder=\"RTMP destination...\"\n                                       class=\"w-full my-2\">\n                                <button @click.prevent=\"startPush\"\n                                        class=\"ml-2 py-2 px-4 text-white bg-green-800 hover:bg-green-500 rounded-xl\">\n                                    Push\n                                </button>\n                                <video src=\"https://streams.not.tv/vmixsource01%2bspring.mp4\" class=\"mt-20 w-96\" controls autoplay></video>\n                                <br>Preview video is hardcoded to \"vmixsource01+spring\"\n                            </div>\n                        </div>\n\n                    </div>\n\n\n                </div>\n\n            </div>\n\n        </div>\n    </div>\n\n</template>\n\n<script setup>\nimport { onMounted, ref, reactive, onBeforeMount } from \"vue\";\nimport { useVideoPlayerStore } from \"@/Stores/VideoPlayerStore.js\";\nimport {useStreamStore} from \"@/Stores/StreamStore\";\nimport {useUserStore} from \"@/Stores/UserStore\";\n\nlet videoPlayerStore = useVideoPlayerStore()\nlet streamStore = useStreamStore()\nlet userStore = useUserStore()\n\nvideoPlayerStore.apiActiveStreams = null\nvideoPlayerStore.mistStatus = false\n\nonBeforeMount(() => {\n    userStore.scrollToTopCounter = 0;\n})\n\nonMounted(() => {\n    videoPlayerStore.makeVideoTopRight()\n    if (userStore.scrollToTopCounter === 0 ) {\n        document.getElementById(\"topDiv\").scrollIntoView()\n        userStore.scrollToTopCounter ++;\n    }\n});\n\nlet props = defineProps({\n    apiReturn: Object,\n    message: ref(String),\n    mistNewHashedPassword: ref(String),\n});\n\nlet form = reactive({\n    challenge: videoPlayerStore.challenge,\n    status: videoPlayerStore.status,\n    username: '',\n    password: '',\n})\n\nvideoPlayerStore.mistUsername = 'nottvadmin';\nform.password = '20y$!PwX12S';\n\nconst password = ref('');\n\nlet md5 = require('md5');\n\n\n////////////////////  MIST SERVER ADDRESS //////////////////////////////\n// Keep this here to change which MistServer is used for testing purposes\n//\n// let mistAddress = 'http://localhost:4242/api'\n// let mistAddress = 'https://beta-staging.not.tv/mistserver/api'\nlet mistAddress = 'https://mist.not.tv/'\n// let mistAddress = 'http://10.124.0.3:4242/api'\n// let mistAddress = 'http://localhost:4242/api'\n// let mistAddress = 'http://mist.nottv.io:4242/api'\n// let mistAddressWs = 'ws://mist.nottv.io:4242/ws'\n//\n///////////////////////////////////////////////////////////////////////\n\n\n\nasync function getStatus() {\n    await axios.get(mistAddress)\n        .then(response => {\n            videoPlayerStore.apiRequest = response.data;\n            videoPlayerStore.challenge = videoPlayerStore.apiRequest.authorize.challenge;\n            videoPlayerStore.status = videoPlayerStore.apiRequest.authorize.status;\n        })\n        .catch(error => {\n            console.log(error);\n        })\n    console.log('get API');\n\n}\n\n// The Websocket connection will give us near real-time\n// info from the server.\n//\n// Create the header for the MistServer WS API Request\n// const mistWsHeader = {\n//     headers: {\n//         \"Authorization\": \"json \"+AuthenticationGoesHere,\n//     },\n// };\n\nasync function authenticateMistServer() {\n    let hashedPassword = md5(form.password)\n    console.log(\"Hashed password: \" + hashedPassword)\n    let authReturn = md5(hashedPassword+videoPlayerStore.challenge)\n    videoPlayerStore.mistPassword = authReturn\n    console.log(\"Final hashed password: \" + authReturn)\n    await axios.get(mistAddress+'?command=%7B%0A%22authorize%22%3A%20%7B%0A%22username%22%3A%20%22'+videoPlayerStore.mistUsername+'%22,%0A%22password%22%3A%20%22'+authReturn+'%22%0A%7D%0A%7D')\n        .then(response => {\n            videoPlayerStore.apiRequest = response.data\n            videoPlayerStore.challenge = videoPlayerStore.apiRequest.authorize.challenge\n            videoPlayerStore.status = videoPlayerStore.apiRequest.authorize.status\n            console.log(response.data);\n        })\n        .catch(error => {\n            console.log(error)\n        })\n    console.log('mistServer API authorization sent.');\n\n}\n\nlet checkUpdates = () => {\n    videoPlayerStore.mistDisplay = \"updates\"\n    let request = \"\\\"update\\\": true\"\n    getApi(request)\n}\n\nlet getCapabilities = () => {\n    videoPlayerStore.mistDisplay = \"capabilities\"\n    let request = \"%22capabilities%22%3A%20true\"\n    getApi(request)\n}\n\nlet getTotals = () => {\n    videoPlayerStore.mistDisplay = \"totals\"\n    let request = \"\\\"totals\\\": {}\"\n    getApi(request)\n}\n\nlet getActiveStreams = () => {\n    videoPlayerStore.mistDisplay = \"active_streams\"\n    let request = \"\\\"active_streams\\\": true\"\n    getApi(request)\n}\n\nlet getClients = () => {\n    videoPlayerStore.mistDisplay = \"clients\"\n        // This request delivers information about each client connected\n        // to a specific stream name.\n        //\n    // let request = \"\\\"clients\\\": [{\\\"streams\\\": [\\\"vmixsource03\\\"],},{}]}\"\n\n    // This request delivers all clients\n    let request = \"\\\"clients\\\": {}\"\n    getApi(request)\n}\n\nlet getLog = () => {\n    videoPlayerStore.mistDisplay = \"log\"\n    let request = \"\\\"log\\\": {}\"\n    getApi(request)\n}\n\nlet clearLog = () => {\n    videoPlayerStore.mistDisplay = \"log\"\n    let request = \"\\\"clearstatlog\\\": true\"\n    getApi(request)\n}\n\nlet browseRecordings = () => {\n    videoPlayerStore.mistDisplay = \"recordings\"\n    let request = \"\\\"path\\\": \\\"/media/upload\\\"\"\n    getApi(request)\n}\n\nasync function getApi(request) {\n    videoPlayerStore.mistStatus = true\n    videoPlayerStore.mistDisplayPushForm = false\n    // let apiRequest = '%7B%20%22authorize%22%3A%20%7B%0A%20%20%20%20%22username%22%3A%20%22'+videoPlayer.mistUsername+'%22,%0A%20%20%20%20%22password%22%3A%20%22'+videoPlayer.mistPassword+'%22%0A%20%20%20%7D,%0A%20'+request+'%0A%7D'\n    let apiRequest = '%7B%20%22authorize%22%3A%20%7B%0A%20%20%20%20%22username%22%3A%20%22'+videoPlayerStore.mistUsername+'%22,%0A%20%20%20%20%22password%22%3A%20%22'+videoPlayerStore.mistPassword+'%22%0A%20%20%20%7D,%0A%20'+request+'%0A%0A%7D'\n        await axios.get(mistAddress+'?command='+apiRequest)\n            .then(response => {\n                videoPlayerStore.apiResponse = response.data;\n                videoPlayerStore.challenge = videoPlayerStore.apiResponse.authorize.challenge;\n                videoPlayerStore.status = videoPlayerStore.apiResponse.authorize.status;\n            })\n            .catch(error => {\n                console.log(error);\n            })\n    console.log('mistServer API request sent.');\n}\n\nasync function getApiLocal(request) {\n    videoPlayerStore.mistStatus = true\n    videoPlayerStore.mistDisplayPushForm = false\n    // let apiRequest = '%7B%20%22authorize%22%3A%20%7B%0A%20%20%20%20%22username%22%3A%20%22'+videoPlayer.mistUsername+'%22,%0A%20%20%20%20%22password%22%3A%20%22'+videoPlayer.mistPassword+'%22%0A%20%20%20%7D,%0A%20'+request+'%0A%7D'\n    // let apiRequest = '%7B%20%22authorize%22%3A%20%7B%0A%20%20%20%20%22username%22%3A%20%22'+videoPlayer.mistUsername+'%22,%0A%20%20%20%20%22password%22%3A%20%22'+videoPlayer.mistPassword+'%22%0A%20%20%20%7D,%0A%20'+request+'%0A%0A%7D'\n    await axios.get(mistAddress+'?command='+request)\n        .then(response => {\n            videoPlayerStore.apiResponse = response.data;\n            videoPlayerStore.challenge = videoPlayerStore.apiResponse.authorize.challenge;\n            videoPlayerStore.status = videoPlayerStore.apiResponse.authorize.status;\n        })\n        .catch(error => {\n            console.log(error);\n        })\n    console.log('mistServer API request sent.');\n}\n\n// Create method to push a stream somewhere\n//\n\nvideoPlayerStore.mistStatus = true\nvideoPlayerStore.mistDisplayPushForm = false\nfunction displayPushForm() {\n    getActiveStreams()\n    videoPlayerStore.mistStatus = false\n    videoPlayerStore.mistDisplayPushForm = true\n}\n\nfunction startPush() {\n    // api call to mist server.\n    // \"push_start\":[\"STREAMNAME\", \"URI\"]\n    // let request = \"\\\"push_start\\\":[\\\"\"+streamStore.streamName+\", \\\"\"+streamStore.rtmpDestination+\"\\\"]\"\n    let request = '%7B%20%22push_start%22%3A%20%7B%22stream%22%3A%22'+streamStore.streamName+'%22,%22target%22%3A%22'+streamStore.rtmpDestination+'%22%7D%7D'\n    // setTimeout(() => {  getApi(request); console.log(\"World!\"); }, 2000);\n    getApi(request)\n    videoPlayerStore.mistStatus = false\n    videoPlayerStore.mistDisplayPushForm = true\n    // log output\n    console.log(\"stream push started: \" + request)\n}\n\nfunction addStream() {\n    console.log(\"adding new stream\")\n    // api call to mist server.\n    let request = \"%7B%22addstream%22%3A%7B%22streamname%22%3A%7B%22source%22%3A%22push%3A%2F%2F%22%7D%7D%7D\"\n    getApi(request)\n    videoPlayerStore.mistStatus = true\n    videoPlayerStore.mistDisplayPushForm = false\n    // log output\n    console.log(\"stream added: \" + request)\n}\n\n\n// let setMistHashedPassword = () => {\n//     if (props.message) {\n//         props.mistNewHashedPassword = md5(props.message);\n//     }\n// }\n//\n// setMistHashedPassword();\n\n\n\n/////////////// EXAMPLES OF MISTSERVER API CALLS ///////////////\n//\n// Keep these here. The MistServer API Call needs to be Url Encoded.\n//\n// This is a properly formatted HTTP API call to the MistServer:\n//\n// {\n//     \"addstream\": {\n//     \"streamname_here\": {},\n// }\n// }\n\n// { \"authorize\": {\n//     \"username\": \"USERNAME\",\n//     \"password\": \"PASSWORD\"\n//     }\n// },\n// { \"minimal\": 1 },\n// { \"active_streams\": true }\n//\n// https://beta-staging.not.tv/mistserver/api?command=%7B%20%22authorize%22%3A%20%7B%0A%20%20%20%20%22username%22%3A%20%22USERNAME%22,%0A%20%20%20%20%22password%22%3A%20%22PASSWORD%22%0A%20%20%20%20%7D%0A%7D,%0A%7B%20%22minimal%22%3A%201%20%7D,%0A%7B%20%22active_streams%22%3A%20true%20%7D\n// https://beta-staging.not.tv/mistserver/api?command=%7B%20%22authorize%22%3A%20%7B%0A%20%20%20%20%22username%22%3A%20%22USERNAME%22,%0A%20%20%20%20%22password%22%3A%20%22PASSWORD%22%0A%20%20%20%20%7D,%0A%7B%20%22minimal%22%3A%201%20%7D,%0A%7B%20%22active_streams%22%3A%20true%20%7D%0A%7D\n\n//\n///////////////////////////////////////////////////////////////\n\n\n\n\n\n\n\n\n// {\n//     \"authorize\":\n//     {\n// //Username to login as\n//         \"username\":\n//         \"test\",\n// //Hash of password to login with. Send empty value when no challenge for the hash is known yet.\n// //When the challenge is known, the value to be used here can be calculated as follows:\n// // MD5( MD5(\"secret\") + challenge)\n// //Where \"secret\" is the plaintext password.\n//             \"password\": \"\"\n//     }\n// }\n\n\n// tec21: this returns the pattern that mistServer is apparently looking for.\n// let submit = () => {\n//     console.log(form.response);\n//     Inertia.post(route('mistApi', {authorization: {challenge: videoPlayer.challenge, status: videoPlayer.status}}));\n// }\n\n// tec21: this works... it returns $request->challenge and $request->status to Laravel\n// let submit = () => {\n//     console.log('sent to backend');\n//     Inertia.post(route('mistApi', {challenge: videoPlayer.challenge, status: videoPlayer.status}));\n// }\n\n\n\n\n</script>\n\n\n"],"names":["videoPlayerStore","useVideoPlayerStore","streamStore","useStreamStore","userStore","useUserStore","apiActiveStreams","mistStatus","onBeforeMount","scrollToTopCounter","onMounted","makeVideoTopRight","document","getElementById","scrollIntoView","form","reactive","challenge","status","username","password","mistUsername","ref","md5","require","mistAddress","getStatus","axios","get","then","response","apiRequest","data","authorize","error","console","log","authenticateMistServer","hashedPassword","authReturn","mistPassword","checkUpdates","mistDisplay","getApi","getCapabilities","getTotals","getActiveStreams","getClients","getLog","clearLog","browseRecordings","request","mistDisplayPushForm","apiResponse","displayPushForm","startPush","streamName","rtmpDestination","addStream"],"sourceRoot":""}