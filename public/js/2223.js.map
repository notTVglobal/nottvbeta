{"version":3,"file":"js/2223.js","mappings":";kLAMO,SAASA,EAAaC,GACzB,IAAMC,GAAYC,EAAAA,EAAAA,gBACZC,GAAkBC,EAAAA,EAAAA,sBAClBC,GAAmBC,EAAAA,EAAAA,uBAEzBH,EAAgBI,YAAcP,EAC9BG,EAAgBK,kBAAmB,EACnCL,EAAgBM,cAAe,EAG3BR,EAAUS,UAAYC,OAAOC,WAAa,MAEnCT,EAAgBU,SADvBV,EAAgBW,IAAM,GAIM,IAAxBX,EAAgBW,MAChBX,EAAgBW,IAAM,GAG1BX,EAAgBY,gBAAiB,GAGrCV,EAAiBW,oBAEbb,EAAgBc,aAChBd,EAAgBc,YAAa,EAC7Bd,EAAgBe,iBAAkB,EAClCP,OAAOQ,SAASC,UAWhBC,EAAAA,GAAOC,GAAG,YAAY,SAACC,GAEftB,EAAUS,UAAYC,OAAOC,WAAa,MAAQT,EAAgBU,SAClEV,EAAgBW,IAAM,EAEM,IAAxBX,EAAgBW,MAChBX,EAAgBW,IAAM,GAIqB,KAA3BH,OAAOQ,SAASK,SAChBrB,EAAgBsB,mBACpCC,uBAAsB,WAClB,IAAMC,EAASC,SAASC,eAAe,UACnCF,EACAA,EAAOG,eAAe,CAACC,SAAU,SAEjCpB,OAAOqB,SAAS,EAAG,EAE3B,IAEJ7B,EAAgBsB,mBAAoB,CACxC,IAEJtB,EAAgB8B,aAChB9B,EAAgBY,gBAAiB,EACjCZ,EAAgB+B,UAAW,GAI3BC,EAAAA,EAAAA,QACI,kBAAMhC,EAAgBiC,aAAa,IACnC,SAACC,GAEOlC,EAAgBW,IADhBuB,EACsB,EAEA,CAE9B,GACA,CAAEC,WAAW,GAGrB,w/RCjFA,iFCqEAvC,EAAAA,EAAAA,GAAa,mCAEb,IAAME,GAAYC,EAAAA,EAAAA,gBACZC,GAAkBC,EAAAA,EAAAA,sBAEpBmC,EAAQC,GAIZC,EAAAA,EAAAA,WAASC,EAAAC,IAAAC,MAAC,SAAAC,IAAA,OAAAF,IAAAG,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACJV,EAAMW,mBACRjD,EAAUkD,KAAKC,cAAe,GAEhC/B,EAAAA,GAAOD,SAAQ,wBAAA2B,EAAAM,OAAA,GAAAR,EAAA,MAIjB,IAAOS,GAASC,EAAAA,EAAAA,sBAATD,MAGPA,EAAME,UAAUC,QAGhBC,YAAW,WACTJ,EAAME,UAAUH,MAClB,GAAG,KAEH,IAAIM,GAAyBC,EAAAA,EAAAA,MAAI,GAE3BC,EAAkB,WACtB1D,EAAgB2D,UAAU,GAC1BH,EAAuBI,OAAQ,CACjC","sources":["webpack://nottvbeta/./resources/js/Utilities/PageSetup.js","webpack://nottvbeta/./resources/js/Pages/Shop/SubscriptionSuccess.vue?9d97","webpack://nottvbeta/./resources/js/Pages/Shop/SubscriptionSuccess.vue"],"sourcesContent":["import { onBeforeMount, onMounted, watch } from 'vue'\nimport { useUserStore } from \"@/Stores/UserStore\"\nimport { useAppSettingStore } from \"@/Stores/AppSettingStore\"\nimport { useVideoPlayerStore } from \"@/Stores/VideoPlayerStore\"\nimport { router } from '@inertiajs/vue3'\n\nexport function usePageSetup(pageName) {\n    const userStore = useUserStore()\n    const appSettingStore = useAppSettingStore()\n    const videoPlayerStore = useVideoPlayerStore()\n\n    appSettingStore.currentPage = pageName\n    appSettingStore.showFlashMessage = true\n    appSettingStore.pageIsHidden = false\n\n// PageSetup utility\n    if (userStore.isMobile || window.innerWidth < 1024) {\n        appSettingStore.ott = 0; // Close all panels on mobile devices\n    } else if (appSettingStore.fullPage) {\n        appSettingStore.ott = 0; // Default to closed in fullPage mode\n    } else {\n        if (appSettingStore.ott === 0) {\n            appSettingStore.ott = 4\n        }\n        // appSettingStore.ott = 4; // Open OttChat by default on larger screens\n        appSettingStore.showOttButtons = true;\n    }\n\n    videoPlayerStore.makeVideoTopRight()\n\n    if (appSettingStore.pageReload) {\n        appSettingStore.pageReload = false\n        appSettingStore.pageWasReloaded = true\n        window.location.reload();\n    }\n    // Check if the URL contains query strings\n\n\n    // Only scroll into view if there are no query strings\n\n        // const topDiv = document.getElementById(\"topDiv\")\n        // if (topDiv) {\n        //     topDiv.scrollIntoView()\n        // }\n        router.on('navigate', (event) => {\n            // Ensure OTT panels do not open automatically on mobile devices\n            if (userStore.isMobile || window.innerWidth < 1024 || appSettingStore.fullPage) {\n                appSettingStore.ott = 0; // Close all panels on mobile devices\n            } else {\n                if (appSettingStore.ott === 0) {\n                    appSettingStore.ott = 4\n                }\n                // appSettingStore.ott = 0; // Default to closed on larger screens\n            }\n            const hasQueryStrings = window.location.search !== '';\n            if (!hasQueryStrings || appSettingStore.shouldScrollToTop) {\n                requestAnimationFrame(() => {\n                    const topDiv = document.getElementById(\"topDiv\");\n                    if (topDiv) {\n                        topDiv.scrollIntoView({behavior: 'auto'});\n                    } else {\n                        window.scrollTo(0, 0);\n                    }\n                });\n            }\n            appSettingStore.shouldScrollToTop = false;\n        })\n    // Only update if we're not already on this page to avoid overwriting with the current URL\n    appSettingStore.setPrevUrl()\n    appSettingStore.showOttButtons = true\n    appSettingStore.noLayout = false\n\n    // router.reload()\n\n    watch(\n        () => appSettingStore.isSmallScreen,\n        (newValue) => {\n            if (newValue) {\n                appSettingStore.ott = 0;\n            } else {\n                appSettingStore.ott = 4;\n            }\n        },\n        { immediate: true } // This option ensures the watch executes immediately with the current value\n    );\n\n}\n","import script from \"./SubscriptionSuccess.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./SubscriptionSuccess.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n  <div class=\"place-self-center flex flex-col gap-y-3\">\n    <div id=\"topDiv\" class=\"bg-white text-black dark:bg-gray-800 dark:text-gray-50 p-5 min-h-screen\">\n<!--      <div class=\"flex flex-col w-full text-center justify-center mt-10\">-->\n<!--        <img-->\n<!--            src=\"https://cdn.nottv.io/public/2023/09/images/pTJbtM0IeHCV1qzSFNeJD7H2mogeYM7MSzCCo1m0.png\"-->\n<!--            alt=\"celebration emoji\"-->\n<!--            class=\"w-20\">-->\n\n<!--        <div class=\"text-4xl pl-10 pt-5\">You are now a premium subscriber!</div>-->\n\n<!--      </div>-->\n\n      <div class=\"flex flex-col items-center justify-center mt-10\">\n        <!-- Consider using a custom SVG or an image that reflects your brand's theme instead of a generic emoji -->\n        <img src=\"https://cdn.nottv.io/public/2023/09/images/pTJbtM0IeHCV1qzSFNeJD7H2mogeYM7MSzCCo1m0.png\" alt=\"Celebration\" class=\"w-32 h-32 md:w-40 md:h-40\"> <!-- Adjust the sizes as needed -->\n\n        <!-- Use your brand colors and potentially a custom font here -->\n        <h2 class=\"text-4xl font-bold text-yourBrandPrimaryColor mt-5\">You're now a Premium Contributor!</h2>\n\n        <!-- Customize this message to sound more like your brand's voice -->\n        <p class=\"mt-6 text-lg md:text-xl max-w-2xl mx-auto text-center\">\n          A huge thank you for supporting independent media and the free press. Your subscription powers our mission to connect communities with creative and inspiring content.\n        </p>\n\n        <p class=\"mt-4\">\n          We deeply value your support. If you have any questions or feedback, donâ€™t hesitate to reach out at\n          <a href=\"mailto:cathy@not.tv\" class=\"font-medium text-blue-600 hover:text-blue-400 transition duration-300\">cathy@not.tv</a>.\n        </p>\n\n        <!-- Adding a button or link to guide the user on what to do next could be beneficial -->\n        <p class=\"mt-6\">\n          Dive into your Premium experience now! If you don't see the premium features, a quick <span class=\"font-medium text-yourBrandSecondaryColor\">refresh</span> of your browser page should do the trick.\n        </p>\n\n        <!-- Consider adding a button for users to explore premium content or return to the homepage -->\n        <button @click=\"openChannelsOtt\" class=\"mt-6 inline-block bg-blue-600 text-white font-bold py-2 px-4 rounded hover:bg-blue-400 transition duration-300\">\n          Explore Premium Content ðŸŒŸ\n        </button>\n        <div v-if=\"exploreChannelsDisplay\" class=\"mt-4 p-4 bg-blue-100 text-blue-800 rounded-lg\">\n          <h2>Our premium features include:</h2>\n          <p class=\"flex items-center justify-start gap-2 font-semibold\">\n            <span class=\"text-2xl\">ðŸ“º</span>\n            CHANNELS: Change channels from the green\n            <span class=\"underline\">Channels Menu\n              <span v-if=\"userStore.isMobile\">^^^</span>\n              <span v-if=\"!userStore.isMobile\">&gt;&gt;&gt;</span>\n              </span></p>\n          <p class=\"flex items-center justify-start gap-2 font-semibold\"><span class=\"text-2xl\">ðŸŽ¬</span> MOVIES: Check out <button @click.prevent=\"appSettingStore.btnRedirect('/movies')\" class=\"underline text-blue-800 hover:text-blue-600 transition duration-300\">movies</button> from the main menu.</p>\n          <p class=\"mt-4 flex items-center justify-start gap-2 font-semibold\"><span class=\"text-2xl\">ðŸ”œ</span> PLAYLISTS: Our playlists feature and other features are coming soon... you'll be the first to know when they're ready!</p>\n        </div>\n        <img src=\"/storage/images/Ping.png\" alt=\"notTV Ping\" class=\"w-fit mt-4\">\n      </div>\n\n\n</div>\n\n      <!--      <div class=\"text-center w-full mt-6 pt-3\">Thank you for supporting independent media and free press.<br>-->\n<!--        <span class=\"pt-2\">We value your subscription, if you have any questions or comments,</span><br>-->\n<!--        Please email <a href=\"mailto:cathy@not.tv\" class=\"text-blue-600 hover:text-blue-500\">cathy@not.tv</a></div>-->\n<!--      <div class=\"text-center w-full mt-6 pt-3\">If you don't see the premium features you may need to refresh your-->\n<!--        browser page.-->\n<!--      </div>-->\n<!--    </div>-->\n  </div>\n</template>\n\n<script setup>\nimport { router } from '@inertiajs/vue3'\nimport { onMounted, ref, getCurrentInstance } from 'vue'\nimport { usePageSetup } from '@/Utilities/PageSetup'\nimport { useUserStore } from \"@/Stores/UserStore\"\nimport { useAppSettingStore } from \"@/Stores/AppSettingStore\"\n\nusePageSetup('contribute/subscription_success')\n\nconst userStore = useUserStore()\nconst appSettingStore = useAppSettingStore()\n\nlet props = defineProps({\n  userIsSubscriber: null\n})\n\nonMounted(async () => {\n  if (props.userIsSubscriber) {\n    userStore.user.isSubscriber = true\n  }\n  router.reload()\n});\n\n// Access the global properties\nconst {proxy} = getCurrentInstance()\n\n// Start the confetti\nproxy.$confetti.start();\n\n// Stop the confetti after 5 seconds\nsetTimeout(() => {\n  proxy.$confetti.stop(); // Replace `stop` with the actual method name to stop the confetti\n}, 5000); // 5000 milliseconds = 5 seconds\n\nlet exploreChannelsDisplay = ref(false)\n\nconst openChannelsOtt = () => {\n  appSettingStore.toggleOtt(2)\n  exploreChannelsDisplay.value = true\n}\n\n</script>\n"],"names":["usePageSetup","pageName","userStore","useUserStore","appSettingStore","useAppSettingStore","videoPlayerStore","useVideoPlayerStore","currentPage","showFlashMessage","pageIsHidden","isMobile","window","innerWidth","fullPage","ott","showOttButtons","makeVideoTopRight","pageReload","pageWasReloaded","location","reload","router","on","event","search","shouldScrollToTop","requestAnimationFrame","topDiv","document","getElementById","scrollIntoView","behavior","scrollTo","setPrevUrl","noLayout","watch","isSmallScreen","newValue","immediate","props","__props","onMounted","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","userIsSubscriber","user","isSubscriber","stop","proxy","getCurrentInstance","$confetti","start","setTimeout","exploreChannelsDisplay","ref","openChannelsOtt","toggleOtt","value"],"sourceRoot":""}