{"version":3,"file":"js/1355.js","mappings":"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","sources":["webpack:///./resources/js/Stores/GoLiveStore.js","webpack:///./resources/js/Stores/VideoAuxPlayerStore.js","webpack:///./resources/js/Utilities/PageSetup.js","webpack:///./resources/js/Components/Global/MistStreams/RecursivePropertyList.vue","webpack:///./resources/js/Components/Global/Buttons/CancelButton.vue?b7c6","webpack:///./resources/js/Components/Global/Buttons/CancelButton.vue","webpack:///./resources/js/Components/Global/Modals/Messages.vue?dfe9","webpack:///./resources/js/Components/Global/Modals/Messages.vue","webpack:///./resources/js/Components/Global/Modals/PopUpModal.vue","webpack:///./resources/js/Components/Global/VideoPlayer/VideoJs/VideoJsAux.vue?cfd4","webpack:///./resources/js/Components/Global/VideoPlayer/VideoJs/VideoJsAux.vue","webpack:///./resources/js/Components/Pages/ShowEpisodes/Elements/ManageShowEpisodeNoticeModals.vue","webpack:///./resources/js/Components/Global/MistStreams/RecursivePropertyList.vue?bd51","webpack:///./resources/js/Components/Global/GoLive/GoLive.vue?3856","webpack:///./resources/js/Components/Global/GoLive/GoLive.vue","webpack:///./resources/js/Pages/GoLive.vue?e1d2","webpack:///./resources/js/Pages/GoLive.vue"],"sourcesContent":["import { defineStore } from \"pinia\";\n\nconst initialState = () => ({\n    preSelectedShowId: null,\n    selectedShowId: null,\n    selectedShow: null,\n    shows: [], // Assuming you might want to store shows here too\n    streamKey: '', // Optional: Store the generated stream key if needed\n    isLive: false,\n    streamInfo: null,\n})\n\nexport const useGoLiveStore = defineStore('goLiveStore', {\n    state: initialState,\n    actions: {\n        reset() {\n            // Reset the store to its original state (clear all data)\n            Object.assign(this, initialState());\n        },\n        async fetchShows() {\n            try {\n                const response = await axios.get('/go-live/shows'); // Adjust the URL as needed\n                this.shows = response.data;\n            } catch (error) {\n                console.error('Failed to fetch shows:', error);\n                // Handle error appropriately\n            }\n        },\n        async generateStreamKey() {\n            if (!this.selectedShowId) {\n                console.error(\"No show selected\");\n                return; // Exit the function if no show is selected\n            }\n\n            try {\n                const response = await axios.post(`/go-live/shows/${this.selectedShowId}/stream-key`);\n                console.log(\"Stream key generated:\", response.data);\n                this.streamKey = response.data.streamKey; // Assuming the response includes the stream key\n            } catch (error) {\n                console.error(\"Error generating stream key:\", error.response ? error.response.data : error);\n            }\n        },\n        // setPreSelectedShowId(id) {\n        //     this.preSelectedShowId = id;\n        //     console.log('preSelectedShowId updated to:', this.preSelectedShowId);\n        // },\n        // Action to update selectedShowId and selectedShow based on selectedShowId\n        setSelectedShowId(showId) {\n            this.selectedShowId = showId;\n            this.updateSelectedShow(); // Call the method to update selectedShow based on new selectedShowId\n        },\n        // Method to find and update selectedShow based on selectedShowId\n        updateSelectedShow() {\n            this.selectedShow = this.shows.find(show => show.id === this.selectedShowId) || null;\n        },\n        goLive() {\n          this.isLive = true\n        },\n        stopLive() {\n            this.isLive = false\n        },\n        async fetchStreamInfo(streamName) {\n            const encodedStreamName = encodeURIComponent(streamName);\n            try {\n                const response = await fetch(`http://mist.nottv.io:8080/json_${encodedStreamName}.js`); // Replace with your URL\n                if (!response.ok) throw new Error('Failed to fetch');\n                const data = await response.json();\n                this.streamInfo = data; // Store the data in serverInfo\n            } catch (error) {\n                console.error('Error fetching server info:', error);\n            }\n        },\n        clearStreamInfo() {\n            this.streamInfo = null\n        },\n    },\n    getters: {\n        selectedShow: (state) => {\n            return state.shows.find(show => show.id === state.selectedShowId) || null;\n        }\n    },\n\n})\n","import { defineStore } from 'pinia'\nimport { useAppSettingStore } from '@/Stores/AppSettingStore'\nimport { useStreamStore } from '@/Stores/StreamStore'\nimport { useUserStore } from '@/Stores/UserStore'\nimport { useChannelStore } from '@/Stores/ChannelStore'\nimport { useShowStore } from '@/Stores/ShowStore'\nimport { useAudioStore } from '@/Stores/AudioStore'\nimport videojs from 'video.js'\nimport { usePage } from '@inertiajs/inertia-vue3'\nimport { nextTick } from 'vue'\nimport { useNotificationStore } from '@/Stores/NotificationStore'\n\nconst initialState = () => ({\n    mistServerUri: 'https://mist.nottv.io/', // tec21: 2024-02-09, if we don't start with the address here changing channels is really slow and buggy. Address for the MistServer listed in the Admin Settings saved in AppSetting\n    player: null, // Video.js player instance\n    eventListenersAttached: false, // Track if listeners are attached\n    videoPlayerLoaded: false,\n    class: '',\n    videoContainerClass: '',\n    // ottClass: 'OttClose',\n    videoSourceIdSrc1: '',\n    videoSourceIdSrc2: '',\n    videoSourceIdSrc3: '',\n    videoSourceTypeSrc1: '',\n    videoSourceTypeSrc2: '',\n    videoSourceTypeSrc3: '',\n    firstPlayVideoSourceType: '',\n    firstPlayVideoSource: '',\n    key: '',\n    videoName: '',\n    videoSource: '',\n    videoSourceType: '',\n    videoPoster: '',\n    nextSource: '',\n    previousSource: '',\n    currentView: '',\n    currentChannelId: 0,\n    currentChannelName: '',\n    currentShow: {},\n    currentShowEpisode: {},\n    currentVideo: {},\n    hasVideo: false,\n    controls: true,\n    muted: true,\n    paused: true,\n    // videoCurrentTime: '',\n    currentTime: 0, // Current playback time in seconds\n    duration: 0, // Total video duration in seconds\n    formattedTime: '00:00 / 00:00', // Formatted time string\n    blue: false, // DO NOT REMOVE\n    videoIsYoutube: false,\n    videoUploadComplete: false,\n})\n\nexport const useVideoAuxPlayerStore = defineStore('videoAuxPlayerStore', {\n    state: initialState,\n    actions: {\n        reset() {\n            // Reset the store to its original state (clear all data)\n            Object.assign(this, initialState())\n        },\n\n        async getMistServerUri() {\n            try {\n                let response = await axios.get('/mist-server/uri')\n                this.mistServerUri = response.data\n            } catch (error) {\n                console.error(error)\n            }\n        },\n\n        // Initialize or update the player instance\n        setPlayer(playerInstance) {\n            this.player = playerInstance\n            this.initializePlayer().then(() => {\n                this.attachEventListeners() // Attach event listeners after initialization\n            }).catch(error => {\n                console.error('Error during video player initialization:', error)\n            })\n        },\n\n        // Initialize the player with necessary settings and start playback\n        async initializePlayer() {\n            if (!this.player) {\n                console.error('Video.js player is not initialized.')\n                return\n            }\n\n            await nextTick() // Ensure Vue's DOM updates are processed\n\n            // Perform any necessary audio context and node setup\n            await useAudioStore().ensureAudioContextAndNodesReady(this.player)\n\n            // Apply initial player settings\n            this.player.controls(false)\n            this.player.muted(this.muted)\n\n            // Attempt to start playback\n            this.player.ready(() => {\n                this.player.play().then(() => {\n                    console.log('Playback started successfully')\n                }).catch(error => {\n                    console.error('Error trying to play the video:', error)\n                    // Handle the error (e.g., showing a user-friendly message)\n                })\n            })\n        },\n\n        // Attach event listeners to the player\n        attachEventListeners() {\n            if (!this.player || this.eventListenersAttached) {\n                console.log('Event listeners are already attached or video player is not initialized.')\n                return\n            }\n\n            this.player.on('timeupdate', this.handleTimeUpdate)\n            this.player.on('fullscreenchange', this.handleFullscreenChange)\n            this.player.on('play', this.handlePlay)\n            this.player.on('pause', this.handlePause)\n            this.player.on('error', this.handleError)\n\n            this.eventListenersAttached = true\n            console.log('Event listeners attached.')\n        },\n\n        // Detach event listeners from the player\n        detachEventListeners() {\n            if (!this.player || !this.eventListenersAttached) {\n                console.log('Event listeners are already detached or video player is not initialized.')\n                return\n            }\n\n            useAudioStore().stopAudioLevelMonitoring()\n            this.player.off('timeupdate', this.handleTimeUpdate)\n            this.player.off('fullscreenchange', this.handleFullscreenChange)\n            this.player.off('play', this.handlePlay)\n            this.player.off('pause', this.handlePause)\n            this.player.off('error', this.handleError)\n\n            this.eventListenersAttached = false\n            console.log('Event listeners detached.')\n        },\n\n        // Dispose of the player and perform cleanup\n        disposePlayer() {\n            if (!this.player) {\n                console.error('Video player is not initialized.')\n                return\n            }\n\n            this.detachEventListeners() // Detach event listeners if attached\n            this.player.dispose() // Dispose of the player instance\n            this.player = null // Reset the player state\n\n            // Optionally, stop audio level monitoring if linked to the player lifecycle\n            // const audioStore = useAudioStore();\n            // audioStore.stopAudioLevelMonitoring();\n\n            console.log('Video player disposed and cleaned up.')\n        },\n\n        // New method to prepare for a new video source\n        prepareForNewVideoSource(source) {\n            console.log('Preparing for new video source')\n\n            // Example: Clear any existing channel or video-specific state\n            useChannelStore().clearChannel()\n\n            // Reset or cleanup any existing video playback, if necessary\n            // this.resetPlayback();\n\n            // Load and play the new video source\n            this.loadNewVideo(source)\n        },\n\n        resetPlayback() {\n            if (this.player) {\n                this.player.pause()\n                this.player.muted(true)\n                this.player.currentTime(0) // Optionally reset the time\n                // Further cleanup logic here, if necessary\n                this.detachEventListeners() // Detach event listeners if attached\n            }\n        },\n\n        // Event handlers\n        handleTimeUpdate() {\n            // console.log('Handling timeupdate...');\n            // Implement your logic\n            this.currentTime = this.player.currentTime()\n            this.duration = this.player.duration()\n            const progressPercentage = (this.currentTime / this.duration) * 100\n            this.formattedTime = `${this.formatDuration(this.currentTime)} / ${this.formatDuration(this.duration)}`\n\n            // Update UI elements or emit events as needed\n            // Note: Direct manipulation of the DOM or component refs from the store is not recommended\n\n        },\n        // for the handleTimeUpdate eventHandler\n        formatDuration(durationInSeconds) {\n            const hours = Math.floor(durationInSeconds / 3600)\n            const minutes = Math.floor((durationInSeconds % 3600) / 60)\n            const seconds = Math.floor(durationInSeconds % 60)\n\n            const parts = [hours, minutes, seconds].map(part => part.toString().padStart(2, '0'))\n            return parts.join(':')\n        },\n        handleFullscreenChange() {\n            console.log('Handling fullscreenchange...')\n            // Implement your logic\n            this.player?.on('fullscreenchange', () => {\n                if (this.player.isFullscreen()) {\n                    // Video is entering fullscreen mode\n                    // You can add custom behavior for entering fullscreen here if needed\n                } else {\n                    // Video is exiting fullscreen mode\n                    // Check if the video was playing before entering fullscreen\n                    if (this.player.paused() === false) {\n                        // Resume playback after exiting fullscreen\n                        this.player.play()\n                    }\n                }\n            })\n        },\n        handlePlay() {\n            console.log('Handling play...')\n            // Implement your logic\n            this.player?.on('play', () => {\n                this.paused = false\n            })\n        },\n        handlePause() {\n            console.log('Handling pause...')\n            // Implement your logic\n            this.player?.on('pause', () => {\n                this.paused = true\n            })\n        },\n        handleError() {\n            console.log('Handling error...')\n            // Implement your logic\n            this.player?.on('error', function () {\n                const error = this.player.error()\n                console.error('Video.js Error:', error.code, error.message)\n            })\n        },\n        makeBlue() {\n            // for testing. DO NOT REMOVE.\n            this.blue = true\n        },\n        // Apparently this loadFirstPlay isn't being used...\n        // loadFirstPlay() {\n        //     const {props} = usePage()\n        //     let videoJs = videojs('aux-player')\n        //     const type = props.firstPlayVideoSourceType\n        //     const src = props.firstPlayVideoSource\n        //     videoJs.ready(() => {\n        //         videoJs.src({src, type})\n        //         videoJs.play().then(() => {\n        //             console.log('Playback started successfully')\n        //         }).catch(error => {\n        //             console.error('Error trying to play the video:', error)\n        //             // Handle the error (e.g., showing a user-friendly message)\n        //         })\n        //     })\n        //     console.log(type)\n        //     console.log(src)\n        // },\n        // Toggle mute state\n        toggleMute() {\n            if (this.muted) {\n                this.unMute()\n            } else {\n                this.mute()\n            }\n        },\n        // Mute the video\n        mute() {\n            if (this.player) {\n                this.player.muted(true)\n                this.muted = true\n                console.log('Video muted')\n            }\n        },\n        // Unmute the video\n        unMute() {\n            // const audioStore = useAudioStore()\n\n            if (this.player) {\n                // Prepare audio setup for when it's unmuted\n                // audioStore.userInteractionForAudio()\n\n                // Optionally, if fadeInAudioFromMuted is a gradual process,\n                // ensure this.player.muted(false) is called within that function.\n                // audioStore.fadeInAudioFromMuted()\n\n                this.player.muted(false)\n                this.muted = false\n                console.log('Video muted')\n            }\n        },\n        togglePlay() {\n            let videoJs = videojs('aux-player')\n\n            if (this.paused) {\n                videoJs.play()\n            } else {\n                videoJs.pause()\n            }\n        },\n        load() {\n            let videoJs = videojs('aux-player')\n            videoJs.load()\n        },\n        loadNewLiveSource(source, sourceType) {\n            let videoJs = videojs('aux-player')\n            let fullSourceUrl = this.mistServerUri + '/hls/' + source + '/index.m3u8'\n            videoJs.src({'src': fullSourceUrl, 'type': sourceType});\n            videoJs.play()\n        },\n        pause() {\n            let videoJs = videojs('aux-player')\n            videoJs.controls(false)\n            videoJs.pause()\n            this.paused = true\n        },\n        play() {\n            let videoJs = videojs('aux-player')\n\n            videoJs.play()\n            videoJs.controls(false)\n            this.paused = false\n        },\n        // next not built yet\n        next() {\n            let videoJs = videojs('aux-player')\n            videoJs.controls(false)\n            videoJs.src(this.nextSource)\n        },\n        // back not built yet\n        back() {\n            let videoJs = videojs('aux-player')\n            videoJs.controls(false)\n            videoJs.src(this.previousSource)\n        },\n        fullscreen() {\n            let videoJs = videojs('aux-player')\n            videoJs.controls(false)\n            // videoJs.fullscreen(this.previousSource)\n            videoJs.requestFullscreen()\n        },\n        getVideoCurrentTime() {\n            let videoJs = videojs('aux-player')\n            videoJs.controls(false)\n            this.videoCurrentTime = videoJs.currentTime\n        },\n\n\n        // This playNewVideo was created to access the audioContext\n        // which our audio compressor uses. This is new as of 2/2/2024\n        // ~ tec21\n\n        // playNewVideo(source) {\n        //     useChannelStore().clearChannel() // Reset or clear channel store\n        //     const videoJs = videojs('aux-player')\n        //     let videoSrc, videoSourceType\n        //     // Determine the source type and construct the source URL if necessary\n        //     if (source.mediaType === 'externalVideo') {\n        //         videoSrc = source.video_url // Direct URL to the video\n        //         videoSourceType = source.type // MIME type, e.g., 'video/youtube', 'video/mp4'\n        //     } else {\n        //         // Construct file path for internal videos\n        //         videoSrc = `${source.cdn_endpoint}${source.cloud_folder}${source.folder}/${source.file_name}`\n        //         videoSourceType = source.type // MIME type, typically 'video/mp4' for file-based sources\n        //     }\n        //     this.resumeAudioContextIfNeeded()\n        //     videoJs.src({src: videoSrc, type: videoSourceType})\n        //     videoJs.muted(false)\n        // },\n\n        // getSourceDetails(source) {\n        //     let videoSrc = source.video_url; // Directly access the video URL\n        //\n        //     // Default to 'video/mp4' if type is falsy ('', null, undefined, etc.)\n        //     let videoSourceType = source.type || 'video/mp4'\n        //\n        //     // Determine the mediaType and construct the source URL if necessary\n        //     if (source.mediaType === 'externalVideo') {\n        //         videoSrc = source.video_url // Direct URL to the video\n        //     } else {\n        //         // Internal video: construct the path, ensuring the file name is encoded\n        //         let encodedFileName = encodeURIComponent(source.file_name);\n        //         console.log(encodedFileName)\n        //         videoSrc = `${source.cdn_endpoint}${source.cloud_folder}${source.folder}/${encodedFileName}`\n        //     }\n        //     // Logic to determine videoSrc and videoSourceType\n        //     console.log(`Video Source: ${videoSrc}, Type: ${videoSourceType}`);\n        //     return { videoSrc, videoSourceType } // Return as an object\n        // },\n\n\n        getSourceDetails(source) {\n            let videoSrc, videoSourceType\n\n            console.log('getSourceDetails called with source:', source);\n\n            // Default to 'video/mp4' if type is not specified or is empty\n            videoSourceType = source.type || 'video/mp4'\n            console.log(`Determined Video Source Type: ${videoSourceType}`);\n\n            if (source.mediaType === 'externalVideo') {\n                // For external videos, use the URL as provided without encoding\n                videoSrc = source.video_url\n                console.log('Using external video source:', videoSrc);\n            } else {\n                console.log('CDN Endpoint:', source.cdn_endpoint);\n                console.log('Cloud Folder:', source.cloud_folder);\n                console.log('Folder:', source.folder);\n                console.log('File Name:', source.file_name);\n                // For internal videos, construct the URL from its components\n                // Here, we assume the cdn_endpoint, cloud_folder, and folder are correctly formatted\n                // and do not require encoding. Only the file_name might need encoding.\n                const basePath = `${source.cdn_endpoint}${source.cloud_folder}${source.folder}/`\n                // const encodedFileName = encodeURIComponent(source.file_name);\n                const fileName = source.file_name\n                videoSrc = basePath + fileName\n                console.log('Constructed internal video source:', videoSrc);\n                // If your server or CDN is configured to handle spaces in URLs without %20 encoding\n                // or if the original working URLs did not use standard URL encoding,\n                // you might adjust the encoding strategy here.\n                // For example, to replace spaces with %20 but leave other characters as-is:\n                // const fileNameForUrl = source.file_name.replace(/ /g, '%20');\n                // videoSrc = basePath + fileNameForUrl;\n            }\n\n            console.log(`Final Constructed Video Source: ${videoSrc}, Type: ${videoSourceType}`);\n            return {videoSrc, videoSourceType}\n        },\n\n\n        loadNewVideo(source) {\n            try {\n                let videoJs = videojs('aux-player');\n                console.log('LOAD NEW VIDEO');\n                const audioStore = useAudioStore();\n                // Correctly destructure the returned object to get videoSrc and videoSourceType\n                const {videoSrc, videoSourceType} = this.getSourceDetails(source);\n\n                // Example: Stopping and cleaning up the current video and audio setup\n                if (videoJs) {\n                    videoJs.src({'src': videoSrc, 'type': videoSourceType});\n\n                    videoJs.ready(() => {\n                        // ensureAudioContextAndNodesReady does the following:\n                        // 1. Resumes AudioContext if suspended.\n                        // 2. (Re)connects MediaElementSource from the video element to AudioContext.\n                        audioStore.deferAudioSetup = false;\n                        audioStore.ensureAudioContextAndNodesReady(videoJs).then(() => {\n                            // Only attempt to play the video after ensuring the AudioContext is ready\n                            videoJs.play().catch(error => {\n                                useNotificationStore().setGeneralServiceNotification('Error', 'Playback initiation error: ' + error)\n                                console.error('Playback initiation error: ', error);\n                            });\n\n                            // Consider toggling mute based on the user's preference or previous state\n                            videoJs.muted(false);\n                            this.muted = false;\n                        });\n                    });\n                }\n            } catch (error) {\n                // Log the error or perform any other error handling\n                useNotificationStore().setGeneralServiceNotification('Error', 'Error loading new video: ' + error)\n                console.error('Error loading new video: ', error);\n            }\n        },\n\n        // loadNewVideo(source) {\n        //     console.log('LOAD NEW VIDEO TTTTTTTTTTTTTTTTTTTTTTTTTS');\n        //     console.log('LOAD NEW VIDEO initiated with source:', source);\n        //     const audioStore = useAudioStore();\n        //     this.unMute();\n        //     // Destructure the returned object to get videoSrc and videoSourceType\n        //     const { videoSrc, videoSourceType } = this.getSourceDetails(source);\n        //     console.log(`Video source details received: Src - ${videoSrc}, Type - ${videoSourceType}`);\n        //\n        //     // Ensure you're using the same player instance (`videoJs` in this context) for consistency\n        //     let videoJs = videojs('aux-player'); // Ensure this ID matches your video player element\n        //     console.log('Video.js player instance created or retrieved.');\n        //\n        //     // Stop and clean up the current video and audio setup if necessary\n        //     videoJs.ready(() => {\n        //         console.log('Video.js player is ready.');\n        //         videoJs.src({ 'src': videoSrc, 'type': videoSourceType });\n        //         console.log(`Video source set: ${videoSrc} of type ${videoSourceType}`);\n        //\n        //         // Ensure AudioContext and nodes are ready\n        //         audioStore.ensureAudioContextAndNodesReady(videoJs).then(() => {\n        //             console.log('Audio context and nodes are ready. Attempting to play video.');\n        //\n        //             videoJs.play().then(() => {\n        //                 console.log('Video playback started successfully.');\n        //             }).catch(error => {\n        //                 console.error('Playback initiation error:', error);\n        //             });\n        //             // Attempt to play the video after ensuring the AudioContext is ready\n        //             // videoJs.play().catch(error => {\n        //             //     console.error('Playback initiation error:', error);\n        //             // });\n        //\n        //             // Apply the unMute logic from loadMistStreamVideo to ensure audio is correctly configured\n        //             this.unMute();\n        //             console.log('Audio unmuted.');\n        //             this.paused = false;\n        //             console.log('Paused flag set to false.');\n        //         }).catch(error => {\n        //             console.error('Error ensuring audio context and nodes are ready:', error);\n        //         });\n        //     });\n        // },\n\n        playNewVideo() {\n            console.log('PLAY NEW VIDEO')\n            if (this.player) {\n                // Wait for the video to be ready before playing\n                this.player.ready(() => {\n                    this.player.play()\n                    // Assuming you want to unmute here; check if this aligns with user interaction policies\n                    this.player.muted(false)\n                    this.muted = false\n                })\n            }\n        },\n\n\n// load video from different types of sources:\n// Url\n// YouTube\n// EmbedCode\n// Mist\n// File\n        loadNewSourceFromYouTube(source) {\n            this.videoIsYoutube = true\n            useChannelStore().clearChannel()\n            let videoJs = videojs('aux-player')\n            this.videoSource = source\n            this.videoSourceType = 'video/youtube'\n            videoJs.src({'src': this.videoSource, 'type': this.videoSourceType})\n            videoJs.controls(false)\n            this.unMute()\n            this.paused = false\n        },\n        loadNewLiveSourceFromRumble(source) {\n            this.videoIsYoutube = true\n            useChannelStore().clearChannel()\n            let videoJs = videojs('aux-player')\n            this.videoSource = source\n            this.videoSourceType = 'application/x-mpegURL'\n            videoJs.src({'src': this.videoSource, 'type': this.videoSourceType})\n            videoJs.controls(false)\n            this.unMute()\n            this.paused = false\n        },\n        loadNewSourceFromUrl(source) {\n            try {\n                this.videoIsYoutube = false;\n                useChannelStore().clearChannel();\n                let videoJs = videojs('aux-player');\n\n                if (!source.video_url || !source.type) {\n                    useNotificationStore().setGeneralServiceNotification('Error', 'Invalid video source.')\n                    throw new Error(\"Invalid video source.\");\n                }\n\n                this.videoSource = source.video_url;\n                this.videoSourceType = source.type;\n                videoJs.src({'src': source.video_url, 'type': source.type});\n\n                this.unMute();\n                this.paused = false;\n            } catch (error) {\n                useNotificationStore().setGeneralServiceNotification('Error', 'Failed to load new source: ' + error)\n                console.error(\"Failed to load new source:\", error);\n                throw error; // Re-throw the error to be caught by the caller\n            }\n        },\n        loadNewSourceFromMist(source) {\n            this.videoIsYoutube = false\n            let videoJs = videojs('aux-player')\n            let filePath = 'https://mist.not.tv/hls/'\n            this.videoSource = filePath + source + '/index.m3u8'\n            this.videoSourceType = 'application/x-mpegURL'\n            videoJs.src({'src': this.videoSource, 'type': this.videoSourceType})\n            this.unMute()\n            this.paused = false\n        },\n        loadNewSourceFromFile(source) {\n            this.videoIsYoutube = false\n            useChannelStore().clearChannel()\n            let videoJs = videojs('aux-player')\n            let filePath = source.cdn_endpoint + source.cloud_folder + source.folder + '/'\n            this.videoSource = source.file_name\n            this.videoSourceType = source.type\n            videoJs.src({'src': filePath + this.videoSource, 'type': this.videoSourceType})\n            this.unMute()\n            this.paused = false\n        },\n\n        // The new load video functions (2024-02-09 tec21 and ChatGPT)\n        loadExternalSourceVideo() {\n\n        },\n        loadPlaylistVideos() {\n\n        },\n        async loadMistStreamVideo(mistStream) {\n            // console.log('Loading Mist Stream Video for:', mistStream.name); // Log which Mist Stream is being loaded\n            // This mistServerUri comes from appSettings\n            if (!this.mistServerUri) {\n                console.log('Mist Server URI not set, fetching...') // Log fetching attempt\n                await this.getMistServerUri()\n            }\n            if (this.mistServerUri) {\n                // console.log('Mist Server URI:', this.mistServerUri); // Log the URI to confirm it's fetched\n                let basePath = this.mistServerUri\n                this.videoSource = basePath + 'hls/' + mistStream.name + '/index.m3u8'\n                // console.log('Video Source Set To:', this.videoSource); // Log the final video source\n\n                this.videoSourceType = 'application/vnd.apple.mpegURL'\n                // console.log('Setting player source to:', this.videoSource, 'of type:', this.videoSourceType); // Log the source setting\n                let videoJs = videojs('aux-player')\n                videoJs.src({'src': this.videoSource, 'type': this.videoSourceType})\n                this.unMute()\n                this.paused = false\n            } else {\n                console.error('Mist Server URI is still not set after fetching.')\n            }\n            // let basePath = this.mistServerUri\n            // this.videoSource = basePath + 'hls/' + mistStream.name + '/index.m3u8'\n            // this.videoSourceType = \"application/vnd.apple.mpegURL\"\n            // this.player.src({'src': this.videoSource, 'type': this.videoSourceType})\n            // this.unMute()\n            // this.paused = false\n        },\n        async loadVideoFromFile(video) {\n            // console.log('Loading Mist Stream Video for:', mistStream.name); // Log which Mist Stream is being loaded\n            // This mistServerUri comes from appSettings\n            // if (!this.mistServerUri) {\n            //     console.log('Mist Server URI not set, fetching...') // Log fetching attempt\n            //     await this.getMistServerUri()\n            // }\n            // if (this.mistServerUri) {\n                // console.log('Mist Server URI:', this.mistServerUri); // Log the URI to confirm it's fetched\n                // let basePath = this.mistServerUri\n                // this.videoSource = basePath + 'hls/' + video.name + '/index.m3u8'\n                // console.log('Video Source Set To:', this.videoSource); // Log the final video source\n\n            // this.videoSourceType = 'video/mp4'\n            console.log('Video Source Type:', video.type);\n            console.log('Video URL:', video.video_url);\n            console.log('CDN Endpoint:', video.cdn_endpoint);\n            console.log('Cloud Folder:', video.cloud_folder);\n            console.log('Folder:', video.folder);\n            console.log('File Name:', video.file_name);\n\n            let videoSource = video.cdn_endpoint + video.cloud_folder + video.folder + '/' + video.file_name\n                // console.log('Setting player source to:', this.videoSource, 'of type:', this.videoSourceType); // Log the source setting\n                let videoJs = videojs('aux-player')\n                videoJs.src({'src': videoSource, 'type': video.type})\n                this.unMute()\n                this.paused = false\n            // } else {\n            //     console.error('Mist Server URI is still not set after fetching.')\n            // }\n            // let basePath = this.mistServerUri\n            // this.videoSource = basePath + 'hls/' + mistStream.name + '/index.m3u8'\n            // this.videoSourceType = \"application/vnd.apple.mpegURL\"\n            // this.player.src({'src': this.videoSource, 'type': this.videoSourceType})\n            // this.unMute()\n            // this.paused = false\n        },\n\n\n        setNowPlayingInfoVideoFile(source) {\n            this.nowPlayingType = 'Video File'\n            this.nowPlayingName = source.file_name\n            useStreamStore().currentChannel = 'On Demand'\n        },\n        setNowPlayingInfoShow(show, episode) {\n            this.clearNowPlayingInfo()\n            const showStore = useShowStore()\n\n            if (show.firstPlayVideo) {\n                showStore.setName(show.firstPlayVideo.name)\n                showStore.setEpisodeUrl(`/shows/${show.slug}/episode/${source.firstPlayVideo.slug}`)\n            } else if (episode) {\n                showStore.setName(show.name)\n                showStore.setUrl(`/shows/${show.slug}`)\n                showStore.setEpisodeName(episode.name)\n                showStore.setEpisodeUrl(`/shows/${show.slug}/episode/${episode.slug}`)\n            } else {\n                showStore.setName(show.name)\n                showStore.setUrl(`/shows/${show.slug}`)\n            }\n        },\n// change video size/position and page layout\n        makeVideoPiP() {\n            // const appSettingStore = useAppSettingStore();\n            // const userStore = useUserStore();\n            //\n            // if (userStore.isMobile) {\n            //     let videoJs = videojs('aux-player')\n            //     videoJs.controls(false)\n            //     if(this.fullPage) {\n            //         this.class = 'pipVideoClassFullPage'\n            //         this.videoContainerClass = 'pipVideoContainerFullPage'\n            //     } else {\n            //         this.class = 'pipVideoClassTopRight'\n            //         this.videoContainerClass = 'pipVideoContainerTopRight'\n            //     }\n            //     appSettingStore.togglePipChatMode()\n            // }\n        },\n        makeVideoFullPage() {\n            const appSettingStore = useAppSettingStore()\n            const userStore = useUserStore()\n\n            // this.fullPage = true; // to be deleted and replaced by appSettingStore.fullPage\n            appSettingStore.fullPage = true\n            // userStore.hidePage = true // to be deleted and replaced by appSettingStore.hidePage\n            appSettingStore.hidePage = true\n            appSettingStore.ott = 0\n\n            this.videoContainerClass = 'fullPageVideoContainer'\n            this.class = 'fullPageVideoClass'\n            this.controls = !userStore.isMobile\n        },\n        makeVideoTopRight() {\n            const appSettingStore = useAppSettingStore()\n\n            // this.fullPage = false // to be deleted and replaced by appSettingStore.fullPage\n            appSettingStore.fullPage = false\n            // userStore.hidePage = false // to be deleted and replaced by appSettingStore.hidePage\n            appSettingStore.hidePage = false\n            // this.currentPageIsStream = false // to be deleted and replaced by appSettingStore.currentPageIsStream\n            appSettingStore.currentPageIsStream = false\n\n            this.videoContainerClass = 'topRightVideoContainer'\n            this.class = 'topRightVideoClass'\n            this.controls = false\n        },\n        makeVideoWelcomePage() {\n            const appSettingStore = useAppSettingStore()\n            this.videoContainerClass = 'welcomeVideoContainer'\n            this.class = 'welcomeVideoClass'\n            appSettingStore.loggedIn = false\n            appSettingStore.fullPage = true\n            appSettingStore.hidePage = false\n        },\n\n\n    },\n\n    getters: {},\n})\n","import { onBeforeMount, onMounted } from 'vue'\nimport { useUserStore } from \"@/Stores/UserStore\"\nimport { useAppSettingStore } from \"@/Stores/AppSettingStore\"\nimport { useVideoPlayerStore } from \"@/Stores/VideoPlayerStore\"\nimport { Inertia } from \"@inertiajs/inertia\"\n\nexport function usePageSetup(pageName) {\n    const userStore = useUserStore()\n    const appSettingStore = useAppSettingStore()\n    const videoPlayerStore = useVideoPlayerStore()\n\n    appSettingStore.currentPage = pageName\n    appSettingStore.showFlashMessage = true\n    appSettingStore.pageIsHidden = false\n\n    if (userStore.isMobile) {\n        appSettingStore.ott = 0\n    }\n\n    videoPlayerStore.makeVideoTopRight()\n\n    onBeforeMount(() => {\n        // reload page\n        if (appSettingStore.pageReload) {\n            appSettingStore.pageReload = false\n            window.location.reload(true);\n        }\n    });\n\n    onMounted(() => {\n        // Check if the URL contains query strings\n        const hasQueryStrings = window.location.search !== '';\n\n        // Only scroll into view if there are no query strings\n        if (!hasQueryStrings) {\n            const topDiv = document.getElementById(\"topDiv\")\n            if (topDiv) {\n                topDiv.scrollIntoView()\n            }\n        }\n        // Only update if we're not already on this page to avoid overwriting with the current URL\n        appSettingStore.setPrevUrl()\n        appSettingStore.noLayout = false\n        appSettingStore.showOttButtons = true\n        // Inertia.reload()\n\n    });\n}\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".toggle[data-v-25a66e04]{background:none;border:none;cursor:pointer;margin-right:5px}.nested[data-v-25a66e04]{margin-left:20px}.item[data-v-25a66e04]{margin-bottom:5px}\", \"\",{\"version\":3,\"sources\":[\"webpack://./resources/js/Components/Global/MistStreams/RecursivePropertyList.vue\"],\"names\":[],\"mappings\":\"AAyCA,yBACE,eAAgB,CAChB,WAAY,CACZ,cAAe,CACf,gBACF,CAEA,yBACE,gBACF,CAEA,uBACE,iBACF\",\"sourcesContent\":[\"<!-- RecursivePropertyList.vue -->\\n<template>\\n  <div>\\n    <ul class=\\\"list-unstyled\\\">\\n      <li v-for=\\\"(value, key) in object\\\" :key=\\\"key\\\" class=\\\"item\\\">\\n        <!-- Toggle Button -->\\n        <input type=\\\"checkbox\\\" v-if=\\\"isComplex(value)\\\" @click=\\\"toggle(key, $event)\\\" class=\\\"toggle toggle-sm mr-1\\\"/>\\n\\n        <!-- Key Display -->\\n        <strong>{{ key }}:</strong>\\n\\n        <!-- Direct value or Recursion -->\\n        <span v-if=\\\"!isComplex(value)\\\">{{ value }}</span>\\n        <ul v-else-if=\\\"isOpen(key)\\\" class=\\\"nested\\\">\\n          <RecursivePropertyList v-if=\\\"typeof value === 'object'\\\" :object=\\\"value\\\" />\\n        </ul>\\n      </li>\\n    </ul>\\n  </div>\\n</template>\\n\\n<script setup>\\nimport { defineProps, reactive } from 'vue';\\n\\nconst props = defineProps({\\n  object: Object\\n});\\n\\n\\n// Helper functions\\nconst isComplex = (value) => typeof value === 'object';\\nconst opened = reactive({});\\n\\nconst toggle = (key, event) => {\\n  opened[key] = !opened[key];\\n  event.target.blur(); // Add this line to remove focus from the checkbox\\n};\\nconst isOpen = (key) => !!opened[key];\\n</script>\\n\\n<style scoped>\\n.toggle {\\n  background: none;\\n  border: none;\\n  cursor: pointer;\\n  margin-right: 5px;\\n}\\n\\n.nested {\\n  margin-left: 20px; /* Indentation for nested objects */\\n}\\n\\n.item {\\n  margin-bottom: 5px;\\n}\\n</style>\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","import script from \"./CancelButton.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./CancelButton.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n  <div>\n    <button\n        @click.prevent=\"cancel\"\n        class=\"ml-2 px-4 py-2 text-white bg-orange-600 hover:bg-orange-500 rounded-lg\"\n    >Cancel\n    </button>\n  </div>\n</template>\n\n<script setup>\nimport { Inertia } from \"@inertiajs/inertia\"\nimport { useAppSettingStore } from \"@/Stores/AppSettingStore\"\nimport { useUserStore } from '@/Stores/UserStore'\n\nconst appSettingStore = useAppSettingStore()\nconst userStore = useUserStore()\n\nlet props = defineProps({\n  url: String\n})\n\nfunction cancel() {\n  if (appSettingStore.prevUrl) {\n    if (props.url) {\n      Inertia.visit(props.url)\n    } else {\n      Inertia.visit(appSettingStore.prevUrl)\n    }\n  } else {\n    if (props.url) {\n      Inertia.visit(props.url)\n    } else {\n      // Fallback if prevUrl is not available\n      let prevUrl = userStore.isCreator ? '/dashboard' : '/';\n      Inertia.visit(prevUrl);\n    }\n  }\n}\n</script>\n","import script from \"./Messages.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Messages.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n  <div class=\"mx-4 my-4\">\n    <div class=\"alert alert-info mt-4\"\n         v-if=\"props.flash.message\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" class=\"stroke-current shrink-0 w-6 h-6\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n              d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"></path>\n      </svg>\n      <span>{{ props.flash.message }}</span>\n      <button class=\"text-xs ml-12\" @click=\"clearFlashMessage\"> Close</button>\n    </div>\n    <div class=\"alert alert-success mt-4 mx-3\"\n         v-if=\"props.flash.success\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"stroke-current shrink-0 h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n              d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"/>\n      </svg>\n      <span>{{ props.flash.success }}</span>\n      <button class=\"text-xs ml-12\" @click=\"clearFlashMessage\"> Close</button>\n    </div>\n    <div class=\"alert alert-warning mt-4 mx-3\"\n         v-if=\"props.flash.warning\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"stroke-current shrink-0 h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n              d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z\"/>\n      </svg>\n      <span>{{ props.flash.warning }}</span>\n      <button class=\"text-xs ml-12\" @click=\"clearFlashMessage\"> Close</button>\n    </div>\n    <div class=\"alert alert-error mt-4 mx-3\"\n         v-if=\"props.flash.error\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"stroke-current shrink-0 h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n              d=\"M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z\"/>\n      </svg>\n      <span>{{ props.flash.error }}</span>\n      <button class=\"text-xs ml-12\" @click=\"clearFlashMessage\"> Close</button>\n    </div>\n  </div>\n\n</template>\n\n<script setup>\nimport { Inertia } from \"@inertiajs/inertia\"\nimport { computed } from \"vue\"\nimport { useAppSettingStore } from \"@/Stores/AppSettingStore\"\n\nconst appSettingStore = useAppSettingStore()\n\nappSettingStore.showFlashMessage = true\n\nlet props = defineProps({\n  flash: Object,\n\n})\n\nconst messageType = computed(() => ({\n  'text-green-700 bg-green-100 dark:bg-green-200 dark:text-green-800': props.flash.success,\n  'text-blue-700 bg-blue-100 dark:bg-blue-200 dark:text-blue-800': props.flash.message,\n  'text-orange-700 bg-orange-100 dark:bg-orange-200 dark:text-orange-800': props.flash.warning,\n  'text-red-700 bg-red-100 dark:bg-red-200 dark:text-red-800': props.flash.error,\n}))\n\nconst clearFlashMessage = async () => {\n  await Inertia.post(route('flash.clear'));\n  Inertia.reload();\n};\n</script>\n","import script from \"./PopUpModal.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./PopUpModal.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","import script from \"./VideoJsAux.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./VideoJsAux.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n  <div class=\"w-full h-fit bg-yellow-400\">\n<!--    <video ref=\"videoPlayerAux\" :id=\"id\" class=\"vjs-layout-tiny w-full\" playsinline controls autoplay-->\n<!--           muted/>-->\n\n    <video-js :id=\"id\"\n              class=\"video-js vjs-layout-tiny w-96 h-64 bg-blue-400\"\n              autoplay\n              muted\n              playsinline\n              crossorigin=\"anonymous\"\n    >\n      <source :src=\"source\"\n              :type=\"sourceType\">\n    </video-js>\n\n\n\n\n  </div>\n\n\n\n\n</template>\n\n\n<script setup>\nimport { onMounted, onBeforeUnmount } from \"vue\"\nimport videojs from 'video.js'\nimport 'video.js/dist/video-js.css'\nimport { useVideoAuxPlayerStore } from \"@/Stores/VideoAuxPlayerStore\"\nimport { useAppSettingStore } from \"@/Stores/AppSettingStore\"\nconst appSettingStore = useAppSettingStore()\nimport { useStreamStore } from \"@/Stores/StreamStore\"\nimport VideoJs from '@/Components/Global/VideoPlayer/VideoJs/VideoJs.vue'\n\nconst videoAuxPlayerStore = useVideoAuxPlayerStore()\nconst streamStore = useStreamStore()\n\nconst props = defineProps({\n  options: Object,\n  id: String,\n  source: String,\n  sourceType: String\n})\n\nonMounted(() => {\n  const videoElementId = props.id\n  const playerOptions = {\n    // Define your player options here\n    controlBar: {\n      audioTrackButton: false,\n      autoHide: true,\n      captionsButton: false,\n      chaptersButton: false,\n      currentTimeDisplay: false,\n      customControlSpacer: false,\n      descriptionsButton: false,\n      durationDisplay: false,\n      fullscreenToggle: false, // Removes the full screen option\n      liveDisplay: false,\n      pictureInPictureToggle: false,\n      playToggle: false,\n      playbackRateMenuButton: false,\n      progressControl: {seekBar: false},\n      remainingTimeDisplay: false,\n      seekToLive: false,\n      subsCapsButton: false,\n      subtitlesButton: false,\n      timeDivider: false,\n      volumePanel: {\n        inline: true,\n        volumeBar: {\n          vertical: false,\n          liveDisplay: false,\n        },\n      },\n    },\n    userActions: {\n      hotkeys: true, // Enable hotkeys to show/hide controls\n    },\n    controls: true,\n    muted: false, // Start muted to comply with autoplay policies\n    inactivityTimeout: 0,\n    autoplay: true,\n    preload: 'auto',\n    // techOrder: ['html5'],\n    html5: {\n      hls: {\n        overrideNative: !videojs.browser.IS_SAFARI, // Override native HLS on non-Safari browsers\n      },\n    },\n  }\n\n  // Initialize Video.js player\n  const videoAuxPlayer = videojs(videoElementId, playerOptions);\n\n  // Use the store to manage the player\n  videoAuxPlayerStore.setPlayer(videoAuxPlayer);\n\n  // Access the video DOM element controlled by VideoJS\n  const videoDomElement = videoAuxPlayer.el();\n\n  // Disable right-click on the video element\n  videoDomElement.addEventListener('contextmenu', (event) => {\n    event.preventDefault();\n  });\n})\n\nonBeforeUnmount(() => {\n  let videoAuxPlayer = videojs(props.id)\n  videoAuxPlayer.dispose()\n})\n\n</script>","import script from \"./ManageShowEpisodeNoticeModals.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./ManageShowEpisodeNoticeModals.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","import api from \"!../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../../../node_modules/css-loader/dist/cjs.js??clonedRuleSet-9.use[1]!../../../../../node_modules/vue-loader/dist/stylePostLoader.js!../../../../../node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-9.use[2]!../../../../../node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./RecursivePropertyList.vue?vue&type=style&index=0&id=25a66e04&scoped=true&lang=css\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","import script from \"./GoLive.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./GoLive.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n  <div class=\"mx-0 md:mx-4 mt-4 mb-2 px-2 md:px-6 py-1\">\n    <div\n        class=\"text-sm font-semibold  text-white text-center w-full border-2 rounded uppercase px-0 md:px-6 py-1 \"\n        :class=\"[ goLiveStore.isLive ? 'bg-gray-600 border-gray-600 ' : 'bg-red-600 border-red-600' ]\">\n      Go Live Instructions\n    </div>\n    <div class=\"shadow overflow-hidden border-2 border-red-600 rounded p-2 md:p-6\"\n         :class=\"[ goLiveStore.isLive ? 'bg-gray-100' : 'bg-red-100' ]\">\n      <div class=\"flex flex-row flex-wrap-reverse w-full justify-between\">\n        <div>\n          <div>RTMP full url: <span\n              class=\"font-bold\">rtmp://stream.not.tv/live/{{\n              goLiveStore.selectedShow.mist_stream_wildcard.name\n            }}</span>\n          </div>\n          <div>RTMP url: <span class=\"font-bold\">rtmp://stream.not.tv/live/</span></div>\n          <div>RTMP stream key: <span class=\"font-bold\">{{ goLiveStore.selectedShow.mist_stream_wildcard.name }}</span>\n          </div>\n        </div>\n        <div class=\"\">\n          <button v-if=\"!goLiveStore.isLive\" @click=\"goLiveStore.goLive\"\n                  class=\"btn text-white bg-green-500 hover:bg-green-700 uppercase\"\n          >Go Live Now\n          </button>\n          <button v-else @click=\"goLiveStore.stopLive\" class=\"btn text-white bg-red-700 hover:bg-red-900 uppercase\"\n          >End Live\n          </button>\n          <div v-if=\"!goLiveStore.isLive\" class=\"text-xs text-green-500 font-semibold tracking-wider\">Premium Creator Service</div>\n          <div></div>\n          <div>Live will begin in... </div>\n          <div>{{ formattedCountdown }}</div>\n        </div>\n      </div>\n\n\n      <div class=\"flex flex-col justify-center mt-3 h-fit\">\n        <div class=\"text-xs tracking-wider font-semibold mb-1 pl-1\">VIDEO STREAM</div>\n\n        <div class=\"flex flex-row flex-wrap\">\n          <div class=\"flex flex-col\">\n            <div class=\"px-10 h-fit w-fit\">\n              <button @click=\"reloadPlayer\"\n                      class=\"btn btn-xs w-full\"\n                      :class=\"[ goLiveStore.isLive ? 'bg-gray-200 hover:bg-400' : '' ]\"\n              >Reload Player\n              </button>\n              <div v-if=\"goLiveStore.isLive\" class=\"w-full bg-red-700 text-white text-center uppercase font-bold\">LIVE +\n                RECORDING\n              </div>\n              <video-js-aux :id=\"`aux-player`\"\n                            :source=\"videoSource\"\n                            :sourceType=\"videoSourceType\"\n                            class=\"\"\n                            :class=\"[ goLiveStore.isLive ? 'border-4 border-red-700' : '' ]\"/>\n\n\n              <!--            <div v-if=\"playerTargetId\" class=\"mistvideo\" :id=\"playerTargetId\">-->\n              <!--              <noscript>-->\n              <!--                <a :href=\"`http://mist.nottv.io:8080/${goLiveStore.selectedShow.mist_stream_wildcard.name}.html`\" target=\"_blank\">-->\n              <!--                  Click here to play this video-->\n              <!--                </a>-->\n              <!--              </noscript>-->\n              <!--            </div>-->\n\n            </div>\n            <div class=\"flex flex-row px-10\">\n              <div class=\"mt-2\">\n                <button v-if=\"!videoPlayerStore.muted\"\n                        class=\"btn\"\n                        :class=\"[ goLiveStore.isLive ? 'bg-gray-200 hover:bg-400' : '' ]\"\n                        @click=\"videoPlayerStore.mute\">Mute Main Player Audio\n                </button>\n                <button v-else\n                        class=\"btn\"\n                        @click=\"videoPlayerStore.unMute\"\n                        :class=\"[ goLiveStore.isLive ? 'bg-gray-200 hover:bg-400' : '' ]\">Turn On Main Player Audio\n                </button>\n              </div>\n              <div class=\"mt-2 ml-2\">\n                <button v-if=\"!videoAuxPlayerStore.muted\"\n                        class=\"btn\"\n                        :class=\"[ goLiveStore.isLive ? 'bg-gray-200 hover:bg-400' : '' ]\"\n                        @click=\"videoAuxPlayerStore.mute\">Mute Live Stream\n                  Video\n                </button>\n                <button v-else\n                        class=\"btn\"\n                        :class=\"[ goLiveStore.isLive ? 'bg-gray-200 hover:bg-400' : '' ]\"\n                        @click=\"videoAuxPlayerStore.unMute\">Turn On Live Stream Audio\n                </button>\n              </div>\n            </div>\n          </div>\n\n          <div v-if=\"goLiveStore.streamInfo\" class=\"w-fit\" :key=\"goLiveStore.selectedShowId\">\n            <div>\n              <h3>Stream Info</h3>\n              <!--                <RecursivePropertyList :object=\"serverInfo\" />-->\n\n              <p><strong>Width:</strong> {{ goLiveStore.streamInfo?.width }}</p>\n              <p><strong>Height:</strong> {{ goLiveStore.streamInfo?.height }}</p>\n\n              <!-- Assuming you want to display tracks info specifically -->\n              <div v-if=\"goLiveStore.streamInfo?.meta?.tracks\">\n                <h4 class=\"font-semibold\">Tracks</h4>\n                <ul>\n                  <li v-for=\"(track, name) in goLiveStore.streamInfo.meta.tracks\" :key=\"name\">\n                    &middot; {{ name }} - Codec: {{ track.codec }}, Rate: {{ track.rate }}\n                  </li>\n                </ul>\n              </div>\n            </div>\n          </div>\n          <div v-else>\n            <div class=\"flex flex-col\">\n              <span class=\"mb-2\">Loading stream data...</span>\n              <span class=\"loading loading-spinner text-neutral\"></span>\n            </div>\n\n          </div>\n        </div>\n\n      </div>\n\n\n      <div class=\"mx-4 mt-4 mb-2 px-6 py-1 \">\n        <div\n            class=\"text-sm font-semibold bg-blue-600 text-white text-center w-full border-2 border-blue-600 rounded uppercase px-6 py-1 \">\n          Push Destinations\n        </div>\n        <div class=\"shadow bg-blue-100 overflow-hidden border-2 border-blue-600 rounded p-6 space-y-3\">\n          <div></div>\n          <div>Set up <span class=\"font-bold\">push destinations:</span></div>\n          <div>Here you can set additional streaming destinations such as Facebook, YouTube, Rumble, Twitch, etc. and\n            notTV will automatically start pushing to those destinations when you go live.\n          </div>\n          <div class=\"w-full flex justify-center pt-4\">\n            <button onclick=\"setPushDestinationsNotice.showModal()\"\n                    class=\"bg-blue-600 hover:bg-blue-500 text-white font-semibold rounded-lg px-4 py-2\">Set Push\n              Destinations\n            </button>\n          </div>\n        </div>\n\n      </div>\n\n    </div>\n\n  </div>\n\n  <div class=\"mx-4 mt-4 mb-8 px-6 py-1 \">\n    <div\n        class=\"text-sm font-semibold bg-orange-600 text-white text-center w-full border-2 border-orange-600 rounded uppercase px-6 py-1 \">\n      Commercial Breaks\n    </div>\n    <div class=\"shadow bg-orange-100 overflow-hidden border-2 border-orange-600 rounded p-6 space-y-3\">\n      <div></div>\n      <div>Click the <span class=\"font-bold\">Trigger Commercial Break</span> button below to go to commercial.</div>\n      <div>You will see a countdown timer until the show resumes. This will be 1-2 minutes.</div>\n      <div>As a notTV creator, your voice matters. How can this feature be improved to better serve you and your\n        sponsors?\n        Please email and let us know: <a href=\"mailto:hello@not.tv\" target=\"_blank\"\n                                         class=\"text-blue-500 hover:text-blue-600\">hello@not.tv</a>\n      </div>\n      <div class=\"w-full flex justify-center pt-4\">\n        <button onclick=\"setCommercialBreakNotice.showModal()\"\n                class=\"bg-orange-600 hover:bg-orange-500 text-white font-semibold rounded-lg px-4 py-2\">Trigger\n          Commercial Break\n        </button>\n      </div>\n    </div>\n\n  </div>\n\n\n</template>\n\n<script setup>\nimport { useTimeAgo } from '@vueuse/core'\nimport { computed, nextTick, onBeforeUnmount, onMounted, ref, watch } from 'vue'\nimport { useVideoPlayerStore } from '@/Stores/VideoPlayerStore'\nimport { useVideoAuxPlayerStore } from '@/Stores/VideoAuxPlayerStore'\nimport { useGoLiveStore } from '@/Stores/GoLiveStore'\nimport VideoJsAux from '@/Components/Global/VideoPlayer/VideoJs/VideoJsAux'\nimport videojs from 'video.js'\nimport RecursivePropertyList from '@/Components/Global/MistStreams/RecursivePropertyList'\n\nconst videoPlayerStore = useVideoPlayerStore()\nconst videoAuxPlayerStore = useVideoAuxPlayerStore()\nconst goLiveStore = useGoLiveStore()\n\nlet props = defineProps({\n  show: Object,\n})\n\n\nlet videoSource = 'https://mist.nottv.io/hls/' + goLiveStore.selectedShow.mist_stream_wildcard.name\n    + '/index.m3u8'\nlet videoSourceType = 'application/x-mpegURL'\n\n// Fetch server info on component mount\ngoLiveStore.fetchStreamInfo(goLiveStore.selectedShow.mist_stream_wildcard.name)\n\n// Asynchronously fetch the JSON data\n// async function fetchServerInfo() {\n//   try {\n//     const response = await fetch('http://mist.nottv.io:8080/json_dvr_playback_2.js'); // Replace with your URL\n//     if (!response.ok) throw new Error('Failed to fetch');\n//     const data = await response.json();\n//     serverInfo.value = data; // Store the data in serverInfo\n//     console.log (serverInfo)\n//   } catch (error) {\n//     console.error('Error fetching server info:', error);\n//   }\n// }\n\n// let videoSrc = ref('')\n// let videoJsAux = ('aux-player')\n\n// const videoOptions = ref({\n//   autoplay: true,\n//   muted: true,\n//   controls: true,\n//   fill: true,\n//   sources: [\n//     {\n//       src: videoSource,\n//       type: videoSourceType,\n//     },\n//   ],\n// });\n\nconst reloadPlayer = () => {\n  let source = goLiveStore.selectedShow.mist_stream_wildcard.name\n  let sourceUrl = videoAuxPlayerStore.mistServerUri + 'hls/' + source + '/index.m3u8'\n  console.log('source url: ' + sourceUrl)\n  let sourceType = 'application/vnd.apple.mpegurl'\n  let videoJs = videojs('aux-player')\n  videoJs.src({'src': sourceUrl, 'type': sourceType})\n  // videoAuxPlayerStore.loadNewLiveSource(source, sourceType)\n  console.log('reload player')\n  goLiveStore.fetchStreamInfo(goLiveStore.selectedShow.mist_stream_wildcard.name)\n}\n\nonMounted(() => {\n  // videoSrc = goLiveStore.selectedShow.mist_stream_wildcard.name\n  // videoJsAux.src({'src': videoSrc, 'type': 'application/vnd.apple.mpegurl'});\n  // videoJsAux.ready(() => {\n  //\n  // })\n  startCountdown();\n  console.log('onPlayerReady AUX')\n  // fetchServerInfo()\n\n})\n\n// Initial countdown time in seconds (5 minutes * 60 seconds)\nconst countdownTime = 5 * 60;\n// Reactive state for the countdown\nconst countdown = ref(countdownTime);\n\n// Computed property to format the countdown as mm:ss\nconst formattedCountdown = computed(() => {\n  const minutes = Math.floor(countdown.value / 60);\n  const seconds = countdown.value % 60;\n  return `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n});\n\n// Function to start the countdown\nconst startCountdown = () => {\n  const interval = setInterval(() => {\n    countdown.value--;\n\n    if (countdown.value < 0) {\n      clearInterval(interval); // Stop the interval\n      countdown.value = countdownTime; // Reset countdown\n      startCountdown(); // Restart the countdown\n    }\n  }, 1000);\n};\n//\n// // Assuming props.show.mist_stream_wildcard.name exists and is reactive\n// const playerTargetId = ref('');\n//\n// const initializePlayer = () => {\n//   const targetElement = document.getElementById(playerTargetId.value);\n//   if (targetElement) {\n//     mistPlay(goLiveStore.selectedShow.mist_stream_wildcard.name, {\n//       target: targetElement,\n//       fillSpace: true\n//     });\n//   } else {\n//     console.error('Target element for video player not found.');\n//   }\n// };\n//\n// const removePlayer = () => {\n//   const existingContainer = document.getElementById(playerTargetId.value);\n//   if (existingContainer) {\n//     existingContainer.remove();\n//   }\n// };\n//\n//\n// const reloadPlayer = () => {\n//   removePlayer();\n//\n//   nextTick(() => {\n//     const newPlayerContainer = document.createElement('div');\n//     const uniqueId = `${goLiveStore.selectedShow.mist_stream_wildcard.name}-${Date.now()}`;\n//     newPlayerContainer.id = uniqueId;\n//     playerTargetId.value = uniqueId;\n//\n//     document.body.appendChild(newPlayerContainer); // Append to body or choose a specific container\n//\n//     loadAndInitializePlayer();\n//   });\n// };\n//\n// const loadAndInitializePlayer = () => {\n//   if (!window.mistplayers) {\n//     const playerScript = document.createElement(\"script\");\n//     playerScript.src = \"https://mist.nottv.io:443/player.js\"; // Assuming HTTPS site\n//     document.head.appendChild(playerScript);\n//     playerScript.onload = initializePlayer;\n//   } else {\n//     initializePlayer();\n//   }\n// };\n//\n// onMounted(() => {\n//   playerTargetId.value = `${goLiveStore.selectedShow.mist_stream_wildcard.name}-${Date.now()}`;\n//   loadAndInitializePlayer();\n// });\n//\n// watch(() => playerTargetId.value, (newVal) => {\n//   if (newVal) {\n//     loadAndInitializePlayer();\n//   }\n// });\n//\n// onBeforeUnmount(() => {\n//   removePlayer(); // Ensure the player's container is removed when the component unmounts\n// });\n\n\n//\n//\n// const loadAndInitializePlayer = () => {\n//   if (!window.mistplayers) {\n//     const playerScript = document.createElement(\"script\");\n//     playerScript.src = location.protocol === \"https:\" ? \"https://mist.nottv.io:443/player.js\" : \"http://mist.nottv.io:8080/player.js\";\n//     document.head.appendChild(playerScript);\n//     playerScript.onload = initializePlayer;\n//   } else {\n//     initializePlayer();\n//   }\n// };\n//\n// const removePlayer = () => {\n//   const targetElement = document.getElementById(playerTargetId.value);\n//   if (targetElement) {\n//     // Option 1: Remove the child element completely\n//     targetElement.parentNode.removeChild(targetElement);\n//\n//     // OR Option 2: Reset the content of the element\n//     // targetElement.innerHTML = '';\n//\n//     console.log('Video player removed.');\n//   } else {\n//     console.error('Target element for video player not found for removal.');\n//   }\n// };\n//\n// onMounted(() => {\n//   playerTargetId.value = `${props.show.mist_stream_wildcard.name}-${Date.now()}` // Set the target ID based on props\n//   console.log(playerTargetId.value)\n//   loadAndInitializePlayer();\n//   // nextTick(() => {\n//   //   loadAndInitializePlayer();\n//   // });\n// });\n//\n// // onMounted(() => {\n// //\n// //   // loadAndInitializePlayer()\n// //   if (!window.mistplayers) {\n// //     const playerScript = document.createElement(\"script\");\n// //     playerScript.src = location.protocol === \"https:\" ? \"https://mist.nottv.io:443/player.js\" : \"http://mist.nottv.io:8080/player.js\";\n// //     document.head.appendChild(playerScript);\n// //     playerScript.onload = initializePlayer;\n// //   } else {\n// //     initializePlayer();\n// //   }\n// // });\n//\n// // Define `reloadPlayer` method to reload the player. This could be the same as `initializePlayer`\n// // if reloading simply means reinitializing.\n// const reloadPlayer = () => {\n//   // Remove the existing player and its container\n//   removePlayer();\n//\n//   // Recreate the container element for the player\n//   const newPlayerContainer = document.createElement('div');\n//   newPlayerContainer.id = `${props.show.mist_stream_wildcard.name}-${Date.now()}`; // Set the new target ID\n//   playerTargetId.value = newPlayerContainer.id; // Update the reactive reference\n//\n//   // Append the new container to the appropriate parent element in your DOM\n//   // Replace `parentElementSelector` with the actual selector of the parent where the player should be attached\n//   const parentElement = document.querySelector('parentElementSelector');\n//   if (parentElement) {\n//     parentElement.appendChild(newPlayerContainer);\n//   } else {\n//     console.error('Parent element for video player not found.');\n//     return;\n//   }\n//\n//   // Initialize the player in the new container\n//   loadAndInitializePlayer();\n// };\n//\n// // If there's a need to watch for `playerTargetId` changes to reinitialize the player\n// watch(() => playerTargetId.value, (newVal) => {\n//   // Load and initialize player only if newVal is truthy\n//   if (newVal) {\n//     loadAndInitializePlayer();\n//   }\n// });\n//\n// // const loadAndInitializePlayer = () => {\n// //   if (!window.mistplayers) {\n// //     const playerScript = document.createElement(\"script\");\n// //     playerScript.src = location.protocol === \"https:\" ? \"https://mist.nottv.io:443/player.js\" : \"http://mist.nottv.io:8080/player.js\";\n// //     document.head.appendChild(playerScript);\n// //     playerScript.onload = initializePlayer;\n// //   } else {\n// //     initializePlayer();\n// //   }\n// // };\n//\n// // onBeforeUnmount(() => {\n// //   // Example cleanup logic; adjust based on your player's API\n// //   if (window.mistplayers && window.mistplayers[playerTargetId.value]) {\n// //     window.mistplayers[playerTargetId.value].destroy(); // Hypothetical destroy method\n// //   }\n// // });\n//\n// onBeforeUnmount(() => {\n//   if (videoPlayer && typeof videoPlayer.dispose === 'function') {\n//     videoPlayer.dispose();\n//   }\n// });\n// let videoEmbedCode = props.episode.video_file_embed_code;\n\n// const timeAgo = useTimeAgo(new Date(2023, 10, 5))\n// const timeAgo = useTimeAgo(props.episode.scheduledDateTime)\n</script>\n","import script from \"./GoLive.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./GoLive.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n  <Head title=\"Go Live\"/>\n  <!--        <template #header>-->\n  <!--            <h2 class=\"font-semibold text-xl text-gray-800 leading-tight\">-->\n  <!--                Dashboard-->\n  <!--            </h2>-->\n  <!--        </template>-->\n\n  <!--        <div class=\"py-12\">-->\n  <!--            <div class=\"max-w-7xl mx-auto sm:px-6 lg:px-8\">-->\n  <!--                <div class=\"bg-white overflow-hidden shadow-xl sm:rounded-lg\">-->\n\n  <div class=\"place-self-center flex flex-col gap-y-3\">\n    <div id=\"topDiv\" class=\"bg-white text-black p-5 mb-10\">\n\n      <Message v-if=\"appSettingStore.showFlashMessage\" :flash=\"$page.props.flash\"/>\n\n      <div class=\"flex justify-between mx-4 px-6\">\n        <div class=\"grid grid-cols-1 grid-rows-2\">\n          <h1 class=\"text-3xl font-semibold\">Go Live</h1>\n        </div>\n        <div>\n          <CancelButton/>\n        </div>\n        <!--                <div class=\"grid grid-cols-1 grid-rows-2\">-->\n        <!--                    <div class=\"justify-self-end\">-->\n        <!--                        <Link :href=\"`/dashboard`\"><button-->\n        <!--                            class=\"px-4 py-2 text-white bg-blue-600 hover:bg-blue-500 rounded-lg\"-->\n        <!--                        >Dashboard</button>-->\n        <!--                        </Link>-->\n        <!--                    </div>-->\n        <!--                </div>-->\n      </div>\n\n      <div v-if=\"goLiveStore.shows && goLiveStore.shows.length > 0\" class=\"mb-6 mx-4 px-6\">\n        <label class=\"block mb-2 uppercase font-bold text-xs text-light text-gray-700\"\n               for=\"show\"\n        >\n          Select Show To Go Live On\n        </label>\n\n        <select\n            class=\"border border-gray-400 text-gray-800 p-2 w-full rounded-lg block my-2 uppercase font-bold text-xs \"\n            v-model=\"goLiveStore.selectedShowId\"\n            @change=\"reloadPlayer\"\n        >\n          <option disabled value=\"\">Select show</option>\n          <option v-for=\"show in goLiveStore.shows\"\n                  :key=\"show.id\" :value=\"show.id\">{{ show.name }}\n          </option>\n\n        </select>\n\n\n\n      </div>\n\n      <div v-else class=\"bg-black w-3/4 text-center px-10 py-6 text-white mx-auto border-red-700 border-2\">\n        You don't have any shows to go live with... please check your show(s).\n      </div>\n\n      <div v-if=\"goLiveStore.selectedShow\" class=\"text-2xl font-semibold text-center w-full\">\n        <Link :href=\"`/shows/${goLiveStore.selectedShow.slug}/manage`\">{{goLiveStore.selectedShow.name}}</Link>\n      </div>\n\n      <GoLive v-if=\"goLiveStore.selectedShow && goLiveStore.selectedShow.mist_stream_wildcard_id\" />\n      <div v-if=\"goLiveStore.selectedShow && !goLiveStore.selectedShow.mist_stream_wildcard_id\" class=\"flex flex-col justify-items-center text-center px-16\">\n        <div class=\"mb-3\">Please generate a stream key:</div>\n        <div><button @click=\"handleGenerateStreamKey\" class=\"btn btn-sm w-fit bg-green-500 hover:bg-green-700 text-white\">generate key</button></div>\n      </div>\n    </div>\n  </div>\n  <!--                </div>-->\n  <!--            </div>-->\n  <!--        </div>-->\n\n  <ManageShowEpisodeNoticeModals />\n</template>\n\n<script setup>\nimport { usePageSetup } from '@/Utilities/PageSetup'\nimport { useAppSettingStore } from '@/Stores/AppSettingStore'\nimport { useVideoPlayerStore } from '@/Stores/VideoPlayerStore'\nimport { useVideoAuxPlayerStore } from '@/Stores/VideoAuxPlayerStore'\nimport { useGoLiveStore } from '@/Stores/GoLiveStore'\nimport Message from '@/Components/Global/Modals/Messages'\nimport CancelButton from '@/Components/Global/Buttons/CancelButton'\nimport GoLive from '@/Components/Global/GoLive/GoLive'\nimport { computed, onMounted, ref, watch, withDefaults } from 'vue'\nimport videojs from 'video.js'\nimport ManageShowEpisodeNoticeModals from '@/Components/Pages/ShowEpisodes/Elements/ManageShowEpisodeNoticeModals.vue'\n\nusePageSetup('goLive')\n\nconst appSettingStore = useAppSettingStore()\nconst videoPlayerStore = useVideoPlayerStore()\nconst videoAuxPlayerStore = useVideoAuxPlayerStore()\nconst goLiveStore = useGoLiveStore()\n\nconst props = defineProps({\n  shows: Object\n})\n\nonMounted(async () => {\n  goLiveStore.fetchShows().then(() => {\n    if (goLiveStore.preSelectedShowId) {\n      goLiveStore.selectedShowId = goLiveStore.preSelectedShowId;\n    }\n  });\n});\n\n// const selectedShowId = ref('');\n// const selectedShow = computed(() => {\n//   return props.shows?.find(show => show.id === selectedShowId.value) || null;\n// });\n// const selectedShow = computed(() => goLiveStore.selectedShow);\n\nconst reloadPlayer = () => {\n  let source = goLiveStore.selectedShow.mist_stream_wildcard.name\n  let sourceUrl = videoAuxPlayerStore.mistServerUri + 'hls/' + source + '/index.m3u8'\n  console.log('source url: ' + sourceUrl)\n  let sourceType = 'application/vnd.apple.mpegurl'\n  let videoJs = videojs('aux-player')\n  videoJs.src({'src': sourceUrl, 'type': sourceType})\n  // videoAuxPlayerStore.loadNewLiveSource(source, sourceType)\n  goLiveStore.fetchStreamInfo(goLiveStore.selectedShow.mist_stream_wildcard.name);\n  console.log('reload player')\n}\n\nconst onChangeShow = (event) => {\n  goLiveStore.setSelectedShowId(event);\n  goLiveStore.fetchStreamInfo(goLiveStore.selectedShow.mist_stream_wildcard.name);\n  reloadPlayer()\n  // videoAuxPlayerStore.loadNewVideo(goLiveStore.selectedShow.mist)\n};\n\n\n\nconst handleGenerateStreamKey = async () => {\n  await goLiveStore.generateStreamKey();\n};\n\n// const generateStreamKey = () => {\n//   // Ensure selectedShowId is accessible and has a value\n//   if (!goLiveStore.selectedShowId.value) {\n//     console.error(\"No show selected\");\n//     return; // Exit the function if no show is selected\n//   }\n//\n//   axios.post(`/go-live/shows/${goLiveStore.selectedShowId.value}/stream-key`)\n//       .then(response => {\n//         // Handle the successful response here\n//         console.log(\"Stream key generated:\", response.data);\n//         // You might want to do something with the response data, like updating a data property\n//       })\n//       .catch(error => {\n//         // Handle any errors here\n//         console.error(\"Error generating stream key:\", error.response ? error.response.data : error);\n//       });\n// }\n\nwatch(goLiveStore.preSelectedShowId, (newVal, oldVal) => {\n  if (newVal !== '') {\n    // Assuming the video player is ready to be initialized at this point\n    // const videoPlayer = videojs('main-player');\n    videoPlayerStore.mute()\n    // goLiveStore.selectedShowId = selectedShowId\n\n    // Additional logic to load the video based on selectedShowId can be added here\n  }\n});\n</script>\n\n"],"names":["_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","delegateYield","asyncGeneratorStep","gen","reject","_next","_throw","key","info","error","_asyncToGenerator","fn","self","args","arguments","apply","err","undefined","initialState","preSelectedShowId","selectedShowId","selectedShow","shows","streamKey","isLive","streamInfo","useGoLiveStore","defineStore","state","actions","assign","this","fetchShows","_this","_callee","response","_context","axios","get","data","t0","console","generateStreamKey","_this2","_callee2","_context2","post","concat","log","setSelectedShowId","showId","updateSelectedShow","_this3","find","show","id","goLive","stopLive","fetchStreamInfo","streamName","_this4","_callee3","encodedStreamName","_context3","encodeURIComponent","fetch","ok","json","clearStreamInfo","getters","mistServerUri","player","eventListenersAttached","videoPlayerLoaded","class","videoContainerClass","videoSourceIdSrc1","videoSourceIdSrc2","videoSourceIdSrc3","videoSourceTypeSrc1","videoSourceTypeSrc2","videoSourceTypeSrc3","firstPlayVideoSourceType","firstPlayVideoSource","videoName","videoSource","videoSourceType","videoPoster","nextSource","previousSource","currentView","currentChannelId","currentChannelName","currentShow","currentShowEpisode","currentVideo","hasVideo","controls","muted","paused","currentTime","duration","formattedTime","blue","videoIsYoutube","videoUploadComplete","useVideoAuxPlayerStore","getMistServerUri","setPlayer","playerInstance","initializePlayer","attachEventListeners","nextTick","useAudioStore","ensureAudioContextAndNodesReady","ready","play","on","handleTimeUpdate","handleFullscreenChange","handlePlay","handlePause","handleError","detachEventListeners","stopAudioLevelMonitoring","off","disposePlayer","dispose","prepareForNewVideoSource","source","useChannelStore","clearChannel","loadNewVideo","resetPlayback","pause","formatDuration","durationInSeconds","Math","floor","map","part","toString","padStart","join","_this$player","isFullscreen","_this$player2","_this5","_this$player3","_this6","_this$player4","code","message","makeBlue","toggleMute","unMute","mute","togglePlay","videoJs","videojs","load","loadNewLiveSource","sourceType","fullSourceUrl","src","back","fullscreen","requestFullscreen","getVideoCurrentTime","videoCurrentTime","getSourceDetails","videoSrc","mediaType","video_url","cdn_endpoint","cloud_folder","folder","file_name","_this7","audioStore","_this$getSourceDetail","deferAudioSetup","useNotificationStore","setGeneralServiceNotification","playNewVideo","_this8","loadNewSourceFromYouTube","loadNewLiveSourceFromRumble","loadNewSourceFromUrl","loadNewSourceFromMist","loadNewSourceFromFile","filePath","loadExternalSourceVideo","loadPlaylistVideos","loadMistStreamVideo","mistStream","_this9","basePath","loadVideoFromFile","video","_this10","_callee4","_context4","setNowPlayingInfoVideoFile","nowPlayingType","nowPlayingName","useStreamStore","currentChannel","setNowPlayingInfoShow","episode","clearNowPlayingInfo","showStore","useShowStore","firstPlayVideo","setName","setEpisodeUrl","slug","setUrl","setEpisodeName","makeVideoPiP","makeVideoFullPage","appSettingStore","useAppSettingStore","userStore","useUserStore","fullPage","hidePage","ott","isMobile","makeVideoTopRight","currentPageIsStream","makeVideoWelcomePage","loggedIn","usePageSetup","pageName","videoPlayerStore","useVideoPlayerStore","currentPage","showFlashMessage","pageIsHidden","onBeforeMount","pageReload","window","location","reload","onMounted","search","topDiv","document","getElementById","scrollIntoView","setPrevUrl","noLayout","showOttButtons","___CSS_LOADER_EXPORT___","module","props","__props","cancel","prevUrl","url","Inertia","visit","isCreator","clearFlashMessage","computed","flash","success","warning","_ref","route","videoAuxPlayerStore","videoElementId","playerOptions","controlBar","audioTrackButton","autoHide","captionsButton","chaptersButton","currentTimeDisplay","customControlSpacer","descriptionsButton","durationDisplay","fullscreenToggle","liveDisplay","pictureInPictureToggle","playToggle","playbackRateMenuButton","progressControl","seekBar","remainingTimeDisplay","seekToLive","subsCapsButton","subtitlesButton","timeDivider","volumePanel","inline","volumeBar","vertical","userActions","hotkeys","inactivityTimeout","autoplay","preload","html5","hls","overrideNative","browser","IS_SAFARI","videoAuxPlayer","el","addEventListener","event","preventDefault","onBeforeUnmount","options","locals","goLiveStore","mist_stream_wildcard","reloadPlayer","sourceUrl","startCountdown","countdown","ref","formattedCountdown","minutes","seconds","interval","setInterval","clearInterval","handleGenerateStreamKey","_ref2","watch","newVal","oldVal"],"sourceRoot":""}