{"version":3,"file":"js/4679.js","mappings":"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","sources":["webpack:///./resources/js/Utilities/TimeUtils.js","webpack:///./resources/js/Stores/ScheduleStore.js"],"sourcesContent":["// utilities/timeUtils.js\nimport dayjs from 'dayjs';\nimport utc from 'dayjs/plugin/utc';\nimport timezone from 'dayjs/plugin/timezone';\n\ndayjs.extend(utc);\ndayjs.extend(timezone);\n\n/**\n * Creates an array of Date objects representing time slots.\n *\n * This function generates a sequence of time slots starting from a specified\n * start time, continuing for a given number of hours, and spaced apart\n * by a specified interval in minutes.\n *\n * @param {Date} start - The start time from which to generate slots, as a Date object.\n * @param {number} [durationHours=4] - The total duration for which to generate slots, in hours.\n * @param {number} [intervalMinutes=30] - The interval between each slot, in minutes.\n * @param {string} timezone - The timezone in which the time slots will be calculated.\n * @returns {Date[]} An array of Date objects, each representing a time slot.\n *\n * Example:\n * If start is `new Date('2024-01-01T08:00:00Z')`, durationHours is 2, and intervalMinutes is 30,\n * the output will be an array of Date objects representing the times:\n * `08:00`, `08:30`, `09:00`, and `09:30`.\n */\nexport function createTimeSlots(start, durationHours = 4, intervalMinutes = 30, timezone) {\n    // console.log(`Creating time slots starting from ${start}, for ${durationHours} hours, every ${intervalMinutes} minutes in timezone ${timezone}.`);\n    let slots = [];\n    let startTime = dayjs(start).tz(timezone);  // Convert start time to the correct time zone\n    for (let i = 0; i < (durationHours * 60) / intervalMinutes; i++) {\n        let slotTime = startTime.add(i * intervalMinutes, 'minute').toDate();  // Generate slots in the correct time zone\n        slots.push(slotTime);  // Keep as Date object\n    }\n    return slots;\n}\n// export function createTimeSlots(start, durationHours = 4, intervalMinutes = 30) {\n//     let slots = [];\n//     let startTime = dayjs(start).tz(userStore.timezone);  // Convert start time to the correct time zone\n//     for (let i = 0; i < (durationHours * 60) / intervalMinutes; i++) {\n//         let slotTime = new Date(start.getTime() + i * intervalMinutes * 60000);\n//         slots.push(slotTime);  // Keep as Date object\n//     }\n//     return slots;\n// }","import { defineStore } from 'pinia'\nimport { useUserStore } from '@/Stores/UserStore'\nimport { useAppSettingStore } from '@/Stores/AppSettingStore'\nimport { createTimeSlots } from '@/Utilities/TimeUtils'\nimport {\n    addDays,\n    addHours,\n    addMonths,\n    eachDayOfInterval,\n    eachHourOfInterval,\n    endOfMonth,\n    endOfWeek,\n    format,\n    getHours,\n    getMonth,\n    getYear,\n    isSameDay,\n    isToday,\n    isTomorrow,\n    isYesterday,\n    startOfDay,\n    startOfHour,\n    startOfMonth,\n    startOfWeek,\n    subMonths,\n} from 'date-fns'\n\n// Import dayjs and its plugins\nimport dayjs from 'dayjs'\nimport isSameOrAfter from 'dayjs/plugin/isSameOrAfter'\nimport isSameOrBefore from 'dayjs/plugin/isSameOrBefore' // To check if the day is the same\nimport relativeTime from 'dayjs/plugin/relativeTime'\nimport duration from 'dayjs/plugin/duration'\nimport timezone from 'dayjs/plugin/timezone'\nimport utc from 'dayjs/plugin/utc'\nimport weekOfYear from 'dayjs/plugin/weekOfYear' // For week start and end calculations\nimport advancedFormat from 'dayjs/plugin/advancedFormat' // For more complex formatting options\n\n// Extend dayjs with the plugins\ndayjs.extend(relativeTime)\ndayjs.extend(duration)\ndayjs.extend(timezone)\ndayjs.extend(weekOfYear)\ndayjs.extend(advancedFormat)\ndayjs.extend(utc)\ndayjs.extend(isSameOrAfter)\ndayjs.extend(isSameOrBefore)\n\nfunction convertScheduleToTimezone(scheduleData) {\n    const userStore = useUserStore() // Access the UserStore\n\n    return scheduleData.data.map(item => {\n        // Convert top-level start_time and end_time using UserStore methods\n        // console.log(`Original startTime for ${item.id}: ${item.startTime}`);\n        const startTimeInUserTz = item.startTime ? userStore.formatDateTimeFromUtcToUserTimezone(item.startTime, 'YYYY-MM-DD HH:mm:ss') : null\n        const endTimeInUserTz = item.endTime ? userStore.formatDateTimeFromUtcToUserTimezone(item.endTime, 'YYYY-MM-DD HH:mm:ss') : null\n        // Add debug logging to help trace conversion issues or confirm correct conversions\n        // console.log(`Converted startTime for ${item.id}: ${startTimeInUserTz}`);\n\n        return {\n            ...item,\n            startTime: startTimeInUserTz,\n            endTime: endTimeInUserTz,\n            timezone: userStore.timezone,\n        }\n    })\n}\n\n// Helper function to get dates within the next 6 hours from viewingWindowStart\nfunction getUpcomingContentDates(viewingWindowStart) {\n    let dates = []\n    let start = dayjs(viewingWindowStart) // Ensure viewingWindowStart is a Day.js object\n\n    for (let i = 0; i < 6; i++) {\n        // Add i hours to the start time, each time creating a new Day.js object\n        dates.push(start.add(i, 'hour').toDate()) // Convert to Date if necessary; otherwise keep as Day.js object\n    }\n\n    return dates\n}\n\nconst getTimeZone = () => {\n    const userStore = useUserStore()\n    // This function should return the timezone of the user.\n    // This could be dynamic based on the user's settings or browser settings.\n    // return Intl.DateTimeFormat().resolvedOptions().timeZone;\n    return userStore.timezone\n}\n\nconst initialState = () => ({\n    baseTime: dayjs().tz(getTimeZone()).toDate(),\n    currentHalfHour: dayjs().tz(getTimeZone()).startOf('hour').add(dayjs().minute() >= 30 ? 30 : 0, 'minute').toDate(),\n    fourHoursLater: dayjs().tz(getTimeZone()).startOf('hour').add(dayjs().minute() >= 30 ? 30 : 0, 'minute').add(4, 'hour').toDate(),\n    viewingWindowStart: dayjs().tz(getTimeZone()).startOf('hour').toDate(),\n    currentMonth: dayjs().tz(getTimeZone()).startOf('month').toDate(),\n    selectedDay: dayjs().tz(getTimeZone()).toDate(),\n    currentWeekStart: dayjs().tz(getTimeZone()).startOf('week').toDate(),\n    currentWeekEnd: dayjs().tz(getTimeZone()).endOf('week').toDate(),\n    nextFourHoursOfContent: [],\n    nextFourHoursOfContentWithPlaceholders: [],\n    // nextFourHoursWithHalfHourIntervals: [],\n    // viewingMode: 'automatic', // or 'userSelected'\n    fiveDaySixHourSchedule: [], // Holds the schedule shows 5 day / 6 hour structured data\n    todaysContent: [],\n    weeklyContent: [],\n    dataFetchLog: [],\n    scheduleIsLoading: false,\n    savingToSchedule: false,\n    slotIntervalMinutes: 30,\n    mediumScreenSlotHours: 4, // 4 hours = 8 slots\n    smallScreenSlotHours: 2, // 2 hours = 4 slots\n    verySmallScreenSlotHours: 1, // 1 hour = 2 slots\n    timeSlots: null,\n    timeBanners: [\n        {id: 1, name: 'Early Morning', startTime: '04:00', duration: 2},\n        {id: 2, name: 'Morning', startTime: '06:00', duration: 6},\n        {id: 3, name: 'Afternoon', startTime: '12:00', duration: 5},\n        {id: 4, name: 'Prime Time', startTime: '17:00', duration: 3},\n        {id: 5, name: 'Late Prime Time', startTime: '20:00', duration: 3},\n        {id: 6, name: 'Late Night', startTime: '23:00', duration: 2}, // Spans midnight to 01:00\n        {id: 7, name: 'Overnight', startTime: '01:00', duration: 3}, // Spans from 01:00 to 04:00\n    ]\n})\n\nexport const useScheduleStore = defineStore('scheduleStore', {\n    state: initialState,\n    actions: {\n        resetAll() {\n            // Reset the store to its original state (clear all data)\n            Object.assign(this, initialState())\n        },\n        reset() {\n            this.viewingWindowStart = dayjs().tz(getTimeZone()).startOf('hour').toDate()\n            this.currentMonth = dayjs().tz(getTimeZone()).startOf('month').toDate()\n            this.selectedDay = dayjs().tz(getTimeZone()).toDate()\n        },\n        async setSelectedDay(day) {\n            // Ensure that 'day' is a Day.js object, convert if coming as a native Date or string\n            const selectedDay = dayjs(day)\n\n            // Set the selected day\n            this.selectedDay = selectedDay.toDate() // Convert back to Date if necessary; otherwise keep as Day.js object\n\n            // Explicitly set the viewingWindowStart to 4 AM for the selected day\n            this.viewingWindowStart = selectedDay.startOf('day').add(4, 'hours').toDate()\n\n            // Set the start and end of the week based on the selected day\n            this.currentWeekStart = selectedDay.startOf('week').toDate() // Consider week starting on Sunday\n            this.currentWeekEnd = selectedDay.endOf('week').toDate() // Consider week ending on Saturday\n\n            // Use the updated fetch logic\n            await this.fetchWeekDataIfNeeded()\n        },\n        setSelectedDayToToday(day) {\n            const now = dayjs()  // Create a Day.js object for the current date and time\n\n            // Set selectedDay to the current date and time\n            this.selectedDay = now.toDate() // Convert back to Date if necessary; otherwise keep as Day.js object\n\n            // Set viewingWindowStart to the start of the current hour using Day.js\n            this.viewingWindowStart = now.startOf('hour').toDate()\n        },\n        async changeDay(days) {\n            const currentTimeZone = getTimeZone() // or however you obtain the timezone\n            // Extract the time component from the current viewing window start\n            const currentTime = dayjs(this.viewingWindowStart).hour() * 60 + dayjs(this.viewingWindowStart).minute()\n\n            // Create a new day and set it to the start of that day\n            let newDay = dayjs(this.viewingWindowStart).tz(currentTimeZone).add(days, 'day').startOf('day')\n\n            // Set the time back to the original time\n            newDay = newDay.add(currentTime, 'minute')\n\n            // Depending on your application's needs, you may or may not need to convert it back to a JavaScript Date object\n            // If you need a Date object:\n            this.viewingWindowStart = newDay.toDate()\n\n            // If you can use dayjs objects directly (preferred if possible):\n            this.viewingWindowStart = newDay\n\n            // // Check if the week of the new day is already loaded\n            // const weekStart = startOfWeek(newDay, {weekStartsOn: 0});\n            // const weekEnd = endOfWeek(newDay, {weekStartsOn: 0});\n\n            // Use the updated centralized fetch logic without redundant checks\n            await this.fetchWeekDataIfNeeded()\n\n            // // Check for the need to load data for the new week\n            // if (this.needsDataForWeek(weekStart, weekEnd)) {\n            //     await this.loadWeekFromDate(newDay).catch(error => {\n            //         console.error(\"Failed to load data for the new week:\", error);\n            //     });\n            // }\n\n            // // Check for the need to load data for the new week\n            // if (!this.needsDataForWeek()) {\n            //     // Data for the current week has already been loaded; skip fetching\n            //     console.log(\"Data for the current week has already been loaded; skipping redundant fetch.\");\n            //     return;\n            // }\n            //\n            // // Proceed with data fetching if needed\n            // await this.checkAndFetchForUpcomingContent();\n        },\n        async shiftHours(hours) {\n            // Shift the viewing window by the specified number of hours\n            this.viewingWindowStart = dayjs(this.viewingWindowStart).add(hours, 'hour').toDate()\n\n            // Set the current week start and end based on the new viewing window start\n            this.currentWeekStart = dayjs(this.viewingWindowStart).startOf('week').toDate()\n            this.currentWeekEnd = dayjs(this.viewingWindowStart).endOf('week').toDate()\n\n            // If the day has changed, update selectedDay and the week's range\n            if (!dayjs(this.viewingWindowStart).isSame(dayjs(this.selectedDay), 'day')) {\n                this.selectedDay = dayjs(this.viewingWindowStart).startOf('day').toDate()\n            }\n\n            // Use the updated fetch logic\n            await this.fetchWeekDataIfNeeded()\n        },\n        isElevenPM(date) {\n            // Convert the date to a Day.js object if it's not already one\n            const time = dayjs(date)\n            // Check if the hour is 23 (11 PM)\n            return time.hour() === 23\n        },\n        // Actions to change the month\n        async subtractMonth() {\n            // Convert currentMonth to a Day.js object if it's not already and subtract one month\n            this.currentMonth = dayjs(this.currentMonth).subtract(1, 'month').toDate()\n\n            try {\n                // Pass the new currentMonth to setSelectedDay\n                await this.setSelectedDay(this.currentMonth)\n                console.log('Set selected day based on current month:', this.currentMonth)\n            } catch (error) {\n                console.error(`Failed to set selected day based on current month ${this.currentMonth}:`, error)\n            }\n        },\n        async addMonth() {\n            // Convert currentMonth to a Day.js object if it's not already and add one month\n            this.currentMonth = dayjs(this.currentMonth).add(1, 'month').toDate()\n\n            try {\n                // Pass the new currentMonth to setSelectedDay\n                await this.setSelectedDay(this.currentMonth)\n                console.log('Set selected day based on current month:', this.currentMonth)\n            } catch (error) {\n                console.error(`Failed to set selected day based on current month ${this.currentMonth}:`, error)\n            }\n        },\n        async fetchFiveDaySixHourSchedule() {\n            console.error('fetchFiveDaySixHourSchedule')\n            try {\n                const userStore = useUserStore()\n                const response = await axios.get('/api/schedule')\n\n                // Fallback to response timezone if userStore.timezone is not set\n                const timezone = userStore.timezone || response.data.userTimezone || 'UTC' // Additional fallback to 'UTC'\n\n                // Convert the entire schedule, including nested recurrenceDetails, to the user's timezone\n                this.fiveDaySixHourSchedule = convertScheduleToTimezone(response.data, timezone)\n                console.error('fetchFiveDaySixHourSchedule', response.data)\n            } catch (error) {\n                console.error('Failed to load schedule shows:', error)\n                // Handle the error state as needed, e.g., setting an error state property\n            }\n        },\n        async fetchTodaysContent() {\n            try {\n                const userStore = useUserStore()\n                const response = await axios.get('/api/schedule/today')\n\n                // Fallback to response timezone if userStore.timezone is not set\n                const timezone = userStore.timezone || response.data.userTimezone || 'UTC' // Additional fallback to 'UTC'\n\n                this.todaysContent = convertScheduleToTimezone(response.data, timezone)\n            } catch (error) {\n                console.error('Failed to fetch today\\'s content:', error)\n            }\n        },\n        async preloadWeeklyContent() {\n            // Use the current date to preload content for the current week\n            const currentDate = dayjs() // Creates a Day.js object representing the current date and time\n\n            try {\n                // Call loadWeekFromDate with the current Day.js date object, converted to a Date if necessary\n                await this.loadWeekFromDate(currentDate.toDate()) // Convert to JavaScript Date if loadWeekFromDate expects a Date object\n            } catch (error) {\n                console.error('Failed to preload weekly content:', error)\n            }\n        },\n        async loadWeekFromDate(date) {\n            let formattedDate = null // Declare formattedDate outside of the try block\n            this.scheduleIsLoading = true\n            try {\n                const userStore = useUserStore()\n                // Ensure the date is in UTC format for the request\n                // console.log('Date before formatted: ' + date)\n                // Convert date to Day.js object and format it in ISO string with UTC\n                const dayDate = dayjs(date)\n                const fullISODate = dayDate.toISOString()\n                // console.log(`Loading week data for date in UTC: ${fullISODate}`)\n\n                // Fetch the week's schedule data\n                // Send the dateTime and timezone as a JSON object in a POST request\n                const response = await axios.post(`/api/schedule/week/${fullISODate}`)\n\n                // const formattedDate = date.toISOString().split('T')[0];\n                // Log and error handling\n                const formattedDate = dayDate.format('YYYY-MM-DD') // For potential error messages and logging\n                // console.log(`Loading week data for date: ${formattedDate}`); // Log the date being requested\n                //\n                // const response = await axios.get(`/api/schedule/week/${formattedDate}`);\n                // console.log('Received response:', response.data) // Log the raw response data\n\n                // Fallback to response timezone if userStore.timezone is not set\n                const timezone = userStore.timezone || response.data.userTimezone || 'UTC' // Additional fallback to 'UTC'\n                // console.log(`Using timezone: ${timezone}`) // Log the timezone being used\n\n                const newData = convertScheduleToTimezone(response.data, timezone) // Ensure you are accessing the correct data property from the response\n\n                // Merge newData into weeklyContent, avoiding duplicates\n                this.weeklyContent = [...this.weeklyContent, ...newData].filter((value, index, self) =>\n                        index === self.findIndex((t) => (\n                            t.id === value.id && t.startTime === value.startTime\n                        )),\n                )\n\n                // Optionally update fetch logs or perform additional state updates\n                this.updateFetchLogs(date)\n\n                this.scheduleIsLoading = false\n            } catch (error) {\n                console.error(`Failed to load content for week starting ${formattedDate}:`, error)\n                this.scheduleIsLoading = false\n            }\n        },\n        updateFetchLogs(date) {\n            // Convert date to a Day.js object if it's not already one\n            const dayDate = dayjs(date)\n\n            // Use Day.js to calculate the start and end of the week\n            const weekStart = dayDate.startOf('week').toISOString() // Assumes the week starts on Sunday\n            const weekEnd = dayDate.endOf('week').toISOString() // Assumes the week ends on Saturday\n            const fetchTime = dayjs().toISOString() // Current time in ISO format\n\n            // Find existing log entry for the week\n            const existingLogIndex = this.dataFetchLog.findIndex(log =>\n                log.weekStart === weekStart && log.weekEnd === weekEnd)\n\n            if (existingLogIndex !== -1) {\n                // Update the last fetch time if the log already exists\n                this.dataFetchLog[existingLogIndex].lastFetch = fetchTime\n            } else {\n                // Add a new log entry if it does not exist\n                this.dataFetchLog.push({weekStart, weekEnd, lastFetch: fetchTime})\n            }\n        },\n        needsDataForWeek() {\n            // Helper function to format dates to 'YYYY-MM-DD' for easier comparison\n            const formatISODate = (date) => dayjs(date).format('YYYY-MM-DD')\n\n            // Current week range in 'YYYY-MM-DD' format\n            const weekStartStr = formatISODate(this.currentWeekStart)\n            const weekEndStr = formatISODate(this.currentWeekEnd)\n\n            // Enhanced logging for debugging\n            console.log(`Current week range: ${weekStartStr} to ${weekEndStr}`)\n            console.log('Existing data fetch log entries:', this.dataFetchLog)\n\n            // Iterate through the fetch log to check if the current week has been fetched\n            const weekHasBeenFetched = this.dataFetchLog.some(log => {\n                // Convert log dates to 'YYYY-MM-DD' format for comparison\n                const logWeekStartStr = formatISODate(log.weekStart)\n                const logWeekEndStr = formatISODate(log.weekEnd)\n\n                // Log each comparison for insight\n                console.log(`Comparing to fetched range: ${logWeekStartStr} to ${logWeekEndStr}`)\n\n                return logWeekStartStr <= weekStartStr && logWeekEndStr >= weekEndStr\n            })\n\n            // Log the final determination\n            console.log(`Week from ${weekStartStr} to ${weekEndStr} has ${weekHasBeenFetched ? '' : 'not '}been fetched.`)\n\n            return !weekHasBeenFetched\n        },\n        calculateExtendedEndForUpcomingContent() {\n            // Convert viewingWindowStart to a Day.js object if it's not already one\n            const baseStartTime = dayjs(this.viewingWindowStart)\n\n            // Extend by 6 hours to cover the upcoming content span\n            // Day.js handles date and time addition cleanly, returning a new Day.js object\n            const extendedEndTime = baseStartTime.add(6, 'hour')\n\n            // Return the extended end time as a Date object, if needed elsewhere as a Date\n            return extendedEndTime.toDate()\n        },\n        // Function to check for and fetch missing upcoming content\n        async checkAndFetchForUpcomingContent() {\n            const upcomingDates = getUpcomingContentDates(this.viewingWindowStart) // Assuming this returns Day.js objects\n            const now = dayjs()\n            const fifteenMinutesAgo = now.subtract(15, 'minutes')\n\n            for (const date of upcomingDates) {\n                const dateString = date.format('YYYY-MM-DD')  // Day.js format for 'YYYY-MM-DD'\n                const contentCoverageAndFreshness = this.weeklyContent.some(content => {\n                    const contentDate = dayjs(content.startTime).format('YYYY-MM-DD')  // Convert and compare as 'YYYY-MM-DD'\n                    const lastFetchedTime = this.dataFetchLog[dateString]\n                    const isFresh = lastFetchedTime && dayjs(lastFetchedTime) > fifteenMinutesAgo\n                    return dateString === contentDate && isFresh\n                })\n\n                if (!contentCoverageAndFreshness) {\n                    // This date needs data fetching\n                    await this.fetchDataAndUpdateLog(dateString, date.toDate()) // Pass as Date if needed, or adjust downstream functions to accept Day.js objects\n                    break // Assuming you fetch data for the week, so no need to check further dates within the same week\n                }\n            }\n        },\n        async fetchDataAndUpdateLog(dateString, date) {\n            try {\n                // Assuming 'date' is already a Day.js object; if not, convert it\n                const dayDate = dayjs(date)\n\n                await this.loadWeekFromDate(dayDate.toDate())  // Pass as a Date if needed, or adjust 'loadWeekFromDate' to accept Day.js objects\n                // Successfully fetched, so update the log\n                this.dataFetchLog[dateString] = dayjs().toISOString()  // Use Day.js to get the current time in ISO format\n                console.log('Data fetched successfully for date:', dateString)\n            } catch (error) {\n                console.error(`Failed to fetch data for date ${dateString}:`, error)\n            }\n        },\n\n        // Updated to use this.currentWeekStart and this.currentWeekEnd directly\n        async fetchWeekDataIfNeeded() {\n            // Assumes this.currentWeekStart and this.currentWeekEnd are already set\n            if (this.needsDataForWeek()) {\n                await this.checkAndFetchForUpcomingContent().catch(error => {\n                    console.error('Failed to load data for the week:', error)\n                    return false // Indicates failure to fetch when an error occurs\n                })\n            } else {\n                console.log('Week data already loaded; no need to fetch.')\n            }\n        },\n\n        // Function to simply update baseTime with the given time (expected to be a Day.js object or compatible input)\n        updateBaseTime(time) {\n            // Ensure the time is a Day.js object when setting baseTime\n            this.baseTime = dayjs(time).toDate()  // Convert to Date if necessary; consider keeping it as Day.js object if possible\n        },\n\n        // Function to set baseTime based on a new time input (expected to be a string, Date, etc.)\n        setBaseTime(newTime) {\n            // Convert newTime to a Day.js object and then to Date if necessary\n            this.baseTime = dayjs(newTime).toDate()  // This handles various input formats and ensures consistency\n        },\n\n\n        /**\n         * This method orchestrates the update of show scheduling data for the next four hours.\n         * It is designed to be triggered when there are changes to the base time or when a manual refresh is needed.\n         * The method handles loading and organizing the scheduling data to be ready for display in the grid.\n         */\n        async updateNextFourHours() {\n            // Set the loading state to true to indicate that data processing is underway.\n            // This can be used to display a loading spinner or disable user interaction temporarily.\n            this.scheduleIsLoading = true\n\n            // Update the time range for the scheduling grid. This adjusts `currentHalfHour` and `fourHoursLater`\n            // based on the current `baseTime`. These values define the range of time for which shows will be displayed.\n            this.updateTimeRange()\n\n            // Update the time slots\n            this.setTimeSlots()\n\n            // Prepares the shows for the grid display by filtering, calculating grid slots,\n            // resolving conflicts, and optionally filling empty grid slots with placeholders.\n            // This step involves several functions that ensure shows are positioned correctly according to their\n            // start time, duration, and conflicts with other shows.\n            this.prepareShowsForGrid()\n\n            // Reset the loading state to false indicates that the data processing is complete.\n            // This allows the user interface to be interactive again and shows the updated data in the grid.\n            this.scheduleIsLoading = false\n        },\n\n\n        updateTimeRange() {\n            // Ensure the baseTime is interpreted correctly in the current user's timezone\n            const baseDate = dayjs(this.baseTime).tz(getTimeZone())\n\n            // Calculate the rounded minutes to either 0 or 30 based on the current time\n            const roundedMinutes = baseDate.minute() < 30 ? 0 : 30\n\n            // Set the current half hour, rounding down to the nearest half-hour mark\n            const currentHalfHour = baseDate.minute(roundedMinutes).second(0).millisecond(0).startOf('minute')\n\n            // Calculate four hours later from the current half-hour mark\n            const fourHoursLater = currentHalfHour.add(4, 'hours')\n\n            // Update the store's currentHalfHour and fourHoursLater ensuring they are Date objects if required\n            this.currentHalfHour = currentHalfHour.toDate()\n            this.fourHoursLater = fourHoursLater.toDate()\n\n            console.log('Fetching shows between:', currentHalfHour.format('YYYY-MM-DD HH:mm:ss'), 'and', fourHoursLater.format('YYYY-MM-DD HH:mm:ss'))\n        },\n\n        setTimeSlots() {\n            const appSettingStore = useAppSettingStore()\n            let slotHours\n\n            // Determine the number of slot hours based on screen size\n            if (appSettingStore.isVerySmallScreen) {\n                slotHours = this.verySmallScreenSlotHours\n            } else if (appSettingStore.isSmallScreen) {\n                slotHours = this.smallScreenSlotHours\n            } else {\n                slotHours = this.mediumScreenSlotHours\n            }\n\n            const intervalMinutes = this.slotIntervalMinutes\n            const slots = []\n            const totalSlots = (slotHours * 60) / intervalMinutes\n\n            // Ensure state.currentHalfHour is a Day.js object\n            const currentHalfHour = dayjs(this.currentHalfHour)\n\n            // Calculate the time for each slot using Day.js\n            for (let i = 0; i < totalSlots; i++) {\n                let slotTime = currentHalfHour.add(i * intervalMinutes, 'minute')\n                slots.push(slotTime.toDate())  // Convert back to JavaScript Date if necessary\n            }\n            this.timeSlots = slots\n            return slots.length\n        },\n\n        prepareShowsForGrid() {\n            // Step 1: Filter shows within the desired time range\n            const shows = this.filterShowsForTimeRange()\n\n            // Step 2: Calculate initial grid slots for these shows\n            const processedShows = this.calculateGridSlots(shows, this.timeSlots)\n\n            if (!this.timeSlots || !Array.isArray(this.timeSlots) || this.timeSlots.length === 0) {\n                console.error('timeSlots is not properly initialized.')\n                // Handle this scenario, e.g., by initializing timeSlots, or skipping the update\n                return\n            }\n\n            // Step 3: Process shows to set nowPlaying and comingUpNext flags\n            const showsWithStatusFlags = this.processShows(processedShows)\n\n            // Step 4: Update column occupancy and find the maximum row used\n            const {colOccupancy, maxRowUsed} = this.updateColumnOccupancy(showsWithStatusFlags, this.timeSlots.length)\n\n            // Step 5: Fill gaps in the grid with placeholders\n            const gridItems = this.fillGapsAndCreatePlaceholders(colOccupancy, maxRowUsed, this.timeSlots.length)\n\n            // Step 6: Combine processed shows with the placeholders\n            const combinedShows = [...showsWithStatusFlags, ...gridItems]\n\n            // Step 7: Sort and group shows by rows\n            this.nextFourHoursOfContent = this.sortShowsByPosition(combinedShows)\n        },\n\n        filterShowsForTimeRange() {\n            return this.weeklyContent.filter(show => {\n                // Validate show data integrity\n                if (typeof show.startTime !== 'string' || typeof show.durationMinutes !== 'number') {\n                    console.warn('Invalid show data:', show.startTime, show.durationMinutes)\n                    return false // Skip this show if it doesn't meet data expectations\n                }\n\n                const showStart = dayjs(show.startTime)\n                const showEnd = dayjs(show.endTime)\n                const isInTimeRange = showStart.isBefore(this.fourHoursLater) && showEnd.isAfter(this.currentHalfHour)\n\n                // Detailed logging for debugging\n                if (isInTimeRange) {\n                    const hasStarted = showStart.isBefore(this.currentHalfHour) ? 'already started' : 'starts within range'\n                    console.log(`Show: ${show.content.name}, ${hasStarted}, Start: ${showStart.format('HH:mm:ss')}, End: ${showEnd.format('HH:mm:ss')}, Duration: ${show.durationMinutes}`)\n                }\n\n                return isInTimeRange\n            })\n        },\n\n        calculateGridSlots(shows, timeSlots) {\n            // Validate the timeSlots array to prevent errors\n            if (!Array.isArray(timeSlots) || timeSlots.length === 0) {\n                console.error('Invalid or empty timeSlots array')\n                return [] // Exit if no valid time slots to work with\n            }\n\n            // Determine the range of timeSlots\n            const firstTimeSlot = dayjs(timeSlots[0])\n            const lastTimeSlot = dayjs(timeSlots[timeSlots.length - 1]).add(30, 'minutes')\n\n\n            return shows.filter(show => {\n                const showStart = dayjs(show.startTime)\n                const showEnd = dayjs(show.endTime)\n                return showStart.isBefore(lastTimeSlot) && showEnd.isAfter(firstTimeSlot)\n            }).map(show => {\n                const showStart = dayjs(show.startTime)\n                const showEnd = dayjs(show.endTime)\n                console.log('************************************')\n                console.log(`Processing show: ${show.content.name}, Start: ${show.startTime}, End: ${show.endTime}`)\n\n                // Find the index of the slot where the show should start\n                let slotIndex = timeSlots.findIndex(slot => showStart.isSameOrBefore(dayjs(slot)))\n\n                // Adjust if the show starts exactly at a slot time or just after the last checked slot time\n                if (slotIndex === -1 || showStart.isAfter(dayjs(timeSlots[slotIndex]))) {\n                    slotIndex = Math.max(0, slotIndex)\n                }\n\n                console.log(`Comparing show start ${showStart.format()} to timeSlot index ${slotIndex} at ${dayjs(timeSlots[slotIndex]).format()}`)\n\n                // Calculate the end slot index\n                let endSlotIndex = timeSlots.findIndex(slot => showEnd.isSameOrBefore(dayjs(slot).add(30, 'minutes')))\n\n                // If the end slot index points to a slot that starts after the show ends, subtract one\n                if (endSlotIndex !== -1 && showEnd.isBefore(dayjs(timeSlots[endSlotIndex]))) {\n                    endSlotIndex--\n                }\n\n                // Handle cases where the show ends after the last slot\n                if (endSlotIndex === -1 || showEnd.isSame(dayjs(timeSlots[timeSlots.length - 1]).add(30, 'minutes'))) {\n                    endSlotIndex = timeSlots.length - 1\n                }\n\n                console.log(`Comparing show end ${showEnd.format()} to timeSlot index ${endSlotIndex} at ${endSlotIndex !== -1 ? dayjs(timeSlots[endSlotIndex]).format() : 'out of range'}`)\n\n\n                // Calculate the number of slots the show should span\n                let span = endSlotIndex - slotIndex + 1\n\n                console.log(`Calculated gridStart: ${slotIndex + 1}, gridSpan: ${span}`)\n\n                return {\n                    ...show,\n                    gridStart: slotIndex + 1, // Convert to 1-based index for grid positioning\n                    gridSpan: span,\n                }\n            })\n        },\n\n        processShows(shows) {\n            let comingUpNextSet = false\n\n            shows.forEach(show => {\n                const start = dayjs(show.startTime)\n                const end = start.add(show.durationMinutes, 'minutes')\n                const now = dayjs(this.baseTime)\n\n                // Determine if the show is now playing\n                show.nowPlaying = !show.placeholder && now.isAfter(start) && now.isBefore(end) && show.gridStart === 1\n\n                // Find the first show that does not start in the first grid column\n                if (!comingUpNextSet && !show.placeholder && show.gridStart > 1) {\n                    show.comingUpNext = true\n                    comingUpNextSet = true  // Ensure only one show gets this flag\n                }\n            })\n\n            return shows\n        },\n\n        updateColumnOccupancy(processedShows, cols) {\n            let colOccupancy = new Array(cols).fill(null).map(() => new Set())\n            let maxRowUsed = 0\n            processedShows.forEach(show => {\n                for (let i = show.gridStart - 1; i < show.gridStart - 1 + show.gridSpan; i++) {\n                    if (i >= 0 && i < cols) {\n                        colOccupancy[i].add(show.gridRow)\n                        maxRowUsed = Math.max(maxRowUsed, show.gridRow)\n                    }\n                }\n            })\n            return {colOccupancy, maxRowUsed}\n        },\n\n        fillGapsAndCreatePlaceholders(colOccupancy, maxRowUsed, cols) {\n            let gridItems = []\n            // Ensure at least one row is processed even if no shows are present\n            maxRowUsed = Math.max(maxRowUsed, 1)\n            for (let row = 1; row <= maxRowUsed; row++) {\n                gridItems.push(...this.findAndFillGapsForSingleRow(colOccupancy, row, cols))\n            }\n            return gridItems\n        },\n\n        findAndFillGapsForSingleRow(colOccupancy, row, cols) {\n            let gridItems = []\n            let gapStart = -1\n            for (let i = 0; i < cols; i++) {\n                if (!colOccupancy[i].has(row)) {\n                    gapStart = gapStart === -1 ? i : gapStart\n                } else if (gapStart !== -1) {\n                    // Use different placeholders based on the row number\n                    if (row === 1) {\n                        gridItems.push(this.createPlaceholder(gapStart + 1, i - gapStart, row))\n                    } else {\n                        gridItems.push(this.createBlankSpotPlaceholder(gapStart + 1, i - gapStart, row))\n                    }\n                    gapStart = -1\n                }\n            }\n            if (gapStart !== -1) {\n                // Again, differentiate between the first row and other rows\n                if (row === 1) {\n                    gridItems.push(this.createPlaceholder(gapStart + 1, cols - gapStart, row))\n                } else {\n                    gridItems.push(this.createBlankSpotPlaceholder(gapStart + 1, cols - gapStart, row))\n                }\n            }\n            return gridItems\n        },\n\n        sortShowsByPosition(combinedShows) {\n            if (!Array.isArray(combinedShows)) {\n                console.error('Expected an array of shows, received:', combinedShows)\n                return [] // Return an empty array if not an array to prevent errors\n            }\n\n            // Sort shows directly by row and then by start position within each row\n            return combinedShows.sort((a, b) => a.gridRow - b.gridRow || a.gridStart - b.gridStart)\n        },\n\n        createPlaceholder(start, span, row) {\n            return {\n                placeholder: true,\n                startTime: 'placeholder',\n                priority: 0,\n                gridStart: start,\n                gridSpan: span,\n                gridRow: row,\n                content: {name: 'Nothing scheduled.'},\n            }\n        },\n\n        createBlankSpotPlaceholder(start, span, row) {\n            return {\n                placeholder: true,\n                startTime: 'placeholder',\n                priority: 0,\n                gridStart: start,\n                gridSpan: span,\n                gridRow: row,\n                content: {name: 'Blank Spot'}, // Ensure it is differentiated from normal placeholders\n            }\n        },\n\n    },\n\n    getters: {\n        currentTime: (state) => {\n            return dayjs(state.baseTime).format('h:mm A')\n        },\n        // Prepare banners with grid positions based on current time slots\n        preparedTimeBanners: (state) => {\n            const timeZone = getTimeZone(); // Ensure this is defined\n            let now = dayjs().tz(timeZone);\n            let todayStart = now.startOf('day');\n            let tomorrowStart = todayStart.add(1, 'day');\n\n            console.log('Current Time Slots:', state.timeSlots.map(slot => dayjs(slot).format('HH:mm')));\n\n            return state.timeBanners.flatMap(banner => {\n                // Create banner times for today and tomorrow to handle overnight spans\n                let bannerTodayStart = todayStart.hour(parseInt(banner.startTime.split(':')[0])).minute(parseInt(banner.startTime.split(':')[1]));\n                let bannerTodayEnd = bannerTodayStart.clone().add(banner.duration, 'hours');\n                let bannerTomorrowStart = tomorrowStart.hour(parseInt(banner.startTime.split(':')[0])).minute(parseInt(banner.startTime.split(':')[1]));\n                let bannerTomorrowEnd = bannerTomorrowStart.clone().add(banner.duration, 'hours');\n\n                // Create an array of potential banners for today and tomorrow\n                let potentialBanners = [\n                    { ...banner, start: bannerTodayStart, end: bannerTodayEnd },\n                    { ...banner, start: bannerTomorrowStart, end: bannerTomorrowEnd }\n                ];\n\n                return potentialBanners.map(banner => {\n                    const startSlotIndex = state.timeSlots.findIndex(slot => banner.start.isSameOrBefore(dayjs(slot)) && banner.end.isAfter(dayjs(slot)));\n                    let endSlotIndex = state.timeSlots.findIndex(slot => banner.end.isSameOrBefore(dayjs(slot)));\n\n                    // Adjust the end index to be inclusive of the end time\n                    if (endSlotIndex === -1 || banner.end.isAfter(dayjs(state.timeSlots[state.timeSlots.length - 1]))) {\n                        endSlotIndex = state.timeSlots.length - 1;\n                    } else {\n                        endSlotIndex -= 1;\n                    }\n\n                    const gridStart = startSlotIndex + 1;\n                    const gridSpan = endSlotIndex - startSlotIndex + 1;\n\n                    console.log(`Processing Banner: ${banner.name}`);\n                    console.log(`StartTime: ${banner.start.format('HH:mm')}, EndTime: ${banner.end.format('HH:mm')}`);\n                    console.log(`StartSlotIndex: ${startSlotIndex}, EndSlotIndex: ${endSlotIndex}`);\n                    console.log(`Calculated gridStart: ${gridStart}, gridSpan: ${gridSpan}`);\n\n                    // Ensure the banner should be displayed within the current time slots\n                    if (gridStart && gridSpan > 0) {\n                        return { ...banner, gridStart, gridSpan };\n                    }\n                    return null;\n                });\n            }).filter(banner => banner != null); // Filter out banners that don't fit within the current time slots\n        },\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        // setTimeSlots: (state) => {\n        //     const appSettingStore = useAppSettingStore()\n        //     let slotHours\n        //\n        //     // Determine the number of slot hours based on screen size\n        //     if (appSettingStore.isVerySmallScreen) {\n        //         slotHours = state.verySmallScreenSlotHours\n        //     } else if (appSettingStore.isSmallScreen) {\n        //         slotHours = state.smallScreenSlotHours\n        //     } else {\n        //         slotHours = state.mediumScreenSlotHours\n        //     }\n        //\n        //     const intervalMinutes = state.slotIntervalMinutes\n        //     const slots = []\n        //     const totalSlots = (slotHours * 60) / intervalMinutes\n        //\n        //     // Ensure state.currentHalfHour is a Day.js object\n        //     const currentHalfHour = dayjs(state.currentHalfHour)\n        //\n        //     // Calculate the time for each slot using Day.js\n        //     for (let i = 0; i < totalSlots; i++) {\n        //         let slotTime = currentHalfHour.add(i * intervalMinutes, 'minute')\n        //         slots.push(slotTime.toDate())  // Convert back to JavaScript Date if necessary\n        //     }\n        //     state.timeSlots = slots\n        //     return slots.length\n        // },\n\n        nextFourHoursWithHalfHourIntervals: (state) => {\n            const userStore = useUserStore() // Access the user store\n            const appSettingStore = useAppSettingStore() // Access the settings store\n            const userTimezone = userStore.timezone // Get the user's timezone\n            const cols = state.timeSlots.length\n\n\n            const intervals = []\n            const now = dayjs(state.baseTime).tz(userTimezone) // Get the current time in the user's timezone\n\n            // Determine if the current minute is less than 30 to start at the top of the hour or at the half-hour\n            let current = now.minute() < 30 ? now.startOf('hour') : now.startOf('hour').add(30, 'minutes')\n\n\n            // Generate intervals for the next 4 hours, each 30 minutes apart\n            // Adjust the loop count based on the number of columns/ intervals needed\n            for (let i = 0; i < cols; i++) { // Adjust the number of intervals based on the screen size\n                intervals.push({\n                    formatted: current.format('hh:mm A'), // Formatted time for display\n                    dateTimeString: current.format('YYYY-MM-DD HH:mm:ss'), // Y-m-d H:m:s format for comparisons\n                })\n                current = current.add(30, 'minute') // Move to the next 30-minute interval\n            }\n\n            return intervals\n        },\n\n        upcomingContent: (state) => {\n            // Since viewingWindowStart is now a Day.js object, use Day.js methods directly\n            const start = dayjs(state.viewingWindowStart).subtract(1, 'hour') // 1 hour earlier\n            const end = start.add(7, 'hours') // 6 hours later from the start\n\n            // Group shows by start time using Day.js\n            const showsGroupedByStartTime = state.weeklyContent.reduce((acc, item) => {\n                const itemStart = dayjs(item.startTime).valueOf() // Use .valueOf() to get the timestamp\n                if (!acc[itemStart]) {\n                    acc[itemStart] = []\n                }\n                acc[itemStart].push(item)\n                return acc\n            }, {})\n\n            // Select the show with the lowest priority for each start time\n            const selectedShows = Object.values(showsGroupedByStartTime).map(group => {\n                return group.reduce((selected, item) => {\n                    return !selected || item.priority < selected.priority ? item : selected\n                }, null)\n            })\n\n            // Filter shows that fall within the next 6-hour window and sort them\n            return selectedShows\n                .filter(item => {\n                    const itemStart = dayjs(item.startTime)\n                    return itemStart.isSameOrAfter(start) && itemStart.isBefore(end)\n                })\n                .sort((a, b) => dayjs(a.startTime).unix() - dayjs(b.startTime).unix()) // Sorting by Unix timestamp\n        },\n\n\n        nextSixHours: (state) => {\n            // Assuming state.viewingWindowStart is already a Day.js object.\n            // If it's still a native Date, convert it first:\n            let adjustedStart = dayjs(state.viewingWindowStart)\n\n            // Add 6 hours to the adjusted start time\n            const end = adjustedStart.add(6, 'hours')\n\n            // Generate each hour of the interval between adjustedStart and end\n            const hours = []\n            let hour = adjustedStart\n\n            while (hour.isBefore(end)) {\n                hours.push(hour.toDate()) // Convert back to Date if necessary; otherwise, just use `hour` if you can use Day.js objects directly\n                hour = hour.add(1, 'hour')\n            }\n\n            return hours\n        },\n\n        dateMessage: (state) => {\n            const startDay = startOfDay(state.viewingWindowStart)\n            const formattedDate = format(startDay, 'EEEE MMMM do, yyyy')\n            if (isToday(startDay)) {\n                return `Today - ${formattedDate}`\n            } else if (isYesterday(startDay)) {\n                return `Yesterday - ${formattedDate}`\n            } else if (isTomorrow(startDay)) {\n                return `Tomorrow - ${formattedDate}`\n            } else {\n                return formattedDate\n            }\n        },\n\n        currentMonthIndex: (state) => {\n            // Ensure state.currentMonth is converted to a Day.js object\n            const month = dayjs(state.currentMonth)\n            // Day.js months are 0-indexed just like JavaScript Date, returns the month (0-11)\n            return month.month()\n        },\n\n        currentMonthName: (state) => {\n            // Ensure state.currentMonth is converted to a Day.js object\n            const month = dayjs(state.currentMonth)\n            // Returns the full name of the month, e.g., 'January', 'February', etc.\n            return month.format('MMMM')\n        },\n\n        currentYear: (state) => {\n            // Ensure state.currentMonth is converted to a Day.js object\n            const month = dayjs(state.currentMonth)\n            // Returns the year\n            return month.year()\n        },\n        isToday: (state) => {\n            const today = dayjs()  // Gets today's date as a Day.js object\n            const viewingStart = dayjs(state.viewingWindowStart)  // Convert to Day.js object if not already\n\n            // Compare if both dates are the same calendar day\n            return today.isSame(viewingStart, 'day')\n        },\n\n        daysInMonth: (state) => {\n            // Assuming state.currentMonth is a Day.js object; if it's a Date, convert it:\n            const currentMonth = dayjs(state.currentMonth)\n\n            const startOfCurrentMonth = currentMonth.startOf('month')\n            const endOfCurrentMonth = currentMonth.endOf('month')\n\n            // Adjust these to ensure the grid starts on Sunday and ends on Saturday\n            const startOfGrid = startOfCurrentMonth.startOf('week')  // Assumes the week starts on Sunday by default\n            const endOfGrid = endOfCurrentMonth.endOf('week')        // Assumes the week ends on Saturday by default\n\n            // Generate the days for the calendar grid\n            const days = []\n            let day = startOfGrid\n\n            while (day.isBefore(endOfGrid) || day.isSame(endOfGrid, 'day')) {\n                days.push(day.toDate()) // Collect days as Date objects; remove toDate() if you can use Day.js objects directly\n                day = day.add(1, 'day')\n            }\n\n            return days\n        },\n\n    },\n})\n"],"names":["dayjs","utc","timezone","_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","delegateYield","asyncGeneratorStep","gen","reject","_next","_throw","key","info","error","_asyncToGenerator","fn","self","args","arguments","apply","err","undefined","ownKeys","getOwnPropertySymbols","filter","getOwnPropertyDescriptor","_objectSpread","_defineProperty","getOwnPropertyDescriptors","defineProperties","obj","toPrimitive","String","Number","_toPrimitive","convertScheduleToTimezone","scheduleData","userStore","useUserStore","data","map","item","startTimeInUserTz","startTime","formatDateTimeFromUtcToUserTimezone","endTimeInUserTz","endTime","getUpcomingContentDates","viewingWindowStart","dates","start","add","toDate","relativeTime","duration","weekOfYear","advancedFormat","isSameOrAfter","isSameOrBefore","getTimeZone","initialState","baseTime","tz","currentHalfHour","startOf","minute","fourHoursLater","currentMonth","selectedDay","currentWeekStart","currentWeekEnd","endOf","nextFourHoursOfContent","nextFourHoursOfContentWithPlaceholders","fiveDaySixHourSchedule","todaysContent","weeklyContent","dataFetchLog","scheduleIsLoading","savingToSchedule","slotIntervalMinutes","mediumScreenSlotHours","smallScreenSlotHours","verySmallScreenSlotHours","timeSlots","timeBanners","id","useScheduleStore","defineStore","state","actions","resetAll","assign","this","setSelectedDay","day","_this","_callee","_context","fetchWeekDataIfNeeded","setSelectedDayToToday","now","changeDay","days","_this2","_callee2","currentTimeZone","currentTime","newDay","_context2","hour","shiftHours","hours","_this3","_callee3","_context3","isSame","isElevenPM","date","subtractMonth","_this4","_callee4","_context4","subtract","console","log","t0","concat","addMonth","_this5","_callee5","_context5","fetchFiveDaySixHourSchedule","_this6","_callee6","response","_context6","axios","get","userTimezone","fetchTodaysContent","_this7","_callee7","_context7","preloadWeeklyContent","_this8","_callee8","currentDate","_context8","loadWeekFromDate","_this9","_callee9","formattedDate","dayDate","fullISODate","newData","_context9","toISOString","post","format","_toConsumableArray","index","findIndex","updateFetchLogs","weekStart","weekEnd","fetchTime","existingLogIndex","lastFetch","needsDataForWeek","formatISODate","weekStartStr","weekEndStr","weekHasBeenFetched","some","logWeekStartStr","logWeekEndStr","calculateExtendedEndForUpcomingContent","checkAndFetchForUpcomingContent","_this10","_callee10","upcomingDates","fifteenMinutesAgo","_iterator","_step","_loop","_context11","_createForOfIteratorHelper","dateString","_context10","content","contentDate","lastFetchedTime","isFresh","fetchDataAndUpdateLog","t1","_this11","_callee11","_context12","_this12","_callee12","_context13","updateBaseTime","time","setBaseTime","newTime","updateNextFourHours","_this13","_callee13","_context14","updateTimeRange","setTimeSlots","prepareShowsForGrid","baseDate","roundedMinutes","second","millisecond","slotHours","appSettingStore","useAppSettingStore","isVerySmallScreen","isSmallScreen","intervalMinutes","slots","totalSlots","slotTime","shows","filterShowsForTimeRange","processedShows","calculateGridSlots","Array","isArray","showsWithStatusFlags","processShows","_this$updateColumnOcc","updateColumnOccupancy","colOccupancy","maxRowUsed","gridItems","fillGapsAndCreatePlaceholders","combinedShows","sortShowsByPosition","_this14","show","durationMinutes","warn","showStart","showEnd","isInTimeRange","isBefore","isAfter","hasStarted","firstTimeSlot","lastTimeSlot","slotIndex","slot","Math","max","endSlotIndex","span","gridStart","gridSpan","_this15","comingUpNextSet","end","nowPlaying","placeholder","comingUpNext","cols","fill","Set","gridRow","row","findAndFillGapsForSingleRow","gapStart","has","createPlaceholder","createBlankSpotPlaceholder","sort","b","priority","getters","preparedTimeBanners","timeZone","todayStart","tomorrowStart","flatMap","banner","bannerTodayStart","parseInt","split","bannerTodayEnd","clone","bannerTomorrowStart","bannerTomorrowEnd","startSlotIndex","nextFourHoursWithHalfHourIntervals","intervals","current","formatted","dateTimeString","upcomingContent","showsGroupedByStartTime","reduce","acc","itemStart","valueOf","group","selected","unix","nextSixHours","adjustedStart","dateMessage","startDay","startOfDay","isToday","isYesterday","isTomorrow","currentMonthIndex","month","currentMonthName","currentYear","year","today","viewingStart","daysInMonth","startOfCurrentMonth","endOfCurrentMonth","startOfGrid","endOfGrid"],"sourceRoot":""}