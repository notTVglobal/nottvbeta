{"version":3,"file":"js/4679.js","mappings":"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","sources":["webpack:///./resources/js/Stores/ScheduleStore.js","webpack:///./resources/js/Utilities/TimeUtils.js"],"sourcesContent":["import { defineStore } from 'pinia'\nimport { useUserStore } from '@/Stores/UserStore'\nimport { createTimeSlots } from '@/Utilities/TimeUtils'\nimport {\n    addDays,\n    addHours,\n    addMonths,\n    eachDayOfInterval,\n    eachHourOfInterval,\n    endOfMonth,\n    endOfWeek,\n    format,\n    getHours,\n    getMonth,\n    getYear,\n    isSameDay,\n    isToday,\n    isTomorrow,\n    isYesterday,\n    startOfDay,\n    startOfHour,\n    startOfMonth,\n    startOfWeek,\n    subMonths,\n} from 'date-fns'\n\n// Import dayjs and its plugins\nimport dayjs from 'dayjs'\nimport relativeTime from 'dayjs/plugin/relativeTime'\nimport timezone from 'dayjs/plugin/timezone'\nimport utc from 'dayjs/plugin/utc'\n\n// Extend dayjs with the plugins\ndayjs.extend(relativeTime)\ndayjs.extend(timezone)\ndayjs.extend(utc)\n\nfunction convertScheduleToTimezone(scheduleData) {\n    const userStore = useUserStore() // Access the UserStore\n\n    return scheduleData.data.map(item => {\n        // Convert top-level start_time and end_time using UserStore methods\n        const startTimeInUserTz = item.start_time ? userStore.formatDateTimeFromUtcToUserTimezone(item.start_time, 'YYYY-MM-DD HH:mm:ss') : null\n        const endTimeInUserTz = item.end_time ? userStore.formatDateTimeFromUtcToUserTimezone(item.end_time, 'YYYY-MM-DD HH:mm:ss') : null\n\n        // Check and convert recurrenceDetails if present\n        let recurrenceDetailsInUserTz = null\n        if (item.recurrenceDetails) {\n            const {start_time, start_date, end_date} = item.recurrenceDetails\n            recurrenceDetailsInUserTz = {\n                ...item.recurrenceDetails,\n                start_time: start_time ? userStore.formatTimeInUserTimezone(start_time, 'HH:mm:ss') : null,\n                start_date: start_date ? userStore.formatDateTimeFromUtcToUserTimezone(start_date, 'YYYY-MM-DD') : null,\n                end_date: end_date ? userStore.formatDateTimeFromUtcToUserTimezone(end_date, 'YYYY-MM-DD') : null,\n            }\n        }\n\n        return {\n            ...item,\n            start_time: startTimeInUserTz,\n            end_time: endTimeInUserTz,\n            recurrenceDetails: recurrenceDetailsInUserTz,\n        }\n    })\n}\n\n// Helper function to get dates within the next 6 hours from viewingWindowStart\nfunction getUpcomingContentDates(viewingWindowStart) {\n    let dates = []\n    let start = new Date(viewingWindowStart)\n    for (let i = 0; i < 6; i++) {\n        dates.push(new Date(start.setHours(start.getHours() + i)))\n    }\n    return dates\n}\n\n/**\n * Filters shows that are scheduled within a specified datetime range, adjusted to the user's timezone.\n *\n * This function ensures that show scheduling comparisons are made accurately by converting all involved\n * datetime values to the user's local timezone using functions from the userStore. It includes type checking\n * to ensure input dates are valid and handles edge cases where shows start or end at the boundary times.\n *\n * @param {Object} state - The state object containing the shows' data.\n * @param {Date} startDateTime - The start datetime from which to filter shows, expected to be a Date object.\n * @param {Date} endDateTime - The end datetime up to which to filter shows, expected to be a Date object.\n * @returns {Array} An array of shows that start within the specified datetime range.\n */\nfunction fetchShowsScheduledBetween(state, startDateTime, endDateTime) {\n    const userStore = useUserStore() // Access user-specific settings and utilities\n\n    if (!(startDateTime instanceof Date && endDateTime instanceof Date)) {\n        throw new TypeError('startDateTime and endDateTime must be Date objects.');\n    }\n\n    // Convert start and end DateTime to the user's timezone for accurate comparison\n    const startInUserTZ = userStore.convertUtcToUserTimezone(startDateTime.toISOString())\n    const endInUserTZ = userStore.convertUtcToUserTimezone(endDateTime.toISOString())\n\n    return state.weeklyContent.filter(show => {\n        if (typeof show.start_time !== 'string') {\n            console.warn('Expected show.start_time to be a string in ISO format.');\n            return false;\n        }\n        const showStartTimeInUserTZ = userStore.convertUtcToUserTimezone(show.start_time);\n\n        // Check if the show's start time is within the specified datetime range, inclusive of start and exclusive of end\n        return new Date(showStartTimeInUserTZ) >= new Date(startInUserTZ) && new Date(showStartTimeInUserTZ) < new Date(endInUserTZ);\n    });\n}\n\nfunction resolveSchedulingConflicts(shows) {\n    // Sort shows by start time, then by priority for shows with the same start time\n    const sortedShows = shows.sort((a, b) => {\n        const startTimeComparison = new Date(a.start_time) - new Date(b.start_time)\n        if (startTimeComparison === 0) { // If start times are the same\n            return a.priority - b.priority // Compare by priority\n        }\n        return startTimeComparison\n    })\n\n    const resolvedShows = []\n    const showsByStartTime = {}\n\n    // Group shows by their start time\n    sortedShows.forEach(show => {\n        const startTime = new Date(show.start_time).toISOString()\n        if (!showsByStartTime[startTime]) {\n            showsByStartTime[startTime] = []\n        }\n        showsByStartTime[startTime].push(show)\n    })\n\n    // For each start time, select the show with the highest priority (lowest priority number)\n    Object.values(showsByStartTime).forEach(group => {\n        if (group.length > 1) {\n            // If there are conflicts, push only the show with the highest priority\n            resolvedShows.push(group[0]) // Assuming the group is already sorted by priority\n        } else {\n            // No conflict, push the single show\n            resolvedShows.push(group[0])\n        }\n    })\n\n    return resolvedShows\n}\n\nfunction adjustShowsForGrid(shows, timeSlots) {\n    return shows.map(show => {\n        // Your existing logic for calculating show placement\n        const showStart = new Date(show.start_time)\n        const showEnd = new Date(show.start_time)\n        showEnd.setMinutes(showEnd.getMinutes() + show.durationMinutes)\n        const slotIndex = timeSlots.findIndex(slot => showStart >= slot && showStart < new Date(slot.getTime() + 30 * 60000))\n        let span = Math.ceil(show.durationMinutes / 30)\n        if (slotIndex + span > timeSlots.length) {\n            span = timeSlots.length - slotIndex\n        }\n\n        return {\n            ...show,\n            gridStart: slotIndex + 1,\n            gridSpan: span,\n        }\n    })\n}\n\nfunction fillEmptySlotsWithPlaceholders(showsWithPlacement, timeSlots) {\n    const gridItems = []\n\n    timeSlots.forEach((slot, index) => {\n        // Ensure every slot is a Date object, convert if necessary\n        console.log('type of slot: ' + slot, typeof slot); // Check what `slot` contains and its type\n\n        if (!(slot instanceof Date)) {\n            console.error('slot is not a Date object:', slot);\n            return; // Skip this iteration if `slot` is not a Date object\n        }\n\n        const slotStart = slot\n        const showExistsInSlot = showsWithPlacement.some(show =>\n            slotStart >= new Date(show.start_time) &&\n            slotStart < new Date(new Date(show.start_time).getTime() + show.durationMinutes * 60000),\n        )\n\n        if (!showExistsInSlot) {\n            // Insert a placeholder show for this slot\n            gridItems.push({\n                placeholder: true,\n                start_time: slot.toISOString(),\n                gridStart: index + 1,\n                gridSpan: 1,\n                content: {show: {name: 'Nothing scheduled.'}},\n            })\n        }\n    })\n\n    // Merge and sort the grid items by their start time/gridStart to maintain chronological order\n    return [...showsWithPlacement, ...gridItems].sort((a, b) => a.gridStart - b.gridStart)\n}\n\n\nconst initialState = () => ({\n    viewingWindowStart: new Date(),\n    currentMonth: new Date(),\n    selectedDay: new Date(),\n    currentWeekStart: null,\n    currentWeekEnd: null,\n    // viewingMode: 'automatic', // or 'userSelected'\n    fiveDaySixHourSchedule: [], // Holds the schedule shows 5 day / 6 hour structured data\n    todaysContent: [],\n    weeklyContent: [],\n    dataFetchLog: [],\n    scheduleIsLoading: false,\n    savingToSchedule: false,\n})\n\nexport const useScheduleStore = defineStore('scheduleStore', {\n    state: initialState,\n    actions: {\n        resetAll() {\n            // Reset the store to its original state (clear all data)\n            Object.assign(this, initialState())\n        },\n        reset() {\n            const now = new Date()\n            this.viewingWindowStart = now\n            this.currentMonth = now\n            this.selectedDay = now\n        },\n        async setSelectedDay(day) {\n            this.selectedDay = day\n            // Explicitly set the viewingWindowStart to 4 AM for the selected day\n            this.viewingWindowStart = addHours(startOfDay(day), 4)\n            this.currentWeekStart = startOfWeek(day, {weekStartsOn: 0})\n            this.currentWeekEnd = endOfWeek(day, {weekStartsOn: 0})\n\n            // // Check if the week of the selected day is already loaded\n            // this.currentWeekStart = startOfWeek(day, {weekStartsOn: 0});\n            // this.currentWeekEnd = endOfWeek(day, {weekStartsOn: 0});\n\n            // Use the updated fetch logic\n            await this.fetchWeekDataIfNeeded()\n\n            // // First, check if we need to load data for the new week\n            // if (this.needsDataForWeek(weekStart, weekEnd)) {\n            //     // If new data is needed for the week, load it\n            //     await this.loadWeekFromDate(day).catch(error => {\n            //         console.error(\"Failed to load data for the new week:\", error);\n            //     });\n            // }\n\n            // Then, check and fetch for any missing upcoming content\n            // This is necessary in case the week data is present but specific upcoming content within the week is missing\n            // await this.checkAndFetchForUpcomingContent();\n        },\n        setSelectedDayToToday(day) {\n            const now = new Date()\n            this.selectedDay = now\n            this.viewingWindowStart = startOfHour(now)\n        },\n        async changeDay(days) {\n            const currentTime = this.viewingWindowStart.getHours() * 60 + this.viewingWindowStart.getMinutes()\n            let newDay = addDays(startOfDay(this.viewingWindowStart), days)\n            newDay = new Date(newDay.setMinutes(currentTime)) // Preserve time of day\n\n            this.selectedDay = newDay\n            this.viewingWindowStart = newDay\n\n            // Update the week's range based on the new day\n            this.currentWeekStart = startOfWeek(newDay, {weekStartsOn: 0})\n            this.currentWeekEnd = endOfWeek(newDay, {weekStartsOn: 0})\n\n            // // Check if the week of the new day is already loaded\n            // const weekStart = startOfWeek(newDay, {weekStartsOn: 0});\n            // const weekEnd = endOfWeek(newDay, {weekStartsOn: 0});\n\n            // Use the updated centralized fetch logic without redundant checks\n            await this.fetchWeekDataIfNeeded()\n\n            // // Check for the need to load data for the new week\n            // if (this.needsDataForWeek(weekStart, weekEnd)) {\n            //     await this.loadWeekFromDate(newDay).catch(error => {\n            //         console.error(\"Failed to load data for the new week:\", error);\n            //     });\n            // }\n\n            // // Check for the need to load data for the new week\n            // if (!this.needsDataForWeek()) {\n            //     // Data for the current week has already been loaded; skip fetching\n            //     console.log(\"Data for the current week has already been loaded; skipping redundant fetch.\");\n            //     return;\n            // }\n            //\n            // // Proceed with data fetching if needed\n            // await this.checkAndFetchForUpcomingContent();\n        },\n        async shiftHours(hours) {\n            // Shift the viewing window\n            this.viewingWindowStart = addHours(this.viewingWindowStart, hours)\n            this.currentWeekStart = startOfWeek(this.viewingWindowStart, {weekStartsOn: 0})\n            this.currentWeekEnd = endOfWeek(this.viewingWindowStart, {weekStartsOn: 0})\n\n            // // Update selectedDay if the day has changed\n            // if (!isSameDay(this.viewingWindowStart, this.selectedDay)) {\n            //     this.selectedDay = startOfDay(this.viewingWindowStart);\n            // }\n\n            // If the day has changed, update selectedDay and the week's range\n            if (!isSameDay(this.viewingWindowStart, this.selectedDay)) {\n                this.selectedDay = startOfDay(this.viewingWindowStart)\n            }\n\n            // // Check if the week of the new viewing window is already loaded\n            // this.currentWeekStart = startOfWeek(this.viewingWindowStart, { weekStartsOn: 0 });\n            // this.currentWeekEnd = endOfWeek(this.viewingWindowStart, { weekStartsOn: 0 });\n\n            // Use the updated fetch logic\n            await this.fetchWeekDataIfNeeded()\n\n            // // Check for the need to load data for the new week\n            // if (!this.needsDataForWeek()) {\n            //     // Data for the current week has already been loaded; skip fetching\n            //     console.log(\"Data for the current week has already been loaded; skipping redundant fetch.\");\n            //     return;\n            // }\n\n            //\n            // await this.loadWeekFromDate(this.viewingWindowStart).catch(error => {\n            //     console.error(\"Failed to load data for the new week:\", error);\n            // });\n\n            // Proceed with data fetching if needed\n            // await this.checkAndFetchForUpcomingContent();\n        },\n        isElevenPM(date) {\n            return getHours(date) === 23 // Checks if the hour is 23 (11 PM)\n        },\n        // Actions to change the month\n        async subtractMonth() {\n            // Subtract one month from the currentMonth\n            this.currentMonth = subMonths(this.currentMonth, 1)\n\n            try {\n                await this.setSelectedDay(this.currentMonth)\n                console.log('Set selected day based on current month:', this.currentMonth)\n            } catch (error) {\n                console.error(`Failed to set selected day based on current month ${this.currentMonth}:`, error)\n            }\n        },\n        async addMonth() {\n            this.currentMonth = addMonths(this.currentMonth, 1)\n            try {\n                await this.setSelectedDay(this.currentMonth)\n                console.log('Set selected day based on current month:', this.currentMonth)\n            } catch (error) {\n                console.error(`Failed to set selected day based on current month ${this.currentMonth}:`, error)\n            }\n        },\n        async fetchFiveDaySixHourSchedule() {\n            console.error('fetchFiveDaySixHourSchedule')\n            try {\n                const userStore = useUserStore()\n                const response = await axios.get('/api/schedule')\n\n                // Fallback to response timezone if userStore.timezone is not set\n                const timezone = userStore.timezone || response.data.userTimezone || 'UTC' // Additional fallback to 'UTC'\n\n                // Convert the entire schedule, including nested recurrenceDetails, to the user's timezone\n                this.fiveDaySixHourSchedule = convertScheduleToTimezone(response.data, timezone)\n                console.error('fetchFiveDaySixHourSchedule', response.data)\n            } catch (error) {\n                console.error('Failed to load schedule shows:', error)\n                // Handle the error state as needed, e.g., setting an error state property\n            }\n        },\n        async fetchTodaysContent() {\n            try {\n                const userStore = useUserStore()\n                const response = await axios.get('/api/schedule/today')\n\n                // Fallback to response timezone if userStore.timezone is not set\n                const timezone = userStore.timezone || response.data.userTimezone || 'UTC' // Additional fallback to 'UTC'\n\n                this.todaysContent = convertScheduleToTimezone(response.data, timezone)\n            } catch (error) {\n                console.error('Failed to fetch today\\'s content:', error)\n            }\n        },\n        async preloadWeeklyContent() {\n            // Use the current date to preload content for the current week\n            const currentDate = new Date()\n\n            try {\n                // Call loadWeekFromDate with the current date\n                await this.loadWeekFromDate(currentDate)\n            } catch (error) {\n                console.error('Failed to preload weekly content:', error)\n            }\n        },\n        async loadWeekFromDate(date) {\n            let formattedDate = null // Declare formattedDate outside of the try block\n            this.scheduleIsLoading = true\n            try {\n                const userStore = useUserStore()\n                // Ensure the date is in UTC format for the request\n                console.log('Date before formatted: ' + date)\n                const fullISODate = date.toISOString()\n\n                console.log(`Loading week data for date in UTC: ${fullISODate}`)\n\n                // Send the dateTime and timezone as a JSON object in a POST request\n                const response = await axios.post(`/api/schedule/week/${fullISODate}`)\n\n                // const formattedDate = date.toISOString().split('T')[0];\n                // console.log(`Loading week data for date: ${formattedDate}`); // Log the date being requested\n                //\n                // const response = await axios.get(`/api/schedule/week/${formattedDate}`);\n                console.log('Received response:', response.data) // Log the raw response data\n\n                // Fallback to response timezone if userStore.timezone is not set\n                const timezone = userStore.timezone || response.data.userTimezone || 'UTC' // Additional fallback to 'UTC'\n                console.log(`Using timezone: ${timezone}`) // Log the timezone being used\n\n                const newData = convertScheduleToTimezone(response.data, timezone) // Ensure you are accessing the correct data property from the response\n\n                // Update the fetch log with the current fetch\n                const weekStart = startOfWeek(new Date(date), {weekStartsOn: 0}).toISOString()\n                const weekEnd = endOfWeek(new Date(date), {weekStartsOn: 0}).toISOString()\n                const fetchTime = new Date().toISOString()\n\n                const existingLogIndex = this.dataFetchLog.findIndex(log => log.weekStart === weekStart && log.weekEnd === weekEnd)\n                if (existingLogIndex !== -1) {\n                    this.dataFetchLog[existingLogIndex].lastFetch = fetchTime\n                } else {\n                    this.dataFetchLog.push({weekStart, weekEnd, lastFetch: fetchTime})\n                }\n\n                // Merge newData into weeklyContent, avoiding duplicates\n                this.weeklyContent = [...this.weeklyContent, ...newData].filter((value, index, self) =>\n                        index === self.findIndex((t) => (\n                            t.id === value.id && t.start_time === value.start_time\n                        )),\n                )\n                this.scheduleIsLoading = false\n            } catch (error) {\n                console.error(`Failed to load content for week starting ${formattedDate}:`, error)\n                this.scheduleIsLoading = false\n            }\n        },\n        needsDataForWeek() {\n            // Helper function to format ISO date strings for easier comparison\n            const formatISODate = date => date.toISOString().split('T')[0]\n\n            // Current week range in ISO date string format\n            const weekStartStr = formatISODate(this.currentWeekStart)\n            const weekEndStr = formatISODate(this.currentWeekEnd)\n\n            // Enhanced logging for debugging\n            console.log(`Current week range: ${weekStartStr} to ${weekEndStr}`)\n            console.log('Existing data fetch log entries:', this.dataFetchLog)\n\n            // Iterate through the fetch log to check if the current week has been fetched\n            const weekHasBeenFetched = this.dataFetchLog.some(log => {\n                // Convert log dates to ISO string format for comparison\n                const logWeekStartStr = formatISODate(new Date(log.weekStart))\n                const logWeekEndStr = formatISODate(new Date(log.weekEnd))\n\n                // Log each comparison for insight\n                console.log(`Comparing to fetched range: ${logWeekStartStr} to ${logWeekEndStr}`)\n\n                return logWeekStartStr <= weekStartStr && logWeekEndStr >= weekEndStr\n            })\n\n            // Log the final determination\n            console.log(`Week from ${weekStartStr} to ${weekEndStr} has ${weekHasBeenFetched ? '' : 'not '}been fetched.`)\n\n            return !weekHasBeenFetched\n            // // Extend weekEnd to cover the span of upcoming content from viewingWindowStart\n            // const extendedEnd = this.calculateExtendedEndForUpcomingContent();\n            // let checkWeekEnd = new Date(this.currentWeekEnd); // Work with a copy to avoid side effects\n            //\n            // if (extendedEnd > checkWeekEnd) {\n            //     checkWeekEnd = extendedEnd;\n            // }\n            //\n            // // Now weekEnd includes any additional day(s) that might be displayed\n            // // Adjust the checkWeekEnd to include the entire day\n            // checkWeekEnd.setHours(23, 59, 59, 999);\n            //\n            // const hasDataForExtendedWeek = this.weeklyContent.some(content => {\n            //     const contentDate = new Date(content.start_time);\n            //     return contentDate >= this.currentWeekStart && contentDate <= checkWeekEnd;\n            // });\n            //\n            // console.log('Has data for extended week range:', hasDataForExtendedWeek);\n            // return !hasDataForExtendedWeek;\n        },\n        calculateExtendedEndForUpcomingContent() {\n            // Assuming viewingWindowStart is the reference start time for upcoming content\n            const baseStartTime = new Date(this.viewingWindowStart)\n            // Extend by 6 hours to cover the upcoming content span\n            // Return the extended end time, potentially adjusting into the next day\n            return new Date(baseStartTime.getTime() + (6 * 60 * 60 * 1000))\n        },\n        // Function to check for and fetch missing upcoming content\n        async checkAndFetchForUpcomingContent() {\n            const upcomingDates = getUpcomingContentDates(this.viewingWindowStart)\n            const now = new Date()\n            const fifteenMinutesAgo = new Date(now.getTime() - 15 * 60000)\n\n            for (const date of upcomingDates) {\n                const dateString = date.toISOString().split('T')[0]\n                const contentCoverageAndFreshness = this.weeklyContent.some(content => {\n                    const contentDate = new Date(content.start_time).toDateString()\n                    const lastFetchedTime = this.dataFetchLog[dateString]\n                    const isFresh = lastFetchedTime && new Date(lastFetchedTime) > fifteenMinutesAgo\n                    return date.toDateString() === contentDate && isFresh\n                })\n\n                if (!contentCoverageAndFreshness) {\n                    // This date needs data fetching\n                    await this.fetchDataAndUpdateLog(dateString, date)\n                    break // Assuming you fetch data for the week, so no need to check further dates within the same week\n                }\n            }\n        },\n        async fetchDataAndUpdateLog(dateString, date) {\n            try {\n                await this.loadWeekFromDate(date)\n                // Successfully fetched, so update the log\n                this.dataFetchLog[dateString] = new Date().toISOString()\n                console.log('Data fetched successfully for date:', dateString)\n            } catch (error) {\n                console.error(`Failed to fetch data for date ${dateString}:`, error)\n            }\n        },\n\n        // Updated to use this.currentWeekStart and this.currentWeekEnd directly\n        async fetchWeekDataIfNeeded() {\n            // Assumes this.currentWeekStart and this.currentWeekEnd are already set\n            if (this.needsDataForWeek()) {\n                await this.checkAndFetchForUpcomingContent().catch(error => {\n                    console.error('Failed to load data for the week:', error)\n                    return false // Indicates failure to fetch when an error occurs\n                })\n                // await this.loadWeekFromDate(this.currentWeekStart).catch(error => {\n                //     console.error(\"Failed to load data for the week:\", error);\n                //     return false; // Indicates failure to fetch when an error occurs\n                // });\n            } else {\n                console.log('Week data already loaded; no need to fetch.')\n            }\n\n            // Conditionally check for missing upcoming content within the current week\n            // only if new week data hasn't been fetched.\n            // if (!dataFetched) {\n            //     await this.checkAndFetchForUpcomingContent();\n            // }\n        },\n        // createTimeSlots(start, durationHours = 4, intervalMinutes = 30) {\n        //     let slots = [];\n        //     for (let i = 0; i < (durationHours * 60) / intervalMinutes; i++) {\n        //         let slotTime = new Date(start.getTime() + i * intervalMinutes * 60000);\n        //         slots.push(slotTime);\n        //     }\n        //     return slots;\n        // },\n\n\n        mapShowsToTimeSlots(shows, timeSlots) {\n            const showsWithAdjustedSpans = shows.map(show => {\n                const showStart = new Date(show.start_time)\n                const showEnd = new Date(show.start_time)\n                showEnd.setMinutes(showEnd.getMinutes() + show.durationMinutes)\n                const slotIndex = timeSlots.findIndex(slot => showStart >= slot && showStart < new Date(slot.getTime() + 30 * 60000))\n\n                // Initially set the span based on the show's duration\n                let span = Math.ceil(show.durationMinutes / 30)\n\n                // Adjust the span if there's an overlap with the next show's start time\n                if (slotIndex + span > timeSlots.length) {\n                    span = timeSlots.length - slotIndex // Adjust to not exceed the grid\n                }\n\n                // Return the show with adjusted span and calculated start index\n                return {\n                    ...show,\n                    gridStart: slotIndex + 1,\n                    gridSpan: span,\n                }\n            })\n\n            // Now handle placing the shows with adjusted spans in the grid, including placeholders for empty slots\n            return timeSlots.map((slot, index) => {\n                const showForSlot = showsWithAdjustedSpans.find(show => show.gridStart === index + 1)\n                if (showForSlot) {\n                    return showForSlot\n                } else {\n                    // If no show for this slot, return a placeholder\n                    return {\n                        placeholder: true,\n                        gridStart: index + 1,\n                        gridSpan: 1,\n                        content: {show: {name: 'Nothing scheduled.'}},\n                    }\n                }\n            })\n        },\n\n    },\n\n    getters: {\n        nextFourHoursOfContent: (state) => {\n            const now = new Date()\n            const startOfCurrentHour = new Date(now.setMinutes(0, 0, 0))\n            const fourHoursLater = new Date(startOfCurrentHour.getTime() + 4 * 60 * 60 * 1000)\n\n            const timeSlots = createTimeSlots(startOfCurrentHour, 4, 30)\n            let shows = fetchShowsScheduledBetween(state, startOfCurrentHour, fourHoursLater)\n            let resolvedShows = resolveSchedulingConflicts(shows)\n            let adjustedShows = adjustShowsForGrid(resolvedShows, timeSlots)\n            return fillEmptySlotsWithPlaceholders(adjustedShows, timeSlots)\n        },\n        // nextFourHoursOfContent: (state) => {\n        //     const userStore = useUserStore()\n        //     const now = new Date() // Current time\n        //     // const startOfCurrentHour = new Date(now.getFullYear(), now.getMonth(), now.getDate(), now.getHours());\n        //     const startOfCurrentHour = new Date(now.setMinutes(0, 0, 0))\n        //     const fourHoursLater = new Date(startOfCurrentHour.getTime() + 4 * 60 * 60 * 1000)\n        //\n        //\n        //     // Create time slots for the next four hours, at 30-minute intervals, in UTC\n        //     const utcTimeSlots = createTimeSlots(startOfCurrentHour, 4, 30)\n        //     // Convert each UTC time slot to the user's local timezone\n        //     const timeSlots = utcTimeSlots.map(slot =>\n        //         new Date(userStore.convertUtcToUserTimezone(slot)),\n        //     )\n        //\n        //     // Iterate over each time slot to either find a show that matches or insert a placeholder\n        //     const filledShows = timeSlots.map((slot, index) => {\n        //         const slotStart = dayjs(slot).format('YYYY-MM-DD HH:mm:ss')\n        //         const matchingShow = state.weeklyContent.find(show => {\n        //             const showStart = dayjs(show.start_time).format('YYYY-MM-DD HH:mm:ss')\n        //             return showStart === slotStart\n        //         })\n        //\n        //         if (matchingShow) {\n        //             // Calculate grid placement based on the show's start time and duration\n        //             return {\n        //                 ...matchingShow,\n        //                 gridStart: index + 1,\n        //                 gridSpan: Math.ceil(matchingShow.durationMinutes / 30),\n        //             }\n        //         } else {\n        //             // Create a placeholder for empty time slots\n        //             return {\n        //                 placeholder: true,\n        //                 start_time: slot.toISOString(),\n        //                 durationMinutes: 30,\n        //                 gridStart: index + 1,\n        //                 gridSpan: 1,\n        //                 content: {show: {name: 'Nothing scheduled.'}},\n        //             }\n        //         }\n        //     })\n        //\n        //     return filledShows\n        // },\n\n        // // Group shows by start time\n        // const showsGroupedByStartTime = state.weeklyContent.reduce((acc, item) => {\n        //     const itemStart = dayjs(item.start_time).format('YYYY-MM-DD HH:mm:ss');\n        //     if (!acc[itemStart]) {\n        //         acc[itemStart] = [];\n        //     }\n        //     acc[itemStart].push(item);\n        //     return acc;\n        // }, {});\n        //\n        // // Select the show with the lowest priority for each start time\n        // const selectedShows = Object.values(showsGroupedByStartTime).map(group => {\n        //     return group.reduce((selected, item) => {\n        //         return !selected || item.priority < selected.priority ? item : selected;\n        //     }, null);\n        // });\n        //\n        // // Sort, adjust for overlaps, and calculate grid placement as before\n        // let sortedShows = selectedShows\n        //     .filter(item => {\n        //         const itemStart = new Date(item.start_time);\n        //         return itemStart >= startOfCurrentHour && itemStart < fourHoursLater;\n        //     })\n        //     .sort((a, b) => {\n        //         const startDiff = new Date(a.start_time) - new Date(b.start_time);\n        //         return startDiff !== 0 ? startDiff : a.priority - b.priority;\n        //     })\n        //     .map((item, index, array) => {\n        //         // Grid placement logic remains the same as before\n        //         // Ensure the span doesn't exceed the grid or become negative\n        //         const itemStart = new Date(item.start_time);\n        //         const slotIndex = timeSlots.findIndex(slot => new Date(item.start_time) >= slot && new Date(item.start_time) < new Date(slot.getTime() + 30 * 60000));\n        //         let durationSlots = Math.ceil(item.durationMinutes / 30);\n        //         if (index < array.length - 1) {\n        //             // Adjust for overlaps with subsequent shows\n        //         }\n        //         const adjustedSpan = Math.max(1, Math.min(durationSlots, timeSlots.length - slotIndex));\n        //         return {\n        //             ...item,\n        //             gridStart: slotIndex + 1,\n        //             gridSpan: adjustedSpan\n        //         };\n        //     });\n\n        // Filter, sort, and adjust shows based on start time, duration, and priority\n        // let sortedShows = state.weeklyContent\n        //     .filter(item => {\n        //         const itemStart = new Date(item.start_time);\n        //         return itemStart >= startOfCurrentHour && itemStart < fourHoursLater;\n        //     })\n        //     .sort((a, b) => {\n        //         // Sort by start time; if equal, then by priority\n        //         const startDiff = new Date(a.start_time) - new Date(b.start_time);\n        //         return startDiff !== 0 ? startDiff : a.priority - b.priority;\n        //     })\n        //     .map((item, index, array) => {\n        //         // Convert back to string format matching start_time format\n        //         const formattedItemStartTime = dayjs(item.start_time).format('YYYY-MM-DD HH:mm:ss');\n        //\n        //         console.log('itemStartTimeInUserTZ: ' + formattedItemStartTime)\n        //         // Calculate grid placement for each show\n        //         const itemStart = new Date(item.start_time);\n        //         const itemEnd = new Date(item.start_time);\n        //         itemEnd.setMinutes(itemEnd.getMinutes() + item.durationMinutes);\n        //\n        //         // Find the index of the slot that the item starts in\n        //         // const slotIndex = timeSlots.findIndex(slot => itemStart >= slot && itemStart < new Date(slot.getTime() + 30 * 60000));\n        //\n        //         // Find the index of the slot that the item starts in\n        //         const slotIndex = timeSlots.findIndex(slot => {\n        //             return formattedItemStartTime >= slot && formattedItemStartTime < new Date(slot.getTime() + 30 * 60000);\n        //         });\n        //\n        //         let durationSlots = Math.ceil(item.durationMinutes / 30);\n        //         // Adjust for overlaps with subsequent shows\n        //         if (index < array.length - 1) {\n        //             const nextItemStart = new Date(array[index + 1].start_time);\n        //             if (itemEnd > nextItemStart) {\n        //                 // If overlap, reduce durationSlots\n        //                 const overlap = Math.ceil((itemEnd - nextItemStart) / (30 * 60000));\n        //                 durationSlots -= overlap;\n        //             }\n        //         }\n        //\n        //         // Ensure the span doesn't exceed the grid or become negative\n        //         const adjustedSpan = Math.max(1, Math.min(durationSlots, timeSlots.length - slotIndex));\n        //\n        //         // Return the adjusted show with grid placement information\n        //         return {\n        //             ...item,\n        //             gridStart: slotIndex + 1, // Grid is 1-indexed\n        //             gridSpan: adjustedSpan\n        //         };\n        //     });\n\n        // Create placeholders for each time slot if there's no show scheduled\n        // const filledShows = timeSlots.map(slot => {\n        //     const formattedSlot = dayjs(slot).format('YYYY-MM-DD HH:mm:ss');\n        //     const showForSlot = sortedShows.find(show => dayjs(show.start_time).format('YYYY-MM-DD HH:mm:ss') === formattedSlot);\n        //\n        //     if (showForSlot) {\n        //         return showForSlot; // Return the actual show if it exists\n        //     } else {\n        //         // Return a placeholder show for empty slots\n        //         return {\n        //             placeholder: true, // Indicate this is a placeholder\n        //             start_time: slot.toISOString(),\n        //             durationMinutes: 30, // Assuming a standard 30-minute slot\n        //             gridStart: timeSlots.indexOf(slot) + 1,\n        //             gridSpan: 1,\n        //             content: {\n        //                 show: {\n        //                     name: \"Nothing scheduled.\"\n        //                 }\n        //             }\n        //         };\n        //     }\n        // });\n\n        // Return the filled array of shows and placeholders\n        // return filledShows;\n        // return sortedShows;\n        // },\n        // nextFourHoursOfContent: (state) => {\n        //     const now = new Date(); // Get the current date and time\n        //     const start = new Date(now.getFullYear(), now.getMonth(), now.getDate(), now.getHours()); // Set to the top of the current hour\n        //     const end = new Date(start.getTime() + 4 * 60 * 60 * 1000); // 4 hours later from the start\n        //\n        //     // Filter weeklyContent for the next 6 hours window\n        //     return state.weeklyContent.filter(item => {\n        //         const itemStart = new Date(item.start_time);\n        //         return itemStart >= start && itemStart < end;\n        //     }).sort((a, b) => new Date(a.start_time) - new Date(b.start_time));\n        // },\n        nextFourHoursWithHalfHourIntervals: (state) => {\n            const userStore = useUserStore() // Access the user store\n            const userTimezone = userStore.timezone // Get the user's timezone\n\n            const intervals = []\n            const now = dayjs().tz(userTimezone) // Get the current time in the user's timezone\n            // Use dayjs to handle time correctly in the specified timezone\n            let current = now.startOf('hour') // Set to the top of the current hour\n\n            // Generate intervals for the next 4 hours, each 30 minutes apart\n            for (let i = 0; i < 8; i++) { // 4 hours / 30 minutes = 8 intervals\n                // Push an object with both the formatted time for display and the actual DateTime object\n                intervals.push({\n                    formatted: current.format('hh:mm A'), // Formatted time for display\n                    dateTimeString: current.format('YYYY-MM-DD HH:mm:ss'), // Y-m-d H:m:s format for comparisons\n                })\n                current = current.add(30, 'minute') // Move to the next 30-minute interval\n            }\n\n            return intervals\n        },\n        upcomingContent: (state) => {\n            const start = new Date(state.viewingWindowStart.getTime() - 60 * 60 * 1000) // 1 hour earlier\n            const end = new Date(start.getTime() + 7 * 60 * 60 * 1000) // 6 hours later\n\n            // Group shows by start time\n            const showsGroupedByStartTime = state.weeklyContent.reduce((acc, item) => {\n                const itemStart = new Date(item.start_time).getTime()\n                if (!acc[itemStart]) {\n                    acc[itemStart] = []\n                }\n                acc[itemStart].push(item)\n                return acc\n            }, {})\n\n            // Select the show with the lowest priority for each start time\n            const selectedShows = Object.values(showsGroupedByStartTime).map(group => {\n                return group.reduce((selected, item) => {\n                    return !selected || item.priority < selected.priority ? item : selected\n                }, null)\n            })\n\n            // Filter, ensuring they fall within the next 6-hour window, and sort\n            return selectedShows\n                .filter(item => {\n                    const itemStart = new Date(item.start_time)\n                    return itemStart >= start && itemStart < end\n                })\n                .sort((a, b) => new Date(a.start_time) - new Date(b.start_time))\n\n            // // Filter weeklyContent for the next 6 hours window\n            // return state.weeklyContent.filter(item => {\n            //     const itemStart = new Date(item.start_time);\n            //     return itemStart >= start && itemStart < end;\n            // }).sort((a, b) => new Date(a.start_time) - new Date(b.start_time));\n        },\n        nextSixHours: (state) => {\n            let adjustedStart = state.viewingWindowStart\n            const end = addHours(adjustedStart, 5)\n            return eachHourOfInterval({start: adjustedStart, end})\n        },\n        dateMessage: (state) => {\n            const startDay = startOfDay(state.viewingWindowStart)\n            const formattedDate = format(startDay, 'EEEE MMMM do, yyyy')\n            if (isToday(startDay)) {\n                return `Today - ${formattedDate}`\n            } else if (isYesterday(startDay)) {\n                return `Yesterday - ${formattedDate}`\n            } else if (isTomorrow(startDay)) {\n                return `Tomorrow - ${formattedDate}`\n            } else {\n                return formattedDate\n            }\n        },\n        currentMonthIndex: (state) => getMonth(state.currentMonth), // Adds a getter to get the current month's index\n        currentMonthName: (state) => format(state.currentMonth, 'MMMM'),\n        currentYear: (state) => getYear(state.currentMonth),\n        daysInMonth: (state) => {\n            const startOfCurrentMonth = startOfMonth(state.currentMonth)\n            const endOfCurrentMonth = endOfMonth(state.currentMonth)\n\n            // Adjust these to ensure the grid starts on Sunday and ends on Saturday\n            const startOfGrid = startOfWeek(startOfCurrentMonth, {weekStartsOn: 0})\n            const endOfGrid = endOfWeek(endOfCurrentMonth, {weekStartsOn: 0})\n\n            // Generate the days for the calendar grid\n            return eachDayOfInterval({start: startOfGrid, end: endOfGrid})\n        },\n        isToday: (state) => {\n            const today = new Date()\n            const viewingStart = new Date(state.viewingWindowStart)\n\n            return today.toDateString() === viewingStart.toDateString()\n        },\n    },\n})\n","// utilities/timeUtils.js\n/**\n * Creates an array of Date objects representing time slots.\n *\n * This function generates a sequence of time slots starting from a specified\n * start time, continuing for a given number of hours, and spaced apart\n * by a specified interval in minutes.\n *\n * @param {Date} start - The start time from which to generate slots, as a Date object.\n * @param {number} [durationHours=4] - The total duration for which to generate slots, in hours.\n * @param {number} [intervalMinutes=30] - The interval between each slot, in minutes.\n * @returns {Date[]} An array of Date objects, each representing a time slot.\n *\n * Example:\n * If start is `new Date('2024-01-01T08:00:00Z')`, durationHours is 2, and intervalMinutes is 30,\n * the output will be an array of Date objects representing the times:\n * `08:00`, `08:30`, `09:00`, and `09:30`.\n */\nexport function createTimeSlots(start, durationHours = 4, intervalMinutes = 30) {\n    let slots = [];\n    for (let i = 0; i < (durationHours * 60) / intervalMinutes; i++) {\n        let slotTime = new Date(start.getTime() + i * intervalMinutes * 60000);\n        slots.push(slotTime);  // Keep as Date object\n    }\n    return slots;\n}"],"names":["_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","delegateYield","asyncGeneratorStep","gen","reject","_next","_throw","key","info","error","_asyncToGenerator","fn","self","args","arguments","apply","err","undefined","_toConsumableArray","arr","Array","isArray","_arrayLikeToArray","_arrayWithoutHoles","iter","from","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","minLen","toString","test","len","arr2","ownKeys","getOwnPropertySymbols","filter","getOwnPropertyDescriptor","_objectSpread","_defineProperty","getOwnPropertyDescriptors","defineProperties","obj","toPrimitive","String","Number","_toPrimitive","convertScheduleToTimezone","scheduleData","userStore","useUserStore","data","map","item","startTimeInUserTz","start_time","formatDateTimeFromUtcToUserTimezone","endTimeInUserTz","end_time","recurrenceDetailsInUserTz","recurrenceDetails","_item$recurrenceDetai","start_date","end_date","formatTimeInUserTimezone","getUpcomingContentDates","viewingWindowStart","dates","start","Date","setHours","getHours","dayjs","relativeTime","timezone","utc","initialState","currentMonth","selectedDay","currentWeekStart","currentWeekEnd","fiveDaySixHourSchedule","todaysContent","weeklyContent","dataFetchLog","scheduleIsLoading","savingToSchedule","useScheduleStore","defineStore","state","actions","resetAll","assign","this","now","setSelectedDay","day","_this","_callee","_context","addHours","startOfDay","startOfWeek","weekStartsOn","endOfWeek","fetchWeekDataIfNeeded","setSelectedDayToToday","startOfHour","changeDay","days","_this2","_callee2","currentTime","newDay","_context2","getMinutes","addDays","setMinutes","shiftHours","hours","_this3","_callee3","_context3","isSameDay","isElevenPM","date","subtractMonth","_this4","_callee4","_context4","subMonths","console","log","t0","concat","addMonth","_this5","_callee5","_context5","addMonths","fetchFiveDaySixHourSchedule","_this6","_callee6","response","_context6","axios","get","userTimezone","fetchTodaysContent","_this7","_callee7","_context7","preloadWeeklyContent","_this8","_callee8","currentDate","_context8","loadWeekFromDate","_this9","_callee9","formattedDate","fullISODate","_timezone3","newData","weekStart","weekEnd","fetchTime","existingLogIndex","_context9","toISOString","post","findIndex","lastFetch","index","id","needsDataForWeek","formatISODate","split","weekStartStr","weekEndStr","weekHasBeenFetched","some","logWeekStartStr","logWeekEndStr","calculateExtendedEndForUpcomingContent","baseStartTime","getTime","checkAndFetchForUpcomingContent","_this10","_callee10","upcomingDates","fifteenMinutesAgo","_iterator","_step","_loop","_context11","_createForOfIteratorHelper","dateString","_context10","content","contentDate","toDateString","lastFetchedTime","isFresh","fetchDataAndUpdateLog","t1","_this11","_callee11","_context12","_this12","_callee12","_context13","mapShowsToTimeSlots","shows","timeSlots","showsWithAdjustedSpans","show","showStart","showEnd","durationMinutes","slotIndex","slot","span","Math","ceil","gridStart","gridSpan","showForSlot","find","placeholder","getters","nextFourHoursOfContent","startOfCurrentHour","fourHoursLater","durationHours","intervalMinutes","slots","slotTime","createTimeSlots","startDateTime","endDateTime","startInUserTZ","convertUtcToUserTimezone","endInUserTZ","warn","showStartTimeInUserTZ","fetchShowsScheduledBetween","resolvedShows","sortedShows","sort","b","startTimeComparison","priority","showsByStartTime","startTime","group","resolveSchedulingConflicts","adjustedShows","adjustShowsForGrid","showsWithPlacement","gridItems","slotStart","fillEmptySlotsWithPlaceholders","nextFourHoursWithHalfHourIntervals","intervals","current","tz","startOf","formatted","format","dateTimeString","add","upcomingContent","end","showsGroupedByStartTime","reduce","acc","itemStart","selected","nextSixHours","adjustedStart","eachHourOfInterval","dateMessage","startDay","isToday","isYesterday","isTomorrow","currentMonthIndex","getMonth","currentMonthName","currentYear","getYear","daysInMonth","startOfCurrentMonth","startOfMonth","endOfCurrentMonth","endOfMonth","startOfGrid","endOfGrid","eachDayOfInterval","today","viewingStart"],"sourceRoot":""}