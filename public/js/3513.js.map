{"version":3,"file":"js/3513.js","mappings":"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","sources":["webpack:///./resources/js/Utilities/TimeUtils.js","webpack:///./resources/js/Stores/ScheduleStore.js","webpack:///./resources/js/Utilities/PageSetup.js","webpack:///./resources/js/Components/Global/Calendar/TodayView.vue?b182","webpack:///./resources/js/Components/Global/Navigation/PublicNavigationMenu.vue?ce68","webpack:///./resources/js/Components/Global/Navigation/PublicResponsiveNavigationMenu.vue?f050","webpack:///./resources/js/Components/Global/Schedule/ScheduleGridContainer.vue?4dc0","webpack:///./resources/js/Components/Pages/Schedule/ScheduleGrid.vue","webpack:///./resources/js/Components/Global/Calendar/TodayView.vue","webpack:///./resources/js/Components/Global/Calendar/TodayView.vue?b80e","webpack:///./resources/js/Components/Global/Calendar/TodayView.vue?ee4f","webpack:///./resources/js/Components/Global/Layout/Footer.vue","webpack:///./resources/js/Components/Global/Modals/Messages.vue?dfe9","webpack:///./resources/js/Components/Global/Modals/Messages.vue","webpack:///./resources/js/Components/Global/Modals/PopUpModal.vue?0d51","webpack:///./resources/js/Components/Global/Modals/PopUpModal.vue","webpack:///./resources/js/Components/Global/Navigation/PublicNavigationMenu.vue","webpack:///./resources/js/Components/Global/Navigation/PublicNavigationMenu.vue?7a59","webpack:///./resources/js/Components/Global/Navigation/PublicNavigationMenu.vue?d2d0","webpack:///./resources/js/Components/Global/Navigation/PublicResponsiveNavigationMenu.vue","webpack:///./resources/js/Components/Global/Navigation/PublicResponsiveNavigationMenu.vue?5b42","webpack:///./resources/js/Components/Global/Navigation/PublicResponsiveNavigationMenu.vue?28a7","webpack:///./resources/js/Components/Pages/Schedule/ScheduleGrid.vue?c989","webpack:///./resources/js/Components/Global/Schedule/CurrentTime.vue","webpack:///./resources/js/Components/Global/Schedule/CurrentTime.vue?93a9","webpack:///./resources/js/Components/Global/Schedule/ScheduleGridContainer.vue","webpack:///./resources/js/Utilities/Throttle.js","webpack:///./resources/js/Components/Global/Schedule/ScheduleGridContainer.vue?13a7","webpack:///./resources/js/Components/Global/Schedule/ScheduleGridContainer.vue?63d2","webpack:///./resources/js/Layouts/NoLayout.vue?64f0","webpack:///./resources/js/Layouts/NoLayout.vue","webpack:///./resources/js/Pages/LoggedOut/Schedule/Index.vue","webpack:///./resources/js/Pages/LoggedOut/Schedule/Index.vue?e5e6"],"sourcesContent":["// utilities/timeUtils.js\nimport dayjs from 'dayjs';\nimport utc from 'dayjs/plugin/utc';\nimport timezone from 'dayjs/plugin/timezone';\n\ndayjs.extend(utc);\ndayjs.extend(timezone);\n\n/**\n * Creates an array of Date objects representing time slots.\n *\n * This function generates a sequence of time slots starting from a specified\n * start time, continuing for a given number of hours, and spaced apart\n * by a specified interval in minutes.\n *\n * @param {Date} start - The start time from which to generate slots, as a Date object.\n * @param {number} [durationHours=4] - The total duration for which to generate slots, in hours.\n * @param {number} [intervalMinutes=30] - The interval between each slot, in minutes.\n * @param {string} timezone - The timezone in which the time slots will be calculated.\n * @returns {Date[]} An array of Date objects, each representing a time slot.\n *\n * Example:\n * If start is `new Date('2024-01-01T08:00:00Z')`, durationHours is 2, and intervalMinutes is 30,\n * the output will be an array of Date objects representing the times:\n * `08:00`, `08:30`, `09:00`, and `09:30`.\n */\nexport function createTimeSlots(start, durationHours = 4, intervalMinutes = 30, timezone) {\n    // console.log(`Creating time slots starting from ${start}, for ${durationHours} hours, every ${intervalMinutes} minutes in timezone ${timezone}.`);\n    let slots = [];\n    let startTime = dayjs(start).tz(timezone);  // Convert start time to the correct time zone\n    for (let i = 0; i < (durationHours * 60) / intervalMinutes; i++) {\n        let slotTime = startTime.add(i * intervalMinutes, 'minute').toDate();  // Generate slots in the correct time zone\n        slots.push(slotTime);  // Keep as Date object\n    }\n    return slots;\n}\n// export function createTimeSlots(start, durationHours = 4, intervalMinutes = 30) {\n//     let slots = [];\n//     let startTime = dayjs(start).tz(userStore.timezone);  // Convert start time to the correct time zone\n//     for (let i = 0; i < (durationHours * 60) / intervalMinutes; i++) {\n//         let slotTime = new Date(start.getTime() + i * intervalMinutes * 60000);\n//         slots.push(slotTime);  // Keep as Date object\n//     }\n//     return slots;\n// }","import { defineStore } from 'pinia'\nimport { useUserStore } from '@/Stores/UserStore'\nimport { useAppSettingStore } from '@/Stores/AppSettingStore'\nimport { createTimeSlots } from '@/Utilities/TimeUtils'\nimport {\n    addDays,\n    addHours,\n    addMonths,\n    eachDayOfInterval,\n    eachHourOfInterval,\n    endOfMonth,\n    endOfWeek,\n    format,\n    getHours,\n    getMonth,\n    getYear,\n    isSameDay,\n    isToday,\n    isTomorrow,\n    isYesterday,\n    startOfDay,\n    startOfHour,\n    startOfMonth,\n    startOfWeek,\n    subMonths,\n} from 'date-fns'\n\n// Import dayjs and its plugins\nimport dayjs from 'dayjs'\nimport isSameOrAfter from 'dayjs/plugin/isSameOrAfter'\nimport isSameOrBefore from 'dayjs/plugin/isSameOrBefore' // To check if the day is the same\nimport relativeTime from 'dayjs/plugin/relativeTime'\nimport duration from 'dayjs/plugin/duration'\nimport timezone from 'dayjs/plugin/timezone'\nimport utc from 'dayjs/plugin/utc'\nimport weekOfYear from 'dayjs/plugin/weekOfYear' // For week start and end calculations\nimport advancedFormat from 'dayjs/plugin/advancedFormat' // For more complex formatting options\n\n// Extend dayjs with the plugins\ndayjs.extend(relativeTime)\ndayjs.extend(duration)\ndayjs.extend(timezone)\ndayjs.extend(weekOfYear)\ndayjs.extend(advancedFormat)\ndayjs.extend(utc)\ndayjs.extend(isSameOrAfter)\ndayjs.extend(isSameOrBefore)\n\nfunction convertScheduleToTimezone(scheduleData) {\n    const userStore = useUserStore() // Access the UserStore\n\n    return scheduleData.data.map(item => {\n        // Convert top-level start_time and end_time using UserStore methods\n        // console.log(`Original startTime for ${item.id}: ${item.startTime}`)\n        const startTimeInUserTz = item.startTime ? userStore.formatDateTimeFromUtcToUserTimezone(item.startTime, 'YYYY-MM-DD HH:mm:ss') : null\n        const endTimeInUserTz = item.endTime ? userStore.formatDateTimeFromUtcToUserTimezone(item.endTime, 'YYYY-MM-DD HH:mm:ss') : null\n        // Add debug logging to help trace conversion issues or confirm correct conversions\n        // console.log(`Converted startTime for ${item.id}: ${startTimeInUserTz}`)\n\n        return {\n            ...item,\n            startTime: startTimeInUserTz,\n            endTime: endTimeInUserTz,\n            timezone: userStore.timezone,\n        }\n    })\n}\n\n// Helper function to get dates within the next 6 hours from viewingWindowStart\nfunction getUpcomingContentDates(viewingWindowStart) {\n    let dates = []\n    let start = dayjs(viewingWindowStart) // Ensure viewingWindowStart is a Day.js object\n\n    for (let i = 0; i < 6; i++) {\n        // Add i hours to the start time, each time creating a new Day.js object\n        dates.push(start.add(i, 'hour').toDate()) // Convert to Date if necessary; otherwise keep as Day.js object\n    }\n    console.log(1)\n    return dates\n\n}\n\nconst getTimeZone = () => {\n    const userStore = useUserStore()\n    // This function should return the timezone of the user.\n    // This could be dynamic based on the user's settings or browser settings.\n    // return Intl.DateTimeFormat().resolvedOptions().timeZone;\n    console.log(2)\n    return userStore.timezone\n}\n\nconst initialState = () => ({\n    baseTime: dayjs().tz(getTimeZone()).toDate(),\n    currentHalfHour: dayjs().tz(getTimeZone()).startOf('hour').add(dayjs().minute() >= 30 ? 30 : 0, 'minute').toDate(),\n    fourHoursLater: dayjs().tz(getTimeZone()).startOf('hour').add(dayjs().minute() >= 30 ? 30 : 0, 'minute').add(4, 'hour').toDate(),\n    viewingWindowStart: dayjs().tz(getTimeZone()).startOf('hour').toDate(),\n    currentMonth: dayjs().tz(getTimeZone()).startOf('month').toDate(),\n    selectedDay: dayjs().tz(getTimeZone()).toDate(),\n    currentWeekStart: dayjs().tz(getTimeZone()).startOf('week').toDate(),\n    currentWeekEnd: dayjs().tz(getTimeZone()).endOf('week').toDate(),\n    nextFourHoursOfContent: [],\n    nextFourHoursOfContentWithPlaceholders: [],\n    // nextFourHoursWithHalfHourIntervals: [],\n    // viewingMode: 'automatic', // or 'userSelected'\n    fiveDaySixHourSchedule: [], // Holds the schedule shows 5 day / 6 hour structured data\n    schedules: [], // this is our new schedules array, storing fetched schedule data\n    isLoading: true, // This flag indicates if data is currently being fetched\n    nextPage: 1, // This keeps track of the next page to fetch for pagination\n    hasMore: true, // This flag indicates if there are more schedules to fetch\n    todaysContent: [],\n    weeklyContent: [],\n    dataFetchLog: [],\n    savingToSchedule: false,\n    slotIntervalMinutes: 30,\n    mediumScreenSlotHours: 4, // 4 hours = 8 slots\n    smallScreenSlotHours: 2, // 2 hours = 4 slots\n    verySmallScreenSlotHours: 1, // 1 hour = 2 slots\n    timeSlots: [],\n    timeBanners: [\n        {id: 1, name: 'Early Morning', startTime: '04:00', duration: 2},\n        {id: 2, name: 'Morning', startTime: '06:00', duration: 6},\n        {id: 3, name: 'Afternoon', startTime: '12:00', duration: 5},\n        {id: 4, name: 'Prime Time', startTime: '17:00', duration: 3},\n        {id: 5, name: 'Late Prime Time', startTime: '20:00', duration: 3},\n        {id: 6, name: 'Late Night', startTime: '23:00', duration: 2}, // Spans midnight to 01:00\n        {id: 7, name: 'Overnight', startTime: '01:00', duration: 3}, // Spans from 01:00 to 04:00\n    ],\n})\n\nexport const useScheduleStore = defineStore('scheduleStore', {\n    state: initialState,\n    actions: {\n        resetAll() {\n            // Reset the store to its original state (clear all data)\n            Object.assign(this, initialState())\n            console.log(3)\n        },\n        reset() {\n            this.viewingWindowStart = dayjs().tz(getTimeZone()).startOf('hour').toDate()\n            this.currentMonth = dayjs().tz(getTimeZone()).startOf('month').toDate()\n            this.selectedDay = dayjs().tz(getTimeZone()).toDate()\n            console.log(4)\n        },\n        async setSelectedDay(day) {\n            // Ensure that 'day' is a Day.js object, convert if coming as a native Date or string\n            const selectedDay = dayjs(day)\n\n            // Set the selected day\n            this.selectedDay = selectedDay.toDate() // Convert back to Date if necessary; otherwise keep as Day.js object\n\n            // Explicitly set the viewingWindowStart to 4 AM for the selected day\n            this.viewingWindowStart = selectedDay.startOf('day').add(4, 'hours').toDate()\n\n            // Set the start and end of the week based on the selected day\n            this.currentWeekStart = selectedDay.startOf('week').toDate() // Consider week starting on Sunday\n            this.currentWeekEnd = selectedDay.endOf('week').toDate() // Consider week ending on Saturday\n\n            // Use the updated fetch logic\n            await this.fetchWeekDataIfNeeded()\n            console.log(5)\n        },\n        setSelectedDayToToday(day) {\n            const now = dayjs()  // Create a Day.js object for the current date and time\n\n            // Set selectedDay to the current date and time\n            this.selectedDay = now.toDate() // Convert back to Date if necessary; otherwise keep as Day.js object\n\n            // Set viewingWindowStart to the start of the current hour using Day.js\n            this.viewingWindowStart = now.startOf('hour').toDate()\n            console.log(6)\n        },\n        async changeDay(days) {\n            const currentTimeZone = getTimeZone() // or however you obtain the timezone\n            // Extract the time component from the current viewing window start\n            const currentTime = dayjs(this.viewingWindowStart).hour() * 60 + dayjs(this.viewingWindowStart).minute()\n\n            // Create a new day and set it to the start of that day\n            let newDay = dayjs(this.viewingWindowStart).tz(currentTimeZone).add(days, 'day').startOf('day')\n\n            // Set the time back to the original time\n            newDay = newDay.add(currentTime, 'minute')\n\n            // Depending on your application's needs, you may or may not need to convert it back to a JavaScript Date object\n            // If you need a Date object:\n            this.viewingWindowStart = newDay.toDate()\n\n            // If you can use dayjs objects directly (preferred if possible):\n            this.viewingWindowStart = newDay\n\n            // // Check if the week of the new day is already loaded\n            // const weekStart = startOfWeek(newDay, {weekStartsOn: 0});\n            // const weekEnd = endOfWeek(newDay, {weekStartsOn: 0});\n\n            // Use the updated centralized fetch logic without redundant checks\n            await this.fetchWeekDataIfNeeded()\n\n            // // Check for the need to load data for the new week\n            // if (this.needsDataForWeek(weekStart, weekEnd)) {\n            //     await this.loadWeekFromDate(newDay).catch(error => {\n            //         console.error(\"Failed to load data for the new week:\", error);\n            //     });\n            // }\n\n            // // Check for the need to load data for the new week\n            // if (!this.needsDataForWeek()) {\n            //     // Data for the current week has already been loaded; skip fetching\n            //     console.log(\"Data for the current week has already been loaded; skipping redundant fetch.\");\n            //     return;\n            // }\n            //\n            // // Proceed with data fetching if needed\n            // await this.checkAndFetchForUpcomingContent();\n            console.log(7)\n        },\n        async shiftHours(hours) {\n            // Shift the viewing window by the specified number of hours\n            this.viewingWindowStart = dayjs(this.viewingWindowStart).add(hours, 'hour').toDate()\n\n            // Set the current week start and end based on the new viewing window start\n            this.currentWeekStart = dayjs(this.viewingWindowStart).startOf('week').toDate()\n            this.currentWeekEnd = dayjs(this.viewingWindowStart).endOf('week').toDate()\n\n            // If the day has changed, update selectedDay and the week's range\n            if (!dayjs(this.viewingWindowStart).isSame(dayjs(this.selectedDay), 'day')) {\n                this.selectedDay = dayjs(this.viewingWindowStart).startOf('day').toDate()\n            }\n\n            // Use the updated fetch logic\n            await this.fetchWeekDataIfNeeded()\n            console.log(8)\n        },\n        isElevenPM(date) {\n            // Convert the date to a Day.js object if it's not already one\n            const time = dayjs(date)\n            // Check if the hour is 23 (11 PM)\n            console.log(9)\n            return time.hour() === 23\n\n        },\n        // Actions to change the month\n        async subtractMonth() {\n            // Convert currentMonth to a Day.js object if it's not already and subtract one month\n            this.currentMonth = dayjs(this.currentMonth).subtract(1, 'month').toDate()\n\n            try {\n                // Pass the new currentMonth to setSelectedDay\n                await this.setSelectedDay(this.currentMonth)\n                console.log('Set selected day based on current month:', this.currentMonth)\n            } catch (error) {\n                console.error(`Failed to set selected day based on current month ${this.currentMonth}:`, error)\n            }\n            console.log(10)\n        },\n        async addMonth() {\n            // Convert currentMonth to a Day.js object if it's not already and add one month\n            this.currentMonth = dayjs(this.currentMonth).add(1, 'month').toDate()\n\n            try {\n                // Pass the new currentMonth to setSelectedDay\n                await this.setSelectedDay(this.currentMonth)\n                console.log('Set selected day based on current month:', this.currentMonth)\n            } catch (error) {\n                console.error(`Failed to set selected day based on current month ${this.currentMonth}:`, error)\n            }\n            console.log(11)\n        },\n        async fetchFiveDaySixHourSchedule() {\n            console.error('fetchFiveDaySixHourSchedule')\n            try {\n                const userStore = useUserStore()\n                const response = await axios.get('/api/schedule')\n\n                // Fallback to response timezone if userStore.timezone is not set\n                const timezone = userStore.timezone || response.data.userTimezone || 'UTC' // Additional fallback to 'UTC'\n\n                // Convert the entire schedule, including nested recurrenceDetails, to the user's timezone\n                this.fiveDaySixHourSchedule = convertScheduleToTimezone(response.data, timezone)\n                console.error('fetchFiveDaySixHourSchedule', response.data)\n            } catch (error) {\n                console.error('Failed to load schedule shows:', error)\n                // Handle the error state as needed, e.g., setting an error state property\n            }\n            console.log(12)\n        },\n        async fetchTodaysContent() {\n            try {\n                const userStore = useUserStore()\n                const response = await axios.get('/api/schedule/today')\n\n                // Fallback to response timezone if userStore.timezone is not set\n                const timezone = userStore.timezone || response.data.userTimezone || 'UTC' // Additional fallback to 'UTC'\n\n                this.todaysContent = convertScheduleToTimezone(response.data, timezone)\n            } catch (error) {\n                console.error('Failed to fetch today\\'s content:', error)\n            }\n            console.log(13)\n        },\n        async preloadWeeklyContent() {\n            console.log('preloading weekly content...')\n            // Use the current date to preload content for the current week\n            const currentDate = dayjs(this.baseTime) // Creates a Day.js object representing the current date and time\n\n            try {\n                // Call loadWeekFromDate with the current Day.js date object\n                await this.loadWeekFromDate(currentDate) // loadWeekFromDate uses dayjs\n            } catch (error) {\n                console.error('Failed to preload weekly content:', error)\n            }\n            console.log(14)\n        },\n        // this is our new fetch schedules method.\n        async fetchSchedules(startDate, endDate) {\n            this.isLoading = true\n            this.loading = true\n            console.log('Loading schedule...')\n            console.log(`Loading schedule between: ${startDate} and ${endDate}`) // Log the date being requested\n            try {\n                const userStore = useUserStore()\n                const dayStartDate = dayjs(startDate)\n                const dayEndDate = dayjs(endDate)\n                const fullISOStartDate = dayStartDate.toISOString()\n                const fullISOEndDate = dayEndDate.toISOString()\n\n                const response = await axios.get(`/api/schedules/range?start=${fullISOStartDate}&end=${fullISOEndDate}`)\n\n                const formattedStartDate = dayStartDate.format('YYYY-MM-DD') // For potential error messages and logging\n                const formattedEndDate = dayEndDate.format('YYYY-MM-DD') // For potential error messages and logging\n                console.log(`Loading schedule between: ${formattedStartDate} and ${formattedEndDate}`) // Log the date being requested\n                console.log('Received response:', response.data) // Log the raw response data\n\n                // Fallback to response timezone if userStore.timezone is not set\n                const timezone = userStore.timezone || response.data.userTimezone\n\n                const newData = convertScheduleToTimezone(response.data, timezone) // Ensure you are accessing the correct data property from the response\n\n                // Merge newData into schedules, avoiding duplicates\n                this.schedules = [...this.schedules, ...newData].filter((value, index, self) =>\n                        index === self.findIndex((t) => (\n                            t.id === value.id && t.startTime === value.startTime\n                        )),\n                )\n                console.log('Updated schedules:', this.schedules) // Log the updated weekly content\n\n                // Optionally update fetch logs or perform additional state updates\n                // this.updateFetchLogs(startDate) // this was designed to just log a week fetching at a time.\n\n            } catch (error) {\n                console.error('Failed to fetch schedules:', error)\n                this.isLoading = false\n                console.log('012')\n            } finally {\n                this.isLoading = false\n                console.log('Week from date loaded!')\n            }\n        },\n\n        async fetchMoreSchedules() {\n            // Prevent fetching if already loading or if there are no more schedules to fetch\n            if (this.isLoading || !this.hasMore) return;\n\n            this.isLoading = true;\n            console.log('Fetching more schedules...');\n            try {\n                const lastSchedule = this.schedules[this.schedules.length - 1];\n                const startDate = lastSchedule ? dayjs(lastSchedule.startTime).format('YYYY-MM-DD') : dayjs().format('YYYY-MM-DD');\n                const endDate = dayjs(startDate).add(7, 'day').format('YYYY-MM-DD'); // Fetch the next 7 days\n\n                await this.fetchSchedules(startDate, endDate);\n\n                // Check if new schedules were added\n                const newSchedules = this.schedules.slice(this.schedules.length - 1);\n                // If no new schedules are fetched, set hasMore to false\n                if (newSchedules.length === 0) {\n                    this.hasMore = false;\n                } else {\n                    // Increment the next page number for future fetches\n                    this.nextPage += 1;\n                }\n            } catch (error) {\n                console.error('Failed to fetch more schedules:', error);\n            } finally {\n                this.isLoading = false;\n            }\n        },\n\n        async loadWeekFromDate(date) {\n            let formattedDate = null // Declare formattedDate outside of the try block\n            this.isLoading = true\n            console.log('Loading week from date...')\n            try {\n                const userStore = useUserStore()\n                // Ensure the date is in UTC format for the request\n                // console.log('Date before formatted: ' + date)\n                // Convert date to Day.js object and format it in ISO string with UTC\n                const dayDate = dayjs(date)\n                const fullISODate = dayDate.toISOString()\n                // console.log(`Loading week data for date in UTC: ${fullISODate}`)\n\n                // Fetch the week's schedule data\n                // Send the dateTime and timezone as a JSON object in a POST request\n                const response = await axios.post(`/api/schedule/week/${fullISODate}`)\n\n                // const formattedDate = date.toISOString().split('T')[0];\n                // Log and error handling\n                const formattedDate = dayDate.format('YYYY-MM-DD') // For potential error messages and logging\n                console.log(`Loading week data for date: ${formattedDate}`) // Log the date being requested\n                //\n                // const response = await axios.get(`/api/schedule/week/${formattedDate}`);\n                console.log('Received response:', response.data) // Log the raw response data\n\n                // Fallback to response timezone if userStore.timezone is not set\n                const timezone = userStore.timezone || response.data.userTimezone\n                // console.log(`Using timezone: ${timezone}`) // Log the timezone being used\n\n                const newData = convertScheduleToTimezone(response.data, timezone) // Ensure you are accessing the correct data property from the response\n\n                // Merge newData into weeklyContent, avoiding duplicates\n                this.weeklyContent = [...this.weeklyContent, ...newData].filter((value, index, self) =>\n                        index === self.findIndex((t) => (\n                            t.id === value.id && t.startTime === value.startTime\n                        )),\n                )\n\n                console.log('Updated weeklyContent:', this.weeklyContent) // Log the updated weekly content\n\n                // Optionally update fetch logs or perform additional state updates\n                this.updateFetchLogs(date)\n\n                this.isLoading = false\n                console.log('Week from date loaded!')\n            } catch (error) {\n                console.error(`Failed to load content for week starting ${formattedDate}:`, error)\n                this.isLoading = false\n                console.log('002')\n            }\n            console.log(15)\n            console.log('End of loadWeekFromDate function')\n        },\n        updateFetchLogs(date) {\n            // Convert date to a Day.js object if it's not already one\n            const dayDate = dayjs(date)\n\n            // Use Day.js to calculate the start and end of the week\n            const weekStart = dayDate.startOf('week').toISOString() // Assumes the week starts on Sunday\n            const weekEnd = dayDate.endOf('week').toISOString() // Assumes the week ends on Saturday\n            const fetchTime = dayjs().toISOString() // Current time in ISO format\n\n            // Find existing log entry for the week\n            const existingLogIndex = this.dataFetchLog.findIndex(log =>\n                log.weekStart === weekStart && log.weekEnd === weekEnd)\n\n            if (existingLogIndex !== -1) {\n                // Update the last fetch time if the log already exists\n                this.dataFetchLog[existingLogIndex].lastFetch = fetchTime\n            } else {\n                // Add a new log entry if it does not exist\n                this.dataFetchLog.push({weekStart, weekEnd, lastFetch: fetchTime})\n            }\n            console.log(16)\n        },\n        needsDataForWeek() {\n            // Helper function to format dates to 'YYYY-MM-DD' for easier comparison\n            const formatISODate = (date) => dayjs(date).format('YYYY-MM-DD')\n\n            // Current week range in 'YYYY-MM-DD' format\n            const weekStartStr = formatISODate(this.currentWeekStart)\n            const weekEndStr = formatISODate(this.currentWeekEnd)\n\n            // Enhanced logging for debugging\n            // console.log(`Current week range: ${weekStartStr} to ${weekEndStr}`)\n            // console.log('Existing data fetch log entries:', this.dataFetchLog)\n\n            // Iterate through the fetch log to check if the current week has been fetched\n            const weekHasBeenFetched = this.dataFetchLog.some(log => {\n                // Convert log dates to 'YYYY-MM-DD' format for comparison\n                const logWeekStartStr = formatISODate(log.weekStart)\n                const logWeekEndStr = formatISODate(log.weekEnd)\n\n                // Log each comparison for insight\n                // console.log(`Comparing to fetched range: ${logWeekStartStr} to ${logWeekEndStr}`)\n\n                return logWeekStartStr <= weekStartStr && logWeekEndStr >= weekEndStr\n            })\n\n            // Log the final determination\n            // console.log(`Week from ${weekStartStr} to ${weekEndStr} has ${weekHasBeenFetched ? '' : 'not '}been fetched.`)\n            console.log(17)\n            return !weekHasBeenFetched\n        },\n        calculateExtendedEndForUpcomingContent() {\n            // Convert viewingWindowStart to a Day.js object if it's not already one\n            const baseStartTime = dayjs(this.viewingWindowStart)\n\n            // Extend by 6 hours to cover the upcoming content span\n            // Day.js handles date and time addition cleanly, returning a new Day.js object\n            const extendedEndTime = baseStartTime.add(6, 'hour')\n\n            console.log(18)\n            // Return the extended end time as a Date object, if needed elsewhere as a Date\n            return extendedEndTime.toDate()\n        },\n        // Function to check for and fetch missing upcoming content\n        async checkAndFetchForUpcomingContent() {\n            const upcomingDates = getUpcomingContentDates(this.viewingWindowStart) // Assuming this returns Day.js objects\n            const now = dayjs()\n            const fifteenMinutesAgo = now.subtract(15, 'minutes')\n\n            for (const date of upcomingDates) {\n                const dateString = date.format('YYYY-MM-DD')  // Day.js format for 'YYYY-MM-DD'\n                const contentCoverageAndFreshness = this.weeklyContent.some(content => {\n                    const contentDate = dayjs(content.startTime).format('YYYY-MM-DD')  // Convert and compare as 'YYYY-MM-DD'\n                    const lastFetchedTime = this.dataFetchLog[dateString]\n                    const isFresh = lastFetchedTime && dayjs(lastFetchedTime) > fifteenMinutesAgo\n                    return dateString === contentDate && isFresh\n                })\n\n                if (!contentCoverageAndFreshness) {\n                    // This date needs data fetching\n                    await this.fetchDataAndUpdateLog(dateString, date.toDate()) // Pass as Date if needed, or adjust downstream functions to accept Day.js objects\n                    break // Assuming you fetch data for the week, so no need to check further dates within the same week\n                }\n            }\n            console.log(19)\n        },\n        async fetchDataAndUpdateLog(dateString, date) {\n            try {\n                // Assuming 'date' is already a Day.js object; if not, convert it\n                const dayDate = dayjs(date)\n\n                await this.loadWeekFromDate(dayDate.toDate())  // Pass as a Date if needed, or adjust 'loadWeekFromDate' to accept Day.js objects\n                // Successfully fetched, so update the log\n                this.dataFetchLog[dateString] = dayjs().toISOString()  // Use Day.js to get the current time in ISO format\n                // console.log('Data fetched successfully for date:', dateString)\n            } catch (error) {\n                console.error(`Failed to fetch data for date ${dateString}:`, error)\n            }\n            console.log(20)\n        },\n\n        // Updated to use this.currentWeekStart and this.currentWeekEnd directly\n        async fetchWeekDataIfNeeded() {\n            // Assumes this.currentWeekStart and this.currentWeekEnd are already set\n            if (this.needsDataForWeek()) {\n                await this.checkAndFetchForUpcomingContent().catch(error => {\n                    console.error('Failed to load data for the week:', error)\n                    return false // Indicates failure to fetch when an error occurs\n                })\n            } else {\n                console.log('Week data already loaded; no need to fetch.')\n            }\n            console.log(21)\n        },\n\n        // Function to simply update baseTime with the given time (expected to be a Day.js object or compatible input)\n        updateBaseTime(time) {\n            // Ensure the time is a Day.js object when setting baseTime\n            this.baseTime = dayjs(time).toDate()  // Convert to Date if necessary; consider keeping it as Day.js object if possible\n            console.log(22)\n        },\n\n        // Function to set baseTime based on a new time input (expected to be a string, Date, etc.)\n        setBaseTime(newTime) {\n            // Convert newTime to a Day.js object and then to Date if necessary\n            this.baseTime = dayjs(newTime).toDate()  // This handles various input formats and ensures consistency\n            console.log(23)\n        },\n\n\n        /**\n         * This method orchestrates the update of show scheduling data for the next four hours.\n         * It is designed to be triggered when there are changes to the base time or when a manual refresh is needed.\n         * The method handles loading and organizing the scheduling data to be ready for display in the grid.\n         */\n        async updateNextFourHours() {\n            // Set the loading state to true to indicate that data processing is underway.\n            // This can be used to display a loading spinner or disable user interaction temporarily.\n            this.isLoading = true\n\n            // Update the time range for the scheduling grid. This adjusts `currentHalfHour` and `fourHoursLater`\n            // based on the current `baseTime`. These values define the range of time for which shows will be displayed.\n            this.updateTimeRange()\n\n            // Update the time slots\n            this.setTimeSlots()\n\n            // Prepares the shows for the grid display by filtering, calculating grid slots,\n            // resolving conflicts, and optionally filling empty grid slots with placeholders.\n            // This step involves several functions that ensure shows are positioned correctly according to their\n            // start time, duration, and conflicts with other shows.\n            this.prepareShowsForGrid()\n\n            // Reset the loading state to false indicates that the data processing is complete.\n            // This allows the user interface to be interactive again and shows the updated data in the grid.\n            this.isLoading = false\n            console.log(24)\n        },\n\n\n        updateTimeRange() {\n            // Ensure the baseTime is interpreted correctly in the current user's timezone\n            const baseDate = dayjs(this.baseTime).tz(getTimeZone())\n\n            // Calculate the rounded minutes to either 0 or 30 based on the current time\n            const roundedMinutes = baseDate.minute() < 30 ? 0 : 30\n\n            // Set the current half hour, rounding down to the nearest half-hour mark\n            const currentHalfHour = baseDate.minute(roundedMinutes).second(0).millisecond(0).startOf('minute')\n\n            // Calculate four hours later from the current half-hour mark\n            const fourHoursLater = currentHalfHour.add(4, 'hours')\n\n            // Update the store's currentHalfHour and fourHoursLater ensuring they are Date objects if required\n            this.currentHalfHour = currentHalfHour.toDate()\n            this.fourHoursLater = fourHoursLater.toDate()\n            console.log(25)\n\n            // console.log('Fetching shows between:', currentHalfHour.format('YYYY-MM-DD HH:mm:ss'), 'and', fourHoursLater.format('YYYY-MM-DD HH:mm:ss'))\n        },\n\n        initializeTimeSlots() {\n            this.timeSlots = createTimeSlots()\n        },\n\n        setTimeSlots() {\n            const appSettingStore = useAppSettingStore()\n            let slotHours\n\n            // Determine the number of slot hours based on screen size\n            if (appSettingStore.isVerySmallScreen) {\n                slotHours = this.verySmallScreenSlotHours\n            } else if (appSettingStore.isSmallScreen) {\n                slotHours = this.smallScreenSlotHours\n            } else {\n                slotHours = this.mediumScreenSlotHours\n            }\n\n            const intervalMinutes = this.slotIntervalMinutes\n            const slots = []\n            const totalSlots = (slotHours * 60) / intervalMinutes\n\n            // Ensure state.currentHalfHour is a Day.js object\n            const currentHalfHour = dayjs(this.currentHalfHour)\n\n            // Calculate the time for each slot using Day.js\n            for (let i = 0; i < totalSlots; i++) {\n                let slotTime = currentHalfHour.add(i * intervalMinutes, 'minute')\n                slots.push(slotTime.toDate())  // Convert back to JavaScript Date if necessary\n            }\n            this.timeSlots = slots\n            console.log(26)\n            return slots.length\n        },\n\n        prepareShowsForGrid() {\n\n            if (!this.timeSlots || !Array.isArray(this.timeSlots) || this.timeSlots.length === 0) {\n                console.error('timeSlots is not properly initialized.')\n                console.log(27)\n                // Handle this scenario, e.g., by initializing timeSlots, or skipping the update\n                return\n            }\n\n\n            // Step 1: Filter shows within the desired time range\n            const shows = this.filterShowsForTimeRange()\n\n            // Step 2: Calculate initial grid slots for these shows\n            const processedShows = this.calculateGridSlots(shows, this.timeSlots)\n\n            // Step 3: Process shows to set nowPlaying and comingUpNext flags\n            const showsWithStatusFlags = this.processShows(processedShows)\n\n            // Step 4: Update column occupancy and find the maximum row used\n            const {colOccupancy, maxRowUsed} = this.updateColumnOccupancy(showsWithStatusFlags, this.timeSlots.length)\n\n            // Step 5: Fill gaps in the grid with placeholders\n            const gridItems = this.fillGapsAndCreatePlaceholders(colOccupancy, maxRowUsed, this.timeSlots.length)\n\n            // Step 6: Combine processed shows with the placeholders\n            const combinedShows = [...showsWithStatusFlags, ...gridItems]\n\n            // Step 7: Sort and group shows by rows\n            this.nextFourHoursOfContent = this.sortShowsByPosition(combinedShows)\n            console.log(28)\n        },\n\n        filterShowsForTimeRange() {\n            return this.schedules.filter(show => {\n                // Validate show data integrity\n                if (typeof show.startTime !== 'string' || typeof show.durationMinutes !== 'number') {\n                    console.warn('Invalid show data:', show.startTime, show.durationMinutes)\n                    console.log(29)\n                    return false // Skip this show if it doesn't meet data expectations\n                }\n\n                const showStart = dayjs(show.startTime)\n                const showEnd = dayjs(show.endTime)\n                const isInTimeRange = showStart.isBefore(this.fourHoursLater) && showEnd.isAfter(this.currentHalfHour)\n\n                // Detailed logging for debugging\n                if (isInTimeRange) {\n                    const hasStarted = showStart.isBefore(this.currentHalfHour) ? 'already started' : 'starts within range'\n                    console.log(`Show: ${show.content.name}, ${hasStarted}, Start: ${showStart.format('HH:mm:ss')}, End: ${showEnd.format('HH:mm:ss')}, Duration: ${show.durationMinutes}`)\n                }\n                console.log(30)\n                return isInTimeRange\n            })\n        },\n\n        calculateGridSlots(shows, timeSlots) {\n            // Validate the timeSlots array to prevent errors\n            if (!Array.isArray(timeSlots) || timeSlots.length === 0) {\n                console.error('Invalid or empty timeSlots array')\n                console.log(31)\n                return [] // Exit if no valid time slots to work with\n            }\n\n            // Determine the range of timeSlots\n            const firstTimeSlot = dayjs(timeSlots[0])\n            const lastTimeSlot = dayjs(timeSlots[timeSlots.length - 1]).add(30, 'minutes')\n\n\n            return shows.filter(show => {\n                const showStart = dayjs(show.startTime)\n                const showEnd = dayjs(show.endTime)\n                return showStart.isBefore(lastTimeSlot) && showEnd.isAfter(firstTimeSlot)\n            }).map(show => {\n                const showStart = dayjs(show.startTime)\n                const showEnd = dayjs(show.endTime)\n                console.log('************************************')\n                console.log(`Processing show: ${show.content.name}, Start: ${show.startTime}, End: ${show.endTime}`)\n\n                // Find the index of the slot where the show should start\n                let slotIndex = timeSlots.findIndex(slot => showStart.isSameOrBefore(dayjs(slot)))\n\n                // Adjust if the show starts exactly at a slot time or just after the last checked slot time\n                if (slotIndex === -1 || showStart.isAfter(dayjs(timeSlots[slotIndex]))) {\n                    slotIndex = Math.max(0, slotIndex)\n                }\n\n                console.log(`Comparing show start ${showStart.format()} to timeSlot index ${slotIndex} at ${dayjs(timeSlots[slotIndex]).format()}`)\n\n                // Calculate the end slot index\n                let endSlotIndex = timeSlots.findIndex(slot => showEnd.isSameOrBefore(dayjs(slot).add(30, 'minutes')))\n\n                // If the end slot index points to a slot that starts after the show ends, subtract one\n                if (endSlotIndex !== -1 && showEnd.isBefore(dayjs(timeSlots[endSlotIndex]))) {\n                    endSlotIndex--\n                }\n\n                // Handle cases where the show ends after the last slot\n                if (endSlotIndex === -1 || showEnd.isSame(dayjs(timeSlots[timeSlots.length - 1]).add(30, 'minutes'))) {\n                    endSlotIndex = timeSlots.length - 1\n                }\n\n                console.log(`Comparing show end ${showEnd.format()} to timeSlot index ${endSlotIndex} at ${endSlotIndex !== -1 ? dayjs(timeSlots[endSlotIndex]).format() : 'out of range'}`)\n\n\n                // Calculate the number of slots the show should span\n                let span = endSlotIndex - slotIndex + 1\n\n                console.log(`Calculated gridStart: ${slotIndex + 1}, gridSpan: ${span}`)\n                console.log(32)\n                return {\n                    ...show,\n                    gridStart: slotIndex + 1, // Convert to 1-based index for grid positioning\n                    gridSpan: span,\n                }\n            })\n        },\n\n        processShows(shows) {\n            let comingUpNextSet = false\n\n            shows.forEach(show => {\n                const start = dayjs(show.startTime)\n                const end = start.add(show.durationMinutes, 'minutes')\n                const now = dayjs(this.baseTime)\n\n                // Determine if the show is now playing\n                show.nowPlaying = !show.placeholder && now.isAfter(start) && now.isBefore(end) && show.gridStart === 1\n\n                // Find the first show that does not start in the first grid column\n                if (!comingUpNextSet && !show.placeholder && show.gridStart > 1) {\n                    show.comingUpNext = true\n                    comingUpNextSet = true  // Ensure only one show gets this flag\n                }\n            })\n            console.log(33)\n            return shows\n        },\n\n        updateColumnOccupancy(processedShows, cols) {\n            let colOccupancy = new Array(cols).fill(null).map(() => new Set())\n            let maxRowUsed = 0\n            processedShows.forEach(show => {\n                for (let i = show.gridStart - 1; i < show.gridStart - 1 + show.gridSpan; i++) {\n                    if (i >= 0 && i < cols) {\n                        colOccupancy[i].add(show.gridRow)\n                        maxRowUsed = Math.max(maxRowUsed, show.gridRow)\n                    }\n                }\n            })\n            console.log(34)\n            return {colOccupancy, maxRowUsed}\n        },\n\n        fillGapsAndCreatePlaceholders(colOccupancy, maxRowUsed, cols) {\n            let gridItems = []\n            // Ensure at least one row is processed even if no shows are present\n            maxRowUsed = Math.max(maxRowUsed, 1)\n            for (let row = 1; row <= maxRowUsed; row++) {\n                gridItems.push(...this.findAndFillGapsForSingleRow(colOccupancy, row, cols))\n            }\n            console.log(35)\n            return gridItems\n        },\n\n        findAndFillGapsForSingleRow(colOccupancy, row, cols) {\n            let gridItems = []\n            let gapStart = -1\n            for (let i = 0; i < cols; i++) {\n                if (!colOccupancy[i].has(row)) {\n                    gapStart = gapStart === -1 ? i : gapStart\n                } else if (gapStart !== -1) {\n                    // Use different placeholders based on the row number\n                    if (row === 1) {\n                        gridItems.push(this.createPlaceholder(gapStart + 1, i - gapStart, row))\n                    } else {\n                        gridItems.push(this.createBlankSpotPlaceholder(gapStart + 1, i - gapStart, row))\n                    }\n                    gapStart = -1\n                }\n            }\n            if (gapStart !== -1) {\n                // Again, differentiate between the first row and other rows\n                if (row === 1) {\n                    gridItems.push(this.createPlaceholder(gapStart + 1, cols - gapStart, row))\n                } else {\n                    gridItems.push(this.createBlankSpotPlaceholder(gapStart + 1, cols - gapStart, row))\n                }\n            }\n            console.log(36)\n            return gridItems\n        },\n\n        sortShowsByPosition(combinedShows) {\n            if (!Array.isArray(combinedShows)) {\n                console.error('Expected an array of shows, received:', combinedShows)\n                return [] // Return an empty array if not an array to prevent errors\n            }\n\n            console.log(37)\n            // Sort shows directly by row and then by start position within each row\n            return combinedShows.sort((a, b) => a.gridRow - b.gridRow || a.gridStart - b.gridStart)\n        },\n\n        createPlaceholder(start, span, row) {\n            console.log(38)\n            return {\n                placeholder: true,\n                startTime: 'placeholder',\n                priority: 0,\n                gridStart: start,\n                gridSpan: span,\n                gridRow: row,\n                content: {name: 'Nothing scheduled.'},\n            }\n        },\n\n        createBlankSpotPlaceholder(start, span, row) {\n            console.log(39)\n            return {\n                placeholder: true,\n                startTime: 'placeholder',\n                priority: 0,\n                gridStart: start,\n                gridSpan: span,\n                gridRow: row,\n                content: {name: 'Blank Spot'}, // Ensure it is differentiated from normal placeholders\n            }\n        },\n\n    },\n\n    getters: {\n        currentTime: (state) => {\n            console.log('getter', 40)\n            return dayjs(state.baseTime).format('h:mm A')\n        },\n        // Prepare banners with grid positions based on current time slots\n        preparedTimeBanners: (state) => {\n            console.log('getter', 41)\n            const timeZone = getTimeZone() // Ensure this is defined\n            let now = dayjs().tz(timeZone)\n            let todayStart = now.startOf('day')\n            let tomorrowStart = todayStart.add(1, 'day')\n\n            // console.log('Current Time Slots:', state.timeSlots.map(slot => dayjs(slot).format('HH:mm')))\n\n            return state.timeBanners.flatMap(banner => {\n                console.log('getter', 42)\n                // Create banner times for today and tomorrow to handle overnight spans\n                let bannerTodayStart = todayStart.hour(parseInt(banner.startTime.split(':')[0])).minute(parseInt(banner.startTime.split(':')[1]))\n                let bannerTodayEnd = bannerTodayStart.clone().add(banner.duration, 'hours')\n                let bannerTomorrowStart = tomorrowStart.hour(parseInt(banner.startTime.split(':')[0])).minute(parseInt(banner.startTime.split(':')[1]))\n                let bannerTomorrowEnd = bannerTomorrowStart.clone().add(banner.duration, 'hours')\n\n                // Create an array of potential banners for today and tomorrow\n                let potentialBanners = [\n                    {...banner, start: bannerTodayStart, end: bannerTodayEnd},\n                    {...banner, start: bannerTomorrowStart, end: bannerTomorrowEnd},\n                ]\n\n                return potentialBanners.map(banner => {\n                    console.log('getter', 43)\n                    const startSlotIndex = state.timeSlots.findIndex(slot => banner.start.isSameOrBefore(dayjs(slot)) && banner.end.isAfter(dayjs(slot)))\n                    let endSlotIndex = state.timeSlots.findIndex(slot => banner.end.isSameOrBefore(dayjs(slot)))\n\n                    // Adjust the end index to be inclusive of the end time\n                    if (endSlotIndex === -1 || banner.end.isAfter(dayjs(state.timeSlots[state.timeSlots.length - 1]))) {\n                        endSlotIndex = state.timeSlots.length - 1\n                    } else {\n                        endSlotIndex -= 1\n                    }\n\n                    const gridStart = startSlotIndex + 1\n                    const gridSpan = endSlotIndex - startSlotIndex + 1\n\n                    // console.log(`Processing Banner: ${banner.name}`)\n                    // console.log(`StartTime: ${banner.start.format('HH:mm')}, EndTime: ${banner.end.format('HH:mm')}`)\n                    // console.log(`StartSlotIndex: ${startSlotIndex}, EndSlotIndex: ${endSlotIndex}`)\n                    // console.log(`Calculated gridStart: ${gridStart}, gridSpan: ${gridSpan}`)\n\n                    // Ensure the banner should be displayed within the current time slots\n                    if (gridStart && gridSpan > 0) {\n                        console.log('getter', 44)\n                        return {...banner, gridStart, gridSpan}\n                    }\n                    console.log('getter', 45)\n                    return null\n                })\n            }).filter(banner => banner != null) // Filter out banners that don't fit within the current time slots\n                .sort((a, b) => a.gridStart - b.gridStart) // Sort by gridStart, with the lowest number first\n        },\n\n\n        // setTimeSlots: (state) => {\n        //     const appSettingStore = useAppSettingStore()\n        //     let slotHours\n        //\n        //     // Determine the number of slot hours based on screen size\n        //     if (appSettingStore.isVerySmallScreen) {\n        //         slotHours = state.verySmallScreenSlotHours\n        //     } else if (appSettingStore.isSmallScreen) {\n        //         slotHours = state.smallScreenSlotHours\n        //     } else {\n        //         slotHours = state.mediumScreenSlotHours\n        //     }\n        //\n        //     const intervalMinutes = state.slotIntervalMinutes\n        //     const slots = []\n        //     const totalSlots = (slotHours * 60) / intervalMinutes\n        //\n        //     // Ensure state.currentHalfHour is a Day.js object\n        //     const currentHalfHour = dayjs(state.currentHalfHour)\n        //\n        //     // Calculate the time for each slot using Day.js\n        //     for (let i = 0; i < totalSlots; i++) {\n        //         let slotTime = currentHalfHour.add(i * intervalMinutes, 'minute')\n        //         slots.push(slotTime.toDate())  // Convert back to JavaScript Date if necessary\n        //     }\n        //     state.timeSlots = slots\n        //     return slots.length\n        // },\n\n        nextFourHoursWithHalfHourIntervals: (state) => {\n            // Check if timeSlots is not null, undefined, or empty before accessing length\n            if (!state.timeSlots || state.timeSlots.length === 0) {\n                console.log('timeSlots is null or has no elements')\n                console.log('getter', 46)\n                // Handle this scenario appropriately, such as returning an empty array or a default value\n                return []\n            }\n\n            const userStore = useUserStore() // Access the user store\n            const appSettingStore = useAppSettingStore() // Access the settings store\n            const userTimezone = userStore.timezone // Get the user's timezone\n            const cols = state.timeSlots.length\n\n            const intervals = []\n            const now = dayjs(state.baseTime).tz(userTimezone) // Get the current time in the user's timezone\n\n            // Determine if the current minute is less than 30 to start at the top of the hour or at the half-hour\n            let current = now.minute() < 30 ? now.startOf('hour') : now.startOf('hour').add(30, 'minutes')\n\n\n            // Generate intervals for the next 4 hours, each 30 minutes apart\n            // Adjust the loop count based on the number of columns/ intervals needed\n            for (let i = 0; i < cols; i++) { // Adjust the number of intervals based on the screen size\n                intervals.push({\n                    formatted: current.format('hh:mm A'), // Formatted time for display\n                    dateTimeString: current.format('YYYY-MM-DD HH:mm:ss'), // Y-m-d H:m:s format for comparisons\n                })\n                current = current.add(30, 'minute') // Move to the next 30-minute interval\n            }\n            console.log('getter', 47)\n            return intervals\n        },\n\n        upcomingContent: (state) => {\n            // Since viewingWindowStart is now a Day.js object, use Day.js methods directly\n            const start = dayjs(state.viewingWindowStart).subtract(1, 'hour') // 1 hour earlier\n            const end = start.add(7, 'hours') // 6 hours later from the start\n\n            // Group shows by start time using Day.js\n            const showsGroupedByStartTime = state.weeklyContent.reduce((acc, item) => {\n                const itemStart = dayjs(item.startTime).valueOf() // Use .valueOf() to get the timestamp\n                if (!acc[itemStart]) {\n                    acc[itemStart] = []\n                }\n                acc[itemStart].push(item)\n                return acc\n            }, {})\n\n            // Select the show with the lowest priority for each start time\n            const selectedShows = Object.values(showsGroupedByStartTime).map(group => {\n                return group.reduce((selected, item) => {\n                    return !selected || item.priority < selected.priority ? item : selected\n                }, null)\n            })\n            console.log('getter', 48)\n            // Filter shows that fall within the next 6-hour window and sort them\n            return selectedShows\n                .filter(item => {\n                    const itemStart = dayjs(item.startTime)\n                    return itemStart.isSameOrAfter(start) && itemStart.isBefore(end)\n                })\n                .sort((a, b) => dayjs(a.startTime).unix() - dayjs(b.startTime).unix()) // Sorting by Unix timestamp\n        },\n\n\n        nextSixHours: (state) => {\n            // Assuming state.viewingWindowStart is already a Day.js object.\n            // If it's still a native Date, convert it first:\n            let adjustedStart = dayjs(state.viewingWindowStart)\n\n            // Add 6 hours to the adjusted start time\n            const end = adjustedStart.add(6, 'hours')\n\n            // Generate each hour of the interval between adjustedStart and end\n            const hours = []\n            let hour = adjustedStart\n\n            while (hour.isBefore(end)) {\n                hours.push(hour.toDate()) // Convert back to Date if necessary; otherwise, just use `hour` if you can use Day.js objects directly\n                hour = hour.add(1, 'hour')\n            }\n            console.log('getter', 49)\n            return hours\n        },\n\n        dateMessage: (state) => {\n            const startDay = startOfDay(state.viewingWindowStart)\n            const formattedDate = format(startDay, 'EEEE MMMM do, yyyy')\n            console.log('getter', 50)\n            if (isToday(startDay)) {\n                return `Today - ${formattedDate}`\n            } else if (isYesterday(startDay)) {\n                return `Yesterday - ${formattedDate}`\n            } else if (isTomorrow(startDay)) {\n                return `Tomorrow - ${formattedDate}`\n            } else {\n                return formattedDate\n            }\n        },\n\n        currentMonthIndex: (state) => {\n            // Ensure state.currentMonth is converted to a Day.js object\n            const month = dayjs(state.currentMonth)\n            console.log('getter', 51)\n            // Day.js months are 0-indexed just like JavaScript Date, returns the month (0-11)\n            return month.month()\n        },\n\n        currentMonthName: (state) => {\n            // Ensure state.currentMonth is converted to a Day.js object\n            const month = dayjs(state.currentMonth)\n            console.log('getter', 52)\n            // Returns the full name of the month, e.g., 'January', 'February', etc.\n            return month.format('MMMM')\n        },\n\n        currentYear: (state) => {\n            // Ensure state.currentMonth is converted to a Day.js object\n            const month = dayjs(state.currentMonth)\n            console.log('getter', 53)\n            // Returns the year\n            return month.year()\n        },\n        isToday: (state) => {\n            const today = dayjs()  // Gets today's date as a Day.js object\n            const viewingStart = dayjs(state.viewingWindowStart)  // Convert to Day.js object if not already\n            console.log('getter', 54)\n            // Compare if both dates are the same calendar day\n            return today.isSame(viewingStart, 'day')\n        },\n\n        daysInMonth: (state) => {\n            // Assuming state.currentMonth is a Day.js object; if it's a Date, convert it:\n            const currentMonth = dayjs(state.currentMonth)\n\n            const startOfCurrentMonth = currentMonth.startOf('month')\n            const endOfCurrentMonth = currentMonth.endOf('month')\n\n            // Adjust these to ensure the grid starts on Sunday and ends on Saturday\n            const startOfGrid = startOfCurrentMonth.startOf('week')  // Assumes the week starts on Sunday by default\n            const endOfGrid = endOfCurrentMonth.endOf('week')        // Assumes the week ends on Saturday by default\n\n            // Generate the days for the calendar grid\n            const days = []\n            let day = startOfGrid\n\n            while (day.isBefore(endOfGrid) || day.isSame(endOfGrid, 'day')) {\n                days.push(day.toDate()) // Collect days as Date objects; remove toDate() if you can use Day.js objects directly\n                day = day.add(1, 'day')\n            }\n            console.log('getter', 55)\n            return days\n        },\n\n    },\n})\n","import { onBeforeMount, onMounted } from 'vue'\nimport { useUserStore } from \"@/Stores/UserStore\"\nimport { useAppSettingStore } from \"@/Stores/AppSettingStore\"\nimport { useVideoPlayerStore } from \"@/Stores/VideoPlayerStore\"\nimport { Inertia } from '@inertiajs/inertia'\n\nexport function usePageSetup(pageName) {\n    const userStore = useUserStore()\n    const appSettingStore = useAppSettingStore()\n    const videoPlayerStore = useVideoPlayerStore()\n\n    appSettingStore.currentPage = pageName\n    appSettingStore.showFlashMessage = true\n    appSettingStore.pageIsHidden = false\n\n    if (userStore.isMobile || window.innerWidth < 1024 || appSettingStore.fullPage) {\n        appSettingStore.ott = 0;\n    } else {\n        appSettingStore.ott = 1;\n        appSettingStore.showOttButtons = true;\n    }\n\n    videoPlayerStore.makeVideoTopRight()\n\n    if (appSettingStore.pageReload) {\n        appSettingStore.pageReload = false\n        window.location.reload(true);\n    }\n    // Check if the URL contains query strings\n\n\n    // Only scroll into view if there are no query strings\n\n        // const topDiv = document.getElementById(\"topDiv\")\n        // if (topDiv) {\n        //     topDiv.scrollIntoView()\n        // }\n        Inertia.on('navigate', (event) => {\n            if (userStore.isMobile || window.innerWidth < 1024 || appSettingStore.fullPage) {\n                appSettingStore.ott = 0;\n            } else {\n                appSettingStore.ott = 1;\n            }\n            const hasQueryStrings = window.location.search !== '';\n            if (!hasQueryStrings || appSettingStore.shouldScrollToTop) {\n                requestAnimationFrame(() => {\n                    const topDiv = document.getElementById(\"topDiv\");\n                    if (topDiv) {\n                        topDiv.scrollIntoView({behavior: 'auto'});\n                    } else {\n                        window.scrollTo(0, 0);\n                    }\n                });\n            }\n            appSettingStore.shouldScrollToTop = false;\n        })\n    // Only update if we're not already on this page to avoid overwriting with the current URL\n    appSettingStore.setPrevUrl()\n    appSettingStore.showOttButtons = true\n    appSettingStore.noLayout = false\n\n    // Inertia.reload()\n\n}\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"\", \"\",{\"version\":3,\"sources\":[],\"names\":[],\"mappings\":\"\",\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".isFullPageCss{background:#000c}\", \"\",{\"version\":3,\"sources\":[\"webpack://./resources/js/Components/Global/Navigation/PublicNavigationMenu.vue\"],\"names\":[],\"mappings\":\"AA8KA,eACE,gBAEF\",\"sourcesContent\":[\"<template>\\n  <div class=\\\"hidden lg:block fixed top-0 w-full nav-mask\\\">\\n    <nav class=\\\"sticky top-0 bg-black border-b border-gray-100 z-50\\\">\\n      <!-- Primary Navigation Menu -->\\n      <div class=\\\"max-w-7xl mx-auto px-4 lg:px-6 xl:px-8 z-50\\\">\\n        <div class=\\\"flex justify-between h-16\\\">\\n          <div class=\\\"flex\\\">\\n            <!-- Logo -->\\n            <div class=\\\"shrink-0 flex items-center\\\">\\n              <Link :href=\\\"`/`\\\">\\n                <JetApplicationMark class=\\\"block h-9 w-auto\\\"/>\\n              </Link>\\n            </div>\\n            <div v-if=\\\"!$page.props.user\\\" class=\\\"w-full flex flex-row justify-between\\\">\\n              <div class=\\\"space-x-4 py-6 pt-6 ml-8 text-gray-200\\\">\\n                <h3 class=\\\"inline-flex items-center relative\\\">\\n                  <JetNavLink\\n                  ><Link :href=\\\"`/`\\\">Watch Now</Link></JetNavLink>\\n                </h3>\\n<!--                <h3 class=\\\"inline-flex items-center relative\\\">-->\\n<!--                  <JetNavLink-->\\n<!--                  ><Link :href=\\\"`/teams`\\\">Browse</Link></JetNavLink>-->\\n<!--                </h3>-->\\n\\n                <h3 class=\\\"inline-flex items-center relative\\\">\\n                  <JetNavLink\\n                      :href=\\\"route('schedule')\\\"\\n                      :active=\\\"route().current('schedule')\\\">\\n                    Schedule</JetNavLink>\\n                </h3>\\n\\n                <h3 class=\\\"hidden inline-flex items-center relative\\\">\\n                  <JetNavLink\\n                      :href=\\\"route('teams.index')\\\"\\n                      :active=\\\"route().current('teams.index')\\\">\\n                    Browse</JetNavLink>\\n                </h3>\\n\\n<!--                <h3 class=\\\"inline-flex items-center relative\\\">-->\\n<!--                  <JetNavLink-->\\n<!--                  ><Link :href=\\\"`/schedule`\\\">-->\\n<!--                    Schedule</Link></JetNavLink>-->\\n<!--                </h3>-->\\n                <h3 class=\\\"inline-flex items-center relative\\\">\\n                  <JetNavLink\\n                      :href=\\\"route('news.index')\\\"\\n                      :active=\\\"route().current('news.index')\\\">\\n                    News Stories</JetNavLink>\\n                </h3>\\n                <h3 class=\\\"inline-flex items-center relative\\\">\\n                  <JetNavLink\\n                      :href=\\\"route('news.reporters.index')\\\"\\n                      :active=\\\"route().current('news.reporters.index')\\\">\\n                    Reporters</JetNavLink>\\n                </h3>\\n                <h3 class=\\\"inline-flex items-center relative\\\">\\n                  <JetNavLink\\n                      :href=\\\"route('public.newsletterSignup')\\\"\\n                      :active=\\\"route().current('public.newsletterSignup')\\\">\\n                    Get Exclusive Access!</JetNavLink>\\n                </h3>\\n                <h3 class=\\\"inline-flex items-center relative\\\">\\n                  <JetNavLink\\n                      :href=\\\"route('public.contact')\\\"\\n                      :active=\\\"route().current('public.contact')\\\">\\n                    Contact Us</JetNavLink>\\n                </h3>\\n              </div>\\n            </div>\\n          </div>\\n          <div v-if=\\\"!$page.props.user\\\" class=\\\"space-x-4 py-6 pt-6 mx-8 text-gray-200\\\">\\n            <h3 class=\\\"inline-flex items-center relative\\\">\\n              <JetNavLink\\n                  :href=\\\"`/login`\\\"\\n                  :active=\\\"appSettingStore.currentPage === 'login'\\\">\\n                Login</JetNavLink>\\n            </h3>\\n            <h3 class=\\\"inline-flex items-center relative\\\">\\n              <JetNavLink\\n                  :href=\\\"`/register`\\\"\\n                  :active=\\\"appSettingStore.currentPage === 'register'\\\">\\n                Register</JetNavLink>\\n            </h3>\\n\\n          </div>\\n          <div v-if=\\\"$page.props.user\\\" class=\\\"space-x-4 py-6 pt-6 mx-8 text-gray-200\\\">\\n            <h3 v-if=\\\"$page.props.user.isCreator\\\" class=\\\"inline-flex items-center relative\\\">\\n              <JetNavLink\\n                  :href=\\\"`/dashboard`\\\">\\n                Dashboard</JetNavLink>\\n            </h3>\\n            <h3 class=\\\"inline-flex items-center relative\\\">\\n              <JetNavLink\\n                  :href=\\\"`/stream`\\\">\\n                Back to Stream</JetNavLink>\\n            </h3>\\n\\n          </div>\\n        </div>\\n\\n      </div>\\n    </nav>\\n  </div>\\n</template>\\n\\n<script setup>\\nimport { Inertia } from \\\"@inertiajs/inertia\\\"\\nimport { onMounted } from \\\"vue\\\"\\nimport { Link, usePage } from '@inertiajs/inertia-vue3'\\nimport JetNavLink from '@/Jetstream/NavLink'\\nimport JetApplicationMark from '@/Jetstream/ApplicationMark'\\nimport JetDropdownLink from '@/Jetstream/DropdownLink'\\nimport JetDropdown from '@/Jetstream/Dropdown'\\nimport { useVideoPlayerStore } from \\\"@/Stores/VideoPlayerStore\\\"\\nimport { useAppSettingStore } from \\\"@/Stores/AppSettingStore\\\"\\n\\nimport { useChatStore } from \\\"@/Stores/ChatStore\\\"\\nimport { useStreamStore } from \\\"@/Stores/StreamStore\\\"\\nimport { useUserStore } from \\\"@/Stores/UserStore\\\"\\nimport { useWelcomeStore } from \\\"@/Stores/WelcomeStore\\\"\\n\\nconst appSettingStore = useAppSettingStore()\\nconst chat = useChatStore()\\nconst videoPlayerStore = useVideoPlayerStore()\\nconst streamStore = useStreamStore()\\nconst userStore = useUserStore()\\nconst welcomeStore = useWelcomeStore()\\n\\nconst { props } = usePage();\\n\\n// streamStore.isLive(true)\\n\\n// let props = defineProps({\\n//   user: Object,\\n// })\\n\\nappSettingStore.pageReload = false\\n\\n// const returnToWelcomePage = () => {\\n//   appSettingStore.pageReload = true\\n//   Inertia.visit('/')\\n// }\\n\\n\\n// let isStreamPage = false\\n//\\n// function setPage() {\\n//     if (appSettingStore.currentPage = \\\"stream\\\") {\\n//         videoPlayerStore.currentPageIsStream = true;\\n//     } else\\n//         videoPlayerStore.currentPageIsStream = false;\\n// }\\n\\n// setPage()\\n\\n// onMounted(() => {\\n//   getUser()\\n// })\\n//\\n// function getUser() {\\n//   if (props.user) {\\n//     userStore.id = props.user.id\\n//     userStore.roleId = props.user.role_id\\n//     userStore.userIsAdmin = props.user.isAdmin\\n//   }\\n//   userStore.isSubscriber()\\n//   userStore.isCreator()\\n//   userStore.isVip()\\n//   userStore.isAdmin()\\n// }\\n\\n</script>\\n<style>\\n\\n.isFullPageCss {\\n  background: rgba(0, 0, 0, 0.8);\\n  /*background: yellow;*/\\n}\\n\\n</style>\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".hamburgerMask{z-index:100}.fade-out{opacity:0;transition:opacity .5s ease-in-out}.fade-out.visible{opacity:1}\", \"\",{\"version\":3,\"sources\":[\"webpack://./resources/js/Components/Global/Navigation/PublicResponsiveNavigationMenu.vue\"],\"names\":[],\"mappings\":\"AAmNA,eACE,WACF,CACA,UAEE,SAAU,CADV,kCAEF,CAEA,kBACE,SACF\",\"sourcesContent\":[\"<template>\\n  <div class=\\\"lg:hidden fixed top-0 w-full nav-mask border-b-2 border-gray-100\\\">\\n    <div class=\\\"flex justify-between h-16 w-full bg-black nav-mask\\\">\\n      <div class=\\\"flex\\\">\\n        <!-- Logo -->\\n        <div class=\\\"shrink-0 flex items-center\\\">\\n          <Link @click=\\\"goToWatchPage\\\">\\n            <JetApplicationMark class=\\\"ml-5 block h-9 w-auto\\\"/>\\n          </Link>\\n        </div>\\n        <!-- Hamburger -->\\n        <div class=\\\"absolute top-3 right-10 hamburgerMask\\\">\\n          <div class=\\\"-mr-2 flex items-center lg:hidden z-50\\\">\\n\\n            <button\\n                class=\\\"inline-flex items-center justify-center p-2 rounded-md text-gray-100 transition\\\"\\n                :class=\\\"{ 'hover:text-white hover:bg-blue-600': appSettingStore.showNavDropdown}\\\"\\n\\n                @click=\\\"appSettingStore.toggleNavDropdown()\\\">\\n              <!--                @click=\\\"chatStore.showNavDropdown = ! chatStore.showNavDropdown\\\">-->\\n\\n              <span class=\\\"pr-2\\\">MENU</span>\\n              <svg\\n                  class=\\\"h-6 w-6\\\"\\n                  stroke=\\\"currentColor\\\"\\n                  fill=\\\"none\\\"\\n                  viewBox=\\\"0 0 24 24\\\"\\n              >\\n                <path\\n                    :class=\\\"{'hidden': appSettingStore.showNavDropdown, 'inline-flex': ! appSettingStore.showNavDropdown }\\\"\\n                    stroke-linecap=\\\"round\\\"\\n                    stroke-linejoin=\\\"round\\\"\\n                    stroke-width=\\\"2\\\"\\n                    d=\\\"M4 6h16M4 12h16M4 18h16\\\"\\n                />\\n                <path\\n                    :class=\\\"{'hidden': ! appSettingStore.showNavDropdown, 'inline-flex': appSettingStore.showNavDropdown }\\\"\\n                    stroke-linecap=\\\"round\\\"\\n                    stroke-linejoin=\\\"round\\\"\\n                    stroke-width=\\\"2\\\"\\n                    d=\\\"M6 18L18 6M6 6l12 12\\\"\\n                />\\n              </svg>\\n            </button>\\n          </div>\\n        </div>\\n\\n\\n\\n      </div>\\n    </div>\\n    <!-- Responsive Navigation Menu -->\\n    <!--    <div :class=\\\"{'block': showingNavigationDropdown, 'hidden': ! showingNavigationDropdown}\\\"-->\\n    <div :class=\\\"{'block': appSettingStore.showNavDropdown, 'hidden': ! appSettingStore.showNavDropdown}\\\"\\n         class=\\\"lg:hidden bg-gray-800 text-white fixed w-full h-full\\\">\\n      <!-- Responsive Settings Options -->\\n      <!--   Fix Menu height e.g., h-[calc(h-100%-16rem)]      -->\\n      <div ref=\\\"scrollableDiv\\\" class=\\\"pb-20 mb- h-[calc(100vh)] overflow-y-auto hide-scrollbar\\\" @scroll=\\\"handleScroll\\\">\\n\\n        <div class=\\\"space-y-1 z-50 mb-6 pb-10 bg-gray-900 border-t border-1 border-white\\\">\\n\\n          <JetResponsiveNavLink\\n              @click=\\\"goToWatchPage\\\"\\n              :href=\\\"route('home')\\\"\\n              :active=\\\"route().current('home')\\\">\\n            Watch Now\\n          </JetResponsiveNavLink>\\n\\n          <JetResponsiveNavLink\\n              @click=\\\"appSettingStore.closeNavDropdown()\\\"\\n              :href=\\\"route('schedule')\\\"\\n              :active=\\\"route().current('schedule')\\\">\\n            Schedule\\n          </JetResponsiveNavLink>\\n\\n          <JetResponsiveNavLink hidden\\n              @click=\\\"appSettingStore.closeNavDropdown()\\\"\\n              :href=\\\"route('teams.index')\\\"\\n              :active=\\\"route().current('teams.index')\\\">\\n            Browse\\n          </JetResponsiveNavLink>\\n\\n          <JetResponsiveNavLink\\n              @click=\\\"appSettingStore.closeNavDropdown()\\\"\\n              :href=\\\"route('news.index')\\\"\\n              :active=\\\"route().current('news.index')\\\">\\n            News Stories\\n          </JetResponsiveNavLink>\\n\\n          <JetResponsiveNavLink\\n              @click=\\\"appSettingStore.closeNavDropdown()\\\"\\n              :href=\\\"route('news.reporters.index')\\\"\\n              :active=\\\"route().current('news.reporters.index')\\\">\\n            Reporters\\n          </JetResponsiveNavLink>\\n\\n          <JetResponsiveNavLink\\n              @click=\\\"appSettingStore.closeNavDropdown()\\\"\\n              :href=\\\"route('public.newsletterSignup')\\\"\\n              :active=\\\"route().current('public.newsletterSignup')\\\">\\n            Get Exclusive Access!\\n          </JetResponsiveNavLink>\\n\\n          <JetResponsiveNavLink\\n              @click=\\\"appSettingStore.closeNavDropdown()\\\"\\n              :href=\\\"route('public.contact')\\\"\\n              :active=\\\"route().current('public.contact')\\\">\\n            Contact Us\\n          </JetResponsiveNavLink>\\n\\n          <JetResponsiveNavLink\\n              @click=\\\"appSettingStore.closeNavDropdown()\\\"\\n              :href=\\\"`/register`\\\">\\n            Register\\n          </JetResponsiveNavLink>\\n\\n          <JetResponsiveNavLink\\n              @click=\\\"appSettingStore.closeNavDropdown()\\\"\\n              :href=\\\"`/login`\\\">\\n            Login\\n          </JetResponsiveNavLink>\\n\\n        </div>\\n\\n\\n<!--        <div class=\\\"fixed bottom-0 pb-8 flex flex-col w-full space-y-1 text-gray-600 text-sm\\\">-->\\n<!--          <div class=\\\"fixed bottom-0 w-full text-gray-600 text-sm pb-8\\\">-->\\n            <div class=\\\"flex flex-col w-full space-y-1 text-gray-600 text-sm pb-20\\\">\\n          <AppVersion />\\n          <!--                    <div class=\\\"flex pt-4 justify-center\\\">Please send us comments and questions <a href=\\\"https://help.not.tv/\\\" target=\\\"_blank\\\" class=\\\"text-blue-600 hover:text-blue-40\\\">&nbsp; here</a>.</div>-->\\n        </div>\\n\\n      </div>\\n      <div class=\\\"fixed w-full bottom-4 text-center fade-out\\\"\\n           :class=\\\"{ 'visible': !hasScrolled && isContentOverflowing }\\\">Scroll down.\\n      </div>\\n    </div>\\n  </div>\\n\\n</template>\\n\\n<script setup>\\nimport { Inertia } from '@inertiajs/inertia'\\nimport { nextTick, onMounted, onUnmounted, ref, watch } from 'vue'\\nimport JetApplicationMark from \\\"@/Jetstream/ApplicationMark\\\"\\nimport JetResponsiveNavLink from '@/Jetstream/ResponsiveNavLink'\\nimport { useAppSettingStore } from '@/Stores/AppSettingStore'\\nimport { Link } from '@inertiajs/inertia-vue3'\\nimport AppVersion from '@/Components/Global/AppVersion/AppVersion.vue'\\n\\nconst appSettingStore = useAppSettingStore()\\nconst showingNavigationDropdown = ref(false)\\nconst hasScrolled = ref(false)\\nconst isContentOverflowing = ref(false)\\nconst scrollableDiv = ref(null)\\n\\nconst checkOverflow = () => {\\n  if (scrollableDiv.value) {\\n    const isOverflowing = scrollableDiv.value.scrollHeight > scrollableDiv.value.clientHeight;\\n    isContentOverflowing.value = isOverflowing;\\n  }\\n};\\n\\nconst handleScroll = () => {\\n  // Check if the page has been scrolled down\\n  // const scrollPosition = scrollableDiv.value.scrollTop;\\n  // hasScrolled.value = scrollPosition > 0;\\n  hasScrolled.value = scrollableDiv.value.scrollTop > 0;\\n};\\n\\nconst linkRef = ref(null);\\n\\nfunction goToWatchPage() {\\n  appSettingStore.closeNavDropdown()\\n  window.location.href = '/';\\n}\\n\\nonMounted(() => {\\n  nextTick(() => {\\n    checkOverflow();\\n  });\\n\\n  window.addEventListener('resize', checkOverflow); // Recheck on window resize\\n\\n  if (scrollableDiv.value) {\\n    scrollableDiv.value.addEventListener('scroll', handleScroll);\\n  }\\n});\\n\\n// Watch for changes in the dropdown visibility\\nwatch(() => appSettingStore.showNavDropdown, (newValue, oldValue) => {\\n  if (newValue !== oldValue) {\\n    nextTick(() => {\\n      checkOverflow();\\n    });\\n  }\\n});\\n\\n// Cleanup\\nonUnmounted(() => {\\n  window.removeEventListener('resize', checkOverflow);\\n\\n  if (scrollableDiv.value) {\\n    scrollableDiv.value.removeEventListener('scroll', handleScroll);\\n  }\\n});\\n\\n\\n</script>\\n\\n<style>\\n.hamburgerMask {\\n  z-index: 100\\n}\\n.fade-out {\\n  transition: opacity 0.5s ease-in-out;\\n  opacity: 0;\\n}\\n\\n.fade-out.visible {\\n  opacity: 1;\\n}\\n</style>\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".bg-gradient-show[data-v-1fcdf790]{background:linear-gradient(90deg,#1f4037,#99f2c8)}.bg-gradient-show-hover[data-v-1fcdf790]:hover{background:linear-gradient(90deg,#66d3fa,#6e45e2)}.bg-gradient-new-release[data-v-1fcdf790]{background:linear-gradient(90deg,#654ea3,#eaafc8)}.bg-gradient-new-release-hover[data-v-1fcdf790]:hover{background:linear-gradient(90deg,#c2e59c,#64b3f4)}.column-width[data-v-1fcdf790]{@apply w-16}.schedule-item[data-v-1fcdf790]{align-items:center;background:#f0f0f0;color:#000;display:flex;flex-direction:column;gap:10px;padding:10px}.time-slot[data-v-1fcdf790]{border-bottom:1px solid #fff;grid-row:1;padding:10px 0;text-align:center}.time-banner[data-v-1fcdf790]{background-color:#007bff80;border:1px solid #fff;padding:10px;text-align:center}.show-cell[data-v-1fcdf790]{align-items:center;background-color:#f8f8f8;border:1px solid #ccc;display:flex;flex-direction:column;height:100%;justify-content:center;width:100%}.time-cell[data-v-1fcdf790]{border:1px solid #fff;padding:10px;text-align:center}.content[data-v-1fcdf790]{background:#f0f0f0;border:1px solid #ddd;padding:8px}.placeholder[data-v-1fcdf790]{background:#ccc;height:60px;width:100%}.schedule-grid[data-v-1fcdf790]{display:grid;width:100%}.content-row[data-v-1fcdf790],.header-row[data-v-1fcdf790]{display:contents}.schedule-cell[data-v-1fcdf790]{background:#333;color:#fff;padding:8px;text-align:center}.grid-container[data-v-1fcdf790]{grid-gap:10px;display:grid;width:100%}.grid-item[data-v-1fcdf790]{align-items:center;border:1px solid #ccc;display:flex;justify-content:center}.status-row[data-v-1fcdf790]{display:grid}.status-cell[data-v-1fcdf790],.status-row[data-v-1fcdf790]{align-items:center;width:100%}.status-cell[data-v-1fcdf790]{color:#fff;display:flex;font-weight:700;height:100%;justify-content:center;opacity:.8;padding:8px;transition:background-color .3s ease}.status-cell span[data-v-1fcdf790]{border-radius:4px;display:block;padding:4px 8px;text-align:center}.status-cell[data-v-1fcdf790]:empty:after{background:none;content:\\\"\\\";display:block;height:100%;width:100%}.show-cell:hover .gradient-on-hover[data-v-1fcdf790]{background-image:linear-gradient(90deg,#06beb6,#48b1bf)}.coming-up-next[data-v-1fcdf790],.now-playing[data-v-1fcdf790]{align-items:center;border:1px solid #ccc;display:flex;justify-content:center;padding:10px}.now-playing[data-v-1fcdf790]{animation:pulseAnimation-1fcdf790 2s infinite;background-color:#4caf50}.coming-up-next[data-v-1fcdf790]{background-color:#ff9800}@keyframes pulseAnimation-1fcdf790{0%{opacity:.75}50%{opacity:1}to{opacity:.75}}@media (min-width:1280px){.xl\\\\:hidden[data-v-1fcdf790]{display:none}}@media (min-width:1024px){.lg\\\\:hidden[data-v-1fcdf790]{display:none}}\", \"\",{\"version\":3,\"sources\":[\"webpack://./resources/js/Components/Global/Schedule/ScheduleGridContainer.vue\"],\"names\":[],\"mappings\":\"AA4fA,mCACE,iDACF,CAEA,+CACE,iDACF,CAEA,0CACE,iDACF,CAEA,sDACE,iDACF,CAGA,+BACE,WACF,CAGA,gCAOE,kBAAmB,CANnB,kBAAmB,CACnB,UAAW,CAEX,YAAa,CACb,qBAAsB,CACtB,QAAS,CAHT,YAKF,CAEA,4BAGE,4BAA6B,CAC7B,UAAW,CAFX,cAAe,CADf,iBAIF,CAEA,8BACE,0BAAwC,CAExC,qBAAuB,CACvB,YAAa,CAFb,iBAGF,CAEA,4BAIE,kBAAmB,CAEnB,wBAAyB,CADzB,qBAAsB,CAJtB,YAAa,CACb,qBAAsB,CAMtB,WAAY,CALZ,sBAAuB,CAIvB,UAEF,CAEA,4BACE,qBAAsB,CAEtB,YAAa,CADb,iBAEF,CAEA,0BACE,kBAAmB,CAEnB,qBAAsB,CADtB,WAEF,CAEA,8BACE,eAAgB,CAEhB,WAAY,CADZ,UAEF,CAGA,gCACE,YAAa,CACb,UACF,CAMA,2DACE,gBACF,CAEA,gCACE,eAAgB,CAChB,UAAW,CAEX,WAAY,CADZ,iBAEF,CAEA,iCAGE,aAAc,CAFd,YAAa,CACb,UAEF,CAEA,4BAEE,kBAAmB,CAEnB,qBAAsB,CAHtB,YAAa,CAEb,sBAEF,CAGA,6BACE,YAGF,CAGA,2DAJE,kBAAmB,CADnB,UAgBF,CAXA,8BAKE,UAAY,CAJZ,YAAa,CAOb,eAAiB,CADjB,WAAY,CALZ,sBAAuB,CAOvB,UAAY,CALZ,WAAY,CAMZ,oCACF,CAEA,mCAGE,iBAAkB,CAFlB,aAAc,CACd,eAAgB,CAEhB,iBACF,CAGA,0CAKE,eAAgB,CAJhB,UAAW,CACX,aAAc,CAEd,WAAY,CADZ,UAGF,CAGA,qDACE,uDACF,CAEA,+DAGE,kBAAmB,CAEnB,qBAAsB,CAJtB,YAAa,CACb,sBAAuB,CAEvB,YAEF,CAEA,8BAEE,6CAAqC,CADrC,wBAEF,CAEA,iCACE,wBACF,CAGA,mCACE,GACE,WACF,CACA,IACE,SACF,CACA,GACE,WACF,CACF,CAGA,0BAEE,6BACE,YACF,CACF,CAEA,0BAEE,6BACE,YACF,CACF\",\"sourcesContent\":[\"<template>\\n\\n  <!--  We need the CurrenTime component to keep our ScheduleStore currentTime up to date\\n        it has a SetInterval in it. -->\\n  <CurrentTime/>\\n\\n  <div class=\\\"mb-2 tracking-wide\\\">\\n    <span class=\\\"text-sm uppercase text-purple-500\\\">All times are listed in your timezone.</span>\\n  </div>\\n\\n  <div class=\\\"w-full\\\">\\n    <div class=\\\"schedule-grid\\\" :style=\\\"{ 'grid-template-columns': gridColumns }\\\">\\n      <div class=\\\"header-row\\\" :style=\\\"{ 'grid-template-columns': gridColumns }\\\">\\n        <!-- Time slots header -->\\n        <div class=\\\"time-cell bg-gray-900 px-3 py-2 text-center font-bold\\\"\\n             v-for=\\\"interval in nextFourHoursWithHalfHourIntervals\\\" :key=\\\"interval.dateTime\\\">\\n          {{ interval.formatted }}\\n        </div>\\n      </div>\\n      <div v-if=\\\"isLoading && nextFourHoursOfContent.length === 0\\\"\\n           class=\\\"w-full flex justify-center text-center items-center\\\">\\n        <span class=\\\"loading loading-ball loading-xl text-info\\\"></span>\\n      </div>\\n    </div>\\n    <div class=\\\"schedule-grid\\\" :style=\\\"{ 'grid-template-columns': gridColumns }\\\">\\n      <!-- Render time banners -->\\n      <div v-for=\\\"banner in scheduleStore.preparedTimeBanners\\\" :key=\\\"banner.id\\\"\\n           :style=\\\"gridItemStyle(banner)\\\" class=\\\"time-banner align-center\\\">\\n        {{ banner.name }}\\n      </div>\\n    </div>\\n    <div class=\\\"schedule-grid\\\" :style=\\\"{ 'grid-template-columns': gridColumns }\\\">\\n\\n\\n      <!-- Loop through combinedShows directly -->\\n      <div v-for=\\\"item in scheduleStore.nextFourHoursOfContent\\\"\\n           :key=\\\"item.id\\\"\\n           :style=\\\"gridItemStyle(item)\\\"\\n           class=\\\"show-cell\\\"\\n           :class=\\\"{'hover:cursor-pointer' : !item.placeholder}\\\"\\n           @click=\\\"handleShowClick(item)\\\">\\n        <div\\n            class=\\\"item-content px-4 flex flex-col justify-between items-center w-full h-full overflow-hidden\\\"\\n            :class=\\\"{\\n        'bg-gradient-to-r from-gray-900 to-gray-700': !item.placeholder,\\n        'bg-gradient-to-r from-tan-800 to-tan-600': item.placeholder,  // Assume tan-800 and tan-600 are defined in your tailwind config\\n        'gradient-on-hover': !item.placeholder\\n    }\\\">\\n          <div class=\\\"show-info flex-grow flex flex-col items-center justify-center\\\">\\n            <h3 class=\\\"show-title my-4 w-full text-center text-lg font-semibold break-words\\\"\\n                :class=\\\"{'gradient-on-hover': !item.placeholder}\\\">\\n              {{ item.content.name || 'No Show Name' }}</h3>\\n            <!--            <p>{{ item.content.id }}</p>-->\\n            <!--            <p>Row: {{ item.gridRow }}</p>-->\\n            <SingleImage v-if=\\\"item.content.image\\\"\\n                         :image=\\\"item.content.image\\\"\\n                         :alt=\\\"item.content.name\\\"\\n                         :class=\\\"`w-full h-auto max-h-1/2 object-cover transition-opacity duration-300 hover:opacity-80`\\\"/>\\n            <div v-if=\\\"!item.placeholder\\\"\\n                 class=\\\"show-time w-full text-center text-sm p-2 mt-2\\\"\\n                 :class=\\\"{'gradient-on-hover': !item.placeholder}\\\">\\n              <p>{{ formatTime(item.startTime, true) }}</p>\\n              <!--              <p>{{ formatTime(item.startTime) }} - {{ formatTime(item.endTime, true) }}</p>-->\\n              <p>{{ formatDuration(item.durationMinutes) }}</p>\\n            </div>\\n          </div>\\n        </div>\\n      </div>\\n\\n\\n    </div>\\n\\n    <!--    <div v-if=\\\"nextScheduledShow\\\" class=\\\"next-show-highlight p-5 border border-gray-300 bg-gradient-to-r from-gray-900 to-gray-700 text-center\\\">-->\\n    <!--      <div class=\\\"bg-green-500 text-white py-2\\\">-->\\n    <!--        <h2>Playing Soon</h2>-->\\n    <!--      </div>-->\\n    <!--      <div class=\\\"show-details mt-4 mx-auto max-w-4xl\\\">-->\\n    <!--        <h3 @click=\\\"handleShowClick(nextScheduledShow)\\\" class=\\\"text-3xl mb-1 hover:text-blue-300 hover:cursor-pointer\\\">{{ nextScheduledShow.content.name }}</h3>-->\\n    <!--        <p class=\\\"text-lg\\\">{{ formatLongDate(nextScheduledShow.startTime) }}</p> &lt;!&ndash; Formatted start date &ndash;&gt;-->\\n    <!--        <p class=\\\"text-lg\\\">{{ formatTime(nextScheduledShow.startTime, true) }} - {{ formatTime(nextScheduledShow.endTime, true) }}</p>-->\\n    <!--        <div class=\\\"w-full flex justify-center items-center mt-4 hover:cursor-pointer\\\"-->\\n    <!--             @click=\\\"handleShowClick(nextScheduledShow)\\\">-->\\n    <!--          <SingleImage v-if=\\\"nextScheduledShow.content.image\\\"-->\\n    <!--               :image=\\\"nextScheduledShow.content.image\\\"-->\\n    <!--               :alt=\\\"nextScheduledShow.content.name\\\"-->\\n    <!--               :class=\\\"`w-3/4 md:w-1/2 lg:w-1/3 h-auto object-cover mx-auto transition-opacity duration-300 hover:opacity-80`\\\"/>-->\\n    <!--        </div>-->\\n    <!--        <p class=\\\"text-lg\\\">{{ formatDuration(nextScheduledShow.durationMinutes) }}</p>-->\\n    <!--      </div>-->\\n    <!--    </div>-->\\n\\n    <div class=\\\"schedule-grid text-center\\\" :style=\\\"{ 'grid-template-columns': gridColumns }\\\">\\n\\n      <div v-if=\\\"nowPlayingShow\\\" :style=\\\"statusGridItemStyle(nowPlayingShow)\\\"\\n           class=\\\"now-playing text-black font-semibold\\\">\\n        <span>NOW PLAYING</span>\\n      </div>\\n\\n      <div v-if=\\\"comingUpNextShow\\\" :style=\\\"statusGridItemStyle(comingUpNextShow)\\\"\\n           class=\\\"coming-up-next text-black font-semibold\\\">\\n        <span>COMING UP NEXT</span>\\n\\n      </div>\\n\\n    </div>\\n\\n    <div class=\\\"infinite-scroll-container\\\">\\n      <div v-for=\\\"(show, index) in displayedShows\\\" :key=\\\"show.id\\\"\\n           class=\\\"next-show-highlight p-5 border border-gray-300 bg-gradient-to-r from-gray-900 to-gray-700 text-center\\\"\\n           :class=\\\"{ 'last-item': index === displayedShows.length - 1 }\\\">\\n        <div class=\\\"bg-green-500 text-white py-2\\\">\\n          <h2>Playing Soon</h2>\\n        </div>\\n        <div class=\\\"show-details mt-4 mx-auto max-w-4xl\\\">\\n          <h3 @click=\\\"handleShowClick(show)\\\" class=\\\"text-3xl mb-1 hover:text-blue-300 hover:cursor-pointer\\\">\\n            {{ show.content.name }}</h3>\\n          <p class=\\\"text-lg\\\">{{ formatLongDate(show.startTime) }}</p>\\n          <p class=\\\"text-lg\\\">{{ formatTime(show.startTime, true) }} - {{ formatTime(show.endTime, true) }}</p>\\n          <div class=\\\"w-full flex justify-center items-center mt-4 hover:cursor-pointer\\\" @click=\\\"handleShowClick(show)\\\">\\n            <SingleImage v-if=\\\"show.content.image\\\"\\n                         :image=\\\"show.content.image\\\"\\n                         :alt=\\\"show.content.name\\\"\\n                         class=\\\"w-3/4 md:w-1/2 lg:w-1/3 h-auto object-cover mx-auto transition-opacity duration-300 hover:opacity-80\\\"/>\\n          </div>\\n          <p class=\\\"text-lg\\\">{{ formatDuration(show.durationMinutes) }}</p>\\n        </div>\\n      </div>\\n      <!-- Loading Indicator -->\\n      <div v-if=\\\"isLoading\\\" class=\\\"w-full text-center mt-4\\\">\\n      <span class=\\\"loading loading-dots loading-lg text-info\\\">\\n      </span>\\n      </div>\\n      <div v-element-visibility=\\\"onElementVisibility\\\"></div> <!-- This element triggers the visibility event -->\\n    </div>\\n\\n  </div>\\n</template>\\n<script setup>\\nimport { computed, onBeforeMount, onMounted, onUnmounted, ref, watch, watchEffect } from 'vue'\\nimport { Inertia } from '@inertiajs/inertia'\\nimport { vElementVisibility } from '@vueuse/components'\\nimport dayjs from 'dayjs'\\nimport advancedFormat from 'dayjs/plugin/advancedFormat' // for using 'a' for AM/PM format\\nimport { useScheduleStore } from '@/Stores/ScheduleStore'\\nimport { useAppSettingStore } from '@/Stores/AppSettingStore'\\nimport { useUserStore } from '@/Stores/UserStore'\\nimport ScheduleGrid from '@/Components/Pages/Schedule/ScheduleGrid.vue'\\nimport SingleImage from '@/Components/Global/Multimedia/SingleImage.vue'\\nimport CurrentTime from '@/Components/Global/Schedule/CurrentTime.vue'\\nimport { throttle } from '@/Utilities/Throttle'\\n\\nconst scheduleStore = useScheduleStore()\\nconst appSettingStore = useAppSettingStore()\\nconst userStore = useUserStore()\\n\\ndayjs.extend(advancedFormat)\\n\\nlet initialLoadHandled = false\\n\\n// // Computed property for the currently playing show\\n// const updateNowPlaying = computed(() => {\\n//   for (const show of scheduleStore.nextFourHoursOfContent) {\\n//     if (isNowPlaying(show.startTime, show.durationMinutes) && !show.placeholder && show.gridStart === 1) {\\n//       return show;  // ensure this has gridStart, gridSpan, gridRow\\n//     }\\n//   }\\n//   return null;\\n// });\\n//\\n//\\n//\\n// // Computed property for the show that is coming up next\\n// const updateComingUpNext = computed(() => {\\n//   let foundPlaying = false;\\n//   for (const show of scheduleStore.nextFourHoursOfContent) {\\n//     if (!show.placeholder && show.gridStart > 1) {\\n//       if (foundPlaying) {\\n//         return show;  // ensure this has gridStart, gridSpan, gridRow\\n//       }\\n//     }\\n//     if (isNowPlaying(show.startTime, show.durationMinutes)) {\\n//       foundPlaying = true;  // Mark as found\\n//     }\\n//   }\\n//   return null;\\n// });\\n\\n\\nconst isVisible = ref(false)\\nconst displayedShowsCount = ref(6)\\n// Computed property to ensure reactivity\\nconst isLoading = computed(() => scheduleStore.isLoading)\\nconst nextFourHoursWithHalfHourIntervals = computed(() => scheduleStore.nextFourHoursWithHalfHourIntervals)\\nconst nextFourHoursOfContent = computed(() => scheduleStore.nextFourHoursOfContent)\\n\\n// console.log('isLoading on mount:', isLoading.value);\\n// scheduleStore.preloadWeeklyContent();\\n\\n// Use async/await inside onMounted\\nonBeforeMount(async () => {\\n\\n});\\n\\n// Watch the computed property to see changes in real-time\\nwatch(isLoading, (newValue) => {\\n  console.log('isLoading changed:', newValue);\\n});\\n\\n// Function to handle element visibility\\nfunction onElementVisibility(state) {\\n  isVisible.value = state;\\n}\\n\\n// Function to load more shows\\n// Function to load more shows\\nconst loadMoreShows = async () => {\\n  if (isVisible.value && !isLoading.value) {\\n    isLoading.value = true;\\n    console.log(\\\"Loading more shows\\\");\\n\\n    // Fetch more schedules\\n    await scheduleStore.fetchMoreSchedules();\\n\\n    displayedShowsCount.value += 6;\\n    isLoading.value = false;\\n  }\\n};\\n\\n// Throttle the loadMoreShows function\\nconst throttledLoadMoreShows = throttle(loadMoreShows, 200);\\n\\n\\n// Watcher for isVisible.value\\nwatch(isVisible, (newValue) => {\\n  if (newValue) {\\n    throttledLoadMoreShows();\\n  }\\n});\\n\\nconst allPlaceholders = computed(() => {\\n  return scheduleStore.nextFourHoursOfContent.every(item => item.placeholder)\\n})\\n\\n\\n\\nconst upcomingShows = computed(() => {\\n  const now = dayjs()\\n  return scheduleStore.schedules.filter(show =>\\n      dayjs(show.startTime).isAfter(now) && !show.placeholder,\\n  ).sort((a, b) => dayjs(a.startTime).diff(dayjs(b.startTime)))\\n})\\n\\nconst displayedShows = computed(() => upcomingShows.value.slice(0, displayedShowsCount.value))\\n\\n// function handleScroll() {\\n//   const { scrollTop, scrollHeight, clientHeight } = document.documentElement;\\n//   if (scrollTop + clientHeight >= scrollHeight - 5) { // Check if near bottom\\n//     displayedShowsCount.value += 6; // Load more shows\\n//   }\\n// }\\n\\n// Phasing out the \\\"nextScheduledShow\\\" in favour of the upcomingShows.\\n// const nextScheduledShow = computed(() => {\\n//   const now = dayjs()\\n//   return scheduleStore.weeklyContent.find(show =>\\n//       dayjs(show.startTime).isAfter(now) && !show.placeholder,\\n//   )\\n// })\\n\\nfunction isNowPlaying(startTime, duration) {\\n  const now = dayjs()\\n  const start = dayjs(startTime)\\n  const end = start.add(duration, 'minutes')\\n  return now.isAfter(start) && now.isBefore(end)\\n}\\n\\n\\nconst nowPlayingShow = computed(() => {\\n  return scheduleStore.nextFourHoursOfContent.find(show => show.nowPlaying)\\n})\\n\\nconst comingUpNextShow = computed(() => {\\n  return scheduleStore.nextFourHoursOfContent.find(  show => show.comingUpNext)\\n})\\n\\n// watch(() => scheduleStore.timeSlots, (newTimeSlots, oldTimeSlots) => {\\n//   if (newTimeSlots && newTimeSlots.length > 0 && !initialLoadHandled) {\\n//     // console.log('Time slots are ready, updating next four hours.')\\n//     scheduleStore.updateNextFourHours()\\n//     initialLoadHandled = true\\n//   }\\n// }, {immediate: true})\\n\\nwatch(\\n    () => scheduleStore.baseTime,\\n    (newTime, oldTime) => {\\n      if (newTime !== oldTime) { // This check may be redundant but adds clarity\\n        // console.log(`Base time updated from ${oldTime} to ${newTime}`)\\n        scheduleStore.updateNextFourHours()\\n      }\\n    },\\n    {immediate: true},\\n)\\n\\n// Watcher for schedules to ensure initial data load\\nwatch(\\n    () => scheduleStore.schedules,\\n    (newSchedules) => {\\n      if (newSchedules && newSchedules.length > 0 && !initialLoadHandled) {\\n        scheduleStore.updateNextFourHours();\\n        initialLoadHandled = true;\\n      }\\n    },\\n    { immediate: true },\\n);\\n//\\n\\n// Watch for changes in screen size indicators\\nwatch(\\n    [() => appSettingStore.isVerySmallScreen, () => appSettingStore.isSmallScreen],\\n    ([newVerySmall, newSmall], [oldVerySmall, oldSmall]) => {\\n      if (newVerySmall !== oldVerySmall || newSmall !== oldSmall) {\\n        // console.log(`Screen size change detected: VerySmallScreen: ${newVerySmall}, SmallScreen: ${newSmall}`)\\n        scheduleStore.fetchSchedules()\\n      }\\n    },\\n    {immediate: false},  // Optionally run on initial setup\\n)\\n\\n// Method to format time with conditional AM/PM display\\nfunction formatTime(time, showMeridiem = false) {\\n  return dayjs(time).format(`h:mm ${showMeridiem ? 'a' : ''}`)\\n}\\n\\nfunction formatLongDate(date) {\\n  return dayjs(date).format('dddd MMM D, YYYY')\\n}\\n\\n// Method to format duration into a readable format\\nfunction formatDuration(minutes) {\\n  const hours = Math.floor(minutes / 60)\\n  const remainderMinutes = minutes % 60\\n  if (hours === 0) return `${remainderMinutes} minutes`\\n  return `${hours} hour${hours > 1 ? 's' : ''} ${remainderMinutes > 0 ? remainderMinutes + ' minutes' : ''}`\\n}\\n\\n// Define the function to calculate grid style directly\\nfunction gridItemStyle(item) {\\n  const style = {\\n    gridColumn: `${item.gridStart} / span ${item.gridSpan}`,\\n    gridRow: `row ${item.gridRow}`,\\n  }\\n  // console.log(style)  // Log to see what styles are being returned\\n  return style\\n}\\n\\n// Dedicated function to handle status row grid styling\\nfunction statusGridItemStyle(item) {\\n  if (!item) return {}\\n\\n  // Log to debug the grid positions being applied\\n  // console.log(`Status Item - Grid Start: ${item.gridStart}, Grid Span: ${item.gridSpan}`)\\n\\n  return {\\n    gridColumn: `${item.gridStart} / span ${item.gridSpan}`,\\n    gridRow: `row 1`, // Assuming status rows are always in the first grid row for visibility\\n  }\\n}\\n\\n// Computed property to determine the number of columns\\nconst gridColumns = computed(() => {\\n  let numColumns\\n  if (appSettingStore.isVerySmallScreen) {\\n    numColumns = Math.floor((scheduleStore.verySmallScreenSlotHours * 60) / scheduleStore.slotIntervalMinutes)\\n  } else if (appSettingStore.isSmallScreen) {\\n    numColumns = Math.floor((scheduleStore.smallScreenSlotHours * 60) / scheduleStore.slotIntervalMinutes)\\n  } else {\\n    numColumns = Math.floor((scheduleStore.mediumScreenSlotHours * 60) / scheduleStore.slotIntervalMinutes)\\n  }\\n  document.documentElement.style.setProperty('--text-size', numColumns < 4 ? '0.8em' : '1em')\\n  document.documentElement.style.setProperty('--text-small', numColumns < 4 ? '0.7em' : '0.8em')\\n\\n  return `repeat(${numColumns}, minmax(0, 1fr))` // Returns the CSS grid-template-columns value\\n})\\n\\nconst gridPlacement = (gridStart, gridSpan) => {\\n  return {\\n    gridColumnStart: gridStart,\\n    gridColumnEnd: `span ${gridSpan}`,\\n    gridRowStart: 'auto',\\n    gridRowEnd: 'span 1', // Assuming each item occupies one row height-wise\\n  }\\n}\\n\\n// // Determines the classes for a status cell\\n// const getStatusCellClasses = (index) => {\\n//   const classes = ['status-cell']\\n//   if (index === 0) classes.push('now-playing')\\n//   else if (index === 1) classes.push('coming-up-next')\\n//   else classes.push('status-cell-empty') // For cells without specific content\\n//   return classes\\n// }\\n\\nfunction getCellClasses(type) {\\n  const baseClass = 'column-width text-sm 2xl:text-md border border-0.5 border-green-300 hover:border-blue-500 cursor-pointer'\\n  switch (type) {\\n    case 'show':\\n      return `${baseClass} bg-gradient-show hover:bg-gradient-show-hover`\\n    case 'new_release':\\n      return `${baseClass} bg-gradient-new-release hover:bg-gradient-new-release-hover`\\n      // Add more cases as needed\\n    default:\\n      return baseClass\\n  }\\n}\\n\\nfunction handleShowClick(item) {\\n  let url = '' // Initialize url variable\\n\\n  switch (item.type) {\\n    case 'show':\\n      url = `/shows/${item.content.slug}/`\\n      break\\n    case 'movie':\\n      url = `/movies/${item.content.slug}/`\\n      break\\n    case 'showEpisode':\\n      url = `/shows/${item.show.slug}/episodes/${item.slug}`\\n      break\\n    default:\\n      // Handle default case or do nothing\\n  }\\n\\n  Inertia.visit(url) // Visit the dynamically created URL\\n\\n  // if (isNowPlaying(item.startTime, item.durationMinutes)) {\\n  //   // Redirect to the show's page if it's currently playing\\n  //   Inertia.visit(`/shows/${item.content.slug}/`)\\n  // } else {\\n  //   // Open the reminder modal for shows that are not currently playing\\n  //   openModal('getReminderModal')\\n  // }\\n}\\n\\n\\nfunction updateNowPlayingAndComingUpNext() {\\n  // Logic to update nowPlaying and comingUpNext based on the current time and show data\\n}\\n\\n\\n// Helper function to determine the appropriate classes based on the gridStart and certain conditions\\nconst getStatusCellClasses = (gridStart, isFirst, isSecond) => {\\n  const classes = ['status-cell'] // Base class for all status cells\\n  if (isFirst && gridStart === 1) {\\n    // 'Now Playing' is only assigned if it's the first item and it starts at the first grid column\\n    classes.push('now-playing')\\n  } else if (isSecond && gridStart !== 1) {\\n    // 'Coming Up Next' is only assigned to the second item and it should not start at the first grid column\\n    classes.push('coming-up-next')\\n  } else {\\n    // Default class for other cells or when no specific condition is met\\n    classes.push('status-cell-empty')\\n  }\\n  return classes\\n}\\n// Ensure the data structure is what you expect\\n// console.log('All items in store:', scheduleStore.nextFourHoursOfContent)\\n\\n//\\n// const actualShows = computed(() => {\\n//   // Flatten the nested arrays, filter out placeholders, and ignore specific content names\\n//   return scheduleStore.nextFourHoursOfContent.flat().filter(item =>\\n//       !item.placeholder && item.content.name !== \\\"Nothing scheduled.\\\" && item.content.name !== \\\"Blank Spot\\\"\\n//   );\\n// });\\n//\\n\\n\\n// watch(nowPlayingShow, (newVal, oldVal) => {\\n//   console.log('Now Playing Show changed from:', oldVal, 'to:', newVal);\\n// });\\n//\\n// watch(comingUpNextShow, (newVal, oldVal) => {\\n//   console.log('Coming Up Next Show changed from:', oldVal, 'to:', newVal);\\n// });\\n\\n\\n//\\n// // Watch for changes in actualShows and log or react accordingly\\n// watch(actualShows, (newShows, oldShows) => {\\n//   console.log(\\\"Actual shows have updated:\\\", newShows);\\n//   // Additional reactions can be performed here\\n// });\\n//\\n// // Optionally, watch for changes in previousItemGridEnd if needed\\n// watch(previousItemGridEnd, (newEnd, oldEnd) => {\\n//   console.log(\\\"Previous item grid end has updated:\\\", newEnd);\\n//   // React to changes in the end of the first show, if necessary\\n// });\\n\\n\\nfunction openModal(modalName) {\\n  document.getElementById(modalName).showModal()\\n}\\n</script>\\n\\n<style scoped>\\n\\n.bg-gradient-show {\\n  background: linear-gradient(to right, #1f4037, #99f2c8); /* Example green gradient */\\n}\\n\\n.bg-gradient-show-hover:hover {\\n  background: linear-gradient(to right, #66D3FA, #6E45E2); /* Example green gradient on hover */\\n}\\n\\n.bg-gradient-new-release {\\n  background: linear-gradient(to right, #654ea3, #eaafc8); /* Example purple gradient */\\n}\\n\\n.bg-gradient-new-release-hover:hover {\\n  background: linear-gradient(to right, #c2e59c, #64b3f4); /* Example purple gradient on hover */\\n}\\n\\n\\n.column-width {\\n  @apply w-16\\n}\\n\\n\\n.schedule-item {\\n  background: #f0f0f0;\\n  color: #000;\\n  padding: 10px;\\n  display: flex;\\n  flex-direction: column;\\n  gap: 10px;\\n  align-items: center;\\n}\\n\\n.time-slot {\\n  text-align: center;\\n  padding: 10px 0;\\n  border-bottom: 1px solid #fff;\\n  grid-row: 1; /* Ensures all time slots are in the first row */\\n}\\n\\n.time-banner {\\n  background-color: rgba(0, 123, 255, 0.5); /* Example styling */\\n  text-align: center;\\n  border: 1px solid white; /* White border */\\n  padding: 10px;\\n}\\n\\n.show-cell {\\n  display: flex; /* Ensure this is set to flex to control child elements with flex properties */\\n  flex-direction: column; /* Align children in a column */\\n  justify-content: center; /* Align items to the top */\\n  align-items: center; /* Center children horizontally */\\n  border: 1px solid #ccc;\\n  background-color: #f8f8f8;\\n  width: 100%; /* Ensures cell uses full width of its grid column */\\n  height: 100%; /* Ensures cell uses full height */\\n}\\n\\n.time-cell {\\n  border: 1px solid #fff;\\n  text-align: center; /* Center text if desired */\\n  padding: 10px;\\n}\\n\\n.content {\\n  background: #f0f0f0;\\n  padding: 8px;\\n  border: 1px solid #ddd;\\n}\\n\\n.placeholder {\\n  background: #ccc;\\n  width: 100%;\\n  height: 60px;\\n}\\n\\n\\n.schedule-grid {\\n  display: grid;\\n  width: 100%;\\n}\\n\\n.header-row {\\n  display: contents; /* This makes the header-row itself not generate a box, allowing .time-cell to be direct children of .schedule-grid */\\n}\\n\\n.content-row {\\n  display: contents; /* This makes the row container disappear, directly using the grid defined in parent */\\n}\\n\\n.schedule-cell {\\n  background: #333;\\n  color: #fff;\\n  text-align: center;\\n  padding: 8px;\\n}\\n\\n.grid-container {\\n  display: grid;\\n  width: 100%;\\n  grid-gap: 10px;\\n}\\n\\n.grid-item {\\n  display: flex;\\n  align-items: center;\\n  justify-content: center;\\n  border: 1px solid #ccc;\\n}\\n\\n\\n.status-row {\\n  display: grid;\\n  width: 100%;\\n  align-items: center;\\n}\\n\\n\\n.status-cell {\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  padding: 8px;\\n  color: white;\\n  width: 100%;\\n  height: 100%;\\n  font-weight: bold;\\n  opacity: 0.8;\\n  transition: background-color 0.3s ease;\\n}\\n\\n.status-cell span {\\n  display: block;\\n  padding: 4px 8px;\\n  border-radius: 4px;\\n  text-align: center;\\n}\\n\\n/* Optional: If you want the empty cells to have a slight indication they are there */\\n.status-cell:empty::after {\\n  content: \\\"\\\";\\n  display: block;\\n  width: 100%;\\n  height: 100%;\\n  background: none; /* Adjust this to a very subtle color or keep transparent */\\n}\\n\\n/* Custom hover effect for the parent that affects children */\\n.show-cell:hover .gradient-on-hover {\\n  background-image: linear-gradient(to right, #06beb6, #48b1bf);\\n}\\n\\n.now-playing, .coming-up-next {\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  padding: 10px;\\n  border: 1px solid #ccc;\\n}\\n\\n.now-playing {\\n  background-color: #4CAF50; /* Green for now playing */\\n  animation: pulseAnimation 2s infinite;\\n}\\n\\n.coming-up-next {\\n  background-color: #FF9800; /* Orange for coming up next */\\n}\\n\\n\\n@keyframes pulseAnimation {\\n  0% {\\n    opacity: 0.75;\\n  }\\n  50% {\\n    opacity: 1;\\n  }\\n  100% {\\n    opacity: 0.75;\\n  }\\n}\\n\\n/* Responsive visibility */\\n@media (min-width: 1280px) {\\n  /* 2xl */\\n  .xl\\\\:hidden {\\n    display: none;\\n  }\\n}\\n\\n@media (min-width: 1024px) {\\n  /* xl */\\n  .lg\\\\:hidden {\\n    display: none;\\n  }\\n}\\n\\n</style>\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".grid[data-v-53f3bf92]{display:grid;gap:4px;grid-auto-rows:minmax(100px,auto);grid-template-columns:repeat(8,minmax(0,1fr))}@media (max-width:640px){.grid[data-v-53f3bf92]{grid-template-columns:repeat(4,minmax(0,1fr))}}@media (min-width:641px) and (max-width:768px){.grid[data-v-53f3bf92]{grid-template-columns:repeat(6,minmax(0,1fr))}}@media (min-width:769px){.grid[data-v-53f3bf92]{grid-template-columns:repeat(8,minmax(0,1fr))}}\", \"\",{\"version\":3,\"sources\":[\"webpack://./resources/js/Components/Pages/Schedule/ScheduleGrid.vue\"],\"names\":[],\"mappings\":\"AAgJA,uBACE,YAAa,CAGb,OAAQ,CADR,iCAAmC,CADnC,6CAGF,CAEA,yBACE,uBACE,6CACF,CACF,CACA,+CACE,uBACE,6CACF,CACF,CACA,yBACE,uBACE,6CACF,CACF\",\"sourcesContent\":[\"<template>\\n  <div>\\n    <div :class=\\\"gridClass\\\">\\n      <SpotComponent\\n          v-for=\\\"show in visibleShows\\\"\\n          :key=\\\"show.id\\\"\\n          :show=\\\"show\\\"\\n          :span=\\\"calculateSpan(show)\\\"\\n      />\\n    </div>\\n  </div>\\n</template>\\n\\n<script setup>\\nimport { ref, computed, watch, onMounted, onUnmounted, watchEffect } from 'vue'\\nimport { useScheduleStore } from '@/Stores/ScheduleStore'\\nimport SpotComponent from './SpotComponent.vue';\\n\\nconst scheduleStore = useScheduleStore()\\n\\n// const shows = ref([]);\\n\\n// Update base time whenever current hour changes\\n// const updateShows = () => {\\n//   const [hours, minutes] = currentHour.value.split(':');\\n//   baseTime.value.setHours(parseInt(hours), parseInt(minutes), 0, 0);\\n// };\\n\\nconst gridClass = computed(() => {\\n  // Here you can have logic based on window width or other factors\\n  return 'grid grid-cols-8 gap-2 p-4'\\n}); // as before\\n\\n\\n/**\\n * Calculates how many 30-minute columns a show should span within the visible grid based on its start and end times.\\n * @param {Object} show - The show object containing start time and duration.\\n * @returns {Number} The number of 30-minute columns the show spans within the visible grid.\\n */\\nconst calculateSpan = (show) => {\\n\\n  // gridWindowEnd is calculated as 4 hours beyond the baseTime.\\n  // This covers the full span of the visible schedule grid from the current base time.\\n  const gridWindowEnd = new Date(scheduleStore.baseTime.value.getTime() + 4 * 3600000); // 4 hours from baseTime\\n\\n  // Convert show start time and duration into JavaScript Date objects for easier manipulation.\\n  const showStart = new Date(show.startTime);\\n  const showEnd = new Date(showStart.getTime() + show.duration * 60000); // Convert duration from minutes to milliseconds\\n\\n  // Check if the show is outside the visible time window defined by baseTime and gridWindowEnd.\\n  if (showEnd <= scheduleStore.baseTime || showStart >= gridWindowEnd) {\\n    // If the show ends before the grid starts or begins after the grid ends, it is not visible.\\n    return 0;\\n  }\\n\\n  // Calculate the actual start and end times of the show that are visible within the grid.\\n  const visibleStartTime = showStart < scheduleStore.baseTime ? scheduleStore.baseTime : showStart;\\n  const visibleEndTime = showEnd > gridWindowEnd ? gridWindowEnd : showEnd;\\n\\n  // Calculate the visible duration of the show in minutes.\\n  const visibleDuration = (visibleEndTime - visibleStartTime) / 60000; // Convert milliseconds to minutes\\n\\n  // Determine how many 30-minute columns this visible duration spans.\\n  // Use Math.ceil to ensure that any part of a column used requires a full column allocation.\\n  return Math.ceil(visibleDuration / 30);\\n};\\n\\n\\n\\n\\nconst timeFormat = (date) => {\\n  return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\\n};\\n\\nconst endTime = (show) => {\\n  return new Date(show.startTime.getTime() + show.span * 30 * 60000);\\n};\\n\\n// const visibleShows = computed(() => {\\n//   return mockShows.map(show => {\\n//     // Calculate the adjusted start time based on the base time\\n//     const startTime = new Date(baseTime.value.toDateString() + ' ' + show.startTime);\\n//     const endTime = new Date(startTime.getTime() + show.span * 30 * 60000); // span in minutes to milliseconds\\n//\\n//     // Determine if the show should be visible within the current view window\\n//     // For example, assuming the view window is 4 hours from the base time\\n//     const viewWindowStart = baseTime.value;\\n//     const viewWindowEnd = new Date(baseTime.value.getTime() + 4 * 3600000);\\n//\\n//     // Check if the show overlaps with the current view window\\n//     const isVisible = (startTime < viewWindowEnd && endTime > viewWindowStart);\\n//\\n//     return {\\n//       ...show,\\n//       startTime,\\n//       endTime, // optional, for debugging or further calculations\\n//       isVisible // This can be used to conditionally render shows\\n//     };\\n//   }).filter(show => show.isVisible); // Optionally filter out shows not visible in the current window\\n// });\\n\\n// const visibleShows = computed(() => {\\n//   // Filter or adjust shows based on the current 'baseTime'\\n//   return mockShows.map(show => ({\\n//     ...show,\\n//     startTime: new Date(show.startTime.getTime()) // ensure reactive updates\\n//   }));\\n// });\\n\\n// const numberOfColumns = scheduleStore.numberOfColumns;\\n\\n// const width = ref(window.innerWidth);\\n\\nonMounted(async() => {\\n// Register the resize event listener to update the width\\n  window.addEventListener('resize', scheduleStore.updateWidth);\\n  // const response = await axios.get('@/Json/mockShows');\\n  // shows.value = response.data.mockShows.map(show => ({\\n  //   ...show,\\n  //   startTime: new Date(baseTime.value.toDateString() + ' ' + show.startTime)\\n  // }));\\n});\\n\\nonUnmounted(() => {\\n  window.removeEventListener('resize', scheduleStore.updateWidth);\\n});\\n\\n// Assuming the current hour is 0, which represents the start of our viewing grid\\n// const baseTime = new Date();\\n// baseTime.setMinutes(0, 0, 0); // Normalize to the full hour for consistency\\n\\n// const mockShows = [\\n//   { name: 'Early Morning Show', span: 2, startTime: new Date(baseTime.getTime() - 30*60000) }, // Started 30 minutes ago\\n//   { name: 'Morning Show', span: 4, startTime: baseTime }, // Starts now\\n//   { name: 'Late Morning Show', span: 3, startTime: new Date(baseTime.getTime() + 1*3600000) }, // Starts in 1 hour\\n//   { name: 'Noon News', span: 2, startTime: new Date(baseTime.getTime() + 90*60000) }, // Starts in 1.5 hours\\n//   { name: 'Afternoon Talk', span: 6, startTime: new Date(baseTime.getTime() + 2*3600000) }, // Starts in 2 hours\\n//   { name: 'Evening Special', span: 1, startTime: new Date(baseTime.getTime() - 90*60000) }, // Started 1.5 hours ago\\n//   { name: 'Late Show', span: 3, startTime: new Date(baseTime.getTime() + 2*3600000) }, // Starts in 2 hours\\n//   { name: 'Night Owl Movie', span: 2, startTime: new Date(baseTime.getTime() + 3*3600000) } // Starts in 3 hours\\n// ];\\n</script>\\n\\n<style scoped>\\n.grid {\\n  display: grid;\\n  grid-template-columns: repeat(8, minmax(0, 1fr));\\n  grid-auto-rows: minmax(100px, auto);\\n  gap: 4px;\\n}\\n\\n@media (max-width: 640px) {\\n  .grid {\\n    grid-template-columns: repeat(4, minmax(0, 1fr));\\n  }\\n}\\n@media (min-width: 641px) and (max-width: 768px) {\\n  .grid {\\n    grid-template-columns: repeat(6, minmax(0, 1fr));\\n  }\\n}\\n@media (min-width: 769px) {\\n  .grid {\\n    grid-template-columns: repeat(8, minmax(0, 1fr));\\n  }\\n}\\n</style>\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","<template>\n  <!-- Today view layout -->\n  <div class=\" hidden today-view container mx-auto px-4 py-8 flex flex-col\">\n    <div id=\"topDivForTodayView\"></div>\n    <button  v-if=\"!scheduleStore.isToday\"\n             @click=\"scheduleStore.setSelectedDayToToday(new Date());\"\n             class=\"py-1 px-2 text-white rounded-lg w-fit\"\n             :class=\"{'bg-blue-300': scheduleStore.isToday, 'bg-green-600 hover:bg-green-700': !scheduleStore.isToday}\">\n      Go To Now</button>\n    <div class=\"flex justify-center text-center mb-4\">\n      <h2 class=\"text-3xl font-bold mb-2\">{{ dateMessage }}</h2>\n    </div>\n    <div class=\"flex justify-between items-center mb-4\">\n      <button\n          @click=\"scheduleStore.changeDay(-1)\"\n          class=\"bg-gray-100 hover:bg-gray-200 text-black p-2 rounded shadow\"\n      >\n        &lt; Previous Day\n      </button>\n      <div class=\"flex flex-col text-center\">\n\n        <h3>{{ userStore.canadianTimezoneDescription }} Time</h3>\n      </div>\n      <button\n          @click=\"scheduleStore.changeDay(1)\"\n          class=\"bg-gray-100 hover:bg-gray-200 text-black p-2 rounded shadow\"\n      >\n        Next Day &gt;\n      </button>\n    </div>\n    <button\n        @click=\"scheduleStore.shiftHours(-6)\"\n        class=\"mb-4 bg-gray-100 hover:bg-gray-200 text-black py-2 rounded shadow\"\n    >\n      &#8593; Back 6 Hours\n    </button>\n\n    <div class=\"flex flex-col flex-grow\">\n      <div v-for=\"(hour, index) in scheduleStore.nextSixHours\" :key=\"hour.toString()\">\n\n        <!-- Time Segment Label -->\n        <div\n            v-if=\"index === 0 || getTimeSegment(hour).segment !== getTimeSegment(scheduleStore.nextSixHours[index - 1]).segment\"\n            :class=\"getTimeSegment(hour).color\"\n            class=\"mb-4 p-2 text-black text-center font-bold text-2xl rounded shadow\">\n          {{ getTimeSegment(hour).segment }}\n        </div>\n\n        <!-- Content for the current hour -->\n        <template v-for=\"item in upcomingContent\">\n          <div v-if=\"isWithinCurrentHour(item, hour)\" :key=\"item.id\"\n               class=\"hover:bg-blue-400 hover:cursor-pointer\"\n               @click.prevent=\"goToContentPage(item)\"\n               :class=\"['p-4 rounded-lg shadow', getTimeSegment(new Date(item.start_time)).color, 'mb-4']\">\n            <div class=\"flex flex-row flex-wrap gap-x-4 gap-y-2\">\n              <div class=\"flex flex-col w-28 max-w-28 text-gray-500\">\n                <div class=\"font-bold text-black break-words\">{{\n                    formatHour(new Date(item.start_time))\n                  }}&nbsp;{{ userStore.timezoneAbbreviation }}\n                </div>\n                <div class=\"break-words\">{{ formatDuration(item.durationMinutes) }}</div>\n              </div>\n              <div class=\"flex flex-col\">\n                <button @click.prevent=\"goToContentPage(item)\">\n                  <SingleImage v-if=\"item.type === 'show'\" :image=\"item?.content?.show?.image\"\n                               :alt=\"item?.content?.show?.name\" class=\"w-20 h-20\"/>\n                  <SingleImage v-else :image=\"item?.content?.image\" :alt=\"item?.content?.name\" class=\"w-20 h-20\"/>\n                </button>\n              </div>\n              <div class=\"flex flex-col items-start h-full\">\n                <div class=\"text-gray-800 text-2xl tracking-wider\">\n                  <button @click.prevent=\"goToContentPage(item)\" class=\"text-left\">\n                    <span v-if=\"item.type === 'show'\">{{ item?.content?.show?.name }}</span>\n                    <span v-if=\"item.type === 'movie'\">{{ item?.content?.name }}</span>\n                  </button>\n                </div>\n                <div class=\"mt-2 text-gray-700 flex flex-wrap gap-1\">\n                    <div class=\"w-fit text-xs font-semibold uppercase tracking-wide bg-gray-900 px-2 py-1 rounded\">\n                      <span v-if=\"item.type === 'show'\" class=\"text-green-500\">show</span>\n                      <span v-if=\"item.type === 'movie'\"\n                            class=\"text-pink-500 bg-gray-900 px-2 py-1\">movie</span>\n                    </div>\n                    <div v-if=\"item?.content?.show?.category?.name || item?.content?.category?.name\"\n                         class=\"w-fit text-xs font-semibold uppercase tracking-wider text-yellow-600 bg-gray-900 px-2 py-1 rounded\">\n                    <span v-if=\"item.type === 'show' && item?.content?.show?.category?.name\"\n                          class=\"\">{{ item?.content?.show?.category?.name }}</span>\n                      <span v-if=\"item.type === 'movie' && item?.content?.subCategory?.name\"\n                            class=\"\">{{ item?.content?.category?.name }}</span>\n                    </div>\n                    <div v-if=\"item?.content?.show?.subCategory?.name || item?.content?.subCategory?.name\"\n                         class=\"w-fit text-xs font-semibold tracking-wide text-yellow-500 bg-gray-900 px-2 py-1 rounded\">\n                      <span v-if=\"item.type === 'show'\" class=\"\">{{ item?.content?.show?.subCategory?.name }}</span>\n                      <span v-if=\"item.type === 'movie'\" class=\"\">{{ item?.content?.subCategory?.name }}</span>\n                    </div>\n                  </div>\n              </div>\n            </div>\n          </div>\n        </template>\n\n\n        <!-- Fallback if no content is found for the current hour -->\n        <div v-if=\"!isContentAvailableForHour(hour)\" :class=\"getTimeSegment(hour).color\"\n             class=\"mb-4 p-4 rounded-lg shadow text-gray-500\">\n          <div class=\"font-semibold\">{{ formatHour(hour) }}&nbsp;{{ userStore.timezoneAbbreviation }}</div>\n          <div>Nothing scheduled.</div>\n        </div>\n\n        <!-- Dynamically insert the dateMessage for the next day if the hour is 11 PM -->\n        <div v-if=\"scheduleStore.isElevenPM(hour) && scheduleStore.nextSixHours[index + 1]\"\n             class=\"my-4 p-2 bg-blue-800 text-white rounded shadow\">\n          {{ generateDateMessage(addHours(hour, 1)) }}\n        </div>\n      </div>\n    </div>\n\n    <button\n        @click=\"shiftHours(6)\"\n        class=\"bg-gray-100 hover:bg-gray-200 text-black py-2 rounded shadow\"\n    >\n      &#8595; Forward 6 Hours\n    </button>\n  </div>\n</template>\n\n<script setup>\n// Today view logic\n// import { ref, computed } from 'vue'\nimport { useScheduleStore } from '@/Stores/ScheduleStore'\nimport { useUserStore } from '@/Stores/UserStore'\nimport {\n  format,\n  startOfHour,\n  addHours,\n  isToday,\n  isYesterday,\n  isTomorrow,\n  startOfDay,\n  isWithinInterval,\n  isSameDay,\n} from 'date-fns'\nimport { storeToRefs } from 'pinia'\nimport { computed, onMounted, ref, watch, watchEffect } from 'vue'\nimport SingleImage from '@/Components/Global/Multimedia/SingleImage.vue'\nimport { Inertia } from '@inertiajs/inertia'\n\nconst scheduleStore = useScheduleStore()\nconst userStore = useUserStore()\nconst {upcomingContent, dateMessage} = storeToRefs(scheduleStore)\n\nconst selectedDay = ref(scheduleStore.selectedDay)\nconst weeklyContent = computed(() => scheduleStore.weeklyContent)\n\nconst shiftHours = async(hours) => {\n  const topDiv = document.getElementById(\"topDivForTodayView\");\n  topDiv.scrollIntoView({behavior: 'smooth'});\n  await scheduleStore.shiftHours(hours)\n}\n\nwatch(selectedDay, (newValue) => {\n  scheduleStore.setSelectedDay(newValue)\n  // If necessary, trigger other actions when selectedDay changes\n})\n\nfunction isWithinCurrentHour(item, hour) {\n  const startOfCurrentHour = startOfHour(hour)\n  const endOfCurrentHour = addHours(startOfCurrentHour, 1)\n  const contentStartTime = new Date(item.start_time)\n  return contentStartTime >= startOfCurrentHour && contentStartTime < endOfCurrentHour\n}\n\n// Assuming `upcomingContent` is a computed property that already filters\n// content within a 6-hour window from `scheduleStore.viewingWindowStart`\nfunction isContentAvailableForHour(hour) {\n  // Convert the given hour to the start and end of that hour block\n  const startOfCurrentHour = startOfHour(hour)\n  const endOfCurrentHour = addHours(startOfCurrentHour, 1)\n\n  // Check if any item in `upcomingContent` starts within this hour block\n  return upcomingContent.value.some(item => {\n    const contentStartTime = new Date(item.start_time)\n    return contentStartTime >= startOfCurrentHour && contentStartTime < endOfCurrentHour\n  })\n}\n\nfunction formatHour(date) {\n  return format(date, 'h:mm aaaa')\n}\n\nfunction getTimeSegment(hour) {\n  const hourOfDay = hour.getHours()\n  if (hourOfDay >= 4 && hourOfDay < 6) return {segment: 'Early Morning', color: 'bg-gray-200'}\n  if (hourOfDay >= 6 && hourOfDay < 12) return {segment: 'Morning', color: 'bg-yellow-200'}\n  if (hourOfDay >= 12 && hourOfDay < 17) return {segment: 'Afternoon', color: 'bg-green-200'}\n  if (hourOfDay >= 17 && hourOfDay < 20) return {segment: 'Prime Time', color: 'bg-red-200'}\n  if (hourOfDay >= 20 && hourOfDay < 23) return {segment: 'Late Prime Time', color: 'bg-purple-200'}\n  if (hourOfDay >= 23 || hourOfDay < 1) return {segment: 'Late Night', color: 'bg-blue-200'}\n  if (hourOfDay >= 1 && hourOfDay < 4) return {segment: 'Overnight', color: 'bg-indigo-200'}\n  return {segment: '', color: ''} // Default case\n}\n\n// A computed property to determine the starting segment for the displayed hours\nconst startingSegment = computed(() => scheduleStore.nextSixHours.value.length > 0 ? getTimeSegment(scheduleStore.nextSixHours.value[0]) : null)\n\nfunction generateDateMessage(date) {\n  // This method mirrors the logic in the store's getter but accepts any date.\n  const startDay = startOfDay(date)\n  const formattedDate = format(startDay, 'EEEE, MMMM do')\n  if (isToday(startDay)) {\n    return `Today - ${formattedDate}`\n  } else if (isYesterday(startDay)) {\n    return `Yesterday - ${formattedDate}`\n  } else if (isTomorrow(startDay)) {\n    return `Tomorrow - ${formattedDate}`\n  } else {\n    return formattedDate\n  }\n}\n\nconst goToContentPage = (item) => {\n  if (item.type === 'show') {\n    Inertia.visit(`/shows/${item.content.show.slug}`)\n  } else if (item.type === 'movie') {\n    Inertia.visit(`/movies/${item.content.slug}`)\n  }\n}\n\nconst formatDuration = (minutes) => {\n  if (minutes < 60) {\n    return `${minutes} minutes`\n  } else if (minutes === 60) {\n    return `1 hour`\n  } else {\n    const hours = Math.floor(minutes / 60)\n    const remainingMinutes = minutes % 60\n    if (remainingMinutes === 0) {\n      return `${hours} hours`\n    } else {\n      return `${hours} hour${hours > 1 ? 's' : ''} and ${remainingMinutes} minutes`\n    }\n  }\n}\n\n\n// Define a reactive watcher on the timezone\n// This watcher will call preloadWeeklyContent whenever the timezone changes and is not null\nwatch(\n    () => userStore.timezone,\n    async (newTimezone, oldTimezone) => {\n      // Ensure the timezone is set before calling preloadWeeklyContent\n      if (newTimezone) {\n        await scheduleStore.preloadWeeklyContent()\n        console.log('preloaded weekly content from todayView ...')\n      }\n    },\n    {immediate: true}, // This option ensures the watcher is triggered immediately on mount\n)\n\n// Optionally, keep the onMounted if there are other initialization tasks\n// onMounted(async () => {\n//   // Check if timezone is already available on mount and preload content if it hasn't been done by the watcher\n//   if (userStore.timezone) {\n//     await scheduleStore.preloadWeeklyContent()\n//   }\n// })\n</script>\n\n<style scoped>\n/* Styles specific to today view */\n</style>","import api from \"!../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../../../node_modules/css-loader/dist/cjs.js??clonedRuleSet-10.use[1]!../../../../../node_modules/vue-loader/dist/stylePostLoader.js!../../../../../node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-10.use[2]!../../../../../node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./TodayView.vue?vue&type=style&index=0&id=1da7b3fc&scoped=true&lang=css\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","import script from \"./TodayView.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./TodayView.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./TodayView.vue?vue&type=style&index=0&id=1da7b3fc&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-1da7b3fc\"]])\n\nexport default __exports__","import script from \"./Footer.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Footer.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","import script from \"./Messages.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Messages.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n  <div class=\"mx-4 my-4\">\n    <div class=\"alert alert-info mt-4\"\n         v-if=\"props.flash.message\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" class=\"stroke-current shrink-0 w-6 h-6\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n              d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"></path>\n      </svg>\n      <span>{{ props.flash.message }}</span>\n      <button class=\"text-xs ml-12\" @click=\"clearFlashMessage\"> Close</button>\n    </div>\n    <div class=\"alert alert-success mt-4 mx-3\"\n         v-if=\"props.flash.success\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"stroke-current shrink-0 h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n              d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"/>\n      </svg>\n      <span>{{ props.flash.success }}</span>\n      <button class=\"text-xs ml-12\" @click=\"clearFlashMessage\"> Close</button>\n    </div>\n    <div class=\"alert alert-warning mt-4 mx-3\"\n         v-if=\"props.flash.warning\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"stroke-current shrink-0 h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n              d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z\"/>\n      </svg>\n      <span>{{ props.flash.warning }}</span>\n      <button class=\"text-xs ml-12\" @click=\"clearFlashMessage\"> Close</button>\n    </div>\n    <div class=\"alert alert-error mt-4 mx-3\"\n         v-if=\"props.flash.error\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"stroke-current shrink-0 h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n              d=\"M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z\"/>\n      </svg>\n      <span>{{ props.flash.error }}</span>\n      <button class=\"text-xs ml-12\" @click=\"clearFlashMessage\"> Close</button>\n    </div>\n  </div>\n\n</template>\n\n<script setup>\nimport { Inertia } from \"@inertiajs/inertia\"\nimport { computed } from \"vue\"\nimport { useAppSettingStore } from \"@/Stores/AppSettingStore\"\n\nconst appSettingStore = useAppSettingStore()\n\nappSettingStore.showFlashMessage = true\n\nlet props = defineProps({\n  flash: Object,\n\n})\n\nconst messageType = computed(() => ({\n  'text-green-700 bg-green-100 dark:bg-green-200 dark:text-green-800': props.flash.success,\n  'text-blue-700 bg-blue-100 dark:bg-blue-200 dark:text-blue-800': props.flash.message,\n  'text-orange-700 bg-orange-100 dark:bg-orange-200 dark:text-orange-800': props.flash.warning,\n  'text-red-700 bg-red-100 dark:bg-red-200 dark:text-red-800': props.flash.error,\n}))\n\nconst clearFlashMessage = async () => {\n  await Inertia.post(route('flash.clear'));\n  Inertia.reload();\n};\n</script>\n","import script from \"./PopUpModal.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./PopUpModal.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n  <div>\n    <dialog :id=\"id\" class=\"modal\">\n      <div class=\"modal-box text-center my-auto border-2 border-secondary\" data-theme=\"dark\">\n        <h2 class=\"font-bold text-3xl text-secondary\">\n          <slot name=\"header\"></slot>\n        </h2>\n        <p class=\"py-4 text-xl\">\n          <slot name=\"main\"></slot>\n        </p>\n        <div class=\"modal-action justify-center w-full\">\n          <form method=\"dialog\">\n            <!-- if there is a button in form, it will close the modal -->\n            <button @click=\"notificationStore.showPopUpModal = false\" class=\"btn btn-secondary\">Okay</button>\n          </form>\n        </div>\n      </div>\n    </dialog>\n  </div>\n</template>\n<script setup>\nimport { useNotificationStore } from \"@/Stores/NotificationStore\"\n\nconst notificationStore = useNotificationStore()\n\ndefineProps({\n  id: String,\n})\n</script>\n","<template>\n  <div class=\"hidden lg:block fixed top-0 w-full nav-mask\">\n    <nav class=\"sticky top-0 bg-black border-b border-gray-100 z-50\">\n      <!-- Primary Navigation Menu -->\n      <div class=\"max-w-7xl mx-auto px-4 lg:px-6 xl:px-8 z-50\">\n        <div class=\"flex justify-between h-16\">\n          <div class=\"flex\">\n            <!-- Logo -->\n            <div class=\"shrink-0 flex items-center\">\n              <Link :href=\"`/`\">\n                <JetApplicationMark class=\"block h-9 w-auto\"/>\n              </Link>\n            </div>\n            <div v-if=\"!$page.props.user\" class=\"w-full flex flex-row justify-between\">\n              <div class=\"space-x-4 py-6 pt-6 ml-8 text-gray-200\">\n                <h3 class=\"inline-flex items-center relative\">\n                  <JetNavLink\n                  ><Link :href=\"`/`\">Watch Now</Link></JetNavLink>\n                </h3>\n<!--                <h3 class=\"inline-flex items-center relative\">-->\n<!--                  <JetNavLink-->\n<!--                  ><Link :href=\"`/teams`\">Browse</Link></JetNavLink>-->\n<!--                </h3>-->\n\n                <h3 class=\"inline-flex items-center relative\">\n                  <JetNavLink\n                      :href=\"route('schedule')\"\n                      :active=\"route().current('schedule')\">\n                    Schedule</JetNavLink>\n                </h3>\n\n                <h3 class=\"hidden inline-flex items-center relative\">\n                  <JetNavLink\n                      :href=\"route('teams.index')\"\n                      :active=\"route().current('teams.index')\">\n                    Browse</JetNavLink>\n                </h3>\n\n<!--                <h3 class=\"inline-flex items-center relative\">-->\n<!--                  <JetNavLink-->\n<!--                  ><Link :href=\"`/schedule`\">-->\n<!--                    Schedule</Link></JetNavLink>-->\n<!--                </h3>-->\n                <h3 class=\"inline-flex items-center relative\">\n                  <JetNavLink\n                      :href=\"route('news.index')\"\n                      :active=\"route().current('news.index')\">\n                    News Stories</JetNavLink>\n                </h3>\n                <h3 class=\"inline-flex items-center relative\">\n                  <JetNavLink\n                      :href=\"route('news.reporters.index')\"\n                      :active=\"route().current('news.reporters.index')\">\n                    Reporters</JetNavLink>\n                </h3>\n                <h3 class=\"inline-flex items-center relative\">\n                  <JetNavLink\n                      :href=\"route('public.newsletterSignup')\"\n                      :active=\"route().current('public.newsletterSignup')\">\n                    Get Exclusive Access!</JetNavLink>\n                </h3>\n                <h3 class=\"inline-flex items-center relative\">\n                  <JetNavLink\n                      :href=\"route('public.contact')\"\n                      :active=\"route().current('public.contact')\">\n                    Contact Us</JetNavLink>\n                </h3>\n              </div>\n            </div>\n          </div>\n          <div v-if=\"!$page.props.user\" class=\"space-x-4 py-6 pt-6 mx-8 text-gray-200\">\n            <h3 class=\"inline-flex items-center relative\">\n              <JetNavLink\n                  :href=\"`/login`\"\n                  :active=\"appSettingStore.currentPage === 'login'\">\n                Login</JetNavLink>\n            </h3>\n            <h3 class=\"inline-flex items-center relative\">\n              <JetNavLink\n                  :href=\"`/register`\"\n                  :active=\"appSettingStore.currentPage === 'register'\">\n                Register</JetNavLink>\n            </h3>\n\n          </div>\n          <div v-if=\"$page.props.user\" class=\"space-x-4 py-6 pt-6 mx-8 text-gray-200\">\n            <h3 v-if=\"$page.props.user.isCreator\" class=\"inline-flex items-center relative\">\n              <JetNavLink\n                  :href=\"`/dashboard`\">\n                Dashboard</JetNavLink>\n            </h3>\n            <h3 class=\"inline-flex items-center relative\">\n              <JetNavLink\n                  :href=\"`/stream`\">\n                Back to Stream</JetNavLink>\n            </h3>\n\n          </div>\n        </div>\n\n      </div>\n    </nav>\n  </div>\n</template>\n\n<script setup>\nimport { Inertia } from \"@inertiajs/inertia\"\nimport { onMounted } from \"vue\"\nimport { Link, usePage } from '@inertiajs/inertia-vue3'\nimport JetNavLink from '@/Jetstream/NavLink'\nimport JetApplicationMark from '@/Jetstream/ApplicationMark'\nimport JetDropdownLink from '@/Jetstream/DropdownLink'\nimport JetDropdown from '@/Jetstream/Dropdown'\nimport { useVideoPlayerStore } from \"@/Stores/VideoPlayerStore\"\nimport { useAppSettingStore } from \"@/Stores/AppSettingStore\"\n\nimport { useChatStore } from \"@/Stores/ChatStore\"\nimport { useStreamStore } from \"@/Stores/StreamStore\"\nimport { useUserStore } from \"@/Stores/UserStore\"\nimport { useWelcomeStore } from \"@/Stores/WelcomeStore\"\n\nconst appSettingStore = useAppSettingStore()\nconst chat = useChatStore()\nconst videoPlayerStore = useVideoPlayerStore()\nconst streamStore = useStreamStore()\nconst userStore = useUserStore()\nconst welcomeStore = useWelcomeStore()\n\nconst { props } = usePage();\n\n// streamStore.isLive(true)\n\n// let props = defineProps({\n//   user: Object,\n// })\n\nappSettingStore.pageReload = false\n\n// const returnToWelcomePage = () => {\n//   appSettingStore.pageReload = true\n//   Inertia.visit('/')\n// }\n\n\n// let isStreamPage = false\n//\n// function setPage() {\n//     if (appSettingStore.currentPage = \"stream\") {\n//         videoPlayerStore.currentPageIsStream = true;\n//     } else\n//         videoPlayerStore.currentPageIsStream = false;\n// }\n\n// setPage()\n\n// onMounted(() => {\n//   getUser()\n// })\n//\n// function getUser() {\n//   if (props.user) {\n//     userStore.id = props.user.id\n//     userStore.roleId = props.user.role_id\n//     userStore.userIsAdmin = props.user.isAdmin\n//   }\n//   userStore.isSubscriber()\n//   userStore.isCreator()\n//   userStore.isVip()\n//   userStore.isAdmin()\n// }\n\n</script>\n<style>\n\n.isFullPageCss {\n  background: rgba(0, 0, 0, 0.8);\n  /*background: yellow;*/\n}\n\n</style>\n","import api from \"!../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../../../node_modules/css-loader/dist/cjs.js??clonedRuleSet-10.use[1]!../../../../../node_modules/vue-loader/dist/stylePostLoader.js!../../../../../node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-10.use[2]!../../../../../node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./PublicNavigationMenu.vue?vue&type=style&index=0&id=7e18bbf4&lang=css\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","import script from \"./PublicNavigationMenu.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./PublicNavigationMenu.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./PublicNavigationMenu.vue?vue&type=style&index=0&id=7e18bbf4&lang=css\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n  <div class=\"lg:hidden fixed top-0 w-full nav-mask border-b-2 border-gray-100\">\n    <div class=\"flex justify-between h-16 w-full bg-black nav-mask\">\n      <div class=\"flex\">\n        <!-- Logo -->\n        <div class=\"shrink-0 flex items-center\">\n          <Link @click=\"goToWatchPage\">\n            <JetApplicationMark class=\"ml-5 block h-9 w-auto\"/>\n          </Link>\n        </div>\n        <!-- Hamburger -->\n        <div class=\"absolute top-3 right-10 hamburgerMask\">\n          <div class=\"-mr-2 flex items-center lg:hidden z-50\">\n\n            <button\n                class=\"inline-flex items-center justify-center p-2 rounded-md text-gray-100 transition\"\n                :class=\"{ 'hover:text-white hover:bg-blue-600': appSettingStore.showNavDropdown}\"\n\n                @click=\"appSettingStore.toggleNavDropdown()\">\n              <!--                @click=\"chatStore.showNavDropdown = ! chatStore.showNavDropdown\">-->\n\n              <span class=\"pr-2\">MENU</span>\n              <svg\n                  class=\"h-6 w-6\"\n                  stroke=\"currentColor\"\n                  fill=\"none\"\n                  viewBox=\"0 0 24 24\"\n              >\n                <path\n                    :class=\"{'hidden': appSettingStore.showNavDropdown, 'inline-flex': ! appSettingStore.showNavDropdown }\"\n                    stroke-linecap=\"round\"\n                    stroke-linejoin=\"round\"\n                    stroke-width=\"2\"\n                    d=\"M4 6h16M4 12h16M4 18h16\"\n                />\n                <path\n                    :class=\"{'hidden': ! appSettingStore.showNavDropdown, 'inline-flex': appSettingStore.showNavDropdown }\"\n                    stroke-linecap=\"round\"\n                    stroke-linejoin=\"round\"\n                    stroke-width=\"2\"\n                    d=\"M6 18L18 6M6 6l12 12\"\n                />\n              </svg>\n            </button>\n          </div>\n        </div>\n\n\n\n      </div>\n    </div>\n    <!-- Responsive Navigation Menu -->\n    <!--    <div :class=\"{'block': showingNavigationDropdown, 'hidden': ! showingNavigationDropdown}\"-->\n    <div :class=\"{'block': appSettingStore.showNavDropdown, 'hidden': ! appSettingStore.showNavDropdown}\"\n         class=\"lg:hidden bg-gray-800 text-white fixed w-full h-full\">\n      <!-- Responsive Settings Options -->\n      <!--   Fix Menu height e.g., h-[calc(h-100%-16rem)]      -->\n      <div ref=\"scrollableDiv\" class=\"pb-20 mb- h-[calc(100vh)] overflow-y-auto hide-scrollbar\" @scroll=\"handleScroll\">\n\n        <div class=\"space-y-1 z-50 mb-6 pb-10 bg-gray-900 border-t border-1 border-white\">\n\n          <JetResponsiveNavLink\n              @click=\"goToWatchPage\"\n              :href=\"route('home')\"\n              :active=\"route().current('home')\">\n            Watch Now\n          </JetResponsiveNavLink>\n\n          <JetResponsiveNavLink\n              @click=\"appSettingStore.closeNavDropdown()\"\n              :href=\"route('schedule')\"\n              :active=\"route().current('schedule')\">\n            Schedule\n          </JetResponsiveNavLink>\n\n          <JetResponsiveNavLink hidden\n              @click=\"appSettingStore.closeNavDropdown()\"\n              :href=\"route('teams.index')\"\n              :active=\"route().current('teams.index')\">\n            Browse\n          </JetResponsiveNavLink>\n\n          <JetResponsiveNavLink\n              @click=\"appSettingStore.closeNavDropdown()\"\n              :href=\"route('news.index')\"\n              :active=\"route().current('news.index')\">\n            News Stories\n          </JetResponsiveNavLink>\n\n          <JetResponsiveNavLink\n              @click=\"appSettingStore.closeNavDropdown()\"\n              :href=\"route('news.reporters.index')\"\n              :active=\"route().current('news.reporters.index')\">\n            Reporters\n          </JetResponsiveNavLink>\n\n          <JetResponsiveNavLink\n              @click=\"appSettingStore.closeNavDropdown()\"\n              :href=\"route('public.newsletterSignup')\"\n              :active=\"route().current('public.newsletterSignup')\">\n            Get Exclusive Access!\n          </JetResponsiveNavLink>\n\n          <JetResponsiveNavLink\n              @click=\"appSettingStore.closeNavDropdown()\"\n              :href=\"route('public.contact')\"\n              :active=\"route().current('public.contact')\">\n            Contact Us\n          </JetResponsiveNavLink>\n\n          <JetResponsiveNavLink\n              @click=\"appSettingStore.closeNavDropdown()\"\n              :href=\"`/register`\">\n            Register\n          </JetResponsiveNavLink>\n\n          <JetResponsiveNavLink\n              @click=\"appSettingStore.closeNavDropdown()\"\n              :href=\"`/login`\">\n            Login\n          </JetResponsiveNavLink>\n\n        </div>\n\n\n<!--        <div class=\"fixed bottom-0 pb-8 flex flex-col w-full space-y-1 text-gray-600 text-sm\">-->\n<!--          <div class=\"fixed bottom-0 w-full text-gray-600 text-sm pb-8\">-->\n            <div class=\"flex flex-col w-full space-y-1 text-gray-600 text-sm pb-20\">\n          <AppVersion />\n          <!--                    <div class=\"flex pt-4 justify-center\">Please send us comments and questions <a href=\"https://help.not.tv/\" target=\"_blank\" class=\"text-blue-600 hover:text-blue-40\">&nbsp; here</a>.</div>-->\n        </div>\n\n      </div>\n      <div class=\"fixed w-full bottom-4 text-center fade-out\"\n           :class=\"{ 'visible': !hasScrolled && isContentOverflowing }\">Scroll down.\n      </div>\n    </div>\n  </div>\n\n</template>\n\n<script setup>\nimport { Inertia } from '@inertiajs/inertia'\nimport { nextTick, onMounted, onUnmounted, ref, watch } from 'vue'\nimport JetApplicationMark from \"@/Jetstream/ApplicationMark\"\nimport JetResponsiveNavLink from '@/Jetstream/ResponsiveNavLink'\nimport { useAppSettingStore } from '@/Stores/AppSettingStore'\nimport { Link } from '@inertiajs/inertia-vue3'\nimport AppVersion from '@/Components/Global/AppVersion/AppVersion.vue'\n\nconst appSettingStore = useAppSettingStore()\nconst showingNavigationDropdown = ref(false)\nconst hasScrolled = ref(false)\nconst isContentOverflowing = ref(false)\nconst scrollableDiv = ref(null)\n\nconst checkOverflow = () => {\n  if (scrollableDiv.value) {\n    const isOverflowing = scrollableDiv.value.scrollHeight > scrollableDiv.value.clientHeight;\n    isContentOverflowing.value = isOverflowing;\n  }\n};\n\nconst handleScroll = () => {\n  // Check if the page has been scrolled down\n  // const scrollPosition = scrollableDiv.value.scrollTop;\n  // hasScrolled.value = scrollPosition > 0;\n  hasScrolled.value = scrollableDiv.value.scrollTop > 0;\n};\n\nconst linkRef = ref(null);\n\nfunction goToWatchPage() {\n  appSettingStore.closeNavDropdown()\n  window.location.href = '/';\n}\n\nonMounted(() => {\n  nextTick(() => {\n    checkOverflow();\n  });\n\n  window.addEventListener('resize', checkOverflow); // Recheck on window resize\n\n  if (scrollableDiv.value) {\n    scrollableDiv.value.addEventListener('scroll', handleScroll);\n  }\n});\n\n// Watch for changes in the dropdown visibility\nwatch(() => appSettingStore.showNavDropdown, (newValue, oldValue) => {\n  if (newValue !== oldValue) {\n    nextTick(() => {\n      checkOverflow();\n    });\n  }\n});\n\n// Cleanup\nonUnmounted(() => {\n  window.removeEventListener('resize', checkOverflow);\n\n  if (scrollableDiv.value) {\n    scrollableDiv.value.removeEventListener('scroll', handleScroll);\n  }\n});\n\n\n</script>\n\n<style>\n.hamburgerMask {\n  z-index: 100\n}\n.fade-out {\n  transition: opacity 0.5s ease-in-out;\n  opacity: 0;\n}\n\n.fade-out.visible {\n  opacity: 1;\n}\n</style>\n","import api from \"!../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../../../node_modules/css-loader/dist/cjs.js??clonedRuleSet-10.use[1]!../../../../../node_modules/vue-loader/dist/stylePostLoader.js!../../../../../node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-10.use[2]!../../../../../node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./PublicResponsiveNavigationMenu.vue?vue&type=style&index=0&id=5c1d034c&lang=css\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","import script from \"./PublicResponsiveNavigationMenu.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./PublicResponsiveNavigationMenu.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./PublicResponsiveNavigationMenu.vue?vue&type=style&index=0&id=5c1d034c&lang=css\"\n\nconst __exports__ = script;\n\nexport default __exports__","import api from \"!../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../../../node_modules/css-loader/dist/cjs.js??clonedRuleSet-10.use[1]!../../../../../node_modules/vue-loader/dist/stylePostLoader.js!../../../../../node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-10.use[2]!../../../../../node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./ScheduleGrid.vue?vue&type=style&index=0&id=53f3bf92&scoped=true&lang=css\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","<template>\n  <div class=\"tracking-wide\">\n    <!-- Day of the week in large, semi-bold letters -->\n    <p class=\"tracking-wide text-4xl font-semibold mb-2\">{{ currentDay }}</p>\n\n    <!-- Current time display -->\n    <p class=\"tracking-wide text-xl text-gray-300\">Current Time:  <span class=\"text-white font-medium\">{{ scheduleStore.currentTime }} {{ userStore.timezoneAbbreviation }}</span></p>\n\n    <!-- Input for testing current time -->\n    <p>CURRENT TIME (for testing): <input type=\"time\" v-model=\"formattedTime\" @input=\"stopAutoUpdateTime\"\n                                          class=\"text-black\"></p>\n\n  </div>\n</template>\n\n<script setup>\nimport { computed, onMounted, onUnmounted, ref, watch } from 'vue'\nimport { useUserStore } from '@/Stores/UserStore'\nimport { useScheduleStore } from '@/Stores/ScheduleStore'\nimport dayjs from 'dayjs'\nimport utc from 'dayjs/plugin/utc'  // for UTC support\nimport timezone from 'dayjs/plugin/timezone'  // for timezone support\n\nconst userStore = useUserStore()\nconst scheduleStore = useScheduleStore()\n\ndayjs.extend(utc)\ndayjs.extend(timezone)\n\n// const baseTime = ref(new Date());\n// const currentTime = ref(baseTime.value.toISOString().substring(11, 16));\nlet intervalId = null\nlet timeoutId = null  // Variable to store the timeout reference\nlet initialUpdateDone = false  // Flag to track if the first update has been done\n\n// Computed property to get the current day of the week\nconst currentDay = computed(() => {\n  return dayjs().format('dddd'); // 'dddd' for full day name according to dayjs formatting\n});\n\n// const updateShows = () => {\n//   const [hour, minute] = currentTime.value.split(':');\n//   baseTime.value.setHours(parseInt(hour), parseInt(minute), 0, 0);\n//   // You might want to force a re-render or re-compute of visible shows here\n// };\n\n// Function to update current time\nfunction updateCurrentTime() {\n  const timezone = userStore.timezone || 'UTC'  // Default to 'UTC' if no timezone is set\n\n  // Use dayjs to handle the timezone conversion\n  const currentTime = dayjs().tz(timezone).format('YYYY-MM-DD HH:mm:ss')\n\n  scheduleStore.setBaseTime(currentTime)\n  console.log('Time updated:', currentTime)\n}\n\n// Function to start auto-update interval\nfunction startAutoUpdateTime(updateImmediately = true) {\n  clearInterval(intervalId)  // Clear any existing interval first\n  if (updateImmediately && !initialUpdateDone) {\n    updateCurrentTime()  // Optionally update time immediately\n    initialUpdateDone = true  // Set the flag after the first update\n  }\n  intervalId = setInterval(() => {\n    updateCurrentTime()  // Continue updating every minute\n  }, 60000)\n  console.log('Interval started, ID:', intervalId)\n}\n\n// Function to clear the interval\nfunction stopAutoUpdateTime() {\n  clearInterval(intervalId)\n  console.log('Interval stopped, ID:', intervalId)\n  intervalId = null  // Reset the interval ID\n  clearTimeout(timeoutId)  // Use clearTimeout to stop the timeout\n  timeoutId = null         // Reset the variable after cancelling\n  console.log('Auto-update canceled.')\n}\n\nonMounted(() => {\n  // Use dayjs to get the current time\n  const now = dayjs();\n\n  // Calculate milliseconds until the next minute to align updates\n  const msUntilNextMinute = (60 - now.second()) * 1000 - now.millisecond();\n\n  // Delay the start of regular updates to align with the start of the next minute\n  timeoutId = setTimeout(() => {\n    startAutoUpdateTime();  // Start regular updates at the next minute\n  }, msUntilNextMinute);\n});\n\nonUnmounted(() => {\n  stopAutoUpdateTime()\n})\n\nconst formattedTime = computed({\n  get() {\n    // Use dayjs to format the time from the baseTime in scheduleStore\n    return dayjs(scheduleStore.baseTime).format('HH:mm');\n  },\n  set(value) {\n    // Parse the hours and minutes from the input value\n    const [hours, minutes] = value.split(':').map(Number);\n    // Use dayjs to update the time while keeping the date part unchanged\n    const newTime = dayjs(scheduleStore.baseTime).hour(hours).minute(minutes).toDate();\n    // Update the baseTime in the scheduleStore\n    scheduleStore.setBaseTime(newTime);\n  },\n})\n\n\n</script>","import script from \"./CurrentTime.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./CurrentTime.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n\n  <!--  We need the CurrenTime component to keep our ScheduleStore currentTime up to date\n        it has a SetInterval in it. -->\n  <CurrentTime/>\n\n  <div class=\"mb-2 tracking-wide\">\n    <span class=\"text-sm uppercase text-purple-500\">All times are listed in your timezone.</span>\n  </div>\n\n  <div class=\"w-full\">\n    <div class=\"schedule-grid\" :style=\"{ 'grid-template-columns': gridColumns }\">\n      <div class=\"header-row\" :style=\"{ 'grid-template-columns': gridColumns }\">\n        <!-- Time slots header -->\n        <div class=\"time-cell bg-gray-900 px-3 py-2 text-center font-bold\"\n             v-for=\"interval in nextFourHoursWithHalfHourIntervals\" :key=\"interval.dateTime\">\n          {{ interval.formatted }}\n        </div>\n      </div>\n      <div v-if=\"isLoading && nextFourHoursOfContent.length === 0\"\n           class=\"w-full flex justify-center text-center items-center\">\n        <span class=\"loading loading-ball loading-xl text-info\"></span>\n      </div>\n    </div>\n    <div class=\"schedule-grid\" :style=\"{ 'grid-template-columns': gridColumns }\">\n      <!-- Render time banners -->\n      <div v-for=\"banner in scheduleStore.preparedTimeBanners\" :key=\"banner.id\"\n           :style=\"gridItemStyle(banner)\" class=\"time-banner align-center\">\n        {{ banner.name }}\n      </div>\n    </div>\n    <div class=\"schedule-grid\" :style=\"{ 'grid-template-columns': gridColumns }\">\n\n\n      <!-- Loop through combinedShows directly -->\n      <div v-for=\"item in scheduleStore.nextFourHoursOfContent\"\n           :key=\"item.id\"\n           :style=\"gridItemStyle(item)\"\n           class=\"show-cell\"\n           :class=\"{'hover:cursor-pointer' : !item.placeholder}\"\n           @click=\"handleShowClick(item)\">\n        <div\n            class=\"item-content px-4 flex flex-col justify-between items-center w-full h-full overflow-hidden\"\n            :class=\"{\n        'bg-gradient-to-r from-gray-900 to-gray-700': !item.placeholder,\n        'bg-gradient-to-r from-tan-800 to-tan-600': item.placeholder,  // Assume tan-800 and tan-600 are defined in your tailwind config\n        'gradient-on-hover': !item.placeholder\n    }\">\n          <div class=\"show-info flex-grow flex flex-col items-center justify-center\">\n            <h3 class=\"show-title my-4 w-full text-center text-lg font-semibold break-words\"\n                :class=\"{'gradient-on-hover': !item.placeholder}\">\n              {{ item.content.name || 'No Show Name' }}</h3>\n            <!--            <p>{{ item.content.id }}</p>-->\n            <!--            <p>Row: {{ item.gridRow }}</p>-->\n            <SingleImage v-if=\"item.content.image\"\n                         :image=\"item.content.image\"\n                         :alt=\"item.content.name\"\n                         :class=\"`w-full h-auto max-h-1/2 object-cover transition-opacity duration-300 hover:opacity-80`\"/>\n            <div v-if=\"!item.placeholder\"\n                 class=\"show-time w-full text-center text-sm p-2 mt-2\"\n                 :class=\"{'gradient-on-hover': !item.placeholder}\">\n              <p>{{ formatTime(item.startTime, true) }}</p>\n              <!--              <p>{{ formatTime(item.startTime) }} - {{ formatTime(item.endTime, true) }}</p>-->\n              <p>{{ formatDuration(item.durationMinutes) }}</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n\n    </div>\n\n    <!--    <div v-if=\"nextScheduledShow\" class=\"next-show-highlight p-5 border border-gray-300 bg-gradient-to-r from-gray-900 to-gray-700 text-center\">-->\n    <!--      <div class=\"bg-green-500 text-white py-2\">-->\n    <!--        <h2>Playing Soon</h2>-->\n    <!--      </div>-->\n    <!--      <div class=\"show-details mt-4 mx-auto max-w-4xl\">-->\n    <!--        <h3 @click=\"handleShowClick(nextScheduledShow)\" class=\"text-3xl mb-1 hover:text-blue-300 hover:cursor-pointer\">{{ nextScheduledShow.content.name }}</h3>-->\n    <!--        <p class=\"text-lg\">{{ formatLongDate(nextScheduledShow.startTime) }}</p> &lt;!&ndash; Formatted start date &ndash;&gt;-->\n    <!--        <p class=\"text-lg\">{{ formatTime(nextScheduledShow.startTime, true) }} - {{ formatTime(nextScheduledShow.endTime, true) }}</p>-->\n    <!--        <div class=\"w-full flex justify-center items-center mt-4 hover:cursor-pointer\"-->\n    <!--             @click=\"handleShowClick(nextScheduledShow)\">-->\n    <!--          <SingleImage v-if=\"nextScheduledShow.content.image\"-->\n    <!--               :image=\"nextScheduledShow.content.image\"-->\n    <!--               :alt=\"nextScheduledShow.content.name\"-->\n    <!--               :class=\"`w-3/4 md:w-1/2 lg:w-1/3 h-auto object-cover mx-auto transition-opacity duration-300 hover:opacity-80`\"/>-->\n    <!--        </div>-->\n    <!--        <p class=\"text-lg\">{{ formatDuration(nextScheduledShow.durationMinutes) }}</p>-->\n    <!--      </div>-->\n    <!--    </div>-->\n\n    <div class=\"schedule-grid text-center\" :style=\"{ 'grid-template-columns': gridColumns }\">\n\n      <div v-if=\"nowPlayingShow\" :style=\"statusGridItemStyle(nowPlayingShow)\"\n           class=\"now-playing text-black font-semibold\">\n        <span>NOW PLAYING</span>\n      </div>\n\n      <div v-if=\"comingUpNextShow\" :style=\"statusGridItemStyle(comingUpNextShow)\"\n           class=\"coming-up-next text-black font-semibold\">\n        <span>COMING UP NEXT</span>\n\n      </div>\n\n    </div>\n\n    <div class=\"infinite-scroll-container\">\n      <div v-for=\"(show, index) in displayedShows\" :key=\"show.id\"\n           class=\"next-show-highlight p-5 border border-gray-300 bg-gradient-to-r from-gray-900 to-gray-700 text-center\"\n           :class=\"{ 'last-item': index === displayedShows.length - 1 }\">\n        <div class=\"bg-green-500 text-white py-2\">\n          <h2>Playing Soon</h2>\n        </div>\n        <div class=\"show-details mt-4 mx-auto max-w-4xl\">\n          <h3 @click=\"handleShowClick(show)\" class=\"text-3xl mb-1 hover:text-blue-300 hover:cursor-pointer\">\n            {{ show.content.name }}</h3>\n          <p class=\"text-lg\">{{ formatLongDate(show.startTime) }}</p>\n          <p class=\"text-lg\">{{ formatTime(show.startTime, true) }} - {{ formatTime(show.endTime, true) }}</p>\n          <div class=\"w-full flex justify-center items-center mt-4 hover:cursor-pointer\" @click=\"handleShowClick(show)\">\n            <SingleImage v-if=\"show.content.image\"\n                         :image=\"show.content.image\"\n                         :alt=\"show.content.name\"\n                         class=\"w-3/4 md:w-1/2 lg:w-1/3 h-auto object-cover mx-auto transition-opacity duration-300 hover:opacity-80\"/>\n          </div>\n          <p class=\"text-lg\">{{ formatDuration(show.durationMinutes) }}</p>\n        </div>\n      </div>\n      <!-- Loading Indicator -->\n      <div v-if=\"isLoading\" class=\"w-full text-center mt-4\">\n      <span class=\"loading loading-dots loading-lg text-info\">\n      </span>\n      </div>\n      <div v-element-visibility=\"onElementVisibility\"></div> <!-- This element triggers the visibility event -->\n    </div>\n\n  </div>\n</template>\n<script setup>\nimport { computed, onBeforeMount, onMounted, onUnmounted, ref, watch, watchEffect } from 'vue'\nimport { Inertia } from '@inertiajs/inertia'\nimport { vElementVisibility } from '@vueuse/components'\nimport dayjs from 'dayjs'\nimport advancedFormat from 'dayjs/plugin/advancedFormat' // for using 'a' for AM/PM format\nimport { useScheduleStore } from '@/Stores/ScheduleStore'\nimport { useAppSettingStore } from '@/Stores/AppSettingStore'\nimport { useUserStore } from '@/Stores/UserStore'\nimport ScheduleGrid from '@/Components/Pages/Schedule/ScheduleGrid.vue'\nimport SingleImage from '@/Components/Global/Multimedia/SingleImage.vue'\nimport CurrentTime from '@/Components/Global/Schedule/CurrentTime.vue'\nimport { throttle } from '@/Utilities/Throttle'\n\nconst scheduleStore = useScheduleStore()\nconst appSettingStore = useAppSettingStore()\nconst userStore = useUserStore()\n\ndayjs.extend(advancedFormat)\n\nlet initialLoadHandled = false\n\n// // Computed property for the currently playing show\n// const updateNowPlaying = computed(() => {\n//   for (const show of scheduleStore.nextFourHoursOfContent) {\n//     if (isNowPlaying(show.startTime, show.durationMinutes) && !show.placeholder && show.gridStart === 1) {\n//       return show;  // ensure this has gridStart, gridSpan, gridRow\n//     }\n//   }\n//   return null;\n// });\n//\n//\n//\n// // Computed property for the show that is coming up next\n// const updateComingUpNext = computed(() => {\n//   let foundPlaying = false;\n//   for (const show of scheduleStore.nextFourHoursOfContent) {\n//     if (!show.placeholder && show.gridStart > 1) {\n//       if (foundPlaying) {\n//         return show;  // ensure this has gridStart, gridSpan, gridRow\n//       }\n//     }\n//     if (isNowPlaying(show.startTime, show.durationMinutes)) {\n//       foundPlaying = true;  // Mark as found\n//     }\n//   }\n//   return null;\n// });\n\n\nconst isVisible = ref(false)\nconst displayedShowsCount = ref(6)\n// Computed property to ensure reactivity\nconst isLoading = computed(() => scheduleStore.isLoading)\nconst nextFourHoursWithHalfHourIntervals = computed(() => scheduleStore.nextFourHoursWithHalfHourIntervals)\nconst nextFourHoursOfContent = computed(() => scheduleStore.nextFourHoursOfContent)\n\n// console.log('isLoading on mount:', isLoading.value);\n// scheduleStore.preloadWeeklyContent();\n\n// Use async/await inside onMounted\nonBeforeMount(async () => {\n\n});\n\n// Watch the computed property to see changes in real-time\nwatch(isLoading, (newValue) => {\n  console.log('isLoading changed:', newValue);\n});\n\n// Function to handle element visibility\nfunction onElementVisibility(state) {\n  isVisible.value = state;\n}\n\n// Function to load more shows\n// Function to load more shows\nconst loadMoreShows = async () => {\n  if (isVisible.value && !isLoading.value) {\n    isLoading.value = true;\n    console.log(\"Loading more shows\");\n\n    // Fetch more schedules\n    await scheduleStore.fetchMoreSchedules();\n\n    displayedShowsCount.value += 6;\n    isLoading.value = false;\n  }\n};\n\n// Throttle the loadMoreShows function\nconst throttledLoadMoreShows = throttle(loadMoreShows, 200);\n\n\n// Watcher for isVisible.value\nwatch(isVisible, (newValue) => {\n  if (newValue) {\n    throttledLoadMoreShows();\n  }\n});\n\nconst allPlaceholders = computed(() => {\n  return scheduleStore.nextFourHoursOfContent.every(item => item.placeholder)\n})\n\n\n\nconst upcomingShows = computed(() => {\n  const now = dayjs()\n  return scheduleStore.schedules.filter(show =>\n      dayjs(show.startTime).isAfter(now) && !show.placeholder,\n  ).sort((a, b) => dayjs(a.startTime).diff(dayjs(b.startTime)))\n})\n\nconst displayedShows = computed(() => upcomingShows.value.slice(0, displayedShowsCount.value))\n\n// function handleScroll() {\n//   const { scrollTop, scrollHeight, clientHeight } = document.documentElement;\n//   if (scrollTop + clientHeight >= scrollHeight - 5) { // Check if near bottom\n//     displayedShowsCount.value += 6; // Load more shows\n//   }\n// }\n\n// Phasing out the \"nextScheduledShow\" in favour of the upcomingShows.\n// const nextScheduledShow = computed(() => {\n//   const now = dayjs()\n//   return scheduleStore.weeklyContent.find(show =>\n//       dayjs(show.startTime).isAfter(now) && !show.placeholder,\n//   )\n// })\n\nfunction isNowPlaying(startTime, duration) {\n  const now = dayjs()\n  const start = dayjs(startTime)\n  const end = start.add(duration, 'minutes')\n  return now.isAfter(start) && now.isBefore(end)\n}\n\n\nconst nowPlayingShow = computed(() => {\n  return scheduleStore.nextFourHoursOfContent.find(show => show.nowPlaying)\n})\n\nconst comingUpNextShow = computed(() => {\n  return scheduleStore.nextFourHoursOfContent.find(  show => show.comingUpNext)\n})\n\n// watch(() => scheduleStore.timeSlots, (newTimeSlots, oldTimeSlots) => {\n//   if (newTimeSlots && newTimeSlots.length > 0 && !initialLoadHandled) {\n//     // console.log('Time slots are ready, updating next four hours.')\n//     scheduleStore.updateNextFourHours()\n//     initialLoadHandled = true\n//   }\n// }, {immediate: true})\n\nwatch(\n    () => scheduleStore.baseTime,\n    (newTime, oldTime) => {\n      if (newTime !== oldTime) { // This check may be redundant but adds clarity\n        // console.log(`Base time updated from ${oldTime} to ${newTime}`)\n        scheduleStore.updateNextFourHours()\n      }\n    },\n    {immediate: true},\n)\n\n// Watcher for schedules to ensure initial data load\nwatch(\n    () => scheduleStore.schedules,\n    (newSchedules) => {\n      if (newSchedules && newSchedules.length > 0 && !initialLoadHandled) {\n        scheduleStore.updateNextFourHours();\n        initialLoadHandled = true;\n      }\n    },\n    { immediate: true },\n);\n//\n\n// Watch for changes in screen size indicators\nwatch(\n    [() => appSettingStore.isVerySmallScreen, () => appSettingStore.isSmallScreen],\n    ([newVerySmall, newSmall], [oldVerySmall, oldSmall]) => {\n      if (newVerySmall !== oldVerySmall || newSmall !== oldSmall) {\n        // console.log(`Screen size change detected: VerySmallScreen: ${newVerySmall}, SmallScreen: ${newSmall}`)\n        scheduleStore.fetchSchedules()\n      }\n    },\n    {immediate: false},  // Optionally run on initial setup\n)\n\n// Method to format time with conditional AM/PM display\nfunction formatTime(time, showMeridiem = false) {\n  return dayjs(time).format(`h:mm ${showMeridiem ? 'a' : ''}`)\n}\n\nfunction formatLongDate(date) {\n  return dayjs(date).format('dddd MMM D, YYYY')\n}\n\n// Method to format duration into a readable format\nfunction formatDuration(minutes) {\n  const hours = Math.floor(minutes / 60)\n  const remainderMinutes = minutes % 60\n  if (hours === 0) return `${remainderMinutes} minutes`\n  return `${hours} hour${hours > 1 ? 's' : ''} ${remainderMinutes > 0 ? remainderMinutes + ' minutes' : ''}`\n}\n\n// Define the function to calculate grid style directly\nfunction gridItemStyle(item) {\n  const style = {\n    gridColumn: `${item.gridStart} / span ${item.gridSpan}`,\n    gridRow: `row ${item.gridRow}`,\n  }\n  // console.log(style)  // Log to see what styles are being returned\n  return style\n}\n\n// Dedicated function to handle status row grid styling\nfunction statusGridItemStyle(item) {\n  if (!item) return {}\n\n  // Log to debug the grid positions being applied\n  // console.log(`Status Item - Grid Start: ${item.gridStart}, Grid Span: ${item.gridSpan}`)\n\n  return {\n    gridColumn: `${item.gridStart} / span ${item.gridSpan}`,\n    gridRow: `row 1`, // Assuming status rows are always in the first grid row for visibility\n  }\n}\n\n// Computed property to determine the number of columns\nconst gridColumns = computed(() => {\n  let numColumns\n  if (appSettingStore.isVerySmallScreen) {\n    numColumns = Math.floor((scheduleStore.verySmallScreenSlotHours * 60) / scheduleStore.slotIntervalMinutes)\n  } else if (appSettingStore.isSmallScreen) {\n    numColumns = Math.floor((scheduleStore.smallScreenSlotHours * 60) / scheduleStore.slotIntervalMinutes)\n  } else {\n    numColumns = Math.floor((scheduleStore.mediumScreenSlotHours * 60) / scheduleStore.slotIntervalMinutes)\n  }\n  document.documentElement.style.setProperty('--text-size', numColumns < 4 ? '0.8em' : '1em')\n  document.documentElement.style.setProperty('--text-small', numColumns < 4 ? '0.7em' : '0.8em')\n\n  return `repeat(${numColumns}, minmax(0, 1fr))` // Returns the CSS grid-template-columns value\n})\n\nconst gridPlacement = (gridStart, gridSpan) => {\n  return {\n    gridColumnStart: gridStart,\n    gridColumnEnd: `span ${gridSpan}`,\n    gridRowStart: 'auto',\n    gridRowEnd: 'span 1', // Assuming each item occupies one row height-wise\n  }\n}\n\n// // Determines the classes for a status cell\n// const getStatusCellClasses = (index) => {\n//   const classes = ['status-cell']\n//   if (index === 0) classes.push('now-playing')\n//   else if (index === 1) classes.push('coming-up-next')\n//   else classes.push('status-cell-empty') // For cells without specific content\n//   return classes\n// }\n\nfunction getCellClasses(type) {\n  const baseClass = 'column-width text-sm 2xl:text-md border border-0.5 border-green-300 hover:border-blue-500 cursor-pointer'\n  switch (type) {\n    case 'show':\n      return `${baseClass} bg-gradient-show hover:bg-gradient-show-hover`\n    case 'new_release':\n      return `${baseClass} bg-gradient-new-release hover:bg-gradient-new-release-hover`\n      // Add more cases as needed\n    default:\n      return baseClass\n  }\n}\n\nfunction handleShowClick(item) {\n  let url = '' // Initialize url variable\n\n  switch (item.type) {\n    case 'show':\n      url = `/shows/${item.content.slug}/`\n      break\n    case 'movie':\n      url = `/movies/${item.content.slug}/`\n      break\n    case 'showEpisode':\n      url = `/shows/${item.show.slug}/episodes/${item.slug}`\n      break\n    default:\n      // Handle default case or do nothing\n  }\n\n  Inertia.visit(url) // Visit the dynamically created URL\n\n  // if (isNowPlaying(item.startTime, item.durationMinutes)) {\n  //   // Redirect to the show's page if it's currently playing\n  //   Inertia.visit(`/shows/${item.content.slug}/`)\n  // } else {\n  //   // Open the reminder modal for shows that are not currently playing\n  //   openModal('getReminderModal')\n  // }\n}\n\n\nfunction updateNowPlayingAndComingUpNext() {\n  // Logic to update nowPlaying and comingUpNext based on the current time and show data\n}\n\n\n// Helper function to determine the appropriate classes based on the gridStart and certain conditions\nconst getStatusCellClasses = (gridStart, isFirst, isSecond) => {\n  const classes = ['status-cell'] // Base class for all status cells\n  if (isFirst && gridStart === 1) {\n    // 'Now Playing' is only assigned if it's the first item and it starts at the first grid column\n    classes.push('now-playing')\n  } else if (isSecond && gridStart !== 1) {\n    // 'Coming Up Next' is only assigned to the second item and it should not start at the first grid column\n    classes.push('coming-up-next')\n  } else {\n    // Default class for other cells or when no specific condition is met\n    classes.push('status-cell-empty')\n  }\n  return classes\n}\n// Ensure the data structure is what you expect\n// console.log('All items in store:', scheduleStore.nextFourHoursOfContent)\n\n//\n// const actualShows = computed(() => {\n//   // Flatten the nested arrays, filter out placeholders, and ignore specific content names\n//   return scheduleStore.nextFourHoursOfContent.flat().filter(item =>\n//       !item.placeholder && item.content.name !== \"Nothing scheduled.\" && item.content.name !== \"Blank Spot\"\n//   );\n// });\n//\n\n\n// watch(nowPlayingShow, (newVal, oldVal) => {\n//   console.log('Now Playing Show changed from:', oldVal, 'to:', newVal);\n// });\n//\n// watch(comingUpNextShow, (newVal, oldVal) => {\n//   console.log('Coming Up Next Show changed from:', oldVal, 'to:', newVal);\n// });\n\n\n//\n// // Watch for changes in actualShows and log or react accordingly\n// watch(actualShows, (newShows, oldShows) => {\n//   console.log(\"Actual shows have updated:\", newShows);\n//   // Additional reactions can be performed here\n// });\n//\n// // Optionally, watch for changes in previousItemGridEnd if needed\n// watch(previousItemGridEnd, (newEnd, oldEnd) => {\n//   console.log(\"Previous item grid end has updated:\", newEnd);\n//   // React to changes in the end of the first show, if necessary\n// });\n\n\nfunction openModal(modalName) {\n  document.getElementById(modalName).showModal()\n}\n</script>\n\n<style scoped>\n\n.bg-gradient-show {\n  background: linear-gradient(to right, #1f4037, #99f2c8); /* Example green gradient */\n}\n\n.bg-gradient-show-hover:hover {\n  background: linear-gradient(to right, #66D3FA, #6E45E2); /* Example green gradient on hover */\n}\n\n.bg-gradient-new-release {\n  background: linear-gradient(to right, #654ea3, #eaafc8); /* Example purple gradient */\n}\n\n.bg-gradient-new-release-hover:hover {\n  background: linear-gradient(to right, #c2e59c, #64b3f4); /* Example purple gradient on hover */\n}\n\n\n.column-width {\n  @apply w-16\n}\n\n\n.schedule-item {\n  background: #f0f0f0;\n  color: #000;\n  padding: 10px;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  align-items: center;\n}\n\n.time-slot {\n  text-align: center;\n  padding: 10px 0;\n  border-bottom: 1px solid #fff;\n  grid-row: 1; /* Ensures all time slots are in the first row */\n}\n\n.time-banner {\n  background-color: rgba(0, 123, 255, 0.5); /* Example styling */\n  text-align: center;\n  border: 1px solid white; /* White border */\n  padding: 10px;\n}\n\n.show-cell {\n  display: flex; /* Ensure this is set to flex to control child elements with flex properties */\n  flex-direction: column; /* Align children in a column */\n  justify-content: center; /* Align items to the top */\n  align-items: center; /* Center children horizontally */\n  border: 1px solid #ccc;\n  background-color: #f8f8f8;\n  width: 100%; /* Ensures cell uses full width of its grid column */\n  height: 100%; /* Ensures cell uses full height */\n}\n\n.time-cell {\n  border: 1px solid #fff;\n  text-align: center; /* Center text if desired */\n  padding: 10px;\n}\n\n.content {\n  background: #f0f0f0;\n  padding: 8px;\n  border: 1px solid #ddd;\n}\n\n.placeholder {\n  background: #ccc;\n  width: 100%;\n  height: 60px;\n}\n\n\n.schedule-grid {\n  display: grid;\n  width: 100%;\n}\n\n.header-row {\n  display: contents; /* This makes the header-row itself not generate a box, allowing .time-cell to be direct children of .schedule-grid */\n}\n\n.content-row {\n  display: contents; /* This makes the row container disappear, directly using the grid defined in parent */\n}\n\n.schedule-cell {\n  background: #333;\n  color: #fff;\n  text-align: center;\n  padding: 8px;\n}\n\n.grid-container {\n  display: grid;\n  width: 100%;\n  grid-gap: 10px;\n}\n\n.grid-item {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border: 1px solid #ccc;\n}\n\n\n.status-row {\n  display: grid;\n  width: 100%;\n  align-items: center;\n}\n\n\n.status-cell {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 8px;\n  color: white;\n  width: 100%;\n  height: 100%;\n  font-weight: bold;\n  opacity: 0.8;\n  transition: background-color 0.3s ease;\n}\n\n.status-cell span {\n  display: block;\n  padding: 4px 8px;\n  border-radius: 4px;\n  text-align: center;\n}\n\n/* Optional: If you want the empty cells to have a slight indication they are there */\n.status-cell:empty::after {\n  content: \"\";\n  display: block;\n  width: 100%;\n  height: 100%;\n  background: none; /* Adjust this to a very subtle color or keep transparent */\n}\n\n/* Custom hover effect for the parent that affects children */\n.show-cell:hover .gradient-on-hover {\n  background-image: linear-gradient(to right, #06beb6, #48b1bf);\n}\n\n.now-playing, .coming-up-next {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 10px;\n  border: 1px solid #ccc;\n}\n\n.now-playing {\n  background-color: #4CAF50; /* Green for now playing */\n  animation: pulseAnimation 2s infinite;\n}\n\n.coming-up-next {\n  background-color: #FF9800; /* Orange for coming up next */\n}\n\n\n@keyframes pulseAnimation {\n  0% {\n    opacity: 0.75;\n  }\n  50% {\n    opacity: 1;\n  }\n  100% {\n    opacity: 0.75;\n  }\n}\n\n/* Responsive visibility */\n@media (min-width: 1280px) {\n  /* 2xl */\n  .xl\\:hidden {\n    display: none;\n  }\n}\n\n@media (min-width: 1024px) {\n  /* xl */\n  .lg\\:hidden {\n    display: none;\n  }\n}\n\n</style>","// Utilities/Throttle.js\n\nexport function throttle(fn, limit) {\n    let lastFn;\n    let lastRan;\n    return function() {\n        const context = this;\n        const args = arguments;\n        if (!lastRan) {\n            fn.apply(context, args);\n            lastRan = Date.now();\n        } else {\n            clearTimeout(lastFn);\n            lastFn = setTimeout(function() {\n                if ((Date.now() - lastRan) >= limit) {\n                    fn.apply(context, args);\n                    lastRan = Date.now();\n                }\n            }, limit - (Date.now() - lastRan));\n        }\n    }\n}\n","import api from \"!../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../../../node_modules/css-loader/dist/cjs.js??clonedRuleSet-10.use[1]!../../../../../node_modules/vue-loader/dist/stylePostLoader.js!../../../../../node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-10.use[2]!../../../../../node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./ScheduleGridContainer.vue?vue&type=style&index=0&id=1fcdf790&scoped=true&lang=css\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","import script from \"./ScheduleGridContainer.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./ScheduleGridContainer.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./ScheduleGridContainer.vue?vue&type=style&index=0&id=1fcdf790&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-1fcdf790\"]])\n\nexport default __exports__","import script from \"./NoLayout.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./NoLayout.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n    <div>\n<!--       <Head :title=\"title\"/>-->\n    </div>\n\n    <div class=\"overflow-scroll hide-scrollbar scrollbar-hid\">\n        <slot />\n    </div>\n</template>\n\n<script setup>\nimport { onBeforeMount } from 'vue'\nimport { useAppSettingStore } from '@/Stores/AppSettingStore'\n\nconst appSettingStore = useAppSettingStore()\n\nonBeforeMount(() => {\n  appSettingStore.checkScreenSize()\n})\n\n</script>\n","<template>\n  <Head title=\"Schedule\"/>\n\n  <div id=\"topDiv\" class=\"place-self-center flex flex-col overscroll-x-none pb-64 h-screen\">\n    <div class=\"min-h-screen w-full justify-end px-5 bg-gray-900 text-gray-50 mt-16 overflow-y-scroll\">\n\n      <PublicNavigationMenu/>\n      <PublicResponsiveNavigationMenu/>\n      <div class=\"container mx-auto px-4 gap-y-3 rounded sm:rounded-lg shadow\">\n\n        <header class=\"flex justify-end\">\n          <div class=\"relative w-32 h-32 mr-8\">\n            <div class=\"absolute top-3 left-0 w-full h-full flex justify-center items-center z-20\"><h1\n                class=\"text-4xl font-bold text-white bg-black bg-opacity-80 px-4 py-1 text-center\">Broadcast<br/>Schedule\n            </h1></div>\n            <div class=\"absolute top-3 left-0 w-full h-full flex justify-center items-center z-10\"><img\n                src=\"/storage/images/Ping.png\" alt=\"notTV Ping\"/></div>\n\n          </div>\n        </header>\n\n        <ScheduleGridContainer/>\n\n\n        <PopUpModal :id=\"`goToNowPlayingModal`\">\n          <template v-slot:header>Now Playing</template>\n          <template v-slot:main><span class=\"text-orange-500\">This modal is temporary. This will take you to the now playing show or episode page.</span>\n          </template>\n        </PopUpModal>\n        <PopUpModal :id=\"`getReminderModal`\">\n          <template v-slot:header>Set Reminder</template>\n          <template v-slot:main><span class=\"text-orange-500\">This modal is temporary. Set a reminder when this show starts and/or subscribe to the show to get all notifications when new episodes are released or the show goes live. <br/><br/><span\n              class=\"font-semibold text-yellow-600\">NOTE: Monthly and Yearly contributors get first access to new features.</span></span>\n          </template>\n        </PopUpModal>\n\n        <div class=\"bg-gray-600 rounded-lg shadow m-10 p-4\">\n\n\n<!--          <TodayView/>-->\n\n\n        </div>\n      </div>\n      <Footer/>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { usePageSetup } from '@/Utilities/PageSetup'\nimport { useAppSettingStore } from '@/Stores/AppSettingStore'\nimport { useVideoPlayerStore } from '@/Stores/VideoPlayerStore'\nimport { useUserStore } from '@/Stores/UserStore'\nimport { useScheduleStore } from '@/Stores/ScheduleStore'\nimport Message from '@/Components/Global/Modals/Messages'\nimport PopUpModal from '@/Components/Global/Modals/PopUpModal'\nimport TodayView from '@/Components/Global/Calendar/TodayView.vue'\nimport { computed, onBeforeMount, onMounted, watch } from 'vue'\n\nimport dayjs from 'dayjs'\nimport { Inertia } from '@inertiajs/inertia'\n\nimport PublicNavigationMenu from '@/Components/Global/Navigation/PublicNavigationMenu'\nimport PublicResponsiveNavigationMenu from '@/Components/Global/Navigation/PublicResponsiveNavigationMenu.vue'\nimport Footer from '@/Components/Global/Layout/Footer.vue'\nimport ScheduleGridContainer from '@/Components/Global/Schedule/ScheduleGridContainer.vue'\n\nconst appSettingStore = useAppSettingStore()\nconst scheduleStore = useScheduleStore()\nconst userStore = useUserStore()\nconst videoPlayerStore = useVideoPlayerStore()\n\nlet props = defineProps({})\n\nappSettingStore.currentPage = `schedule`\nappSettingStore.setPrevUrl()\n\n\n// Function to handle scrolling\nconst scrollToTop = () => {\n  requestAnimationFrame(() => {\n    const topDiv = document.getElementById('topDiv')\n    if (topDiv) {\n      // Smooth scroll to the 'topDiv' element\n      topDiv.scrollIntoView({behavior: 'smooth'})\n    } else {\n      // Fallback: smooth scroll to the top of the page\n      window.scrollTo({top: 0, behavior: 'smooth'})\n    }\n  })\n}\nscrollToTop() // Optionally scroll to top when the component mounts\n\nonBeforeMount(() => {\n  appSettingStore.checkScreenSize()\n})\n\nonMounted(() => {\n  if (videoPlayerStore.player) {\n    console.log('player is initialized...')\n    console.log('disposing player...')\n    setTimeout(() => {\n      videoPlayerStore.disposePlayer()\n    }, 1000) // Delay the disposal by 1000 milliseconds (1 second)\n  }\n  scheduleStore.initializeTimeSlots();\n})\n\n// Define a reactive watcher on the timezone\n// This watcher will call preloadWeeklyContent whenever the timezone changes and is not null\nwatch(\n    () => userStore.timezone,\n    async (newTimezone, oldTimezone) => {\n      // Ensure the timezone is set before calling preloadWeeklyContent\n      if (newTimezone) {\n        await scheduleStore.preloadWeeklyContent()\n        console.log('preloaded weekly content from Schedule Index (logged out) time watcher ...')\n      }\n    },\n    {immediate: true}, // This option ensures the watcher is triggered immediately on mount\n)\n\n\nconst timeIntervals = computed(() => scheduleStore.nextFourHoursWithHalfHourIntervals)\nconst shows = computed(() => scheduleStore.nextFourHoursOfContent)\n\n// Determine the \"Now Playing\" and \"Coming Up Next\" statuses\nconst now = dayjs()\nlet nowPlayingIndex = -1\nlet comingUpNextIndex = -1\n\n// Provide these indexes for template usage\n// const isNowPlaying = (index) => index === nowPlayingIndex;\nconst isComingUpNext = (index) => index === comingUpNextIndex\n\n\n// const isComingUpNext = (shows) => {\n//   const now = dayjs();\n//   let nowPlayingIndex = -1;\n//\n//   // First, find the index of the show that's currently playing, if any\n//   shows.value.forEach((show, index) => {\n//     const showStart = dayjs(show.start_time);\n//     const showEnd = showStart.add(show.durationMinutes, 'minute');\n//     if (now.isAfter(showStart) && now.isBefore(showEnd)) {\n//       nowPlayingIndex = index;\n//     }\n//   });\n//\n//   // The show coming up next would be the first show that starts after the current time\n//   // and is not the currently playing show\n//   for (let i = nowPlayingIndex + 1; i < shows.length; i++) {\n//     const nextShowStart = dayjs(shows[i].start_time);\n//     if (now.isBefore(nextShowStart)) {\n//       return i; // Return the index of the coming up next show\n//     }\n//   }\n//\n//   return -1; // Return -1 if there's no show coming up next\n// };\n\nconst nextShowIndex = isComingUpNext(shows)\nconsole.log('Coming up next show index:', nextShowIndex)\n\n\n// const nextFourHoursOfContent = computed(() => {\n//   return scheduleStore.nextFourHoursOfContent.map(item => {\n//     const { startColumn, span } = calculateGridPlacement(item.start_time, item.durationMinutes, nextFourHours.value);\n//     // Adjust startColumn for CSS Grid (1-indexed)\n//     const gridColumnStart = startColumn + 1;\n//     item.gridColumn = `${gridColumnStart} / span ${span}`;\n//     return item;\n//   });\n// });\n\n// console.log(nextFourHoursOfContent.value);\nconst timeSlots = computed(() => {\n  // Assuming nextFourHoursWithHalfHourIntervals is a reactive source\n  // return nextFourHoursOfContent.value.map(slot => new Date(slot))\n})\n//\n// console.log(timeSlots.value);\n\nfunction calculateStartColumn(startTime, timeSlots) {\n  // Convert startTime to a Date object for comparison\n  const startDateTime = new Date(startTime)\n  // Find the first time slot that matches or exceeds the startDateTime\n  const columnIndex = timeSlots.findIndex(timeSlot => {\n    const timeSlotDate = new Date(timeSlot)\n    return startDateTime.getTime() <= timeSlotDate.getTime()\n  })\n  // Return the column index + 1 (CSS grid lines start at 1, not 0)\n  return columnIndex + 1\n}\n\nfunction calculateSpan(startTime, durationMinutes, timeSlots) {\n  const startDateTime = new Date(startTime)\n  const endDateTime = new Date(startDateTime.getTime() + durationMinutes * 60000) // Convert duration to milliseconds and add\n\n  let startIndex = -1\n  let endIndex = -1\n\n  // Loop through timeSlots to find start and end indexes\n  for (let i = 0; i < timeSlots.length; i++) {\n    const slot = new Date(timeSlots[i])\n    if (startIndex === -1 && startDateTime <= slot) {\n      startIndex = i\n    }\n    if (endDateTime <= slot) {\n      endIndex = i\n      break\n    }\n  }\n\n  // If the end index was not found, it means the event lasts beyond the last time slot\n  if (endIndex === -1) {\n    endIndex = timeSlots.length\n  }\n\n  // The span is the difference between the end and start indexes\n  return endIndex - startIndex\n}\n\nconst timeStringToMinutes = (timeStr) => {\n  const [hour, minute] = timeStr.match(/\\d+/g)\n  return parseInt(hour) * 60 + parseInt(minute)\n}\n\n// const calculateGridPlacement = (showStartTime, showDuration, timeIntervals) => {\n//   // Convert the show start time and intervals to minutes for comparison\n//   const showStartMinutes = timeStringToMinutes(showStartTime);\n//   const intervalStartMinutes = timeIntervals.map(interval => timeStringToMinutes(interval));\n//\n//   // Find the starting column by finding the closest interval start time\n//   let startColumn = intervalStartMinutes.findIndex(time => time >= showStartMinutes);\n//   startColumn = startColumn === -1 ? timeIntervals.length - 1 : startColumn; // Fallback to the last column if not found\n//\n//   // Calculate span based on duration (rounded up to cover partial intervals)\n//   const span = Math.ceil(showDuration / 30);\n//\n//   return { startColumn, span };\n// };\n\n// Sample usage\n// const timeIntervals = [\"05:00 PM\", \"05:30 PM\", \"06:00 PM\", \"06:30 PM\", \"07:00 PM\", \"07:30 PM\", \"08:00 PM\", \"08:30 PM\"];\n// const showStartTime = \"17:00\"; // \"05:00 PM\"\n// const showDuration = 60; // 60 minutes\n\n// const { startColumn, span } = calculateGridPlacement(showStartTime, showDuration, timeIntervals);\n\n// shows.value.forEach(show => {\n//   const { startColumn, span } = calculateGridPlacement(show.start_time, show.durationMinutes, timeIntervals.value);\n//   // Apply the calculated start column and span to your grid layout logic\n// });\n//\n// function calculateGridPlacement(showStartTime, showDuration, timeIntervals) {\n//   // Convert showStartTime to the user's timezone and format for comparison\n//   const showStartInUserTZ = userStore.convertUtcToUserTimezone(showStartTime);\n//\n//   // Find the index of the interval that matches the show's start time\n//   const startColumn = timeIntervals.findIndex(interval => showStartInUserTZ === interval.dateTimeString);\n//\n//   // Calculate how many 30-minute intervals the show spans\n//   const intervals = Math.ceil(showDuration / 30);\n//\n//   if (startColumn === -1) {\n//     console.error('Start time does not match any interval:', showStartInUserTZ);\n//     // Handle the error case appropriately\n//     return { startColumn: 1, span: intervals }; // Default or error handling\n//   }\n//\n//   const span = startColumn + intervals > timeIntervals.length ? timeIntervals.length - startColumn : intervals;\n//\n//   return { startColumn: startColumn + 1, span }; // +1 for CSS grid's 1-based indexing\n// }\n\n\n// This function assumes that `showStartTime` is already in the same format as your time intervals.\n// If not, you may need to implement a conversion function to align the time formats.\n\nfunction convertTo24HourFormat(time) {\n  // Assume input is \"HH:MM PM/AM\" and convert to 24-hour format \"HH:MM\"\n  // This is a placeholder for actual conversion logic\n  return time\n}\n\n\n// function calculateGridColumn(startTime, durationMinutes, timeSlots) {\n//   // Find the index of the slot that matches the item's start time\n//   const startSlotIndex = timeSlots.value.findIndex(timeSlot =>\n//       new Date(startTime) >= new Date(timeSlot) &&\n//       new Date(startTime) < new Date(new Date(timeSlot).getTime() + 30 * 60000)\n//   ) + 1; // Grid lines start at 1\n// }\n//   function calculateSpan(startTime, durationMinutes) {\n//     if (!timeSlots.value || timeSlots.value.length === 0) {\n//       console.error('timeSlots is not defined or empty');\n//       return 0; // or some fallback value\n//     }\n//\n//     // Now safe to use timeSlots.value.findIndex\n//     const startIndex = timeSlots.value.findIndex(/* your logic here */);\n//     // Further logic...\n//   }\n\n\n// Example processing of schedule into grid items\n// const processedSchedule = computed(() => {\n//   return shows.map(show => {\n//     const startCol = calculateStartColumn(show.startTime);\n//     const span = calculateSpan(show.duration, show.startTime);\n//\n//     return {\n//       ...show,\n//       startCol,\n//       span,\n//     };\n//   }).sort((a, b) => a.priority - b.priority); // Ensure sorting by priority\n// });\n\n// const calculateStartColumn = (startTime) => {\n//   const showStart = new Date(startTime);\n//   const gridStart = new Date(nextFourHours.value[0]);\n//\n//   // Calculate start column based on half-hour increments from gridStart\n//   const diffHours = (showStart - gridStart) / (1000 * 60 * 60);\n//   return Math.ceil(diffHours * 2) + 1; // +1 because CSS Grid lines start at 1\n// };\n//\n// const calculateSpan = (durationMinutes) => {\n//   return Math.ceil(durationMinutes / 30); // Span based on 30-minute intervals\n// };\n\n// const calculateStartColumn = (startTime) => {\n//   const showStart = new Date(startTime);\n//   const gridStart = nextFourHours[0];\n//\n//   // Find the index of the time slot that matches or immediately precedes the show's start time\n//   const columnIndex = nextFourHours.findIndex(time => showStart < time) - 1;\n//   console.log('BAHH ' + columnIndex);\n//\n//   return columnIndex >= 0 ? columnIndex + 1 : 1; // Ensure it falls within the grid columns\n// };\n//\n// const calculateSpan = (startTime, durationMinutes) => {\n//   const startColumn = calculateStartColumn(startTime);\n//   const span = Math.ceil(durationMinutes / 30); // Determine span based on duration\n//\n//   // Adjust the span to ensure it doesn't extend beyond the grid\n//   return startColumn + span - 1 <= 8 ? span : 8 - startColumn + 1;\n// };\n\nconst getItemStyle = (item) => {\n  const startColumn = calculateStartColumn(item.start_time)\n  const span = calculateSpan(item.durationMinutes)\n\n  return {\n    gridColumnStart: startColumn,\n    gridColumnEnd: `span ${span}`,\n    gridRowStart: 2, // All items start in the second row\n  }\n}\n\n// Method to format the full hour\nfunction formatTime(date) {\n  return date.toLocaleTimeString('en-US', {hour: 'numeric', minute: '2-digit', hour12: true})\n}\n\n// Method to add 30 minutes to the given date and format it\nfunction formatHalfHour(date) {\n  const halfHourLater = new Date(date.getTime() + 30 * 60 * 1000)\n  return halfHourLater.toLocaleTimeString('en-US', {hour: 'numeric', minute: '2-digit', hour12: true})\n}\n\n// Determine visibility classes based on column index and if it's a half-hour\nfunction getColumnVisibilityClass(index, isHalfHour) {\n  // Adjust index for half-hour columns\n  const adjustedIndex = isHalfHour ? index * 2 + 1 : index * 2\n\n  if (adjustedIndex >= 6) { // Last two columns visible only on 2xl screens\n    return 'hidden 2xl:table-cell'\n  } else if (adjustedIndex >= 3) { // Columns 4, 5, 6 visible on xl screens and above\n    return 'hidden xl:table-cell'\n  } else { // Columns 1, 2, 3 are always visible\n    return ''\n  }\n}\n\nfunction calculateColspan(durationMinutes) {\n  // Assuming each hour (and its half-hour mark) is represented by two columns\n  // and that each content item's duration in minutes can determine its span\n  return Math.ceil(durationMinutes / 30)\n}\n\n\n</script>\n<script>\nimport NoLayout from '@/Layouts/NoLayout'\n\nexport default {\n  layout: NoLayout,\n}\n</script>\n\n","import script from \"./Index.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Index.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__"],"names":["dayjs","utc","timezone","_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","delegateYield","asyncGeneratorStep","gen","reject","_next","_throw","key","info","error","_asyncToGenerator","fn","self","args","arguments","apply","err","undefined","ownKeys","getOwnPropertySymbols","filter","getOwnPropertyDescriptor","_objectSpread","_defineProperty","getOwnPropertyDescriptors","defineProperties","obj","toPrimitive","String","Number","_toPrimitive","convertScheduleToTimezone","scheduleData","userStore","useUserStore","data","map","item","startTimeInUserTz","startTime","formatDateTimeFromUtcToUserTimezone","endTimeInUserTz","endTime","getUpcomingContentDates","viewingWindowStart","dates","start","add","toDate","console","log","relativeTime","duration","weekOfYear","advancedFormat","isSameOrAfter","isSameOrBefore","getTimeZone","initialState","baseTime","tz","currentHalfHour","startOf","minute","fourHoursLater","currentMonth","selectedDay","currentWeekStart","currentWeekEnd","endOf","nextFourHoursOfContent","nextFourHoursOfContentWithPlaceholders","fiveDaySixHourSchedule","schedules","isLoading","nextPage","hasMore","todaysContent","weeklyContent","dataFetchLog","savingToSchedule","slotIntervalMinutes","mediumScreenSlotHours","smallScreenSlotHours","verySmallScreenSlotHours","timeSlots","timeBanners","id","useScheduleStore","defineStore","state","actions","resetAll","assign","this","setSelectedDay","day","_this","_callee","_context","fetchWeekDataIfNeeded","setSelectedDayToToday","now","changeDay","days","_this2","_callee2","currentTimeZone","currentTime","newDay","_context2","hour","shiftHours","hours","_this3","_callee3","_context3","isSame","isElevenPM","date","time","subtractMonth","_this4","_callee4","_context4","subtract","t0","concat","addMonth","_this5","_callee5","_context5","fetchFiveDaySixHourSchedule","_this6","_callee6","response","_context6","axios","get","userTimezone","fetchTodaysContent","_this7","_callee7","_context7","preloadWeeklyContent","_this8","_callee8","currentDate","_context8","loadWeekFromDate","fetchSchedules","startDate","endDate","_this9","_callee9","dayStartDate","dayEndDate","fullISOStartDate","fullISOEndDate","formattedStartDate","formattedEndDate","newData","_context9","loading","toISOString","format","_toConsumableArray","index","findIndex","fetchMoreSchedules","_this10","_callee10","lastSchedule","_context10","_this11","_callee11","formattedDate","dayDate","fullISODate","_formattedDate","_context11","post","updateFetchLogs","weekStart","weekEnd","fetchTime","existingLogIndex","lastFetch","needsDataForWeek","formatISODate","weekStartStr","weekEndStr","weekHasBeenFetched","some","logWeekStartStr","logWeekEndStr","calculateExtendedEndForUpcomingContent","extendedEndTime","checkAndFetchForUpcomingContent","_this12","_callee12","upcomingDates","fifteenMinutesAgo","_iterator","_step","_loop","_context13","_createForOfIteratorHelper","dateString","_context12","content","contentDate","lastFetchedTime","isFresh","fetchDataAndUpdateLog","t1","_this13","_callee13","_context14","_this14","_callee14","_context15","updateBaseTime","setBaseTime","newTime","updateNextFourHours","_this15","_callee15","_context16","updateTimeRange","setTimeSlots","prepareShowsForGrid","baseDate","roundedMinutes","second","millisecond","initializeTimeSlots","durationHours","intervalMinutes","slots","slotTime","createTimeSlots","slotHours","appSettingStore","useAppSettingStore","isVerySmallScreen","isSmallScreen","totalSlots","Array","isArray","shows","filterShowsForTimeRange","processedShows","calculateGridSlots","showsWithStatusFlags","processShows","_this$updateColumnOcc","updateColumnOccupancy","colOccupancy","maxRowUsed","gridItems","fillGapsAndCreatePlaceholders","combinedShows","sortShowsByPosition","_this16","show","durationMinutes","warn","showStart","showEnd","isInTimeRange","isBefore","isAfter","hasStarted","firstTimeSlot","lastTimeSlot","slotIndex","slot","Math","max","endSlotIndex","span","gridStart","gridSpan","_this17","comingUpNextSet","end","nowPlaying","placeholder","comingUpNext","cols","fill","Set","gridRow","row","findAndFillGapsForSingleRow","gapStart","has","createPlaceholder","createBlankSpotPlaceholder","sort","b","priority","getters","preparedTimeBanners","timeZone","todayStart","tomorrowStart","flatMap","banner","bannerTodayStart","parseInt","split","bannerTodayEnd","clone","bannerTomorrowStart","bannerTomorrowEnd","startSlotIndex","nextFourHoursWithHalfHourIntervals","intervals","current","formatted","dateTimeString","upcomingContent","showsGroupedByStartTime","reduce","acc","itemStart","valueOf","selectedShows","group","selected","unix","nextSixHours","adjustedStart","dateMessage","startDay","startOfDay","isToday","isYesterday","isTomorrow","currentMonthIndex","month","currentMonthName","currentYear","year","today","viewingStart","daysInMonth","startOfCurrentMonth","endOfCurrentMonth","startOfGrid","endOfGrid","usePageSetup","pageName","videoPlayerStore","useVideoPlayerStore","currentPage","showFlashMessage","pageIsHidden","isMobile","window","innerWidth","fullPage","ott","showOttButtons","makeVideoTopRight","pageReload","location","reload","Inertia","on","event","search","shouldScrollToTop","requestAnimationFrame","topDiv","document","getElementById","scrollIntoView","behavior","scrollTo","setPrevUrl","noLayout","___CSS_LOADER_EXPORT___","module","scheduleStore","_storeToRefs","storeToRefs","ref","computed","_ref","_x","isWithinCurrentHour","startOfCurrentHour","startOfHour","endOfCurrentHour","addHours","contentStartTime","Date","start_time","isContentAvailableForHour","formatHour","getTimeSegment","hourOfDay","getHours","segment","color","watch","newValue","goToContentPage","visit","slug","formatDuration","minutes","floor","remainingMinutes","_ref2","newTimezone","oldTimezone","_x2","_x3","immediate","options","locals","props","__props","clearFlashMessage","flash","success","message","warning","route","notificationStore","useNotificationStore","useChatStore","useStreamStore","useWelcomeStore","usePage","hasScrolled","isContentOverflowing","scrollableDiv","checkOverflow","isOverflowing","scrollHeight","clientHeight","handleScroll","scrollTop","goToWatchPage","closeNavDropdown","href","onMounted","nextTick","addEventListener","showNavDropdown","oldValue","onUnmounted","removeEventListener","intervalId","timeoutId","initialUpdateDone","currentDay","updateCurrentTime","stopAutoUpdateTime","clearInterval","clearTimeout","msUntilNextMinute","setTimeout","updateImmediately","setInterval","startAutoUpdateTime","formattedTime","set","_value$split$map2","_slicedToArray","initialLoadHandled","isVisible","displayedShowsCount","onElementVisibility","onBeforeMount","limit","lastFn","lastRan","loadMoreShows","throttledLoadMoreShows","context","every","upcomingShows","diff","displayedShows","nowPlayingShow","find","comingUpNextShow","formatTime","showMeridiem","remainderMinutes","gridItemStyle","gridColumn","statusGridItemStyle","oldTime","newSchedules","_ref3","_ref4","_ref5","newVerySmall","newSmall","_ref6","oldVerySmall","oldSmall","gridColumns","numColumns","documentElement","style","setProperty","handleShowClick","url","checkScreenSize","__default__","layout","NoLayout","top","player","disposePlayer","nextShowIndex"],"sourceRoot":""}