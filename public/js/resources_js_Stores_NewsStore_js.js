"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk"] = self["webpackChunk"] || []).push([["resources_js_Stores_NewsStore_js"],{

/***/ "./resources/js/Stores/NewsStore.js":
/*!******************************************!*\
  !*** ./resources/js/Stores/NewsStore.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useNewsStore: () => (/* binding */ useNewsStore)\n/* harmony export */ });\n/* harmony import */ var pinia__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pinia */ \"./node_modules/pinia/dist/pinia.mjs\");\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, \"catch\": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nvar initialState = function initialState() {\n  return {\n    newsStory: [],\n    newsArticleIdTiptop: '',\n    newsArticleTitleTiptop: '',\n    newsArticleContentTiptop: '',\n    content_json: '',\n    news_category_id: null,\n    news_category_sub_id: null,\n    categories: [],\n    subcategories: [],\n    city_id: 0,\n    province_id: 0,\n    federal_electoral_district_id: 0,\n    subnational_electoral_district_id: 0,\n    type: '',\n    displayText: '',\n    country: [],\n    selectedCategory: [],\n    // initially no selected category\n    selectedSubcategory: [],\n    selectedLocation: [],\n    // the selected location\n    locationSearchItems: [],\n    // array of locations for the dropdown\n    citySelectDropdownVisible: false,\n    // visibility of the dropdown\n    focusedIndex: 0,\n    // for managing focused item in the dropdown\n    searchQuery: '',\n    filters: [],\n    search: '',\n    formErrors: [],\n    isLoadingCategoryCityData: false,\n    newsPersons: []\n\n    // Computed property for displaying\n  };\n};\nvar useNewsStore = (0,pinia__WEBPACK_IMPORTED_MODULE_0__.defineStore)('newsStore', {\n  state: initialState,\n  actions: {\n    reset: function reset() {\n      // Reset the store to its original state (clear all data)\n      Object.assign(this, initialState());\n      // await this.setSelectedLocation()\n    },\n    // load NewsStory props into NewsStore\n    loadNewsStory: function loadNewsStory(newsStory) {\n      this.newsStory = newsStory;\n    },\n    updateNewsStoryData: function updateNewsStoryData(newsStory, relatedData) {\n      this.newsStory = newsStory;\n      this.newsArticleIdTiptop = newsStory.id;\n      this.newsArticleTitleTiptop = newsStory.title;\n      this.newsArticleContentTiptop = JSON.parse(newsStory.content_json);\n      this.content_json = JSON.parse(newsStory.content_json);\n      this.news_category_id = newsStory.news_category_id;\n      this.news_category_sub_id = newsStory.news_category_sub_id;\n      this.city_id = newsStory.city_id;\n      this.province_id = newsStory.province_id;\n      this.federal_electoral_district_id = newsStory.federal_electoral_district_id;\n      this.subnational_electoral_district_id = newsStory.subnational_electoral_district_id;\n      this.type = newsStory.type;\n      // Set related data that isn't part of the newsStory object\n      this.country = relatedData.country;\n      this.categories = relatedData.categories;\n      // Any additional related data setup can go here\n    },\n    // Action to set the selected Category\n    setSelectedCategory: function setSelectedCategory() {\n      var _this = this;\n      var matchingCategory = this.categories.find(function (category) {\n        return category.id === _this.news_category_id;\n      });\n      this.selectedCategory = matchingCategory || null;\n      if (this.news_category_sub_id) {\n        this.getSubcategories(); // After setting the category, get the subcategory\n        this.getSelectedSubcategory(); // Call after subcategories are populated\n      }\n      // Check if the selected category is 3 (Local News)\n      if (this.news_category_id === 3) {\n        this.setSelectedLocation(); // Set the Location for Local News\n      } else {\n        this.resetLocationIds(); // Reset location-related IDs for other categories\n      }\n    },\n    // Action to get the Subcategories\n    getSubcategories: function getSubcategories() {\n      var _this2 = this;\n      // Find the matching category using selectedCategory.id\n      var matchingCategory = this.categories.find(function (category) {\n        return category.id === _this2.selectedCategory.id;\n      });\n      if (matchingCategory) {\n        // Set the subcategories from the matched category\n        this.subcategories = matchingCategory.news_category_subs;\n      } else {\n        // Handle the case where no matching category is found\n        this.subcategories = []; // Set subcategories to an empty array\n        console.log('No matching category found');\n      }\n    },\n    getSelectedSubcategory: function getSelectedSubcategory() {\n      var _this3 = this;\n      // console.log('start getting selected subcategory')\n\n      // Find the subcategory that matches the news_category_sub_id\n      var matchingSubcategory = this.subcategories.find(function (subcategory) {\n        return subcategory.id === _this3.news_category_sub_id;\n      });\n      if (matchingSubcategory) {\n        // Set the selectedSubcategory to the found subcategory\n        this.selectedSubcategory = matchingSubcategory;\n        // console.log('selected subcategory updated:', this.selectedSubcategory)\n      } else {\n        // Handle the case where no matching subcategory is found\n        this.selectedSubcategory = null;\n        // console.log('No matching subcategory found')\n      }\n    },\n    fetchLocationsForSearch: function fetchLocationsForSearch() {\n      var _this4 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var response;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return fetch('/api/news-locations');\n            case 3:\n              response = _context.sent;\n              if (!response.ok) {\n                _context.next = 10;\n                break;\n              }\n              _context.next = 7;\n              return response.json();\n            case 7:\n              _this4.locationSearchItems = _context.sent;\n              _context.next = 11;\n              break;\n            case 10:\n              // Handle HTTP error responses (e.g., 404, 500)\n              console.error('Failed to fetch locations:', response.statusText);\n            case 11:\n              _this4.isLoadingCategoryCityData = false;\n              _context.next = 18;\n              break;\n            case 14:\n              _context.prev = 14;\n              _context.t0 = _context[\"catch\"](0);\n              // Handle errors that occur during the fetch operation\n              console.error('Error fetching locations:', _context.t0);\n              _this4.isLoadingCategoryCityData = false;\n            case 18:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[0, 14]]);\n      }))();\n    },\n    // Action to set the selected Location\n    setSelectedLocation: function setSelectedLocation() {\n      var _this5 = this;\n      var matchingLocation = null;\n\n      // Simplified conditional logic\n      if (this.city_id) {\n        matchingLocation = this.locationSearchItems.find(function (location) {\n          return location.city_id === _this5.city_id;\n        });\n      } else if (this.province_id) {\n        matchingLocation = this.locationSearchItems.find(function (location) {\n          return location.province_id === _this5.province_id;\n        });\n      } else if (this.federal_electoral_district_id) {\n        matchingLocation = this.locationSearchItems.find(function (location) {\n          return location.federal_electoral_district_id === _this5.federal_electoral_district_id;\n        });\n      } else if (this.subnational_electoral_district_id) {\n        matchingLocation = this.locationSearchItems.find(function (location) {\n          return location.subnational_electoral_district.id === _this5.subnational_electoral_district_id;\n        });\n      }\n\n      // Handling null case\n      if (matchingLocation) {\n        this.selectedLocation = matchingLocation;\n\n        // Set displayText based on type\n        switch (this.type) {\n          case 'city':\n            this.displayText = 'City';\n            this.type = 'city';\n            break;\n          case 'town':\n            this.displayText = 'Town';\n            this.type = 'town';\n            break;\n          case 'province':\n            this.displayText = 'Province';\n            this.type = 'province';\n            break;\n          case 'territory':\n            this.displayText = 'Territory';\n            this.type = 'territory';\n            break;\n          case 'federalElectoralDistrict':\n            this.displayText = 'Federal Electoral District';\n            this.type = 'federalElectoralDistrict';\n            break;\n          case 'subnationalElectoralDistrict':\n            this.displayText = 'Subnational Electoral District';\n            this.type = 'subnationalElectoralDistrict';\n            break;\n          default:\n            this.displayText = '';\n            break;\n        }\n      } else {\n        // Handle the case where no matching location is found\n        // this.selectedLocation = null\n        // this.selectedType = null\n        // this.city_id = null // or keep the existing value?\n        // this.type = null\n        // this.displayText = ''\n      }\n    },\n    updateNewsStoryAndSetLocation: function updateNewsStoryAndSetLocation(newsStory, relatedData) {\n      var _this6 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _this6.fetchLocationsForSearch();\n            case 2:\n              // Load location items first\n              // console.log(\"Locations fetched\");\n              //\n              // // Example: Set this.type based on newsStory or relatedData if applicable\n              // this.type = newsStory.type || relatedData.type; // Adjust based on your data structure\n              // console.log(\"Type set to:\", this.type);\n\n              _this6.setSelectedLocation(); // Then set the selected location\n              // console.log(\"Selected location set\");\n              // Finally, update the news story data\n              _this6.updateNewsStoryData(newsStory, relatedData);\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2);\n      }))();\n    },\n    // Action to set the selected Location\n    updateSelectedLocation: function updateSelectedLocation(location) {\n      if (!location) {\n        // Handle the case where no location is passed\n        this.selectedLocation = null;\n        this.displayText = '';\n        this.resetLocationIds(null);\n        return;\n      }\n\n      // Update the selectedLocation based on the type of location\n      this.selectedLocation = location;\n      this.displayText = this.getDisplayTextForType(location.type);\n\n      // Update the relevant IDs based on the type\n      this.city_id = null;\n      this.province_id = null;\n      this.federal_electoral_district_id = null;\n      this.subnational_electoral_district_id = null;\n      switch (location.type) {\n        case 'city':\n        case 'town':\n          this.city_id = location.city_id;\n          // Assuming province_id is also part of city data\n          this.province_id = location.province_id || null;\n          break;\n        case 'province':\n        case 'territory':\n          this.province_id = location.province_id;\n          break;\n        case 'federalElectoralDistrict':\n          this.federal_electoral_district_id = location.federal_electoral_district_id;\n          break;\n        case 'subnationalElectoralDistrict':\n          this.subnational_electoral_district_id = location.subnational_electoral_district_id;\n          break;\n        // Add more cases as needed for other types\n      }\n    },\n    // Helper function to get display text based on type\n    getDisplayTextForType: function getDisplayTextForType(type) {\n      switch (type) {\n        case 'city':\n          this.type = 'city';\n          return 'City';\n        case 'town':\n          this.type = 'town';\n          return 'Town';\n        case 'province':\n          this.type = 'province';\n          return 'Province';\n        case 'territory':\n          this.type = 'territory';\n          return 'Territory';\n        case 'federalElectoralDistrict':\n          this.type = 'federalElectoralDistrict';\n          return 'Federal Electoral District';\n        case 'subnationalElectoralDistrict':\n          this.type = 'subnationalElectoralDistrict';\n          return 'Subnational Electoral District';\n        default:\n          return '';\n      }\n    },\n    // Setter action for searchInput\n    setSearchInput: function setSearchInput(value) {\n      var _this$selectedLocatio;\n      if (((_this$selectedLocatio = this.selectedLocation) === null || _this$selectedLocatio === void 0 ? void 0 : _this$selectedLocatio.name) !== value) {\n        this.selectedLocation = null;\n      }\n      this.search = value;\n    },\n    // Helper function to reset location IDs\n    resetLocationIds: function resetLocationIds(matchingLocation) {\n      this.city_id = null;\n      this.province_id = null;\n      this.federal_electoral_district_id = null;\n      this.subnational_electoral_district_id = null;\n      if (matchingLocation) {\n        switch (matchingLocation.type) {\n          case 'city':\n            this.city_id = matchingLocation.city_id;\n            this.province_id = matchingLocation.province_id; // Assuming province_id is also part of city data\n            break;\n          case 'province':\n          case 'territory':\n            this.province_id = matchingLocation.province_id;\n            break;\n          case 'federalElectoralDistrict':\n            this.federal_electoral_district_id = matchingLocation.federal_electoral_district_id;\n            break;\n          case 'subnationalElectoralDistrict':\n            this.subnational_electoral_district_id = matchingLocation.subnational_electoral_district_id;\n            break;\n          // ... handle other types if needed\n        }\n      }\n    },\n    updateSearch: function updateSearch(query) {\n      this.search = query;\n    },\n    fetchNewsPersons: function fetchNewsPersons() {\n      var _this7 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var response;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.prev = 0;\n              _context3.next = 3;\n              return fetch('/api/news-persons');\n            case 3:\n              response = _context3.sent;\n              _context3.next = 6;\n              return response.json();\n            case 6:\n              _this7.newsPersons = _context3.sent;\n              _context3.next = 12;\n              break;\n            case 9:\n              _context3.prev = 9;\n              _context3.t0 = _context3[\"catch\"](0);\n              console.error('Failed to fetch news persons:', _context3.t0);\n            case 12:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, null, [[0, 9]]);\n      }))();\n    }\n  },\n  getters: {\n    filteredLocationSearchItems: function filteredLocationSearchItems(state) {\n      if (!state.search) return state.locationSearchItems;\n      return state.locationSearchItems.filter(function (item) {\n        return item.name.toLowerCase().includes(state.search.toLowerCase());\n      });\n    },\n    searchInput: function searchInput(state) {\n      if (state.selectedLocation) {\n        if (state.selectedLocation.type === 'city' || state.selectedLocation.type === 'town') {\n          return \"\".concat(state.selectedLocation.name, \", \").concat(state.selectedLocation.province_name);\n        }\n        return state.selectedLocation.name;\n      }\n      return state.search;\n    },\n    locationType: function locationType(state) {\n      if (!state.selectedLocation) {\n        state.type = '';\n        state.displayText = '';\n        return 'location type is not set';\n      }\n\n      // Assuming `selectedLocation` has a property to indicate its type\n      // Adjust the logic based on how you determine the type\n      switch (state.selectedLocation.type) {\n        case 'city':\n          state.type = 'city';\n          state.displayText = 'City';\n          break;\n        case 'town':\n          state.type = 'town';\n          state.displayText = 'Town';\n          break;\n        case 'province':\n          state.displayText = 'Province';\n          state.type = 'province';\n          break;\n        case 'territory':\n          state.displayText = 'Territory';\n          state.type = 'territory';\n          break;\n        case 'federalElectoralDistrict':\n          state.displayText = 'Federal Electoral District';\n          state.type = 'federalElectoralDistrict';\n          break;\n        case 'subnationalElectoralDistrict':\n          state.displayText = 'Subnational Electoral District';\n          state.type = 'subnationalElectoralDistrict';\n          break;\n        default:\n          state.displayText = '';\n          break;\n      }\n      return 'location type is set';\n    } // filteredNewsPersons: (state) => {\n    //     if (!state.searchQuery) return state.newsPersons;\n    //     return state.newsPersons.filter(person =>\n    //         person.user.name.toLowerCase().includes(state.searchQuery.toLowerCase())\n    //     );\n    // },\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LENBQUN4SCxJQUFJLEdBQUcsV0FBVztVQUN4QjtRQUNKLEtBQUssMEJBQTBCO1VBQzNCd0gsS0FBSyxDQUFDZixXQUFXLEdBQUcsNEJBQTRCO1VBQ2hEZSxLQUFLLENBQUN4SCxJQUFJLEdBQUcsMEJBQTBCO1VBQ3ZDO1FBQ0osS0FBSyw4QkFBOEI7VUFDL0J3SCxLQUFLLENBQUNmLFdBQVcsR0FBRyxnQ0FBZ0M7VUFDcERlLEtBQUssQ0FBQ3hILElBQUksR0FBRyw4QkFBOEI7VUFDM0M7UUFDSjtVQUNJd0gsS0FBSyxDQUFDZixXQUFXLEdBQUcsRUFBRTtVQUN0QjtNQUNSO01BRUEsT0FBTyxzQkFBc0I7SUFDakMsQ0FBQyxDQUNEO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtFQUNKO0FBRUosQ0FBQyxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2pzL1N0b3Jlcy9OZXdzU3RvcmUuanM/M2QxMCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBkZWZpbmVTdG9yZSB9IGZyb20gJ3BpbmlhJ1xuXG5jb25zdCBpbml0aWFsU3RhdGUgPSAoKSA9PiAoe1xuICAgIG5ld3NTdG9yeTogW10sXG4gICAgbmV3c0FydGljbGVJZFRpcHRvcDogJycsXG4gICAgbmV3c0FydGljbGVUaXRsZVRpcHRvcDogJycsXG4gICAgbmV3c0FydGljbGVDb250ZW50VGlwdG9wOiAnJyxcbiAgICBjb250ZW50X2pzb246ICcnLFxuICAgIG5ld3NfY2F0ZWdvcnlfaWQ6IG51bGwsXG4gICAgbmV3c19jYXRlZ29yeV9zdWJfaWQ6IG51bGwsXG4gICAgY2F0ZWdvcmllczogW10sXG4gICAgc3ViY2F0ZWdvcmllczogW10sXG4gICAgY2l0eV9pZDogMCxcbiAgICBwcm92aW5jZV9pZDogMCxcbiAgICBmZWRlcmFsX2VsZWN0b3JhbF9kaXN0cmljdF9pZDogMCxcbiAgICBzdWJuYXRpb25hbF9lbGVjdG9yYWxfZGlzdHJpY3RfaWQ6IDAsXG4gICAgdHlwZTogJycsXG4gICAgZGlzcGxheVRleHQ6ICcnLFxuICAgIGNvdW50cnk6IFtdLFxuICAgIHNlbGVjdGVkQ2F0ZWdvcnk6IFtdLCAvLyBpbml0aWFsbHkgbm8gc2VsZWN0ZWQgY2F0ZWdvcnlcbiAgICBzZWxlY3RlZFN1YmNhdGVnb3J5OiBbXSxcbiAgICBzZWxlY3RlZExvY2F0aW9uOiBbXSwgLy8gdGhlIHNlbGVjdGVkIGxvY2F0aW9uXG4gICAgbG9jYXRpb25TZWFyY2hJdGVtczogW10sIC8vIGFycmF5IG9mIGxvY2F0aW9ucyBmb3IgdGhlIGRyb3Bkb3duXG4gICAgY2l0eVNlbGVjdERyb3Bkb3duVmlzaWJsZTogZmFsc2UsIC8vIHZpc2liaWxpdHkgb2YgdGhlIGRyb3Bkb3duXG4gICAgZm9jdXNlZEluZGV4OiAwLCAvLyBmb3IgbWFuYWdpbmcgZm9jdXNlZCBpdGVtIGluIHRoZSBkcm9wZG93blxuICAgIHNlYXJjaFF1ZXJ5OiAnJyxcbiAgICBmaWx0ZXJzOiBbXSxcbiAgICBzZWFyY2g6ICcnLFxuICAgIGZvcm1FcnJvcnM6IFtdLFxuICAgIGlzTG9hZGluZ0NhdGVnb3J5Q2l0eURhdGE6IGZhbHNlLFxuICAgIG5ld3NQZXJzb25zOiBbXSxcblxuICAgIC8vIENvbXB1dGVkIHByb3BlcnR5IGZvciBkaXNwbGF5aW5nXG59KVxuXG5leHBvcnQgY29uc3QgdXNlTmV3c1N0b3JlID0gZGVmaW5lU3RvcmUoJ25ld3NTdG9yZScsIHtcbiAgICBzdGF0ZTogaW5pdGlhbFN0YXRlLFxuICAgIGFjdGlvbnM6IHtcbiAgICAgICAgcmVzZXQoKSB7XG4gICAgICAgICAgICAvLyBSZXNldCB0aGUgc3RvcmUgdG8gaXRzIG9yaWdpbmFsIHN0YXRlIChjbGVhciBhbGwgZGF0YSlcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24odGhpcywgaW5pdGlhbFN0YXRlKCkpXG4gICAgICAgICAgICAvLyBhd2FpdCB0aGlzLnNldFNlbGVjdGVkTG9jYXRpb24oKVxuICAgICAgICB9LFxuICAgICAgICAvLyBsb2FkIE5ld3NTdG9yeSBwcm9wcyBpbnRvIE5ld3NTdG9yZVxuICAgICAgICBsb2FkTmV3c1N0b3J5KG5ld3NTdG9yeSkge1xuICAgICAgICAgICAgdGhpcy5uZXdzU3RvcnkgPSBuZXdzU3RvcnlcbiAgICAgICAgfSxcbiAgICAgICAgdXBkYXRlTmV3c1N0b3J5RGF0YShuZXdzU3RvcnksIHJlbGF0ZWREYXRhKSB7XG4gICAgICAgICAgICB0aGlzLm5ld3NTdG9yeSA9IG5ld3NTdG9yeVxuICAgICAgICAgICAgdGhpcy5uZXdzQXJ0aWNsZUlkVGlwdG9wID0gbmV3c1N0b3J5LmlkXG4gICAgICAgICAgICB0aGlzLm5ld3NBcnRpY2xlVGl0bGVUaXB0b3AgPSBuZXdzU3RvcnkudGl0bGVcbiAgICAgICAgICAgIHRoaXMubmV3c0FydGljbGVDb250ZW50VGlwdG9wID0gSlNPTi5wYXJzZShuZXdzU3RvcnkuY29udGVudF9qc29uKVxuICAgICAgICAgICAgdGhpcy5jb250ZW50X2pzb24gPSBKU09OLnBhcnNlKG5ld3NTdG9yeS5jb250ZW50X2pzb24pXG4gICAgICAgICAgICB0aGlzLm5ld3NfY2F0ZWdvcnlfaWQgPSBuZXdzU3RvcnkubmV3c19jYXRlZ29yeV9pZFxuICAgICAgICAgICAgdGhpcy5uZXdzX2NhdGVnb3J5X3N1Yl9pZCA9IG5ld3NTdG9yeS5uZXdzX2NhdGVnb3J5X3N1Yl9pZFxuICAgICAgICAgICAgdGhpcy5jaXR5X2lkID0gbmV3c1N0b3J5LmNpdHlfaWRcbiAgICAgICAgICAgIHRoaXMucHJvdmluY2VfaWQgPSBuZXdzU3RvcnkucHJvdmluY2VfaWRcbiAgICAgICAgICAgIHRoaXMuZmVkZXJhbF9lbGVjdG9yYWxfZGlzdHJpY3RfaWQgPSBuZXdzU3RvcnkuZmVkZXJhbF9lbGVjdG9yYWxfZGlzdHJpY3RfaWRcbiAgICAgICAgICAgIHRoaXMuc3VibmF0aW9uYWxfZWxlY3RvcmFsX2Rpc3RyaWN0X2lkID0gbmV3c1N0b3J5LnN1Ym5hdGlvbmFsX2VsZWN0b3JhbF9kaXN0cmljdF9pZFxuICAgICAgICAgICAgdGhpcy50eXBlID0gbmV3c1N0b3J5LnR5cGVcbiAgICAgICAgICAgIC8vIFNldCByZWxhdGVkIGRhdGEgdGhhdCBpc24ndCBwYXJ0IG9mIHRoZSBuZXdzU3Rvcnkgb2JqZWN0XG4gICAgICAgICAgICB0aGlzLmNvdW50cnkgPSByZWxhdGVkRGF0YS5jb3VudHJ5XG4gICAgICAgICAgICB0aGlzLmNhdGVnb3JpZXMgPSByZWxhdGVkRGF0YS5jYXRlZ29yaWVzXG4gICAgICAgICAgICAvLyBBbnkgYWRkaXRpb25hbCByZWxhdGVkIGRhdGEgc2V0dXAgY2FuIGdvIGhlcmVcbiAgICAgICAgfSxcbiAgICAgICAgLy8gQWN0aW9uIHRvIHNldCB0aGUgc2VsZWN0ZWQgQ2F0ZWdvcnlcbiAgICAgICAgc2V0U2VsZWN0ZWRDYXRlZ29yeSgpIHtcbiAgICAgICAgICAgIGxldCBtYXRjaGluZ0NhdGVnb3J5ID0gdGhpcy5jYXRlZ29yaWVzLmZpbmQoY2F0ZWdvcnkgPT4gY2F0ZWdvcnkuaWQgPT09IHRoaXMubmV3c19jYXRlZ29yeV9pZClcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRDYXRlZ29yeSA9IG1hdGNoaW5nQ2F0ZWdvcnkgfHwgbnVsbFxuICAgICAgICAgICAgaWYgKHRoaXMubmV3c19jYXRlZ29yeV9zdWJfaWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmdldFN1YmNhdGVnb3JpZXMoKSAvLyBBZnRlciBzZXR0aW5nIHRoZSBjYXRlZ29yeSwgZ2V0IHRoZSBzdWJjYXRlZ29yeVxuICAgICAgICAgICAgICAgIHRoaXMuZ2V0U2VsZWN0ZWRTdWJjYXRlZ29yeSgpIC8vIENhbGwgYWZ0ZXIgc3ViY2F0ZWdvcmllcyBhcmUgcG9wdWxhdGVkXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBDaGVjayBpZiB0aGUgc2VsZWN0ZWQgY2F0ZWdvcnkgaXMgMyAoTG9jYWwgTmV3cylcbiAgICAgICAgICAgIGlmICh0aGlzLm5ld3NfY2F0ZWdvcnlfaWQgPT09IDMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFNlbGVjdGVkTG9jYXRpb24oKSAvLyBTZXQgdGhlIExvY2F0aW9uIGZvciBMb2NhbCBOZXdzXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMucmVzZXRMb2NhdGlvbklkcygpIC8vIFJlc2V0IGxvY2F0aW9uLXJlbGF0ZWQgSURzIGZvciBvdGhlciBjYXRlZ29yaWVzXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIC8vIEFjdGlvbiB0byBnZXQgdGhlIFN1YmNhdGVnb3JpZXNcbiAgICAgICAgZ2V0U3ViY2F0ZWdvcmllcygpIHtcblxuICAgICAgICAgICAgLy8gRmluZCB0aGUgbWF0Y2hpbmcgY2F0ZWdvcnkgdXNpbmcgc2VsZWN0ZWRDYXRlZ29yeS5pZFxuICAgICAgICAgICAgY29uc3QgbWF0Y2hpbmdDYXRlZ29yeSA9IHRoaXMuY2F0ZWdvcmllcy5maW5kKGNhdGVnb3J5ID0+IGNhdGVnb3J5LmlkID09PSB0aGlzLnNlbGVjdGVkQ2F0ZWdvcnkuaWQpXG5cbiAgICAgICAgICAgIGlmIChtYXRjaGluZ0NhdGVnb3J5KSB7XG4gICAgICAgICAgICAgICAgLy8gU2V0IHRoZSBzdWJjYXRlZ29yaWVzIGZyb20gdGhlIG1hdGNoZWQgY2F0ZWdvcnlcbiAgICAgICAgICAgICAgICB0aGlzLnN1YmNhdGVnb3JpZXMgPSBtYXRjaGluZ0NhdGVnb3J5Lm5ld3NfY2F0ZWdvcnlfc3Vic1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBIYW5kbGUgdGhlIGNhc2Ugd2hlcmUgbm8gbWF0Y2hpbmcgY2F0ZWdvcnkgaXMgZm91bmRcbiAgICAgICAgICAgICAgICB0aGlzLnN1YmNhdGVnb3JpZXMgPSBbXSAvLyBTZXQgc3ViY2F0ZWdvcmllcyB0byBhbiBlbXB0eSBhcnJheVxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdObyBtYXRjaGluZyBjYXRlZ29yeSBmb3VuZCcpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0U2VsZWN0ZWRTdWJjYXRlZ29yeSgpIHtcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdzdGFydCBnZXR0aW5nIHNlbGVjdGVkIHN1YmNhdGVnb3J5JylcblxuICAgICAgICAgICAgLy8gRmluZCB0aGUgc3ViY2F0ZWdvcnkgdGhhdCBtYXRjaGVzIHRoZSBuZXdzX2NhdGVnb3J5X3N1Yl9pZFxuICAgICAgICAgICAgY29uc3QgbWF0Y2hpbmdTdWJjYXRlZ29yeSA9IHRoaXMuc3ViY2F0ZWdvcmllcy5maW5kKHN1YmNhdGVnb3J5ID0+IHN1YmNhdGVnb3J5LmlkID09PSB0aGlzLm5ld3NfY2F0ZWdvcnlfc3ViX2lkKVxuXG4gICAgICAgICAgICBpZiAobWF0Y2hpbmdTdWJjYXRlZ29yeSkge1xuICAgICAgICAgICAgICAgIC8vIFNldCB0aGUgc2VsZWN0ZWRTdWJjYXRlZ29yeSB0byB0aGUgZm91bmQgc3ViY2F0ZWdvcnlcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkU3ViY2F0ZWdvcnkgPSBtYXRjaGluZ1N1YmNhdGVnb3J5XG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ3NlbGVjdGVkIHN1YmNhdGVnb3J5IHVwZGF0ZWQ6JywgdGhpcy5zZWxlY3RlZFN1YmNhdGVnb3J5KVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBIYW5kbGUgdGhlIGNhc2Ugd2hlcmUgbm8gbWF0Y2hpbmcgc3ViY2F0ZWdvcnkgaXMgZm91bmRcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkU3ViY2F0ZWdvcnkgPSBudWxsXG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ05vIG1hdGNoaW5nIHN1YmNhdGVnb3J5IGZvdW5kJylcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBhc3luYyBmZXRjaExvY2F0aW9uc0ZvclNlYXJjaCgpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCgnL2FwaS9uZXdzLWxvY2F0aW9ucycpXG4gICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLm9rKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubG9jYXRpb25TZWFyY2hJdGVtcyA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEhhbmRsZSBIVFRQIGVycm9yIHJlc3BvbnNlcyAoZS5nLiwgNDA0LCA1MDApXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBmZXRjaCBsb2NhdGlvbnM6JywgcmVzcG9uc2Uuc3RhdHVzVGV4dClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5pc0xvYWRpbmdDYXRlZ29yeUNpdHlEYXRhID0gZmFsc2VcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgLy8gSGFuZGxlIGVycm9ycyB0aGF0IG9jY3VyIGR1cmluZyB0aGUgZmV0Y2ggb3BlcmF0aW9uXG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgZmV0Y2hpbmcgbG9jYXRpb25zOicsIGVycm9yKVxuICAgICAgICAgICAgICAgIHRoaXMuaXNMb2FkaW5nQ2F0ZWdvcnlDaXR5RGF0YSA9IGZhbHNlXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgLy8gQWN0aW9uIHRvIHNldCB0aGUgc2VsZWN0ZWQgTG9jYXRpb25cbiAgICAgICAgc2V0U2VsZWN0ZWRMb2NhdGlvbigpIHtcbiAgICAgICAgICAgIGxldCBtYXRjaGluZ0xvY2F0aW9uID0gbnVsbFxuXG4gICAgICAgICAgICAvLyBTaW1wbGlmaWVkIGNvbmRpdGlvbmFsIGxvZ2ljXG4gICAgICAgICAgICBpZiAodGhpcy5jaXR5X2lkKSB7XG4gICAgICAgICAgICAgICAgbWF0Y2hpbmdMb2NhdGlvbiA9IHRoaXMubG9jYXRpb25TZWFyY2hJdGVtcy5maW5kKGxvY2F0aW9uID0+IGxvY2F0aW9uLmNpdHlfaWQgPT09IHRoaXMuY2l0eV9pZClcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5wcm92aW5jZV9pZCkge1xuICAgICAgICAgICAgICAgIG1hdGNoaW5nTG9jYXRpb24gPSB0aGlzLmxvY2F0aW9uU2VhcmNoSXRlbXMuZmluZChsb2NhdGlvbiA9PiBsb2NhdGlvbi5wcm92aW5jZV9pZCA9PT0gdGhpcy5wcm92aW5jZV9pZClcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5mZWRlcmFsX2VsZWN0b3JhbF9kaXN0cmljdF9pZCkge1xuICAgICAgICAgICAgICAgIG1hdGNoaW5nTG9jYXRpb24gPSB0aGlzLmxvY2F0aW9uU2VhcmNoSXRlbXMuZmluZChsb2NhdGlvbiA9PiBsb2NhdGlvbi5mZWRlcmFsX2VsZWN0b3JhbF9kaXN0cmljdF9pZCA9PT0gdGhpcy5mZWRlcmFsX2VsZWN0b3JhbF9kaXN0cmljdF9pZClcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5zdWJuYXRpb25hbF9lbGVjdG9yYWxfZGlzdHJpY3RfaWQpIHtcbiAgICAgICAgICAgICAgICBtYXRjaGluZ0xvY2F0aW9uID0gdGhpcy5sb2NhdGlvblNlYXJjaEl0ZW1zLmZpbmQobG9jYXRpb24gPT4gbG9jYXRpb24uc3VibmF0aW9uYWxfZWxlY3RvcmFsX2Rpc3RyaWN0LmlkID09PSB0aGlzLnN1Ym5hdGlvbmFsX2VsZWN0b3JhbF9kaXN0cmljdF9pZClcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gSGFuZGxpbmcgbnVsbCBjYXNlXG4gICAgICAgICAgICBpZiAobWF0Y2hpbmdMb2NhdGlvbikge1xuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRMb2NhdGlvbiA9IG1hdGNoaW5nTG9jYXRpb25cblxuICAgICAgICAgICAgICAgIC8vIFNldCBkaXNwbGF5VGV4dCBiYXNlZCBvbiB0eXBlXG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLnR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnY2l0eSc6XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc3BsYXlUZXh0ID0gJ0NpdHknXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnR5cGUgPSAnY2l0eSdcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3Rvd24nOlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXNwbGF5VGV4dCA9ICdUb3duJ1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50eXBlID0gJ3Rvd24nXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdwcm92aW5jZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc3BsYXlUZXh0ID0gJ1Byb3ZpbmNlJ1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50eXBlID0gJ3Byb3ZpbmNlJ1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAndGVycml0b3J5JzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGlzcGxheVRleHQgPSAnVGVycml0b3J5J1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50eXBlID0gJ3RlcnJpdG9yeSdcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2ZlZGVyYWxFbGVjdG9yYWxEaXN0cmljdCc6XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc3BsYXlUZXh0ID0gJ0ZlZGVyYWwgRWxlY3RvcmFsIERpc3RyaWN0J1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50eXBlID0gJ2ZlZGVyYWxFbGVjdG9yYWxEaXN0cmljdCdcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3N1Ym5hdGlvbmFsRWxlY3RvcmFsRGlzdHJpY3QnOlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXNwbGF5VGV4dCA9ICdTdWJuYXRpb25hbCBFbGVjdG9yYWwgRGlzdHJpY3QnXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnR5cGUgPSAnc3VibmF0aW9uYWxFbGVjdG9yYWxEaXN0cmljdCdcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc3BsYXlUZXh0ID0gJydcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBIYW5kbGUgdGhlIGNhc2Ugd2hlcmUgbm8gbWF0Y2hpbmcgbG9jYXRpb24gaXMgZm91bmRcbiAgICAgICAgICAgICAgICAvLyB0aGlzLnNlbGVjdGVkTG9jYXRpb24gPSBudWxsXG4gICAgICAgICAgICAgICAgLy8gdGhpcy5zZWxlY3RlZFR5cGUgPSBudWxsXG4gICAgICAgICAgICAgICAgLy8gdGhpcy5jaXR5X2lkID0gbnVsbCAvLyBvciBrZWVwIHRoZSBleGlzdGluZyB2YWx1ZT9cbiAgICAgICAgICAgICAgICAvLyB0aGlzLnR5cGUgPSBudWxsXG4gICAgICAgICAgICAgICAgLy8gdGhpcy5kaXNwbGF5VGV4dCA9ICcnXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGFzeW5jIHVwZGF0ZU5ld3NTdG9yeUFuZFNldExvY2F0aW9uKG5ld3NTdG9yeSwgcmVsYXRlZERhdGEpIHtcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwiTmV3cyBzdG9yeSB0eXBlOlwiLCBuZXdzU3RvcnkudHlwZSk7IC8vIE9yIHJlbGF0ZWREYXRhLnR5cGUsIGRlcGVuZGluZyBvbiB5b3VyIHN0cnVjdHVyZVxuICAgICAgICAgICAgYXdhaXQgdGhpcy5mZXRjaExvY2F0aW9uc0ZvclNlYXJjaCgpOyAvLyBMb2FkIGxvY2F0aW9uIGl0ZW1zIGZpcnN0XG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcIkxvY2F0aW9ucyBmZXRjaGVkXCIpO1xuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vIC8vIEV4YW1wbGU6IFNldCB0aGlzLnR5cGUgYmFzZWQgb24gbmV3c1N0b3J5IG9yIHJlbGF0ZWREYXRhIGlmIGFwcGxpY2FibGVcbiAgICAgICAgICAgIC8vIHRoaXMudHlwZSA9IG5ld3NTdG9yeS50eXBlIHx8IHJlbGF0ZWREYXRhLnR5cGU7IC8vIEFkanVzdCBiYXNlZCBvbiB5b3VyIGRhdGEgc3RydWN0dXJlXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcIlR5cGUgc2V0IHRvOlwiLCB0aGlzLnR5cGUpO1xuXG4gICAgICAgICAgICB0aGlzLnNldFNlbGVjdGVkTG9jYXRpb24oKTsgLy8gVGhlbiBzZXQgdGhlIHNlbGVjdGVkIGxvY2F0aW9uXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcIlNlbGVjdGVkIGxvY2F0aW9uIHNldFwiKTtcbiAgICAgICAgICAgIC8vIEZpbmFsbHksIHVwZGF0ZSB0aGUgbmV3cyBzdG9yeSBkYXRhXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZU5ld3NTdG9yeURhdGEobmV3c1N0b3J5LCByZWxhdGVkRGF0YSk7XG4gICAgICAgIH0sXG4vLyBBY3Rpb24gdG8gc2V0IHRoZSBzZWxlY3RlZCBMb2NhdGlvblxuICAgICAgICB1cGRhdGVTZWxlY3RlZExvY2F0aW9uKGxvY2F0aW9uKSB7XG4gICAgICAgICAgICBpZiAoIWxvY2F0aW9uKSB7XG4gICAgICAgICAgICAgICAgLy8gSGFuZGxlIHRoZSBjYXNlIHdoZXJlIG5vIGxvY2F0aW9uIGlzIHBhc3NlZFxuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRMb2NhdGlvbiA9IG51bGxcbiAgICAgICAgICAgICAgICB0aGlzLmRpc3BsYXlUZXh0ID0gJydcbiAgICAgICAgICAgICAgICB0aGlzLnJlc2V0TG9jYXRpb25JZHMobnVsbClcbiAgICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gVXBkYXRlIHRoZSBzZWxlY3RlZExvY2F0aW9uIGJhc2VkIG9uIHRoZSB0eXBlIG9mIGxvY2F0aW9uXG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkTG9jYXRpb24gPSBsb2NhdGlvblxuICAgICAgICAgICAgdGhpcy5kaXNwbGF5VGV4dCA9IHRoaXMuZ2V0RGlzcGxheVRleHRGb3JUeXBlKGxvY2F0aW9uLnR5cGUpXG5cbiAgICAgICAgICAgIC8vIFVwZGF0ZSB0aGUgcmVsZXZhbnQgSURzIGJhc2VkIG9uIHRoZSB0eXBlXG4gICAgICAgICAgICB0aGlzLmNpdHlfaWQgPSBudWxsXG4gICAgICAgICAgICB0aGlzLnByb3ZpbmNlX2lkID0gbnVsbFxuICAgICAgICAgICAgdGhpcy5mZWRlcmFsX2VsZWN0b3JhbF9kaXN0cmljdF9pZCA9IG51bGxcbiAgICAgICAgICAgIHRoaXMuc3VibmF0aW9uYWxfZWxlY3RvcmFsX2Rpc3RyaWN0X2lkID0gbnVsbFxuXG4gICAgICAgICAgICBzd2l0Y2ggKGxvY2F0aW9uLnR5cGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdjaXR5JzpcbiAgICAgICAgICAgICAgICBjYXNlICd0b3duJzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jaXR5X2lkID0gbG9jYXRpb24uY2l0eV9pZFxuICAgICAgICAgICAgICAgICAgICAvLyBBc3N1bWluZyBwcm92aW5jZV9pZCBpcyBhbHNvIHBhcnQgb2YgY2l0eSBkYXRhXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJvdmluY2VfaWQgPSBsb2NhdGlvbi5wcm92aW5jZV9pZCB8fCBudWxsXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgY2FzZSAncHJvdmluY2UnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ3RlcnJpdG9yeSc6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJvdmluY2VfaWQgPSBsb2NhdGlvbi5wcm92aW5jZV9pZFxuICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgIGNhc2UgJ2ZlZGVyYWxFbGVjdG9yYWxEaXN0cmljdCc6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZmVkZXJhbF9lbGVjdG9yYWxfZGlzdHJpY3RfaWQgPSBsb2NhdGlvbi5mZWRlcmFsX2VsZWN0b3JhbF9kaXN0cmljdF9pZFxuICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgIGNhc2UgJ3N1Ym5hdGlvbmFsRWxlY3RvcmFsRGlzdHJpY3QnOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnN1Ym5hdGlvbmFsX2VsZWN0b3JhbF9kaXN0cmljdF9pZCA9IGxvY2F0aW9uLnN1Ym5hdGlvbmFsX2VsZWN0b3JhbF9kaXN0cmljdF9pZFxuICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgIC8vIEFkZCBtb3JlIGNhc2VzIGFzIG5lZWRlZCBmb3Igb3RoZXIgdHlwZXNcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuLy8gSGVscGVyIGZ1bmN0aW9uIHRvIGdldCBkaXNwbGF5IHRleHQgYmFzZWQgb24gdHlwZVxuICAgICAgICBnZXREaXNwbGF5VGV4dEZvclR5cGUodHlwZSkge1xuICAgICAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnY2l0eSc6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudHlwZSA9ICdjaXR5J1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ0NpdHknXG4gICAgICAgICAgICAgICAgY2FzZSAndG93bic6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudHlwZSA9ICd0b3duJ1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1Rvd24nXG4gICAgICAgICAgICAgICAgY2FzZSAncHJvdmluY2UnOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnR5cGUgPSAncHJvdmluY2UnXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnUHJvdmluY2UnXG4gICAgICAgICAgICAgICAgY2FzZSAndGVycml0b3J5JzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50eXBlID0gJ3RlcnJpdG9yeSdcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdUZXJyaXRvcnknXG4gICAgICAgICAgICAgICAgY2FzZSAnZmVkZXJhbEVsZWN0b3JhbERpc3RyaWN0JzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50eXBlID0gJ2ZlZGVyYWxFbGVjdG9yYWxEaXN0cmljdCdcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdGZWRlcmFsIEVsZWN0b3JhbCBEaXN0cmljdCdcbiAgICAgICAgICAgICAgICBjYXNlICdzdWJuYXRpb25hbEVsZWN0b3JhbERpc3RyaWN0JzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50eXBlID0gJ3N1Ym5hdGlvbmFsRWxlY3RvcmFsRGlzdHJpY3QnXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnU3VibmF0aW9uYWwgRWxlY3RvcmFsIERpc3RyaWN0J1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnJ1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIC8vIFNldHRlciBhY3Rpb24gZm9yIHNlYXJjaElucHV0XG4gICAgICAgIHNldFNlYXJjaElucHV0KHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5zZWxlY3RlZExvY2F0aW9uPy5uYW1lICE9PSB2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRMb2NhdGlvbiA9IG51bGxcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc2VhcmNoID0gdmFsdWVcbiAgICAgICAgfSxcblxuICAgICAgICAvLyBIZWxwZXIgZnVuY3Rpb24gdG8gcmVzZXQgbG9jYXRpb24gSURzXG4gICAgICAgIHJlc2V0TG9jYXRpb25JZHMobWF0Y2hpbmdMb2NhdGlvbikge1xuICAgICAgICAgICAgdGhpcy5jaXR5X2lkID0gbnVsbFxuICAgICAgICAgICAgdGhpcy5wcm92aW5jZV9pZCA9IG51bGxcbiAgICAgICAgICAgIHRoaXMuZmVkZXJhbF9lbGVjdG9yYWxfZGlzdHJpY3RfaWQgPSBudWxsXG4gICAgICAgICAgICB0aGlzLnN1Ym5hdGlvbmFsX2VsZWN0b3JhbF9kaXN0cmljdF9pZCA9IG51bGxcblxuICAgICAgICAgICAgaWYgKG1hdGNoaW5nTG9jYXRpb24pIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKG1hdGNoaW5nTG9jYXRpb24udHlwZSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdjaXR5JzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2l0eV9pZCA9IG1hdGNoaW5nTG9jYXRpb24uY2l0eV9pZFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm92aW5jZV9pZCA9IG1hdGNoaW5nTG9jYXRpb24ucHJvdmluY2VfaWQgLy8gQXNzdW1pbmcgcHJvdmluY2VfaWQgaXMgYWxzbyBwYXJ0IG9mIGNpdHkgZGF0YVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAncHJvdmluY2UnOlxuICAgICAgICAgICAgICAgICAgICBjYXNlICd0ZXJyaXRvcnknOlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm92aW5jZV9pZCA9IG1hdGNoaW5nTG9jYXRpb24ucHJvdmluY2VfaWRcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2ZlZGVyYWxFbGVjdG9yYWxEaXN0cmljdCc6XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmZlZGVyYWxfZWxlY3RvcmFsX2Rpc3RyaWN0X2lkID0gbWF0Y2hpbmdMb2NhdGlvbi5mZWRlcmFsX2VsZWN0b3JhbF9kaXN0cmljdF9pZFxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnc3VibmF0aW9uYWxFbGVjdG9yYWxEaXN0cmljdCc6XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN1Ym5hdGlvbmFsX2VsZWN0b3JhbF9kaXN0cmljdF9pZCA9IG1hdGNoaW5nTG9jYXRpb24uc3VibmF0aW9uYWxfZWxlY3RvcmFsX2Rpc3RyaWN0X2lkXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgICAgICAvLyAuLi4gaGFuZGxlIG90aGVyIHR5cGVzIGlmIG5lZWRlZFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgdXBkYXRlU2VhcmNoKHF1ZXJ5KSB7XG4gICAgICAgICAgICB0aGlzLnNlYXJjaCA9IHF1ZXJ5O1xuICAgICAgICB9LFxuICAgICAgICBhc3luYyBmZXRjaE5ld3NQZXJzb25zKCkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKCcvYXBpL25ld3MtcGVyc29ucycpO1xuICAgICAgICAgICAgICAgIHRoaXMubmV3c1BlcnNvbnMgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBmZXRjaCBuZXdzIHBlcnNvbnM6JywgZXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgIH0sXG5cbiAgICBnZXR0ZXJzOiB7XG4gICAgICAgIGZpbHRlcmVkTG9jYXRpb25TZWFyY2hJdGVtczogKHN0YXRlKSA9PiB7XG4gICAgICAgICAgICBpZiAoIXN0YXRlLnNlYXJjaCkgcmV0dXJuIHN0YXRlLmxvY2F0aW9uU2VhcmNoSXRlbXM7XG4gICAgICAgICAgICByZXR1cm4gc3RhdGUubG9jYXRpb25TZWFyY2hJdGVtcy5maWx0ZXIoaXRlbSA9PlxuICAgICAgICAgICAgICAgIGl0ZW0ubmFtZS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKHN0YXRlLnNlYXJjaC50b0xvd2VyQ2FzZSgpKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSxcbiAgICAgICAgc2VhcmNoSW5wdXQ6IChzdGF0ZSkgPT4ge1xuICAgICAgICAgICAgaWYgKHN0YXRlLnNlbGVjdGVkTG9jYXRpb24pIHtcbiAgICAgICAgICAgICAgICBpZiAoc3RhdGUuc2VsZWN0ZWRMb2NhdGlvbi50eXBlID09PSAnY2l0eScgfHwgc3RhdGUuc2VsZWN0ZWRMb2NhdGlvbi50eXBlID09PSAndG93bicpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGAke3N0YXRlLnNlbGVjdGVkTG9jYXRpb24ubmFtZX0sICR7c3RhdGUuc2VsZWN0ZWRMb2NhdGlvbi5wcm92aW5jZV9uYW1lfWBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0YXRlLnNlbGVjdGVkTG9jYXRpb24ubmFtZVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHN0YXRlLnNlYXJjaFxuICAgICAgICB9LFxuICAgICAgICBsb2NhdGlvblR5cGUoc3RhdGUpIHtcbiAgICAgICAgICAgIGlmICghc3RhdGUuc2VsZWN0ZWRMb2NhdGlvbikge1xuICAgICAgICAgICAgICAgIHN0YXRlLnR5cGUgPSAnJ1xuICAgICAgICAgICAgICAgIHN0YXRlLmRpc3BsYXlUZXh0ID0gJydcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2xvY2F0aW9uIHR5cGUgaXMgbm90IHNldCc7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEFzc3VtaW5nIGBzZWxlY3RlZExvY2F0aW9uYCBoYXMgYSBwcm9wZXJ0eSB0byBpbmRpY2F0ZSBpdHMgdHlwZVxuICAgICAgICAgICAgLy8gQWRqdXN0IHRoZSBsb2dpYyBiYXNlZCBvbiBob3cgeW91IGRldGVybWluZSB0aGUgdHlwZVxuICAgICAgICAgICAgc3dpdGNoIChzdGF0ZS5zZWxlY3RlZExvY2F0aW9uLnR5cGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdjaXR5JzpcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUudHlwZSA9ICdjaXR5JztcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUuZGlzcGxheVRleHQgPSAnQ2l0eSc7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3Rvd24nOlxuICAgICAgICAgICAgICAgICAgICBzdGF0ZS50eXBlID0gJ3Rvd24nO1xuICAgICAgICAgICAgICAgICAgICBzdGF0ZS5kaXNwbGF5VGV4dCA9ICdUb3duJztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAncHJvdmluY2UnOlxuICAgICAgICAgICAgICAgICAgICBzdGF0ZS5kaXNwbGF5VGV4dCA9ICdQcm92aW5jZSdcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUudHlwZSA9ICdwcm92aW5jZSdcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICBjYXNlICd0ZXJyaXRvcnknOlxuICAgICAgICAgICAgICAgICAgICBzdGF0ZS5kaXNwbGF5VGV4dCA9ICdUZXJyaXRvcnknXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlLnR5cGUgPSAndGVycml0b3J5J1xuICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgIGNhc2UgJ2ZlZGVyYWxFbGVjdG9yYWxEaXN0cmljdCc6XG4gICAgICAgICAgICAgICAgICAgIHN0YXRlLmRpc3BsYXlUZXh0ID0gJ0ZlZGVyYWwgRWxlY3RvcmFsIERpc3RyaWN0J1xuICAgICAgICAgICAgICAgICAgICBzdGF0ZS50eXBlID0gJ2ZlZGVyYWxFbGVjdG9yYWxEaXN0cmljdCdcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICBjYXNlICdzdWJuYXRpb25hbEVsZWN0b3JhbERpc3RyaWN0JzpcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUuZGlzcGxheVRleHQgPSAnU3VibmF0aW9uYWwgRWxlY3RvcmFsIERpc3RyaWN0J1xuICAgICAgICAgICAgICAgICAgICBzdGF0ZS50eXBlID0gJ3N1Ym5hdGlvbmFsRWxlY3RvcmFsRGlzdHJpY3QnXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUuZGlzcGxheVRleHQgPSAnJ1xuICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gJ2xvY2F0aW9uIHR5cGUgaXMgc2V0JztcbiAgICAgICAgfSxcbiAgICAgICAgLy8gZmlsdGVyZWROZXdzUGVyc29uczogKHN0YXRlKSA9PiB7XG4gICAgICAgIC8vICAgICBpZiAoIXN0YXRlLnNlYXJjaFF1ZXJ5KSByZXR1cm4gc3RhdGUubmV3c1BlcnNvbnM7XG4gICAgICAgIC8vICAgICByZXR1cm4gc3RhdGUubmV3c1BlcnNvbnMuZmlsdGVyKHBlcnNvbiA9PlxuICAgICAgICAvLyAgICAgICAgIHBlcnNvbi51c2VyLm5hbWUudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhzdGF0ZS5zZWFyY2hRdWVyeS50b0xvd2VyQ2FzZSgpKVxuICAgICAgICAvLyAgICAgKTtcbiAgICAgICAgLy8gfSxcbiAgICB9LFxuXG59KVxuXG4iXSwibmFtZXMiOlsiX3JlZ2VuZXJhdG9yUnVudGltZSIsImUiLCJ0IiwiciIsIk9iamVjdCIsInByb3RvdHlwZSIsIm4iLCJoYXNPd25Qcm9wZXJ0eSIsIm8iLCJkZWZpbmVQcm9wZXJ0eSIsInZhbHVlIiwiaSIsIlN5bWJvbCIsImEiLCJpdGVyYXRvciIsImMiLCJhc3luY0l0ZXJhdG9yIiwidSIsInRvU3RyaW5nVGFnIiwiZGVmaW5lIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwid3JhcCIsIkdlbmVyYXRvciIsImNyZWF0ZSIsIkNvbnRleHQiLCJtYWtlSW52b2tlTWV0aG9kIiwidHJ5Q2F0Y2giLCJ0eXBlIiwiYXJnIiwiY2FsbCIsImgiLCJsIiwiZiIsInMiLCJ5IiwiR2VuZXJhdG9yRnVuY3Rpb24iLCJHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSIsInAiLCJkIiwiZ2V0UHJvdG90eXBlT2YiLCJ2IiwidmFsdWVzIiwiZyIsImRlZmluZUl0ZXJhdG9yTWV0aG9kcyIsImZvckVhY2giLCJfaW52b2tlIiwiQXN5bmNJdGVyYXRvciIsImludm9rZSIsIl90eXBlb2YiLCJyZXNvbHZlIiwiX19hd2FpdCIsInRoZW4iLCJjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyIsIkVycm9yIiwiZG9uZSIsIm1ldGhvZCIsImRlbGVnYXRlIiwibWF5YmVJbnZva2VEZWxlZ2F0ZSIsInNlbnQiLCJfc2VudCIsImRpc3BhdGNoRXhjZXB0aW9uIiwiYWJydXB0IiwiVHlwZUVycm9yIiwicmVzdWx0TmFtZSIsIm5leHQiLCJuZXh0TG9jIiwicHVzaFRyeUVudHJ5IiwidHJ5TG9jIiwiY2F0Y2hMb2MiLCJmaW5hbGx5TG9jIiwiYWZ0ZXJMb2MiLCJ0cnlFbnRyaWVzIiwicHVzaCIsInJlc2V0VHJ5RW50cnkiLCJjb21wbGV0aW9uIiwicmVzZXQiLCJpc05hTiIsImxlbmd0aCIsImRpc3BsYXlOYW1lIiwiaXNHZW5lcmF0b3JGdW5jdGlvbiIsImNvbnN0cnVjdG9yIiwibmFtZSIsIm1hcmsiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsImF3cmFwIiwiYXN5bmMiLCJQcm9taXNlIiwia2V5cyIsInJldmVyc2UiLCJwb3AiLCJwcmV2IiwiY2hhckF0Iiwic2xpY2UiLCJzdG9wIiwicnZhbCIsImhhbmRsZSIsImNvbXBsZXRlIiwiZmluaXNoIiwiX2NhdGNoIiwiZGVsZWdhdGVZaWVsZCIsImFzeW5jR2VuZXJhdG9yU3RlcCIsImdlbiIsInJlamVjdCIsIl9uZXh0IiwiX3Rocm93Iiwia2V5IiwiaW5mbyIsImVycm9yIiwiX2FzeW5jVG9HZW5lcmF0b3IiLCJmbiIsInNlbGYiLCJhcmdzIiwiYXJndW1lbnRzIiwiYXBwbHkiLCJlcnIiLCJ1bmRlZmluZWQiLCJkZWZpbmVTdG9yZSIsImluaXRpYWxTdGF0ZSIsIm5ld3NTdG9yeSIsIm5ld3NBcnRpY2xlSWRUaXB0b3AiLCJuZXdzQXJ0aWNsZVRpdGxlVGlwdG9wIiwibmV3c0FydGljbGVDb250ZW50VGlwdG9wIiwiY29udGVudF9qc29uIiwibmV3c19jYXRlZ29yeV9pZCIsIm5ld3NfY2F0ZWdvcnlfc3ViX2lkIiwiY2F0ZWdvcmllcyIsInN1YmNhdGVnb3JpZXMiLCJjaXR5X2lkIiwicHJvdmluY2VfaWQiLCJmZWRlcmFsX2VsZWN0b3JhbF9kaXN0cmljdF9pZCIsInN1Ym5hdGlvbmFsX2VsZWN0b3JhbF9kaXN0cmljdF9pZCIsImRpc3BsYXlUZXh0IiwiY291bnRyeSIsInNlbGVjdGVkQ2F0ZWdvcnkiLCJzZWxlY3RlZFN1YmNhdGVnb3J5Iiwic2VsZWN0ZWRMb2NhdGlvbiIsImxvY2F0aW9uU2VhcmNoSXRlbXMiLCJjaXR5U2VsZWN0RHJvcGRvd25WaXNpYmxlIiwiZm9jdXNlZEluZGV4Iiwic2VhcmNoUXVlcnkiLCJmaWx0ZXJzIiwic2VhcmNoIiwiZm9ybUVycm9ycyIsImlzTG9hZGluZ0NhdGVnb3J5Q2l0eURhdGEiLCJuZXdzUGVyc29ucyIsInVzZU5ld3NTdG9yZSIsInN0YXRlIiwiYWN0aW9ucyIsImFzc2lnbiIsImxvYWROZXdzU3RvcnkiLCJ1cGRhdGVOZXdzU3RvcnlEYXRhIiwicmVsYXRlZERhdGEiLCJpZCIsInRpdGxlIiwiSlNPTiIsInBhcnNlIiwic2V0U2VsZWN0ZWRDYXRlZ29yeSIsIl90aGlzIiwibWF0Y2hpbmdDYXRlZ29yeSIsImZpbmQiLCJjYXRlZ29yeSIsImdldFN1YmNhdGVnb3JpZXMiLCJnZXRTZWxlY3RlZFN1YmNhdGVnb3J5Iiwic2V0U2VsZWN0ZWRMb2NhdGlvbiIsInJlc2V0TG9jYXRpb25JZHMiLCJfdGhpczIiLCJuZXdzX2NhdGVnb3J5X3N1YnMiLCJjb25zb2xlIiwibG9nIiwiX3RoaXMzIiwibWF0Y2hpbmdTdWJjYXRlZ29yeSIsInN1YmNhdGVnb3J5IiwiZmV0Y2hMb2NhdGlvbnNGb3JTZWFyY2giLCJfdGhpczQiLCJfY2FsbGVlIiwicmVzcG9uc2UiLCJfY2FsbGVlJCIsIl9jb250ZXh0IiwiZmV0Y2giLCJvayIsImpzb24iLCJzdGF0dXNUZXh0IiwidDAiLCJfdGhpczUiLCJtYXRjaGluZ0xvY2F0aW9uIiwibG9jYXRpb24iLCJzdWJuYXRpb25hbF9lbGVjdG9yYWxfZGlzdHJpY3QiLCJ1cGRhdGVOZXdzU3RvcnlBbmRTZXRMb2NhdGlvbiIsIl90aGlzNiIsIl9jYWxsZWUyIiwiX2NhbGxlZTIkIiwiX2NvbnRleHQyIiwidXBkYXRlU2VsZWN0ZWRMb2NhdGlvbiIsImdldERpc3BsYXlUZXh0Rm9yVHlwZSIsInNldFNlYXJjaElucHV0IiwiX3RoaXMkc2VsZWN0ZWRMb2NhdGlvIiwidXBkYXRlU2VhcmNoIiwicXVlcnkiLCJmZXRjaE5ld3NQZXJzb25zIiwiX3RoaXM3IiwiX2NhbGxlZTMiLCJfY2FsbGVlMyQiLCJfY29udGV4dDMiLCJnZXR0ZXJzIiwiZmlsdGVyZWRMb2NhdGlvblNlYXJjaEl0ZW1zIiwiZmlsdGVyIiwiaXRlbSIsInRvTG93ZXJDYXNlIiwiaW5jbHVkZXMiLCJzZWFyY2hJbnB1dCIsImNvbmNhdCIsInByb3ZpbmNlX25hbWUiLCJsb2NhdGlvblR5cGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/js/Stores/NewsStore.js\n");

/***/ })

}]);