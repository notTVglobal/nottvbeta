"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk"] = self["webpackChunk"] || []).push([["resources_js_Stores_NewsStore_js"],{

/***/ "./resources/js/Stores/NewsStore.js":
/*!******************************************!*\
  !*** ./resources/js/Stores/NewsStore.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useNewsStore: () => (/* binding */ useNewsStore)\n/* harmony export */ });\n/* harmony import */ var pinia__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pinia */ \"./node_modules/pinia/dist/pinia.mjs\");\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, \"catch\": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nvar initialState = function initialState() {\n  return {\n    newsStory: [],\n    newsArticleIdTiptop: '',\n    newsArticleTitleTiptop: '',\n    newsArticleContentTiptop: '',\n    content_json: '',\n    news_category_id: null,\n    news_category_sub_id: null,\n    categories: [],\n    subcategories: [],\n    city_id: 0,\n    province_id: 0,\n    federal_electoral_district_id: 0,\n    subnational_electoral_district_id: 0,\n    type: '',\n    displayText: '',\n    country: [],\n    selectedCategory: [],\n    // initially no selected category\n    selectedSubcategory: [],\n    selectedLocation: [],\n    // the selected location\n    locationSearchItems: [],\n    // array of locations for the dropdown\n    citySelectDropdownVisible: false,\n    // visibility of the dropdown\n    focusedIndex: 0,\n    // for managing focused item in the dropdown\n    searchQuery: '',\n    filters: [],\n    search: '',\n    formErrors: [],\n    isLoadingCategoryCityData: false,\n    newsPersons: []\n\n    // Computed property for displaying\n  };\n};\nvar useNewsStore = (0,pinia__WEBPACK_IMPORTED_MODULE_0__.defineStore)('newsStore', {\n  state: initialState,\n  actions: {\n    reset: function reset() {\n      // Reset the store to its original state (clear all data)\n      Object.assign(this, initialState());\n      // await this.setSelectedLocation()\n    },\n    // load NewsStory props into NewsStore\n    loadNewsStory: function loadNewsStory(newsStory) {\n      this.newsStory = newsStory;\n    },\n    updateNewsStoryData: function updateNewsStoryData(newsStory, relatedData) {\n      this.newsStory = newsStory;\n      this.newsArticleIdTiptop = newsStory.id;\n      this.newsArticleTitleTiptop = newsStory.title;\n      this.newsArticleContentTiptop = JSON.parse(newsStory.content_json);\n      this.content_json = JSON.parse(newsStory.content_json);\n      this.news_category_id = newsStory.news_category_id;\n      this.news_category_sub_id = newsStory.news_category_sub_id;\n      this.city_id = newsStory.city_id;\n      this.province_id = newsStory.province_id;\n      this.federal_electoral_district_id = newsStory.federal_electoral_district_id;\n      this.subnational_electoral_district_id = newsStory.subnational_electoral_district_id;\n      this.type = newsStory.type;\n      // Set related data that isn't part of the newsStory object\n      this.country = relatedData.country;\n      this.categories = relatedData.categories;\n      // Any additional related data setup can go here\n    },\n    // Action to set the selected Category\n    setSelectedCategory: function setSelectedCategory() {\n      var _this = this;\n      var matchingCategory = this.categories.find(function (category) {\n        return category.id === _this.news_category_id;\n      });\n      this.selectedCategory = matchingCategory || null;\n      if (this.news_category_sub_id) {\n        this.getSubcategories(); // After setting the category, get the subcategory\n        this.getSelectedSubcategory(); // Call after subcategories are populated\n      }\n      // Check if the selected category is 3 (Local News)\n      if (this.news_category_id === 3) {\n        this.setSelectedLocation(); // Set the Location for Local News\n      } else {\n        this.resetLocationIds(); // Reset location-related IDs for other categories\n      }\n    },\n    // Action to get the Subcategories\n    getSubcategories: function getSubcategories() {\n      var _this2 = this;\n      // Find the matching category using selectedCategory.id\n      var matchingCategory = this.categories.find(function (category) {\n        return category.id === _this2.selectedCategory.id;\n      });\n      if (matchingCategory) {\n        // Set the subcategories from the matched category\n        this.subcategories = matchingCategory.news_category_subs;\n      } else {\n        // Handle the case where no matching category is found\n        this.subcategories = []; // Set subcategories to an empty array\n        console.log('No matching category found');\n      }\n    },\n    getSelectedSubcategory: function getSelectedSubcategory() {\n      var _this3 = this;\n      // console.log('start getting selected subcategory')\n\n      // Find the subcategory that matches the news_category_sub_id\n      var matchingSubcategory = this.subcategories.find(function (subcategory) {\n        return subcategory.id === _this3.news_category_sub_id;\n      });\n      if (matchingSubcategory) {\n        // Set the selectedSubcategory to the found subcategory\n        this.selectedSubcategory = matchingSubcategory;\n        // console.log('selected subcategory updated:', this.selectedSubcategory)\n      } else {\n        // Handle the case where no matching subcategory is found\n        this.selectedSubcategory = null;\n        // console.log('No matching subcategory found')\n      }\n    },\n    fetchLocationsForSearch: function fetchLocationsForSearch() {\n      var _this4 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var response;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return fetch('/api/news-locations');\n            case 3:\n              response = _context.sent;\n              if (!response.ok) {\n                _context.next = 10;\n                break;\n              }\n              _context.next = 7;\n              return response.json();\n            case 7:\n              _this4.locationSearchItems = _context.sent;\n              _context.next = 11;\n              break;\n            case 10:\n              // Handle HTTP error responses (e.g., 404, 500)\n              console.error('Failed to fetch locations:', response.statusText);\n            case 11:\n              _this4.isLoadingCategoryCityData = false;\n              _context.next = 18;\n              break;\n            case 14:\n              _context.prev = 14;\n              _context.t0 = _context[\"catch\"](0);\n              // Handle errors that occur during the fetch operation\n              console.error('Error fetching locations:', _context.t0);\n              _this4.isLoadingCategoryCityData = false;\n            case 18:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[0, 14]]);\n      }))();\n    },\n    // Action to set the selected Location\n    setSelectedLocation: function setSelectedLocation() {\n      var _this5 = this;\n      var matchingLocation = null;\n\n      // Simplified conditional logic\n      if (this.city_id) {\n        matchingLocation = this.locationSearchItems.find(function (location) {\n          return location.city_id === _this5.city_id;\n        });\n      } else if (this.province_id) {\n        matchingLocation = this.locationSearchItems.find(function (location) {\n          return location.province_id === _this5.province_id && !location.city_id;\n        });\n      } else if (this.federal_electoral_district_id) {\n        matchingLocation = this.locationSearchItems.find(function (location) {\n          return location.federal_electoral_district_id === _this5.federal_electoral_district_id;\n        });\n      } else if (this.subnational_electoral_district_id) {\n        matchingLocation = this.locationSearchItems.find(function (location) {\n          return location.subnational_electoral_district.id === _this5.subnational_electoral_district_id;\n        });\n      }\n\n      // Handling null case\n      if (matchingLocation) {\n        this.selectedLocation = matchingLocation;\n\n        // Set displayText based on type\n        switch (this.type) {\n          case 'city':\n            this.displayText = 'City';\n            this.type = 'city';\n            break;\n          case 'town':\n            this.displayText = 'Town';\n            this.type = 'town';\n            break;\n          case 'province':\n            this.displayText = 'Province';\n            this.type = 'province';\n            break;\n          case 'territory':\n            this.displayText = 'Territory';\n            this.type = 'territory';\n            break;\n          case 'federalElectoralDistrict':\n            this.displayText = 'Federal Electoral District';\n            this.type = 'federalElectoralDistrict';\n            break;\n          case 'subnationalElectoralDistrict':\n            this.displayText = 'Subnational Electoral District';\n            this.type = 'subnationalElectoralDistrict';\n            break;\n          default:\n            this.displayText = '';\n            break;\n        }\n      } else {\n        // Handle the case where no matching location is found\n        // this.selectedLocation = null\n        // this.selectedType = null\n        // this.city_id = null // or keep the existing value?\n        // this.type = null\n        // this.displayText = ''\n      }\n    },\n    updateNewsStoryAndSetLocation: function updateNewsStoryAndSetLocation(newsStory, relatedData) {\n      var _this6 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _this6.fetchLocationsForSearch();\n            case 2:\n              // Load location items first\n              // console.log(\"Locations fetched\");\n              //\n              // // Example: Set this.type based on newsStory or relatedData if applicable\n              // this.type = newsStory.type || relatedData.type; // Adjust based on your data structure\n              // console.log(\"Type set to:\", this.type);\n\n              _this6.setSelectedLocation(); // Then set the selected location\n              // console.log(\"Selected location set\");\n              // Finally, update the news story data\n              _this6.updateNewsStoryData(newsStory, relatedData);\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2);\n      }))();\n    },\n    // Action to set the selected Location\n    updateSelectedLocation: function updateSelectedLocation(location) {\n      if (!location) {\n        // Handle the case where no location is passed\n        this.selectedLocation = null;\n        this.displayText = '';\n        this.resetLocationIds(null);\n        return;\n      }\n\n      // Update the selectedLocation based on the type of location\n      this.selectedLocation = location;\n      this.displayText = this.getDisplayTextForType(location.type);\n\n      // Update the relevant IDs based on the type\n      this.city_id = null;\n      this.province_id = null;\n      this.federal_electoral_district_id = null;\n      this.subnational_electoral_district_id = null;\n      switch (location.type) {\n        case 'city':\n        case 'town':\n          this.city_id = location.city_id;\n          // Assuming province_id is also part of city data\n          this.province_id = location.province_id || null;\n          break;\n        case 'province':\n        case 'territory':\n          this.province_id = location.province_id;\n          break;\n        case 'federalElectoralDistrict':\n          this.federal_electoral_district_id = location.federal_electoral_district_id;\n          break;\n        case 'subnationalElectoralDistrict':\n          this.subnational_electoral_district_id = location.subnational_electoral_district_id;\n          break;\n        // Add more cases as needed for other types\n      }\n    },\n    // Helper function to get display text based on type\n    getDisplayTextForType: function getDisplayTextForType(type) {\n      switch (type) {\n        case 'city':\n          this.type = 'city';\n          return 'City';\n        case 'town':\n          this.type = 'town';\n          return 'Town';\n        case 'province':\n          this.type = 'province';\n          return 'Province';\n        case 'territory':\n          this.type = 'territory';\n          return 'Territory';\n        case 'federalElectoralDistrict':\n          this.type = 'federalElectoralDistrict';\n          return 'Federal Electoral District';\n        case 'subnationalElectoralDistrict':\n          this.type = 'subnationalElectoralDistrict';\n          return 'Subnational Electoral District';\n        default:\n          return '';\n      }\n    },\n    // Setter action for searchInput\n    setSearchInput: function setSearchInput(value) {\n      var _this$selectedLocatio;\n      if (((_this$selectedLocatio = this.selectedLocation) === null || _this$selectedLocatio === void 0 ? void 0 : _this$selectedLocatio.name) !== value) {\n        this.selectedLocation = null;\n      }\n      this.search = value;\n    },\n    // Helper function to reset location IDs\n    resetLocationIds: function resetLocationIds(matchingLocation) {\n      this.city_id = null;\n      this.province_id = null;\n      this.federal_electoral_district_id = null;\n      this.subnational_electoral_district_id = null;\n      if (matchingLocation) {\n        switch (matchingLocation.type) {\n          case 'city':\n            this.city_id = matchingLocation.city_id;\n            this.province_id = matchingLocation.province_id; // Assuming province_id is also part of city data\n            break;\n          case 'province':\n          case 'territory':\n            this.province_id = matchingLocation.province_id;\n            break;\n          case 'federalElectoralDistrict':\n            this.federal_electoral_district_id = matchingLocation.federal_electoral_district_id;\n            break;\n          case 'subnationalElectoralDistrict':\n            this.subnational_electoral_district_id = matchingLocation.subnational_electoral_district_id;\n            break;\n          // ... handle other types if needed\n        }\n      }\n    },\n    updateSearch: function updateSearch(query) {\n      this.search = query;\n    },\n    fetchNewsPersons: function fetchNewsPersons() {\n      var _this7 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var response;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.prev = 0;\n              _context3.next = 3;\n              return fetch('/api/news-persons');\n            case 3:\n              response = _context3.sent;\n              _context3.next = 6;\n              return response.json();\n            case 6:\n              _this7.newsPersons = _context3.sent;\n              _context3.next = 12;\n              break;\n            case 9:\n              _context3.prev = 9;\n              _context3.t0 = _context3[\"catch\"](0);\n              console.error('Failed to fetch news persons:', _context3.t0);\n            case 12:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, null, [[0, 9]]);\n      }))();\n    }\n  },\n  getters: {\n    filteredLocationSearchItems: function filteredLocationSearchItems(state) {\n      if (!state.search) return state.locationSearchItems;\n      return state.locationSearchItems.filter(function (item) {\n        return item.name.toLowerCase().includes(state.search.toLowerCase());\n      });\n    },\n    searchInput: function searchInput(state) {\n      if (state.selectedLocation) {\n        if (state.selectedLocation.type === 'city' || state.selectedLocation.type === 'town') {\n          return \"\".concat(state.selectedLocation.name, \", \").concat(state.selectedLocation.province_name);\n        }\n        return state.selectedLocation.name;\n      }\n      return state.search;\n    },\n    locationType: function locationType(state) {\n      if (!state.selectedLocation) {\n        state.type = '';\n        state.displayText = '';\n        return 'location type is not set';\n      }\n\n      // Assuming `selectedLocation` has a property to indicate its type\n      // Adjust the logic based on how you determine the type\n      switch (state.selectedLocation.type) {\n        case 'city':\n          state.type = 'city';\n          state.displayText = 'City';\n          break;\n        case 'town':\n          state.type = 'town';\n          state.displayText = 'Town';\n          break;\n        case 'province':\n          state.displayText = 'Province';\n          state.type = 'province';\n          break;\n        case 'territory':\n          state.displayText = 'Territory';\n          state.type = 'territory';\n          break;\n        case 'federalElectoralDistrict':\n          state.displayText = 'Federal Electoral District';\n          state.type = 'federalElectoralDistrict';\n          break;\n        case 'subnationalElectoralDistrict':\n          state.displayText = 'Subnational Electoral District';\n          state.type = 'subnationalElectoralDistrict';\n          break;\n        default:\n          state.displayText = '';\n          break;\n      }\n      return 'location type is set';\n    } // filteredNewsPersons: (state) => {\n    //     if (!state.searchQuery) return state.newsPersons;\n    //     return state.newsPersons.filter(person =>\n    //         person.user.name.toLowerCase().includes(state.searchQuery.toLowerCase())\n    //     );\n    // },\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Q2YsV0FBVyxHQUFHLFdBQVc7VUFDL0JlLEtBQUssQ0FBQ3hILElBQUksR0FBRyxXQUFXO1VBQ3hCO1FBQ0osS0FBSywwQkFBMEI7VUFDM0J3SCxLQUFLLENBQUNmLFdBQVcsR0FBRyw0QkFBNEI7VUFDaERlLEtBQUssQ0FBQ3hILElBQUksR0FBRywwQkFBMEI7VUFDdkM7UUFDSixLQUFLLDhCQUE4QjtVQUMvQndILEtBQUssQ0FBQ2YsV0FBVyxHQUFHLGdDQUFnQztVQUNwRGUsS0FBSyxDQUFDeEgsSUFBSSxHQUFHLDhCQUE4QjtVQUMzQztRQUNKO1VBQ0l3SCxLQUFLLENBQUNmLFdBQVcsR0FBRyxFQUFFO1VBQ3RCO01BQ1I7TUFFQSxPQUFPLHNCQUFzQjtJQUNqQyxDQUFDLENBQ0Q7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0VBQ0o7QUFFSixDQUFDLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvU3RvcmVzL05ld3NTdG9yZS5qcz8zZDEwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGRlZmluZVN0b3JlIH0gZnJvbSAncGluaWEnXG5cbmNvbnN0IGluaXRpYWxTdGF0ZSA9ICgpID0+ICh7XG4gICAgbmV3c1N0b3J5OiBbXSxcbiAgICBuZXdzQXJ0aWNsZUlkVGlwdG9wOiAnJyxcbiAgICBuZXdzQXJ0aWNsZVRpdGxlVGlwdG9wOiAnJyxcbiAgICBuZXdzQXJ0aWNsZUNvbnRlbnRUaXB0b3A6ICcnLFxuICAgIGNvbnRlbnRfanNvbjogJycsXG4gICAgbmV3c19jYXRlZ29yeV9pZDogbnVsbCxcbiAgICBuZXdzX2NhdGVnb3J5X3N1Yl9pZDogbnVsbCxcbiAgICBjYXRlZ29yaWVzOiBbXSxcbiAgICBzdWJjYXRlZ29yaWVzOiBbXSxcbiAgICBjaXR5X2lkOiAwLFxuICAgIHByb3ZpbmNlX2lkOiAwLFxuICAgIGZlZGVyYWxfZWxlY3RvcmFsX2Rpc3RyaWN0X2lkOiAwLFxuICAgIHN1Ym5hdGlvbmFsX2VsZWN0b3JhbF9kaXN0cmljdF9pZDogMCxcbiAgICB0eXBlOiAnJyxcbiAgICBkaXNwbGF5VGV4dDogJycsXG4gICAgY291bnRyeTogW10sXG4gICAgc2VsZWN0ZWRDYXRlZ29yeTogW10sIC8vIGluaXRpYWxseSBubyBzZWxlY3RlZCBjYXRlZ29yeVxuICAgIHNlbGVjdGVkU3ViY2F0ZWdvcnk6IFtdLFxuICAgIHNlbGVjdGVkTG9jYXRpb246IFtdLCAvLyB0aGUgc2VsZWN0ZWQgbG9jYXRpb25cbiAgICBsb2NhdGlvblNlYXJjaEl0ZW1zOiBbXSwgLy8gYXJyYXkgb2YgbG9jYXRpb25zIGZvciB0aGUgZHJvcGRvd25cbiAgICBjaXR5U2VsZWN0RHJvcGRvd25WaXNpYmxlOiBmYWxzZSwgLy8gdmlzaWJpbGl0eSBvZiB0aGUgZHJvcGRvd25cbiAgICBmb2N1c2VkSW5kZXg6IDAsIC8vIGZvciBtYW5hZ2luZyBmb2N1c2VkIGl0ZW0gaW4gdGhlIGRyb3Bkb3duXG4gICAgc2VhcmNoUXVlcnk6ICcnLFxuICAgIGZpbHRlcnM6IFtdLFxuICAgIHNlYXJjaDogJycsXG4gICAgZm9ybUVycm9yczogW10sXG4gICAgaXNMb2FkaW5nQ2F0ZWdvcnlDaXR5RGF0YTogZmFsc2UsXG4gICAgbmV3c1BlcnNvbnM6IFtdLFxuXG4gICAgLy8gQ29tcHV0ZWQgcHJvcGVydHkgZm9yIGRpc3BsYXlpbmdcbn0pXG5cbmV4cG9ydCBjb25zdCB1c2VOZXdzU3RvcmUgPSBkZWZpbmVTdG9yZSgnbmV3c1N0b3JlJywge1xuICAgIHN0YXRlOiBpbml0aWFsU3RhdGUsXG4gICAgYWN0aW9uczoge1xuICAgICAgICByZXNldCgpIHtcbiAgICAgICAgICAgIC8vIFJlc2V0IHRoZSBzdG9yZSB0byBpdHMgb3JpZ2luYWwgc3RhdGUgKGNsZWFyIGFsbCBkYXRhKVxuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLCBpbml0aWFsU3RhdGUoKSlcbiAgICAgICAgICAgIC8vIGF3YWl0IHRoaXMuc2V0U2VsZWN0ZWRMb2NhdGlvbigpXG4gICAgICAgIH0sXG4gICAgICAgIC8vIGxvYWQgTmV3c1N0b3J5IHByb3BzIGludG8gTmV3c1N0b3JlXG4gICAgICAgIGxvYWROZXdzU3RvcnkobmV3c1N0b3J5KSB7XG4gICAgICAgICAgICB0aGlzLm5ld3NTdG9yeSA9IG5ld3NTdG9yeVxuICAgICAgICB9LFxuICAgICAgICB1cGRhdGVOZXdzU3RvcnlEYXRhKG5ld3NTdG9yeSwgcmVsYXRlZERhdGEpIHtcbiAgICAgICAgICAgIHRoaXMubmV3c1N0b3J5ID0gbmV3c1N0b3J5XG4gICAgICAgICAgICB0aGlzLm5ld3NBcnRpY2xlSWRUaXB0b3AgPSBuZXdzU3RvcnkuaWRcbiAgICAgICAgICAgIHRoaXMubmV3c0FydGljbGVUaXRsZVRpcHRvcCA9IG5ld3NTdG9yeS50aXRsZVxuICAgICAgICAgICAgdGhpcy5uZXdzQXJ0aWNsZUNvbnRlbnRUaXB0b3AgPSBKU09OLnBhcnNlKG5ld3NTdG9yeS5jb250ZW50X2pzb24pXG4gICAgICAgICAgICB0aGlzLmNvbnRlbnRfanNvbiA9IEpTT04ucGFyc2UobmV3c1N0b3J5LmNvbnRlbnRfanNvbilcbiAgICAgICAgICAgIHRoaXMubmV3c19jYXRlZ29yeV9pZCA9IG5ld3NTdG9yeS5uZXdzX2NhdGVnb3J5X2lkXG4gICAgICAgICAgICB0aGlzLm5ld3NfY2F0ZWdvcnlfc3ViX2lkID0gbmV3c1N0b3J5Lm5ld3NfY2F0ZWdvcnlfc3ViX2lkXG4gICAgICAgICAgICB0aGlzLmNpdHlfaWQgPSBuZXdzU3RvcnkuY2l0eV9pZFxuICAgICAgICAgICAgdGhpcy5wcm92aW5jZV9pZCA9IG5ld3NTdG9yeS5wcm92aW5jZV9pZFxuICAgICAgICAgICAgdGhpcy5mZWRlcmFsX2VsZWN0b3JhbF9kaXN0cmljdF9pZCA9IG5ld3NTdG9yeS5mZWRlcmFsX2VsZWN0b3JhbF9kaXN0cmljdF9pZFxuICAgICAgICAgICAgdGhpcy5zdWJuYXRpb25hbF9lbGVjdG9yYWxfZGlzdHJpY3RfaWQgPSBuZXdzU3Rvcnkuc3VibmF0aW9uYWxfZWxlY3RvcmFsX2Rpc3RyaWN0X2lkXG4gICAgICAgICAgICB0aGlzLnR5cGUgPSBuZXdzU3RvcnkudHlwZVxuICAgICAgICAgICAgLy8gU2V0IHJlbGF0ZWQgZGF0YSB0aGF0IGlzbid0IHBhcnQgb2YgdGhlIG5ld3NTdG9yeSBvYmplY3RcbiAgICAgICAgICAgIHRoaXMuY291bnRyeSA9IHJlbGF0ZWREYXRhLmNvdW50cnlcbiAgICAgICAgICAgIHRoaXMuY2F0ZWdvcmllcyA9IHJlbGF0ZWREYXRhLmNhdGVnb3JpZXNcbiAgICAgICAgICAgIC8vIEFueSBhZGRpdGlvbmFsIHJlbGF0ZWQgZGF0YSBzZXR1cCBjYW4gZ28gaGVyZVxuICAgICAgICB9LFxuICAgICAgICAvLyBBY3Rpb24gdG8gc2V0IHRoZSBzZWxlY3RlZCBDYXRlZ29yeVxuICAgICAgICBzZXRTZWxlY3RlZENhdGVnb3J5KCkge1xuICAgICAgICAgICAgbGV0IG1hdGNoaW5nQ2F0ZWdvcnkgPSB0aGlzLmNhdGVnb3JpZXMuZmluZChjYXRlZ29yeSA9PiBjYXRlZ29yeS5pZCA9PT0gdGhpcy5uZXdzX2NhdGVnb3J5X2lkKVxuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZENhdGVnb3J5ID0gbWF0Y2hpbmdDYXRlZ29yeSB8fCBudWxsXG4gICAgICAgICAgICBpZiAodGhpcy5uZXdzX2NhdGVnb3J5X3N1Yl9pZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZ2V0U3ViY2F0ZWdvcmllcygpIC8vIEFmdGVyIHNldHRpbmcgdGhlIGNhdGVnb3J5LCBnZXQgdGhlIHN1YmNhdGVnb3J5XG4gICAgICAgICAgICAgICAgdGhpcy5nZXRTZWxlY3RlZFN1YmNhdGVnb3J5KCkgLy8gQ2FsbCBhZnRlciBzdWJjYXRlZ29yaWVzIGFyZSBwb3B1bGF0ZWRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIENoZWNrIGlmIHRoZSBzZWxlY3RlZCBjYXRlZ29yeSBpcyAzIChMb2NhbCBOZXdzKVxuICAgICAgICAgICAgaWYgKHRoaXMubmV3c19jYXRlZ29yeV9pZCA9PT0gMykge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0U2VsZWN0ZWRMb2NhdGlvbigpIC8vIFNldCB0aGUgTG9jYXRpb24gZm9yIExvY2FsIE5ld3NcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZXNldExvY2F0aW9uSWRzKCkgLy8gUmVzZXQgbG9jYXRpb24tcmVsYXRlZCBJRHMgZm9yIG90aGVyIGNhdGVnb3JpZXNcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgLy8gQWN0aW9uIHRvIGdldCB0aGUgU3ViY2F0ZWdvcmllc1xuICAgICAgICBnZXRTdWJjYXRlZ29yaWVzKCkge1xuXG4gICAgICAgICAgICAvLyBGaW5kIHRoZSBtYXRjaGluZyBjYXRlZ29yeSB1c2luZyBzZWxlY3RlZENhdGVnb3J5LmlkXG4gICAgICAgICAgICBjb25zdCBtYXRjaGluZ0NhdGVnb3J5ID0gdGhpcy5jYXRlZ29yaWVzLmZpbmQoY2F0ZWdvcnkgPT4gY2F0ZWdvcnkuaWQgPT09IHRoaXMuc2VsZWN0ZWRDYXRlZ29yeS5pZClcblxuICAgICAgICAgICAgaWYgKG1hdGNoaW5nQ2F0ZWdvcnkpIHtcbiAgICAgICAgICAgICAgICAvLyBTZXQgdGhlIHN1YmNhdGVnb3JpZXMgZnJvbSB0aGUgbWF0Y2hlZCBjYXRlZ29yeVxuICAgICAgICAgICAgICAgIHRoaXMuc3ViY2F0ZWdvcmllcyA9IG1hdGNoaW5nQ2F0ZWdvcnkubmV3c19jYXRlZ29yeV9zdWJzXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIEhhbmRsZSB0aGUgY2FzZSB3aGVyZSBubyBtYXRjaGluZyBjYXRlZ29yeSBpcyBmb3VuZFxuICAgICAgICAgICAgICAgIHRoaXMuc3ViY2F0ZWdvcmllcyA9IFtdIC8vIFNldCBzdWJjYXRlZ29yaWVzIHRvIGFuIGVtcHR5IGFycmF5XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ05vIG1hdGNoaW5nIGNhdGVnb3J5IGZvdW5kJylcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBnZXRTZWxlY3RlZFN1YmNhdGVnb3J5KCkge1xuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ3N0YXJ0IGdldHRpbmcgc2VsZWN0ZWQgc3ViY2F0ZWdvcnknKVxuXG4gICAgICAgICAgICAvLyBGaW5kIHRoZSBzdWJjYXRlZ29yeSB0aGF0IG1hdGNoZXMgdGhlIG5ld3NfY2F0ZWdvcnlfc3ViX2lkXG4gICAgICAgICAgICBjb25zdCBtYXRjaGluZ1N1YmNhdGVnb3J5ID0gdGhpcy5zdWJjYXRlZ29yaWVzLmZpbmQoc3ViY2F0ZWdvcnkgPT4gc3ViY2F0ZWdvcnkuaWQgPT09IHRoaXMubmV3c19jYXRlZ29yeV9zdWJfaWQpXG5cbiAgICAgICAgICAgIGlmIChtYXRjaGluZ1N1YmNhdGVnb3J5KSB7XG4gICAgICAgICAgICAgICAgLy8gU2V0IHRoZSBzZWxlY3RlZFN1YmNhdGVnb3J5IHRvIHRoZSBmb3VuZCBzdWJjYXRlZ29yeVxuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRTdWJjYXRlZ29yeSA9IG1hdGNoaW5nU3ViY2F0ZWdvcnlcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnc2VsZWN0ZWQgc3ViY2F0ZWdvcnkgdXBkYXRlZDonLCB0aGlzLnNlbGVjdGVkU3ViY2F0ZWdvcnkpXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIEhhbmRsZSB0aGUgY2FzZSB3aGVyZSBubyBtYXRjaGluZyBzdWJjYXRlZ29yeSBpcyBmb3VuZFxuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRTdWJjYXRlZ29yeSA9IG51bGxcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnTm8gbWF0Y2hpbmcgc3ViY2F0ZWdvcnkgZm91bmQnKVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIGFzeW5jIGZldGNoTG9jYXRpb25zRm9yU2VhcmNoKCkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKCcvYXBpL25ld3MtbG9jYXRpb25zJylcbiAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2Uub2spIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2NhdGlvblNlYXJjaEl0ZW1zID0gYXdhaXQgcmVzcG9uc2UuanNvbigpXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gSGFuZGxlIEhUVFAgZXJyb3IgcmVzcG9uc2VzIChlLmcuLCA0MDQsIDUwMClcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIGZldGNoIGxvY2F0aW9uczonLCByZXNwb25zZS5zdGF0dXNUZXh0KVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLmlzTG9hZGluZ0NhdGVnb3J5Q2l0eURhdGEgPSBmYWxzZVxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAvLyBIYW5kbGUgZXJyb3JzIHRoYXQgb2NjdXIgZHVyaW5nIHRoZSBmZXRjaCBvcGVyYXRpb25cbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyBsb2NhdGlvbnM6JywgZXJyb3IpXG4gICAgICAgICAgICAgICAgdGhpcy5pc0xvYWRpbmdDYXRlZ29yeUNpdHlEYXRhID0gZmFsc2VcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICAvLyBBY3Rpb24gdG8gc2V0IHRoZSBzZWxlY3RlZCBMb2NhdGlvblxuICAgICAgICBzZXRTZWxlY3RlZExvY2F0aW9uKCkge1xuICAgICAgICAgICAgbGV0IG1hdGNoaW5nTG9jYXRpb24gPSBudWxsXG5cbiAgICAgICAgICAgIC8vIFNpbXBsaWZpZWQgY29uZGl0aW9uYWwgbG9naWNcbiAgICAgICAgICAgIGlmICh0aGlzLmNpdHlfaWQpIHtcbiAgICAgICAgICAgICAgICBtYXRjaGluZ0xvY2F0aW9uID0gdGhpcy5sb2NhdGlvblNlYXJjaEl0ZW1zLmZpbmQobG9jYXRpb24gPT4gbG9jYXRpb24uY2l0eV9pZCA9PT0gdGhpcy5jaXR5X2lkKVxuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnByb3ZpbmNlX2lkKSB7XG4gICAgICAgICAgICAgICAgbWF0Y2hpbmdMb2NhdGlvbiA9IHRoaXMubG9jYXRpb25TZWFyY2hJdGVtcy5maW5kKGxvY2F0aW9uID0+IGxvY2F0aW9uLnByb3ZpbmNlX2lkID09PSB0aGlzLnByb3ZpbmNlX2lkICYmICFsb2NhdGlvbi5jaXR5X2lkKVxuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmZlZGVyYWxfZWxlY3RvcmFsX2Rpc3RyaWN0X2lkKSB7XG4gICAgICAgICAgICAgICAgbWF0Y2hpbmdMb2NhdGlvbiA9IHRoaXMubG9jYXRpb25TZWFyY2hJdGVtcy5maW5kKGxvY2F0aW9uID0+IGxvY2F0aW9uLmZlZGVyYWxfZWxlY3RvcmFsX2Rpc3RyaWN0X2lkID09PSB0aGlzLmZlZGVyYWxfZWxlY3RvcmFsX2Rpc3RyaWN0X2lkKVxuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnN1Ym5hdGlvbmFsX2VsZWN0b3JhbF9kaXN0cmljdF9pZCkge1xuICAgICAgICAgICAgICAgIG1hdGNoaW5nTG9jYXRpb24gPSB0aGlzLmxvY2F0aW9uU2VhcmNoSXRlbXMuZmluZChsb2NhdGlvbiA9PiBsb2NhdGlvbi5zdWJuYXRpb25hbF9lbGVjdG9yYWxfZGlzdHJpY3QuaWQgPT09IHRoaXMuc3VibmF0aW9uYWxfZWxlY3RvcmFsX2Rpc3RyaWN0X2lkKVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBIYW5kbGluZyBudWxsIGNhc2VcbiAgICAgICAgICAgIGlmIChtYXRjaGluZ0xvY2F0aW9uKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZExvY2F0aW9uID0gbWF0Y2hpbmdMb2NhdGlvblxuXG4gICAgICAgICAgICAgICAgLy8gU2V0IGRpc3BsYXlUZXh0IGJhc2VkIG9uIHR5cGVcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMudHlwZSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdjaXR5JzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGlzcGxheVRleHQgPSAnQ2l0eSdcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudHlwZSA9ICdjaXR5J1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAndG93bic6XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc3BsYXlUZXh0ID0gJ1Rvd24nXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnR5cGUgPSAndG93bidcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3Byb3ZpbmNlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGlzcGxheVRleHQgPSAnUHJvdmluY2UnXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnR5cGUgPSAncHJvdmluY2UnXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgICAgICBjYXNlICd0ZXJyaXRvcnknOlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXNwbGF5VGV4dCA9ICdUZXJyaXRvcnknXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnR5cGUgPSAndGVycml0b3J5J1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnZmVkZXJhbEVsZWN0b3JhbERpc3RyaWN0JzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGlzcGxheVRleHQgPSAnRmVkZXJhbCBFbGVjdG9yYWwgRGlzdHJpY3QnXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnR5cGUgPSAnZmVkZXJhbEVsZWN0b3JhbERpc3RyaWN0J1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnc3VibmF0aW9uYWxFbGVjdG9yYWxEaXN0cmljdCc6XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc3BsYXlUZXh0ID0gJ1N1Ym5hdGlvbmFsIEVsZWN0b3JhbCBEaXN0cmljdCdcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudHlwZSA9ICdzdWJuYXRpb25hbEVsZWN0b3JhbERpc3RyaWN0J1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGlzcGxheVRleHQgPSAnJ1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIEhhbmRsZSB0aGUgY2FzZSB3aGVyZSBubyBtYXRjaGluZyBsb2NhdGlvbiBpcyBmb3VuZFxuICAgICAgICAgICAgICAgIC8vIHRoaXMuc2VsZWN0ZWRMb2NhdGlvbiA9IG51bGxcbiAgICAgICAgICAgICAgICAvLyB0aGlzLnNlbGVjdGVkVHlwZSA9IG51bGxcbiAgICAgICAgICAgICAgICAvLyB0aGlzLmNpdHlfaWQgPSBudWxsIC8vIG9yIGtlZXAgdGhlIGV4aXN0aW5nIHZhbHVlP1xuICAgICAgICAgICAgICAgIC8vIHRoaXMudHlwZSA9IG51bGxcbiAgICAgICAgICAgICAgICAvLyB0aGlzLmRpc3BsYXlUZXh0ID0gJydcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgYXN5bmMgdXBkYXRlTmV3c1N0b3J5QW5kU2V0TG9jYXRpb24obmV3c1N0b3J5LCByZWxhdGVkRGF0YSkge1xuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCJOZXdzIHN0b3J5IHR5cGU6XCIsIG5ld3NTdG9yeS50eXBlKTsgLy8gT3IgcmVsYXRlZERhdGEudHlwZSwgZGVwZW5kaW5nIG9uIHlvdXIgc3RydWN0dXJlXG4gICAgICAgICAgICBhd2FpdCB0aGlzLmZldGNoTG9jYXRpb25zRm9yU2VhcmNoKCk7IC8vIExvYWQgbG9jYXRpb24gaXRlbXMgZmlyc3RcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwiTG9jYXRpb25zIGZldGNoZWRcIik7XG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgLy8gLy8gRXhhbXBsZTogU2V0IHRoaXMudHlwZSBiYXNlZCBvbiBuZXdzU3Rvcnkgb3IgcmVsYXRlZERhdGEgaWYgYXBwbGljYWJsZVxuICAgICAgICAgICAgLy8gdGhpcy50eXBlID0gbmV3c1N0b3J5LnR5cGUgfHwgcmVsYXRlZERhdGEudHlwZTsgLy8gQWRqdXN0IGJhc2VkIG9uIHlvdXIgZGF0YSBzdHJ1Y3R1cmVcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwiVHlwZSBzZXQgdG86XCIsIHRoaXMudHlwZSk7XG5cbiAgICAgICAgICAgIHRoaXMuc2V0U2VsZWN0ZWRMb2NhdGlvbigpOyAvLyBUaGVuIHNldCB0aGUgc2VsZWN0ZWQgbG9jYXRpb25cbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwiU2VsZWN0ZWQgbG9jYXRpb24gc2V0XCIpO1xuICAgICAgICAgICAgLy8gRmluYWxseSwgdXBkYXRlIHRoZSBuZXdzIHN0b3J5IGRhdGFcbiAgICAgICAgICAgIHRoaXMudXBkYXRlTmV3c1N0b3J5RGF0YShuZXdzU3RvcnksIHJlbGF0ZWREYXRhKTtcbiAgICAgICAgfSxcbi8vIEFjdGlvbiB0byBzZXQgdGhlIHNlbGVjdGVkIExvY2F0aW9uXG4gICAgICAgIHVwZGF0ZVNlbGVjdGVkTG9jYXRpb24obG9jYXRpb24pIHtcbiAgICAgICAgICAgIGlmICghbG9jYXRpb24pIHtcbiAgICAgICAgICAgICAgICAvLyBIYW5kbGUgdGhlIGNhc2Ugd2hlcmUgbm8gbG9jYXRpb24gaXMgcGFzc2VkXG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZExvY2F0aW9uID0gbnVsbFxuICAgICAgICAgICAgICAgIHRoaXMuZGlzcGxheVRleHQgPSAnJ1xuICAgICAgICAgICAgICAgIHRoaXMucmVzZXRMb2NhdGlvbklkcyhudWxsKVxuICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBVcGRhdGUgdGhlIHNlbGVjdGVkTG9jYXRpb24gYmFzZWQgb24gdGhlIHR5cGUgb2YgbG9jYXRpb25cbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRMb2NhdGlvbiA9IGxvY2F0aW9uXG4gICAgICAgICAgICB0aGlzLmRpc3BsYXlUZXh0ID0gdGhpcy5nZXREaXNwbGF5VGV4dEZvclR5cGUobG9jYXRpb24udHlwZSlcblxuICAgICAgICAgICAgLy8gVXBkYXRlIHRoZSByZWxldmFudCBJRHMgYmFzZWQgb24gdGhlIHR5cGVcbiAgICAgICAgICAgIHRoaXMuY2l0eV9pZCA9IG51bGxcbiAgICAgICAgICAgIHRoaXMucHJvdmluY2VfaWQgPSBudWxsXG4gICAgICAgICAgICB0aGlzLmZlZGVyYWxfZWxlY3RvcmFsX2Rpc3RyaWN0X2lkID0gbnVsbFxuICAgICAgICAgICAgdGhpcy5zdWJuYXRpb25hbF9lbGVjdG9yYWxfZGlzdHJpY3RfaWQgPSBudWxsXG5cbiAgICAgICAgICAgIHN3aXRjaCAobG9jYXRpb24udHlwZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ2NpdHknOlxuICAgICAgICAgICAgICAgIGNhc2UgJ3Rvd24nOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNpdHlfaWQgPSBsb2NhdGlvbi5jaXR5X2lkXG4gICAgICAgICAgICAgICAgICAgIC8vIEFzc3VtaW5nIHByb3ZpbmNlX2lkIGlzIGFsc28gcGFydCBvZiBjaXR5IGRhdGFcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm92aW5jZV9pZCA9IGxvY2F0aW9uLnByb3ZpbmNlX2lkIHx8IG51bGxcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICBjYXNlICdwcm92aW5jZSc6XG4gICAgICAgICAgICAgICAgY2FzZSAndGVycml0b3J5JzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm92aW5jZV9pZCA9IGxvY2F0aW9uLnByb3ZpbmNlX2lkXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgY2FzZSAnZmVkZXJhbEVsZWN0b3JhbERpc3RyaWN0JzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mZWRlcmFsX2VsZWN0b3JhbF9kaXN0cmljdF9pZCA9IGxvY2F0aW9uLmZlZGVyYWxfZWxlY3RvcmFsX2Rpc3RyaWN0X2lkXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgY2FzZSAnc3VibmF0aW9uYWxFbGVjdG9yYWxEaXN0cmljdCc6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3VibmF0aW9uYWxfZWxlY3RvcmFsX2Rpc3RyaWN0X2lkID0gbG9jYXRpb24uc3VibmF0aW9uYWxfZWxlY3RvcmFsX2Rpc3RyaWN0X2lkXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgLy8gQWRkIG1vcmUgY2FzZXMgYXMgbmVlZGVkIGZvciBvdGhlciB0eXBlc1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4vLyBIZWxwZXIgZnVuY3Rpb24gdG8gZ2V0IGRpc3BsYXkgdGV4dCBiYXNlZCBvbiB0eXBlXG4gICAgICAgIGdldERpc3BsYXlUZXh0Rm9yVHlwZSh0eXBlKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdjaXR5JzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50eXBlID0gJ2NpdHknXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnQ2l0eSdcbiAgICAgICAgICAgICAgICBjYXNlICd0b3duJzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50eXBlID0gJ3Rvd24nXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnVG93bidcbiAgICAgICAgICAgICAgICBjYXNlICdwcm92aW5jZSc6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudHlwZSA9ICdwcm92aW5jZSdcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdQcm92aW5jZSdcbiAgICAgICAgICAgICAgICBjYXNlICd0ZXJyaXRvcnknOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnR5cGUgPSAndGVycml0b3J5J1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1RlcnJpdG9yeSdcbiAgICAgICAgICAgICAgICBjYXNlICdmZWRlcmFsRWxlY3RvcmFsRGlzdHJpY3QnOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnR5cGUgPSAnZmVkZXJhbEVsZWN0b3JhbERpc3RyaWN0J1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ0ZlZGVyYWwgRWxlY3RvcmFsIERpc3RyaWN0J1xuICAgICAgICAgICAgICAgIGNhc2UgJ3N1Ym5hdGlvbmFsRWxlY3RvcmFsRGlzdHJpY3QnOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnR5cGUgPSAnc3VibmF0aW9uYWxFbGVjdG9yYWxEaXN0cmljdCdcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdTdWJuYXRpb25hbCBFbGVjdG9yYWwgRGlzdHJpY3QnXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICcnXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgLy8gU2V0dGVyIGFjdGlvbiBmb3Igc2VhcmNoSW5wdXRcbiAgICAgICAgc2V0U2VhcmNoSW5wdXQodmFsdWUpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnNlbGVjdGVkTG9jYXRpb24/Lm5hbWUgIT09IHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZExvY2F0aW9uID0gbnVsbFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5zZWFyY2ggPSB2YWx1ZVxuICAgICAgICB9LFxuXG4gICAgICAgIC8vIEhlbHBlciBmdW5jdGlvbiB0byByZXNldCBsb2NhdGlvbiBJRHNcbiAgICAgICAgcmVzZXRMb2NhdGlvbklkcyhtYXRjaGluZ0xvY2F0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLmNpdHlfaWQgPSBudWxsXG4gICAgICAgICAgICB0aGlzLnByb3ZpbmNlX2lkID0gbnVsbFxuICAgICAgICAgICAgdGhpcy5mZWRlcmFsX2VsZWN0b3JhbF9kaXN0cmljdF9pZCA9IG51bGxcbiAgICAgICAgICAgIHRoaXMuc3VibmF0aW9uYWxfZWxlY3RvcmFsX2Rpc3RyaWN0X2lkID0gbnVsbFxuXG4gICAgICAgICAgICBpZiAobWF0Y2hpbmdMb2NhdGlvbikge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAobWF0Y2hpbmdMb2NhdGlvbi50eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2NpdHknOlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jaXR5X2lkID0gbWF0Y2hpbmdMb2NhdGlvbi5jaXR5X2lkXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnByb3ZpbmNlX2lkID0gbWF0Y2hpbmdMb2NhdGlvbi5wcm92aW5jZV9pZCAvLyBBc3N1bWluZyBwcm92aW5jZV9pZCBpcyBhbHNvIHBhcnQgb2YgY2l0eSBkYXRhXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdwcm92aW5jZSc6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3RlcnJpdG9yeSc6XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnByb3ZpbmNlX2lkID0gbWF0Y2hpbmdMb2NhdGlvbi5wcm92aW5jZV9pZFxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnZmVkZXJhbEVsZWN0b3JhbERpc3RyaWN0JzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZmVkZXJhbF9lbGVjdG9yYWxfZGlzdHJpY3RfaWQgPSBtYXRjaGluZ0xvY2F0aW9uLmZlZGVyYWxfZWxlY3RvcmFsX2Rpc3RyaWN0X2lkXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdzdWJuYXRpb25hbEVsZWN0b3JhbERpc3RyaWN0JzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3VibmF0aW9uYWxfZWxlY3RvcmFsX2Rpc3RyaWN0X2lkID0gbWF0Y2hpbmdMb2NhdGlvbi5zdWJuYXRpb25hbF9lbGVjdG9yYWxfZGlzdHJpY3RfaWRcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgICAgIC8vIC4uLiBoYW5kbGUgb3RoZXIgdHlwZXMgaWYgbmVlZGVkXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB1cGRhdGVTZWFyY2gocXVlcnkpIHtcbiAgICAgICAgICAgIHRoaXMuc2VhcmNoID0gcXVlcnk7XG4gICAgICAgIH0sXG4gICAgICAgIGFzeW5jIGZldGNoTmV3c1BlcnNvbnMoKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goJy9hcGkvbmV3cy1wZXJzb25zJyk7XG4gICAgICAgICAgICAgICAgdGhpcy5uZXdzUGVyc29ucyA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIGZldGNoIG5ld3MgcGVyc29uczonLCBlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgfSxcblxuICAgIGdldHRlcnM6IHtcbiAgICAgICAgZmlsdGVyZWRMb2NhdGlvblNlYXJjaEl0ZW1zOiAoc3RhdGUpID0+IHtcbiAgICAgICAgICAgIGlmICghc3RhdGUuc2VhcmNoKSByZXR1cm4gc3RhdGUubG9jYXRpb25TZWFyY2hJdGVtcztcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZS5sb2NhdGlvblNlYXJjaEl0ZW1zLmZpbHRlcihpdGVtID0+XG4gICAgICAgICAgICAgICAgaXRlbS5uYW1lLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoc3RhdGUuc2VhcmNoLnRvTG93ZXJDYXNlKCkpXG4gICAgICAgICAgICApO1xuICAgICAgICB9LFxuICAgICAgICBzZWFyY2hJbnB1dDogKHN0YXRlKSA9PiB7XG4gICAgICAgICAgICBpZiAoc3RhdGUuc2VsZWN0ZWRMb2NhdGlvbikge1xuICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5zZWxlY3RlZExvY2F0aW9uLnR5cGUgPT09ICdjaXR5JyB8fCBzdGF0ZS5zZWxlY3RlZExvY2F0aW9uLnR5cGUgPT09ICd0b3duJykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYCR7c3RhdGUuc2VsZWN0ZWRMb2NhdGlvbi5uYW1lfSwgJHtzdGF0ZS5zZWxlY3RlZExvY2F0aW9uLnByb3ZpbmNlX25hbWV9YFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gc3RhdGUuc2VsZWN0ZWRMb2NhdGlvbi5uYW1lXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gc3RhdGUuc2VhcmNoXG4gICAgICAgIH0sXG4gICAgICAgIGxvY2F0aW9uVHlwZShzdGF0ZSkge1xuICAgICAgICAgICAgaWYgKCFzdGF0ZS5zZWxlY3RlZExvY2F0aW9uKSB7XG4gICAgICAgICAgICAgICAgc3RhdGUudHlwZSA9ICcnXG4gICAgICAgICAgICAgICAgc3RhdGUuZGlzcGxheVRleHQgPSAnJ1xuICAgICAgICAgICAgICAgIHJldHVybiAnbG9jYXRpb24gdHlwZSBpcyBub3Qgc2V0JztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQXNzdW1pbmcgYHNlbGVjdGVkTG9jYXRpb25gIGhhcyBhIHByb3BlcnR5IHRvIGluZGljYXRlIGl0cyB0eXBlXG4gICAgICAgICAgICAvLyBBZGp1c3QgdGhlIGxvZ2ljIGJhc2VkIG9uIGhvdyB5b3UgZGV0ZXJtaW5lIHRoZSB0eXBlXG4gICAgICAgICAgICBzd2l0Y2ggKHN0YXRlLnNlbGVjdGVkTG9jYXRpb24udHlwZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ2NpdHknOlxuICAgICAgICAgICAgICAgICAgICBzdGF0ZS50eXBlID0gJ2NpdHknO1xuICAgICAgICAgICAgICAgICAgICBzdGF0ZS5kaXNwbGF5VGV4dCA9ICdDaXR5JztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAndG93bic6XG4gICAgICAgICAgICAgICAgICAgIHN0YXRlLnR5cGUgPSAndG93bic7XG4gICAgICAgICAgICAgICAgICAgIHN0YXRlLmRpc3BsYXlUZXh0ID0gJ1Rvd24nO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdwcm92aW5jZSc6XG4gICAgICAgICAgICAgICAgICAgIHN0YXRlLmRpc3BsYXlUZXh0ID0gJ1Byb3ZpbmNlJ1xuICAgICAgICAgICAgICAgICAgICBzdGF0ZS50eXBlID0gJ3Byb3ZpbmNlJ1xuICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgIGNhc2UgJ3RlcnJpdG9yeSc6XG4gICAgICAgICAgICAgICAgICAgIHN0YXRlLmRpc3BsYXlUZXh0ID0gJ1RlcnJpdG9yeSdcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUudHlwZSA9ICd0ZXJyaXRvcnknXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgY2FzZSAnZmVkZXJhbEVsZWN0b3JhbERpc3RyaWN0JzpcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUuZGlzcGxheVRleHQgPSAnRmVkZXJhbCBFbGVjdG9yYWwgRGlzdHJpY3QnXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlLnR5cGUgPSAnZmVkZXJhbEVsZWN0b3JhbERpc3RyaWN0J1xuICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgIGNhc2UgJ3N1Ym5hdGlvbmFsRWxlY3RvcmFsRGlzdHJpY3QnOlxuICAgICAgICAgICAgICAgICAgICBzdGF0ZS5kaXNwbGF5VGV4dCA9ICdTdWJuYXRpb25hbCBFbGVjdG9yYWwgRGlzdHJpY3QnXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlLnR5cGUgPSAnc3VibmF0aW9uYWxFbGVjdG9yYWxEaXN0cmljdCdcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBzdGF0ZS5kaXNwbGF5VGV4dCA9ICcnXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiAnbG9jYXRpb24gdHlwZSBpcyBzZXQnO1xuICAgICAgICB9LFxuICAgICAgICAvLyBmaWx0ZXJlZE5ld3NQZXJzb25zOiAoc3RhdGUpID0+IHtcbiAgICAgICAgLy8gICAgIGlmICghc3RhdGUuc2VhcmNoUXVlcnkpIHJldHVybiBzdGF0ZS5uZXdzUGVyc29ucztcbiAgICAgICAgLy8gICAgIHJldHVybiBzdGF0ZS5uZXdzUGVyc29ucy5maWx0ZXIocGVyc29uID0+XG4gICAgICAgIC8vICAgICAgICAgcGVyc29uLnVzZXIubmFtZS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKHN0YXRlLnNlYXJjaFF1ZXJ5LnRvTG93ZXJDYXNlKCkpXG4gICAgICAgIC8vICAgICApO1xuICAgICAgICAvLyB9LFxuICAgIH0sXG5cbn0pXG5cbiJdLCJuYW1lcyI6WyJfcmVnZW5lcmF0b3JSdW50aW1lIiwiZSIsInQiLCJyIiwiT2JqZWN0IiwicHJvdG90eXBlIiwibiIsImhhc093blByb3BlcnR5IiwibyIsImRlZmluZVByb3BlcnR5IiwidmFsdWUiLCJpIiwiU3ltYm9sIiwiYSIsIml0ZXJhdG9yIiwiYyIsImFzeW5jSXRlcmF0b3IiLCJ1IiwidG9TdHJpbmdUYWciLCJkZWZpbmUiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJ3cmFwIiwiR2VuZXJhdG9yIiwiY3JlYXRlIiwiQ29udGV4dCIsIm1ha2VJbnZva2VNZXRob2QiLCJ0cnlDYXRjaCIsInR5cGUiLCJhcmciLCJjYWxsIiwiaCIsImwiLCJmIiwicyIsInkiLCJHZW5lcmF0b3JGdW5jdGlvbiIsIkdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlIiwicCIsImQiLCJnZXRQcm90b3R5cGVPZiIsInYiLCJ2YWx1ZXMiLCJnIiwiZGVmaW5lSXRlcmF0b3JNZXRob2RzIiwiZm9yRWFjaCIsIl9pbnZva2UiLCJBc3luY0l0ZXJhdG9yIiwiaW52b2tlIiwiX3R5cGVvZiIsInJlc29sdmUiLCJfX2F3YWl0IiwidGhlbiIsImNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnIiwiRXJyb3IiLCJkb25lIiwibWV0aG9kIiwiZGVsZWdhdGUiLCJtYXliZUludm9rZURlbGVnYXRlIiwic2VudCIsIl9zZW50IiwiZGlzcGF0Y2hFeGNlcHRpb24iLCJhYnJ1cHQiLCJUeXBlRXJyb3IiLCJyZXN1bHROYW1lIiwibmV4dCIsIm5leHRMb2MiLCJwdXNoVHJ5RW50cnkiLCJ0cnlMb2MiLCJjYXRjaExvYyIsImZpbmFsbHlMb2MiLCJhZnRlckxvYyIsInRyeUVudHJpZXMiLCJwdXNoIiwicmVzZXRUcnlFbnRyeSIsImNvbXBsZXRpb24iLCJyZXNldCIsImlzTmFOIiwibGVuZ3RoIiwiZGlzcGxheU5hbWUiLCJpc0dlbmVyYXRvckZ1bmN0aW9uIiwiY29uc3RydWN0b3IiLCJuYW1lIiwibWFyayIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiYXdyYXAiLCJhc3luYyIsIlByb21pc2UiLCJrZXlzIiwicmV2ZXJzZSIsInBvcCIsInByZXYiLCJjaGFyQXQiLCJzbGljZSIsInN0b3AiLCJydmFsIiwiaGFuZGxlIiwiY29tcGxldGUiLCJmaW5pc2giLCJfY2F0Y2giLCJkZWxlZ2F0ZVlpZWxkIiwiYXN5bmNHZW5lcmF0b3JTdGVwIiwiZ2VuIiwicmVqZWN0IiwiX25leHQiLCJfdGhyb3ciLCJrZXkiLCJpbmZvIiwiZXJyb3IiLCJfYXN5bmNUb0dlbmVyYXRvciIsImZuIiwic2VsZiIsImFyZ3MiLCJhcmd1bWVudHMiLCJhcHBseSIsImVyciIsInVuZGVmaW5lZCIsImRlZmluZVN0b3JlIiwiaW5pdGlhbFN0YXRlIiwibmV3c1N0b3J5IiwibmV3c0FydGljbGVJZFRpcHRvcCIsIm5ld3NBcnRpY2xlVGl0bGVUaXB0b3AiLCJuZXdzQXJ0aWNsZUNvbnRlbnRUaXB0b3AiLCJjb250ZW50X2pzb24iLCJuZXdzX2NhdGVnb3J5X2lkIiwibmV3c19jYXRlZ29yeV9zdWJfaWQiLCJjYXRlZ29yaWVzIiwic3ViY2F0ZWdvcmllcyIsImNpdHlfaWQiLCJwcm92aW5jZV9pZCIsImZlZGVyYWxfZWxlY3RvcmFsX2Rpc3RyaWN0X2lkIiwic3VibmF0aW9uYWxfZWxlY3RvcmFsX2Rpc3RyaWN0X2lkIiwiZGlzcGxheVRleHQiLCJjb3VudHJ5Iiwic2VsZWN0ZWRDYXRlZ29yeSIsInNlbGVjdGVkU3ViY2F0ZWdvcnkiLCJzZWxlY3RlZExvY2F0aW9uIiwibG9jYXRpb25TZWFyY2hJdGVtcyIsImNpdHlTZWxlY3REcm9wZG93blZpc2libGUiLCJmb2N1c2VkSW5kZXgiLCJzZWFyY2hRdWVyeSIsImZpbHRlcnMiLCJzZWFyY2giLCJmb3JtRXJyb3JzIiwiaXNMb2FkaW5nQ2F0ZWdvcnlDaXR5RGF0YSIsIm5ld3NQZXJzb25zIiwidXNlTmV3c1N0b3JlIiwic3RhdGUiLCJhY3Rpb25zIiwiYXNzaWduIiwibG9hZE5ld3NTdG9yeSIsInVwZGF0ZU5ld3NTdG9yeURhdGEiLCJyZWxhdGVkRGF0YSIsImlkIiwidGl0bGUiLCJKU09OIiwicGFyc2UiLCJzZXRTZWxlY3RlZENhdGVnb3J5IiwiX3RoaXMiLCJtYXRjaGluZ0NhdGVnb3J5IiwiZmluZCIsImNhdGVnb3J5IiwiZ2V0U3ViY2F0ZWdvcmllcyIsImdldFNlbGVjdGVkU3ViY2F0ZWdvcnkiLCJzZXRTZWxlY3RlZExvY2F0aW9uIiwicmVzZXRMb2NhdGlvbklkcyIsIl90aGlzMiIsIm5ld3NfY2F0ZWdvcnlfc3VicyIsImNvbnNvbGUiLCJsb2ciLCJfdGhpczMiLCJtYXRjaGluZ1N1YmNhdGVnb3J5Iiwic3ViY2F0ZWdvcnkiLCJmZXRjaExvY2F0aW9uc0ZvclNlYXJjaCIsIl90aGlzNCIsIl9jYWxsZWUiLCJyZXNwb25zZSIsIl9jYWxsZWUkIiwiX2NvbnRleHQiLCJmZXRjaCIsIm9rIiwianNvbiIsInN0YXR1c1RleHQiLCJ0MCIsIl90aGlzNSIsIm1hdGNoaW5nTG9jYXRpb24iLCJsb2NhdGlvbiIsInN1Ym5hdGlvbmFsX2VsZWN0b3JhbF9kaXN0cmljdCIsInVwZGF0ZU5ld3NTdG9yeUFuZFNldExvY2F0aW9uIiwiX3RoaXM2IiwiX2NhbGxlZTIiLCJfY2FsbGVlMiQiLCJfY29udGV4dDIiLCJ1cGRhdGVTZWxlY3RlZExvY2F0aW9uIiwiZ2V0RGlzcGxheVRleHRGb3JUeXBlIiwic2V0U2VhcmNoSW5wdXQiLCJfdGhpcyRzZWxlY3RlZExvY2F0aW8iLCJ1cGRhdGVTZWFyY2giLCJxdWVyeSIsImZldGNoTmV3c1BlcnNvbnMiLCJfdGhpczciLCJfY2FsbGVlMyIsIl9jYWxsZWUzJCIsIl9jb250ZXh0MyIsImdldHRlcnMiLCJmaWx0ZXJlZExvY2F0aW9uU2VhcmNoSXRlbXMiLCJmaWx0ZXIiLCJpdGVtIiwidG9Mb3dlckNhc2UiLCJpbmNsdWRlcyIsInNlYXJjaElucHV0IiwiY29uY2F0IiwicHJvdmluY2VfbmFtZSIsImxvY2F0aW9uVHlwZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/js/Stores/NewsStore.js\n");

/***/ })

}]);