"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk"] = self["webpackChunk"] || []).push([["resources_js_Stores_NewsStore_js"],{

/***/ "./resources/js/Stores/NewsStore.js":
/*!******************************************!*\
  !*** ./resources/js/Stores/NewsStore.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useNewsStore: () => (/* binding */ useNewsStore)\n/* harmony export */ });\n/* harmony import */ var pinia__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pinia */ \"./node_modules/pinia/dist/pinia.mjs\");\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, \"catch\": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nvar initialState = function initialState() {\n  return {\n    newsStory: [],\n    newsArticleIdTiptop: '',\n    newsArticleTitleTiptop: '',\n    newsArticleContentTiptop: '',\n    content_json: {},\n    news_category_id: null,\n    news_category_sub_id: null,\n    categories: [],\n    subcategories: [],\n    city_id: 0,\n    province_id: 0,\n    federal_electoral_district_id: 0,\n    subnational_electoral_district_id: 0,\n    type: '',\n    displayText: '',\n    country: [],\n    selectedCategory: [],\n    // initially no selected category\n    selectedSubcategory: [],\n    selectedLocation: [],\n    // the selected location\n    locationSearchItems: [],\n    // array of locations for the dropdown\n    citySelectDropdownVisible: false,\n    // visibility of the dropdown\n    focusedIndex: 0,\n    // for managing focused item in the dropdown\n    searchQuery: '',\n    filters: [],\n    search: '',\n    formErrors: [],\n    isLoadingCategoryCityData: false,\n    newsPersons: []\n\n    // Computed property for displaying\n  };\n};\nvar useNewsStore = (0,pinia__WEBPACK_IMPORTED_MODULE_0__.defineStore)('newsStore', {\n  state: initialState,\n  actions: {\n    reset: function reset() {\n      // Reset the store to its original state (clear all data)\n      Object.assign(this, initialState());\n      // await this.setSelectedLocation()\n    },\n    // load NewsStory props into NewsStore\n    loadNewsStory: function loadNewsStory(newsStory) {\n      this.newsStory = newsStory;\n    },\n    updateNewsStoryData: function updateNewsStoryData(newsStory, relatedData) {\n      this.newsStory = newsStory;\n      this.newsArticleIdTiptop = newsStory.id;\n      this.newsArticleTitleTiptop = newsStory.title;\n      this.newsArticleContentTiptop = JSON.parse(newsStory.content_json);\n      this.content_json = JSON.parse(newsStory.content_json);\n      this.news_category_id = newsStory.news_category_id;\n      this.news_category_sub_id = newsStory.news_category_sub_id;\n      this.city_id = newsStory.city_id;\n      this.province_id = newsStory.province_id;\n      this.federal_electoral_district_id = newsStory.federal_electoral_district_id;\n      this.subnational_electoral_district_id = newsStory.subnational_electoral_district_id;\n      this.type = newsStory.type;\n      // Set related data that isn't part of the newsStory object\n      this.country = relatedData.country;\n      this.categories = relatedData.categories;\n      // Any additional related data setup can go here\n    },\n    // Action to set the selected Category\n    setSelectedCategory: function setSelectedCategory() {\n      var _this = this;\n      var matchingCategory = this.categories.find(function (category) {\n        return category.id === _this.news_category_id;\n      });\n      this.selectedCategory = matchingCategory || null;\n      if (this.news_category_sub_id) {\n        this.getSubcategories(); // After setting the category, get the subcategory\n        this.getSelectedSubcategory(); // Call after subcategories are populated\n      }\n      // Check if the selected category is 3 (Local News)\n      if (this.news_category_id === 3) {\n        this.setSelectedLocation(); // Set the Location for Local News\n      } else {\n        this.resetLocationIds(); // Reset location-related IDs for other categories\n      }\n    },\n    // Action to get the Subcategories\n    getSubcategories: function getSubcategories() {\n      var _this2 = this;\n      // Find the matching category using selectedCategory.id\n      var matchingCategory = this.categories.find(function (category) {\n        return category.id === _this2.selectedCategory.id;\n      });\n      if (matchingCategory) {\n        // Set the subcategories from the matched category\n        this.subcategories = matchingCategory.news_category_subs;\n      } else {\n        // Handle the case where no matching category is found\n        this.subcategories = []; // Set subcategories to an empty array\n        console.log('No matching category found');\n      }\n    },\n    getSelectedSubcategory: function getSelectedSubcategory() {\n      var _this3 = this;\n      // console.log('start getting selected subcategory')\n\n      // Find the subcategory that matches the news_category_sub_id\n      var matchingSubcategory = this.subcategories.find(function (subcategory) {\n        return subcategory.id === _this3.news_category_sub_id;\n      });\n      if (matchingSubcategory) {\n        // Set the selectedSubcategory to the found subcategory\n        this.selectedSubcategory = matchingSubcategory;\n        // console.log('selected subcategory updated:', this.selectedSubcategory)\n      } else {\n        // Handle the case where no matching subcategory is found\n        this.selectedSubcategory = null;\n        // console.log('No matching subcategory found')\n      }\n    },\n    fetchLocationsForSearch: function fetchLocationsForSearch() {\n      var _this4 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var response;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return fetch('/api/news-locations');\n            case 3:\n              response = _context.sent;\n              if (!response.ok) {\n                _context.next = 10;\n                break;\n              }\n              _context.next = 7;\n              return response.json();\n            case 7:\n              _this4.locationSearchItems = _context.sent;\n              _context.next = 11;\n              break;\n            case 10:\n              // Handle HTTP error responses (e.g., 404, 500)\n              console.error('Failed to fetch locations:', response.statusText);\n            case 11:\n              _this4.isLoadingCategoryCityData = false;\n              _context.next = 18;\n              break;\n            case 14:\n              _context.prev = 14;\n              _context.t0 = _context[\"catch\"](0);\n              // Handle errors that occur during the fetch operation\n              console.error('Error fetching locations:', _context.t0);\n              _this4.isLoadingCategoryCityData = false;\n            case 18:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[0, 14]]);\n      }))();\n    },\n    // Action to set the selected Location\n    setSelectedLocation: function setSelectedLocation() {\n      var _this5 = this;\n      var matchingLocation = null;\n\n      // Simplified conditional logic\n      if (this.city_id) {\n        matchingLocation = this.locationSearchItems.find(function (location) {\n          return location.city_id === _this5.city_id;\n        });\n      } else if (this.province_id) {\n        matchingLocation = this.locationSearchItems.find(function (location) {\n          return location.province_id === _this5.province_id && !location.city_id;\n        });\n      } else if (this.federal_electoral_district_id) {\n        matchingLocation = this.locationSearchItems.find(function (location) {\n          return location.federal_electoral_district_id === _this5.federal_electoral_district_id;\n        });\n      } else if (this.subnational_electoral_district_id) {\n        matchingLocation = this.locationSearchItems.find(function (location) {\n          return location.subnational_electoral_district.id === _this5.subnational_electoral_district_id;\n        });\n      }\n\n      // Handling null case\n      if (matchingLocation) {\n        this.selectedLocation = matchingLocation;\n\n        // Set displayText based on type\n        switch (this.type) {\n          case 'city':\n            this.displayText = 'City';\n            this.type = 'city';\n            break;\n          case 'town':\n            this.displayText = 'Town';\n            this.type = 'town';\n            break;\n          case 'province':\n            this.displayText = 'Province';\n            this.type = 'province';\n            break;\n          case 'territory':\n            this.displayText = 'Territory';\n            this.type = 'territory';\n            break;\n          case 'federalElectoralDistrict':\n            this.displayText = 'Federal Electoral District';\n            this.type = 'federalElectoralDistrict';\n            break;\n          case 'subnationalElectoralDistrict':\n            this.displayText = 'Subnational Electoral District';\n            this.type = 'subnationalElectoralDistrict';\n            break;\n          default:\n            this.displayText = '';\n            break;\n        }\n      } else {\n        // Handle the case where no matching location is found\n        // this.selectedLocation = null\n        // this.selectedType = null\n        // this.city_id = null // or keep the existing value?\n        // this.type = null\n        // this.displayText = ''\n      }\n    },\n    updateNewsStoryAndSetLocation: function updateNewsStoryAndSetLocation(newsStory, relatedData) {\n      var _this6 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _this6.fetchLocationsForSearch();\n            case 2:\n              // Load location items first\n              // console.log(\"Locations fetched\");\n              //\n              // // Example: Set this.type based on newsStory or relatedData if applicable\n              // this.type = newsStory.type || relatedData.type; // Adjust based on your data structure\n              // console.log(\"Type set to:\", this.type);\n\n              _this6.setSelectedLocation(); // Then set the selected location\n              // console.log(\"Selected location set\");\n              // Finally, update the news story data\n              _this6.updateNewsStoryData(newsStory, relatedData);\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2);\n      }))();\n    },\n    // Action to set the selected Location\n    updateSelectedLocation: function updateSelectedLocation(location) {\n      if (!location) {\n        // Handle the case where no location is passed\n        this.selectedLocation = null;\n        this.displayText = '';\n        this.resetLocationIds(null);\n        return;\n      }\n\n      // Update the selectedLocation based on the type of location\n      this.selectedLocation = location;\n      this.displayText = this.getDisplayTextForType(location.type);\n\n      // Update the relevant IDs based on the type\n      this.city_id = null;\n      this.province_id = null;\n      this.federal_electoral_district_id = null;\n      this.subnational_electoral_district_id = null;\n      switch (location.type) {\n        case 'city':\n        case 'town':\n          this.city_id = location.city_id;\n          // Assuming province_id is also part of city data\n          this.province_id = location.province_id || null;\n          break;\n        case 'province':\n        case 'territory':\n          this.province_id = location.province_id;\n          break;\n        case 'federalElectoralDistrict':\n          this.federal_electoral_district_id = location.federal_electoral_district_id;\n          break;\n        case 'subnationalElectoralDistrict':\n          this.subnational_electoral_district_id = location.subnational_electoral_district_id;\n          break;\n        // Add more cases as needed for other types\n      }\n    },\n    // Helper function to get display text based on type\n    getDisplayTextForType: function getDisplayTextForType(type) {\n      switch (type) {\n        case 'city':\n          this.type = 'city';\n          return 'City';\n        case 'town':\n          this.type = 'town';\n          return 'Town';\n        case 'province':\n          this.type = 'province';\n          return 'Province';\n        case 'territory':\n          this.type = 'territory';\n          return 'Territory';\n        case 'federalElectoralDistrict':\n          this.type = 'federalElectoralDistrict';\n          return 'Federal Electoral District';\n        case 'subnationalElectoralDistrict':\n          this.type = 'subnationalElectoralDistrict';\n          return 'Subnational Electoral District';\n        default:\n          return '';\n      }\n    },\n    // Setter action for searchInput\n    setSearchInput: function setSearchInput(value) {\n      var _this$selectedLocatio;\n      if (((_this$selectedLocatio = this.selectedLocation) === null || _this$selectedLocatio === void 0 ? void 0 : _this$selectedLocatio.name) !== value) {\n        this.selectedLocation = null;\n      }\n      this.search = value;\n    },\n    // Helper function to reset location IDs\n    resetLocationIds: function resetLocationIds(matchingLocation) {\n      this.city_id = null;\n      this.province_id = null;\n      this.federal_electoral_district_id = null;\n      this.subnational_electoral_district_id = null;\n      if (matchingLocation) {\n        switch (matchingLocation.type) {\n          case 'city':\n            this.city_id = matchingLocation.city_id;\n            this.province_id = matchingLocation.province_id; // Assuming province_id is also part of city data\n            break;\n          case 'province':\n          case 'territory':\n            this.province_id = matchingLocation.province_id;\n            break;\n          case 'federalElectoralDistrict':\n            this.federal_electoral_district_id = matchingLocation.federal_electoral_district_id;\n            break;\n          case 'subnationalElectoralDistrict':\n            this.subnational_electoral_district_id = matchingLocation.subnational_electoral_district_id;\n            break;\n          // ... handle other types if needed\n        }\n      }\n    },\n    updateSearch: function updateSearch(query) {\n      this.search = query;\n    },\n    fetchNewsPersons: function fetchNewsPersons() {\n      var _this7 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var response;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.prev = 0;\n              _context3.next = 3;\n              return fetch('/api/news-persons');\n            case 3:\n              response = _context3.sent;\n              _context3.next = 6;\n              return response.json();\n            case 6:\n              _this7.newsPersons = _context3.sent;\n              _context3.next = 12;\n              break;\n            case 9:\n              _context3.prev = 9;\n              _context3.t0 = _context3[\"catch\"](0);\n              console.error('Failed to fetch news persons:', _context3.t0);\n            case 12:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, null, [[0, 9]]);\n      }))();\n    }\n  },\n  getters: {\n    filteredLocationSearchItems: function filteredLocationSearchItems(state) {\n      if (!state.search) return state.locationSearchItems;\n      return state.locationSearchItems.filter(function (item) {\n        return item.name.toLowerCase().includes(state.search.toLowerCase());\n      });\n    },\n    searchInput: function searchInput(state) {\n      if (state.selectedLocation) {\n        if (state.selectedLocation.type === 'city' || state.selectedLocation.type === 'town') {\n          return \"\".concat(state.selectedLocation.name, \", \").concat(state.selectedLocation.province_name);\n        }\n        return state.selectedLocation.name;\n      }\n      return state.search;\n    },\n    locationType: function locationType(state) {\n      if (!state.selectedLocation) {\n        state.type = '';\n        state.displayText = '';\n        return 'location type is not set';\n      }\n\n      // Assuming `selectedLocation` has a property to indicate its type\n      // Adjust the logic based on how you determine the type\n      switch (state.selectedLocation.type) {\n        case 'city':\n          state.type = 'city';\n          state.displayText = 'City';\n          break;\n        case 'town':\n          state.type = 'town';\n          state.displayText = 'Town';\n          break;\n        case 'province':\n          state.displayText = 'Province';\n          state.type = 'province';\n          break;\n        case 'territory':\n          state.displayText = 'Territory';\n          state.type = 'territory';\n          break;\n        case 'federalElectoralDistrict':\n          state.displayText = 'Federal Electoral District';\n          state.type = 'federalElectoralDistrict';\n          break;\n        case 'subnationalElectoralDistrict':\n          state.displayText = 'Subnational Electoral District';\n          state.type = 'subnationalElectoralDistrict';\n          break;\n        default:\n          state.displayText = '';\n          break;\n      }\n      return 'location type is set';\n    } // filteredNewsPersons: (state) => {\n    //     if (!state.searchQuery) return state.newsPersons;\n    //     return state.newsPersons.filter(person =>\n    //         person.user.name.toLowerCase().includes(state.searchQuery.toLowerCase())\n    //     );\n    // },\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/Stores/NewsStore.js\n");

/***/ })

}]);