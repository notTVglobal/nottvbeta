"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunknottvbeta"] = self["webpackChunknottvbeta"] || []).push([["resources_js_Stores_NewsStore_js"],{

/***/ "./resources/js/Stores/NewsStore.js":
/*!******************************************!*\
  !*** ./resources/js/Stores/NewsStore.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useNewsStore: () => (/* binding */ useNewsStore)\n/* harmony export */ });\n/* harmony import */ var pinia__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! pinia */ \"./node_modules/pinia/dist/pinia.mjs\");\n/* harmony import */ var _inertiajs_vue3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @inertiajs/vue3 */ \"./node_modules/@inertiajs/vue3/dist/index.esm.js\");\n/* harmony import */ var _Stores_NotificationStore__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/Stores/NotificationStore */ \"./resources/js/Stores/NotificationStore.js\");\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _iterableToArray(r) { if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r); }\nfunction _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, \"catch\": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); }); }; }\n\n\n\nvar initialState = function initialState() {\n  return {\n    id: null,\n    slug: '',\n    title: '',\n    content: '',\n    newsPerson: [],\n    category: {},\n    subCategory: {},\n    city: {},\n    province: {},\n    federalElectoralDistrict: {},\n    subnationalElectoralDistrict: {},\n    country: [],\n    image: {},\n    status: [],\n    video: {},\n    created_at: '',\n    published_at: '',\n    cachedContent: {},\n    categories: [],\n    subCategories: [],\n    type: '',\n    displayText: '',\n    newsPersons: [],\n    // selectedCategory: [], // initially no selected category\n    // selectedSubcategory: [],\n    // selectedLocation: [], // the selected location\n    // selectedNewsPerson: [],\n\n    citySearchItems: [],\n    // array of locations for the dropdown\n\n    showEditor: false,\n    showNewsPersonSelector: false,\n    showCategoryCitySelector: false,\n    citySelectDropdownVisible: false,\n    // visibility of the dropdown\n    showSaveMessage: false,\n    focusedIndex: 0,\n    // for managing focused item in the dropdown\n    searchQuery: '',\n    filters: [],\n    search: '',\n    errors: [],\n    newsStoryStatuses: {},\n    newsStoryId: '',\n    isLoadingCategoryCityData: false,\n    isLoading: true,\n    processing: false,\n    latestStories: [],\n    newsStories: [],\n    currentPage: 1,\n    totalPages: 1,\n    selectedSubCategoryId: '',\n    selectedSubCategoryName: '',\n    selectedSubCategoryDescription: '',\n    selectedCategoryId: null,\n    selectedCityId: null,\n    selectedFederalDistrictId: null,\n    selectedSubnationalDistrictId: null\n    // Computed property for displaying\n  };\n};\nvar useNewsStore = (0,pinia__WEBPACK_IMPORTED_MODULE_2__.defineStore)('newsStore', {\n  state: initialState,\n  actions: {\n    reset: function reset() {\n      // Reset the store to its original state (clear all data)\n      Object.assign(this, initialState());\n      // await this.setSelectedLocation()\n    },\n    initializeNewsStore: function initializeNewsStore(newsStory) {\n      this.id = newsStory.id;\n      this.slug = newsStory.slug;\n      this.title = newsStory.title;\n      this.status = newsStory.status;\n      this.content = newsStory.content;\n      this.newsPerson = newsStory.newsPerson;\n      this.category = newsStory.category;\n      this.subCategory = newsStory.subCategory;\n      this.city = newsStory.city;\n      this.province = newsStory.province;\n      this.federalElectoralDistrict = newsStory.federalElectoralDistrict;\n      this.subnationalElectoralDistrict = newsStory.subnationalElectoralDistrict;\n      this.image = newsStory.image;\n      this.video = newsStory.video;\n      this.created_at = newsStory.created_at;\n      this.published_at = newsStory.published_at;\n      this.cachedContent = newsStory.cachedContent;\n    },\n    toggleCategoryCitySelector: function toggleCategoryCitySelector() {\n      this.showCategoryCitySelector = !this.showCategoryCitySelector;\n    },\n    toggleNewsPersonSelector: function toggleNewsPersonSelector() {\n      this.showNewsPersonSelector = !this.showNewsPersonSelector;\n    },\n    // Action to set the selected Category\n    setSelectedCategory: function setSelectedCategory() {\n      var _this = this;\n      var matchingCategory = this.categories.find(function (category) {\n        return category.id === _this.news_category_id;\n      });\n      this.selectedCategory = matchingCategory || null;\n      if (this.news_category_sub_id) {}\n      // Check if the selected category is 3 (Local News)\n      if (this.news_category_id === 3) {\n        this.setSelectedLocation(); // Set the Location for Local News\n      } else {\n        this.resetLocationIds(); // Reset location-related IDs for other categories\n      }\n    },\n    fetchCategories: function fetchCategories() {\n      var _this2 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var response;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _this2.isLoadingCityData = true;\n              _context.prev = 1;\n              _context.next = 4;\n              return fetch('/api/news/categories');\n            case 4:\n              response = _context.sent;\n              if (!response.ok) {\n                _context.next = 11;\n                break;\n              }\n              _context.next = 8;\n              return response.json();\n            case 8:\n              _this2.categories = _context.sent;\n              _context.next = 12;\n              break;\n            case 11:\n              console.error('Failed to fetch categories:', response.statusText);\n            case 12:\n              _context.next = 17;\n              break;\n            case 14:\n              _context.prev = 14;\n              _context.t0 = _context[\"catch\"](1);\n              console.error('Error fetching categories:', _context.t0);\n            case 17:\n              _context.prev = 17;\n              _this2.isLoadingCityData = false;\n              return _context.finish(17);\n            case 20:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[1, 14, 17, 20]]);\n      }))();\n    },\n    fetchCitiesForSearch: function fetchCitiesForSearch() {\n      var _this3 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var response;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return fetch('/api/news/cities');\n            case 3:\n              response = _context2.sent;\n              if (!response.ok) {\n                _context2.next = 10;\n                break;\n              }\n              _context2.next = 7;\n              return response.json();\n            case 7:\n              _this3.citySearchItems = _context2.sent;\n              _context2.next = 11;\n              break;\n            case 10:\n              // Handle HTTP error responses (e.g., 404, 500)\n              console.error('Failed to fetch locations:', response.statusText);\n            case 11:\n              _this3.isLoadingCityData = false;\n              _context2.next = 18;\n              break;\n            case 14:\n              _context2.prev = 14;\n              _context2.t0 = _context2[\"catch\"](0);\n              // Handle errors that occur during the fetch operation\n              console.error('Error fetching locations:', _context2.t0);\n              _this3.isLoadingCityData = false;\n            case 18:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, null, [[0, 14]]);\n      }))();\n    },\n    // Action to set the selected Location\n    setSelectedLocation: function setSelectedLocation() {\n      var _this4 = this;\n      // Reset all location types\n      this.city = {};\n      this.province = {};\n      this.federalElectoralDistrict = {};\n      this.subnationalElectoralDistrict = {};\n      var matchingLocation = null;\n\n      // Simplified conditional logic\n      if (this.city.id) {\n        matchingLocation = this.citySearchItems.find(function (location) {\n          return location.id === _this4.city.id && (location.type === 'city' || location.type === 'town');\n        });\n      } else if (this.province.id) {\n        matchingLocation = this.citySearchItems.find(function (location) {\n          return location.id === _this4.province.id && location.type === 'province';\n        });\n      } else if (this.federalElectoralDistrict.id) {\n        matchingLocation = this.citySearchItems.find(function (location) {\n          return location.id === _this4.federalElectoralDistrict.id && location.type === 'federalElectoralDistrict';\n        });\n      } else if (this.subnationalElectoralDistrict.id) {\n        matchingLocation = this.citySearchItems.find(function (location) {\n          return location.id === _this4.subnationalElectoralDistrict.id && location.type === 'subnationalElectoralDistrict';\n        });\n      }\n\n      // Handling null case\n      if (matchingLocation) {\n        // Set the appropriate location object\n        switch (matchingLocation.type) {\n          case 'city':\n          case 'town':\n            this.city = {\n              id: matchingLocation.id,\n              name: matchingLocation.name,\n              type: matchingLocation.type\n            };\n            this.province = {\n              id: matchingLocation.province.id,\n              name: matchingLocation.province.name\n            };\n            this.displayText = \"\".concat(matchingLocation.name, \", \").concat(matchingLocation.province.name);\n            break;\n          case 'province':\n            this.province = {\n              id: matchingLocation.id,\n              name: matchingLocation.name,\n              type: matchingLocation.type\n            };\n            this.displayText = matchingLocation.name;\n            break;\n          case 'federalElectoralDistrict':\n            this.federalElectoralDistrict = {\n              id: matchingLocation.id,\n              name: matchingLocation.name,\n              type: matchingLocation.type\n            };\n            this.displayText = matchingLocation.name;\n            break;\n          case 'subnationalElectoralDistrict':\n            this.subnationalElectoralDistrict = {\n              id: matchingLocation.id,\n              name: matchingLocation.name,\n              type: matchingLocation.type\n            };\n            this.displayText = matchingLocation.name;\n            break;\n          default:\n            this.displayText = '';\n            break;\n        }\n      } else {\n        // Handle the case where no matching location is found\n        this.displayText = '';\n      }\n    },\n    fetchCitiesAndCategories: function fetchCitiesAndCategories() {\n      var _this5 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _this5.fetchCitiesForSearch();\n            case 2:\n              // Load location items first\n              _this5.setSelectedLocation(); // Then set the selected location\n            case 3:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3);\n      }))();\n    },\n    // Action to set the selected Location\n    updateSelectedLocation: function updateSelectedLocation(location) {\n      if (!location) {\n        // Handle the case where no location is passed\n        this.city = {};\n        this.province = {};\n        this.federalElectoralDistrict = {};\n        this.subnationalElectoralDistrict = {};\n        this.displayText = '';\n        return;\n      }\n\n      // Update the selectedLocation based on the type of location\n      this.selectedLocation = location;\n      this.displayText = this.getDisplayTextForType(location.type);\n\n      // Reset all location types\n      this.city = {};\n      this.province = {};\n      this.federalElectoralDistrict = {};\n      this.subnationalElectoralDistrict = {};\n\n      // Update the selected location based on the type of location\n      this.displayText = this.getDisplayTextForType(location.type);\n      switch (location.type) {\n        case 'city':\n        case 'town':\n          this.city = {\n            id: location.id,\n            name: location.name,\n            province: location.province\n          };\n          this.province = {\n            id: location.province.id,\n            name: location.province.name\n          };\n          this.displayText = \"\".concat(location.name, \", \").concat(location.province.name);\n          break;\n        case 'province':\n        case 'territory':\n          this.province = {\n            id: location.id,\n            name: location.name,\n            type: location.type\n          };\n          this.displayText = location.name;\n          break;\n        case 'federalElectoralDistrict':\n          this.federalElectoralDistrict = {\n            id: location.id,\n            name: location.name,\n            type: location.type\n          };\n          this.displayText = location.name;\n          break;\n        case 'subnationalElectoralDistrict':\n          this.subnationalElectoralDistrict = {\n            id: location.id,\n            name: location.name,\n            type: location.type\n          };\n          this.displayText = location.name;\n          break;\n        default:\n          this.displayText = '';\n          break;\n      }\n    },\n    // Helper function to get display text based on type\n    getDisplayTextForType: function getDisplayTextForType(type) {\n      switch (type) {\n        case 'city':\n          this.type = 'city';\n          return 'City';\n        case 'town':\n          this.type = 'town';\n          return 'Town';\n        case 'province':\n          this.type = 'province';\n          return 'Province';\n        case 'territory':\n          this.type = 'territory';\n          return 'Territory';\n        case 'federalElectoralDistrict':\n          this.type = 'federalElectoralDistrict';\n          return 'Federal Electoral District';\n        case 'subnationalElectoralDistrict':\n          this.type = 'subnationalElectoralDistrict';\n          return 'Subnational Electoral District';\n        default:\n          return '';\n      }\n    },\n    // Setter action for searchInput\n    setSearchInput: function setSearchInput(value) {\n      this.search = value;\n    },\n    // Helper function to reset location IDs\n    resetLocationIds: function resetLocationIds(matchingLocation) {\n      this.city_id = null;\n      this.province_id = null;\n      this.federal_electoral_district_id = null;\n      this.subnational_electoral_district_id = null;\n      if (matchingLocation) {\n        switch (matchingLocation.type) {\n          case 'city':\n            this.city_id = matchingLocation.city_id;\n            this.province_id = matchingLocation.province_id; // Assuming province_id is also part of city data\n            break;\n          case 'province':\n          case 'territory':\n            this.province_id = matchingLocation.province_id;\n            break;\n          case 'federalElectoralDistrict':\n            this.federal_electoral_district_id = matchingLocation.federal_electoral_district_id;\n            break;\n          case 'subnationalElectoralDistrict':\n            this.subnational_electoral_district_id = matchingLocation.subnational_electoral_district_id;\n            break;\n          // ... handle other types if needed\n        }\n      }\n    },\n    updateSearch: function updateSearch(query) {\n      this.search = query;\n    },\n    fetchNewsPersons: function fetchNewsPersons() {\n      var _this6 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var response;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              console.log('get news persons');\n              _context4.prev = 1;\n              _context4.next = 4;\n              return fetch('/api/news/persons');\n            case 4:\n              response = _context4.sent;\n              _context4.next = 7;\n              return response.json();\n            case 7:\n              _this6.newsPersons = _context4.sent;\n              _context4.next = 13;\n              break;\n            case 10:\n              _context4.prev = 10;\n              _context4.t0 = _context4[\"catch\"](1);\n              console.error('Failed to fetch news persons:', _context4.t0);\n            case 13:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, null, [[1, 10]]);\n      }))();\n    },\n    setNewsPerson: function setNewsPerson(newNewsPerson) {\n      this.newsPerson = newNewsPerson;\n    },\n    submit: function submit() {\n      var _this7 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        var data;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              _this7.processing = true;\n              data = {\n                id: _this7.id,\n                title: _this7.title,\n                status: _this7.status.id,\n                content: _this7.content,\n                news_category_id: _this7.category.id,\n                news_category_sub_id: _this7.subCategory.id,\n                city_id: _this7.city.id,\n                province_id: _this7.province.id,\n                federal_electoral_district_id: _this7.federalElectoralDistrict.id,\n                subnational_electoral_district_id: _this7.subnationalElectoralDistrict.id,\n                type: _this7.type,\n                news_person_id: _this7.newsPerson.id\n              };\n              _context5.prev = 2;\n              if (!_this7.id) {\n                _context5.next = 8;\n                break;\n              }\n              _context5.next = 6;\n              return _inertiajs_vue3__WEBPACK_IMPORTED_MODULE_0__.router.patch(route('newsStory.update', _this7.slug), data, {\n                onError: function onError(errors) {\n                  _this7.errors = errors;\n                  _this7.processing = false;\n                },\n                onSuccess: function onSuccess() {\n                  _this7.processing = false;\n                }\n              });\n            case 6:\n              _context5.next = 10;\n              break;\n            case 8:\n              _context5.next = 10;\n              return _inertiajs_vue3__WEBPACK_IMPORTED_MODULE_0__.router.post(route('newsStory.store'), data, {\n                onError: function onError(errors) {\n                  _this7.errors = errors;\n                  _this7.processing = false;\n                },\n                onSuccess: function onSuccess() {\n                  _this7.processing = false;\n                }\n              });\n            case 10:\n              _context5.next = 16;\n              break;\n            case 12:\n              _context5.prev = 12;\n              _context5.t0 = _context5[\"catch\"](2);\n              console.error('An unexpected error occurred:', _context5.t0);\n              _this7.processing = false;\n            case 16:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5, null, [[2, 12]]);\n      }))();\n    },\n    publish: function publish(newsStory) {\n      var _this8 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.next = 2;\n              return _inertiajs_vue3__WEBPACK_IMPORTED_MODULE_0__.router.patch(route('newsroom.publish', newsStory), {\n                onError: function onError(errors) {\n                  _this8.errors = errors;\n                  _this8.processing = false;\n                  notificationStore.setToastNotification(errors, 'error');\n                },\n                onSuccess: function onSuccess() {\n                  _this8.processing = false;\n                  var notificationStore = (0,_Stores_NotificationStore__WEBPACK_IMPORTED_MODULE_1__.useNotificationStore)();\n                  notificationStore.setToastNotification('News story published successfully.', 'success');\n                }\n              });\n            case 2:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee6);\n      }))();\n    },\n    changeNewsStoryStatus: function changeNewsStoryStatus(statusId) {\n      document.getElementById('newsStoryStatusChangeModal').close();\n      _inertiajs_vue3__WEBPACK_IMPORTED_MODULE_0__.router.patch(route('news.story.changeStatus'), {\n        newsStory_id: this.newsStoryId,\n        // Assuming you have the ID available in `newsStory`\n        new_status_id: statusId\n      }, {\n        onError: function onError(errors) {\n          console.error('Error changing status:', errors);\n        }\n      });\n    },\n    fetchNewsStories: function fetchNewsStories() {\n      var _arguments = arguments,\n        _this9 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n        var categoryId, subCategoryId, cityId, federalDistrictId, subnationalDistrictId, page, response, data;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) switch (_context7.prev = _context7.next) {\n            case 0:\n              categoryId = _arguments.length > 0 && _arguments[0] !== undefined ? _arguments[0] : null;\n              subCategoryId = _arguments.length > 1 && _arguments[1] !== undefined ? _arguments[1] : null;\n              cityId = _arguments.length > 2 && _arguments[2] !== undefined ? _arguments[2] : null;\n              federalDistrictId = _arguments.length > 3 && _arguments[3] !== undefined ? _arguments[3] : null;\n              subnationalDistrictId = _arguments.length > 4 && _arguments[4] !== undefined ? _arguments[4] : null;\n              page = _arguments.length > 5 && _arguments[5] !== undefined ? _arguments[5] : 1;\n              _context7.prev = 6;\n              _context7.next = 9;\n              return axios.get('/news-stories', {\n                params: {\n                  news_category_id: categoryId,\n                  news_category_sub_id: subCategoryId,\n                  city_id: cityId,\n                  federal_district_id: federalDistrictId,\n                  subnational_district_id: subnationalDistrictId,\n                  page: page\n                }\n              });\n            case 9:\n              response = _context7.sent;\n              data = response.data;\n              if (page === 1) {\n                _this9.newsStories = data.data;\n              } else {\n                _this9.newsStories = [].concat(_toConsumableArray(_this9.newsStories), _toConsumableArray(data.data));\n              }\n              _this9.currentPage = data.current_page;\n              _this9.totalPages = data.last_page;\n              _context7.next = 19;\n              break;\n            case 16:\n              _context7.prev = 16;\n              _context7.t0 = _context7[\"catch\"](6);\n              console.error('Failed to fetch news stories:', _context7.t0);\n            case 19:\n            case \"end\":\n              return _context7.stop();\n          }\n        }, _callee7, null, [[6, 16]]);\n      }))();\n    },\n    filterStoriesBySubCategory: function filterStoriesBySubCategory(subCategoryId, subCategoryName, subCategoryDescription) {\n      this.selectedSubCategoryId = subCategoryId;\n      this.selectedSubCategoryName = subCategoryName;\n      this.selectedSubCategoryDescription = subCategoryDescription;\n      this.fetchNewsStories(this.selectedCategoryId, subCategoryId, this.selectedCityId, this.selectedFederalDistrictId, this.selectedSubnationalDistrictId, 1);\n    },\n    resetFilter: function resetFilter() {\n      this.selectedSubCategoryId = null;\n      this.selectedSubCategoryName = '';\n      this.selectedSubCategoryDescription = '';\n    },\n    updateSelectedSubCategory: function updateSelectedSubCategory(subCategoryId) {\n      this.selectedSubCategoryId = subCategoryId;\n    },\n    initializeLatestStories: function initializeLatestStories(latestStories, newsCategoryId, newsCityId) {\n      this.latestStories = latestStories;\n      this.selectedCategoryId = newsCategoryId;\n      this.selectedCityId = newsCityId;\n    }\n  },\n  getters: {\n    filteredNewsStories: function filteredNewsStories(state) {\n      if (!state.selectedSubCategoryId) {\n        return state.latestStories;\n      }\n      return state.newsStories;\n    },\n    filteredCitySearchItems: function filteredCitySearchItems(state) {\n      if (!state.search) return state.citySearchItems;\n      return state.citySearchItems.filter(function (item) {\n        return item.name.toLowerCase().includes(state.search.toLowerCase());\n      });\n    },\n    searchInput: function searchInput(state) {\n      if (state.city.id) {\n        return \"\".concat(state.city.name, \", \").concat(state.province.name);\n      } else if (state.province.id) {\n        return state.province.name;\n      } else if (state.federalElectoralDistrict.id) {\n        return state.federalElectoralDistrict.name;\n      } else if (state.subnationalElectoralDistrict.id) {\n        return state.subnationalElectoralDistrict.name;\n      }\n      return state.search;\n    },\n    locationType: function locationType(state) {\n      if (!state.selectedLocation) {\n        state.type = '';\n        state.displayText = '';\n        return 'location type is not set';\n      }\n\n      // Assuming `selectedLocation` has a property to indicate its type\n      // Adjust the logic based on how you determine the type\n      switch (state.selectedLocation.type) {\n        case 'city':\n          state.type = 'city';\n          state.displayText = 'City';\n          break;\n        case 'town':\n          state.type = 'town';\n          state.displayText = 'Town';\n          break;\n        case 'province':\n          state.displayText = 'Province';\n          state.type = 'province';\n          break;\n        case 'territory':\n          state.displayText = 'Territory';\n          state.type = 'territory';\n          break;\n        case 'federalElectoralDistrict':\n          state.displayText = 'Federal Electoral District';\n          state.type = 'federalElectoralDistrict';\n          break;\n        case 'subnationalElectoralDistrict':\n          state.displayText = 'Subnational Electoral District';\n          state.type = 'subnationalElectoralDistrict';\n          break;\n        default:\n          state.displayText = '';\n          break;\n      }\n      return 'location type is set';\n    } // filteredNewsPersons: (state) => {\n    //     if (!state.searchQuery) return state.newsPersons;\n    //     return state.newsPersons.filter(person =>\n    //         person.user.name.toLowerCase().includes(state.searchQuery.toLowerCase())\n    //     );\n    // },\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/Stores/NewsStore.js\n");

/***/ })

}]);