"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk"] = self["webpackChunk"] || []).push([["resources_js_Stores_NewsStore_js"],{

/***/ "./resources/js/Stores/NewsStore.js":
/*!******************************************!*\
  !*** ./resources/js/Stores/NewsStore.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useNewsStore: () => (/* binding */ useNewsStore)\n/* harmony export */ });\n/* harmony import */ var pinia__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! pinia */ \"./node_modules/pinia/dist/pinia.mjs\");\n/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ \"./node_modules/vue/dist/vue.esm-bundler.js\");\n\n\nvar initialState = function initialState() {\n  return {\n    newsStory: [],\n    newsArticleIdTiptop: '',\n    newsArticleTitleTiptop: '',\n    newsArticleContentTiptop: '',\n    content_json: '',\n    news_category_id: null,\n    news_category_sub_id: null,\n    categories: [],\n    subcategories: [],\n    city_id: null,\n    province_id: null,\n    federal_electoral_district_id: null,\n    subnational_electoral_district_id: null,\n    type: '',\n    displayText: '',\n    country: [],\n    selectedCategory: [],\n    // initially no selected category\n    selectedSubcategory: [],\n    selectedLocation: [],\n    // the selected location\n    locationSearch: [],\n    // array of locations for the dropdown\n    citySelectDropdownVisible: false,\n    // visibility of the dropdown\n    focusedIndex: 0,\n    // for managing focused item in the dropdown\n    searchQuery: null,\n    filters: [],\n    search: '',\n    formErrors: []\n\n    // Computed property for displaying\n  };\n};\nvar useNewsStore = (0,pinia__WEBPACK_IMPORTED_MODULE_1__.defineStore)('newsStore', {\n  state: initialState,\n  actions: {\n    reset: function reset() {\n      // Reset the store to its original state (clear all data)\n      Object.assign(this, initialState());\n      // await this.setSelectedLocation()\n    },\n    // load NewsStory props into NewsStore\n    loadNewsStory: function loadNewsStory(newsStory) {\n      this.newsStory = newsStory;\n    },\n    // Action to set the selected Category\n    setSelectedCategory: function setSelectedCategory() {\n      var _this = this;\n      var matchingCategory = this.categories.find(function (category) {\n        return category.id === _this.news_category_id;\n      });\n      this.selectedCategory = matchingCategory || null;\n      if (this.news_category_sub_id) {\n        this.getSubcategories(); // After setting the category, get the subcategory\n        this.getSelectedSubcategory(); // Call after subcategories are populated\n      }\n      // Check if the selected category is 3 (Local News)\n      if (this.news_category_id === 3) {\n        this.setSelectedLocation(); // Set the Location for Local News\n      } else {\n        this.resetLocationIds(); // Reset location-related IDs for other categories\n      }\n    },\n    // Action to get the Subcategories\n    getSubcategories: function getSubcategories() {\n      var _this2 = this;\n      console.log('start getting subcategories');\n\n      // Find the matching category using selectedCategory.id\n      var matchingCategory = this.categories.find(function (category) {\n        return category.id === _this2.selectedCategory.id;\n      });\n      if (matchingCategory) {\n        // Set the subcategories from the matched category\n        this.subcategories = matchingCategory.news_category_subs;\n        console.log('subcategories updated:', this.subcategories);\n      } else {\n        // Handle the case where no matching category is found\n        this.subcategories = []; // Set subcategories to an empty array\n        console.log('No matching category found');\n      }\n    },\n    getSelectedSubcategory: function getSelectedSubcategory() {\n      var _this3 = this;\n      console.log('start getting selected subcategory');\n\n      // Find the subcategory that matches the news_category_sub_id\n      var matchingSubcategory = this.subcategories.find(function (subcategory) {\n        return subcategory.id === _this3.news_category_sub_id;\n      });\n      if (matchingSubcategory) {\n        // Set the selectedSubcategory to the found subcategory\n        this.selectedSubcategory = matchingSubcategory;\n        console.log('selected subcategory updated:', this.selectedSubcategory);\n      } else {\n        // Handle the case where no matching subcategory is found\n        this.selectedSubcategory = null;\n        console.log('No matching subcategory found');\n      }\n    },\n    // Action to set the selected Location\n    setSelectedLocation: function setSelectedLocation() {\n      var _this4 = this;\n      var matchingLocation = null;\n\n      // Simplified conditional logic\n      if (this.city_id) {\n        matchingLocation = this.locationSearch.find(function (location) {\n          return location.city_id === _this4.city_id;\n        });\n      } else if (this.province_id) {\n        matchingLocation = this.locationSearch.find(function (location) {\n          return location.province_id === _this4.province_id;\n        });\n      } else if (this.federal_electoral_district_id) {\n        matchingLocation = this.locationSearch.find(function (location) {\n          return location.federal_electoral_district_id === _this4.federal_electoral_district_id;\n        });\n      } else if (this.subnational_electoral_district_id) {\n        matchingLocation = this.locationSearch.find(function (location) {\n          return location.subnational_electoral_district.id === _this4.subnational_electoral_district_id;\n        });\n      }\n\n      // Handling null case\n      if (matchingLocation) {\n        this.selectedLocation = matchingLocation;\n\n        // Set displayText based on type\n        switch (this.type) {\n          case 'city':\n            this.displayText = 'City';\n            this.type = 'city';\n            break;\n          case 'town':\n            this.displayText = 'Town';\n            this.type = 'town';\n            break;\n          case 'province':\n            this.displayText = 'Province';\n            this.type = 'province';\n            break;\n          case 'territory':\n            this.displayText = 'Territory';\n            this.type = 'territory';\n            break;\n          case 'federalElectoralDistrict':\n            this.displayText = 'Federal Electoral District';\n            this.type = 'federalElectoralDistrict';\n            break;\n          case 'subnationalElectoralDistrict':\n            this.displayText = 'Subnational Electoral District';\n            this.type = 'subnationalElectoralDistrict';\n            break;\n          default:\n            this.displayText = '';\n            break;\n        }\n      } else {\n        // Handle the case where no matching location is found\n        this.selectedLocation = null;\n        this.selectedType = null;\n        this.city_id = null; // or keep the existing value?\n        this.type = null;\n        this.displayText = '';\n      }\n    },\n    // Action to set the selected Location\n    updateSelectedLocation: function updateSelectedLocation(location) {\n      if (!location) {\n        // Handle the case where no location is passed\n        this.selectedLocation = null;\n        this.displayText = '';\n        this.resetLocationIds(null);\n        return;\n      }\n\n      // Update the selectedLocation based on the type of location\n      this.selectedLocation = location;\n      this.displayText = this.getDisplayTextForType(location.type);\n\n      // Update the relevant IDs based on the type\n      this.city_id = null;\n      this.province_id = null;\n      this.federal_electoral_district_id = null;\n      this.subnational_electoral_district_id = null;\n      switch (location.type) {\n        case 'city':\n        case 'town':\n          this.city_id = location.city_id;\n          // Assuming province_id is also part of city data\n          this.province_id = location.province_id || null;\n          break;\n        case 'province':\n        case 'territory':\n          this.province_id = location.province_id;\n          break;\n        case 'federalElectoralDistrict':\n          this.federal_electoral_district_id = location.federal_electoral_district_id;\n          break;\n        case 'subnationalElectoralDistrict':\n          this.subnational_electoral_district_id = location.subnational_electoral_district_id;\n          break;\n        // Add more cases as needed for other types\n      }\n    },\n    // Helper function to get display text based on type\n    getDisplayTextForType: function getDisplayTextForType(type) {\n      switch (type) {\n        case 'city':\n          this.type = 'city';\n          return 'City';\n        case 'town':\n          this.type = 'town';\n          return 'Town';\n        case 'province':\n          this.type = 'province';\n          return 'Province';\n        case 'territory':\n          this.type = 'territory';\n          return 'Territory';\n        case 'federalElectoralDistrict':\n          this.type = 'federalElectoralDistrict';\n          return 'Federal Electoral District';\n        case 'subnationalElectoralDistrict':\n          this.type = 'subnationalElectoralDistrict';\n          return 'Subnational Electoral District';\n        default:\n          return '';\n      }\n    },\n    // Helper function to reset location IDs\n    resetLocationIds: function resetLocationIds(matchingLocation) {\n      this.city_id = null;\n      this.province_id = null;\n      this.federal_electoral_district_id = null;\n      this.subnational_electoral_district_id = null;\n      if (matchingLocation) {\n        switch (matchingLocation.type) {\n          case 'city':\n            this.city_id = matchingLocation.city_id;\n            this.province_id = matchingLocation.province_id; // Assuming province_id is also part of city data\n            break;\n          case 'province':\n          case 'territory':\n            this.province_id = matchingLocation.province_id;\n            break;\n          case 'federalElectoralDistrict':\n            this.federal_electoral_district_id = matchingLocation.federal_electoral_district_id;\n            break;\n          case 'subnationalElectoralDistrict':\n            this.subnational_electoral_district_id = matchingLocation.subnational_electoral_district_id;\n            break;\n          // ... handle other types if needed\n        }\n      }\n    }\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/Stores/NewsStore.js\n");

/***/ })

}]);